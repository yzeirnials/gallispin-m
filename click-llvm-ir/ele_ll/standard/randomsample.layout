
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c23fc00288 prev 0x55c23fbf7a28 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c23fc00380 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55c23fc00410 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55c23fc00488 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55c23fc00548 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55c23fc00610 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55c23fc00788 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55c23fc006c0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55c23fc00830 <col:24>
| `-OptimizeNoneAttr 0x55c23fc00888 <col:34>
|-CXXMethodDecl 0x55c23fc008d0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55c23fc00b88 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55c23fc00980 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55c23fc009f8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55c23fc00a78 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55c23fc00c40 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55c23fc00c78 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55c23fc00ce0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55c23fc00d68 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55c23fc01088 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55c23fc00e20 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55c23fc00e98 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55c23fc00f10 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55c23fc00f90 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55c23fc011a0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55c23fc08b18 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55c23fc08b18
| `-ParmVarDecl 0x55c23fc08c28 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55c23fc08cc8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55c23fc08cc8
| `-ParmVarDecl 0x55c23fc08dd8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55c23fcefcd8 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c23fbf32a0 prev 0x55c23fbf3020 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55c23fbf3398 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55c23fbf3428 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55c23fbf3488 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55c23fbf3578 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55c23fbf3678 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55c23fbf3848 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55c23fbf36f8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55c23fbf3770 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55c23fbf39d8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55c23fbf3910 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55c23fbf3a80 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55c23fbf3bb8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55c23fbf3af0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55c23fbf3d58 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55c23fbf3c98 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55c23fbf3ef8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55c23fbf3e38 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55c23fbf3fa0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55c23fbf40a0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55c23fbf4180 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbf4080 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55c23fbf4060 <col:26> 'int' 1
| `-EnumConstantDecl 0x55c23fbf4130 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55c23fbf4198 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c23fbf4110 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55c23fbf40f0 <col:44> 'int' 2
|-CXXMethodDecl 0x55c23fbf42e0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55c23fbf41c8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55c23fbf4248 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55c23fbf4438 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55c23fbf43a8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55c23fbf4678 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55c23fbf44f8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55c23fbf4570 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55c23fbf4728 <col:20>
| `-OptimizeNoneAttr 0x55c23fbf4780 <col:30>
|-CXXMethodDecl 0x55c23fbf4888 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55c23fbf47c0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55c23fbf4930 <col:20>
| `-OptimizeNoneAttr 0x55c23fbf4988 <col:30>
|-CXXMethodDecl 0x55c23fbf49d8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55c23fbf4aa0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55c23fbf4bb8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55c23fbf4c40 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55c23fbf4cc8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55c23fbf4d50 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x55c23fbf4dd8 <line:59:5, col:35> col:23 used PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55c23fbf4e68 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55c23fbf4f28 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55c23fbf4fb0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55c23fbf5038 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55c23fbf50c0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55c23fbf5148 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55c23fbf51d0 <line:67:5, col:39> col:23 used PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55c23fbf5260 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55c23fbf5320 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55c23fbf53b0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55c23fbf5500 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55c23fbf5468 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55c23fbf5690 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55c23fbf55c0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55c23fbf5940 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55c23fbf5748 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55c23fbf57c8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55c23fbf5848 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55c23fbf59f8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55c23fbf5b00 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55c23fbf5d90 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbf5ae0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55c23fbf5ac0 <col:33> 'int' 0
| |-EnumConstantDecl 0x55c23fbf5b90 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55c23fbf5da8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbf5b70 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55c23fbf5b50 <col:32> 'int' 20
| |-EnumConstantDecl 0x55c23fbf5c20 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55c23fbf5dc0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbf5c00 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55c23fbf5be0 <col:38> 'int' 90
| |-EnumConstantDecl 0x55c23fbf5cb0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55c23fbf5dd8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbf5c90 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55c23fbf5c70 <col:35> 'int' 100
| `-EnumConstantDecl 0x55c23fbf5d40 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55c23fbf5df0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c23fbf5d20 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55c23fbf5d00 <col:32> 'int' 2000
|-CXXMethodDecl 0x55c23fbf5e30 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55c23fbf6270 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55c23fbf60e0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55c23fbf6158 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c23fbf6340 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55c23fbf64c0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55c23fbf63f0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c23fbf66c8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55c23fbf6578 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55c23fbf65f0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c23fbf67c8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55c23fbf6868 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55c23fbf6930 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c23fbf69c0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55c23fbf6bf0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbf69a0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55c23fbf6980 <col:36> 'int' EnumConstant 0x55c23fbf6930 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c23fbf6a10 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c23fbf6a60 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c23fbf6ab0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c23fbf6b00 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c23fbf6b50 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55c23fbf6ba0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55c23fbf6cd8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55c23fbf6c18 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55c23fbf6da0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55c23fbf6e60 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55c23fbf6f20 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55c23fbf6fe0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55c23fbf70f8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55c23fbf71c0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55c23fbf7340 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55c23fbf7270 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55c23fbf7468 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55c23fbf7668 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55c23fbf7518 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55c23fbf7598 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55c23fc04fb8 <col:54, line:127:5>
|   |-ParenExpr 0x55c23fc04e68 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55c23fc04e38 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55c23fc04b28 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55c23fc04b00 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55c23fc04ae8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55c23fc04ad0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55c23fc04aa0 <col:31> 'Router *' lvalue ->_router 0x55c23fc02980
|   |   |         `-CXXThisExpr 0x55c23fc04a90 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55c23fc04b88 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c23fc04b68 <col:48> 'int' 0
|   |   `-CallExpr 0x55c23fc04d98 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55c23fc04d80 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c23fc04d60 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c23f72d970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c23fc04dd8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fc04bf8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55c23fc04df0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fc04c18 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55c23fc04e08 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c23fc04c50 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55c23fc04e20 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c23fc04d48 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c23fc04d30 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c23fc04ce8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55c23fc04f00 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55c23fc04e98 <col:9> 'Router *' lvalue ->_router 0x55c23fc02980
|   | | `-CXXThisExpr 0x55c23fc04e88 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55c23fc04ee8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c23fc04ec8 <col:19> 'Router *' lvalue ParmVar 0x55c23fbf7518 'r' 'Router *'
|   `-BinaryOperator 0x55c23fc04f98 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55c23fc04f30 <col:9> 'int' lvalue ->_eindex 0x55c23fc029e8
|     | `-CXXThisExpr 0x55c23fc04f20 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55c23fc04f80 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55c23fc04f60 <col:19> 'int' lvalue ParmVar 0x55c23fbf7598 'eindex' 'int'
|-CXXMethodDecl 0x55c23fbf77f0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55c23fbf7728 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55c23fbf78c0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55c23fbf7988 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55c23fbf7a28 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55c23fbf7c78 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55c23fbf7af0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55c23fbf7b70 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55c23fbf7d28 <col:20>
| `-OptimizeNoneAttr 0x55c23fbf7d80 <col:30>
|-CXXMethodDecl 0x55c23fbf7e88 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55c23fbf7dc0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55c23fbf7f30 <col:20>
| `-OptimizeNoneAttr 0x55c23fbf7f88 <col:30>
|-CXXMethodDecl 0x55c23fbf8058 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55c23fbf7fc8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55c23fbf8100 <col:20>
| `-OptimizeNoneAttr 0x55c23fbf8158 <col:30>
|-CXXMethodDecl 0x55c23fbf82e8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55c23fbf8190 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55c23fbf8210 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55c23fbf8478 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55c23fbf83b0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55c23fbf85c8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55c23fbf8538 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55c23fbf8718 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55c23fbf8688 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55c23fbf8868 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55c23fbf87d8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55c23fbf8b28 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55c23fbf8920 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55c23fbf89a0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55c23fbf8a48 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55c23fbf8c00 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55c23fbf8cc0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55c23fbf8f90 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55c23fbf8e40 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55c23fbf8eb8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55c23fbf90b8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55c23fbf9290 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55c23fbf9170 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55c23fbf91f0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55c23fbf9478 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55c23fbf9358 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55c23fbf93d8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55c23fbf97e8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55c23fbf9538 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55c23fbf95b0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55c23fbf9630 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55c23fc045a0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55c23fc04580 <col:106> 'int' 0
| `-ParmVarDecl 0x55c23fbf96a8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c23fc045d8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c23fc045b8 <col:126> 'int' 0
|-CXXMethodDecl 0x55c23fbf9b88 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55c23fbf98b8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55c23fbf9950 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55c23fbf99d0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55c23fbf9a48 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c23fc04610 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c23fc045f0 <col:114> 'int' 0
|-CXXMethodDecl 0x55c23fbf9f18 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55c23fbf9c60 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55c23fbf9cd8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55c23fbf9d58 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55c23fc04628 <col:96> 'int' 0
| `-ParmVarDecl 0x55c23fbf9dd0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c23fc04668 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c23fc04648 <col:116> 'int' 0
|-CXXMethodDecl 0x55c23fbfa298 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55c23fbf9fe8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55c23fbfa060 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55c23fbfa0e0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55c23fc046a0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55c23fc04680 <col:109> 'int' 0
| `-ParmVarDecl 0x55c23fbfa158 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c23fc046d8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c23fc046b8 <col:129> 'int' 0
|-CXXMethodDecl 0x55c23fbfa618 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55c23fbfa368 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55c23fbfa3e0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55c23fbfa460 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55c23fbfa4d8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c23fc04710 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c23fc046f0 <col:117> 'int' 0
|-CXXMethodDecl 0x55c23fbfa9a8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55c23fbfa6f0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c23fbfa768 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55c23fbfa7e8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55c23fc04728 <col:99> 'int' 0
| `-ParmVarDecl 0x55c23fbfa860 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c23fc04768 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c23fc04748 <col:119> 'int' 0
|-CXXMethodDecl 0x55c23fbfadc8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55c23fbfaa78 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55c23fbfaaf8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55c23fbfab70 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55c23fbfabf0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55c23fc047a0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55c23fc04780 <col:108> 'int' 0
| `-ParmVarDecl 0x55c23fbfac70 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55c23fc047d8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55c23fc047b8 <col:141> 'int' 0
|-CXXMethodDecl 0x55c23fbfb1e8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55c23fbfaea0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55c23fbfaf20 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55c23fbfaf98 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55c23fbfb018 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55c23fbfb098 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55c23fc047f0 <col:121> 'int' 0
|-CXXMethodDecl 0x55c23fbfb618 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55c23fbfb2c8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55c23fbfb348 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55c23fbfb3c0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55c23fbfb440 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55c23fc04810 <col:98> 'int' 0
| `-ParmVarDecl 0x55c23fbfb4c0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55c23fc04830 <col:123> 'int' 0
|-CXXMethodDecl 0x55c23fbfb8e0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55c23fbfb6f0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55c23fbfb770 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55c23fbfb7f0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55c23fc04850 <col:80> 'int' 0
|-EnumDecl 0x55c23fbfb998 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55c23fbfbaa0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55c23fbfbd30 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbfba80 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55c23fbfba60 <col:42> 'int' 1
| |-EnumConstantDecl 0x55c23fbfbb30 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55c23fbfbd48 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbfbb10 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55c23fbfbaf0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55c23fbfbbc0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55c23fbfbd60 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbfbba0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55c23fbfbb80 <col:44> 'int' 4
| |-EnumConstantDecl 0x55c23fbfbc50 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55c23fbfbd78 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbfbc30 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55c23fbfbc10 <col:36> 'int' 7
| `-EnumConstantDecl 0x55c23fbfbce0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55c23fbfbd90 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c23fbfbcc0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55c23fbfbca0 <col:34> 'int' 6
|-CXXMethodDecl 0x55c23fbfc048 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55c23fbfbdb8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55c23fbfbe58 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55c23fbfbed8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55c23fbfbf50 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55c23fc04908 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55c23fc048f0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55c23fc048d8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55c23fc048b8 <col:98, col:105> 'String' (CXXTemporary 0x55c23fc048b8)
|           `-CXXTemporaryObjectExpr 0x55c23fc04880 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55c23fbfc2e8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55c23fbfc118 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55c23fbfc190 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55c23fbfc208 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55c23fc049b8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55c23fc049a0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55c23fc04988 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55c23fc04968 <col:94, col:101> 'String' (CXXTemporary 0x55c23fc04968)
| |         `-CXXTemporaryObjectExpr 0x55c23fc04930 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55c23fc051a0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55c23fc05118 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55c23fc050e8 <col:9> '<bound member function type>' ->add_task_handlers 0x55c23fbfc048
|     | `-CXXThisExpr 0x55c23fc050d8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55c23fc05158 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55c23fc05058 <col:27> 'Task *' lvalue ParmVar 0x55c23fbfc118 'task' 'Task *'
|     |-ImplicitCastExpr 0x55c23fc05170 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55c23fc05078 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55c23fbfc190 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55c23fc05188 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55c23fc05098 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55c23fbfbce0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55c23fc050b8 <col:62> 'const String' lvalue ParmVar 0x55c23fbfc208 'prefix' 'const String &'
|-CXXMethodDecl 0x55c23fbfc4f8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55c23fbfc3b0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55c23fbfc428 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55c23fc04a68 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55c23fc04a50 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55c23fc04a38 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55c23fc04a18 <col:70, col:77> 'String' (CXXTemporary 0x55c23fc04a18)
| |         `-CXXTemporaryObjectExpr 0x55c23fc049e0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55c23fc05378 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55c23fc052f0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55c23fc052c0 <col:9> '<bound member function type>' ->add_task_handlers 0x55c23fbfc048
|     | `-CXXThisExpr 0x55c23fc052b0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55c23fc05330 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55c23fc05230 <col:27> 'Task *' lvalue ParmVar 0x55c23fbfc3b0 'task' 'Task *'
|     |-ImplicitCastExpr 0x55c23fc05348 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55c23fc05250 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55c23fc05360 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55c23fc05270 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55c23fbfbce0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55c23fc05290 <col:57> 'const String' lvalue ParmVar 0x55c23fbfc428 'prefix' 'const String &'
|-CXXMethodDecl 0x55c23fbfc7d8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55c23fbfc5c0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c23fbfc640 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c23fbfc6b8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55c23fbfca88 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55c23fbfc8a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c23fbfc928 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c23fbfc9a8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55c23fbfcd78 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55c23fbfcb58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c23fbfcbd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c23fbfcc50 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55c23fbfd028 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55c23fbfce48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c23fbfcec8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c23fbfcf48 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55c23fbfd2d8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55c23fbfd0f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c23fbfd178 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c23fbfd1f8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55c23fbfd588 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55c23fbfd3a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c23fbfd428 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c23fbfd4a0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55c23fbfd838 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55c23fbfd658 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c23fbfd6d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c23fbfd758 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55c23fbfdb48 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55c23fbfd960 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c23fbfd9e0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c23fbfda60 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55c23fbfde28 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55c23fbfdc18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c23fbfdc98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c23fbfdd40 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55c23fbfe108 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55c23fbfdef8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c23fbfdf78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c23fbfe020 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55c23fbfe370 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55c23fbfe1d8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55c23fbfe258 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55c23fbfe2d0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55c23fbfe618 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55c23fbfe440 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55c23fbfe4c0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55c23fbfe538 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55c23fbfe8c8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55c23fbfe6e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c23fbfe768 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c23fbfe7e8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55c23fbfeb78 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55c23fbfe998 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c23fbfea18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c23fbfea90 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55c23fbfee28 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55c23fbfec48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c23fbfecc8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c23fbfed40 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55c23fbff0f8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55c23fbfeef8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c23fbfef78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c23fbff018 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55c23fbff428 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55c23fbff1c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c23fbff248 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55c23fbff2c0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55c23fbff338 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c23fc04a80 <col:93> 'bool' false
|-CXXMethodDecl 0x55c23fbff610 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55c23fbff4f8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55c23fbff578 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55c23fbff7e8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55c23fbff6d0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55c23fbff750 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55c23fbffac8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55c23fbff8a8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55c23fbff920 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55c23fbff9a0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55c23fbffa18 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55c23fbffdb8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55c23fbffb98 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55c23fbffc10 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55c23fbffc90 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55c23fbffd08 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55c23fbffff0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55c23fbffe90 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55c23fbfff10 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55c23fc001d8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55c23fc000b8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55c23fc00138 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55c23fc00288 prev 0x55c23fbf7a28 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55c23fc00380 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55c23fc00410 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55c23fc00488 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55c23fc00548 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55c23fc00610 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55c23fc00788 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55c23fc006c0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55c23fc00830 <col:24>
| | `-OptimizeNoneAttr 0x55c23fc00888 <col:34>
| |-CXXMethodDecl 0x55c23fc008d0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55c23fc00b88 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55c23fc00980 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55c23fc009f8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55c23fc00a78 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55c23fc00c40 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55c23fc00c78 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55c23fc00ce0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55c23fc00d68 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55c23fc01088 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55c23fc00e20 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55c23fc00e98 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55c23fc00f10 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55c23fc00f90 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55c23fc011a0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55c23fc08b18 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55c23fc08b18
| | `-ParmVarDecl 0x55c23fc08c28 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55c23fc08cc8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55c23fc08cc8
| | `-ParmVarDecl 0x55c23fc08dd8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55c23fcefcd8 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55c23fc01218 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55c23fc012b8 <col:38> "" ""
|-CXXMethodDecl 0x55c23fc01348 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55c23fc013e8 <col:44> "" ""
|-AccessSpecDecl 0x55c23fc01458 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55c23fc01480 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55c23fc01580 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55c23fc015d0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c23fc01560 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55c23fc01540 <col:27> 'int' 4
|-FieldDecl 0x55c23fc01688 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55c23fc01838 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55c23fc018f0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55c23fc02980 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55c23fc029e8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55c23fc02b38 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55c23fc02a78 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55c23fc02ce8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55c23fc02bf8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55c23fc02ec8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55c23fc02da8 <col:20> col:23 'int'
| `-ParmVarDecl 0x55c23fc02e28 <col:25> col:28 'int'
|-CXXMethodDecl 0x55c23fc03170 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55c23fc02f90 <col:23> col:26 'int'
| |-ParmVarDecl 0x55c23fc03010 <col:28> col:31 'int'
| `-ParmVarDecl 0x55c23fc03088 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55c23fc03228 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55c23fc032f0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55c23fc03340 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55c23fc03390 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55c23fc03570 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55c23fc03420 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55c23fc03498 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c23fc03818 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55c23fc03638 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55c23fc036b8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55c23fc03730 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55c23fc03a38 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55c23fc038e8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55c23fc03968 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55c23fc03d70 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55c23fc03af8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55c23fc03b78 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55c23fc03bf0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55c23fc03c70 <col:57> col:60 'int'
|-CXXMethodDecl 0x55c23fc03f58 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55c23fc03e40 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55c23fc03ec0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55c23fc040a8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55c23fc04018 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55c23fc04428 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55c23fc04168 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55c23fc041e8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55c23fc04260 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55c23fc042e0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55c23fc04540 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class RandomSample
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   uint32_t _sampling_prob
       112 |   _Bool _active
       116 |   class atomic_uint32_t _drops
       116 |     uint32_t _val
           | [sizeof=120, dsize=120, align=8,
           |  nvsize=120, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c23f9b1d50 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c23f9b1e68 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55c23f9b1ef8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55c23f9b1fc8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55c23f9b20b0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55c23f9b22c8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55c23f9b2170 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c23f9b2478 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55c23f9b2380 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55c23f9b25c0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55c23f9b2530 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55c23f9b2708 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55c23f9b2678 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c23f9b2850 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55c23f9b27c0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c23f9b2918 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55c23f9b2a60 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55c23f9b29d0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55c23f9b2b28 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55c23f9b2c70 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55c23f9b2be0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55c23f9b2de8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55c23f9b2d28 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c23f9b2f30 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55c23f9b2ea0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c23f9b2ff8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55c23f9b31b8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55c23f9b30a8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55c23f9b3120 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c23f9b3408 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55c23f9b3278 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c23f9b32f0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55c23f9b34b8 <col:86> "" ""
|-CXXMethodDecl 0x55c23f9b3728 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55c23f9b3598 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55c23f9b3610 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c23f9b38d8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55c23f9b37e8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55c23f9b3a88 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55c23f9b3990 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55c23f9b3d58 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55c23f9b3b40 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55c23f9b3bb8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55c23f9b3c30 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c23f9b4038 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55c23f9b3e20 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55c23f9b3e98 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c23f9b3f10 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55c23f9b40f0 <col:115> "" ""
|-AccessSpecDecl 0x55c23f9b4160 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55c23f9b4198 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c23f9b56b0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55c23f9b56b0
| `-ParmVarDecl 0x55c23f9b57b8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55c23f9b5858 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55c23f9b5858
| `-ParmVarDecl 0x55c23f9b5968 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55c23f9eaf98 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55c23fbdcd90 <col:7>
|-CXXConstructorDecl 0x55c23f9eb070 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55c23f9eb070
| `-ParmVarDecl 0x55c23f9eb188 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55c23f9eb1f8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55c23f9eb1f8
| `-ParmVarDecl 0x55c23f9eb308 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55c23fbdf790 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c23fc0bc88 <../elements/standard/randomsample.hh:65:1, line:94:1> line:65:7 class RandomSample definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55c23fc0bde8 <col:1, col:7> col:7 implicit referenced class RandomSample
|-AccessSpecDecl 0x55c23fc0be78 <col:39, col:45> col:39 public
|-CXXConstructorDecl 0x55c23fc0bf00 <line:67:5, col:18> col:5 RandomSample 'void ()'
|-CXXMethodDecl 0x55c23fc0c000 <line:69:5, col:61> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x55c23fbf49d8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55c23fc0de30 <col:36, col:61>
|   `-ReturnStmt 0x55c23fc0de20 <col:38, col:45>
|     `-ImplicitCastExpr 0x55c23fc0de08 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55c23fc0dde0 <col:45> 'const char [13]' lvalue "RandomSample"
|-CXXMethodDecl 0x55c23fc0c0c8 <line:70:5, col:58> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x55c23fbf4aa0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55c23fc0de90 <col:36, col:58>
|   `-ReturnStmt 0x55c23fc0de80 <col:38, col:45>
|     `-ImplicitCastExpr 0x55c23fc0de68 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55c23fc0de48 <col:45> 'const char []' lvalue Var 0x55c23fbf4dd8 'PORTS_1_1X2' 'const char []'
|-CXXMethodDecl 0x55c23fc0c190 <line:71:5, col:62> col:17 processing 'const char *() const'
| |-Overrides: [ 0x55c23fbf4e68 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x55c23fc0def0 <col:36, col:62>
|   `-ReturnStmt 0x55c23fc0dee0 <col:38, col:45>
|     `-ImplicitCastExpr 0x55c23fc0dec8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55c23fc0dea8 <col:45> 'const char []' lvalue Var 0x55c23fbf51d0 'PROCESSING_A_AH' 'const char []'
|-CXXMethodDecl 0x55c23fc0c460 <line:73:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55c23fbf6270 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55c23fc0c310 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x55c23fc0c388 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x55c23fc0c5b8 <line:74:5, col:34> col:9 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x55c23fbf64c0 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x55c23fc0c520 <col:20, col:33> col:34 'ErrorHandler *'
|-CXXMethodDecl 0x55c23fc0c680 <line:75:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x55c23fbf8cc0 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x55c23fc0df28 <col:39, col:54>
|   `-ReturnStmt 0x55c23fc0df18 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x55c23fc0df08 <col:48> 'bool' true
|-CXXMethodDecl 0x55c23fc0c740 <line:76:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x55c23fbf6340 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x55c23fc0c908 <line:78:5, col:33> col:10 push 'void (int, Packet *)'
| |-Overrides: [ 0x55c23fbf3848 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x55c23fc0c7f8 <col:15, col:19> col:19 port 'int'
| `-ParmVarDecl 0x55c23fc0c870 <col:25, col:32> col:33 'Packet *'
|-CXXMethodDecl 0x55c23fc0ca60 <line:79:5, col:26> col:13 pull 'Packet *(int)'
| |-Overrides: [ 0x55c23fbf39d8 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x55c23fc0c9d0 <col:18, col:22> col:22 port 'int'
|-AccessSpecDecl 0x55c23fc0cb08 <line:81:3, col:10> col:3 private
|-EnumDecl 0x55c23fc0cb30 <line:83:5, col:32> col:5
| `-EnumConstantDecl 0x55c23fc0cc30 <col:12, col:29> col:12 referenced SAMPLING_SHIFT 'RandomSample::(anonymous enum at ../elements/standard/randomsample.hh:83:5)'
|   `-ImplicitCastExpr 0x55c23fc0cc80 <col:29> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c23fc0cc10 <col:29> 'int' Int: 28
|       `-IntegerLiteral 0x55c23fc0cbf0 <col:29> 'int' 28
|-EnumDecl 0x55c23fc0cc98 <line:84:5, col:54> col:5
| `-EnumConstantDecl 0x55c23fc0ce58 <col:12, col:52> col:12 SAMPLING_MASK 'RandomSample::(anonymous enum at ../elements/standard/randomsample.hh:84:5)'
|   `-ImplicitCastExpr 0x55c23fc0cea8 <col:28, col:52> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c23fc0ce38 <col:28, col:52> 'int' Int: 268435455
|       `-BinaryOperator 0x55c23fc0ce18 <col:28, col:52> 'int' '-'
|         |-ParenExpr 0x55c23fc0cdd8 <col:28, col:48> 'int'
|         | `-BinaryOperator 0x55c23fc0cdb8 <col:29, col:34> 'int' '<<'
|         |   |-IntegerLiteral 0x55c23fc0cd60 <col:29> 'int' 1
|         |   `-ImplicitCastExpr 0x55c23fc0cda0 <col:34> 'int' <IntegralCast>
|         |     `-DeclRefExpr 0x55c23fc0cd80 <col:34> 'RandomSample::(anonymous enum at ../elements/standard/randomsample.hh:83:5)' EnumConstant 0x55c23fc0cc30 'SAMPLING_SHIFT' 'RandomSample::(anonymous enum at ../elements/standard/randomsample.hh:83:5)'
|         `-IntegerLiteral 0x55c23fc0cdf8 <col:52> 'int' 1
|-EnumDecl 0x55c23fc0cec0 <line:86:5, col:39> col:5
| |-EnumConstantDecl 0x55c23fc0cf80 <col:12> col:12 h_sample 'RandomSample::(anonymous enum at ../elements/standard/randomsample.hh:86:5)'
| |-EnumConstantDecl 0x55c23fc0cfd0 <col:22> col:22 h_drop 'RandomSample::(anonymous enum at ../elements/standard/randomsample.hh:86:5)'
| `-EnumConstantDecl 0x55c23fc0d020 <col:30> col:30 h_config 'RandomSample::(anonymous enum at ../elements/standard/randomsample.hh:86:5)'
|-FieldDecl 0x55c23fc0d080 <line:88:5, col:14> col:14 _sampling_prob 'uint32_t':'unsigned int'
|-FieldDecl 0x55c23fc0d0e0 <line:89:5, col:10> col:10 _active 'bool'
|-FieldDecl 0x55c23fc0d140 <line:90:5, col:21> col:21 _drops 'atomic_uint32_t'
|-CXXMethodDecl 0x55c23fc0d2b8 <line:92:5, col:49> col:19 read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55c23fc0d1a0 <col:32, col:40> col:41 'Element *'
| `-ParmVarDecl 0x55c23fc0d220 <col:43, col:48> col:49 'void *'
|-CXXMethodDecl 0x55c23fc0d598 <line:93:5, col:79> col:16 write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55c23fc0d378 <col:30, col:43> col:44 'const String &'
| |-ParmVarDecl 0x55c23fc0d3f0 <col:46, col:54> col:55 'Element *'
| |-ParmVarDecl 0x55c23fc0d470 <col:57, col:62> col:63 'void *'
| `-ParmVarDecl 0x55c23fc0d4e8 <col:65, col:78> col:79 'ErrorHandler *'
|-CXXConstructorDecl 0x55c23fc0d688 <line:65:7> col:7 implicit RandomSample 'void (const RandomSample &)' inline default_delete noexcept-unevaluated 0x55c23fc0d688
| `-ParmVarDecl 0x55c23fc0d798 <col:7> col:7 'const RandomSample &'
|-CXXConstructorDecl 0x55c23fc0d838 <col:7> col:7 implicit RandomSample 'void (RandomSample &&)' inline default_delete noexcept-unevaluated 0x55c23fc0d838
| `-ParmVarDecl 0x55c23fc0d948 <col:7> col:7 'RandomSample &&'
|-CXXMethodDecl 0x55c23fc0d9e8 <col:7> col:7 implicit operator= 'RandomSample &(const RandomSample &)' inline default_delete noexcept-unevaluated 0x55c23fc0d9e8
| `-ParmVarDecl 0x55c23fc0daf8 <col:7> col:7 'const RandomSample &'
|-CXXMethodDecl 0x55c23fc0db68 <col:7> col:7 implicit operator= 'RandomSample &(RandomSample &&)' inline default_delete noexcept-unevaluated 0x55c23fc0db68
| `-ParmVarDecl 0x55c23fc0dc78 <col:7> col:7 'RandomSample &&'
`-CXXDestructorDecl 0x55c23fc0dd00 <col:7> col:7 implicit ~RandomSample 'void ()' inline default noexcept-unevaluated 0x55c23fc0dd00
  `-Overrides: [ 0x55c23fbf3578 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.RandomSample = type { %class.Element.base, i32, i8, %class.atomic_uint32_t }
  NonVirtualBaseLLVMType:%class.RandomSample = type { %class.Element.base, i32, i8, %class.atomic_uint32_t }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c23f9c7140 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55c23f9c7258 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55c23f9c72f8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55c23f9c7358 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55c23f9c73b8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55c23f9c7468 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c23f9c7770 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c23f9c7888 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55c23f9c7930 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55c23f9c7998 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55c23f9c7a28 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55c23f9cdac0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55c23f9cdef8 <col:12>
|-CXXConstructorDecl 0x55c23f9cdbc8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55c23f9cdcd8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55c23f9c7930 'data' 'const char *'
| | `-ImplicitCastExpr 0x55c23f9d0480 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55c23f9d0450 <col:12> 'const char *const' lvalue .data 0x55c23f9c7930
| |     `-DeclRefExpr 0x55c23f9d0430 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c23f9cdcd8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55c23f9c7998 'length' 'int'
| | `-ImplicitCastExpr 0x55c23f9d0510 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55c23f9d04e0 <col:12> 'const int' lvalue .length 0x55c23f9c7998
| |     `-DeclRefExpr 0x55c23f9d04c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c23f9cdcd8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55c23f9c7a28 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55c23f9d05a0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55c23f9d0570 <col:12> 'String::memo_t *const' lvalue .memo 0x55c23f9c7a28
| |     `-DeclRefExpr 0x55c23f9d0550 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c23f9cdcd8 '' 'const String::rep_t &'
| `-CompoundStmt 0x55c23f9d05f8 <col:12>
|-CXXConstructorDecl 0x55c23f9cdd78 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55c23f9cdd78
| `-ParmVarDecl 0x55c23f9cde88 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55c23f9d33e0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55c23f9dedf8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55c23f9def08 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55c23f9df420 <col:12>
|   |-BinaryOperator 0x55c23f9df238 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55c23f9df1f0 <col:12> 'const char *' lvalue ->data 0x55c23f9c7930
|   | | `-CXXThisExpr 0x55c23f9df1e0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55c23f9df220 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55c23f9df1b0 <col:12> 'const char *const' lvalue .data 0x55c23f9c7930
|   |     `-DeclRefExpr 0x55c23f9df190 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c23f9def08 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55c23f9df300 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55c23f9df2b8 <col:12> 'int' lvalue ->length 0x55c23f9c7998
|   | | `-CXXThisExpr 0x55c23f9df2a8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55c23f9df2e8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55c23f9df278 <col:12> 'const int' lvalue .length 0x55c23f9c7998
|   |     `-DeclRefExpr 0x55c23f9df258 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c23f9def08 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55c23f9df3c8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55c23f9df380 <col:12> 'String::memo_t *' lvalue ->memo 0x55c23f9c7a28
|   | | `-CXXThisExpr 0x55c23f9df370 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55c23f9df3b0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55c23f9df340 <col:12> 'String::memo_t *const' lvalue .memo 0x55c23f9c7a28
|   |     `-DeclRefExpr 0x55c23f9df320 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c23f9def08 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55c23f9df410 <col:12>
|     `-UnaryOperator 0x55c23f9df3f8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c23f9df3e8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55c23f9def78 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55c23f9def78
  `-ParmVarDecl 0x55c23f9df088 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c23f9be6b0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55c23f9be7c8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55c23f9be858 <col:16, col:22> col:16 public
|-TypedefDecl 0x55c23f9be898 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55c23f691dc0 'const char *'
|   `-QualType 0x55c23f691311 'const char' const
|     `-BuiltinType 0x55c23f691310 'char'
|-TypedefDecl 0x55c23f9be920 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55c23f9be8f0 'String::const_iterator' sugar
|   |-Typedef 0x55c23f9be898 'const_iterator'
|   `-PointerType 0x55c23f691dc0 'const char *'
|     `-QualType 0x55c23f691311 'const char' const
|       `-BuiltinType 0x55c23f691310 'char'
|-TypedefDecl 0x55c23f9bea90 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55c23f9bea00 'int (String::*)() const'
|   |-RecordType 0x55c23f9be740 'String'
|   | `-CXXRecord 0x55c23f9be6b0 'String'
|   `-ParenType 0x55c23f9be9a0 'int () const' sugar
|     `-FunctionProtoType 0x55c23f992530 'int () const' const cdecl
|       `-BuiltinType 0x55c23f691370 'int'
|-TypedefDecl 0x55c23f9beaf8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55c23f7e7110 'int64_t' sugar
|   |-Typedef 0x55c23f6fa2d0 'int64_t'
|   `-TypedefType 0x55c23f6d34d0 '__int64_t' sugar
|     |-Typedef 0x55c23f6d30a8 '__int64_t'
|     `-BuiltinType 0x55c23f691390 'long'
|-TypedefDecl 0x55c23f9beb60 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55c23f7e7030 'uint64_t' sugar
|   |-Typedef 0x55c23f6fa470 'uint64_t'
|   `-TypedefType 0x55c23f6d3560 '__uint64_t' sugar
|     |-Typedef 0x55c23f6d3118 '__uint64_t'
|     `-BuiltinType 0x55c23f691430 'unsigned long'
|-TypedefDecl 0x55c23f9bebf0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55c23f9bebc0 'String::intmax_t' sugar
|   |-Typedef 0x55c23f9beaf8 'intmax_t'
|   `-TypedefType 0x55c23f7e7110 'int64_t' sugar
|     |-Typedef 0x55c23f6fa2d0 'int64_t'
|     `-TypedefType 0x55c23f6d34d0 '__int64_t' sugar
|       |-Typedef 0x55c23f6d30a8 '__int64_t'
|       `-BuiltinType 0x55c23f691390 'long'
|-TypedefDecl 0x55c23f9bec80 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55c23f9bec50 'String::uintmax_t' sugar
|   |-Typedef 0x55c23f9beb60 'uintmax_t'
|   `-TypedefType 0x55c23f7e7030 'uint64_t' sugar
|     |-Typedef 0x55c23f6fa470 'uint64_t'
|     `-TypedefType 0x55c23f6d3560 '__uint64_t' sugar
|       |-Typedef 0x55c23f6d3118 '__uint64_t'
|       `-BuiltinType 0x55c23f691430 'unsigned long'
|-CXXConstructorDecl 0x55c23f9bed40 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55c23f9beee8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55c23f9bee28 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55c23f9bf098 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55c23f9befd8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55c23f9bf1f0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55c23f9bf160 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55c23f9bf408 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55c23f9bf2b8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55c23f9bf338 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55c23f9bf628 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55c23f9bf4d8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55c23f9bf558 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55c23f9bf848 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55c23f9bf6f8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55c23f9bf778 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55c23f9bfa68 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55c23f9bf918 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55c23f9bf998 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55c23f9bfbf8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55c23f9bfb30 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55c23f9bfd78 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55c23f9bfcb8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55c23f9bff08 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55c23f9bfe40 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55c23f9c0060 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55c23f9bffd0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55c23f9c01b8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55c23f9c0128 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55c23f9c0310 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55c23f9c0280 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55c23f9c0498 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55c23f9c03d8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55c23f9c0628 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55c23f9c0560 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55c23f9c07b8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55c23f9c06f0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55c23f9c0948 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55c23f9c0880 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55c23f9c0a40 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55c23f9c0b68 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55c23f9c0ce8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55c23f9c0c20 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55c23f9c0e38 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55c23f9c0da8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55c23f9c0ef0 <col:63> "" ""
|-CXXMethodDecl 0x55c23f9c1038 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55c23f9c0f78 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55c23f9c1248 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55c23f9c10f8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55c23f9c1178 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55c23f9c1468 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55c23f9c1310 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55c23f9c1390 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55c23f9c1748 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55c23f9c1528 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55c23f9c15a8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55c23f9cd590 <col:55> 'int' 10
| `-ParmVarDecl 0x55c23f9c1620 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c23f9cd5b0 <col:76> 'bool' true
|-CXXMethodDecl 0x55c23f9c1a28 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55c23f9c1810 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55c23f9c1890 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55c23f9cd5c0 <col:56> 'int' 10
| `-ParmVarDecl 0x55c23f9c1908 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c23f9cd5e0 <col:77> 'bool' true
|-CXXMethodDecl 0x55c23f9c1b30 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55c23f9c1bf8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55c23f9c1cc0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55c23f9c1d60 <col:20>
| `-OptimizeNoneAttr 0x55c23f9c1db8 <col:30>
|-CXXConversionDecl 0x55c23f9c1ea8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55c23f9c1f78 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55c23f9c2038 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55c23f9c2128 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55c23f9c21e8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55c23f9c2368 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55c23f9c22a0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55c23f9c24b8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55c23f9c2428 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55c23f9c25a8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55c23f9c2668 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55c23f9c28b8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55c23f9c2720 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55c23f9c27a0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55c23f9c2b18 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55c23f9c2980 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55c23f9c2a00 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55c23f9c2be8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55c23f9c2df8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55c23f9c2ca0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55c23f9c2d20 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55c23f9c3018 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55c23f9c2ec0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55c23f9c2f40 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55c23f9c31a8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55c23f9c30e0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55c23f9c3298 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55c23f9c3408 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55c23f9c3348 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55c23f9c3618 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55c23f9c34c8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55c23f9c3548 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55c23f9c3830 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55c23f9c36d8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55c23f9c3750 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55c23f9c39c0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55c23f9c38f0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55c23f9c3be0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55c23f9c3a80 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55c23f9c3b00 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55c23f9c3d30 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55c23f9c3ca0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55c23f9c3f08 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55c23f9c3df0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55c23f9c3e70 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55c23f9c4058 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55c23f9c3fc8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55c23f9c4270 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55c23f9c4110 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55c23f9c4190 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55c23f9cd5f0 <col:39> 'int' 0
|-CXXMethodDecl 0x55c23f9c4490 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55c23f9c4330 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55c23f9c43b0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55c23f9cd610 <col:48> 'int' 0
|-CXXMethodDecl 0x55c23f9c4670 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55c23f9c4550 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55c23f9c45d0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55c23f9cd630 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55c23f9c4740 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55c23f9c4800 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55c23f9c48c0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55c23f9c4980 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55c23f9c4a40 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55c23f9c4be8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55c23f9c4af0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55c23f9c4d68 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55c23f9c4ca0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55c23f9c4f40 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55c23f9c4e28 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55c23f9c50b8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55c23f9c4ff8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55c23f9c5200 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55c23f9c5170 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55c23f9c5350 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55c23f9c52c0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55c23f9c5528 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55c23f9c5410 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55c23f9c5490 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55c23f9c5708 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55c23f9c55f0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55c23f9c5670 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55c23f9c5858 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55c23f9c57c8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55c23f9c5a68 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55c23f9c5918 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55c23f9c5998 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55c23f9c5bc8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55c23f9c5b30 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55c23f9c5d20 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55c23f9c5c88 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55c23f9c5dc8 <col:57> "" ""
|-CXXMethodDecl 0x55c23f9c5ed8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55c23f9c5e48 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55c23f9c6028 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55c23f9c5f98 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55c23f9c61a8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55c23f9c60e0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55c23f9c6270 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55c23f9c6330 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55c23f9c63f0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55c23f9c6490 <col:49> "" ""
|-CXXMethodDecl 0x55c23f9c6520 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55c23f9c65e0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55c23f9c66d0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55c23f9c6798 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55c23f9c6858 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55c23f9c6918 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55c23f9c6a10 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55c23f9c6ad8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55c23f9c6ba0 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55c23f9c6d78 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55c23f9c6c58 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55c23f9c6cd8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55c23f9c6fa0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55c23f9c6e40 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55c23f9c6ec0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55c23f9c70b0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55c23f9c7118 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55c23f9c7140 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55c23f9c7258 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55c23f9c72f8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55c23f9c7358 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55c23f9c73b8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55c23f9c7468 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55c23f9c74d0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55c23f9c7708 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55c23f9c7758 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c23f9c76e8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55c23f9c75f8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55c23f9c75a0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55c23f9c75e0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55c23f9c75c0 <col:32> 'int' 8
|-CXXRecordDecl 0x55c23f9c7770 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55c23f9c7888 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55c23f9c7930 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55c23f9c7998 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55c23f9c7a28 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55c23f9cdac0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55c23f9cdef8 <col:12>
| |-CXXConstructorDecl 0x55c23f9cdbc8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55c23f9cdcd8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55c23f9c7930 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55c23f9d0480 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55c23f9d0450 <col:12> 'const char *const' lvalue .data 0x55c23f9c7930
| | |     `-DeclRefExpr 0x55c23f9d0430 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c23f9cdcd8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55c23f9c7998 'length' 'int'
| | | `-ImplicitCastExpr 0x55c23f9d0510 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55c23f9d04e0 <col:12> 'const int' lvalue .length 0x55c23f9c7998
| | |     `-DeclRefExpr 0x55c23f9d04c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c23f9cdcd8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55c23f9c7a28 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55c23f9d05a0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55c23f9d0570 <col:12> 'String::memo_t *const' lvalue .memo 0x55c23f9c7a28
| | |     `-DeclRefExpr 0x55c23f9d0550 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c23f9cdcd8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55c23f9d05f8 <col:12>
| |-CXXConstructorDecl 0x55c23f9cdd78 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55c23f9cdd78
| | `-ParmVarDecl 0x55c23f9cde88 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55c23f9d33e0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55c23f9dedf8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55c23f9def08 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55c23f9df420 <col:12>
| |   |-BinaryOperator 0x55c23f9df238 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55c23f9df1f0 <col:12> 'const char *' lvalue ->data 0x55c23f9c7930
| |   | | `-CXXThisExpr 0x55c23f9df1e0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55c23f9df220 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55c23f9df1b0 <col:12> 'const char *const' lvalue .data 0x55c23f9c7930
| |   |     `-DeclRefExpr 0x55c23f9df190 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c23f9def08 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55c23f9df300 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55c23f9df2b8 <col:12> 'int' lvalue ->length 0x55c23f9c7998
| |   | | `-CXXThisExpr 0x55c23f9df2a8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55c23f9df2e8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55c23f9df278 <col:12> 'const int' lvalue .length 0x55c23f9c7998
| |   |     `-DeclRefExpr 0x55c23f9df258 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c23f9def08 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55c23f9df3c8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55c23f9df380 <col:12> 'String::memo_t *' lvalue ->memo 0x55c23f9c7a28
| |   | | `-CXXThisExpr 0x55c23f9df370 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55c23f9df3b0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55c23f9df340 <col:12> 'String::memo_t *const' lvalue .memo 0x55c23f9c7a28
| |   |     `-DeclRefExpr 0x55c23f9df320 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c23f9def08 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55c23f9df410 <col:12>
| |     `-UnaryOperator 0x55c23f9df3f8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55c23f9df3e8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55c23f9def78 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55c23f9def78
|   `-ParmVarDecl 0x55c23f9df088 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55c23f9c7aa0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55c23f9c7ce8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55c23f9c7b08 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55c23f9c7b88 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55c23f9c7c00 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55c23f9cda80 <col:79, line:261:5>
|   |-BinaryOperator 0x55c23f9cd6f8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55c23f9cd690 <col:2, col:5> 'const char *' lvalue .data 0x55c23f9c7930
|   | | `-MemberExpr 0x55c23f9cd660 <col:2> 'String::rep_t' lvalue ->_r 0x55c23f9c7aa0
|   | |   `-CXXThisExpr 0x55c23f9cd650 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55c23f9cd6e0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c23f9cd6c0 <col:12> 'const char *' lvalue ParmVar 0x55c23f9c7b08 'data' 'const char *'
|   |-BinaryOperator 0x55c23f9cd7c0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55c23f9cd758 <col:2, col:5> 'int' lvalue .length 0x55c23f9c7998
|   | | `-MemberExpr 0x55c23f9cd728 <col:2> 'String::rep_t' lvalue ->_r 0x55c23f9c7aa0
|   | |   `-CXXThisExpr 0x55c23f9cd718 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55c23f9cd7a8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c23f9cd788 <col:14> 'int' lvalue ParmVar 0x55c23f9c7b88 'length' 'int'
|   `-IfStmt 0x55c23f9cda68 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55c23f9cd8e0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55c23f9cd8c8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55c23f9cd8a8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55c23f9cd888 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55c23f9cd820 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55c23f9c7a28
|     |       | `-MemberExpr 0x55c23f9cd7f0 <col:7> 'String::rep_t' lvalue ->_r 0x55c23f9c7aa0
|     |       |   `-CXXThisExpr 0x55c23f9cd7e0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55c23f9cd870 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55c23f9cd850 <col:17> 'String::memo_t *' lvalue ParmVar 0x55c23f9c7c00 'memo' 'String::memo_t *'
|     `-CallExpr 0x55c23f9cda40 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55c23f9cda28 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55c23f9cd930 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55c23f9b6718 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55c23f9cd998 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55c23f9c72f8
|         `-ImplicitCastExpr 0x55c23f9cd980 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55c23f9cd960 <col:27> 'String::memo_t *' lvalue ParmVar 0x55c23f9c7c00 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55c23f9c7f98 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55c23f9c7db8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55c23f9c7e38 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55c23f9c7eb0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55c23f9c7aa0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55c23f9cdf08 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55c23f9ce098 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55c23f9ce000 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55c23f9cdf70 <col:2> '<bound member function type>' ->assign_memo 0x55c23f9c7ce8
|     | `-ImplicitCastExpr 0x55c23f9ce038 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55c23f9cdf60 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55c23f9ce050 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55c23f9cdfa0 <col:14> 'const char *' lvalue ParmVar 0x55c23f9c7db8 'data' 'const char *'
|     |-ImplicitCastExpr 0x55c23f9ce068 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55c23f9cdfc0 <col:20> 'int' lvalue ParmVar 0x55c23f9c7e38 'length' 'int'
|     `-ImplicitCastExpr 0x55c23f9ce080 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55c23f9cdfe0 <col:28> 'String::memo_t *' lvalue ParmVar 0x55c23f9c7eb0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55c23f9c8128 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55c23f9c8068 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55c23f9ce2f0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55c23f9ce270 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55c23f9ce0c0 <col:2> '<bound member function type>' ->assign_memo 0x55c23f9c7ce8
|     | `-CXXThisExpr 0x55c23f9ce0b0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55c23f9ce2a8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55c23f9ce140 <col:14, col:19> 'const char *' lvalue .data 0x55c23f9c7930
|     |   `-MemberExpr 0x55c23f9ce110 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55c23f9c7aa0
|     |     `-DeclRefExpr 0x55c23f9ce0f0 <col:14> 'const String' lvalue ParmVar 0x55c23f9c8068 'x' 'const String &'
|     |-ImplicitCastExpr 0x55c23f9ce2c0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55c23f9ce1c0 <col:25, col:30> 'int' lvalue .length 0x55c23f9c7998
|     |   `-MemberExpr 0x55c23f9ce190 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55c23f9c7aa0
|     |     `-DeclRefExpr 0x55c23f9ce170 <col:25> 'const String' lvalue ParmVar 0x55c23f9c8068 'x' 'const String &'
|     `-ImplicitCastExpr 0x55c23f9ce2d8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55c23f9ce240 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55c23f9c7a28
|         `-MemberExpr 0x55c23f9ce210 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55c23f9c7aa0
|           `-DeclRefExpr 0x55c23f9ce1f0 <col:38> 'const String' lvalue ParmVar 0x55c23f9c8068 'x' 'const String &'
|-CXXMethodDecl 0x55c23f9c81f0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55c23f9cecb0 <col:31, line:278:5>
|   `-IfStmt 0x55c23f9cec98 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55c23f9ce390 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55c23f9ce378 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55c23f9ce348 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55c23f9c7a28
|     |     `-MemberExpr 0x55c23f9ce318 <col:6> 'String::rep_t' lvalue ->_r 0x55c23f9c7aa0
|     |       `-CXXThisExpr 0x55c23f9ce308 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55c23f9cec70 <col:15, line:277:2>
|       |-ParenExpr 0x55c23f9ce840 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55c23f9ce810 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55c23f9ce4a0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55c23f9ce488 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55c23f9ce470 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55c23f9ce430 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55c23f9c72f8
|       |   |       `-ImplicitCastExpr 0x55c23f9ce418 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55c23f9ce3e8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55c23f9c7a28
|       |   |           `-MemberExpr 0x55c23f9ce3b8 <col:27> 'String::rep_t' lvalue ->_r 0x55c23f9c7aa0
|       |   |             `-CXXThisExpr 0x55c23f9ce3a8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55c23f9ce500 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55c23f9ce4e0 <col:54> 'int' 0
|       |   `-CallExpr 0x55c23f9ce770 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55c23f9ce758 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55c23f9ce6d8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c23f72d970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55c23f9ce7b0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55c23f9ce5e8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55c23f9ce7c8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55c23f9ce618 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55c23f9ce7e0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55c23f9ce650 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55c23f9ce7f8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55c23f9ce6c0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55c23f9ce6a8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55c23f9ce670 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55c23f9ceb90 <line:274:6, line:275:22>
|       | |-CallExpr 0x55c23f9cea50 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55c23f9cea38 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55c23f9ce9b0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55c23f9b7b60 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55c23f9ce980 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55c23f9c72f8
|       | |   `-ImplicitCastExpr 0x55c23f9ce968 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55c23f9ce938 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55c23f9c7a28
|       | |       `-MemberExpr 0x55c23f9ce908 <col:40> 'String::rep_t' lvalue ->_r 0x55c23f9c7aa0
|       | |         `-CXXThisExpr 0x55c23f9ce8f8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55c23f9ceb50 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55c23f9ceb38 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55c23f9cea78 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55c23f9cc9d0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55c23f9ceb78 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55c23f9cead8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55c23f9c7a28
|       |       `-MemberExpr 0x55c23f9ceaa8 <col:15> 'String::rep_t' lvalue ->_r 0x55c23f9c7aa0
|       |         `-CXXThisExpr 0x55c23f9cea98 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55c23f9cec50 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55c23f9cebe8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55c23f9c7a28
|         | `-MemberExpr 0x55c23f9cebb8 <col:6> 'String::rep_t' lvalue ->_r 0x55c23f9c7aa0
|         |   `-CXXThisExpr 0x55c23f9ceba8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55c23f9cec38 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55c23f9cec18 <col:16> 'int' 0
|-CXXMethodDecl 0x55c23f9c8488 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55c23f9c82a8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55c23f9c8328 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55c23f9c83a0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55c23f9c8560 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55c23f9c87b0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55c23f9c8618 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55c23f9c8698 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55c23f9c8710 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55c23f9c8998 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55c23f9c8880 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55c23f9c8900 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55c23f9c8a98 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55c23f9ced88 <col:41, line:286:5>
|   `-ReturnStmt 0x55c23f9ced78 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55c23f9ced48 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55c23f9ced10 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55c23f9cecf8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55c23f9cecd8 <col:46> 'int' 1
|-CXXMethodDecl 0x55c23f9c8d38 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55c23f9c8b50 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55c23f9c8bd0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55c23f9c8c50 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55c23f9cc9d0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55c23f9c8e00 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55c23f9ccaa0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55c23f9ccc70 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55c23f9ccb58 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55c23f9ccbd8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55c23f9ccd30 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55c23f9ccdf8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55c23f9ccef8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55c23f9ccf70 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55c23f9ccfe8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55c23f9cd050 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55c23f9cd150 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55c23f9cd1a0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c23f9cd130 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55c23f9cd110 <col:22> 'int' 14
|-CXXMethodDecl 0x55c23f9cd3b8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55c23f9cd1d0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55c23f9cd250 <col:38> col:41 'int'
| `-ParmVarDecl 0x55c23f9cd2d0 <col:43> col:46 'int'
|-FriendDecl 0x55c23f9cd4c0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55c23f9cd550 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c23fa90250 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55c23fa90428 prev 0x55c23fa90250 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55c23fa904b8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55c23fa904e0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55c23f691370 'int'
|-TypedefDecl 0x55c23fc3d1a0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55c23fc3d150 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55c23fc3d130 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55c23fa906f8 'type'
|     `-SubstTemplateTypeParmType 0x55c23fa906c0 'String' sugar
|       |-TemplateTypeParmType 0x55c23f981f50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c23f981f00 'T'
|       `-RecordType 0x55c23f9be740 'String'
|         `-CXXRecord 0x55c23f9be6b0 'String'
|-TypedefDecl 0x55c23fc3d258 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55c23fc3d220 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55c23fc3d200 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55c23fc3d1a0 'type'
|     `-ElaboratedType 0x55c23fc3d150 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55c23fc3d130 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55c23fa906f8 'type'
|         `-SubstTemplateTypeParmType 0x55c23fa906c0 'String' sugar
|           |-TemplateTypeParmType 0x55c23f981f50 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55c23f981f00 'T'
|           `-RecordType 0x55c23f9be740 'String'
|             `-CXXRecord 0x55c23f9be6b0 'String'
|-CXXMethodDecl 0x55c23fc3d3d8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55c23fc3d2e8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55c23fc3d4c8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55c23fc3d5a8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55c23fc3d5a8
|-CXXMethodDecl 0x55c23fc3d878 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55c23fc3d780 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55c23fc3dab8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55c23fc3d930 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c23fc3d9a8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c23fc3dc88 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55c23fc3db78 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c23fc3dbf0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c23fc3dde8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55c23fc3deb8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55c23fc3e108 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55c23fc3df78 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55c23fc3dff0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c23fc3e368 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55c23fc3e1d8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55c23fc3e250 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c23fc3e528 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55c23fc3e438 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c23fc3e6e8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55c23fc3e5f0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c23fc3e7a0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55c23fc3e850 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55c23fc3ea88 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55c23fc3e900 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c23fc3e978 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c23fc3ed28 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55c23fc3ec30 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55c23fc3edf0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55c23fc3ee40 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55c23fc3ee90 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c23fbf5ee0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55c23fa8ecb8 prev 0x55c23fbf5ee0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55c23fa901c0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55c23fa90170 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55c23fa90150 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55c23fa90000 'type'
|     `-SubstTemplateTypeParmType 0x55c23fa8fe90 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55c23f957d00 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55c23f957ca8 'F'
|       `-RecordType 0x55c23fa8faf0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55c23fa8fa10 'typed_array_memory'
|-FieldDecl 0x55c23fc3eee0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55c23fc3ef30 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55c23fc3ef68 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55c23fa8ed50 'String' sugar
|   |-TemplateTypeParmType 0x55c23f98f270 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55c23f98f218 'T'
|   `-RecordType 0x55c23f9be740 'String'
|     `-CXXRecord 0x55c23f9be6b0 'String'
|-TypedefDecl 0x55c23fc3eff8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55c23fc3efc0 'String &'
|   `-SubstTemplateTypeParmType 0x55c23fa8ed50 'String' sugar
|     |-TemplateTypeParmType 0x55c23f98f270 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c23f98f218 'T'
|     `-RecordType 0x55c23f9be740 'String'
|       `-CXXRecord 0x55c23f9be6b0 'String'
|-TypedefDecl 0x55c23fc3f088 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55c23fc3f050 'const String &'
|   `-QualType 0x55c23fa8ed51 'const String' const
|     `-SubstTemplateTypeParmType 0x55c23fa8ed50 'String' sugar
|       |-TemplateTypeParmType 0x55c23f98f270 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c23f98f218 'T'
|       `-RecordType 0x55c23f9be740 'String'
|         `-CXXRecord 0x55c23f9be6b0 'String'
|-TypedefDecl 0x55c23fc3f118 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55c23fc3f0e0 'String *'
|   `-SubstTemplateTypeParmType 0x55c23fa8ed50 'String' sugar
|     |-TemplateTypeParmType 0x55c23f98f270 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c23f98f218 'T'
|     `-RecordType 0x55c23f9be740 'String'
|       `-CXXRecord 0x55c23f9be6b0 'String'
|-TypedefDecl 0x55c23fc3f1a8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55c23fc3f170 'const String *'
|   `-QualType 0x55c23fa8ed51 'const String' const
|     `-SubstTemplateTypeParmType 0x55c23fa8ed50 'String' sugar
|       |-TemplateTypeParmType 0x55c23f98f270 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c23f98f218 'T'
|       `-RecordType 0x55c23f9be740 'String'
|         `-CXXRecord 0x55c23f9be6b0 'String'
|-TypedefDecl 0x55c23fc3fe00 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55c23fc3fdb0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55c23fc3fd90 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55c23fc3fcc8 'type'
|     `-LValueReferenceType 0x55c23fc3fc90 'const String &'
|       `-QualType 0x55c23fc3fa31 'const String' const
|         `-SubstTemplateTypeParmType 0x55c23fc3fa30 'String' sugar
|           |-TemplateTypeParmType 0x55c23f962060 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55c23f962008 'T'
|           `-RecordType 0x55c23f9be740 'String'
|             `-CXXRecord 0x55c23f9be6b0 'String'
|-TypedefDecl 0x55c23fc3fe68 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55c23fc3f050 'const String &'
|   `-QualType 0x55c23fa8ed51 'const String' const
|     `-SubstTemplateTypeParmType 0x55c23fa8ed50 'String' sugar
|       |-TemplateTypeParmType 0x55c23f98f270 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c23f98f218 'T'
|       `-RecordType 0x55c23f9be740 'String'
|         `-CXXRecord 0x55c23f9be6b0 'String'
|-TypedefDecl 0x55c23fc3fec0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55c23f691370 'int'
|-TypedefDecl 0x55c23fc3ff28 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55c23fc3f0e0 'String *'
|   `-SubstTemplateTypeParmType 0x55c23fa8ed50 'String' sugar
|     |-TemplateTypeParmType 0x55c23f98f270 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c23f98f218 'T'
|     `-RecordType 0x55c23f9be740 'String'
|       `-CXXRecord 0x55c23f9be6b0 'String'
|-TypedefDecl 0x55c23fc3ff90 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55c23fc3f170 'const String *'
|   `-QualType 0x55c23fa8ed51 'const String' const
|     `-SubstTemplateTypeParmType 0x55c23fa8ed50 'String' sugar
|       |-TemplateTypeParmType 0x55c23f98f270 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c23f98f218 'T'
|       `-RecordType 0x55c23f9be740 'String'
|         `-CXXRecord 0x55c23f9be6b0 'String'
|-EnumDecl 0x55c23fc3ffe8 <line:134:5> col:5
| `-EnumConstantDecl 0x55c23fc400e0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55c23fc400c0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55c23f9908f8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55c23f9908d0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55c23f9908b0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55c23fc40168 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55c23fc403f8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55c23fc40220 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c23fc402c0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55c23fc40688 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55c23fc40570 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55c23fc40948 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55c23fc40830 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55c23fc40c60 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55c23fc40b40 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55c23fc40f70 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55c23fc40e50 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55c23fc41260 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55c23fc410a8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c23fc41120 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55c23fc41388 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55c23fc41438 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c23fc41490 <col:30> Inherited
|-CXXMethodDecl 0x55c23fc414d8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55c23fc41588 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c23fc415e0 <col:30> Inherited
|-CXXMethodDecl 0x55c23fc416a8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55c23fc41758 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c23fc417b0 <col:30> Inherited
|-CXXMethodDecl 0x55c23fc417f8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55c23fc418a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c23fc41900 <col:30> Inherited
|-CXXMethodDecl 0x55c23fc41948 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55c23fc419f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c23fc41a50 <col:30> Inherited
|-CXXMethodDecl 0x55c23fc41a98 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55c23fc41b48 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c23fc41ba0 <col:30> Inherited
|-CXXMethodDecl 0x55c23fc41bc8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55c23fc41c78 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55c23fc41d28 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55c23fc41ee8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55c23fc41dd8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c23fc41e50 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55c23fc42038 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55c23fc41fa8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c23fc421e8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55c23fc420f0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55c23fc422a0 <col:20>
| `-OptimizeNoneAttr 0x55c23fc422f8 <col:30>
|-CXXMethodDecl 0x55c23fc42418 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55c23fc42320 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55c23fc424d0 <col:20>
| `-OptimizeNoneAttr 0x55c23fc42528 <col:30>
|-CXXMethodDecl 0x55c23fc425e0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55c23fc42550 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c23fc42728 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55c23fc42698 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c23fc42858 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55c23fc42958 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55c23fc42a28 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55c23fc42af8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55c23fc42c38 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55c23fc42ba8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c23fc42d80 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55c23fc42cf0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c23fc42ec8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55c23fc42e38 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55c23fc42f80 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55c23fc43080 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55c23fc42ff0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55c23fc43138 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55c23fc431f8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55c23fc432f8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55c23fc43478 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55c23fc433b8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55c23fc43c38 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55c23fc43530 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55c23fc43b98 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55c23fc43a98 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55c23fc43d18 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55c23fc43e68 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55c23fc43dd8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55c23fc43f20 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55c23fc44168 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55c23fc43fe0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55c23fc44058 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55c23fc442f8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55c23fc44238 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55c23fc44508 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55c23fc443c0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55c23fc44438 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55c23fc445c8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55c23fc44828 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55c23fc44730 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55c23fc448f8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55c23fc448f8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c23fcdf1c8 prev 0x55c23fb74a88 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55c23fcdf2c0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55c23fcdf350 <col:22, col:28> col:22 public
|-EnumDecl 0x55c23fcdf378 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55c23fcdf498 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c23fcdf478 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55c23fcdf460 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55c23fcdf440 <col:14> 'int' 999
| |-EnumConstantDecl 0x55c23fcdf540 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c23fcdf520 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55c23fcdf508 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55c23fcdf4e8 <col:14> 'int' 1
| |-EnumConstantDecl 0x55c23fcdf5d0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c23fcdf5b0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55c23fcdf590 <col:17> 'int' 0
| |-EnumConstantDecl 0x55c23fcdf660 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c23fcdf640 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55c23fcdf620 <col:13> 'int' 1
| |-EnumConstantDecl 0x55c23fcdf6f0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c23fcdf6d0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55c23fcdf6b0 <col:16> 'int' 2
| |-EnumConstantDecl 0x55c23fcdf780 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c23fcdf760 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55c23fcdf740 <col:13> 'int' 3
| |-EnumConstantDecl 0x55c23fcdf810 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c23fcdf7f0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55c23fcdf7d0 <col:15> 'int' 4
| |-EnumConstantDecl 0x55c23fcdf8a0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c23fcdf880 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55c23fcdf860 <col:14> 'int' 5
| |-EnumConstantDecl 0x55c23fcdf930 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c23fcdf910 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55c23fcdf8f0 <col:12> 'int' 6
| `-EnumConstantDecl 0x55c23fcdf9c0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55c23fcdf9a0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55c23fcdf980 <col:13> 'int' 7
|-VarDecl 0x55c23fcdfa30 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55c23fcdfab8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55c23fcdfb40 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55c23fcdfbc8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55c23fcdfc50 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55c23fcdfcd8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55c23fcdfd60 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55c23fcdfde8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55c23fcdfe70 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55c23fcdfef8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55c23fcdff80 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55c23fce0080 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55c23fce53a8 '_nerrors' 'int'
| | `-IntegerLiteral 0x55c23fce5b38 <line:128:13> 'int' 0
| `-CompoundStmt 0x55c23fce5ba8 <col:16, line:129:5>
|-CXXDestructorDecl 0x55c23fce0170 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55c23fce5bb8 <col:29, line:132:5>
|-CXXMethodDecl 0x55c23fce0328 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55c23fce0260 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c23fce03f0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55c23fce04d8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55c23fce5c10 <col:44, line:161:5>
|   `-ReturnStmt 0x55c23fce5c00 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55c23fce5be8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55c23fce5bc8 <col:9> 'ErrorHandler *' lvalue Var 0x55c23fce5408 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55c23fce0618 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55c23fce0588 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c23fce06e0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55c23fce5c70 <col:43, line:173:5>
|   `-ReturnStmt 0x55c23fce5c60 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55c23fce5c48 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55c23fce5c28 <col:9> 'ErrorHandler *' lvalue Var 0x55c23fce5480 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55c23fce0798 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55c23fce0818 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55c23fce0928 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55c23fce0898 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55c23fce0a78 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55c23fce09e8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55c23fce0bd0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55c23fce0b38 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55c23fce0d28 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x55c23fce0c90 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55c23fce0e80 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55c23fce0de8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55c23fce1090 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55c23fce0f38 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55c23fce0fb8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55c23fce1268 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55c23fce1150 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55c23fce11d0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55c23fce1488 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55c23fce1328 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55c23fce13a8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55c23fce1668 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55c23fce1548 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55c23fce15c8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55c23fce1848 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55c23fce1728 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55c23fce17a8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55c23fce19d0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55c23fce1908 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55c23fce1ba0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55c23fce1a88 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55c23fce1b00 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55c23fce5ec8 <col:57, line:234:5>
|   `-ReturnStmt 0x55c23fce5eb8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55c23fce5ea0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55c23fce5e48 <col:9, col:41> 'int'
|         |-MemberExpr 0x55c23fce5e18 <col:9> '<bound member function type>' ->xmessage 0x55c23fce19d0
|         | `-CXXThisExpr 0x55c23fce5e08 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55c23fce5e88 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55c23fce5e70 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55c23fce5de8 <col:18, col:40> 'String' (CXXTemporary 0x55c23fce5de8)
|               `-CallExpr 0x55c23fce5db0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55c23fce5d98 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55c23fce5d10 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55c23fce3bd8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55c23fce5d30 <col:31> 'const String' lvalue ParmVar 0x55c23fce1b00 'str' 'const String &'
|                 `-DeclRefExpr 0x55c23fce5d50 <col:36> 'const String' lvalue ParmVar 0x55c23fce1a88 'anno' 'const String &'
|-CXXMethodDecl 0x55c23fce1e80 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55c23fce1c60 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55c23fce1ce0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55c23fce1d58 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55c23fce6158 <col:68, line:243:5>
|   `-ReturnStmt 0x55c23fce6148 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55c23fce6130 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55c23fce60d0 <col:9, col:41> 'int'
|         |-MemberExpr 0x55c23fce60a0 <col:9> '<bound member function type>' ->xmessage 0x55c23fce1ba0
|         | `-CXXThisExpr 0x55c23fce6090 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55c23fce5f68 <col:18> 'const String' lvalue ParmVar 0x55c23fce1c60 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55c23fce6118 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55c23fce6100 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55c23fce6070 <col:24, col:40> 'String' (CXXTemporary 0x55c23fce6070)
|               `-CXXMemberCallExpr 0x55c23fce6008 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55c23fce5f98 <col:24> '<bound member function type>' ->vformat 0x55c23fce30a0
|                 | `-CXXThisExpr 0x55c23fce5f88 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55c23fce6038 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55c23fce5fc8 <col:32> 'const char *' lvalue ParmVar 0x55c23fce1ce0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55c23fce6050 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55c23fce5fe8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55c23fce1d58 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55c23fce2120 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55c23fce1f48 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55c23fce1fc0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55c23fce2038 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55c23fce6498 <col:23, line:254:5>
|   `-ReturnStmt 0x55c23fce6488 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55c23fce6470 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55c23fce6410 <col:9, col:71> 'int'
|         |-MemberExpr 0x55c23fce63e0 <col:9> '<bound member function type>' ->xmessage 0x55c23fce1ba0
|         | `-CXXThisExpr 0x55c23fce63d0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55c23fce6458 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55c23fce6440 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55c23fce6390 <col:18, col:65> 'String' (CXXTemporary 0x55c23fce6390)
|         |     `-CallExpr 0x55c23fce6328 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55c23fce6310 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55c23fce61f8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55c23fce3bd8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55c23fce6218 <col:31> 'const String' lvalue ParmVar 0x55c23fce1fc0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55c23fce6370 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55c23fce6358 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55c23fce62f0 <col:37, col:64> 'String' (CXXTemporary 0x55c23fce62f0)
|         |             `-CallExpr 0x55c23fce62c0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55c23fce62a8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55c23fce6238 <col:37> 'String (const String &)' lvalue CXXMethod 0x55c23fce4228 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55c23fce6258 <col:56> 'const String' lvalue ParmVar 0x55c23fce1f48 'landmark' 'const String &'
|         `-DeclRefExpr 0x55c23fce63b0 <col:68> 'const String' lvalue ParmVar 0x55c23fce2038 'str' 'const String &'
|-CXXMethodDecl 0x55c23fce24a0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55c23fce21e8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55c23fce2260 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55c23fce22e0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55c23fce2358 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55c23fce6750 <col:34, line:267:5>
|   `-ReturnStmt 0x55c23fce6740 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55c23fce6728 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55c23fce66c0 <col:9, col:51> 'int'
|         |-MemberExpr 0x55c23fce6690 <col:9> '<bound member function type>' ->xmessage 0x55c23fce2120
|         | `-CXXThisExpr 0x55c23fce6680 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55c23fce6538 <col:18> 'const String' lvalue ParmVar 0x55c23fce21e8 'landmark' 'const String &'
|         |-DeclRefExpr 0x55c23fce6558 <col:28> 'const String' lvalue ParmVar 0x55c23fce2260 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55c23fce6710 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55c23fce66f8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55c23fce6660 <col:34, col:50> 'String' (CXXTemporary 0x55c23fce6660)
|               `-CXXMemberCallExpr 0x55c23fce65f8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55c23fce6588 <col:34> '<bound member function type>' ->vformat 0x55c23fce30a0
|                 | `-CXXThisExpr 0x55c23fce6578 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55c23fce6628 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55c23fce65b8 <col:42> 'const char *' lvalue ParmVar 0x55c23fce22e0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55c23fce6640 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55c23fce65d8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55c23fce2358 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55c23fce25b0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55c23fce67d0 <col:25, line:288:5>
|   `-ReturnStmt 0x55c23fce67c0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55c23fce67a8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55c23fce6778 <col:9> 'const int' lvalue ->_nerrors 0x55c23fce53a8
|         `-CXXThisExpr 0x55c23fce6768 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55c23fce27c0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55c23fce2668 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55c23fce26e8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55c23fce2aa8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55c23fce2888 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55c23fce2908 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55c23fce2980 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55c23fce2c80 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55c23fce2b78 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55c23fce2ec8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55c23fce2d40 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55c23fce2db8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55c23fce6a30 <col:58, line:357:5>
|   `-ReturnStmt 0x55c23fce6a20 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55c23fce6a08 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55c23fce69d8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55c23fce69c0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55c23fce69a0 <col:9, col:29> 'String' (CXXTemporary 0x55c23fce69a0)
|             `-CallExpr 0x55c23fce6930 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55c23fce6918 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55c23fce6898 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55c23fce2aa8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55c23fce6838 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55c23fce6968 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55c23fce6858 <col:21> 'const char *' lvalue ParmVar 0x55c23fce2d40 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55c23fce6980 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55c23fce6878 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55c23fce2db8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55c23fce30a0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55c23fce2f90 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55c23fce3008 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55c23fce31f8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55c23fce3168 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55c23fce3340 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55c23fce32b0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55c23fce35e0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55c23fce33f8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55c23fce3478 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55c23fce34f0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55c23fce3740 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55c23fce36b0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55c23fce6b48 <col:37, line:441:5>
|   `-IfStmt 0x55c23fce6b30 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55c23fce6ab8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55c23fce6a88 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55c23fce6a48 <col:6> 'int' lvalue ParmVar 0x55c23fce36b0 'level' 'int'
|     | `-ImplicitCastExpr 0x55c23fce6aa0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55c23fce6a68 <col:15> 'ErrorHandler::Level' EnumConstant 0x55c23fcdf780 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55c23fce6b18 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55c23fce6ae8 <col:8> 'int' lvalue ->_nerrors 0x55c23fce53a8
|         `-CXXThisExpr 0x55c23fce6ad8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55c23fce3808 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55c23fce6be0 <col:26, line:448:5>
|   `-BinaryOperator 0x55c23fce6bc0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55c23fce6b70 <col:2> 'int' lvalue ->_nerrors 0x55c23fce53a8
|     | `-CXXThisExpr 0x55c23fce6b60 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55c23fce6ba0 <col:13> 'int' 0
|-CXXMethodDecl 0x55c23fce39d0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55c23fce38c0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55c23fce3938 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55c23fce3bd8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55c23fce3a90 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55c23fce3b08 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55c23fce3e88 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55c23fce3c98 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55c23fce3d18 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55c23fce3d98 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55c23fce3f40 <col:59> 0 0
|-CXXMethodDecl 0x55c23fce40d8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55c23fce3fb8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55c23fce4038 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55c23fce7250 <col:70, line:534:5>
|   |-DeclStmt 0x55c23fce6d50 <line:528:2, col:20>
|   | |-VarDecl 0x55c23fce6c08 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55c23fce6c70 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55c23fce6ca8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55c23fce6d10 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55c23fce6e20 <line:529:2, col:23>
|   | `-VarDecl 0x55c23fce6d80 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55c23fce6e08 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55c23fce6de8 <col:18> 'const char *' lvalue ParmVar 0x55c23fce3fb8 'begin' 'const char *'
|   |-DoStmt 0x55c23fce71e8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55c23fce7118 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55c23fce7100 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55c23fce70e0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55c23fce6e38 <col:6> 'const char *' lvalue Var 0x55c23fce6d80 'x' 'const char *'
|   | |     `-CallExpr 0x55c23fce7030 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55c23fce7018 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55c23fce6fd0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55c23fce5880 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55c23fce7098 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55c23fce7080 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55c23fce6ef0 <col:20, col:27> 'String' (CXXTemporary 0x55c23fce6ef0)
|   | |       |     `-CXXTemporaryObjectExpr 0x55c23fce6eb8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55c23fce70b0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55c23fce6f10 <col:30> 'const char *' lvalue Var 0x55c23fce6d80 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55c23fce70c8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55c23fce6f30 <col:33> 'const char *' lvalue ParmVar 0x55c23fce4038 'end' 'const char *'
|   | |       |-UnaryOperator 0x55c23fce6f70 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55c23fce6f50 <col:39> 'String' lvalue Var 0x55c23fce6c08 'name' 'String'
|   | |       |-UnaryOperator 0x55c23fce6fa8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55c23fce6f88 <col:46> 'String' lvalue Var 0x55c23fce6ca8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55c23fce6fc0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55c23fce71d0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55c23fce71b8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55c23fce7198 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55c23fce7168 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55c23f9c1ea8
|   |         `-ImplicitCastExpr 0x55c23fce7150 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55c23fce7130 <col:11> 'String' lvalue Var 0x55c23fce6c08 'name' 'String'
|   `-ReturnStmt 0x55c23fce7240 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55c23fce7228 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55c23fce7208 <col:9> 'const char *' lvalue Var 0x55c23fce6d80 'x' 'const char *'
|-CXXMethodDecl 0x55c23fce4228 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55c23fce4198 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55c23fce7858 <col:55, line:550:5>
|   `-IfStmt 0x55c23fce7830 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55c23fce7490 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55c23fce7478 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55c23fce7460 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55c23fce7440 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55c23fce7410 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55c23f9c1ea8
|     | |       `-DeclRefExpr 0x55c23fce72b0 <col:6> 'const String' lvalue ParmVar 0x55c23fce4198 'x' 'const String &'
|     | `-BinaryOperator 0x55c23fce73f0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55c23fce73c0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55c23fce7370 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55c23fce7358 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55c23fce7310 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55c23f9db6e0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55c23fce72d0 <col:11> 'const String' lvalue ParmVar 0x55c23fce4198 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55c23fce72f0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55c23fce73d8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55c23fce73a8 <col:19> 'char' 123
|     |-ReturnStmt 0x55c23fce7500 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55c23fce74d0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55c23fce74b0 <col:13> 'const String' lvalue ParmVar 0x55c23fce4198 'x' 'const String &'
|     `-IfStmt 0x55c23fce7808 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55c23fce7598 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55c23fce7580 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55c23fce7560 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55c23fce7530 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55c23f9c1ea8
|       |       `-DeclRefExpr 0x55c23fce7510 <col:11> 'const String' lvalue ParmVar 0x55c23fce4198 'x' 'const String &'
|       |-ReturnStmt 0x55c23fce7720 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55c23fce7708 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55c23fce76d8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55c23fce76c0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55c23fce76a0 <col:13, col:29> 'String' (CXXTemporary 0x55c23fce76a0)
|       |         `-CallExpr 0x55c23fce7650 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55c23fce7638 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55c23fce75b0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55c23fce39d0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55c23fce7680 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55c23fce75d0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55c23fce75f0 <col:28> 'const String' lvalue ParmVar 0x55c23fce4198 'x' 'const String &'
|       `-ReturnStmt 0x55c23fce77f8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55c23fce77e0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55c23fce77b0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55c23fce7798 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55c23fce7778 <col:13, col:20> 'String' (CXXTemporary 0x55c23fce7778)
|                 `-CXXTemporaryObjectExpr 0x55c23fce7740 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55c23fce43f0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55c23fce42e0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55c23fce4358 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c23fce5b28 <col:71> 'bool' false
|-CXXRecordDecl 0x55c23fce44a0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55c23fce4798 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55c23fce4730 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55c23fce46d0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55c23fce4690 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55c23f9be740 'String'
|       | `-CXXRecord 0x55c23f9be6b0 'String'
|       |-BuiltinType 0x55c23f691370 'int'
|       `-DecayedType 0x55c23fb75ad0 '__va_list_tag *' sugar
|         |-TypedefType 0x55c23fb75aa0 'va_list' sugar
|         | |-Typedef 0x55c23f8af7f0 'va_list'
|         | `-TypedefType 0x55c23f8af7a0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55c23f7e73c8 '__gnuc_va_list'
|         |   `-TypedefType 0x55c23f7e7330 '__builtin_va_list' sugar
|         |     |-Typedef 0x55c23f6d2bd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55c23f6d2b80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55c23f6920c0 '__va_list_tag'
|         |         `-CXXRecord 0x55c23f692028 '__va_list_tag'
|         `-PointerType 0x55c23f8b5090 '__va_list_tag *'
|           `-RecordType 0x55c23f6920c0 '__va_list_tag'
|             `-CXXRecord 0x55c23f692028 '__va_list_tag'
|-EnumDecl 0x55c23fce47f0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55c23fce48f0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c23fce4e50 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fce48d0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55c23fce48b0 <col:16> 'int' 1
| |-EnumConstantDecl 0x55c23fce4980 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c23fce4e68 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fce4960 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55c23fce4940 <col:21> 'int' 2
| |-EnumConstantDecl 0x55c23fce4a10 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c23fce4e80 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fce49f0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55c23fce49d0 <col:22> 'int' 4
| |-EnumConstantDecl 0x55c23fce4aa0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c23fce4e98 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fce4a80 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55c23fce4a60 <col:17> 'int' 8
| |-EnumConstantDecl 0x55c23fce4b30 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c23fce4eb0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fce4b10 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55c23fce4af0 <col:22> 'int' 16
| |-EnumConstantDecl 0x55c23fce4bc0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c23fce4ec8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fce4ba0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55c23fce4b80 <col:19> 'int' 32
| |-EnumConstantDecl 0x55c23fce4c50 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c23fce4ee0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fce4c30 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55c23fce4c10 <col:17> 'int' 64
| |-EnumConstantDecl 0x55c23fce4ce0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c23fce4ef8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fce4cc0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55c23fce4ca0 <col:14> 'int' 128
| |-EnumConstantDecl 0x55c23fce4d70 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c23fce4f10 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fce4d50 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55c23fce4d30 <col:16> 'int' 256
| `-EnumConstantDecl 0x55c23fce4e00 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55c23fce4f28 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c23fce4de0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55c23fce4dc0 <col:12> 'int' 1024
|-CXXMethodDecl 0x55c23fce5138 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55c23fce4f50 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55c23fce4ff0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55c23fce52c0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55c23fce51f8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55c23fce5368 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55c23fce53a8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55c23fce5408 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55c23fce5480 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55c23fce5880 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55c23fce54f8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55c23fce5578 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55c23fce55f8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55c23fce5670 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55c23fce56e8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55c23fce5760 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55c23fce59a8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55c23fce59a8
| `-ParmVarDecl 0x55c23fce5ab8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55c23fce7bb8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55c23fce7bb8
  `-ParmVarDecl 0x55c23fce7cc8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c23fb74b18 prev 0x55c23fbb8988 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c23fb74c10 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55c23fb74ca0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55c23fb74dd8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55c23fb74cd8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55c23fb76200 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55c23fb761e0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55c23fb75d78 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55c23fb76290 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55c23fb76250 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55c23fb74cd8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55c23fb75de0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55c23fb76310 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55c23fb762d0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55c23fb75e40 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55c23fb76350 <col:54> 'bool' false
| `-CompoundStmt 0x55c23fb76458 <col:61, line:38:5>
|   `-BinaryOperator 0x55c23fb76438 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55c23fb763d0 <col:9> 'const Element *' lvalue ->_context 0x55c23fb75d18
|     | `-CXXThisExpr 0x55c23fb763c0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55c23fb76420 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55c23fb76400 <col:20> 'int' 0
|-CXXConstructorDecl 0x55c23fb74fe8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55c23fb74e98 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55c23fb74f10 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55c23fb76238 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55c23fb76218 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55c23fb75d18 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55c23fb764b0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55c23fb76470 <col:20> 'const Element *' lvalue ParmVar 0x55c23fb74e98 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55c23fb75d78 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55c23fb76530 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55c23fb764f0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55c23fb74f10 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55c23fb75de0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55c23fb765b0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55c23fb76570 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55c23fb75e40 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55c23fb765f0 <col:73> 'bool' false
| `-CompoundStmt 0x55c23fb76668 <col:80, line:46:5>
|-CXXMethodDecl 0x55c23fb75118 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55c23fb766e0 <col:36, line:51:5>
|   `-ReturnStmt 0x55c23fb766d0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55c23fb766b8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55c23fb76688 <col:16> 'const Element *const' lvalue ->_context 0x55c23fb75d18
|         `-CXXThisExpr 0x55c23fb76678 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55c23fb75208 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55c23fb76760 <col:32, line:57:5>
|   `-ReturnStmt 0x55c23fb76750 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55c23fb76738 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55c23fb76708 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55c23fb75d78
|         `-CXXThisExpr 0x55c23fb766f8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55c23fb752c8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55c23fb75450 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55c23fb75380 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55c23fb755a0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55c23fb75510 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55c23fb756f0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55c23fb75660 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55c23fb758f8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55c23fb757a8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55c23fb75820 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55c23fb75c28 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55c23fb759b8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55c23fb75a38 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55c23fb75b00 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55c23fb75ce0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55c23fb75d18 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55c23fb75d78 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55c23fb75de0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55c23fb75e40 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55c23fb75e90 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55c23fb75e90
| `-ParmVarDecl 0x55c23fb75fa8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55c23fb76048 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55c23fb76048
| `-ParmVarDecl 0x55c23fb76158 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55c23fcf0868 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c23fc80a50 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55c23fc80c28 prev 0x55c23fc80a50 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55c23fc80cb8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55c23fc80ce0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55c23f691370 'int'
|-TypedefDecl 0x55c23fc828b0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55c23fc82860 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55c23fc81190 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55c23fc81090 'type'
|     `-TemplateSpecializationType 0x55c23fc81020 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55c23fc80f00 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55c23fc80ee0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55c23fc80ec0 <col:24> 'unsigned long' 4
|       `-RecordType 0x55c23fc81000 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55c23fc80f20 'char_array'
|-TypedefDecl 0x55c23fc82968 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55c23fc82930 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55c23fc82910 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55c23fc828b0 'type'
|     `-ElaboratedType 0x55c23fc82860 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55c23fc81190 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55c23fc81090 'type'
|         `-TemplateSpecializationType 0x55c23fc81020 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55c23fc80f00 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55c23fc80ee0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55c23fc80ec0 <col:24> 'unsigned long' 4
|           `-RecordType 0x55c23fc81000 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55c23fc80f20 'char_array'
|-CXXMethodDecl 0x55c23fc82ae8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55c23fc829f8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55c23fc82bd8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55c23fc82cb8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55c23fc82f88 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55c23fc82e90 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55c23fc8c608 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55c23fc83040 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c23fc8c4f0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c23fc8c7d8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55c23fc8c6c8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c23fc8c740 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c23fc8c938 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55c23fc8ca08 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55c23fc8cc58 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55c23fc8cac8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55c23fc8cb40 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c23fc8ceb8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55c23fc8cd28 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55c23fc8cda0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c23fc8d078 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55c23fc8cf88 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c23fc8d238 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55c23fc8d140 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c23fc8d2f0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55c23fc8d3a0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55c23fc8d5d8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55c23fc8d450 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c23fc8d4c8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c23fc8d878 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55c23fc8d780 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55c23fc8d940 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55c23fc8d990 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55c23fc8d9e0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c23fc7f458 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55c23fc7f668 prev 0x55c23fc7f458 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55c23fc809c0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55c23fc80970 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55c23fc80950 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55c23fc80800 'type'
|     `-SubstTemplateTypeParmType 0x55c23fc80620 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55c23f957580 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c23f957528 'T'
|       `-RecordType 0x55c23fc80170 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55c23fc80088 'sized_array_memory'
|-FieldDecl 0x55c23fc8da30 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55c23fc8da80 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55c23fc8dab8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55c23fc7f700 'int' sugar
|   |-TemplateTypeParmType 0x55c23f98f270 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55c23f98f218 'T'
|   `-BuiltinType 0x55c23f691370 'int'
|-TypedefDecl 0x55c23fc8db48 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55c23fc8db10 'int &'
|   `-SubstTemplateTypeParmType 0x55c23fc7f700 'int' sugar
|     |-TemplateTypeParmType 0x55c23f98f270 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c23f98f218 'T'
|     `-BuiltinType 0x55c23f691370 'int'
|-TypedefDecl 0x55c23fc8dc08 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55c23fc8dbd0 'const int &'
|   `-QualType 0x55c23fc7f701 'const int' const
|     `-SubstTemplateTypeParmType 0x55c23fc7f700 'int' sugar
|       |-TemplateTypeParmType 0x55c23f98f270 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c23f98f218 'T'
|       `-BuiltinType 0x55c23f691370 'int'
|-TypedefDecl 0x55c23fc8dc98 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55c23fc8dc60 'int *'
|   `-SubstTemplateTypeParmType 0x55c23fc7f700 'int' sugar
|     |-TemplateTypeParmType 0x55c23f98f270 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c23f98f218 'T'
|     `-BuiltinType 0x55c23f691370 'int'
|-TypedefDecl 0x55c23fc8dd28 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55c23fc8dcf0 'const int *'
|   `-QualType 0x55c23fc7f701 'const int' const
|     `-SubstTemplateTypeParmType 0x55c23fc7f700 'int' sugar
|       |-TemplateTypeParmType 0x55c23f98f270 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c23f98f218 'T'
|       `-BuiltinType 0x55c23f691370 'int'
|-TypedefDecl 0x55c23fc8e910 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55c23fc8e8c0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55c23fc8e8a0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55c23fc8e830 'type'
|     `-SubstTemplateTypeParmType 0x55c23fc8e5f0 'int' sugar
|       |-TemplateTypeParmType 0x55c23f962790 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c23f962740 'T'
|       `-BuiltinType 0x55c23f691370 'int'
|-TypedefDecl 0x55c23fc8e978 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55c23fc8dbd0 'const int &'
|   `-QualType 0x55c23fc7f701 'const int' const
|     `-SubstTemplateTypeParmType 0x55c23fc7f700 'int' sugar
|       |-TemplateTypeParmType 0x55c23f98f270 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c23f98f218 'T'
|       `-BuiltinType 0x55c23f691370 'int'
|-TypedefDecl 0x55c23fc8e9d0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55c23f691370 'int'
|-TypedefDecl 0x55c23fc8ea38 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55c23fc8dc60 'int *'
|   `-SubstTemplateTypeParmType 0x55c23fc7f700 'int' sugar
|     |-TemplateTypeParmType 0x55c23f98f270 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c23f98f218 'T'
|     `-BuiltinType 0x55c23f691370 'int'
|-TypedefDecl 0x55c23fc8eaa0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55c23fc8dcf0 'const int *'
|   `-QualType 0x55c23fc7f701 'const int' const
|     `-SubstTemplateTypeParmType 0x55c23fc7f700 'int' sugar
|       |-TemplateTypeParmType 0x55c23f98f270 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c23f98f218 'T'
|       `-BuiltinType 0x55c23f691370 'int'
|-EnumDecl 0x55c23fc8eaf8 <line:134:5> col:5
| `-EnumConstantDecl 0x55c23fc8ebf0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55c23fc8ebd0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55c23f9908f8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55c23f9908d0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55c23f9908b0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55c23fc8ec78 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55c23fc8eec8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55c23fc8ed30 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c23fc8edd0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55c23fc8f188 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55c23fc8f070 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55c23fc8f448 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55c23fc8f330 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55c23fc8f790 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55c23fc8f670 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55c23fc8faa0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55c23fc8f980 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55c23fc8fd90 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55c23fc8fbd8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c23fc8fc50 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55c23fc8feb8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55c23fc8ff98 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c23fc8fff0 <col:30> Inherited
|-CXXMethodDecl 0x55c23fc90038 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55c23fc900e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c23fc90140 <col:30> Inherited
|-CXXMethodDecl 0x55c23fc90208 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55c23fc902b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c23fc90310 <col:30> Inherited
|-CXXMethodDecl 0x55c23fc90358 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55c23fc90408 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c23fc90460 <col:30> Inherited
|-CXXMethodDecl 0x55c23fc904a8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55c23fc90558 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c23fc905b0 <col:30> Inherited
|-CXXMethodDecl 0x55c23fc905f8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55c23fc906a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c23fc90700 <col:30> Inherited
|-CXXMethodDecl 0x55c23fc90728 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55c23fc907d8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55c23fc90888 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55c23fc90a48 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55c23fc90938 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c23fc909b0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55c23fc90b98 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55c23fc90b08 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c23fc90d48 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55c23fc90c50 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55c23fc90e00 <col:20>
| `-OptimizeNoneAttr 0x55c23fc90e58 <col:30>
|-CXXMethodDecl 0x55c23fc90f78 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55c23fc90e80 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55c23fc91030 <col:20>
| `-OptimizeNoneAttr 0x55c23fc91088 <col:30>
|-CXXMethodDecl 0x55c23fc91140 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55c23fc910b0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c23fc91288 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55c23fc911f8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c23fc913b8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55c23fc914e8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55c23fc915b8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55c23fc91688 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55c23fc917c8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55c23fc91738 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c23fc91910 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55c23fc91880 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c23fc91a58 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55c23fc919c8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55c23fc91b10 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55c23fc91c10 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55c23fc91b80 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55c23fc91cc8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55c23fc91d88 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55c23fc91e88 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55c23fc92008 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55c23fc91f48 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55c23fc927c8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55c23fc920c0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55c23fc92728 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55c23fc92628 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55c23fc928a8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55c23fc929f8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55c23fc92968 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55c23fc92ab0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55c23fc92cf8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55c23fc92b70 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55c23fc92be8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55c23fc92eb8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55c23fc92dc8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55c23fc93108 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55c23fc92f80 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55c23fc92ff8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55c23fc931c8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55c23fc93428 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55c23fc93330 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55c23fc934f8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c23fc7d5c8 prev 0x55c23fc60b08 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55c23fc7d6c0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55c23fc7d7b0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55c23fca5150 <col:16, line:828:9>
|-CXXDestructorDecl 0x55c23fc7d8a0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55c23fca5160 <col:25, line:830:9>
|-CXXMethodDecl 0x55c23fc7d9a0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55c23fc7da50 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55c23fc7daf8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55c23fc7daf8
| `-ParmVarDecl 0x55c23fc7dc08 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55c23fc7e3c8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55c23fc7e3c8
  `-ParmVarDecl 0x55c23fc7e4d8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c23fc60918 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55c23fc60a78 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55c23fc60b08 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55c23fc60bc0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55c23fc60cc8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55c23fc60bf8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55c23fc963e8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55c23fc963c8 <col:31> 'int' 0
|-CXXConstructorDecl 0x55c23fc60fe8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55c23fc60e60 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55c23fc60ed8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55c23fc96420 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55c23fc96400 <col:59> 'int' 0
|-CXXConstructorDecl 0x55c23fc611c0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55c23fc610b0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55c23fc61128 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55c23fc96458 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55c23fc96438 <col:55> 'int' 0
|-CXXConstructorDecl 0x55c23fc61578 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55c23fc61360 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55c23fc613d8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55c23fc61450 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55c23fc96490 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55c23fc96470 <col:31> 'int' 0
|-CXXConstructorDecl 0x55c23fc61738 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55c23fc61678 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55c23fc61830 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55c23fc61a18 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55c23fc61920 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55c23fc61b08 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55c23fc96840 <col:24, line:291:5>
|   `-ReturnStmt 0x55c23fc96830 <line:290:9, col:79>
|     `-BinaryOperator 0x55c23fc96810 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55c23fc966e8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55c23fc96640 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55c23fc96620 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55c23fc96518 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55c23fc96500 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55c23fc964e8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55c23fc964b8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55c23fc7f3f0
|       | |   |       `-CXXThisExpr 0x55c23fc964a8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55c23fc96608 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55c23fc965f0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55c23fc965b8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55c23fc96588 <col:28, col:35> '<bound member function type>' ->size 0x55c23fc41bc8
|       | |           `-ImplicitCastExpr 0x55c23fc965d8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55c23fc96570 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55c23fc96540 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55c23fc7f3f0
|       | |                 `-CXXThisExpr 0x55c23fc96530 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55c23fc966d0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55c23fc966b8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55c23fc966a0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55c23fc96670 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55c23fc93640
|       |         `-CXXThisExpr 0x55c23fc96660 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55c23fc967f0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55c23fc967d8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55c23fc967c0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55c23fc96780 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55c23fc96768 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55c23fc96718 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55c23fc936f0
|         |     |   `-CXXThisExpr 0x55c23fc96708 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55c23fc96748 <col:73> 'int' 0
|         `-IntegerLiteral 0x55c23fc967a0 <col:79> 'int' 0
|-CXXMethodDecl 0x55c23fc61bc8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55c23fc96a18 <col:32, line:296:5>
|   `-ReturnStmt 0x55c23fc96a08 <line:295:9, col:49>
|     `-BinaryOperator 0x55c23fc969e8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55c23fc968c8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55c23fc968b0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55c23fc96898 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55c23fc96868 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55c23fc93640
|       |       `-CXXThisExpr 0x55c23fc96858 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55c23fc969c8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55c23fc969b0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55c23fc96998 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55c23fc96958 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55c23fc96940 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55c23fc968f0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55c23fc936f0
|         |     |   `-CXXThisExpr 0x55c23fc968e0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55c23fc96920 <col:43> 'int' 0
|         `-IntegerLiteral 0x55c23fc96978 <col:49> 'int' 0
|-CXXMethodDecl 0x55c23fc61cb8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55c23fc96c28 <col:19, line:306:5>
|   |-IfStmt 0x55c23fc96b48 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55c23fc96a88 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55c23fc96a70 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55c23fc96a40 <col:13> 'Vector<String> *' lvalue ->_conf 0x55c23fc7f3f0
|   | |     `-CXXThisExpr 0x55c23fc96a30 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55c23fc96b28 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55c23fc96af8 <col:13, col:20> '<bound member function type>' ->clear 0x55c23fc445c8
|   |     `-ImplicitCastExpr 0x55c23fc96ae0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55c23fc96ab0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55c23fc7f3f0
|   |         `-CXXThisExpr 0x55c23fc96aa0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55c23fc96bd0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55c23fc96ba0 <col:9, col:16> '<bound member function type>' .clear 0x55c23fc931c8
|   |   `-MemberExpr 0x55c23fc96b70 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55c23fc935e0
|   |     `-CXXThisExpr 0x55c23fc96b60 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55c23fc96c18 <line:305:9, col:17>
|     `-UnaryOperator 0x55c23fc96c00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c23fc96bf0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55c23fc61f38 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55c23fc61e40 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55c23fc620b8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55c23fc61ff0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55c23fc62438 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55c23fc62160 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55c23fc62398 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55c23fc62208 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55c23fc62280 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55c23fc96f48 <col:67, line:327:5>
|     |-WhileStmt 0x55c23fc96ef8 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55c23fc96d10 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55c23fc96c90 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55c23fbb0e58 0x55c23f9fa438 0x55c23f9fa110 0x55c23f9eb8f0 0x55c23f9eb5a0 0x55c23f9eae90 0x55c23f9bd800 0x55c23f949cc0
|     | | |-DeclRefExpr 0x55c23fc96c50 <col:16> 'Iter' lvalue ParmVar 0x55c23fc62208 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55c23fc96c70 <col:25> 'Iter' lvalue ParmVar 0x55c23fc62280 'end' 'Iter'
|     | `-CompoundStmt 0x55c23fc96ed8 <col:30, line:325:9>
|     |   |-CallExpr 0x55c23fc96e78 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55c23fc96d58 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55c23fc96e48 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55c23fc96dd8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c23fbb5fd8 0x55c23fbb5bf8 0x55c23fbb5828 0x55c23fbb5448 0x55c23fbb5068 0x55c23fbb4c98
|     |   |   `-DeclRefExpr 0x55c23fc96db8 <col:24> 'Iter' lvalue ParmVar 0x55c23fc62208 'begin' 'Iter'
|     |   `-UnaryOperator 0x55c23fc96ec0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55c23fc96ea0 <col:15> 'Iter' lvalue ParmVar 0x55c23fc62208 'begin' 'Iter'
|     `-ReturnStmt 0x55c23fc96f38 <line:326:9, col:17>
|       `-UnaryOperator 0x55c23fc96f20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c23fc96f10 <col:17> 'Args *' this
|-CXXMethodDecl 0x55c23fc62540 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55c23fc624b0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55c23fc62688 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55c23fc625f8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55c23fc62750 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55c23fc97028 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55c23fc96fc8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55c23fc96f78 <col:9> '<bound member function type>' ->reset_from 0x55c23fc93a68
|   | | `-CXXThisExpr 0x55c23fc96f68 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55c23fc96fa8 <col:20> 'int' 0
|   `-ReturnStmt 0x55c23fc97018 <line:352:9, col:17>
|     `-UnaryOperator 0x55c23fc97000 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c23fc96ff0 <col:17> 'Args *' this
|-VarDecl 0x55c23fc62808 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55c23fc62870 <col:38> 'int' 1
|-VarDecl 0x55c23fc62900 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55c23fc62968 <col:39> 'int' 2
|-VarDecl 0x55c23fc629f8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55c23fc62a60 <col:39> 'int' 4
|-VarDecl 0x55c23fc62af0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55c23fc62b58 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55c23fc62ed8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55c23fc62bd0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55c23fc62e38 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55c23fc62c80 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55c23fc62d28 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x55c23fc97180 <col:43, line:371:5>
| |   `-ReturnStmt 0x55c23fc97170 <line:370:9, col:34>
| |     `-CallExpr 0x55c23fc97138 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55c23fc97058 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55c23fc970d8 <col:21> 'const char *' lvalue ParmVar 0x55c23fc62c80 'keyword' 'const char *'
| |       |-IntegerLiteral 0x55c23fc970f8 <col:30> 'int' 0
| |       `-DeclRefExpr 0x55c23fc97118 <col:33> 'T' lvalue ParmVar 0x55c23fc62d28 'x' 'T &'
| `-CXXMethodDecl 0x55c23fcf2828 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x55c23fcf2648 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x55c23fcf2718 <col:37, col:40> col:40 x 'bool &'
|-FunctionTemplateDecl 0x55c23fc63208 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55c23fc62f40 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c23fc63168 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55c23fc62ff0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc63098 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55c23fc972d0 <col:45, line:375:5>
|     `-ReturnStmt 0x55c23fc972c0 <line:374:9, col:42>
|       `-CallExpr 0x55c23fc97288 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc971a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc97228 <col:21> 'const char *' lvalue ParmVar 0x55c23fc62ff0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c23fc97248 <col:30> 'const int' lvalue Var 0x55c23fc62808 'mandatory' 'const int'
|         `-DeclRefExpr 0x55c23fc97268 <col:41> 'T' lvalue ParmVar 0x55c23fc63098 'x' 'T &'
|-FunctionTemplateDecl 0x55c23fc63538 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55c23fc63270 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c23fc63498 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55c23fc63320 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc633c8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55c23fc97420 <col:45, line:379:5>
|     `-ReturnStmt 0x55c23fc97410 <line:378:9, col:43>
|       `-CallExpr 0x55c23fc973d8 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc972f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc97378 <col:21> 'const char *' lvalue ParmVar 0x55c23fc63320 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c23fc97398 <col:30> 'const int' lvalue Var 0x55c23fc62900 'positional' 'const int'
|         `-DeclRefExpr 0x55c23fc973b8 <col:42> 'T' lvalue ParmVar 0x55c23fc633c8 'x' 'T &'
|-FunctionTemplateDecl 0x55c23fc63868 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55c23fc635a0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c23fc637c8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55c23fc63650 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc636f8 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x55c23fc97620 <col:46, line:383:5>
|     `-ReturnStmt 0x55c23fc97610 <line:382:9, col:55>
|       `-CallExpr 0x55c23fc975d8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc97448 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc974c8 <col:21> 'const char *' lvalue ParmVar 0x55c23fc63650 'keyword' 'const char *'
|         |-BinaryOperator 0x55c23fc97598 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55c23fc97548 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55c23fc97528 <col:30> 'const int' lvalue Var 0x55c23fc62808 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55c23fc97580 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55c23fc97560 <col:42> 'const int' lvalue Var 0x55c23fc62900 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55c23fc975b8 <col:54> 'T' lvalue ParmVar 0x55c23fc636f8 'x' 'T &'
|-FunctionTemplateDecl 0x55c23fc63c68 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55c23fc638d0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c23fc63bc8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55c23fc63980 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc63a00 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55c23fc63aa8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55c23fc97760 <col:54, line:388:5>
|     |-CallExpr 0x55c23fc976e8 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c23fc97638 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55c23fc97678 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55c23fc97688 <col:30> 'const char *' lvalue ParmVar 0x55c23fc63980 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c23fc976a8 <col:39> 'int' lvalue ParmVar 0x55c23fc63a00 'flags' 'int'
|     | `-DeclRefExpr 0x55c23fc976c8 <col:46> 'T' lvalue ParmVar 0x55c23fc63aa8 'x' 'T &'
|     `-ReturnStmt 0x55c23fc97750 <line:387:9, col:17>
|       `-UnaryOperator 0x55c23fc97738 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c23fc97728 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c23fc64118 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55c23fc63cd8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c23fc63d58 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55c23fc64078 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55c23fc63e18 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc63eb8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55c23fc63f58 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c23fc978d0 <col:74, line:403:5>
|     `-ReturnStmt 0x55c23fc978c0 <line:402:9, col:56>
|       `-CallExpr 0x55c23fc97880 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc97790 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc97800 <col:28> 'const char *' lvalue ParmVar 0x55c23fc63e18 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c23fc97820 <col:37> 'int' 0
|         |-DeclRefExpr 0x55c23fc97840 <col:40> 'T' lvalue ParmVar 0x55c23fc63eb8 'x' 'T &'
|         `-DeclRefExpr 0x55c23fc97860 <col:43> 'const V' lvalue ParmVar 0x55c23fc63f58 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55c23fc64588 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55c23fc64188 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c23fc64208 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55c23fc644e8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55c23fc642c8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc64368 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55c23fc64408 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c23fc97a38 <col:76, line:407:5>
|     `-ReturnStmt 0x55c23fc97a28 <line:406:9, col:65>
|       `-CallExpr 0x55c23fc979e8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc978f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc97968 <col:28> 'const char *' lvalue ParmVar 0x55c23fc642c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c23fc97988 <col:37> 'const int' lvalue Var 0x55c23fc62900 'positional' 'const int'
|         |-DeclRefExpr 0x55c23fc979a8 <col:49> 'T' lvalue ParmVar 0x55c23fc64368 'x' 'T &'
|         `-DeclRefExpr 0x55c23fc979c8 <col:52> 'const V' lvalue ParmVar 0x55c23fc64408 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55c23fc64ad8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55c23fc645f8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c23fc64678 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55c23fc64a38 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55c23fc64738 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc647b8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55c23fc64858 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55c23fc648f8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c23fc97ba0 <col:85, line:412:5>
|     |-CallExpr 0x55c23fc97b20 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c23fc97a50 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55c23fc97a90 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55c23fc97aa0 <col:37> 'const char *' lvalue ParmVar 0x55c23fc64738 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c23fc97ac0 <col:46> 'int' lvalue ParmVar 0x55c23fc647b8 'flags' 'int'
|     | |-DeclRefExpr 0x55c23fc97ae0 <col:53> 'T' lvalue ParmVar 0x55c23fc64858 'x' 'T &'
|     | `-DeclRefExpr 0x55c23fc97b00 <col:56> 'const V' lvalue ParmVar 0x55c23fc648f8 'default_value' 'const V &'
|     `-ReturnStmt 0x55c23fc97b90 <line:411:9, col:17>
|       `-UnaryOperator 0x55c23fc97b78 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c23fc97b68 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c23fc64f68 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55c23fc64b50 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc64bc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55c23fc64ec8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55c23fc64c88 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55c23fc64d00 <col:37, col:39> col:39 referenced parser 'P'
| | |-ParmVarDecl 0x55c23fc64da8 <col:47, col:50> col:50 referenced x 'T &'
| | `-CompoundStmt 0x55c23fc97d20 <col:53, line:425:5>
| |   `-ReturnStmt 0x55c23fc97d10 <line:424:9, col:42>
| |     `-CallExpr 0x55c23fc97cd0 <col:16, col:42> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55c23fc97bd0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55c23fc97c50 <col:21> 'const char *' lvalue ParmVar 0x55c23fc64c88 'keyword' 'const char *'
| |       |-IntegerLiteral 0x55c23fc97c70 <col:30> 'int' 0
| |       |-DeclRefExpr 0x55c23fc97c90 <col:33> 'P' lvalue ParmVar 0x55c23fc64d00 'parser' 'P'
| |       `-DeclRefExpr 0x55c23fc97cb0 <col:41> 'T' lvalue ParmVar 0x55c23fc64da8 'x' 'T &'
| `-CXXMethodDecl 0x55c23fcf1da8 <line:423:5, line:425:5> line:423:11 used read 'Args &(const char *, FixedPointArg, unsigned int &)'
|   |-TemplateArgument type 'FixedPointArg'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55c23fcf1b50 <col:16, col:28> col:28 keyword 'const char *'
|   |-ParmVarDecl 0x55c23fcf1bf8 <col:37, col:39> col:39 parser 'FixedPointArg':'FixedPointArg'
|   `-ParmVarDecl 0x55c23fcf1cc8 <col:47, col:50> col:50 x 'unsigned int &'
|-FunctionTemplateDecl 0x55c23fc653b8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55c23fc64fd8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc65058 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c23fc65318 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c23fc65118 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc65190 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55c23fc65238 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55c23fc97e98 <col:55, line:429:5>
|     `-ReturnStmt 0x55c23fc97e88 <line:428:9, col:50>
|       `-CallExpr 0x55c23fc97e48 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc97d48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc97dc8 <col:21> 'const char *' lvalue ParmVar 0x55c23fc65118 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c23fc97de8 <col:30> 'const int' lvalue Var 0x55c23fc62808 'mandatory' 'const int'
|         |-DeclRefExpr 0x55c23fc97e08 <col:41> 'P' lvalue ParmVar 0x55c23fc65190 'parser' 'P'
|         `-DeclRefExpr 0x55c23fc97e28 <col:49> 'T' lvalue ParmVar 0x55c23fc65238 'x' 'T &'
|-FunctionTemplateDecl 0x55c23fc65808 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55c23fc65428 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc654a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55c23fc65768 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55c23fc65568 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55c23fc655e0 <col:39, col:41> col:41 referenced parser 'P'
| | |-ParmVarDecl 0x55c23fc65688 <col:49, col:52> col:52 referenced x 'T &'
| | `-CompoundStmt 0x55c23fc98010 <col:55, line:433:5>
| |   `-ReturnStmt 0x55c23fc98000 <line:432:9, col:51>
| |     `-CallExpr 0x55c23fc97fc0 <col:16, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55c23fc97ec0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55c23fc97f40 <col:21> 'const char *' lvalue ParmVar 0x55c23fc65568 'keyword' 'const char *'
| |       |-DeclRefExpr 0x55c23fc97f60 <col:30> 'const int' lvalue Var 0x55c23fc62900 'positional' 'const int'
| |       |-DeclRefExpr 0x55c23fc97f80 <col:42> 'P' lvalue ParmVar 0x55c23fc655e0 'parser' 'P'
| |       `-DeclRefExpr 0x55c23fc97fa0 <col:50> 'T' lvalue ParmVar 0x55c23fc65688 'x' 'T &'
| `-CXXMethodDecl 0x55c23fcf12c8 <line:431:5, line:433:5> line:431:11 used read_p 'Args &(const char *, FixedPointArg, unsigned int &)'
|   |-TemplateArgument type 'FixedPointArg'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55c23fcf1030 <col:18, col:30> col:30 keyword 'const char *'
|   |-ParmVarDecl 0x55c23fcf10d8 <col:39, col:41> col:41 parser 'FixedPointArg':'FixedPointArg'
|   `-ParmVarDecl 0x55c23fcf11a8 <col:49, col:52> col:52 x 'unsigned int &'
|-FunctionTemplateDecl 0x55c23fc65c58 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55c23fc65878 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc658f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c23fc65bb8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c23fc659b8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc65a30 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55c23fc65ad8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55c23fc98238 <col:56, line:437:5>
|     `-ReturnStmt 0x55c23fc98228 <line:436:9, col:63>
|       `-CallExpr 0x55c23fc981e8 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc98038 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc980b8 <col:21> 'const char *' lvalue ParmVar 0x55c23fc659b8 'keyword' 'const char *'
|         |-BinaryOperator 0x55c23fc98188 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55c23fc98138 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55c23fc98118 <col:30> 'const int' lvalue Var 0x55c23fc62808 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55c23fc98170 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55c23fc98150 <col:42> 'const int' lvalue Var 0x55c23fc62900 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55c23fc981a8 <col:54> 'P' lvalue ParmVar 0x55c23fc65a30 'parser' 'P'
|         `-DeclRefExpr 0x55c23fc981c8 <col:62> 'T' lvalue ParmVar 0x55c23fc65ad8 'x' 'T &'
|-FunctionTemplateDecl 0x55c23fc66188 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55c23fc65cc8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc65d48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c23fc660e8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55c23fc65e08 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc65e88 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55c23fc65f00 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55c23fc65fa8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55c23fc983a0 <col:64, line:442:5>
|     |-CallExpr 0x55c23fc98320 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c23fc98250 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55c23fc98290 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55c23fc982a0 <col:30> 'const char *' lvalue ParmVar 0x55c23fc65e08 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c23fc982c0 <col:39> 'int' lvalue ParmVar 0x55c23fc65e88 'flags' 'int'
|     | |-DeclRefExpr 0x55c23fc982e0 <col:46> 'P' lvalue ParmVar 0x55c23fc65f00 'parser' 'P'
|     | `-DeclRefExpr 0x55c23fc98300 <col:54> 'T' lvalue ParmVar 0x55c23fc65fa8 'x' 'T &'
|     `-ReturnStmt 0x55c23fc98390 <line:441:9, col:17>
|       `-UnaryOperator 0x55c23fc98378 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c23fc98368 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c23fc66788 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55c23fc66200 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc66278 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55c23fc662f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55c23fc666e8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55c23fc663c0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc66438 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55c23fc664d8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55c23fc665a8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c23fc98538 <col:84, line:458:5>
|     `-ReturnStmt 0x55c23fc98528 <line:457:9, col:64>
|       `-CallExpr 0x55c23fc984e0 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc983d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc98440 <col:28> 'const char *' lvalue ParmVar 0x55c23fc663c0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c23fc98460 <col:37> 'int' 0
|         |-DeclRefExpr 0x55c23fc98480 <col:40> 'P' lvalue ParmVar 0x55c23fc66438 'parser' 'P'
|         |-DeclRefExpr 0x55c23fc984a0 <col:48> 'T' lvalue ParmVar 0x55c23fc664d8 'x' 'T &'
|         `-DeclRefExpr 0x55c23fc984c0 <col:51> 'const V' lvalue ParmVar 0x55c23fc665a8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55c23fc66d08 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55c23fc66800 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc66878 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55c23fc668f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55c23fc66c68 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55c23fc669c0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc66a38 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55c23fc66ad8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55c23fc66b78 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c23fc986c8 <col:86, line:462:5>
|     `-ReturnStmt 0x55c23fc986b8 <line:461:9, col:73>
|       `-CallExpr 0x55c23fc98670 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc98560 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc985d0 <col:28> 'const char *' lvalue ParmVar 0x55c23fc669c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c23fc985f0 <col:37> 'const int' lvalue Var 0x55c23fc62900 'positional' 'const int'
|         |-DeclRefExpr 0x55c23fc98610 <col:49> 'P' lvalue ParmVar 0x55c23fc66a38 'parser' 'P'
|         |-DeclRefExpr 0x55c23fc98630 <col:57> 'T' lvalue ParmVar 0x55c23fc66ad8 'x' 'T &'
|         `-DeclRefExpr 0x55c23fc98650 <col:60> 'const V' lvalue ParmVar 0x55c23fc66b78 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55c23fc67368 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55c23fc66d80 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc66df8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55c23fc66e78 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55c23fc672c8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55c23fc66f40 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc66fc0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55c23fc67038 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55c23fc670d8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55c23fc67178 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c23fc98858 <col:95, line:467:5>
|     |-CallExpr 0x55c23fc987d0 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c23fc986e0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55c23fc98720 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55c23fc98730 <col:37> 'const char *' lvalue ParmVar 0x55c23fc66f40 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c23fc98750 <col:46> 'int' lvalue ParmVar 0x55c23fc66fc0 'flags' 'int'
|     | |-DeclRefExpr 0x55c23fc98770 <col:53> 'P' lvalue ParmVar 0x55c23fc67038 'parser' 'P'
|     | |-DeclRefExpr 0x55c23fc98790 <col:61> 'T' lvalue ParmVar 0x55c23fc670d8 'x' 'T &'
|     | `-DeclRefExpr 0x55c23fc987b0 <col:64> 'const V' lvalue ParmVar 0x55c23fc67178 'default_value' 'const V &'
|     `-ReturnStmt 0x55c23fc98848 <line:466:9, col:17>
|       `-UnaryOperator 0x55c23fc98830 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c23fc98820 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c23fc6ce00 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55c23fc673e8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc67468 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c23fc674e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c23fc6cd60 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c23fc675b0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc67628 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55c23fc676c8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55c23fc67768 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55c23fc98a00 <col:63, line:481:5>
|     `-ReturnStmt 0x55c23fc989f0 <line:480:9, col:47>
|       `-CallExpr 0x55c23fc989a8 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc98888 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc98908 <col:21> 'const char *' lvalue ParmVar 0x55c23fc675b0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c23fc98928 <col:30> 'int' 0
|         |-DeclRefExpr 0x55c23fc98948 <col:33> 'P' lvalue ParmVar 0x55c23fc67628 'parser' 'P'
|         |-DeclRefExpr 0x55c23fc98968 <col:41> 'T1' lvalue ParmVar 0x55c23fc676c8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55c23fc98988 <col:45> 'T2' lvalue ParmVar 0x55c23fc67768 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55c23fc6d388 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55c23fc6ce78 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc6cef8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c23fc6cf78 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c23fc6d2e8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c23fc6d040 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc6d0b8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55c23fc6d158 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55c23fc6d1f8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55c23fc98ba0 <col:65, line:485:5>
|     `-ReturnStmt 0x55c23fc98b90 <line:484:9, col:55>
|       `-CallExpr 0x55c23fc98b48 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc98a28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc98aa8 <col:21> 'const char *' lvalue ParmVar 0x55c23fc6d040 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c23fc98ac8 <col:30> 'const int' lvalue Var 0x55c23fc62808 'mandatory' 'const int'
|         |-DeclRefExpr 0x55c23fc98ae8 <col:41> 'P' lvalue ParmVar 0x55c23fc6d0b8 'parser' 'P'
|         |-DeclRefExpr 0x55c23fc98b08 <col:49> 'T1' lvalue ParmVar 0x55c23fc6d158 'x1' 'T1 &'
|         `-DeclRefExpr 0x55c23fc98b28 <col:53> 'T2' lvalue ParmVar 0x55c23fc6d1f8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55c23fc6d908 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55c23fc6d400 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc6d478 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c23fc6d4f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c23fc6d868 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c23fc6d5c0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc6d638 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55c23fc6d6d8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55c23fc6d778 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55c23fc98d40 <col:65, line:489:5>
|     `-ReturnStmt 0x55c23fc98d30 <line:488:9, col:56>
|       `-CallExpr 0x55c23fc98ce8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc98bc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc98c48 <col:21> 'const char *' lvalue ParmVar 0x55c23fc6d5c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c23fc98c68 <col:30> 'const int' lvalue Var 0x55c23fc62900 'positional' 'const int'
|         |-DeclRefExpr 0x55c23fc98c88 <col:42> 'P' lvalue ParmVar 0x55c23fc6d638 'parser' 'P'
|         |-DeclRefExpr 0x55c23fc98ca8 <col:50> 'T1' lvalue ParmVar 0x55c23fc6d6d8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55c23fc98cc8 <col:54> 'T2' lvalue ParmVar 0x55c23fc6d778 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55c23fc6de88 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55c23fc6d980 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc6d9f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c23fc6da78 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c23fc6dde8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c23fc6db40 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc6dbb8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55c23fc6dc58 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55c23fc6dcf8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55c23fc98f90 <col:66, line:493:5>
|     `-ReturnStmt 0x55c23fc98f80 <line:492:9, col:68>
|       `-CallExpr 0x55c23fc98f38 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc98d68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc98de8 <col:21> 'const char *' lvalue ParmVar 0x55c23fc6db40 'keyword' 'const char *'
|         |-BinaryOperator 0x55c23fc98eb8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55c23fc98e68 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55c23fc98e48 <col:30> 'const int' lvalue Var 0x55c23fc62808 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55c23fc98ea0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55c23fc98e80 <col:42> 'const int' lvalue Var 0x55c23fc62900 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55c23fc98ed8 <col:54> 'P' lvalue ParmVar 0x55c23fc6dbb8 'parser' 'P'
|         |-DeclRefExpr 0x55c23fc98ef8 <col:62> 'T1' lvalue ParmVar 0x55c23fc6dc58 'x1' 'T1 &'
|         `-DeclRefExpr 0x55c23fc98f18 <col:66> 'T2' lvalue ParmVar 0x55c23fc6dcf8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55c23fc6e4e8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55c23fc6df00 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc6df78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c23fc6dff8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c23fc6e448 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c23fc6e0c0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc6e140 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55c23fc6e1b8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55c23fc6e258 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55c23fc6e2f8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55c23fc99120 <col:74, line:498:5>
|     |-CallExpr 0x55c23fc99098 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c23fc98fa8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55c23fc98fe8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55c23fc98ff8 <col:30> 'const char *' lvalue ParmVar 0x55c23fc6e0c0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c23fc99018 <col:39> 'int' lvalue ParmVar 0x55c23fc6e140 'flags' 'int'
|     | |-DeclRefExpr 0x55c23fc99038 <col:46> 'P' lvalue ParmVar 0x55c23fc6e1b8 'parser' 'P'
|     | |-DeclRefExpr 0x55c23fc99058 <col:54> 'T1' lvalue ParmVar 0x55c23fc6e258 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55c23fc99078 <col:58> 'T2' lvalue ParmVar 0x55c23fc6e2f8 'x2' 'T2 &'
|     `-ReturnStmt 0x55c23fc99110 <line:497:9, col:17>
|       `-UnaryOperator 0x55c23fc990f8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c23fc990e8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c23fc6e848 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55c23fc6e568 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c23fc6e7a8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55c23fc6e620 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc6e698 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55c23fc99268 <col:52, line:509:5>
|     `-ReturnStmt 0x55c23fc99258 <line:508:9, col:44>
|       `-CallExpr 0x55c23fc99220 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc99150 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc991c0 <col:26> 'const char *' lvalue ParmVar 0x55c23fc6e620 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c23fc991e0 <col:35> 'int' 0
|         `-DeclRefExpr 0x55c23fc99200 <col:38> 'P' lvalue ParmVar 0x55c23fc6e698 'parser' 'P'
|-FunctionTemplateDecl 0x55c23fc6eb48 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55c23fc6e8b0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c23fc6eaa8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55c23fc6e960 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc6e9d8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55c23fc993a8 <col:54, line:513:5>
|     `-ReturnStmt 0x55c23fc99398 <line:512:9, col:52>
|       `-CallExpr 0x55c23fc99360 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc99290 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc99300 <col:26> 'const char *' lvalue ParmVar 0x55c23fc6e960 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c23fc99320 <col:35> 'const int' lvalue Var 0x55c23fc62808 'mandatory' 'const int'
|         `-DeclRefExpr 0x55c23fc99340 <col:46> 'P' lvalue ParmVar 0x55c23fc6e9d8 'parser' 'P'
|-FunctionTemplateDecl 0x55c23fc6ee48 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55c23fc6ebb0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c23fc6eda8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55c23fc6ec60 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc6ecd8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55c23fc994e8 <col:54, line:517:5>
|     `-ReturnStmt 0x55c23fc994d8 <line:516:9, col:53>
|       `-CallExpr 0x55c23fc994a0 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc993d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc99440 <col:26> 'const char *' lvalue ParmVar 0x55c23fc6ec60 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c23fc99460 <col:35> 'const int' lvalue Var 0x55c23fc62900 'positional' 'const int'
|         `-DeclRefExpr 0x55c23fc99480 <col:47> 'P' lvalue ParmVar 0x55c23fc6ecd8 'parser' 'P'
|-FunctionTemplateDecl 0x55c23fc6f148 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55c23fc6eeb0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c23fc6f0a8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55c23fc6ef60 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc6efd8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55c23fc996d8 <col:55, line:521:5>
|     `-ReturnStmt 0x55c23fc996c8 <line:520:9, col:65>
|       `-CallExpr 0x55c23fc99690 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc99510 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc99580 <col:26> 'const char *' lvalue ParmVar 0x55c23fc6ef60 'keyword' 'const char *'
|         |-BinaryOperator 0x55c23fc99650 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55c23fc99600 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55c23fc995e0 <col:35> 'const int' lvalue Var 0x55c23fc62808 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55c23fc99638 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55c23fc99618 <col:47> 'const int' lvalue Var 0x55c23fc62900 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55c23fc99670 <col:59> 'P' lvalue ParmVar 0x55c23fc6efd8 'parser' 'P'
|-FunctionTemplateDecl 0x55c23fc6f518 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55c23fc6f1b0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c23fc6f478 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55c23fc6f260 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc6f2e0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55c23fc6f358 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55c23fc99818 <col:63, line:526:5>
|     |-CallExpr 0x55c23fc997a0 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c23fc996f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55c23fc99730 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55c23fc99740 <col:35> 'const char *' lvalue ParmVar 0x55c23fc6f260 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c23fc99760 <col:44> 'int' lvalue ParmVar 0x55c23fc6f2e0 'flags' 'int'
|     | `-DeclRefExpr 0x55c23fc99780 <col:51> 'P' lvalue ParmVar 0x55c23fc6f358 'parser' 'P'
|     `-ReturnStmt 0x55c23fc99808 <line:525:9, col:17>
|       `-UnaryOperator 0x55c23fc997f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c23fc997e0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c23fc6f968 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55c23fc6f588 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc6f608 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c23fc6f8c8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c23fc6f6c8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc6f740 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55c23fc6f7e8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55c23fc99970 <col:58, line:541:5>
|     `-ReturnStmt 0x55c23fc99960 <line:540:9, col:39>
|       `-CallExpr 0x55c23fc99928 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc99848 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc998c8 <col:21> 'const char *' lvalue ParmVar 0x55c23fc6f6c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c23fc998e8 <col:30> 'P' lvalue ParmVar 0x55c23fc6f740 'parser' 'P'
|         `-DeclRefExpr 0x55c23fc99908 <col:38> 'T' lvalue ParmVar 0x55c23fc6f7e8 'x' 'T &'
|-FunctionTemplateDecl 0x55c23fc6fdb8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55c23fc6f9d8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc6fa58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c23fc6fd18 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c23fc6fb18 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc6fb90 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55c23fc6fc38 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55c23fc99aa8 <col:60, line:545:5>
|     `-ReturnStmt 0x55c23fc99a98 <line:544:9, col:41>
|       `-CallExpr 0x55c23fc99a60 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc99998 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc99a00 <col:23> 'const char *' lvalue ParmVar 0x55c23fc6fb18 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c23fc99a20 <col:32> 'P' lvalue ParmVar 0x55c23fc6fb90 'parser' 'P'
|         `-DeclRefExpr 0x55c23fc99a40 <col:40> 'T' lvalue ParmVar 0x55c23fc6fc38 'x' 'T &'
|-FunctionTemplateDecl 0x55c23fc70208 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55c23fc6fe28 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc6fea8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c23fc70168 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c23fc6ff68 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc6ffe0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55c23fc70088 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55c23fc99be0 <col:60, line:549:5>
|     `-ReturnStmt 0x55c23fc99bd0 <line:548:9, col:41>
|       `-CallExpr 0x55c23fc99b98 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc99ad0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc99b38 <col:23> 'const char *' lvalue ParmVar 0x55c23fc6ff68 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c23fc99b58 <col:32> 'P' lvalue ParmVar 0x55c23fc6ffe0 'parser' 'P'
|         `-DeclRefExpr 0x55c23fc99b78 <col:40> 'T' lvalue ParmVar 0x55c23fc70088 'x' 'T &'
|-FunctionTemplateDecl 0x55c23fc70658 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55c23fc70278 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc702f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c23fc705b8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c23fc703b8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc70430 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55c23fc704d8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55c23fc99d18 <col:61, line:553:5>
|     `-ReturnStmt 0x55c23fc99d08 <line:552:9, col:42>
|       `-CallExpr 0x55c23fc99cd0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc99c08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc99c70 <col:24> 'const char *' lvalue ParmVar 0x55c23fc703b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c23fc99c90 <col:33> 'P' lvalue ParmVar 0x55c23fc70430 'parser' 'P'
|         `-DeclRefExpr 0x55c23fc99cb0 <col:41> 'T' lvalue ParmVar 0x55c23fc704d8 'x' 'T &'
|-FunctionTemplateDecl 0x55c23fc70b38 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55c23fc706c8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc70748 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c23fc70a98 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55c23fc70808 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc70888 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55c23fc70900 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55c23fc709a8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55c23fc99e90 <col:69, line:557:5>
|     `-ReturnStmt 0x55c23fc99e80 <line:556:9, col:46>
|       `-CallExpr 0x55c23fc99e40 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc99d40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc99dc0 <col:21> 'const char *' lvalue ParmVar 0x55c23fc70808 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c23fc99de0 <col:30> 'int' lvalue ParmVar 0x55c23fc70888 'flags' 'int'
|         |-DeclRefExpr 0x55c23fc99e00 <col:37> 'P' lvalue ParmVar 0x55c23fc70900 'parser' 'P'
|         `-DeclRefExpr 0x55c23fc99e20 <col:45> 'T' lvalue ParmVar 0x55c23fc709a8 'x' 'T &'
|-FunctionTemplateDecl 0x55c23fc70e48 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55c23fc70bb0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c23fc70da8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55c23fc70c60 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc70cd8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55c23fc99fd0 <col:56, line:571:5>
|     `-ReturnStmt 0x55c23fc99fc0 <line:570:9, col:48>
|       `-CallExpr 0x55c23fc99f88 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc99eb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc99f28 <col:30> 'const char *' lvalue ParmVar 0x55c23fc70c60 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c23fc99f48 <col:39> 'int' 0
|         `-DeclRefExpr 0x55c23fc99f68 <col:42> 'P' lvalue ParmVar 0x55c23fc70cd8 'parser' 'P'
|-FunctionTemplateDecl 0x55c23fc711d8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55c23fc70eb0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c23fc71138 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55c23fc70f60 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc70fe0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55c23fc71058 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55c23fc9a1a0 <col:67, line:576:5>
|     |-CallExpr 0x55c23fc9a128 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c23fc99fe8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55c23fc9a028 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55c23fc9a038 <col:39> 'const char *' lvalue ParmVar 0x55c23fc70f60 'keyword' 'const char *'
|     | |-BinaryOperator 0x55c23fc9a0e8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55c23fc9a098 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55c23fc9a058 <col:48> 'int' lvalue ParmVar 0x55c23fc70fe0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55c23fc9a0d0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55c23fc9a0b0 <col:56> 'const int' lvalue Var 0x55c23fc62af0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55c23fc9a108 <col:68> 'P' lvalue ParmVar 0x55c23fc71058 'parser' 'P'
|     `-ReturnStmt 0x55c23fc9a190 <line:575:9, col:17>
|       `-UnaryOperator 0x55c23fc9a178 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c23fc9a168 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c23fc71628 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55c23fc71248 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc712c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c23fc71588 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c23fc71388 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc71400 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55c23fc714a8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55c23fc9a310 <col:62, line:592:5>
|     `-ReturnStmt 0x55c23fc9a300 <line:591:9, col:51>
|       `-CallExpr 0x55c23fc9a2c0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc9a1d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc9a240 <col:30> 'const char *' lvalue ParmVar 0x55c23fc71388 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c23fc9a260 <col:39> 'int' 0
|         |-DeclRefExpr 0x55c23fc9a280 <col:42> 'P' lvalue ParmVar 0x55c23fc71400 'parser' 'P'
|         `-DeclRefExpr 0x55c23fc9a2a0 <col:50> 'T' lvalue ParmVar 0x55c23fc714a8 'x' 'T &'
|-FunctionTemplateDecl 0x55c23fc71b08 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55c23fc71698 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc71718 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c23fc71a68 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55c23fc717d8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc71858 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55c23fc718d0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55c23fc71978 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55c23fc9a508 <col:73, line:597:5>
|     |-CallExpr 0x55c23fc9a488 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c23fc9a328 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55c23fc9a368 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55c23fc9a378 <col:39> 'const char *' lvalue ParmVar 0x55c23fc717d8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55c23fc9a428 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55c23fc9a3d8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55c23fc9a398 <col:48> 'int' lvalue ParmVar 0x55c23fc71858 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55c23fc9a410 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55c23fc9a3f0 <col:56> 'const int' lvalue Var 0x55c23fc62af0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55c23fc9a448 <col:68> 'P' lvalue ParmVar 0x55c23fc718d0 'parser' 'P'
|     | `-DeclRefExpr 0x55c23fc9a468 <col:76> 'T' lvalue ParmVar 0x55c23fc71978 'x' 'T &'
|     `-ReturnStmt 0x55c23fc9a4f8 <line:596:9, col:17>
|       `-UnaryOperator 0x55c23fc9a4e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c23fc9a4d0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c23fc720b8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55c23fc71b80 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc71bf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c23fc72018 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55c23fc71cb8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc71d30 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55c23fc71ef0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55c23fc9a678 <col:65, line:614:5>
|     `-ReturnStmt 0x55c23fc9a668 <line:613:9, col:46>
|       `-CallExpr 0x55c23fc9a628 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc9a538 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc9a5a8 <col:25> 'const char *' lvalue ParmVar 0x55c23fc71cb8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c23fc9a5c8 <col:34> 'int' 0
|         |-DeclRefExpr 0x55c23fc9a5e8 <col:37> 'P' lvalue ParmVar 0x55c23fc71d30 'parser' 'P'
|         `-DeclRefExpr 0x55c23fc9a608 <col:45> 'Vector<T>' lvalue ParmVar 0x55c23fc71ef0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55c23fc724e8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55c23fc72128 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c23fc72448 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55c23fc721e0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc72330 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55c23fc9a890 <col:55, line:618:5>
|     `-ReturnStmt 0x55c23fc9a880 <line:617:9, col:55>
|       `-CallExpr 0x55c23fc9a840 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc9a6a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc9a710 <col:25> 'const char *' lvalue ParmVar 0x55c23fc721e0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c23fc9a730 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55c23fc9a800 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55c23fc9a820 <col:54> 'Vector<T>' lvalue ParmVar 0x55c23fc72330 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55c23fc72ab8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55c23fc72550 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc725c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c23fc72a18 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55c23fc72688 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc72708 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55c23fc72780 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55c23fc728d0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55c23fc9aa88 <col:76, line:623:5>
|     |-CallExpr 0x55c23fc9aa08 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c23fc9a8a8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55c23fc9a8e8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55c23fc9a8f8 <col:34> 'const char *' lvalue ParmVar 0x55c23fc72688 'keyword' 'const char *'
|     | |-BinaryOperator 0x55c23fc9a9a8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55c23fc9a958 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55c23fc9a918 <col:43> 'int' lvalue ParmVar 0x55c23fc72708 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55c23fc9a990 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55c23fc9a970 <col:51> 'const int' lvalue Var 0x55c23fc62af0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55c23fc9a9c8 <col:63> 'P' lvalue ParmVar 0x55c23fc72780 'parser' 'P'
|     | `-DeclRefExpr 0x55c23fc9a9e8 <col:71> 'Vector<T>' lvalue ParmVar 0x55c23fc728d0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55c23fc9aa78 <line:622:9, col:17>
|       `-UnaryOperator 0x55c23fc9aa60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c23fc9aa50 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c23fc72ff8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55c23fc72b30 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc72ba8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c23fc72f58 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55c23fc72c68 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc72ce8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55c23fc72e30 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55c23fc9acf0 <col:66, line:627:5>
|     `-ReturnStmt 0x55c23fc9ace0 <line:626:9, col:59>
|       `-CallExpr 0x55c23fc9aca0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c23fc9aab8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c23fc9ab28 <col:25> 'const char *' lvalue ParmVar 0x55c23fc72c68 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c23fc9ab48 <col:34> 'int' lvalue ParmVar 0x55c23fc72ce8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55c23fc9ac60 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55c23fc9ac80 <col:58> 'Vector<T>' lvalue ParmVar 0x55c23fc72e30 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55c23fc73088 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55c23fc9ad70 <col:25, line:633:5>
|   `-ReturnStmt 0x55c23fc9ad60 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55c23fc9ad48 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55c23fc9ad18 <col:16> 'const bool' lvalue ->_status 0x55c23fc7f258
|         `-CXXThisExpr 0x55c23fc9ad08 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55c23fc73208 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55c23fc73140 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55c23fc9ae58 <col:27, line:639:5>
|   |-BinaryOperator 0x55c23fc9ae00 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55c23fc9ad88 <col:9> 'bool' lvalue ParmVar 0x55c23fc73140 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55c23fc9ade8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55c23fc9adb8 <col:13> 'bool' lvalue ->_status 0x55c23fc7f258
|   |     `-CXXThisExpr 0x55c23fc9ada8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55c23fc9ae48 <line:638:9, col:17>
|     `-UnaryOperator 0x55c23fc9ae30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c23fc9ae20 <col:17> 'Args *' this
|-CXXMethodDecl 0x55c23fc73388 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55c23fc732c8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55c23fc9af48 <col:39, line:644:5>
|   |-BinaryOperator 0x55c23fc9aef0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55c23fc9ae78 <col:9> 'bool' lvalue ParmVar 0x55c23fc732c8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55c23fc9aed8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55c23fc9aea8 <col:13> 'const bool' lvalue ->_status 0x55c23fc7f258
|   |     `-CXXThisExpr 0x55c23fc9ae98 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55c23fc9af38 <line:643:9, col:17>
|     `-UnaryOperator 0x55c23fc9af20 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c23fc9af10 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55c23fc73450 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55c23fc9aff0 <col:30, line:651:5>
|   `-ReturnStmt 0x55c23fc9afe0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55c23fc9afc8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55c23fc9af98 <col:16> 'bool' lvalue ->_read_status 0x55c23fb75e40
|         `-ImplicitCastExpr 0x55c23fc9af78 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55c23fc9af68 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55c23fc73598 <line:655:5, line:658:5> line:655:11 used read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55c23fc73508 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55c23fc9b0f8 <col:32, line:658:5>
|   |-BinaryOperator 0x55c23fc9b0a0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55c23fc9b008 <col:9> 'bool' lvalue ParmVar 0x55c23fc73508 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55c23fc9b088 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55c23fc9b058 <col:13> 'bool' lvalue ->_read_status 0x55c23fb75e40
|   |     `-ImplicitCastExpr 0x55c23fc9b038 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55c23fc9b028 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55c23fc9b0e8 <line:657:9, col:17>
|     `-UnaryOperator 0x55c23fc9b0d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c23fc9b0c0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55c23fc736e8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55c23fc73658 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55c23fc9b208 <col:44, line:663:5>
|   |-BinaryOperator 0x55c23fc9b1b0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55c23fc9b118 <col:9> 'bool' lvalue ParmVar 0x55c23fc73658 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55c23fc9b198 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55c23fc9b168 <col:13> 'bool' lvalue ->_read_status 0x55c23fb75e40
|   |     `-ImplicitCastExpr 0x55c23fc9b148 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55c23fc9b138 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55c23fc9b1f8 <line:662:9, col:17>
|     `-UnaryOperator 0x55c23fc9b1e0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c23fc9b1d0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55c23fc737b0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55c23fc73878 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55c23fc73940 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55c23fc73a08 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55c23fc73d18 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55c23fc73aa8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c23fc73c78 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55c23fc73b88 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55c23fc9b5c0 <col:19, line:706:5>
|     `-IfStmt 0x55c23fc9b598 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55c23fc9b308 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55c23fc9b4c8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55c23fc9b498 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55c23fc9b458 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55c23fc9b360 <col:42> '<bound member function type>' ->simple_slot 0x55c23fc96050
|       |     | `-CXXThisExpr 0x55c23fc9b350 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55c23fc9b3f8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55c23fc9b3b0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55c23f9feed8
|       |     | `-DeclRefExpr 0x55c23fc9b390 <col:55> 'T' lvalue ParmVar 0x55c23fc73b88 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55c23fc9b438 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55c23fc9b588 <line:705:13, col:34>
|         `-CallExpr 0x55c23fc9b560 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55c23fc9b4e8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55c23fc9b540 <col:33> 'T' lvalue ParmVar 0x55c23fc73b88 'x' 'T &'
|-FunctionTemplateDecl 0x55c23fc73fe8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55c23fc73d78 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c23fc73f48 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55c23fc73e58 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55c23fc9b9a0 <col:31, line:717:5>
|     |-DeclStmt 0x55c23fc9b700 <line:713:9, col:23>
|     | `-VarDecl 0x55c23fc9b5e8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55c23fc9b6d8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55c23fc9b660 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55c23fc9b6b8 <col:21> 'T' lvalue ParmVar 0x55c23fc73e58 'x' 'T &'
|     |-IfStmt 0x55c23fc9b950 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55c23fc9b7f8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55c23fc9b930 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55c23fc9b8d0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55c23fc9b860 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c23fbb5fd8 0x55c23fbb5bf8 0x55c23fbb5828 0x55c23fbb5448 0x55c23fbb5068 0x55c23fbb4c98
|     |   | `-DeclRefExpr 0x55c23fc9b840 <col:14> 'T *' lvalue Var 0x55c23fc9b5e8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55c23fc9b910 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55c23fc9b988 <line:716:9, col:16>
|       `-DeclRefExpr 0x55c23fc9b968 <col:16> 'T *' lvalue Var 0x55c23fc9b5e8 's' 'T *'
|-FunctionTemplateDecl 0x55c23fc743f8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55c23fc74048 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c23fc740c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55c23fc74358 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55c23fc741a8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55c23fc74248 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55c23fc9bcb0 <col:37, line:726:5>
|     |-IfStmt 0x55c23fc9bc40 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55c23fc9bc60 <line:723:13, col:26>
|     | | `-VarDecl 0x55c23fc9ba08 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55c23fc9baf8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55c23fc9ba80 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55c23fc9bad8 <col:25> 'T' lvalue ParmVar 0x55c23fc741a8 'x' 'T &'
|     | |-DeclRefExpr 0x55c23fc9bb20 <col:16> 'T *' lvalue Var 0x55c23fc9ba08 's' 'T *'
|     | `-BinaryOperator 0x55c23fc9bc20 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55c23fc9bbd0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55c23fc9bb60 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c23fbb5fd8 0x55c23fbb5bf8 0x55c23fbb5828 0x55c23fbb5448 0x55c23fbb5068 0x55c23fbb4c98
|     |   | `-DeclRefExpr 0x55c23fc9bb40 <col:14> 'T *' lvalue Var 0x55c23fc9ba08 's' 'T *'
|     |   `-DeclRefExpr 0x55c23fc9bc00 <col:18> 'const V' lvalue ParmVar 0x55c23fc74248 'value' 'const V &'
|     `-ReturnStmt 0x55c23fc9bca0 <line:725:9, col:17>
|       `-UnaryOperator 0x55c23fc9bc88 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c23fc9bc78 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c23fc747f8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55c23fc74460 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c23fc74758 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55c23fc74510 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc74590 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55c23fc74638 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55c23fc9cad0 <col:65, line:737:5>
|     |-DeclStmt 0x55c23fc9bd48 <line:732:9, col:26>
|     | `-VarDecl 0x55c23fc9bce0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55c23fc9ca98 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55c23fc9cab8 <line:733:13, col:58>
|       | `-VarDecl 0x55c23fc9bd70 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55c23fc9bf50 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55c23fc9bf20 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55c23fc9bf08 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55c23fc9bee8 <col:26, col:58> 'String' (CXXTemporary 0x55c23fc9bee8)
|       |           `-CXXMemberCallExpr 0x55c23fc9be78 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55c23fc9bde8 <col:26> '<bound member function type>' ->find 0x55c23fc93d38
|       |             | `-CXXThisExpr 0x55c23fc9bdd8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55c23fc9beb0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c23fc9be18 <col:31> 'const char *' lvalue ParmVar 0x55c23fc74510 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55c23fc9bec8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c23fc9be38 <col:40> 'int' lvalue ParmVar 0x55c23fc74590 'flags' 'int'
|       |             `-DeclRefExpr 0x55c23fc9be58 <col:47> 'Args::Slot *' lvalue Var 0x55c23fc9bce0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55c23fc9c008 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55c23fc9bff0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55c23fc9bfd0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55c23fc9bfa0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55c23f9c1ea8
|       |       `-ImplicitCastExpr 0x55c23fc9bf88 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55c23fc9bf68 <col:20> 'String' lvalue Var 0x55c23fc9bd70 'str' 'String'
|       `-CompoundStmt 0x55c23fc9ca78 <col:61, line:736:9>
|         |-DeclStmt 0x55c23fc9c4c0 <line:734:13, col:76>
|         | `-VarDecl 0x55c23fc9c058 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55c23fc9c490 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55c23fc9c400 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55c23fc9c448 <col:60> 'T' lvalue ParmVar 0x55c23fc74638 'variable' 'T &'
|         |     `-UnaryOperator 0x55c23fc9c478 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55c23fc9c468 <col:71> 'Args *' this
|         `-CallExpr 0x55c23fc9ca48 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55c23fc9c4e8 <col:13> '<bound member function type>' ->postparse 0x55c23fc93f48
|           | `-CXXThisExpr 0x55c23fc9c4d8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55c23fc9ca08 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55c23fc9c518 <col:23> 'T *' lvalue Var 0x55c23fc9c058 's' 'T *'
|           | `-CallExpr 0x55c23fc9c9c8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55c23fc9c7a0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55c23fc9c8a0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55c23fc9c8c0 <col:86> 'String' lvalue Var 0x55c23fc9bd70 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55c23fc9c970 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55c23fc9c900 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c23fbb5fd8 0x55c23fbb5bf8 0x55c23fbb5828 0x55c23fbb5448 0x55c23fbb5068 0x55c23fbb4c98
|           |   | `-DeclRefExpr 0x55c23fc9c8e0 <col:92> 'T *' lvalue Var 0x55c23fc9c058 's' 'T *'
|           |   `-UnaryOperator 0x55c23fc9c9b0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55c23fc9c9a0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55c23fc9ca28 <col:103> 'Args::Slot *' lvalue Var 0x55c23fc9bce0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c23fc7b0d0 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55c23fc74868 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c23fc748e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55c23fc74ca8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55c23fc749a8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc74a28 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55c23fc74ac8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55c23fc74b68 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55c23fc9d970 <col:88, line:745:5>
|     |-DeclStmt 0x55c23fc9cb68 <line:741:9, col:26>
|     | `-VarDecl 0x55c23fc9cb00 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55c23fc9cd88 <line:742:9, col:55>
|     | `-VarDecl 0x55c23fc9cb90 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55c23fc9cd70 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55c23fc9cd40 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55c23fc9cd28 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55c23fc9cd08 <col:22, col:54> 'String' (CXXTemporary 0x55c23fc9cd08)
|     |           `-CXXMemberCallExpr 0x55c23fc9cc98 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55c23fc9cc08 <col:22> '<bound member function type>' ->find 0x55c23fc93d38
|     |             | `-CXXThisExpr 0x55c23fc9cbf8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55c23fc9ccd0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55c23fc9cc38 <col:27> 'const char *' lvalue ParmVar 0x55c23fc749a8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55c23fc9cce8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55c23fc9cc58 <col:36> 'int' lvalue ParmVar 0x55c23fc74a28 'flags' 'int'
|     |             `-DeclRefExpr 0x55c23fc9cc78 <col:43> 'Args::Slot *' lvalue Var 0x55c23fc9cb00 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55c23fc9d160 <line:743:9, col:72>
|     | `-VarDecl 0x55c23fc9cdd8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55c23fc9d130 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55c23fc9d0a0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55c23fc9d0e8 <col:56> 'T' lvalue ParmVar 0x55c23fc74ac8 'variable' 'T &'
|     |     `-UnaryOperator 0x55c23fc9d118 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55c23fc9d108 <col:67> 'Args *' this
|     `-CallExpr 0x55c23fc9d940 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55c23fc9d188 <col:9> '<bound member function type>' ->postparse 0x55c23fc93f48
|       | `-CXXThisExpr 0x55c23fc9d178 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55c23fc9d900 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55c23fc9d1b8 <col:19> 'T *' lvalue Var 0x55c23fc9cdd8 's' 'T *'
|       | `-ParenExpr 0x55c23fc9d8e0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55c23fc9d8b0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55c23fc9d898 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55c23fc9d880 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55c23fc9d860 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55c23fc9d830 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55c23f9c1ea8
|       |     |       `-ImplicitCastExpr 0x55c23fc9d818 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55c23fc9d1d8 <col:25> 'String' lvalue Var 0x55c23fc9cb90 'str' 'String'
|       |     |-CallExpr 0x55c23fc9d688 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55c23fc9d460 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55c23fc9d560 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55c23fc9d580 <col:89> 'String' lvalue Var 0x55c23fc9cb90 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55c23fc9d630 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55c23fc9d5c0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c23fbb5fd8 0x55c23fbb5bf8 0x55c23fbb5828 0x55c23fbb5448 0x55c23fbb5068 0x55c23fbb4c98
|       |     | | `-DeclRefExpr 0x55c23fc9d5a0 <col:95> 'T *' lvalue Var 0x55c23fc9cdd8 's' 'T *'
|       |     | `-UnaryOperator 0x55c23fc9d670 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55c23fc9d660 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55c23fc9d7f8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55c23fc9d7d8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55c23fc9d7a8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55c23fc9d758 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55c23fc9d6e8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c23fbb5fd8 0x55c23fbb5bf8 0x55c23fbb5828 0x55c23fbb5448 0x55c23fbb5068 0x55c23fbb4c98
|       |         | | `-DeclRefExpr 0x55c23fc9d6c8 <col:109> 'T *' lvalue Var 0x55c23fc9cdd8 's' 'T *'
|       |         | `-DeclRefExpr 0x55c23fc9d788 <col:113> 'const V' lvalue ParmVar 0x55c23fc74b68 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55c23fc9d7c8 <col:120> 'bool' true
|       `-DeclRefExpr 0x55c23fc9d920 <col:128> 'Args::Slot *' lvalue Var 0x55c23fc9cb00 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c23fc7b608 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55c23fc7b148 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc7b1c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c23fc7b568 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55c23fc7b288 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc7b308 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55c23fc7b380 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55c23fc7b428 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55c23fca0788 <col:75, line:754:5>
|     |-DeclStmt 0x55c23fc9da18 <line:749:9, col:26>
|     | `-VarDecl 0x55c23fc9d9b0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55c23fca0750 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55c23fca0770 <line:750:13, col:58>
|       | `-VarDecl 0x55c23fc9da40 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55c23fc9dc20 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55c23fc9dbf0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55c23fc9dbd8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55c23fc9dbb8 <col:26, col:58> 'String' (CXXTemporary 0x55c23fc9dbb8)
|       |           `-CXXMemberCallExpr 0x55c23fc9db48 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55c23fc9dab8 <col:26> '<bound member function type>' ->find 0x55c23fc93d38
|       |             | `-CXXThisExpr 0x55c23fc9daa8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55c23fc9db80 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c23fc9dae8 <col:31> 'const char *' lvalue ParmVar 0x55c23fc7b288 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55c23fc9db98 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c23fc9db08 <col:40> 'int' lvalue ParmVar 0x55c23fc7b308 'flags' 'int'
|       |             `-DeclRefExpr 0x55c23fc9db28 <col:47> 'Args::Slot *' lvalue Var 0x55c23fc9d9b0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55c23fc9dcd8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55c23fc9dcc0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55c23fc9dca0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55c23fc9dc70 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55c23f9c1ea8
|       |       `-ImplicitCastExpr 0x55c23fc9dc58 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55c23fc9dc38 <col:20> 'String' lvalue Var 0x55c23fc9da40 'str' 'String'
|       `-CompoundStmt 0x55c23fca0730 <col:61, line:753:9>
|         |-DeclStmt 0x55c23fca02d0 <line:751:13, col:63>
|         | `-VarDecl 0x55c23fc9dd28 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55c23fca02a0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55c23fca0210 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55c23fca0258 <col:47> 'T' lvalue ParmVar 0x55c23fc7b428 'variable' 'T &'
|         |     `-UnaryOperator 0x55c23fca0288 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55c23fca0278 <col:58> 'Args *' this
|         `-CallExpr 0x55c23fca0700 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55c23fca02f8 <col:13> '<bound member function type>' ->postparse 0x55c23fc93f48
|           | `-CXXThisExpr 0x55c23fca02e8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55c23fca06c0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55c23fca0328 <col:23> 'T *' lvalue Var 0x55c23fc9dd28 's' 'T *'
|           | `-CallExpr 0x55c23fca0680 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55c23fca0510 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55c23fca0558 <col:56> 'P' lvalue ParmVar 0x55c23fc7b380 'parser' 'P'
|           |   |-DeclRefExpr 0x55c23fca0578 <col:64> 'String' lvalue Var 0x55c23fc9da40 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55c23fca0628 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55c23fca05b8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c23fbb5fd8 0x55c23fbb5bf8 0x55c23fbb5828 0x55c23fbb5448 0x55c23fbb5068 0x55c23fbb4c98
|           |   | `-DeclRefExpr 0x55c23fca0598 <col:70> 'T *' lvalue Var 0x55c23fc9dd28 's' 'T *'
|           |   `-UnaryOperator 0x55c23fca0668 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55c23fca0658 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55c23fca06e0 <col:81> 'Args::Slot *' lvalue Var 0x55c23fc9d9b0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c23fc7bc68 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55c23fc7b680 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c23fc7b6f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55c23fc7b778 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55c23fc7bbc8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55c23fc7b840 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc7b8c0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55c23fc7b938 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55c23fc7b9d8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55c23fc7ba78 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55c23fca1518 <col:98, line:762:5>
|     |-DeclStmt 0x55c23fca0820 <line:758:9, col:26>
|     | `-VarDecl 0x55c23fca07b8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55c23fca0a40 <line:759:9, col:55>
|     | `-VarDecl 0x55c23fca0848 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55c23fca0a28 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55c23fca09f8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55c23fca09e0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55c23fca09c0 <col:22, col:54> 'String' (CXXTemporary 0x55c23fca09c0)
|     |           `-CXXMemberCallExpr 0x55c23fca0950 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55c23fca08c0 <col:22> '<bound member function type>' ->find 0x55c23fc93d38
|     |             | `-CXXThisExpr 0x55c23fca08b0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55c23fca0988 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55c23fca08f0 <col:27> 'const char *' lvalue ParmVar 0x55c23fc7b840 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55c23fca09a0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55c23fca0910 <col:36> 'int' lvalue ParmVar 0x55c23fc7b8c0 'flags' 'int'
|     |             `-DeclRefExpr 0x55c23fca0930 <col:43> 'Args::Slot *' lvalue Var 0x55c23fca07b8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55c23fca0e60 <line:760:9, col:59>
|     | `-VarDecl 0x55c23fca0a98 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55c23fca0e30 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55c23fca0da0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55c23fca0de8 <col:43> 'T' lvalue ParmVar 0x55c23fc7b9d8 'variable' 'T &'
|     |     `-UnaryOperator 0x55c23fca0e18 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55c23fca0e08 <col:54> 'Args *' this
|     `-CallExpr 0x55c23fca14e8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55c23fca0e88 <col:9> '<bound member function type>' ->postparse 0x55c23fc93f48
|       | `-CXXThisExpr 0x55c23fca0e78 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55c23fca14a8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55c23fca0eb8 <col:19> 'T *' lvalue Var 0x55c23fca0a98 's' 'T *'
|       | `-ParenExpr 0x55c23fca1488 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55c23fca1458 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55c23fca1440 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55c23fca1428 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55c23fca1408 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55c23fca13d8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55c23f9c1ea8
|       |     |       `-ImplicitCastExpr 0x55c23fca13c0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55c23fca0ed8 <col:25> 'String' lvalue Var 0x55c23fca0848 'str' 'String'
|       |     |-CallExpr 0x55c23fca1230 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55c23fca10c0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55c23fca1108 <col:59> 'P' lvalue ParmVar 0x55c23fc7b938 'parser' 'P'
|       |     | |-DeclRefExpr 0x55c23fca1128 <col:67> 'String' lvalue Var 0x55c23fca0848 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55c23fca11d8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55c23fca1168 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c23fbb5fd8 0x55c23fbb5bf8 0x55c23fbb5828 0x55c23fbb5448 0x55c23fbb5068 0x55c23fbb4c98
|       |     | | `-DeclRefExpr 0x55c23fca1148 <col:73> 'T *' lvalue Var 0x55c23fca0a98 's' 'T *'
|       |     | `-UnaryOperator 0x55c23fca1218 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55c23fca1208 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55c23fca13a0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55c23fca1380 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55c23fca1350 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55c23fca1300 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55c23fca1290 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c23fbb5fd8 0x55c23fbb5bf8 0x55c23fbb5828 0x55c23fbb5448 0x55c23fbb5068 0x55c23fbb4c98
|       |         | | `-DeclRefExpr 0x55c23fca1270 <col:87> 'T *' lvalue Var 0x55c23fca0a98 's' 'T *'
|       |         | `-DeclRefExpr 0x55c23fca1330 <col:91> 'const V' lvalue ParmVar 0x55c23fc7ba78 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55c23fca1370 <col:98> 'bool' true
|       `-DeclRefExpr 0x55c23fca14c8 <col:106> 'Args::Slot *' lvalue Var 0x55c23fca07b8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c23fc7c2d8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55c23fc7bce8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc7bd68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c23fc7bde8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c23fc7c238 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c23fc7beb0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc7bf30 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55c23fc7bfa8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55c23fc7c048 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55c23fc7c0e8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55c23fca24f8 <col:60, line:773:5>
|     |-DeclStmt 0x55c23fca15c0 <line:767:9, col:26>
|     | `-VarDecl 0x55c23fca1558 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55c23fca24c0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55c23fca24e0 <line:768:13, col:58>
|       | `-VarDecl 0x55c23fca15e8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55c23fca17c8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55c23fca1798 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55c23fca1780 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55c23fca1760 <col:26, col:58> 'String' (CXXTemporary 0x55c23fca1760)
|       |           `-CXXMemberCallExpr 0x55c23fca16f0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55c23fca1660 <col:26> '<bound member function type>' ->find 0x55c23fc93d38
|       |             | `-CXXThisExpr 0x55c23fca1650 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55c23fca1728 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c23fca1690 <col:31> 'const char *' lvalue ParmVar 0x55c23fc7beb0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55c23fca1740 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c23fca16b0 <col:40> 'int' lvalue ParmVar 0x55c23fc7bf30 'flags' 'int'
|       |             `-DeclRefExpr 0x55c23fca16d0 <col:47> 'Args::Slot *' lvalue Var 0x55c23fca1558 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55c23fca1880 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55c23fca1868 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55c23fca1848 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55c23fca1818 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55c23f9c1ea8
|       |       `-ImplicitCastExpr 0x55c23fca1800 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55c23fca17e0 <col:20> 'String' lvalue Var 0x55c23fca15e8 'str' 'String'
|       `-CompoundStmt 0x55c23fca2498 <col:61, line:772:9>
|         |-DeclStmt 0x55c23fca1bc0 <line:769:13, col:66>
|         | `-VarDecl 0x55c23fca18d8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55c23fca1b90 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55c23fca1b00 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55c23fca1b48 <col:49> 'T1' lvalue ParmVar 0x55c23fc7c048 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55c23fca1b78 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55c23fca1b68 <col:61> 'Args *' this
|         |-DeclStmt 0x55c23fca1f30 <line:770:13, col:66>
|         | `-VarDecl 0x55c23fca1c48 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55c23fca1f00 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55c23fca1e70 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55c23fca1eb8 <col:49> 'T2' lvalue ParmVar 0x55c23fc7c0e8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55c23fca1ee8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55c23fca1ed8 <col:61> 'Args *' this
|         `-CallExpr 0x55c23fca2468 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55c23fca1f58 <col:13> '<bound member function type>' ->postparse 0x55c23fc93f48
|           | `-CXXThisExpr 0x55c23fca1f48 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55c23fca2428 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55c23fca1fc8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55c23fca1f88 <col:23> 'T1 *' lvalue Var 0x55c23fca18d8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55c23fca1fa8 <col:29> 'T2 *' lvalue Var 0x55c23fca1c48 's2' 'T2 *'
|           | `-CallExpr 0x55c23fca23e0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55c23fca21b0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55c23fca21f8 <col:63> 'P' lvalue ParmVar 0x55c23fc7bfa8 'parser' 'P'
|           |   |-DeclRefExpr 0x55c23fca2218 <col:71> 'String' lvalue Var 0x55c23fca15e8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55c23fca22c8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55c23fca2258 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c23fbb5fd8 0x55c23fbb5bf8 0x55c23fbb5828 0x55c23fbb5448 0x55c23fbb5068 0x55c23fbb4c98
|           |   | `-DeclRefExpr 0x55c23fca2238 <col:77> 'T1 *' lvalue Var 0x55c23fca18d8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55c23fca2388 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55c23fca2318 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c23fbb5fd8 0x55c23fbb5bf8 0x55c23fbb5828 0x55c23fbb5448 0x55c23fbb5068 0x55c23fbb4c98
|           |   | `-DeclRefExpr 0x55c23fca22f8 <col:82> 'T2 *' lvalue Var 0x55c23fca1c48 's2' 'T2 *'
|           |   `-UnaryOperator 0x55c23fca23c8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55c23fca23b8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55c23fca2448 <col:94> 'Args::Slot *' lvalue Var 0x55c23fca1558 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c23fc7c6c8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55c23fc7c358 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c23fc7c628 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55c23fc7c410 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc7c490 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55c23fc7c508 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55c23fca2a10 <col:67, line:780:5>
|     |-DeclStmt 0x55c23fca2590 <line:777:9, col:26>
|     | `-VarDecl 0x55c23fca2528 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55c23fca29d8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55c23fca29f8 <line:778:13, col:58>
|       | `-VarDecl 0x55c23fca25b8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55c23fca2798 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55c23fca2768 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55c23fca2750 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55c23fca2730 <col:26, col:58> 'String' (CXXTemporary 0x55c23fca2730)
|       |           `-CXXMemberCallExpr 0x55c23fca26c0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55c23fca2630 <col:26> '<bound member function type>' ->find 0x55c23fc93d38
|       |             | `-CXXThisExpr 0x55c23fca2620 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55c23fca26f8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c23fca2660 <col:31> 'const char *' lvalue ParmVar 0x55c23fc7c410 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55c23fca2710 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c23fca2680 <col:40> 'int' lvalue ParmVar 0x55c23fc7c490 'flags' 'int'
|       |             `-DeclRefExpr 0x55c23fca26a0 <col:47> 'Args::Slot *' lvalue Var 0x55c23fca2528 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55c23fca2850 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55c23fca2838 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55c23fca2818 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55c23fca27e8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55c23f9c1ea8
|       |       `-ImplicitCastExpr 0x55c23fca27d0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55c23fca27b0 <col:20> 'String' lvalue Var 0x55c23fca25b8 'str' 'String'
|       `-CallExpr 0x55c23fca29a8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55c23fca2878 <col:13> '<bound member function type>' ->postparse 0x55c23fc93f48
|         | `-CXXThisExpr 0x55c23fca2868 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55c23fca2958 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55c23fca28c8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55c23fca28a8 <col:23> 'P' lvalue ParmVar 0x55c23fc7c508 'parser' 'P'
|         | |-DeclRefExpr 0x55c23fca2910 <col:36> 'String' lvalue Var 0x55c23fca25b8 'str' 'String'
|         | `-UnaryOperator 0x55c23fca2940 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55c23fca2930 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55c23fca2988 <col:49> 'Args::Slot *' lvalue Var 0x55c23fca2528 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c23fc7ca68 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55c23fc7c738 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c23fc7c9c8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55c23fc7c7f0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc7c870 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55c23fc7c8e8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55c23fca3380 <col:71, line:792:5>
|     |-DeclStmt 0x55c23fca2aa8 <line:784:9, col:26>
|     | `-VarDecl 0x55c23fca2a40 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55c23fca2b78 <line:785:9, col:29>
|     | `-VarDecl 0x55c23fca2ad8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55c23fca2b60 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55c23fca2b40 <col:28> 'int' 1
|     |-WhileStmt 0x55c23fca3230 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55c23fca3250 <line:786:16, col:61>
|     | | `-VarDecl 0x55c23fca2ba0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55c23fca2d80 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55c23fca2d50 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55c23fca2d38 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55c23fca2d18 <col:29, col:61> 'String' (CXXTemporary 0x55c23fca2d18)
|     | |           `-CXXMemberCallExpr 0x55c23fca2ca8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55c23fca2c18 <col:29> '<bound member function type>' ->find 0x55c23fc93d38
|     | |             | `-CXXThisExpr 0x55c23fca2c08 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55c23fca2ce0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c23fca2c48 <col:34> 'const char *' lvalue ParmVar 0x55c23fc7c7f0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55c23fca2cf8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c23fca2c68 <col:43> 'int' lvalue ParmVar 0x55c23fc7c870 'flags' 'int'
|     | |             `-DeclRefExpr 0x55c23fca2c88 <col:50> 'Args::Slot *' lvalue Var 0x55c23fca2a40 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55c23fca2e38 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55c23fca2e20 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55c23fca2e00 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55c23fca2dd0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55c23f9c1ea8
|     | |       `-ImplicitCastExpr 0x55c23fca2db8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55c23fca2d98 <col:23> 'String' lvalue Var 0x55c23fca2ba0 'str' 'String'
|     | `-CompoundStmt 0x55c23fca3208 <col:64, line:790:9>
|     |   |-CallExpr 0x55c23fca2f90 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55c23fca2e60 <col:13> '<bound member function type>' ->postparse 0x55c23fc93f48
|     |   | | `-CXXThisExpr 0x55c23fca2e50 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55c23fca2f40 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55c23fca2eb0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55c23fca2e90 <col:23> 'P' lvalue ParmVar 0x55c23fc7c8e8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55c23fca2ef8 <col:36> 'String' lvalue Var 0x55c23fca2ba0 'str' 'String'
|     |   | | `-UnaryOperator 0x55c23fca2f28 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55c23fca2f18 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55c23fca2f70 <col:49> 'Args::Slot *' lvalue Var 0x55c23fca2a40 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55c23fca3128 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55c23fca2fc0 <col:13> 'int' lvalue Var 0x55c23fca2ad8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55c23fca3110 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55c23fca30f0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55c23fca3058 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55c23fca3038 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55c23fca3020 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55c23fca2fe0 <col:28> 'int' lvalue Var 0x55c23fca2ad8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55c23fca3000 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55c23fca30d8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55c23fca30a8 <col:49> 'bool' lvalue ->_read_status 0x55c23fb75e40
|     |   |         `-ImplicitCastExpr 0x55c23fca3088 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55c23fca3078 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55c23fca31d8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55c23fca3148 <col:13> 'int' lvalue ParmVar 0x55c23fc7c870 'flags' 'int'
|     |     `-UnaryOperator 0x55c23fca31c0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55c23fca31a8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55c23fca3188 <col:23> 'const int' lvalue Var 0x55c23fc62808 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55c23fca3360 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55c23fca3298 <col:9> 'bool' lvalue ->_read_status 0x55c23fb75e40
|       | `-ImplicitCastExpr 0x55c23fca3278 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55c23fca3268 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55c23fca3340 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55c23fca3320 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55c23fca3308 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55c23fca32c8 <col:25> 'int' lvalue Var 0x55c23fca2ad8 'read_status' 'int'
|           `-IntegerLiteral 0x55c23fca32e8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55c23fc7cf48 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55c23fc7cad8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc7cb58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c23fc7cea8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55c23fc7cc18 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc7cc98 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55c23fc7cd10 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55c23fc7cdb8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55c23fca4310 <col:84, line:805:5>
|     |-DeclStmt 0x55c23fca3428 <line:796:9, col:26>
|     | `-VarDecl 0x55c23fca33c0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55c23fca34f8 <line:797:9, col:29>
|     | `-VarDecl 0x55c23fca3458 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55c23fca34e0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55c23fca34c0 <col:28> 'int' 1
|     |-DeclStmt 0x55c23fca3830 <line:798:9, col:71>
|     | `-VarDecl 0x55c23fca3548 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55c23fca3800 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55c23fca3770 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55c23fca37b8 <col:55> 'T' lvalue ParmVar 0x55c23fc7cdb8 'variable' 'T &'
|     |     `-UnaryOperator 0x55c23fca37e8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55c23fca37d8 <col:66> 'Args *' this
|     |-WhileStmt 0x55c23fca41c0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55c23fca41e0 <line:799:16, col:61>
|     | | `-VarDecl 0x55c23fca3858 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55c23fca3a38 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55c23fca3a08 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55c23fca39f0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55c23fca39d0 <col:29, col:61> 'String' (CXXTemporary 0x55c23fca39d0)
|     | |           `-CXXMemberCallExpr 0x55c23fca3960 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55c23fca38d0 <col:29> '<bound member function type>' ->find 0x55c23fc93d38
|     | |             | `-CXXThisExpr 0x55c23fca38c0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55c23fca3998 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c23fca3900 <col:34> 'const char *' lvalue ParmVar 0x55c23fc7cc18 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55c23fca39b0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c23fca3920 <col:43> 'int' lvalue ParmVar 0x55c23fc7cc98 'flags' 'int'
|     | |             `-DeclRefExpr 0x55c23fca3940 <col:50> 'Args::Slot *' lvalue Var 0x55c23fca33c0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55c23fca3af0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55c23fca3ad8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55c23fca3ab8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55c23fca3a88 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55c23f9c1ea8
|     | |       `-ImplicitCastExpr 0x55c23fca3a70 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55c23fca3a50 <col:23> 'String' lvalue Var 0x55c23fca3858 'str' 'String'
|     | `-CompoundStmt 0x55c23fca4198 <col:64, line:803:9>
|     |   |-CallExpr 0x55c23fca3f20 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55c23fca3b18 <col:13> '<bound member function type>' ->postparse 0x55c23fc93f48
|     |   | | `-CXXThisExpr 0x55c23fca3b08 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55c23fca3ee0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55c23fca3b48 <col:23> 'T *' lvalue Var 0x55c23fca3548 's' 'T *'
|     |   | | `-CallExpr 0x55c23fca3ea0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55c23fca3d30 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55c23fca3d78 <col:56> 'P' lvalue ParmVar 0x55c23fc7cd10 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55c23fca3d98 <col:64> 'String' lvalue Var 0x55c23fca3858 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55c23fca3e48 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55c23fca3dd8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c23fbb5fd8 0x55c23fbb5bf8 0x55c23fbb5828 0x55c23fbb5448 0x55c23fbb5068 0x55c23fbb4c98
|     |   | |   | `-DeclRefExpr 0x55c23fca3db8 <col:70> 'T *' lvalue Var 0x55c23fca3548 's' 'T *'
|     |   | |   `-UnaryOperator 0x55c23fca3e88 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55c23fca3e78 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55c23fca3f00 <col:81> 'Args::Slot *' lvalue Var 0x55c23fca33c0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55c23fca40b8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55c23fca3f50 <col:13> 'int' lvalue Var 0x55c23fca3458 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55c23fca40a0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55c23fca4080 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55c23fca3fe8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55c23fca3fc8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55c23fca3fb0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55c23fca3f70 <col:28> 'int' lvalue Var 0x55c23fca3458 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55c23fca3f90 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55c23fca4068 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55c23fca4038 <col:49> 'bool' lvalue ->_read_status 0x55c23fb75e40
|     |   |         `-ImplicitCastExpr 0x55c23fca4018 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55c23fca4008 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55c23fca4168 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55c23fca40d8 <col:13> 'int' lvalue ParmVar 0x55c23fc7cc98 'flags' 'int'
|     |     `-UnaryOperator 0x55c23fca4150 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55c23fca4138 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55c23fca4118 <col:23> 'const int' lvalue Var 0x55c23fc62808 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55c23fca42f0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55c23fca4228 <col:9> 'bool' lvalue ->_read_status 0x55c23fb75e40
|       | `-ImplicitCastExpr 0x55c23fca4208 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55c23fca41f8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55c23fca42d0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55c23fca42b0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55c23fca4298 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55c23fca4258 <col:25> 'int' lvalue Var 0x55c23fca3458 'read_status' 'int'
|           `-IntegerLiteral 0x55c23fca4278 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55c23fc7d528 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55c23fc7cfc0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c23fc7d038 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c23fc7d488 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55c23fc7d0f8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c23fc7d178 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55c23fc7d1f0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55c23fc7d340 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55c23fca5118 <col:87, line:821:5>
|     |-DeclStmt 0x55c23fca43c0 <line:809:9, col:26>
|     | `-VarDecl 0x55c23fca4358 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55c23fca4490 <line:810:9, col:29>
|     | `-VarDecl 0x55c23fca43f0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55c23fca4478 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55c23fca4458 <col:28> 'int' 1
|     |-DeclStmt 0x55c23fca46d8 <line:811:9, col:38>
|     | `-VarDecl 0x55c23fca45c0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55c23fca46b0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55c23fca4638 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55c23fca4690 <col:29> 'Vector<T>' lvalue ParmVar 0x55c23fc7d340 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55c23fca4fc8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55c23fca4fe8 <line:812:16, col:61>
|     | | `-VarDecl 0x55c23fca4700 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55c23fca48e0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55c23fca48b0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55c23fca4898 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55c23fca4878 <col:29, col:61> 'String' (CXXTemporary 0x55c23fca4878)
|     | |           `-CXXMemberCallExpr 0x55c23fca4808 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55c23fca4778 <col:29> '<bound member function type>' ->find 0x55c23fc93d38
|     | |             | `-CXXThisExpr 0x55c23fca4768 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55c23fca4840 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c23fca47a8 <col:34> 'const char *' lvalue ParmVar 0x55c23fc7d0f8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55c23fca4858 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c23fca47c8 <col:43> 'int' lvalue ParmVar 0x55c23fc7d178 'flags' 'int'
|     | |             `-DeclRefExpr 0x55c23fca47e8 <col:50> 'Args::Slot *' lvalue Var 0x55c23fca4358 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55c23fca4998 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55c23fca4980 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55c23fca4960 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55c23fca4930 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55c23f9c1ea8
|     | |       `-ImplicitCastExpr 0x55c23fca4918 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55c23fca48f8 <col:23> 'String' lvalue Var 0x55c23fca4700 'str' 'String'
|     | `-CompoundStmt 0x55c23fca4f90 <col:64, line:819:9>
|     |   |-DeclStmt 0x55c23fca4a58 <line:813:13, col:23>
|     |   | `-VarDecl 0x55c23fca49c0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55c23fca4a38 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55c23fca4bd8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55c23fca4a80 <col:13> '<bound member function type>' ->postparse 0x55c23fc93f48
|     |   | | `-CXXThisExpr 0x55c23fca4a70 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55c23fca4b80 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55c23fca4ad0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55c23fca4ab0 <col:23> 'P' lvalue ParmVar 0x55c23fc7d1f0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55c23fca4b18 <col:36> 'String' lvalue Var 0x55c23fca4700 'str' 'String'
|     |   | | |-DeclRefExpr 0x55c23fca4b38 <col:41> 'T' lvalue Var 0x55c23fca49c0 'sx' 'T'
|     |   | | `-UnaryOperator 0x55c23fca4b68 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55c23fca4b58 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55c23fca4bb8 <col:53> 'Args::Slot *' lvalue Var 0x55c23fca4358 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55c23fca4d30 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55c23fca4c68 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55c23fca4c38 <col:17> 'bool' lvalue ->_read_status 0x55c23fb75e40
|     |   | |   `-ImplicitCastExpr 0x55c23fca4c18 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55c23fca4c08 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55c23fca4d08 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55c23fca4ca0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55c23fca4c80 <col:17> 'Vector<T> *' lvalue Var 0x55c23fca45c0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55c23fca4ce8 <col:30> 'T' lvalue Var 0x55c23fca49c0 'sx' 'T'
|     |   |-BinaryOperator 0x55c23fca4eb0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55c23fca4d48 <col:13> 'int' lvalue Var 0x55c23fca43f0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55c23fca4e98 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55c23fca4e78 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55c23fca4de0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55c23fca4dc0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55c23fca4da8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55c23fca4d68 <col:28> 'int' lvalue Var 0x55c23fca43f0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55c23fca4d88 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55c23fca4e60 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55c23fca4e30 <col:49> 'bool' lvalue ->_read_status 0x55c23fb75e40
|     |   |         `-ImplicitCastExpr 0x55c23fca4e10 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55c23fca4e00 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55c23fca4f60 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55c23fca4ed0 <col:13> 'int' lvalue ParmVar 0x55c23fc7d178 'flags' 'int'
|     |     `-UnaryOperator 0x55c23fca4f48 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55c23fca4f30 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55c23fca4f10 <col:23> 'const int' lvalue Var 0x55c23fc62808 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55c23fca50f8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55c23fca5030 <col:9> 'bool' lvalue ->_read_status 0x55c23fb75e40
|       | `-ImplicitCastExpr 0x55c23fca5010 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55c23fca5000 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55c23fca50d8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55c23fca50b8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55c23fca50a0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55c23fca5060 <col:25> 'int' lvalue Var 0x55c23fca43f0 'read_status' 'int'
|           `-IntegerLiteral 0x55c23fca5080 <col:40> 'int' 1
|-AccessSpecDecl 0x55c23fc7d5a0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55c23fc7d5c8 prev 0x55c23fc60b08 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55c23fc7d6c0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55c23fc7d7b0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55c23fca5150 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55c23fc7d8a0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55c23fca5160 <col:25, line:830:9>
| |-CXXMethodDecl 0x55c23fc7d9a0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55c23fc7da50 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55c23fc7daf8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55c23fc7daf8
| | `-ParmVarDecl 0x55c23fc7dc08 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55c23fc7e3c8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55c23fc7e3c8
|   `-ParmVarDecl 0x55c23fc7e4d8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55c23fc7dc78 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55c23fc7ddd8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55c23fc7dfd0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55c23fc7de80 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55c23fc7def8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55c23fca5340 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55c23fc7e288 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55c23fca51b0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55c23fca5170 <col:20> 'void *' lvalue ParmVar 0x55c23fc7de80 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55c23fc7e2f0 '_slot' 'char *'
| | | `-CXXNewExpr 0x55c23fca5238 <col:32, col:45> 'char *' array Function 0x55c23f7e4b18 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55c23fca5220 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55c23fca51f0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55c23fc7def8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55c23fc7e350 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55c23fca5300 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55c23fca52c0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55c23fc7def8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55c23fca53c0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55c23fc7e0d0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55c23fc7d8a0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55c23fca5448 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55c23fca5428 <line:840:13, col:22> 'void' array Function 0x55c23f7e4e78 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55c23fca5410 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55c23fca53e0 <col:22> 'char *' lvalue ->_slot 0x55c23fc7e2f0
| |         `-CXXThisExpr 0x55c23fca53d0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55c23fc7e1d0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55c23fc7d9a0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55c23fca5638 <col:22, line:844:9>
| |   `-CallExpr 0x55c23fca55a0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55c23fca5588 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55c23fca5568 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55c23f8f08f8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55c23fca55d8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55c23fca54b8 <col:20> 'void *' lvalue ->_ptr 0x55c23fc7e288
| |     |   `-CXXThisExpr 0x55c23fca54a8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55c23fca5608 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55c23fca55f0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55c23fca54f8 <col:26> 'char *' lvalue ->_slot 0x55c23fc7e2f0
| |     |     `-CXXThisExpr 0x55c23fca54e8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55c23fca5620 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55c23fca5538 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55c23fc7e350
| |         `-CXXThisExpr 0x55c23fca5528 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55c23fc7e288 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55c23fc7e2f0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55c23fc7e350 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55c23fc7e548 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55c23fc7e548
| | `-ParmVarDecl 0x55c23fc7e658 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55c23fc7e6f8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55c23fc7e6f8
|   `-ParmVarDecl 0x55c23fc7e808 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55c23fc7e9a8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55c23fc7e878 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55c23fc7e918 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55c23fc7ec40 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55c23fc7ee38 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55c23fc7ed08 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55c23fc7efb8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55c23fca5670 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55c23fca5650 <col:20> 'T *' lvalue ParmVar 0x55c23fc7ed08 'ptr' 'T *'
|   | `-CompoundStmt 0x55c23fca56c0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55c23fc7ef08 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55c23fc7d9a0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55c23fca5870 <col:22, line:857:9>
|   |   `-CallExpr 0x55c23fca5840 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55c23fca56d0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55c23f9a9028 0x55c23f953358
|   |     |-CXXOperatorCallExpr 0x55c23fca57d0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55c23fca5760 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c23fbb5fd8 0x55c23fbb5bf8 0x55c23fbb5828 0x55c23fbb5448 0x55c23fbb5068 0x55c23fbb4c98
|   |     | `-MemberExpr 0x55c23fca5730 <col:29> 'T *' lvalue ->_ptr 0x55c23fc7efb8
|   |     |   `-CXXThisExpr 0x55c23fca5720 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55c23fca5810 <col:35> 'T' lvalue ->_slot 0x55c23fc7f018
|   |       `-CXXThisExpr 0x55c23fca5800 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55c23fc7efb8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55c23fc7f018 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55c23fc7f080 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55c23fc7f180 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55c23fc7f1d0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c23fc7f160 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55c23fc7f140 <col:31> 'int' 48
|-FieldDecl 0x55c23fc7f1f8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55c23fc7f258 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55c23fc7f2b8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55c23fc7f3f0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55c23fc935e0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55c23fc93640 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55c23fc936f0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55c23fc93918 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55c23fc93820 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55c23fc93a68 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55c23fc939d8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55c23fc93d38 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55c23fc93b28 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55c23fc93ba8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55c23fc93c50 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55c23fc93f48 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55c23fc93e00 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55c23fc93e78 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55c23fc94018 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55c23fc94168 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55c23fc940d0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55c23fc95e20 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55c23fc94228 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55c23fc942a8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55c23fc94350 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55c23fc94408 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55c23fc96050 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55c23fc95ef8 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55c23fc95f70 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55c23fc96368 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55c23fc96100 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55c23fc962c8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55c23fc961d8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class FixedPointArg
         0 |   class NumArg (base) (empty)
         0 |   int fraction_bits
         4 |   int exponent_delta
         8 |   int status
           | [sizeof=12, dsize=12, align=4,
           |  nvsize=12, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c23fcb0bd0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c23fcb0ce8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55c23fcb0d78 <col:16, col:22> col:16 public
|-EnumDecl 0x55c23fcb0da0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55c23fcb0ea0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55c23fcb10f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fcb0e80 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55c23fcb0e60 <col:21> 'int' 0
| |-EnumConstantDecl 0x55c23fcb0f30 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55c23fcb1108 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fcb0f10 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55c23fcb0ef0 <col:24> 'int' 22
| |-EnumConstantDecl 0x55c23fcb0fc0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55c23fcb1120 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fcb0fa0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55c23fcb0f80 <col:24> 'int' 34
| |-EnumConstantDecl 0x55c23fcb1050 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55c23fcb1138 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fcb1030 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55c23fcb1010 <col:25> 'int' 95
| `-EnumConstantDecl 0x55c23fcb10a0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55c23fcb2ab0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55c23fcb2f58 <col:7>
|-CXXConstructorDecl 0x55c23fcb2c20 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55c23fcb2c20
| `-ParmVarDecl 0x55c23fcb2d38 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55c23fcb2dd8 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55c23fcb2ee8 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55c23fcf1580 <col:7>
`-CXXDestructorDecl 0x55c23fcb5058 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c23fcba760 <../dummy_inc/click/args.hh:1194:1, line:1207:1> line:1194:7 referenced class FixedPointArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55c23fcba8b8 <col:1, col:7> col:7 implicit referenced class FixedPointArg
|-AccessSpecDecl 0x55c23fcba948 <col:39, col:45> col:39 public
|-CXXConstructorDecl 0x55c23fcbaae0 <line:1195:5, line:1197:5> line:1195:14 used FixedPointArg 'void (int, int)'
| |-ParmVarDecl 0x55c23fcba988 <col:28, col:32> col:32 used b 'int'
| |-ParmVarDecl 0x55c23fcbaa08 <col:35, col:50> col:39 used exponent 'int' cinit
| | `-IntegerLiteral 0x55c23fcbba58 <col:50> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55c23fcbbbf8 <col:14> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55c23fcbb620 'fraction_bits' 'int'
| | `-ImplicitCastExpr 0x55c23fcbbb38 <line:1196:25> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55c23fcbbaf8 <col:25> 'int' lvalue ParmVar 0x55c23fcba988 'b' 'int'
| |-CXXCtorInitializer Field 0x55c23fcbb688 'exponent_delta' 'int'
| | `-ImplicitCastExpr 0x55c23fcbbbb8 <col:44> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55c23fcbbb78 <col:44> 'int' lvalue ParmVar 0x55c23fcbaa08 'exponent' 'int'
| `-CompoundStmt 0x55c23fcbbc70 <col:54, line:1197:5>
|-CXXMethodDecl 0x55c23fcbadc8 <line:1198:5, col:106> col:17 parse_saturating 'bool (const String &, uint32_t &, const ArgContext &)' inline
| |-ParmVarDecl 0x55c23fcbaba8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55c23fcbac30 <col:53, col:63> col:63 result 'uint32_t &'
| `-ParmVarDecl 0x55c23fcbaca8 <col:71, col:96> col:89 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55c23fcbba78 <col:96> 'const ArgContext' lvalue Var 0x55c23fca5898 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55c23fcbb020 <line:1199:5, col:88> col:10 parse 'bool (const String &, uint32_t &, const ArgContext &)'
| |-ParmVarDecl 0x55c23fcbae90 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x55c23fcbaf08 <col:35, col:45> col:45 result 'uint32_t &'
| `-ParmVarDecl 0x55c23fcbaf80 <col:53, col:78> col:71 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55c23fcbba98 <col:78> 'const ArgContext' lvalue Var 0x55c23fca5898 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55c23fcbb2f8 <line:1200:5, col:98> col:10 parse_saturating 'bool (const String &, int32_t &, const ArgContext &)'
| |-ParmVarDecl 0x55c23fcbb0e8 <col:27, col:41> col:41 str 'const String &'
| |-ParmVarDecl 0x55c23fcbb160 <col:46, col:55> col:55 result 'int32_t &'
| `-ParmVarDecl 0x55c23fcbb1d8 <col:63, col:88> col:81 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55c23fcbbab8 <col:88> 'const ArgContext' lvalue Var 0x55c23fca5898 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55c23fcbb550 <line:1201:5, col:87> col:10 parse 'bool (const String &, int32_t &, const ArgContext &)'
| |-ParmVarDecl 0x55c23fcbb3c0 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x55c23fcbb438 <col:35, col:44> col:44 result 'int32_t &'
| `-ParmVarDecl 0x55c23fcbb4b0 <col:52, col:77> col:70 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55c23fcbbad8 <col:77> 'const ArgContext' lvalue Var 0x55c23fca5898 'blank_args' 'const ArgContext'
|-FieldDecl 0x55c23fcbb620 <line:1202:5, col:9> col:9 referenced fraction_bits 'int'
|-FieldDecl 0x55c23fcbb688 <line:1203:5, col:9> col:9 referenced exponent_delta 'int'
|-FieldDecl 0x55c23fcbb6f0 <line:1204:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55c23fcbb740 <line:1205:3, col:10> col:3 private
|-CXXMethodDecl 0x55c23fcbb988 <line:1206:5, col:72> col:10 used underparse 'bool (const String &, bool, uint32_t &)'
| |-ParmVarDecl 0x55c23fcbb778 <col:21, col:35> col:35 str 'const String &'
| |-ParmVarDecl 0x55c23fcbb7f0 <col:40, col:45> col:45 is_signed 'bool'
| `-ParmVarDecl 0x55c23fcbb868 <col:56, col:66> col:66 result 'uint32_t &'
|-CXXConstructorDecl 0x55c23fcf0a78 <line:1194:7> col:7 implicit constexpr FixedPointArg 'void (const FixedPointArg &)' inline default trivial noexcept-unevaluated 0x55c23fcf0a78
| `-ParmVarDecl 0x55c23fcf0b88 <col:7> col:7 'const FixedPointArg &'
|-CXXConstructorDecl 0x55c23fcf0c28 <col:7> col:7 implicit used constexpr FixedPointArg 'void (FixedPointArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55c23fcf0d38 <col:7> col:7 used 'FixedPointArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55c23fcf1590 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55c23fcf1560 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55c23fcf1530 <col:7> 'FixedPointArg' xvalue static_cast<class FixedPointArg &&> <NoOp>
| |       `-DeclRefExpr 0x55c23fcf1500 <col:7> 'FixedPointArg' lvalue ParmVar 0x55c23fcf0d38 '' 'FixedPointArg &&'
| |-CXXCtorInitializer Field 0x55c23fcbb620 'fraction_bits' 'int'
| | `-ImplicitCastExpr 0x55c23fcf1688 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55c23fcf1658 <col:7> 'int' xvalue .fraction_bits 0x55c23fcbb620
| |     `-CXXStaticCastExpr 0x55c23fcf1628 <col:7> 'FixedPointArg' xvalue static_cast<class FixedPointArg &&> <NoOp>
| |       `-DeclRefExpr 0x55c23fcf15f8 <col:7> 'FixedPointArg' lvalue ParmVar 0x55c23fcf0d38 '' 'FixedPointArg &&'
| |-CXXCtorInitializer Field 0x55c23fcbb688 'exponent_delta' 'int'
| | `-ImplicitCastExpr 0x55c23fcf1758 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55c23fcf1728 <col:7> 'int' xvalue .exponent_delta 0x55c23fcbb688
| |     `-CXXStaticCastExpr 0x55c23fcf16f8 <col:7> 'FixedPointArg' xvalue static_cast<class FixedPointArg &&> <NoOp>
| |       `-DeclRefExpr 0x55c23fcf16c8 <col:7> 'FixedPointArg' lvalue ParmVar 0x55c23fcf0d38 '' 'FixedPointArg &&'
| |-CXXCtorInitializer Field 0x55c23fcbb6f0 'status' 'int'
| | `-ImplicitCastExpr 0x55c23fcf1828 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55c23fcf17f8 <col:7> 'int' xvalue .status 0x55c23fcbb6f0
| |     `-CXXStaticCastExpr 0x55c23fcf17c8 <col:7> 'FixedPointArg' xvalue static_cast<class FixedPointArg &&> <NoOp>
| |       `-DeclRefExpr 0x55c23fcf1798 <col:7> 'FixedPointArg' lvalue ParmVar 0x55c23fcf0d38 '' 'FixedPointArg &&'
| `-CompoundStmt 0x55c23fcf1888 <col:7>
`-CXXDestructorDecl 0x55c23fcf0e18 <col:7> col:7 implicit referenced ~FixedPointArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.FixedPointArg = type { i32, i32, i32 }
  NonVirtualBaseLLVMType:%class.FixedPointArg = type { i32, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c23fbcb938 prev 0x55c23fbc0b40 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c23fbcba30 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55c23fbcbb20 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55c23fbcbc48 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55c23fbcbdc8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55c23fbcbf48 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55c23fbcc0c8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55c23fbdcef8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55c23fbdd768 <col:11>
|-CXXDestructorDecl 0x55c23fbdcfd0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55c23fbdd108 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55c23fbdd108
| `-ParmVarDecl 0x55c23fbdd218 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55c23fbdd2b8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55c23fbdd2b8
| `-ParmVarDecl 0x55c23fbdd3c8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55c23fbe0188 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55c23fbe0298 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55c23fbe0518 <col:11>
|   `-ReturnStmt 0x55c23fbe0508 <col:11>
|     `-UnaryOperator 0x55c23fbe04f0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c23fbe04e0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55c23fbe0308 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55c23fbe0308
  `-ParmVarDecl 0x55c23fbe0418 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c23fbcc130 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c23fbcc248 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55c23fbcc2e8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55c23fbcc350 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55c23fbcc3b8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55c23fbcc420 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55c23fbcc480 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55c23fbcc540 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55c23fbcc5a0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55c23fbcc600 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55c23fbdce08 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55c23fbcc2e8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55c23fbdd778 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55c23fbdd7d0 <col:12>
|-CXXConstructorDecl 0x55c23fbdd438 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55c23fbdd438
| `-ParmVarDecl 0x55c23fbdd548 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55c23fbdd5e8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55c23fbdd5e8
| `-ParmVarDecl 0x55c23fbdd6f8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55c23fbdf870 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c23fbba250 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55c23fbba368 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55c23fbba3f8 <col:16, col:22> col:16 public
|-EnumDecl 0x55c23fbba420 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55c23fbba520 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55c23fbba600 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbba500 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55c23fbba4e0 <col:21> 'int' 28
| `-EnumConstantDecl 0x55c23fbba5b0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55c23fbba618 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c23fbba590 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55c23fbba570 <col:22> 'int' 64
|-CXXMethodDecl 0x55c23fbba958 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55c23fbba640 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c23fbba6c0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55c23fbba738 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c23fbba7b0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c23fbbaa18 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55c23fbbac18 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55c23fbbaa90 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55c23fbbab08 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c23fbbacc8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55c23fbbae28 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55c23fbbad38 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c23fbbaed0 <col:72> warn_unused_result ""
|-TypedefDecl 0x55c23fbbb230 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55c23fbbb1c0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55c23fbbb160 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55c23fbbb120 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55c23f6912d0 'void'
|       |-PointerType 0x55c23f93a5f0 'unsigned char *'
|       | `-BuiltinType 0x55c23f6913d0 'unsigned char'
|       |-TypedefType 0x55c23f736b60 'size_t' sugar
|       | |-Typedef 0x55c23f701b20 'size_t'
|       | `-BuiltinType 0x55c23f691430 'unsigned long'
|       `-PointerType 0x55c23f691ad0 'void *'
|         `-BuiltinType 0x55c23f6912d0 'void'
|-CXXMethodDecl 0x55c23fbbb6a8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55c23fbbb2a0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55c23fbbb318 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c23fbbb3b0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55c23fbbb430 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55c23fbd5da0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55c23fbd5d88 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55c23fbd5d50 <col:58> 'int' 0
| |-ParmVarDecl 0x55c23fbbb4b0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55c23fbd5dc8 <col:76> 'int' 0
| |-ParmVarDecl 0x55c23fbbb530 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55c23fbd5de8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55c23fbbb778 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55c23fbbb7f8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55c23fbbb8b8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55c23fbbb958 <col:20>
| `-OptimizeNoneAttr 0x55c23fbbb9b0 <col:30>
|-CXXMethodDecl 0x55c23fbbba28 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55c23fbbbac8 <col:20>
| `-OptimizeNoneAttr 0x55c23fbbbb20 <col:30>
|-CXXMethodDecl 0x55c23fbbbb98 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55c23fbbbc38 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55c23fbbbce8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55c23fbbbd88 <col:20>
| |-OptimizeNoneAttr 0x55c23fbbbde0 <col:30>
| `-WarnUnusedResultAttr 0x55c23fbbbe08 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55c23fbbbe60 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55c23fbbbf00 <col:20>
| `-OptimizeNoneAttr 0x55c23fbbbf58 <col:30>
|-CXXMethodDecl 0x55c23fbbbfa8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55c23fbbc048 <col:20>
| `-OptimizeNoneAttr 0x55c23fbbc0a0 <col:30>
|-CXXMethodDecl 0x55c23fbbc0e8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55c23fbbc188 <col:20>
| `-OptimizeNoneAttr 0x55c23fbbc1e0 <col:30>
|-CXXMethodDecl 0x55c23fbbc228 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55c23fbbc2e8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55c23fbbc3b0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55c23fbbc478 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55c23fbbc538 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55c23fbbc658 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55c23fbd5eb0 <col:54, line:99:5>
|   `-ReturnStmt 0x55c23fbd5ea0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55c23fbd5e88 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55c23fbd5e58 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55c23fbcc938
|         `-CXXThisExpr 0x55c23fbd5e48 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55c23fbbc7f8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55c23fbbc708 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55c23fbd5f60 <col:67, line:103:5>
|   `-BinaryOperator 0x55c23fbd5f40 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55c23fbd5ed8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55c23fbcc938
|     | `-CXXThisExpr 0x55c23fbd5ec8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55c23fbd5f28 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55c23fbd5f08 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55c23fbbc708 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55c23fbbc8f0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55c23fbd5fe0 <col:33, line:107:5>
|   `-ReturnStmt 0x55c23fbd5fd0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55c23fbd5fb8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55c23fbd5f88 <col:16> 'void *' lvalue ->_destructor_argument 0x55c23fbcc9a0
|         `-CXXThisExpr 0x55c23fbd5f78 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55c23fbbc9b0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55c23fbd6610 <col:25, line:113:5>
|   |-ParenExpr 0x55c23fbd6358 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55c23fbd6328 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55c23fbd6098 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55c23fbd6070 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55c23fbd6038 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55c23fbd6008 <col:24> '<bound member function type>' ->shared 0x55c23fbbba28
|   |   |       `-ImplicitCastExpr 0x55c23fbd6058 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55c23fbd5ff8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55c23fbd60f8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c23fbd60d8 <col:42> 'int' 0
|   |   `-CallExpr 0x55c23fbd6288 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55c23fbd6270 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c23fbd6250 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c23f72d970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c23fbd62c8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbd6168 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55c23fbd62e0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbd6190 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c23fbd62f8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c23fbd61c8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55c23fbd6310 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c23fbd6238 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c23fbd6220 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c23fbd61e8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55c23fbd6558 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55c23fbd6388 <col:2> 'unsigned char *' lvalue ->_head 0x55c23fbcc740
|   | | `-CXXThisExpr 0x55c23fbd6378 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55c23fbd6540 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55c23fbd6520 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55c23fbd63c8 <col:10> 'unsigned char *' lvalue ->_data 0x55c23fbcc7a8
|   |     | `-CXXThisExpr 0x55c23fbd63b8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55c23fbd6508 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55c23fbd64e8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55c23fbd6408 <col:18> 'unsigned char *' lvalue ->_tail 0x55c23fbcc810
|   |         | `-CXXThisExpr 0x55c23fbd63f8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55c23fbd64d0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55c23fbd64b0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55c23fbd6448 <col:26> 'unsigned char *' lvalue ->_end 0x55c23fbcc878
|   |             | `-CXXThisExpr 0x55c23fbd6438 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55c23fbd6498 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55c23fbd6478 <col:33> 'int' 0
|   `-BinaryOperator 0x55c23fbd65f0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55c23fbd6588 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55c23fbcc938
|     | `-CXXThisExpr 0x55c23fbd6578 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55c23fbd65d8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55c23fbd65b8 <col:16> 'int' 0
|-CXXMethodDecl 0x55c23fbbcaf0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55c23fbbca60 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c23fbbcb98 <col:20>
| |-OptimizeNoneAttr 0x55c23fbbcbf0 <col:30>
| `-WarnUnusedResultAttr 0x55c23fbbcc18 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55c23fbbcce8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55c23fbbcc58 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c23fbbcd90 <col:20>
| |-OptimizeNoneAttr 0x55c23fbbcde8 <col:30>
| `-WarnUnusedResultAttr 0x55c23fbbce10 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55c23fbbcf48 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55c23fbbce50 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c23fbbcff0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55c23fbbd0f0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55c23fbbd060 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c23fbbd198 <col:20>
| `-OptimizeNoneAttr 0x55c23fbbd1f0 <col:30>
|-CXXMethodDecl 0x55c23fbbd2b8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55c23fbbd228 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c23fbbd360 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55c23fbbd460 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55c23fbbd3d0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c23fbbd508 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55c23fbbd608 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55c23fbbd578 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c23fbbd6b0 <col:20>
| `-OptimizeNoneAttr 0x55c23fbbd708 <col:30>
|-CXXMethodDecl 0x55c23fbbd898 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55c23fbbd748 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55c23fbbd7c0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55c23fbd5e08 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55c23fbbd948 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55c23fbbdb48 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55c23fbbd9c0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55c23fbbda38 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c23fbbdd58 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55c23fbbdc08 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55c23fbbdc80 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c23fbbdf68 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55c23fbbde18 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55c23fbbde98 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55c23fbd5e18 <col:39> 'int' 0
|-CXXMethodDecl 0x55c23fbbe038 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55c23fbbe100 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55c23fbbe1c8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55c23fbbe288 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55c23fbbe350 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55c23fbbe498 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55c23fbbe408 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55c23fbbe668 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55c23fbbe558 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55c23fbbe5d0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c23fbbe738 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55c23fbbe7f8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55c23fbbe898 <col:20>
| `-OptimizeNoneAttr 0x55c23fbbe8f0 <col:30>
|-CXXMethodDecl 0x55c23fbbe940 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55c23fbbe9e0 <col:20>
| `-OptimizeNoneAttr 0x55c23fbbea38 <col:30>
|-CXXMethodDecl 0x55c23fbbea88 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55c23fbbeb48 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55c23fbbec10 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55c23fbbecb0 <col:20>
| `-OptimizeNoneAttr 0x55c23fbbed08 <col:30>
|-CXXMethodDecl 0x55c23fbbee58 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55c23fbbed48 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55c23fbbedc0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c23fbbefa8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55c23fbbef18 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c23fbbf080 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55c23fbbf140 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55c23fbbf1e0 <col:20>
| `-OptimizeNoneAttr 0x55c23fbbf238 <col:30>
|-CXXMethodDecl 0x55c23fbbf288 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55c23fbbf328 <col:20>
| `-OptimizeNoneAttr 0x55c23fbbf380 <col:30>
|-CXXMethodDecl 0x55c23fbbf3d0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55c23fbbf498 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55c23fbbf538 <col:20>
| `-OptimizeNoneAttr 0x55c23fbbf590 <col:30>
|-CXXMethodDecl 0x55c23fbbf5d8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55c23fbbf6f8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55c23fbbf868 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55c23fbbf7a8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55c23fbbf958 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55c23fbbf9f8 <col:20>
| `-OptimizeNoneAttr 0x55c23fbbfa50 <col:30>
|-CXXMethodDecl 0x55c23fbbfaa0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55c23fbbfb60 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55c23fbbfd98 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55c23fbbfc10 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55c23fbbfc88 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c23fbbfe48 <col:20>
| `-OptimizeNoneAttr 0x55c23fbbfea0 <col:30>
|-CXXMethodDecl 0x55c23fbbff48 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55c23fbbffe8 <col:20>
| `-OptimizeNoneAttr 0x55c23fbc0040 <col:30>
|-CXXMethodDecl 0x55c23fbc0090 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55c23fbc0130 <col:20>
| `-OptimizeNoneAttr 0x55c23fbc0188 <col:30>
|-CXXMethodDecl 0x55c23fbc01d0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55c23fbc0270 <col:20>
| `-OptimizeNoneAttr 0x55c23fbc02c8 <col:30>
|-CXXMethodDecl 0x55c23fbc03c8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55c23fbc0300 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55c23fbc0470 <col:20>
| `-OptimizeNoneAttr 0x55c23fbc04c8 <col:30>
|-CXXMethodDecl 0x55c23fbc0688 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55c23fbc0500 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55c23fbc0578 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c23fbc0738 <col:20>
| `-OptimizeNoneAttr 0x55c23fbc0790 <col:30>
|-CXXMethodDecl 0x55c23fbc0838 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55c23fbc0958 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55c23fbc0a78 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55c23fbc0b18 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55c23fbc0b40 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55c23fbc0c68 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55c23fbc0d08 <col:20>
| `-OptimizeNoneAttr 0x55c23fbc0d60 <col:30>
|-CXXMethodDecl 0x55c23fbc0e08 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55c23fbc0ea8 <col:20>
| `-OptimizeNoneAttr 0x55c23fbc0f00 <col:30>
|-AccessSpecDecl 0x55c23fbc0f28 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55c23fbc0f50 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55c23fbc1050 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55c23fbc10a0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c23fbc1030 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55c23fbc1010 <col:14> 'int' 48
|-CXXMethodDecl 0x55c23fbc1108 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55c23fbc11a8 <col:20>
| `-OptimizeNoneAttr 0x55c23fbc1200 <col:30>
|-CXXMethodDecl 0x55c23fbc1278 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55c23fbc1318 <col:20>
| `-OptimizeNoneAttr 0x55c23fbc1370 <col:30>
|-CXXMethodDecl 0x55c23fbc1438 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55c23fbc13a8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55c23fbc15d8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55c23fbc1778 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55c23fbc1688 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55c23fbc1820 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55c23fbc1920 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c23fbc1cd0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbc1900 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55c23fbc18e0 <col:9> 'int' 0
| |-EnumConstantDecl 0x55c23fbc19b0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c23fbc1ce8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbc1990 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55c23fbc1970 <col:14> 'int' 1
| |-EnumConstantDecl 0x55c23fbc1a40 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c23fbc1d00 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbc1a20 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55c23fbc1a00 <col:14> 'int' 2
| |-EnumConstantDecl 0x55c23fbc1ad0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c23fbc1d18 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbc1ab0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55c23fbc1a90 <col:14> 'int' 3
| |-EnumConstantDecl 0x55c23fbc1b60 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c23fbc1d30 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbc1b40 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55c23fbc1b20 <col:13> 'int' 4
| |-EnumConstantDecl 0x55c23fbc1bf0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c23fbc1d48 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbc1bd0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55c23fbc1bb0 <col:13> 'int' 5
| `-EnumConstantDecl 0x55c23fbc1c80 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55c23fbc1d60 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c23fbc1c60 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55c23fbc1c40 <col:14> 'int' 6
|-CXXMethodDecl 0x55c23fbc1dc8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55c23fbc1e68 <col:20>
| `-OptimizeNoneAttr 0x55c23fbc1ec0 <col:30>
|-CXXMethodDecl 0x55c23fbc1fb8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55c23fbc1ef8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55c23fbc2060 <col:20>
| `-OptimizeNoneAttr 0x55c23fbc20b8 <col:30>
|-CXXMethodDecl 0x55c23fbc2128 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55c23fbc2250 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55c23fbc23c8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55c23fbc2300 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55c23fbc2490 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55c23fbc2558 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55c23fbc2698 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55c23fbc2608 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55c23fbc2740 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55c23fbc2840 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55c23fbc2a40 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbc2820 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55c23fbc2800 <col:23> 'int' 0
| |-EnumConstantDecl 0x55c23fbc28d0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55c23fbc2a58 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbc28b0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55c23fbc2890 <col:45> 'int' 4
| |-EnumConstantDecl 0x55c23fbc2960 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55c23fbc2a70 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbc2940 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55c23fbc2920 <col:24> 'int' 0
| `-EnumConstantDecl 0x55c23fbc29f0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55c23fbc2a88 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c23fbc29d0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55c23fbc29b0 <col:47> 'int' 16
|-CXXMethodDecl 0x55c23fbc2ae8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55c23fbc2c58 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55c23fbc2b98 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55c23fbc2d00 <col:20>
| `-OptimizeNoneAttr 0x55c23fbc2d58 <col:30>
|-CXXMethodDecl 0x55c23fbc2da8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55c23fbd6730 <col:18, col:36>
|   `-ReturnStmt 0x55c23fbd6720 <col:20, col:33>
|     `-ImplicitCastExpr 0x55c23fbd6708 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55c23fbd66e8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55c23fbd66b8 <col:27> '<bound member function type>' ->xanno 0x55c23fbc0e08
|           `-CXXThisExpr 0x55c23fbd66a8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55c23fbc2ea0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55c23fbd6840 <col:30, col:48>
|   `-ReturnStmt 0x55c23fbd6830 <col:32, col:45>
|     `-ImplicitCastExpr 0x55c23fbd6818 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55c23fbd67f8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55c23fbd67c8 <col:39> '<bound member function type>' ->xanno 0x55c23fbc0c68
|           `-CXXThisExpr 0x55c23fbd67b8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55c23fbc2f88 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55c23fbd69d8 <col:24, col:50>
|   `-ReturnStmt 0x55c23fbd69c8 <col:26, col:47>
|     `-UnaryOperator 0x55c23fbd69b0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55c23fbd6990 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55c23fbd6978 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c23fbd6928 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55c23fbcbc48
|         |   `-CXXMemberCallExpr 0x55c23fbd6908 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55c23fbd68d8 <col:34> '<bound member function type>' ->xanno 0x55c23fbc0e08
|         |       `-CXXThisExpr 0x55c23fbd68c8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55c23fbd6958 <col:46> 'int' 0
|-CXXMethodDecl 0x55c23fbc3090 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55c23fbd6ba8 <col:36, col:62>
|   `-ReturnStmt 0x55c23fbd6b98 <col:38, col:59>
|     `-UnaryOperator 0x55c23fbd6b80 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55c23fbd6b60 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55c23fbd6b48 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c23fbd6ac0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55c23fbcbc48
|         |   `-CXXMemberCallExpr 0x55c23fbd6aa0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55c23fbd6a70 <col:46> '<bound member function type>' ->xanno 0x55c23fbc0c68
|         |       `-CXXThisExpr 0x55c23fbd6a60 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55c23fbd6af0 <col:58> 'int' 0
|-CXXMethodDecl 0x55c23fbc31a8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55c23fbd6d40 <col:26, col:53>
|   `-ReturnStmt 0x55c23fbd6d30 <col:28, col:50>
|     `-UnaryOperator 0x55c23fbd6d18 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55c23fbd6cf8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55c23fbd6ce0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c23fbd6c90 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55c23fbcbf48
|         |   `-CXXMemberCallExpr 0x55c23fbd6c70 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55c23fbd6c40 <col:36> '<bound member function type>' ->xanno 0x55c23fbc0e08
|         |       `-CXXThisExpr 0x55c23fbd6c30 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55c23fbd6cc0 <col:49> 'int' 0
|-CXXMethodDecl 0x55c23fbc32c8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55c23fbd6f18 <col:38, col:65>
|   `-ReturnStmt 0x55c23fbd6f08 <col:40, col:62>
|     `-UnaryOperator 0x55c23fbd6ef0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55c23fbd6ed0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55c23fbd6eb8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c23fbd6e28 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55c23fbcbf48
|         |   `-CXXMemberCallExpr 0x55c23fbd6e08 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55c23fbd6dd8 <col:48> '<bound member function type>' ->xanno 0x55c23fbc0c68
|         |       `-CXXThisExpr 0x55c23fbd6dc8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55c23fbd6e58 <col:61> 'int' 0
|-CXXMethodDecl 0x55c23fbc3478 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55c23fbc3380 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55c23fbd75e8 <col:34, line:463:5>
|   |-ParenExpr 0x55c23fbd7430 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55c23fbd7400 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55c23fbd7068 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c23fbd7038 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c23fbd6f88 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c23fbd6f70 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c23fbd6f30 <col:23> 'int' lvalue ParmVar 0x55c23fbc3380 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c23fbd6f50 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c23fbd7018 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c23fbd6fe8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c23fbd6fa8 <col:33> 'int' lvalue ParmVar 0x55c23fbc3380 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55c23fbd7000 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55c23fbd6fc8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c23fbc1050 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55c23fbd70c8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c23fbd70a8 <col:56> 'int' 0
|   |   `-CallExpr 0x55c23fbd7360 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55c23fbd7348 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c23fbd7328 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c23f72d970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c23fbd73a0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbd71b8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55c23fbd73b8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbd71e8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c23fbd73d0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c23fbd7220 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55c23fbd73e8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c23fbd7310 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c23fbd72f8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c23fbd72b8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55c23fbd75d8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55c23fbd75c0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55c23fbd75a0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55c23fbd7570 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c23fbd7520 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55c23fbcbc48
|         |   `-CXXMemberCallExpr 0x55c23fbd7500 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55c23fbd74d0 <col:9> '<bound member function type>' ->xanno 0x55c23fbc0c68
|         |       `-CXXThisExpr 0x55c23fbd74c0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55c23fbd7588 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55c23fbd7550 <col:21> 'int' lvalue ParmVar 0x55c23fbc3380 'i' 'int'
|-CXXMethodDecl 0x55c23fbc36c8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55c23fbc3538 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55c23fbc35b0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55c23fbd7c78 <col:40, line:472:5>
|   |-ParenExpr 0x55c23fbd7a90 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55c23fbd7a60 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55c23fbd7740 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c23fbd7710 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c23fbd7660 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c23fbd7648 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c23fbd7608 <col:23> 'int' lvalue ParmVar 0x55c23fbc3538 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c23fbd7628 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c23fbd76f0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c23fbd76c0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c23fbd7680 <col:33> 'int' lvalue ParmVar 0x55c23fbc3538 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55c23fbd76d8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55c23fbd76a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c23fbc1050 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55c23fbd77a0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c23fbd7780 <col:56> 'int' 0
|   |   `-CallExpr 0x55c23fbd79c0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55c23fbd79a8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c23fbd7988 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c23f72d970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c23fbd7a00 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbd7810 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55c23fbd7a18 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbd7840 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c23fbd7a30 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c23fbd7878 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55c23fbd7a48 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c23fbd7970 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c23fbd7958 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c23fbd7918 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55c23fbd7c58 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55c23fbd7c00 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55c23fbd7bd0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55c23fbd7b80 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55c23fbcbc48
|     | |   `-CXXMemberCallExpr 0x55c23fbd7b60 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55c23fbd7b30 <col:2> '<bound member function type>' ->xanno 0x55c23fbc0e08
|     | |       `-CXXThisExpr 0x55c23fbd7b20 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55c23fbd7be8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55c23fbd7bb0 <col:14> 'int' lvalue ParmVar 0x55c23fbc3538 'i' 'int'
|     `-ImplicitCastExpr 0x55c23fbd7c40 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55c23fbd7c20 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55c23fbc35b0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55c23fbc3888 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55c23fbc3790 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55c23fbd83f8 <col:36, line:485:5>
|   |-ParenExpr 0x55c23fbd8160 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c23fbd8130 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c23fbd7e10 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c23fbd7de0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c23fbd7cf0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c23fbd7cd8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c23fbd7c98 <col:23> 'int' lvalue ParmVar 0x55c23fbc3790 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c23fbd7cb8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c23fbd7dc0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c23fbd7da8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c23fbd7d10 <col:33> 'int' lvalue ParmVar 0x55c23fbc3790 'i' 'int'
|   |   |     `-BinaryOperator 0x55c23fbd7d88 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c23fbd7d70 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c23fbd7d30 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c23fbc1050 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c23fbd7d50 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55c23fbd7e70 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c23fbd7e50 <col:60> 'int' 0
|   |   `-CallExpr 0x55c23fbd8090 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c23fbd8078 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c23fbd8058 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c23f72d970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c23fbd80d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbd7ee0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55c23fbd80e8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbd7f18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c23fbd8100 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c23fbd7f50 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55c23fbd8118 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c23fbd8040 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c23fbd8028 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c23fbd7fe8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55c23fbd83e8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55c23fbd83d0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55c23fbd83b8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c23fbd8388 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55c23fbd8328 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c23fbd82f8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c23fbd8270 <col:61, col:70> 'char const[48]' lvalue ->c 0x55c23fbcbb20
|             |   `-CXXMemberCallExpr 0x55c23fbd8250 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c23fbd8220 <col:61> '<bound member function type>' ->xanno 0x55c23fbc0c68
|             |       `-CXXThisExpr 0x55c23fbd8210 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c23fbd8310 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c23fbd82a0 <col:74> 'int' lvalue ParmVar 0x55c23fbc3790 'i' 'int'
|-CXXMethodDecl 0x55c23fbc3ad8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55c23fbc3948 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55c23fbc39c0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55c23fbd8b48 <col:42, line:500:5>
|   |-ParenExpr 0x55c23fbd88e0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c23fbd88b0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c23fbd8590 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c23fbd8560 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c23fbd8470 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c23fbd8458 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c23fbd8418 <col:23> 'int' lvalue ParmVar 0x55c23fbc3948 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c23fbd8438 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c23fbd8540 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c23fbd8528 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c23fbd8490 <col:33> 'int' lvalue ParmVar 0x55c23fbc3948 'i' 'int'
|   |   |     `-BinaryOperator 0x55c23fbd8508 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c23fbd84f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c23fbd84b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c23fbc1050 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c23fbd84d0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55c23fbd85f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c23fbd85d0 <col:60> 'int' 0
|   |   `-CallExpr 0x55c23fbd8810 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c23fbd87f8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c23fbd87d8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c23f72d970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c23fbd8850 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbd8660 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55c23fbd8868 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbd8698 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c23fbd8880 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c23fbd86d0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55c23fbd8898 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c23fbd87c0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c23fbd87a8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c23fbd8768 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55c23fbd8b28 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55c23fbd8ad8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55c23fbd8aa8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55c23fbd8a50 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55c23fbd8a20 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55c23fbd89d0 <col:48, col:57> 'char [48]' lvalue ->c 0x55c23fbcbb20
|     |     |   `-CXXMemberCallExpr 0x55c23fbd89b0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55c23fbd8980 <col:48> '<bound member function type>' ->xanno 0x55c23fbc0e08
|     |     |       `-CXXThisExpr 0x55c23fbd8970 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55c23fbd8a38 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55c23fbd8a00 <col:61> 'int' lvalue ParmVar 0x55c23fbc3948 'i' 'int'
|     `-ImplicitCastExpr 0x55c23fbd8b10 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55c23fbd8af0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55c23fbc39c0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55c23fbc3c98 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55c23fbc3ba0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55c23fbd92a8 <col:35, line:513:5>
|   |-ParenExpr 0x55c23fbd8fb8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c23fbd8f88 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c23fbd8ce0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c23fbd8cb0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c23fbd8bc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c23fbd8ba8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c23fbd8b68 <col:23> 'int' lvalue ParmVar 0x55c23fbc3ba0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c23fbd8b88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c23fbd8c90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c23fbd8c78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c23fbd8be0 <col:33> 'int' lvalue ParmVar 0x55c23fbc3ba0 'i' 'int'
|   |   |     `-BinaryOperator 0x55c23fbd8c58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c23fbd8c40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c23fbd8c00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c23fbc1050 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c23fbd8c20 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55c23fbd8d40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c23fbd8d20 <col:60> 'int' 0
|   |   `-CallExpr 0x55c23fbd8ee8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c23fbd8ed0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c23fbd8eb0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c23f72d970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c23fbd8f28 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbd8db0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55c23fbd8f40 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbd8de8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c23fbd8f58 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c23fbd8e20 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55c23fbd8f70 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c23fbd8e98 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c23fbd8e80 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c23fbd8e40 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55c23fbd9298 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55c23fbd9280 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55c23fbd9268 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c23fbd9238 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55c23fbd91b0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c23fbd9180 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c23fbd9130 <col:60, col:69> 'char const[48]' lvalue ->c 0x55c23fbcbb20
|             |   `-CXXMemberCallExpr 0x55c23fbd9110 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c23fbd90e0 <col:60> '<bound member function type>' ->xanno 0x55c23fbc0c68
|             |       `-CXXThisExpr 0x55c23fbd90d0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c23fbd9198 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c23fbd9160 <col:73> 'int' lvalue ParmVar 0x55c23fbc3ba0 'i' 'int'
|-CXXMethodDecl 0x55c23fbc3ee8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55c23fbc3d58 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55c23fbc3dd0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55c23fbd99c8 <col:41, line:528:5>
|   |-ParenExpr 0x55c23fbd9750 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c23fbd9720 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c23fbd9440 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c23fbd9410 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c23fbd9320 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c23fbd9308 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c23fbd92c8 <col:23> 'int' lvalue ParmVar 0x55c23fbc3d58 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c23fbd92e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c23fbd93f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c23fbd93d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c23fbd9340 <col:33> 'int' lvalue ParmVar 0x55c23fbc3d58 'i' 'int'
|   |   |     `-BinaryOperator 0x55c23fbd93b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c23fbd93a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c23fbd9360 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c23fbc1050 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c23fbd9380 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55c23fbd94a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c23fbd9480 <col:60> 'int' 0
|   |   `-CallExpr 0x55c23fbd9680 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c23fbd9668 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c23fbd9648 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c23f72d970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c23fbd96c0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbd9510 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55c23fbd96d8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbd9548 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c23fbd96f0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c23fbd9580 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55c23fbd9708 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c23fbd9630 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c23fbd9618 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c23fbd95d8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55c23fbd99a8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55c23fbd9958 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55c23fbd9928 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55c23fbd98d0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55c23fbd9890 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55c23fbd9840 <col:47, col:56> 'char [48]' lvalue ->c 0x55c23fbcbb20
|     |     |   `-CXXMemberCallExpr 0x55c23fbd9820 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55c23fbd97f0 <col:47> '<bound member function type>' ->xanno 0x55c23fbc0e08
|     |     |       `-CXXThisExpr 0x55c23fbd97e0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55c23fbd98a8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55c23fbd9870 <col:60> 'int' lvalue ParmVar 0x55c23fbc3d58 'i' 'int'
|     `-ImplicitCastExpr 0x55c23fbd9990 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55c23fbd9970 <col:65> 'int16_t':'short' lvalue ParmVar 0x55c23fbc3dd0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55c23fbc40a8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55c23fbc3fb0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55c23fbda098 <col:36, line:541:5>
|   |-ParenExpr 0x55c23fbd9e38 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c23fbd9e08 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c23fbd9b60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c23fbd9b30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c23fbd9a40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c23fbd9a28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c23fbd99e8 <col:23> 'int' lvalue ParmVar 0x55c23fbc3fb0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c23fbd9a08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c23fbd9b10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c23fbd9af8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c23fbd9a60 <col:33> 'int' lvalue ParmVar 0x55c23fbc3fb0 'i' 'int'
|   |   |     `-BinaryOperator 0x55c23fbd9ad8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c23fbd9ac0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c23fbd9a80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c23fbc1050 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c23fbd9aa0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55c23fbd9bc0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c23fbd9ba0 <col:60> 'int' 0
|   |   `-CallExpr 0x55c23fbd9d68 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c23fbd9d50 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c23fbd9d30 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c23f72d970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c23fbd9da8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbd9c30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55c23fbd9dc0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbd9c68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c23fbd9dd8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c23fbd9ca0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55c23fbd9df0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c23fbd9d18 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c23fbd9d00 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c23fbd9cc0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55c23fbda088 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55c23fbda070 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55c23fbda058 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c23fbda028 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55c23fbd9fd0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c23fbd9fa0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c23fbd9f50 <col:61, col:70> 'char const[48]' lvalue ->c 0x55c23fbcbb20
|             |   `-CXXMemberCallExpr 0x55c23fbd9f30 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c23fbd9f00 <col:61> '<bound member function type>' ->xanno 0x55c23fbc0c68
|             |       `-CXXThisExpr 0x55c23fbd9ef0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c23fbd9fb8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c23fbd9f80 <col:74> 'int' lvalue ParmVar 0x55c23fbc3fb0 'i' 'int'
|-CXXMethodDecl 0x55c23fbc4278 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55c23fbc4168 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55c23fbc41e0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c23fbc4328 <col:20>
| `-OptimizeNoneAttr 0x55c23fbc4380 <col:30>
|-CXXMethodDecl 0x55c23fbc44b8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55c23fbc43c0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55c23fbda768 <col:35, line:562:5>
|   |-ParenExpr 0x55c23fbda508 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c23fbda4d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c23fbda230 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c23fbda200 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c23fbda110 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c23fbda0f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c23fbda0b8 <col:23> 'int' lvalue ParmVar 0x55c23fbc43c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c23fbda0d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c23fbda1e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c23fbda1c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c23fbda130 <col:33> 'int' lvalue ParmVar 0x55c23fbc43c0 'i' 'int'
|   |   |     `-BinaryOperator 0x55c23fbda1a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c23fbda190 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c23fbda150 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c23fbc1050 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c23fbda170 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55c23fbda290 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c23fbda270 <col:60> 'int' 0
|   |   `-CallExpr 0x55c23fbda438 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c23fbda420 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c23fbda400 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c23f72d970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c23fbda478 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbda300 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55c23fbda490 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbda338 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c23fbda4a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c23fbda370 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55c23fbda4c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c23fbda3e8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c23fbda3d0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c23fbda390 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55c23fbda758 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55c23fbda740 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55c23fbda728 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c23fbda6f8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55c23fbda6a0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c23fbda670 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c23fbda620 <col:60, col:69> 'char const[48]' lvalue ->c 0x55c23fbcbb20
|             |   `-CXXMemberCallExpr 0x55c23fbda600 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c23fbda5d0 <col:60> '<bound member function type>' ->xanno 0x55c23fbc0c68
|             |       `-CXXThisExpr 0x55c23fbda5c0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c23fbda688 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c23fbda650 <col:73> 'int' lvalue ParmVar 0x55c23fbc43c0 'i' 'int'
|-CXXMethodDecl 0x55c23fbc46c8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55c23fbc4578 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55c23fbc45f0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55c23fbdae48 <col:41, line:577:5>
|   |-ParenExpr 0x55c23fbdabd8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c23fbdaba8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c23fbda900 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c23fbda8d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c23fbda7e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c23fbda7c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c23fbda788 <col:23> 'int' lvalue ParmVar 0x55c23fbc4578 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c23fbda7a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c23fbda8b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c23fbda898 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c23fbda800 <col:33> 'int' lvalue ParmVar 0x55c23fbc4578 'i' 'int'
|   |   |     `-BinaryOperator 0x55c23fbda878 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c23fbda860 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c23fbda820 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c23fbc1050 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c23fbda840 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55c23fbda960 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c23fbda940 <col:60> 'int' 0
|   |   `-CallExpr 0x55c23fbdab08 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c23fbdaaf0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c23fbdaad0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c23f72d970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c23fbdab48 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbda9d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55c23fbdab60 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbdaa08 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c23fbdab78 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c23fbdaa40 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55c23fbdab90 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c23fbdaab8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c23fbdaaa0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c23fbdaa60 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55c23fbdae28 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55c23fbdadd8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55c23fbdada8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55c23fbdad48 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55c23fbdad18 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55c23fbdacc8 <col:47, col:56> 'char [48]' lvalue ->c 0x55c23fbcbb20
|     |     |   `-CXXMemberCallExpr 0x55c23fbdaca8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55c23fbdac78 <col:47> '<bound member function type>' ->xanno 0x55c23fbc0e08
|     |     |       `-CXXThisExpr 0x55c23fbdac68 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55c23fbdad30 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55c23fbdacf8 <col:60> 'int' lvalue ParmVar 0x55c23fbc4578 'i' 'int'
|     `-ImplicitCastExpr 0x55c23fbdae10 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55c23fbdadf0 <col:65> 'int32_t':'int' lvalue ParmVar 0x55c23fbc45f0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55c23fbc4888 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55c23fbc4790 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55c23fbdb578 <col:36, line:591:5>
|   |-ParenExpr 0x55c23fbdb2b8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c23fbdb288 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c23fbdafe0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c23fbdafb0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c23fbdaec0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c23fbdaea8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c23fbdae68 <col:23> 'int' lvalue ParmVar 0x55c23fbc4790 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c23fbdae88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c23fbdaf90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c23fbdaf78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c23fbdaee0 <col:33> 'int' lvalue ParmVar 0x55c23fbc4790 'i' 'int'
|   |   |     `-BinaryOperator 0x55c23fbdaf58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c23fbdaf40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c23fbdaf00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c23fbc1050 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c23fbdaf20 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55c23fbdb040 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c23fbdb020 <col:60> 'int' 0
|   |   `-CallExpr 0x55c23fbdb1e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c23fbdb1d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c23fbdb1b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c23f72d970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c23fbdb228 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbdb0b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55c23fbdb240 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbdb0e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c23fbdb258 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c23fbdb120 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55c23fbdb270 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c23fbdb198 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c23fbdb180 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c23fbdb140 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55c23fbdb568 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55c23fbdb550 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55c23fbdb538 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c23fbdb508 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55c23fbdb480 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c23fbdb450 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c23fbdb400 <col:61, col:70> 'char const[48]' lvalue ->c 0x55c23fbcbb20
|             |   `-CXXMemberCallExpr 0x55c23fbdb3e0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c23fbdb3b0 <col:61> '<bound member function type>' ->xanno 0x55c23fbc0c68
|             |       `-CXXThisExpr 0x55c23fbdb3a0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c23fbdb468 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c23fbdb430 <col:74> 'int' lvalue ParmVar 0x55c23fbc4790 'i' 'int'
|-CXXMethodDecl 0x55c23fbc4ad8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55c23fbc4948 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55c23fbc49c0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55c23fbdbc58 <col:42, line:606:5>
|   |-ParenExpr 0x55c23fbdb9e8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c23fbdb9b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c23fbdb710 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c23fbdb6e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c23fbdb5f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c23fbdb5d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c23fbdb598 <col:23> 'int' lvalue ParmVar 0x55c23fbc4948 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c23fbdb5b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c23fbdb6c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c23fbdb6a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c23fbdb610 <col:33> 'int' lvalue ParmVar 0x55c23fbc4948 'i' 'int'
|   |   |     `-BinaryOperator 0x55c23fbdb688 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c23fbdb670 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c23fbdb630 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c23fbc1050 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c23fbdb650 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55c23fbdb770 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c23fbdb750 <col:60> 'int' 0
|   |   `-CallExpr 0x55c23fbdb918 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c23fbdb900 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c23fbdb8e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c23f72d970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c23fbdb958 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbdb7e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55c23fbdb970 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbdb818 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c23fbdb988 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c23fbdb850 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55c23fbdb9a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c23fbdb8c8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c23fbdb8b0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c23fbdb870 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55c23fbdbc38 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55c23fbdbbe8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55c23fbdbbb8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55c23fbdbb58 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55c23fbdbb28 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55c23fbdbad8 <col:48, col:57> 'char [48]' lvalue ->c 0x55c23fbcbb20
|     |     |   `-CXXMemberCallExpr 0x55c23fbdbab8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55c23fbdba88 <col:48> '<bound member function type>' ->xanno 0x55c23fbc0e08
|     |     |       `-CXXThisExpr 0x55c23fbdba78 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55c23fbdbb40 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55c23fbdbb08 <col:61> 'int' lvalue ParmVar 0x55c23fbc4948 'i' 'int'
|     `-ImplicitCastExpr 0x55c23fbdbc20 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55c23fbdbc00 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55c23fbc49c0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55c23fbc4c70 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55c23fbc4ba0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55c23fbdc4c8 <col:33, line:620:5>
|   |-ParenExpr 0x55c23fbdc240 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55c23fbdc210 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55c23fbdbe60 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c23fbdbe30 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c23fbdbcd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c23fbdbcb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c23fbdbc78 <col:23> 'int' lvalue ParmVar 0x55c23fbc4ba0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c23fbdbc98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c23fbdbe10 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55c23fbdbdf8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c23fbdbcf0 <col:33> 'int' lvalue ParmVar 0x55c23fbc4ba0 'i' 'int'
|   |   |     `-BinaryOperator 0x55c23fbdbdd8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c23fbdbdc0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c23fbdbd10 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c23fbc1050 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55c23fbdbd98 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55c23fbdbd80 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55c23fbdbd48 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55c23fbdbec0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c23fbdbea0 <col:79> 'int' 0
|   |   `-CallExpr 0x55c23fbdc170 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55c23fbdc158 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c23fbdc138 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c23f72d970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c23fbdc1b0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbdbfa8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55c23fbdc1c8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbdbff0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c23fbdc1e0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c23fbdc028 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55c23fbdc1f8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c23fbdc120 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c23fbdc108 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c23fbdc0c8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55c23fbdc4b8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55c23fbdc4a0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55c23fbdc488 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c23fbdc458 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55c23fbdc3d0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c23fbdc3a0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c23fbdc350 <col:67, col:76> 'char const[48]' lvalue ->c 0x55c23fbcbb20
|             |   `-CXXMemberCallExpr 0x55c23fbdc330 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c23fbdc300 <col:67> '<bound member function type>' ->xanno 0x55c23fbc0c68
|             |       `-CXXThisExpr 0x55c23fbdc2f0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c23fbdc3b8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c23fbdc380 <col:80> 'int' lvalue ParmVar 0x55c23fbc4ba0 'i' 'int'
|-CXXMethodDecl 0x55c23fbc4e88 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55c23fbc4d30 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55c23fbc4db0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55c23fbdccf0 <col:45, line:635:5>
|   |-ParenExpr 0x55c23fbdca38 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55c23fbdca08 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55c23fbdc6d0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c23fbdc6a0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c23fbdc540 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c23fbdc528 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c23fbdc4e8 <col:23> 'int' lvalue ParmVar 0x55c23fbc4d30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c23fbdc508 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c23fbdc680 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55c23fbdc668 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c23fbdc560 <col:33> 'int' lvalue ParmVar 0x55c23fbc4d30 'i' 'int'
|   |   |     `-BinaryOperator 0x55c23fbdc648 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c23fbdc630 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c23fbdc580 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c23fbc1050 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55c23fbdc608 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55c23fbdc5f0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55c23fbdc5b8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55c23fbdc730 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c23fbdc710 <col:79> 'int' 0
|   |   `-CallExpr 0x55c23fbdc968 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55c23fbdc950 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c23fbdc930 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c23f72d970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c23fbdc9a8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbdc7a0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55c23fbdc9c0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c23fbdc7e8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c23fbdc9d8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c23fbdc820 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55c23fbdc9f0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c23fbdc918 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c23fbdc900 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c23fbdc8b8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55c23fbdccd0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55c23fbdcc38 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55c23fbdcc08 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55c23fbdcba8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55c23fbdcb78 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55c23fbdcb28 <col:54, col:63> 'char [48]' lvalue ->c 0x55c23fbcbb20
|     |     |   `-CXXMemberCallExpr 0x55c23fbdcb08 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55c23fbdcad8 <col:54> '<bound member function type>' ->xanno 0x55c23fbc0e08
|     |     |       `-CXXThisExpr 0x55c23fbdcac8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55c23fbdcb90 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55c23fbdcb58 <col:67> 'int' lvalue ParmVar 0x55c23fbc4d30 'i' 'int'
|     `-CXXConstCastExpr 0x55c23fbdcca0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55c23fbdcc88 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55c23fbdcc50 <col:91> 'const void *' lvalue ParmVar 0x55c23fbc4db0 'x' 'const void *'
|-CXXMethodDecl 0x55c23fbc4f58 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55c23fbdcd78 <col:34, line:640:5>
|   `-ReturnStmt 0x55c23fbdcd68 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55c23fbdcd50 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55c23fbdcd20 <col:16> 'Packet *' lvalue ->_data_packet 0x55c23fbcc6d8
|         `-CXXThisExpr 0x55c23fbdcd10 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55c23fbc5098 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55c23fbc5008 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c23fbd5e38 <col:46> 'bool' true
|-CXXMethodDecl 0x55c23fbc5218 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55c23fbc5150 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55c23fbc52c0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55c23fbc5a70 <line:660:22> "" ""
| |-EnumConstantDecl 0x55c23fbc53c0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c23fbc5ae0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbc53a0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55c23fbc5380 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55c23fbba520 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55c23fbc5450 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c23fbc5af8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbc5430 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55c23fbc5410 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55c23fbba5b0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55c23fbc54e0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c23fbc5b10 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbc54c0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55c23fbc54a0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55c23fbc5570 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c23fbc5b28 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbc5550 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55c23fbc5530 <col:19> 'int' 16
| |-EnumConstantDecl 0x55c23fbc5600 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c23fbc5b40 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbc55e0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55c23fbc55c0 <col:21> 'int' 16
| |-EnumConstantDecl 0x55c23fbc5690 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c23fbc5b58 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbc5670 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55c23fbc5650 <col:19> 'int' 32
| |-EnumConstantDecl 0x55c23fbc5720 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c23fbc5b70 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbc5700 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55c23fbc56e0 <col:19> 'int' EnumConstant 0x55c23fbc5570 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55c23fbc57b0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c23fbc5b88 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbc5790 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55c23fbc5770 <col:19> 'int' EnumConstant 0x55c23fbc5690 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55c23fbc5880 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c23fbc5ba0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbc5860 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55c23fbc5840 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55c23fbc5800 <col:23> 'int' EnumConstant 0x55c23fbc57b0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55c23fbc5820 <col:40> 'int' 2
| |-EnumConstantDecl 0x55c23fbc5950 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c23fbc5bb8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c23fbc5930 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55c23fbc5910 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55c23fbc58d0 <col:23> 'int' EnumConstant 0x55c23fbc57b0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55c23fbc58f0 <col:40> 'int' 4
| `-EnumConstantDecl 0x55c23fbc5a20 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55c23fbc5bd0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c23fbc5a00 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55c23fbc59e0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55c23fbc59a0 <col:23> 'int' EnumConstant 0x55c23fbc57b0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55c23fbc59c0 <col:40> 'int' 8
|-CXXMethodDecl 0x55c23fbc5c10 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55c23fbc5cb0 <col:68> "" ""
|-CXXMethodDecl 0x55c23fbc5d48 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55c23fbc5de8 <col:45> "" ""
|-CXXMethodDecl 0x55c23fbc5e80 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55c23fbc5f20 <col:57> "" ""
|-CXXMethodDecl 0x55c23fbc5fb8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55c23fbc6058 <col:45> "" ""
|-CXXMethodDecl 0x55c23fbc60f0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55c23fbc6190 <col:57> "" ""
|-CXXMethodDecl 0x55c23fbc6220 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55c23fbc62c0 <col:51> "" ""
|-CXXMethodDecl 0x55c23fbc6350 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55c23fbc63f0 <col:63> "" ""
|-CXXMethodDecl 0x55c23fbc6480 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55c23fbc6520 <col:53> "" ""
|-CXXMethodDecl 0x55c23fbc65b0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55c23fbc6650 <col:65> "" ""
|-CXXMethodDecl 0x55c23fbc6768 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55c23fbc66d8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55c23fbc6810 <col:61> "" ""
|-CXXMethodDecl 0x55c23fbc69a8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55c23fbc6898 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55c23fbc6910 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55c23fbc6a58 <col:67> "" ""
|-CXXMethodDecl 0x55c23fbc6b70 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55c23fbc6ae0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55c23fbc6c18 <col:63> "" ""
|-CXXMethodDecl 0x55c23fbc6db0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55c23fbc6ca0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55c23fbc6d18 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55c23fbc6e60 <col:69> "" ""
|-CXXMethodDecl 0x55c23fbc6f78 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55c23fbc6ee8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55c23fbc7020 <col:63> "" ""
|-CXXMethodDecl 0x55c23fbc96f8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55c23fbc95e8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55c23fbc9660 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55c23fbc97a8 <col:69> "" ""
|-CXXMethodDecl 0x55c23fbc98c0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55c23fbc9830 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55c23fbc9968 <col:62> "" ""
|-CXXMethodDecl 0x55c23fbc9b00 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55c23fbc99f0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55c23fbc9a68 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55c23fbc9bb0 <col:68> "" ""
|-CXXMethodDecl 0x55c23fbc9cc8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55c23fbc9c38 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55c23fbc9d70 <col:63> "" ""
|-CXXMethodDecl 0x55c23fbc9f08 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55c23fbc9df8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55c23fbc9e70 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55c23fbc9fb8 <col:69> "" ""
|-CXXMethodDecl 0x55c23fbca048 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55c23fbca0e8 <col:64> "" ""
|-CXXMethodDecl 0x55c23fbca178 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55c23fbca218 <col:52> "" ""
|-CXXMethodDecl 0x55c23fbca2a8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55c23fbca348 <col:67> "" ""
|-CXXMethodDecl 0x55c23fbca3d8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55c23fbca478 <col:55> "" ""
|-CXXMethodDecl 0x55c23fbca590 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55c23fbca500 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55c23fbca638 <col:58> "" ""
|-CXXMethodDecl 0x55c23fbca7d0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55c23fbca6c0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55c23fbca738 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55c23fbca880 <col:62> "" ""
|-CXXMethodDecl 0x55c23fbca998 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55c23fbca908 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55c23fbcaa40 <col:58> "" ""
|-CXXMethodDecl 0x55c23fbcabd8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55c23fbcaac8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55c23fbcab40 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55c23fbcac88 <col:62> "" ""
|-CXXMethodDecl 0x55c23fbcada0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55c23fbcad10 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55c23fbcae48 <col:60> "" ""
|-CXXMethodDecl 0x55c23fbcafe0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55c23fbcaed0 <col:34> col:37 'int'
| |-ParmVarDecl 0x55c23fbcaf48 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55c23fbcb090 <col:64> "" ""
|-CXXMethodDecl 0x55c23fbcb1a8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55c23fbcb118 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55c23fbcb250 <col:58> "" ""
|-CXXMethodDecl 0x55c23fbcb3e8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55c23fbcb2d8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55c23fbcb350 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55c23fbcb498 <col:62> "" ""
|-CXXMethodDecl 0x55c23fbcb5b0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55c23fbcb520 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55c23fbcb658 <col:59> "" ""
|-CXXMethodDecl 0x55c23fbcb7f0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55c23fbcb6e0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55c23fbcb758 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55c23fbcb8a0 <col:63> "" ""
|-AccessSpecDecl 0x55c23fbcb910 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55c23fbcb938 prev 0x55c23fbc0b40 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55c23fbcba30 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55c23fbcbb20 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55c23fbcbc48 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55c23fbcbdc8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55c23fbcbf48 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55c23fbcc0c8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55c23fbdcef8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55c23fbdd768 <col:11>
| |-CXXDestructorDecl 0x55c23fbdcfd0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55c23fbdd108 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55c23fbdd108
| | `-ParmVarDecl 0x55c23fbdd218 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55c23fbdd2b8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55c23fbdd2b8
| | `-ParmVarDecl 0x55c23fbdd3c8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55c23fbe0188 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55c23fbe0298 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55c23fbe0518 <col:11>
| |   `-ReturnStmt 0x55c23fbe0508 <col:11>
| |     `-UnaryOperator 0x55c23fbe04f0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55c23fbe04e0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55c23fbe0308 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55c23fbe0308
|   `-ParmVarDecl 0x55c23fbe0418 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55c23fbcc130 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55c23fbcc248 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55c23fbcc2e8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55c23fbcc350 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55c23fbcc3b8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55c23fbcc420 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55c23fbcc480 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55c23fbcc540 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55c23fbcc5a0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55c23fbcc600 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55c23fbdce08 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55c23fbcc2e8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55c23fbdd778 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55c23fbdd7d0 <col:12>
| |-CXXConstructorDecl 0x55c23fbdd438 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55c23fbdd438
| | `-ParmVarDecl 0x55c23fbdd548 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55c23fbdd5e8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55c23fbdd5e8
| | `-ParmVarDecl 0x55c23fbdd6f8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55c23fbdf870 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55c23fbcc678 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55c23fbcc6d8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55c23fbcc740 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55c23fbcc7a8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55c23fbcc810 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55c23fbcc878 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55c23fbcc8d8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55c23fbcc938 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55c23fbcc9a0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55c23fbcca28 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55c23fbcc678 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55c23fbdcda0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55c23fbcc8d8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55c23fbdd7e0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55c23fbdd840 <col:21, line:755:5>
|-CXXConstructorDecl 0x55c23fbccbc8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55c23fbccb08 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55c23fbcccc0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55c23fbccea8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55c23fbccdb0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55c23fbcd178 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55c23fbccf60 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c23fbccfd8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55c23fbcd050 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c23fbcd398 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55c23fbcd248 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55c23fbcd2c0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55c23fbd5978 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55c23fbcd458 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55c23fbcd4d0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55c23fbcd548 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55c23fbd5ad0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55c23fbd5a40 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c23fbd5c18 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55c23fbd5b88 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55c23fbd5d10 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StringAccum
         0 |   struct StringAccum::rep_t r_
         0 |     unsigned char * s
         8 |     int len
        12 |     int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c23fccabb0 <../dummy_inc/click/straccum.hh:112:5, line:122:5> line:112:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c23fccacd8 <col:5, col:12> col:12 implicit referenced struct rep_t
|-FieldDecl 0x55c23fccad80 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
|-FieldDecl 0x55c23fccade8 <line:114:2, col:6> col:6 referenced len 'int'
|-FieldDecl 0x55c23fccae50 <line:115:2, col:6> col:6 referenced cap 'int'
|-CXXConstructorDecl 0x55c23fccaf00 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| |-CXXCtorInitializer Field 0x55c23fccad80 's' 'unsigned char *'
| | `-CXXReinterpretCastExpr 0x55c23fccbd80 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| |   `-CXXConstCastExpr 0x55c23fccbd38 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| |     `-CallExpr 0x55c23fccbd00 <col:63, col:82> 'const char *'
| |       `-ImplicitCastExpr 0x55c23fccbce8 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x55c23fccbc90 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x55c23f9e4990 'empty_data' 'const char *()'
| |-CXXCtorInitializer Field 0x55c23fccade8 'len' 'int'
| | `-IntegerLiteral 0x55c23fccbdf8 <line:118:12> 'int' 0
| |-CXXCtorInitializer Field 0x55c23fccae50 'cap' 'int'
| | `-IntegerLiteral 0x55c23fccbe60 <col:20> 'int' 0
| `-CompoundStmt 0x55c23fccbee0 <col:23, line:119:2>
|-CXXConstructorDecl 0x55c23fccb078 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| |-ParmVarDecl 0x55c23fccafb8 <col:17> col:35 'uninitialized_type'
| `-CompoundStmt 0x55c23fccbef0 <col:37, line:121:2>
|-CXXConstructorDecl 0x55c23fcce108 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55c23fcce218 <col:12> col:12 used 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55c23fccad80 's' 'unsigned char *'
| | `-ImplicitCastExpr 0x55c23fccfbd0 <col:12> 'unsigned char *' <LValueToRValue>
| |   `-MemberExpr 0x55c23fccfba0 <col:12> 'unsigned char *const' lvalue .s 0x55c23fccad80
| |     `-DeclRefExpr 0x55c23fccfb80 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55c23fcce218 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55c23fccade8 'len' 'int'
| | `-ImplicitCastExpr 0x55c23fccfc60 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55c23fccfc30 <col:12> 'const int' lvalue .len 0x55c23fccade8
| |     `-DeclRefExpr 0x55c23fccfc10 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55c23fcce218 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55c23fccae50 'cap' 'int'
| | `-ImplicitCastExpr 0x55c23fccfcf0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55c23fccfcc0 <col:12> 'const int' lvalue .cap 0x55c23fccae50
| |     `-DeclRefExpr 0x55c23fccfca0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55c23fcce218 '' 'const StringAccum::rep_t &'
| `-CompoundStmt 0x55c23fccfd48 <col:12>
|-CXXConstructorDecl 0x55c23fcce2b8 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x55c23fcce2b8
| `-ParmVarDecl 0x55c23fcce3c8 <col:12> col:12 'StringAccum::rep_t &&'
`-CXXDestructorDecl 0x55c23fcd0000 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  NonVirtualBaseLLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c23fcc6358 prev 0x55c23fc0e0f0 <../dummy_inc/click/straccum.hh:28:1, line:137:1> line:28:7 referenced class StringAccum definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55c23fcc6450 <col:1, col:7> col:7 implicit referenced class StringAccum
|-AccessSpecDecl 0x55c23fcc64e0 <col:21, col:27> col:21 public
|-TypedefDecl 0x55c23fcc6520 <line:30:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55c23f691dc0 'const char *'
|   `-QualType 0x55c23f691311 'const char' const
|     `-BuiltinType 0x55c23f691310 'char'
|-TypedefDecl 0x55c23fcc6590 <line:31:5, col:19> col:19 referenced iterator 'char *'
| `-PointerType 0x55c23f691f90 'char *'
|   `-BuiltinType 0x55c23f691310 'char'
|-TypedefDecl 0x55c23fcc66d0 <line:33:5, col:57> col:32 referenced unspecified_bool_type 'int (StringAccum::*)() const'
| `-MemberPointerType 0x55c23fcc6640 'int (StringAccum::*)() const'
|   |-RecordType 0x55c23f94f250 'StringAccum'
|   | `-CXXRecord 0x55c23fcc6358 'StringAccum'
|   `-ParenType 0x55c23f9be9a0 'int () const' sugar
|     `-FunctionProtoType 0x55c23f992530 'int () const' const cdecl
|       `-BuiltinType 0x55c23f691370 'int'
|-CXXConstructorDecl 0x55c23fcc6790 <line:35:5, col:24> col:12 used StringAccum 'void ()' inline
|-CXXConstructorDecl 0x55c23fcc68e0 <line:36:5, col:45> col:21 StringAccum 'void (int)' inline
| `-ParmVarDecl 0x55c23fcc6850 <col:33, col:37> col:37 capacity 'int'
|-CXXConstructorDecl 0x55c23fcc6a30 <line:37:5, col:41> col:12 StringAccum 'void (const String &)' inline
| `-ParmVarDecl 0x55c23fcc69a0 <col:24, col:38> col:38 str 'const String &'
|-CXXConstructorDecl 0x55c23fcc6bd8 <line:38:5, col:44> col:12 StringAccum 'void (const StringAccum &)' inline
| `-ParmVarDecl 0x55c23fcc6b18 <col:24, col:43> col:43 x 'const StringAccum &'
|-CXXConstructorDecl 0x55c23fcc6d88 <line:40:5, col:39> col:12 StringAccum 'void (StringAccum &&)' inline
| `-ParmVarDecl 0x55c23fcc6cc8 <col:24, col:38> col:38 x 'StringAccum &&'
|-CXXDestructorDecl 0x55c23fcc6e80 <line:42:5, col:25> col:12 used ~StringAccum 'void () noexcept' inline
|-CXXMethodDecl 0x55c23fcc7038 <line:44:5, col:55> col:25 operator= 'StringAccum &(const StringAccum &)' inline
| `-ParmVarDecl 0x55c23fcc6f70 <col:35, col:54> col:54 x 'const StringAccum &'
|-CXXMethodDecl 0x55c23fcc71b8 <line:46:5, col:50> col:25 operator= 'StringAccum &(StringAccum &&)' inline
| `-ParmVarDecl 0x55c23fcc70f0 <col:35, col:49> col:49 x 'StringAccum &&'
|-CXXMethodDecl 0x55c23fcc72b0 <line:49:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55c23fcc7378 <line:50:5, col:23> col:18 data 'char *()' inline
|-CXXMethodDecl 0x55c23fcc7440 <line:51:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55c23fcc7508 <line:52:5, col:27> col:16 used capacity 'int () const' inline
|-CXXMethodDecl 0x55c23fcc75d0 <line:54:5, col:23> col:17 c_str 'const char *()'
|-CXXConversionDecl 0x55c23fcc7738 <line:56:5, col:45> col:12 operator int (StringAccum::*)() const 'StringAccum::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55c23fcc7808 <line:57:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55c23fcc78c8 <line:58:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55c23fcc79d8 <line:60:5, col:35> col:27 used begin 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x55c23fcc7ae8 <line:61:5, col:27> col:21 begin 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x55c23fcc7ba8 <line:62:5, col:33> col:27 used end 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x55c23fcc7c68 <line:63:5, col:25> col:21 end 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x55c23fcc7db0 <line:65:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55c23fcc7d20 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55c23fcc7f40 <line:66:5, col:34> col:18 operator[] 'char &(int)' inline
| `-ParmVarDecl 0x55c23fcc7e70 <col:29, col:33> col:33 i 'int'
|-CXXMethodDecl 0x55c23fcc8008 <line:67:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55c23fcc8100 <line:68:5, col:24> col:18 front 'char &()' inline
|-CXXMethodDecl 0x55c23fcc81c0 <line:69:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55c23fcc8288 <line:70:5, col:23> col:18 back 'char &()' inline
|-CXXMethodDecl 0x55c23fcc8348 <line:72:5, col:33> col:17 used out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55c23fcc8408 <line:73:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55c23fcc84c8 <line:75:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x55c23fcc8618 <line:76:5, col:31> col:18 reserve 'char *(int)' inline
| `-ParmVarDecl 0x55c23fcc8580 <col:26, col:30> col:30 n 'int'
|-CXXMethodDecl 0x55c23fcc8768 <line:77:5, col:35> col:17 set_length 'void (int)' inline
| `-ParmVarDecl 0x55c23fcc86d8 <col:28, col:32> col:32 len 'int'
|-CXXMethodDecl 0x55c23fcc88c0 <line:78:5, col:23> col:9 resize 'int (int)'
| `-ParmVarDecl 0x55c23fcc8828 <col:16, col:20> col:20 len 'int'
|-CXXMethodDecl 0x55c23fcc8a10 <line:79:5, col:40> col:17 used adjust_length 'void (int)' inline
| `-ParmVarDecl 0x55c23fcc8980 <col:31, col:35> col:35 delta 'int'
|-CXXMethodDecl 0x55c23fcc8c30 <line:80:5, col:54> col:18 extend 'char *(int, int)' inline
| |-ParmVarDecl 0x55c23fcc8ad0 <col:25, col:29> col:29 nadjust 'int'
| `-ParmVarDecl 0x55c23fcc8b50 <col:38, col:53> col:42 nreserve 'int' cinit
|   `-IntegerLiteral 0x55c23fccbbb8 <col:53> 'int' 0
|-CXXMethodDecl 0x55c23fcc8d88 <line:82:5, col:35> col:17 pop_back 'void (int)' inline
| `-ParmVarDecl 0x55c23fcc8cf8 <col:26, col:34> col:30 n 'int' cinit
|   `-IntegerLiteral 0x55c23fccbbd8 <col:34> 'int' 1
|-CXXMethodDecl 0x55c23fcc8ed0 <line:84:5, col:30> col:17 used append 'void (char)' inline
| `-ParmVarDecl 0x55c23fcc8e40 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55c23fcc9020 <line:85:5, col:39> col:17 used append 'void (unsigned char)' inline
| `-ParmVarDecl 0x55c23fcc8f90 <col:24, col:38> col:38 c 'unsigned char'
|-CXXMethodDecl 0x55c23fcc9170 <line:86:5, col:35> col:17 append_utf8 'bool (int)' inline
| `-ParmVarDecl 0x55c23fcc90e0 <col:29, col:33> col:33 ch 'int'
|-CXXMethodDecl 0x55c23fcc92c0 <line:87:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55c23fcc9230 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55c23fcc9498 <line:88:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55c23fcc9380 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55c23fcc9400 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55c23fcc9678 <line:89:5, col:55> col:17 used append 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55c23fcc9560 <col:24, col:45> col:45 s 'const unsigned char *'
| `-ParmVarDecl 0x55c23fcc95e0 <col:48, col:52> col:52 len 'int'
|-CXXMethodDecl 0x55c23fcc9858 <line:90:5, col:59> col:17 used append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55c23fcc9740 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55c23fcc97c0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55c23fcc9a38 <line:91:5, col:77> col:17 append 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55c23fcc9920 <col:24, col:45> col:45 first 'const unsigned char *'
| `-ParmVarDecl 0x55c23fcc99a0 <col:52, col:73> col:73 last 'const unsigned char *'
|-CXXMethodDecl 0x55c23fcc9c18 <line:92:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55c23fcc9b00 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55c23fcc9b80 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55c23fcc9f78 <line:93:5, col:81> col:10 used append_numeric 'void (String::intmax_t, int, bool)'
| |-ParmVarDecl 0x55c23fcc9d60 <col:25, col:42> col:42 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55c23fcc9de0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55c23fccbbf8 <col:56> 'int' 10
| `-ParmVarDecl 0x55c23fcc9e58 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c23fccbc18 <col:77> 'bool' true
|-CXXMethodDecl 0x55c23fcca2d8 <line:94:5, col:82> col:10 used append_numeric 'void (String::uintmax_t, int, bool)'
| |-ParmVarDecl 0x55c23fcca0c0 <col:25, col:43> col:43 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55c23fcca140 <col:46, col:57> col:50 base 'int' cinit
| | `-IntegerLiteral 0x55c23fccbc28 <col:57> 'int' 10
| `-ParmVarDecl 0x55c23fcca1b8 <col:61, col:78> col:66 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c23fccbc48 <col:78> 'bool' true
|-CXXMethodDecl 0x55c23fcca500 <line:96:5, col:57> col:18 snprintf 'StringAccum &(int, const char *, ...)'
| |-ParmVarDecl 0x55c23fcca3a8 <col:27, col:31> col:31 n 'int'
| `-ParmVarDecl 0x55c23fcca428 <col:34, col:46> col:46 format 'const char *'
|-CXXMethodDecl 0x55c23fcca5f8 <line:98:5, col:24> col:12 used take_string 'String ()'
|-CXXMethodDecl 0x55c23fcca768 <line:100:5, col:29> col:10 used swap 'void (StringAccum &)'
| `-ParmVarDecl 0x55c23fcca6a8 <col:15, col:28> col:28 x 'StringAccum &'
|-CXXMethodDecl 0x55c23fcca8b8 <line:104:5, col:62> col:17 forward 'void (int)' inline
| |-ParmVarDecl 0x55c23fcca828 <col:25, col:29> col:29 delta 'int'
| `-DeprecatedAttr 0x55c23fcca960 <col:51> "" ""
|-AccessSpecDecl 0x55c23fcca9d0 <line:106:3, col:10> col:3 private
|-EnumDecl 0x55c23fcca9f8 <line:108:5, line:110:5> line:108:5
| `-EnumConstantDecl 0x55c23fccab48 <line:109:2, col:23> col:2 referenced MEMO_SPACE 'StringAccum::(anonymous enum at ../dummy_inc/click/straccum.hh:108:5)'
|   `-ImplicitCastExpr 0x55c23fccab98 <col:15, col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c23fccab28 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' Int: 12
|       `-DeclRefExpr 0x55c23fccaaf8 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' EnumConstant 0x55c23f9c7708 'MEMO_SPACE' 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|-CXXRecordDecl 0x55c23fccabb0 <line:112:5, line:122:5> line:112:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55c23fccacd8 <col:5, col:12> col:12 implicit referenced struct rep_t
| |-FieldDecl 0x55c23fccad80 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
| |-FieldDecl 0x55c23fccade8 <line:114:2, col:6> col:6 referenced len 'int'
| |-FieldDecl 0x55c23fccae50 <line:115:2, col:6> col:6 referenced cap 'int'
| |-CXXConstructorDecl 0x55c23fccaf00 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| | |-CXXCtorInitializer Field 0x55c23fccad80 's' 'unsigned char *'
| | | `-CXXReinterpretCastExpr 0x55c23fccbd80 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| | |   `-CXXConstCastExpr 0x55c23fccbd38 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| | |     `-CallExpr 0x55c23fccbd00 <col:63, col:82> 'const char *'
| | |       `-ImplicitCastExpr 0x55c23fccbce8 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| | |         `-DeclRefExpr 0x55c23fccbc90 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x55c23f9e4990 'empty_data' 'const char *()'
| | |-CXXCtorInitializer Field 0x55c23fccade8 'len' 'int'
| | | `-IntegerLiteral 0x55c23fccbdf8 <line:118:12> 'int' 0
| | |-CXXCtorInitializer Field 0x55c23fccae50 'cap' 'int'
| | | `-IntegerLiteral 0x55c23fccbe60 <col:20> 'int' 0
| | `-CompoundStmt 0x55c23fccbee0 <col:23, line:119:2>
| |-CXXConstructorDecl 0x55c23fccb078 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| | |-ParmVarDecl 0x55c23fccafb8 <col:17> col:35 'uninitialized_type'
| | `-CompoundStmt 0x55c23fccbef0 <col:37, line:121:2>
| |-CXXConstructorDecl 0x55c23fcce108 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55c23fcce218 <col:12> col:12 used 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55c23fccad80 's' 'unsigned char *'
| | | `-ImplicitCastExpr 0x55c23fccfbd0 <col:12> 'unsigned char *' <LValueToRValue>
| | |   `-MemberExpr 0x55c23fccfba0 <col:12> 'unsigned char *const' lvalue .s 0x55c23fccad80
| | |     `-DeclRefExpr 0x55c23fccfb80 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55c23fcce218 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55c23fccade8 'len' 'int'
| | | `-ImplicitCastExpr 0x55c23fccfc60 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55c23fccfc30 <col:12> 'const int' lvalue .len 0x55c23fccade8
| | |     `-DeclRefExpr 0x55c23fccfc10 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55c23fcce218 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55c23fccae50 'cap' 'int'
| | | `-ImplicitCastExpr 0x55c23fccfcf0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55c23fccfcc0 <col:12> 'const int' lvalue .cap 0x55c23fccae50
| | |     `-DeclRefExpr 0x55c23fccfca0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55c23fcce218 '' 'const StringAccum::rep_t &'
| | `-CompoundStmt 0x55c23fccfd48 <col:12>
| |-CXXConstructorDecl 0x55c23fcce2b8 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x55c23fcce2b8
| | `-ParmVarDecl 0x55c23fcce3c8 <col:12> col:12 'StringAccum::rep_t &&'
| `-CXXDestructorDecl 0x55c23fcd0000 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-FieldDecl 0x55c23fccb150 <line:124:5, col:11> col:11 referenced r_ 'StringAccum::rep_t'
|-CXXMethodDecl 0x55c23fccb250 <line:126:5, col:19> col:11 used grow 'char *(int)'
| `-ParmVarDecl 0x55c23fccb1b8 <col:16> col:19 'int'
|-CXXMethodDecl 0x55c23fccb430 <line:127:5, col:48> col:11 used hard_extend 'char *(int, int)'
| |-ParmVarDecl 0x55c23fccb310 <col:23, col:27> col:27 nadjust 'int'
| `-ParmVarDecl 0x55c23fccb390 <col:36, col:40> col:40 nreserve 'int'
|-CXXMethodDecl 0x55c23fccb610 <line:128:5, col:44> col:10 used hard_append 'void (const char *, int)'
| |-ParmVarDecl 0x55c23fccb4f8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55c23fccb578 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55c23fccb768 <line:129:5, col:43> col:10 used hard_append_cstr 'void (const char *)'
| `-ParmVarDecl 0x55c23fccb6d8 <col:27, col:39> col:39 cstr 'const char *'
|-CXXMethodDecl 0x55c23fccb8b8 <line:130:5, col:33> col:10 used append_utf8_hard 'bool (int)'
| `-ParmVarDecl 0x55c23fccb828 <col:27, col:31> col:31 ch 'int'
`-FriendDecl 0x55c23fccbb78 <line:132:5, col:70> col:25
  `-FunctionDecl 0x55c23fccbab8 parent 0x55c23f691278 <col:5, col:70> col:25 used operator<< 'StringAccum &(StringAccum &, const String &)'
    |-ParmVarDecl 0x55c23fccb970 <col:36, col:49> col:49 sa 'StringAccum &'
    `-ParmVarDecl 0x55c23fccb9e8 <col:53, col:67> col:67 str 'const String &'

Layout: <CGRecordLayout
  LLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  NonVirtualBaseLLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c23fcbe840 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c23fcbe958 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x55c23fcbe9e8 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x55c23fcbec28 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x55c23fcbea20 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55c23fcbeaa0 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x55c23fcbeb18 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55c23fcbee40 <col:81> 'const ArgContext' lvalue Var 0x55c23fca5898 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55c23fcbed80 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x55c23fcbecf0 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x55c23fcbef98 <col:35, line:1261:5>
|   `-ReturnStmt 0x55c23fcbef88 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x55c23fcbef70 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x55c23fcbef40 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55c23fcbef28 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x55c23fcbef00 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x55c23fcbeee0 <col:16, col:24> 'String' (CXXTemporary 0x55c23fcbeee0)
|               `-CXXConstructExpr 0x55c23fcbeea8 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x55c23fcbee90 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x55c23fcbee70 <col:23> 'bool' lvalue ParmVar 0x55c23fcbecf0 'x' 'bool'
|-CXXConstructorDecl 0x55c23fbab5f8 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55c23fbab6d0 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55c23fbab808 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x55c23fbab808
| `-ParmVarDecl 0x55c23fbab918 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x55c23fbab9b8 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55c23fbabac8 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x55c23fbac720 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c23fcbefd8 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x55c23fcbf238 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55c23fbab508 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55c23fbabb38 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x55c23fbabb38
| `-ParmVarDecl 0x55c23fbabc48 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x55c23fbabce8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55c23fbabdf8 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x55c23fbac730 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55c23fbac700 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x55c23fbac6d0 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x55c23fbac6a0 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x55c23fbabdf8 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x55c23fbac7a0 <col:19>
`-CXXDestructorDecl 0x55c23fbabe98 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
