
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c5438fa128 prev 0x55c5438f18c8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c5438fa220 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55c5438fa2b0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55c5438fa328 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55c5438fa3e8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55c5438fa4b0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55c5438fa628 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55c5438fa560 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55c5438fa6d0 <col:24>
| `-OptimizeNoneAttr 0x55c5438fa728 <col:34>
|-CXXMethodDecl 0x55c5438fa770 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55c5438faa28 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55c5438fa820 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55c5438fa898 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55c5438fa918 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55c5438faae0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55c5438fab18 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55c5438fab80 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55c5438fac08 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55c5438faf28 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55c5438facc0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55c5438fad38 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55c5438fadb0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55c5438fae30 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55c5438fb040 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55c5439029b8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55c5439029b8
| `-ParmVarDecl 0x55c543902ac8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55c543902b68 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55c543902b68
| `-ParmVarDecl 0x55c543902c78 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55c5439e8678 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c5438ed140 prev 0x55c5438ecec0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55c5438ed238 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55c5438ed2c8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55c5438ed328 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55c5438ed418 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55c5438ed518 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55c5438ed6e8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55c5438ed598 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55c5438ed610 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55c5438ed878 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55c5438ed7b0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55c5438ed920 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55c5438eda58 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55c5438ed990 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55c5438edbf8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55c5438edb38 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55c5438edd98 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55c5438edcd8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55c5438ede40 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55c5438edf40 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55c5438ee020 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438edf20 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55c5438edf00 <col:26> 'int' 1
| `-EnumConstantDecl 0x55c5438edfd0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55c5438ee038 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c5438edfb0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55c5438edf90 <col:44> 'int' 2
|-CXXMethodDecl 0x55c5438ee180 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55c5438ee068 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55c5438ee0e8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55c5438ee2d8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55c5438ee248 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55c5438ee518 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55c5438ee398 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55c5438ee410 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55c5438ee5c8 <col:20>
| `-OptimizeNoneAttr 0x55c5438ee620 <col:30>
|-CXXMethodDecl 0x55c5438ee728 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55c5438ee660 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55c5438ee7d0 <col:20>
| `-OptimizeNoneAttr 0x55c5438ee828 <col:30>
|-CXXMethodDecl 0x55c5438ee878 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55c5438ee940 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55c5438eea58 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55c5438eeae0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55c5438eeb68 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55c5438eebf0 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55c5438eec78 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55c5438eed08 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55c5438eedc8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55c5438eee50 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55c5438eeed8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55c5438eef60 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55c5438eefe8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55c5438ef070 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55c5438ef100 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55c5438ef1c0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55c5438ef250 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55c5438ef3a0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55c5438ef308 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55c5438ef530 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55c5438ef460 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55c5438ef7e0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55c5438ef5e8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55c5438ef668 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55c5438ef6e8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55c5438ef898 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55c5438ef9a0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55c5438efc30 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438ef980 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55c5438ef960 <col:33> 'int' 0
| |-EnumConstantDecl 0x55c5438efa30 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55c5438efc48 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438efa10 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55c5438ef9f0 <col:32> 'int' 20
| |-EnumConstantDecl 0x55c5438efac0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55c5438efc60 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438efaa0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55c5438efa80 <col:38> 'int' 90
| |-EnumConstantDecl 0x55c5438efb50 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55c5438efc78 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438efb30 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55c5438efb10 <col:35> 'int' 100
| `-EnumConstantDecl 0x55c5438efbe0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55c5438efc90 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c5438efbc0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55c5438efba0 <col:32> 'int' 2000
|-CXXMethodDecl 0x55c5438efcd0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55c5438f0110 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55c5438eff80 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55c5438efff8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c5438f01e0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55c5438f0360 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55c5438f0290 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c5438f0568 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55c5438f0418 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55c5438f0490 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c5438f0668 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55c5438f0708 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55c5438f07d0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c5438f0860 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55c5438f0a90 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438f0840 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55c5438f0820 <col:36> 'int' EnumConstant 0x55c5438f07d0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c5438f08b0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c5438f0900 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c5438f0950 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c5438f09a0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c5438f09f0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55c5438f0a40 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55c5438f0b78 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55c5438f0ab8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55c5438f0c40 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55c5438f0d00 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55c5438f0dc0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55c5438f0e80 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55c5438f0f98 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55c5438f1060 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55c5438f11e0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55c5438f1110 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55c5438f1308 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55c5438f1508 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55c5438f13b8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55c5438f1438 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55c5438fee58 <col:54, line:127:5>
|   |-ParenExpr 0x55c5438fed08 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55c5438fecd8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55c5438fe9c8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55c5438fe9a0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55c5438fe988 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55c5438fe970 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55c5438fe940 <col:31> 'Router *' lvalue ->_router 0x55c5438fc820
|   |   |         `-CXXThisExpr 0x55c5438fe930 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55c5438fea28 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c5438fea08 <col:48> 'int' 0
|   |   `-CallExpr 0x55c5438fec38 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55c5438fec20 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c5438fec00 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c543427810 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c5438fec78 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438fea98 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55c5438fec90 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438feab8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55c5438feca8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c5438feaf0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55c5438fecc0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c5438febe8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c5438febd0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c5438feb88 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55c5438feda0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55c5438fed38 <col:9> 'Router *' lvalue ->_router 0x55c5438fc820
|   | | `-CXXThisExpr 0x55c5438fed28 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55c5438fed88 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c5438fed68 <col:19> 'Router *' lvalue ParmVar 0x55c5438f13b8 'r' 'Router *'
|   `-BinaryOperator 0x55c5438fee38 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55c5438fedd0 <col:9> 'int' lvalue ->_eindex 0x55c5438fc888
|     | `-CXXThisExpr 0x55c5438fedc0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55c5438fee20 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55c5438fee00 <col:19> 'int' lvalue ParmVar 0x55c5438f1438 'eindex' 'int'
|-CXXMethodDecl 0x55c5438f1690 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55c5438f15c8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55c5438f1760 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55c5438f1828 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55c5438f18c8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55c5438f1b18 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55c5438f1990 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55c5438f1a10 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55c5438f1bc8 <col:20>
| `-OptimizeNoneAttr 0x55c5438f1c20 <col:30>
|-CXXMethodDecl 0x55c5438f1d28 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55c5438f1c60 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55c5438f1dd0 <col:20>
| `-OptimizeNoneAttr 0x55c5438f1e28 <col:30>
|-CXXMethodDecl 0x55c5438f1ef8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55c5438f1e68 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55c5438f1fa0 <col:20>
| `-OptimizeNoneAttr 0x55c5438f1ff8 <col:30>
|-CXXMethodDecl 0x55c5438f2188 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55c5438f2030 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55c5438f20b0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55c5438f2318 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55c5438f2250 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55c5438f2468 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55c5438f23d8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55c5438f25b8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55c5438f2528 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55c5438f2708 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55c5438f2678 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55c5438f29c8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55c5438f27c0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55c5438f2840 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55c5438f28e8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55c5438f2aa0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55c5438f2b60 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55c5438f2e30 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55c5438f2ce0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55c5438f2d58 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55c5438f2f58 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55c5438f3130 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55c5438f3010 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55c5438f3090 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55c5438f3318 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55c5438f31f8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55c5438f3278 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55c5438f3688 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55c5438f33d8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55c5438f3450 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55c5438f34d0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55c5438fe440 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55c5438fe420 <col:106> 'int' 0
| `-ParmVarDecl 0x55c5438f3548 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c5438fe478 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c5438fe458 <col:126> 'int' 0
|-CXXMethodDecl 0x55c5438f3a28 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55c5438f3758 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55c5438f37f0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55c5438f3870 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55c5438f38e8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c5438fe4b0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c5438fe490 <col:114> 'int' 0
|-CXXMethodDecl 0x55c5438f3db8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55c5438f3b00 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55c5438f3b78 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55c5438f3bf8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55c5438fe4c8 <col:96> 'int' 0
| `-ParmVarDecl 0x55c5438f3c70 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c5438fe508 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c5438fe4e8 <col:116> 'int' 0
|-CXXMethodDecl 0x55c5438f4138 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55c5438f3e88 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55c5438f3f00 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55c5438f3f80 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55c5438fe540 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55c5438fe520 <col:109> 'int' 0
| `-ParmVarDecl 0x55c5438f3ff8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c5438fe578 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c5438fe558 <col:129> 'int' 0
|-CXXMethodDecl 0x55c5438f44b8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55c5438f4208 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55c5438f4280 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55c5438f4300 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55c5438f4378 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c5438fe5b0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c5438fe590 <col:117> 'int' 0
|-CXXMethodDecl 0x55c5438f4848 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55c5438f4590 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c5438f4608 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55c5438f4688 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55c5438fe5c8 <col:99> 'int' 0
| `-ParmVarDecl 0x55c5438f4700 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c5438fe608 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c5438fe5e8 <col:119> 'int' 0
|-CXXMethodDecl 0x55c5438f4c68 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55c5438f4918 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55c5438f4998 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55c5438f4a10 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55c5438f4a90 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55c5438fe640 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55c5438fe620 <col:108> 'int' 0
| `-ParmVarDecl 0x55c5438f4b10 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55c5438fe678 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55c5438fe658 <col:141> 'int' 0
|-CXXMethodDecl 0x55c5438f5088 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55c5438f4d40 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55c5438f4dc0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55c5438f4e38 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55c5438f4eb8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55c5438f4f38 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55c5438fe690 <col:121> 'int' 0
|-CXXMethodDecl 0x55c5438f54b8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55c5438f5168 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55c5438f51e8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55c5438f5260 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55c5438f52e0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55c5438fe6b0 <col:98> 'int' 0
| `-ParmVarDecl 0x55c5438f5360 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55c5438fe6d0 <col:123> 'int' 0
|-CXXMethodDecl 0x55c5438f5780 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55c5438f5590 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55c5438f5610 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55c5438f5690 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55c5438fe6f0 <col:80> 'int' 0
|-EnumDecl 0x55c5438f5838 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55c5438f5940 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55c5438f5bd0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438f5920 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55c5438f5900 <col:42> 'int' 1
| |-EnumConstantDecl 0x55c5438f59d0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55c5438f5be8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438f59b0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55c5438f5990 <col:40> 'int' 2
| |-EnumConstantDecl 0x55c5438f5a60 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55c5438f5c00 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438f5a40 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55c5438f5a20 <col:44> 'int' 4
| |-EnumConstantDecl 0x55c5438f5af0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55c5438f5c18 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438f5ad0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55c5438f5ab0 <col:36> 'int' 7
| `-EnumConstantDecl 0x55c5438f5b80 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55c5438f5c30 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c5438f5b60 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55c5438f5b40 <col:34> 'int' 6
|-CXXMethodDecl 0x55c5438f5ee8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55c5438f5c58 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55c5438f5cf8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55c5438f5d78 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55c5438f5df0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55c5438fe7a8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55c5438fe790 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55c5438fe778 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55c5438fe758 <col:98, col:105> 'String' (CXXTemporary 0x55c5438fe758)
|           `-CXXTemporaryObjectExpr 0x55c5438fe720 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55c5438f6188 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55c5438f5fb8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55c5438f6030 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55c5438f60a8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55c5438fe858 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55c5438fe840 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55c5438fe828 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55c5438fe808 <col:94, col:101> 'String' (CXXTemporary 0x55c5438fe808)
| |         `-CXXTemporaryObjectExpr 0x55c5438fe7d0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55c5438ff040 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55c5438fefb8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55c5438fef88 <col:9> '<bound member function type>' ->add_task_handlers 0x55c5438f5ee8
|     | `-CXXThisExpr 0x55c5438fef78 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55c5438feff8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55c5438feef8 <col:27> 'Task *' lvalue ParmVar 0x55c5438f5fb8 'task' 'Task *'
|     |-ImplicitCastExpr 0x55c5438ff010 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55c5438fef18 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55c5438f6030 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55c5438ff028 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55c5438fef38 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55c5438f5b80 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55c5438fef58 <col:62> 'const String' lvalue ParmVar 0x55c5438f60a8 'prefix' 'const String &'
|-CXXMethodDecl 0x55c5438f6398 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55c5438f6250 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55c5438f62c8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55c5438fe908 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55c5438fe8f0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55c5438fe8d8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55c5438fe8b8 <col:70, col:77> 'String' (CXXTemporary 0x55c5438fe8b8)
| |         `-CXXTemporaryObjectExpr 0x55c5438fe880 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55c5438ff218 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55c5438ff190 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55c5438ff160 <col:9> '<bound member function type>' ->add_task_handlers 0x55c5438f5ee8
|     | `-CXXThisExpr 0x55c5438ff150 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55c5438ff1d0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55c5438ff0d0 <col:27> 'Task *' lvalue ParmVar 0x55c5438f6250 'task' 'Task *'
|     |-ImplicitCastExpr 0x55c5438ff1e8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55c5438ff0f0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55c5438ff200 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55c5438ff110 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55c5438f5b80 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55c5438ff130 <col:57> 'const String' lvalue ParmVar 0x55c5438f62c8 'prefix' 'const String &'
|-CXXMethodDecl 0x55c5438f6678 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55c5438f6460 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c5438f64e0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c5438f6558 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55c5438f6928 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55c5438f6748 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c5438f67c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c5438f6848 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55c5438f6c18 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55c5438f69f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c5438f6a78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c5438f6af0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55c5438f6ec8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55c5438f6ce8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c5438f6d68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c5438f6de8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55c5438f7178 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55c5438f6f98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c5438f7018 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c5438f7098 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55c5438f7428 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55c5438f7248 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c5438f72c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c5438f7340 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55c5438f76d8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55c5438f74f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c5438f7578 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c5438f75f8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55c5438f79e8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55c5438f7800 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c5438f7880 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c5438f7900 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55c5438f7cc8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55c5438f7ab8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c5438f7b38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c5438f7be0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55c5438f7fa8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55c5438f7d98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c5438f7e18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c5438f7ec0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55c5438f8210 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55c5438f8078 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55c5438f80f8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55c5438f8170 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55c5438f84b8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55c5438f82e0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55c5438f8360 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55c5438f83d8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55c5438f8768 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55c5438f8588 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c5438f8608 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c5438f8688 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55c5438f8a18 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55c5438f8838 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c5438f88b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c5438f8930 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55c5438f8cc8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55c5438f8ae8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c5438f8b68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c5438f8be0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55c5438f8f98 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55c5438f8d98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c5438f8e18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c5438f8eb8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55c5438f92c8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55c5438f9068 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c5438f90e8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55c5438f9160 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55c5438f91d8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c5438fe920 <col:93> 'bool' false
|-CXXMethodDecl 0x55c5438f94b0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55c5438f9398 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55c5438f9418 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55c5438f9688 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55c5438f9570 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55c5438f95f0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55c5438f9968 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55c5438f9748 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55c5438f97c0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55c5438f9840 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55c5438f98b8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55c5438f9c58 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55c5438f9a38 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55c5438f9ab0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55c5438f9b30 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55c5438f9ba8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55c5438f9e90 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55c5438f9d30 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55c5438f9db0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55c5438fa078 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55c5438f9f58 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55c5438f9fd8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55c5438fa128 prev 0x55c5438f18c8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55c5438fa220 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55c5438fa2b0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55c5438fa328 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55c5438fa3e8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55c5438fa4b0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55c5438fa628 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55c5438fa560 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55c5438fa6d0 <col:24>
| | `-OptimizeNoneAttr 0x55c5438fa728 <col:34>
| |-CXXMethodDecl 0x55c5438fa770 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55c5438faa28 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55c5438fa820 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55c5438fa898 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55c5438fa918 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55c5438faae0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55c5438fab18 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55c5438fab80 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55c5438fac08 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55c5438faf28 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55c5438facc0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55c5438fad38 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55c5438fadb0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55c5438fae30 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55c5438fb040 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55c5439029b8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55c5439029b8
| | `-ParmVarDecl 0x55c543902ac8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55c543902b68 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55c543902b68
| | `-ParmVarDecl 0x55c543902c78 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55c5439e8678 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55c5438fb0b8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55c5438fb158 <col:38> "" ""
|-CXXMethodDecl 0x55c5438fb1e8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55c5438fb288 <col:44> "" ""
|-AccessSpecDecl 0x55c5438fb2f8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55c5438fb320 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55c5438fb420 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55c5438fb470 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c5438fb400 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55c5438fb3e0 <col:27> 'int' 4
|-FieldDecl 0x55c5438fb528 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55c5438fb6d8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55c5438fb790 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55c5438fc820 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55c5438fc888 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55c5438fc9d8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55c5438fc918 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55c5438fcb88 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55c5438fca98 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55c5438fcd68 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55c5438fcc48 <col:20> col:23 'int'
| `-ParmVarDecl 0x55c5438fccc8 <col:25> col:28 'int'
|-CXXMethodDecl 0x55c5438fd010 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55c5438fce30 <col:23> col:26 'int'
| |-ParmVarDecl 0x55c5438fceb0 <col:28> col:31 'int'
| `-ParmVarDecl 0x55c5438fcf28 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55c5438fd0c8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55c5438fd190 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55c5438fd1e0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55c5438fd230 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55c5438fd410 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55c5438fd2c0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55c5438fd338 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c5438fd6b8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55c5438fd4d8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55c5438fd558 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55c5438fd5d0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55c5438fd8d8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55c5438fd788 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55c5438fd808 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55c5438fdc10 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55c5438fd998 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55c5438fda18 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55c5438fda90 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55c5438fdb10 <col:57> col:60 'int'
|-CXXMethodDecl 0x55c5438fddf8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55c5438fdce0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55c5438fdd60 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55c5438fdf48 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55c5438fdeb8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55c5438fe2c8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55c5438fe008 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55c5438fe088 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55c5438fe100 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55c5438fe180 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55c5438fe3e0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class SetAnnoByte
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _offset
       112 |   unsigned char _value
           | [sizeof=120, dsize=113, align=8,
           |  nvsize=113, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c543905b28 <../elements/standard/setannobyte.hh:28:1, line:46:1> line:28:7 class SetAnnoByte definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55c543905c88 <col:1, col:7> col:7 implicit referenced class SetAnnoByte
|-AccessSpecDecl 0x55c543905d18 <col:38, col:44> col:38 public
|-CXXConstructorDecl 0x55c543905da0 <line:30:5, col:17> col:5 SetAnnoByte 'void ()'
|-CXXMethodDecl 0x55c543905ea0 <line:32:5, col:60> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x55c5438ee878 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55c543906e80 <col:36, col:60>
|   `-ReturnStmt 0x55c543906e70 <col:38, col:45>
|     `-ImplicitCastExpr 0x55c543906e58 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55c543906e30 <col:45> 'const char [12]' lvalue "SetAnnoByte"
|-CXXMethodDecl 0x55c543905f68 <line:33:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x55c5438ee940 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55c543906ee0 <col:36, col:56>
|   `-ReturnStmt 0x55c543906ed0 <col:38, col:45>
|     `-ImplicitCastExpr 0x55c543906eb8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55c543906e98 <col:45> 'const char []' lvalue Var 0x55c5438eebf0 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55c543906240 <line:35:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55c5438f0110 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55c5439060f0 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x55c543906168 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x55c543906310 <line:36:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x55c5438f2b60 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x55c543906f18 <col:39, col:54>
|   `-ReturnStmt 0x55c543906f08 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x55c543906ef8 <col:48> 'bool' true
|-CXXMethodDecl 0x55c5439063d0 <line:37:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x55c5438f01e0 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x55c543906510 <line:39:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55c5438eda58 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55c543906480 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x55c5439065b8 <line:41:3, col:10> col:3 private
|-FieldDecl 0x55c5439065f8 <line:43:5, col:9> col:9 _offset 'int'
|-FieldDecl 0x55c543906660 <line:44:5, col:19> col:19 _value 'unsigned char'
|-CXXConstructorDecl 0x55c5439066d8 <line:28:7> col:7 implicit SetAnnoByte 'void (const SetAnnoByte &)' inline default_delete noexcept-unevaluated 0x55c5439066d8
| `-ParmVarDecl 0x55c5439067e8 <col:7> col:7 'const SetAnnoByte &'
|-CXXConstructorDecl 0x55c543906888 <col:7> col:7 implicit SetAnnoByte 'void (SetAnnoByte &&)' inline default_delete noexcept-unevaluated 0x55c543906888
| `-ParmVarDecl 0x55c543906998 <col:7> col:7 'SetAnnoByte &&'
|-CXXMethodDecl 0x55c543906a38 <col:7> col:7 implicit operator= 'SetAnnoByte &(const SetAnnoByte &)' inline default_delete noexcept-unevaluated 0x55c543906a38
| `-ParmVarDecl 0x55c543906b48 <col:7> col:7 'const SetAnnoByte &'
|-CXXMethodDecl 0x55c543906bb8 <col:7> col:7 implicit operator= 'SetAnnoByte &(SetAnnoByte &&)' inline default_delete noexcept-unevaluated 0x55c543906bb8
| `-ParmVarDecl 0x55c543906cc8 <col:7> col:7 'SetAnnoByte &&'
`-CXXDestructorDecl 0x55c543906d50 <col:7> col:7 implicit ~SetAnnoByte 'void ()' inline default noexcept-unevaluated 0x55c543906d50
  `-Overrides: [ 0x55c5438ed418 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.SetAnnoByte = type <{ %class.Element.base, i32, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.SetAnnoByte.base = type <{ %class.Element.base, i32, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c5436c0fe0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55c5436c10f8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55c5436c1198 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55c5436c11f8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55c5436c1258 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55c5436c1308 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c5436c1610 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c5436c1728 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55c5436c17d0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55c5436c1838 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55c5436c18c8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55c5436c7960 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55c5436c7d98 <col:12>
|-CXXConstructorDecl 0x55c5436c7a68 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55c5436c7b78 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55c5436c17d0 'data' 'const char *'
| | `-ImplicitCastExpr 0x55c5436ca320 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55c5436ca2f0 <col:12> 'const char *const' lvalue .data 0x55c5436c17d0
| |     `-DeclRefExpr 0x55c5436ca2d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c5436c7b78 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55c5436c1838 'length' 'int'
| | `-ImplicitCastExpr 0x55c5436ca3b0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55c5436ca380 <col:12> 'const int' lvalue .length 0x55c5436c1838
| |     `-DeclRefExpr 0x55c5436ca360 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c5436c7b78 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55c5436c18c8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55c5436ca440 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55c5436ca410 <col:12> 'String::memo_t *const' lvalue .memo 0x55c5436c18c8
| |     `-DeclRefExpr 0x55c5436ca3f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c5436c7b78 '' 'const String::rep_t &'
| `-CompoundStmt 0x55c5436ca498 <col:12>
|-CXXConstructorDecl 0x55c5436c7c18 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55c5436c7c18
| `-ParmVarDecl 0x55c5436c7d28 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55c5436cd280 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55c5436d8c98 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55c5436d8da8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55c5436d92c0 <col:12>
|   |-BinaryOperator 0x55c5436d90d8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55c5436d9090 <col:12> 'const char *' lvalue ->data 0x55c5436c17d0
|   | | `-CXXThisExpr 0x55c5436d9080 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55c5436d90c0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55c5436d9050 <col:12> 'const char *const' lvalue .data 0x55c5436c17d0
|   |     `-DeclRefExpr 0x55c5436d9030 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c5436d8da8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55c5436d91a0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55c5436d9158 <col:12> 'int' lvalue ->length 0x55c5436c1838
|   | | `-CXXThisExpr 0x55c5436d9148 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55c5436d9188 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55c5436d9118 <col:12> 'const int' lvalue .length 0x55c5436c1838
|   |     `-DeclRefExpr 0x55c5436d90f8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c5436d8da8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55c5436d9268 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55c5436d9220 <col:12> 'String::memo_t *' lvalue ->memo 0x55c5436c18c8
|   | | `-CXXThisExpr 0x55c5436d9210 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55c5436d9250 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55c5436d91e0 <col:12> 'String::memo_t *const' lvalue .memo 0x55c5436c18c8
|   |     `-DeclRefExpr 0x55c5436d91c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c5436d8da8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55c5436d92b0 <col:12>
|     `-UnaryOperator 0x55c5436d9298 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c5436d9288 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55c5436d8e18 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55c5436d8e18
  `-ParmVarDecl 0x55c5436d8f28 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c5436b8550 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55c5436b8668 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55c5436b86f8 <col:16, col:22> col:16 public
|-TypedefDecl 0x55c5436b8738 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55c54338bdc0 'const char *'
|   `-QualType 0x55c54338b311 'const char' const
|     `-BuiltinType 0x55c54338b310 'char'
|-TypedefDecl 0x55c5436b87c0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55c5436b8790 'String::const_iterator' sugar
|   |-Typedef 0x55c5436b8738 'const_iterator'
|   `-PointerType 0x55c54338bdc0 'const char *'
|     `-QualType 0x55c54338b311 'const char' const
|       `-BuiltinType 0x55c54338b310 'char'
|-TypedefDecl 0x55c5436b8930 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55c5436b88a0 'int (String::*)() const'
|   |-RecordType 0x55c5436b85e0 'String'
|   | `-CXXRecord 0x55c5436b8550 'String'
|   `-ParenType 0x55c5436b8840 'int () const' sugar
|     `-FunctionProtoType 0x55c54368c3d0 'int () const' const cdecl
|       `-BuiltinType 0x55c54338b370 'int'
|-TypedefDecl 0x55c5436b8998 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55c5434e0fb0 'int64_t' sugar
|   |-Typedef 0x55c5433f42d0 'int64_t'
|   `-TypedefType 0x55c5433cd4d0 '__int64_t' sugar
|     |-Typedef 0x55c5433cd0a8 '__int64_t'
|     `-BuiltinType 0x55c54338b390 'long'
|-TypedefDecl 0x55c5436b8a00 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55c5434e0ed0 'uint64_t' sugar
|   |-Typedef 0x55c5433f4470 'uint64_t'
|   `-TypedefType 0x55c5433cd560 '__uint64_t' sugar
|     |-Typedef 0x55c5433cd118 '__uint64_t'
|     `-BuiltinType 0x55c54338b430 'unsigned long'
|-TypedefDecl 0x55c5436b8a90 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55c5436b8a60 'String::intmax_t' sugar
|   |-Typedef 0x55c5436b8998 'intmax_t'
|   `-TypedefType 0x55c5434e0fb0 'int64_t' sugar
|     |-Typedef 0x55c5433f42d0 'int64_t'
|     `-TypedefType 0x55c5433cd4d0 '__int64_t' sugar
|       |-Typedef 0x55c5433cd0a8 '__int64_t'
|       `-BuiltinType 0x55c54338b390 'long'
|-TypedefDecl 0x55c5436b8b20 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55c5436b8af0 'String::uintmax_t' sugar
|   |-Typedef 0x55c5436b8a00 'uintmax_t'
|   `-TypedefType 0x55c5434e0ed0 'uint64_t' sugar
|     |-Typedef 0x55c5433f4470 'uint64_t'
|     `-TypedefType 0x55c5433cd560 '__uint64_t' sugar
|       |-Typedef 0x55c5433cd118 '__uint64_t'
|       `-BuiltinType 0x55c54338b430 'unsigned long'
|-CXXConstructorDecl 0x55c5436b8be0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55c5436b8d88 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55c5436b8cc8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55c5436b8f38 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55c5436b8e78 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55c5436b9090 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55c5436b9000 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55c5436b92a8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55c5436b9158 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55c5436b91d8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55c5436b94c8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55c5436b9378 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55c5436b93f8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55c5436b96e8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55c5436b9598 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55c5436b9618 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55c5436b9908 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55c5436b97b8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55c5436b9838 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55c5436b9a98 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55c5436b99d0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55c5436b9c18 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55c5436b9b58 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55c5436b9da8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55c5436b9ce0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55c5436b9f00 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55c5436b9e70 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55c5436ba058 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55c5436b9fc8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55c5436ba1b0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55c5436ba120 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55c5436ba338 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55c5436ba278 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55c5436ba4c8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55c5436ba400 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55c5436ba658 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55c5436ba590 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55c5436ba7e8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55c5436ba720 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55c5436ba8e0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55c5436baa08 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55c5436bab88 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55c5436baac0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55c5436bacd8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55c5436bac48 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55c5436bad90 <col:63> "" ""
|-CXXMethodDecl 0x55c5436baed8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55c5436bae18 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55c5436bb0e8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55c5436baf98 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55c5436bb018 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55c5436bb308 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55c5436bb1b0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55c5436bb230 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55c5436bb5e8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55c5436bb3c8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55c5436bb448 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55c5436c7430 <col:55> 'int' 10
| `-ParmVarDecl 0x55c5436bb4c0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c5436c7450 <col:76> 'bool' true
|-CXXMethodDecl 0x55c5436bb8c8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55c5436bb6b0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55c5436bb730 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55c5436c7460 <col:56> 'int' 10
| `-ParmVarDecl 0x55c5436bb7a8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c5436c7480 <col:77> 'bool' true
|-CXXMethodDecl 0x55c5436bb9d0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55c5436bba98 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55c5436bbb60 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55c5436bbc00 <col:20>
| `-OptimizeNoneAttr 0x55c5436bbc58 <col:30>
|-CXXConversionDecl 0x55c5436bbd48 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55c5436bbe18 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55c5436bbed8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55c5436bbfc8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55c5436bc088 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55c5436bc208 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55c5436bc140 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55c5436bc358 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55c5436bc2c8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55c5436bc448 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55c5436bc508 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55c5436bc758 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55c5436bc5c0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55c5436bc640 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55c5436bc9b8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55c5436bc820 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55c5436bc8a0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55c5436bca88 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55c5436bcc98 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55c5436bcb40 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55c5436bcbc0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55c5436bceb8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55c5436bcd60 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55c5436bcde0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55c5436bd048 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55c5436bcf80 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55c5436bd138 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55c5436bd2a8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55c5436bd1e8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55c5436bd4b8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55c5436bd368 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55c5436bd3e8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55c5436bd6d0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55c5436bd578 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55c5436bd5f0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55c5436bd860 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55c5436bd790 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55c5436bda80 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55c5436bd920 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55c5436bd9a0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55c5436bdbd0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55c5436bdb40 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55c5436bdda8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55c5436bdc90 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55c5436bdd10 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55c5436bdef8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55c5436bde68 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55c5436be110 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55c5436bdfb0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55c5436be030 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55c5436c7490 <col:39> 'int' 0
|-CXXMethodDecl 0x55c5436be330 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55c5436be1d0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55c5436be250 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55c5436c74b0 <col:48> 'int' 0
|-CXXMethodDecl 0x55c5436be510 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55c5436be3f0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55c5436be470 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55c5436c74d0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55c5436be5e0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55c5436be6a0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55c5436be760 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55c5436be820 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55c5436be8e0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55c5436bea88 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55c5436be990 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55c5436bec08 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55c5436beb40 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55c5436bede0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55c5436becc8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55c5436bef58 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55c5436bee98 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55c5436bf0a0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55c5436bf010 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55c5436bf1f0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55c5436bf160 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55c5436bf3c8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55c5436bf2b0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55c5436bf330 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55c5436bf5a8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55c5436bf490 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55c5436bf510 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55c5436bf6f8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55c5436bf668 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55c5436bf908 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55c5436bf7b8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55c5436bf838 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55c5436bfa68 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55c5436bf9d0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55c5436bfbc0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55c5436bfb28 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55c5436bfc68 <col:57> "" ""
|-CXXMethodDecl 0x55c5436bfd78 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55c5436bfce8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55c5436bfec8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55c5436bfe38 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55c5436c0048 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55c5436bff80 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55c5436c0110 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55c5436c01d0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55c5436c0290 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55c5436c0330 <col:49> "" ""
|-CXXMethodDecl 0x55c5436c03c0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55c5436c0480 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55c5436c0570 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55c5436c0638 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55c5436c06f8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55c5436c07b8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55c5436c08b0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55c5436c0978 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55c5436c0a40 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55c5436c0c18 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55c5436c0af8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55c5436c0b78 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55c5436c0e40 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55c5436c0ce0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55c5436c0d60 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55c5436c0f50 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55c5436c0fb8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55c5436c0fe0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55c5436c10f8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55c5436c1198 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55c5436c11f8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55c5436c1258 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55c5436c1308 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55c5436c1370 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55c5436c15a8 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55c5436c15f8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c5436c1588 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55c5436c1498 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55c5436c1440 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55c5436c1480 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55c5436c1460 <col:32> 'int' 8
|-CXXRecordDecl 0x55c5436c1610 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55c5436c1728 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55c5436c17d0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55c5436c1838 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55c5436c18c8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55c5436c7960 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55c5436c7d98 <col:12>
| |-CXXConstructorDecl 0x55c5436c7a68 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55c5436c7b78 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55c5436c17d0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55c5436ca320 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55c5436ca2f0 <col:12> 'const char *const' lvalue .data 0x55c5436c17d0
| | |     `-DeclRefExpr 0x55c5436ca2d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c5436c7b78 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55c5436c1838 'length' 'int'
| | | `-ImplicitCastExpr 0x55c5436ca3b0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55c5436ca380 <col:12> 'const int' lvalue .length 0x55c5436c1838
| | |     `-DeclRefExpr 0x55c5436ca360 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c5436c7b78 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55c5436c18c8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55c5436ca440 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55c5436ca410 <col:12> 'String::memo_t *const' lvalue .memo 0x55c5436c18c8
| | |     `-DeclRefExpr 0x55c5436ca3f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c5436c7b78 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55c5436ca498 <col:12>
| |-CXXConstructorDecl 0x55c5436c7c18 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55c5436c7c18
| | `-ParmVarDecl 0x55c5436c7d28 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55c5436cd280 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55c5436d8c98 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55c5436d8da8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55c5436d92c0 <col:12>
| |   |-BinaryOperator 0x55c5436d90d8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55c5436d9090 <col:12> 'const char *' lvalue ->data 0x55c5436c17d0
| |   | | `-CXXThisExpr 0x55c5436d9080 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55c5436d90c0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55c5436d9050 <col:12> 'const char *const' lvalue .data 0x55c5436c17d0
| |   |     `-DeclRefExpr 0x55c5436d9030 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c5436d8da8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55c5436d91a0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55c5436d9158 <col:12> 'int' lvalue ->length 0x55c5436c1838
| |   | | `-CXXThisExpr 0x55c5436d9148 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55c5436d9188 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55c5436d9118 <col:12> 'const int' lvalue .length 0x55c5436c1838
| |   |     `-DeclRefExpr 0x55c5436d90f8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c5436d8da8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55c5436d9268 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55c5436d9220 <col:12> 'String::memo_t *' lvalue ->memo 0x55c5436c18c8
| |   | | `-CXXThisExpr 0x55c5436d9210 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55c5436d9250 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55c5436d91e0 <col:12> 'String::memo_t *const' lvalue .memo 0x55c5436c18c8
| |   |     `-DeclRefExpr 0x55c5436d91c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c5436d8da8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55c5436d92b0 <col:12>
| |     `-UnaryOperator 0x55c5436d9298 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55c5436d9288 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55c5436d8e18 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55c5436d8e18
|   `-ParmVarDecl 0x55c5436d8f28 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55c5436c1940 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55c5436c1b88 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55c5436c19a8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55c5436c1a28 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55c5436c1aa0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55c5436c7920 <col:79, line:261:5>
|   |-BinaryOperator 0x55c5436c7598 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55c5436c7530 <col:2, col:5> 'const char *' lvalue .data 0x55c5436c17d0
|   | | `-MemberExpr 0x55c5436c7500 <col:2> 'String::rep_t' lvalue ->_r 0x55c5436c1940
|   | |   `-CXXThisExpr 0x55c5436c74f0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55c5436c7580 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c5436c7560 <col:12> 'const char *' lvalue ParmVar 0x55c5436c19a8 'data' 'const char *'
|   |-BinaryOperator 0x55c5436c7660 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55c5436c75f8 <col:2, col:5> 'int' lvalue .length 0x55c5436c1838
|   | | `-MemberExpr 0x55c5436c75c8 <col:2> 'String::rep_t' lvalue ->_r 0x55c5436c1940
|   | |   `-CXXThisExpr 0x55c5436c75b8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55c5436c7648 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c5436c7628 <col:14> 'int' lvalue ParmVar 0x55c5436c1a28 'length' 'int'
|   `-IfStmt 0x55c5436c7908 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55c5436c7780 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55c5436c7768 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55c5436c7748 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55c5436c7728 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55c5436c76c0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55c5436c18c8
|     |       | `-MemberExpr 0x55c5436c7690 <col:7> 'String::rep_t' lvalue ->_r 0x55c5436c1940
|     |       |   `-CXXThisExpr 0x55c5436c7680 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55c5436c7710 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55c5436c76f0 <col:17> 'String::memo_t *' lvalue ParmVar 0x55c5436c1aa0 'memo' 'String::memo_t *'
|     `-CallExpr 0x55c5436c78e0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55c5436c78c8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55c5436c77d0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55c5436b05b8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55c5436c7838 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55c5436c1198
|         `-ImplicitCastExpr 0x55c5436c7820 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55c5436c7800 <col:27> 'String::memo_t *' lvalue ParmVar 0x55c5436c1aa0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55c5436c1e38 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55c5436c1c58 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55c5436c1cd8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55c5436c1d50 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55c5436c1940 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55c5436c7da8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55c5436c7f38 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55c5436c7ea0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55c5436c7e10 <col:2> '<bound member function type>' ->assign_memo 0x55c5436c1b88
|     | `-ImplicitCastExpr 0x55c5436c7ed8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55c5436c7e00 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55c5436c7ef0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55c5436c7e40 <col:14> 'const char *' lvalue ParmVar 0x55c5436c1c58 'data' 'const char *'
|     |-ImplicitCastExpr 0x55c5436c7f08 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55c5436c7e60 <col:20> 'int' lvalue ParmVar 0x55c5436c1cd8 'length' 'int'
|     `-ImplicitCastExpr 0x55c5436c7f20 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55c5436c7e80 <col:28> 'String::memo_t *' lvalue ParmVar 0x55c5436c1d50 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55c5436c1fc8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55c5436c1f08 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55c5436c8190 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55c5436c8110 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55c5436c7f60 <col:2> '<bound member function type>' ->assign_memo 0x55c5436c1b88
|     | `-CXXThisExpr 0x55c5436c7f50 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55c5436c8148 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55c5436c7fe0 <col:14, col:19> 'const char *' lvalue .data 0x55c5436c17d0
|     |   `-MemberExpr 0x55c5436c7fb0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55c5436c1940
|     |     `-DeclRefExpr 0x55c5436c7f90 <col:14> 'const String' lvalue ParmVar 0x55c5436c1f08 'x' 'const String &'
|     |-ImplicitCastExpr 0x55c5436c8160 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55c5436c8060 <col:25, col:30> 'int' lvalue .length 0x55c5436c1838
|     |   `-MemberExpr 0x55c5436c8030 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55c5436c1940
|     |     `-DeclRefExpr 0x55c5436c8010 <col:25> 'const String' lvalue ParmVar 0x55c5436c1f08 'x' 'const String &'
|     `-ImplicitCastExpr 0x55c5436c8178 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55c5436c80e0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55c5436c18c8
|         `-MemberExpr 0x55c5436c80b0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55c5436c1940
|           `-DeclRefExpr 0x55c5436c8090 <col:38> 'const String' lvalue ParmVar 0x55c5436c1f08 'x' 'const String &'
|-CXXMethodDecl 0x55c5436c2090 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55c5436c8b50 <col:31, line:278:5>
|   `-IfStmt 0x55c5436c8b38 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55c5436c8230 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55c5436c8218 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55c5436c81e8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55c5436c18c8
|     |     `-MemberExpr 0x55c5436c81b8 <col:6> 'String::rep_t' lvalue ->_r 0x55c5436c1940
|     |       `-CXXThisExpr 0x55c5436c81a8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55c5436c8b10 <col:15, line:277:2>
|       |-ParenExpr 0x55c5436c86e0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55c5436c86b0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55c5436c8340 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55c5436c8328 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55c5436c8310 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55c5436c82d0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55c5436c1198
|       |   |       `-ImplicitCastExpr 0x55c5436c82b8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55c5436c8288 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55c5436c18c8
|       |   |           `-MemberExpr 0x55c5436c8258 <col:27> 'String::rep_t' lvalue ->_r 0x55c5436c1940
|       |   |             `-CXXThisExpr 0x55c5436c8248 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55c5436c83a0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55c5436c8380 <col:54> 'int' 0
|       |   `-CallExpr 0x55c5436c8610 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55c5436c85f8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55c5436c8578 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c543427810 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55c5436c8650 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55c5436c8488 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55c5436c8668 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55c5436c84b8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55c5436c8680 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55c5436c84f0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55c5436c8698 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55c5436c8560 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55c5436c8548 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55c5436c8510 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55c5436c8a30 <line:274:6, line:275:22>
|       | |-CallExpr 0x55c5436c88f0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55c5436c88d8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55c5436c8850 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55c5436b1a00 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55c5436c8820 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55c5436c1198
|       | |   `-ImplicitCastExpr 0x55c5436c8808 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55c5436c87d8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55c5436c18c8
|       | |       `-MemberExpr 0x55c5436c87a8 <col:40> 'String::rep_t' lvalue ->_r 0x55c5436c1940
|       | |         `-CXXThisExpr 0x55c5436c8798 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55c5436c89f0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55c5436c89d8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55c5436c8918 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55c5436c6870 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55c5436c8a18 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55c5436c8978 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55c5436c18c8
|       |       `-MemberExpr 0x55c5436c8948 <col:15> 'String::rep_t' lvalue ->_r 0x55c5436c1940
|       |         `-CXXThisExpr 0x55c5436c8938 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55c5436c8af0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55c5436c8a88 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55c5436c18c8
|         | `-MemberExpr 0x55c5436c8a58 <col:6> 'String::rep_t' lvalue ->_r 0x55c5436c1940
|         |   `-CXXThisExpr 0x55c5436c8a48 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55c5436c8ad8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55c5436c8ab8 <col:16> 'int' 0
|-CXXMethodDecl 0x55c5436c2328 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55c5436c2148 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55c5436c21c8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55c5436c2240 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55c5436c2400 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55c5436c2650 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55c5436c24b8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55c5436c2538 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55c5436c25b0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55c5436c2838 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55c5436c2720 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55c5436c27a0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55c5436c2938 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55c5436c8c28 <col:41, line:286:5>
|   `-ReturnStmt 0x55c5436c8c18 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55c5436c8be8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55c5436c8bb0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55c5436c8b98 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55c5436c8b78 <col:46> 'int' 1
|-CXXMethodDecl 0x55c5436c2bd8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55c5436c29f0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55c5436c2a70 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55c5436c2af0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55c5436c6870 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55c5436c2ca0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55c5436c6940 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55c5436c6b10 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55c5436c69f8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55c5436c6a78 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55c5436c6bd0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55c5436c6c98 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55c5436c6d98 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55c5436c6e10 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55c5436c6e88 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55c5436c6ef0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55c5436c6ff0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55c5436c7040 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c5436c6fd0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55c5436c6fb0 <col:22> 'int' 14
|-CXXMethodDecl 0x55c5436c7258 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55c5436c7070 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55c5436c70f0 <col:38> col:41 'int'
| `-ParmVarDecl 0x55c5436c7170 <col:43> col:46 'int'
|-FriendDecl 0x55c5436c7360 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55c5436c73f0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c543789310 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55c5437894e8 prev 0x55c543789310 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55c543789578 <col:46, col:52> col:46 public
|-TypedefDecl 0x55c5437895a0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55c54338b370 'int'
|-TypedefDecl 0x55c54378af00 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55c54378aeb0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55c54378ae90 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55c5437897b8 'type'
|     `-SubstTemplateTypeParmType 0x55c543789780 'String' sugar
|       |-TemplateTypeParmType 0x55c54367bdf0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c54367bda0 'T'
|       `-RecordType 0x55c5436b85e0 'String'
|         `-CXXRecord 0x55c5436b8550 'String'
|-TypedefDecl 0x55c54378afb8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55c54378af80 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55c54378af60 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55c54378af00 'type'
|     `-ElaboratedType 0x55c54378aeb0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55c54378ae90 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55c5437897b8 'type'
|         `-SubstTemplateTypeParmType 0x55c543789780 'String' sugar
|           |-TemplateTypeParmType 0x55c54367bdf0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55c54367bda0 'T'
|           `-RecordType 0x55c5436b85e0 'String'
|             `-CXXRecord 0x55c5436b8550 'String'
|-CXXMethodDecl 0x55c54378b138 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55c54378b048 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55c54378b228 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55c54378b308 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55c54378b308
|-CXXMethodDecl 0x55c54378b5d8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55c54378b4e0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55c54378b818 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55c54378b690 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c54378b708 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c543935d40 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55c54378b8d8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c54378b950 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c543935e98 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55c543935f68 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55c5439361b8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55c543936028 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55c5439360a0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c543936418 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55c543936288 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55c543936300 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c5439365d8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55c5439364e8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c543936798 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55c5439366a0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c543936850 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55c543936900 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55c543936b38 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55c5439369b0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c543936a28 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c543936dd8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55c543936ce0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55c543936ea0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55c543936ef0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55c543936f40 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c5438efd80 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55c543787d78 prev 0x55c5438efd80 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55c543789280 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55c543789230 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55c543789210 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55c5437890c0 'type'
|     `-SubstTemplateTypeParmType 0x55c543788f50 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55c543651ba0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55c543651b48 'F'
|       `-RecordType 0x55c543788bb0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55c543788ad0 'typed_array_memory'
|-FieldDecl 0x55c543936f90 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55c543936fe0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55c543937018 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55c543787e10 'String' sugar
|   |-TemplateTypeParmType 0x55c543689110 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55c5436890b8 'T'
|   `-RecordType 0x55c5436b85e0 'String'
|     `-CXXRecord 0x55c5436b8550 'String'
|-TypedefDecl 0x55c5439370a8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55c543937070 'String &'
|   `-SubstTemplateTypeParmType 0x55c543787e10 'String' sugar
|     |-TemplateTypeParmType 0x55c543689110 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c5436890b8 'T'
|     `-RecordType 0x55c5436b85e0 'String'
|       `-CXXRecord 0x55c5436b8550 'String'
|-TypedefDecl 0x55c543937138 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55c543937100 'const String &'
|   `-QualType 0x55c543787e11 'const String' const
|     `-SubstTemplateTypeParmType 0x55c543787e10 'String' sugar
|       |-TemplateTypeParmType 0x55c543689110 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c5436890b8 'T'
|       `-RecordType 0x55c5436b85e0 'String'
|         `-CXXRecord 0x55c5436b8550 'String'
|-TypedefDecl 0x55c5439371c8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55c543937190 'String *'
|   `-SubstTemplateTypeParmType 0x55c543787e10 'String' sugar
|     |-TemplateTypeParmType 0x55c543689110 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c5436890b8 'T'
|     `-RecordType 0x55c5436b85e0 'String'
|       `-CXXRecord 0x55c5436b8550 'String'
|-TypedefDecl 0x55c543937258 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55c543937220 'const String *'
|   `-QualType 0x55c543787e11 'const String' const
|     `-SubstTemplateTypeParmType 0x55c543787e10 'String' sugar
|       |-TemplateTypeParmType 0x55c543689110 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c5436890b8 'T'
|       `-RecordType 0x55c5436b85e0 'String'
|         `-CXXRecord 0x55c5436b8550 'String'
|-TypedefDecl 0x55c543937eb0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55c543937e60 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55c543937e40 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55c543937d78 'type'
|     `-LValueReferenceType 0x55c543937d40 'const String &'
|       `-QualType 0x55c543937ae1 'const String' const
|         `-SubstTemplateTypeParmType 0x55c543937ae0 'String' sugar
|           |-TemplateTypeParmType 0x55c54365baf0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55c54365ba98 'T'
|           `-RecordType 0x55c5436b85e0 'String'
|             `-CXXRecord 0x55c5436b8550 'String'
|-TypedefDecl 0x55c543937f18 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55c543937100 'const String &'
|   `-QualType 0x55c543787e11 'const String' const
|     `-SubstTemplateTypeParmType 0x55c543787e10 'String' sugar
|       |-TemplateTypeParmType 0x55c543689110 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c5436890b8 'T'
|       `-RecordType 0x55c5436b85e0 'String'
|         `-CXXRecord 0x55c5436b8550 'String'
|-TypedefDecl 0x55c543937f70 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55c54338b370 'int'
|-TypedefDecl 0x55c543937fd8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55c543937190 'String *'
|   `-SubstTemplateTypeParmType 0x55c543787e10 'String' sugar
|     |-TemplateTypeParmType 0x55c543689110 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c5436890b8 'T'
|     `-RecordType 0x55c5436b85e0 'String'
|       `-CXXRecord 0x55c5436b8550 'String'
|-TypedefDecl 0x55c543938040 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55c543937220 'const String *'
|   `-QualType 0x55c543787e11 'const String' const
|     `-SubstTemplateTypeParmType 0x55c543787e10 'String' sugar
|       |-TemplateTypeParmType 0x55c543689110 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c5436890b8 'T'
|       `-RecordType 0x55c5436b85e0 'String'
|         `-CXXRecord 0x55c5436b8550 'String'
|-EnumDecl 0x55c543938098 <line:134:5> col:5
| `-EnumConstantDecl 0x55c543938190 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55c543938170 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55c54368a798 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55c54368a770 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55c54368a750 <col:40> 'int' 1
|-CXXConstructorDecl 0x55c543938218 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55c5439384a8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55c5439382d0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c543938370 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55c543938738 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55c543938620 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55c5439389f8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55c5439388e0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55c543938d10 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55c543938bf0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55c543939020 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55c543938f00 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55c543939310 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55c543939158 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c5439391d0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55c543939438 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55c5439394e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c543939540 <col:30> Inherited
|-CXXMethodDecl 0x55c543939588 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55c543939638 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c543939690 <col:30> Inherited
|-CXXMethodDecl 0x55c543939758 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55c543939808 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c543939860 <col:30> Inherited
|-CXXMethodDecl 0x55c5439398a8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55c543939958 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c5439399b0 <col:30> Inherited
|-CXXMethodDecl 0x55c5439399f8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55c543939aa8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c543939b00 <col:30> Inherited
|-CXXMethodDecl 0x55c543939b48 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55c543939bf8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c543939c50 <col:30> Inherited
|-CXXMethodDecl 0x55c543939c78 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55c543939d28 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55c543939dd8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55c543939f98 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55c543939e88 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c543939f00 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55c54393a0e8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55c54393a058 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c54393a298 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55c54393a1a0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55c54393a350 <col:20>
| `-OptimizeNoneAttr 0x55c54393a3a8 <col:30>
|-CXXMethodDecl 0x55c54393a4c8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55c54393a3d0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55c54393a580 <col:20>
| `-OptimizeNoneAttr 0x55c54393a5d8 <col:30>
|-CXXMethodDecl 0x55c54393a690 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55c54393a600 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c54393a7d8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55c54393a748 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c54393a908 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55c54393aa08 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55c54393aad8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55c54393aba8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55c54393ace8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55c54393ac58 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c54393ae30 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55c54393ada0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c54393af78 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55c54393aee8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55c54393b030 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55c54393b130 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55c54393b0a0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55c54393b1e8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55c54393b2a8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55c54393b3a8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55c54393b528 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55c54393b468 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55c54393bce8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55c54393b5e0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55c54393bc48 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55c54393bb48 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55c54393bdc8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55c54393bf18 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55c54393be88 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55c54393bfd0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55c54393c218 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55c54393c090 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55c54393c108 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55c54393c3a8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55c54393c2e8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55c54393c5b8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55c54393c470 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55c54393c4e8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55c54393c678 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55c54393c8d8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55c54393c7e0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55c54393c9a8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55c54393c9a8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c5439bdd18 prev 0x55c54386dac8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55c5439bde10 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55c5439bdea0 <col:22, col:28> col:22 public
|-EnumDecl 0x55c5439bdec8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55c5439bdfe8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c5439bdfc8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55c5439bdfb0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55c5439bdf90 <col:14> 'int' 999
| |-EnumConstantDecl 0x55c5439be090 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c5439be070 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55c5439be058 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55c5439be038 <col:14> 'int' 1
| |-EnumConstantDecl 0x55c5439be120 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c5439be100 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55c5439be0e0 <col:17> 'int' 0
| |-EnumConstantDecl 0x55c5439be1b0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c5439be190 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55c5439be170 <col:13> 'int' 1
| |-EnumConstantDecl 0x55c5439be240 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c5439be220 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55c5439be200 <col:16> 'int' 2
| |-EnumConstantDecl 0x55c5439be2d0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c5439be2b0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55c5439be290 <col:13> 'int' 3
| |-EnumConstantDecl 0x55c5439be360 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c5439be340 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55c5439be320 <col:15> 'int' 4
| |-EnumConstantDecl 0x55c5439be3f0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c5439be3d0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55c5439be3b0 <col:14> 'int' 5
| |-EnumConstantDecl 0x55c5439be480 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c5439be460 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55c5439be440 <col:12> 'int' 6
| `-EnumConstantDecl 0x55c5439be510 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55c5439be4f0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55c5439be4d0 <col:13> 'int' 7
|-VarDecl 0x55c5439be580 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55c5439be608 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55c5439be690 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55c5439be718 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55c5439be7a0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55c5439be828 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55c5439be8b0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55c5439be938 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55c5439be9c0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55c5439bea48 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55c5439bead0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55c5439bebd0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55c5439c3ed8 '_nerrors' 'int'
| | `-IntegerLiteral 0x55c5439c4668 <line:128:13> 'int' 0
| `-CompoundStmt 0x55c5439c46d8 <col:16, line:129:5>
|-CXXDestructorDecl 0x55c5439becc0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55c5439c46e8 <col:29, line:132:5>
|-CXXMethodDecl 0x55c5439bee78 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55c5439bedb0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c5439bef40 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55c5439bf028 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55c5439c4740 <col:44, line:161:5>
|   `-ReturnStmt 0x55c5439c4730 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55c5439c4718 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55c5439c46f8 <col:9> 'ErrorHandler *' lvalue Var 0x55c5439c3f38 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55c5439bf168 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55c5439bf0d8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c5439bf230 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55c5439c47a0 <col:43, line:173:5>
|   `-ReturnStmt 0x55c5439c4790 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55c5439c4778 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55c5439c4758 <col:9> 'ErrorHandler *' lvalue Var 0x55c5439c3fb0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55c5439bf2e8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55c5439bf368 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55c5439bf478 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55c5439bf3e8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55c5439bf5c8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55c5439bf538 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55c5439bf720 <line:193:5, col:37> col:9 used warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55c5439bf688 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55c5439bf878 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55c5439bf7e0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55c5439bf9d0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55c5439bf938 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55c5439bfbe0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55c5439bfa88 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55c5439bfb08 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55c5439bfdb8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55c5439bfca0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55c5439bfd20 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55c5439bffd8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55c5439bfe78 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55c5439bfef8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55c5439c01b8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55c5439c0098 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55c5439c0118 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55c5439c0398 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55c5439c0278 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55c5439c02f8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55c5439c0520 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55c5439c0458 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55c5439c06f0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55c5439c05d8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55c5439c0650 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55c5439c49f8 <col:57, line:234:5>
|   `-ReturnStmt 0x55c5439c49e8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55c5439c49d0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55c5439c4978 <col:9, col:41> 'int'
|         |-MemberExpr 0x55c5439c4948 <col:9> '<bound member function type>' ->xmessage 0x55c5439c0520
|         | `-CXXThisExpr 0x55c5439c4938 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55c5439c49b8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55c5439c49a0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55c5439c4918 <col:18, col:40> 'String' (CXXTemporary 0x55c5439c4918)
|               `-CallExpr 0x55c5439c48e0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55c5439c48c8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55c5439c4840 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55c5439c26e8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55c5439c4860 <col:31> 'const String' lvalue ParmVar 0x55c5439c0650 'str' 'const String &'
|                 `-DeclRefExpr 0x55c5439c4880 <col:36> 'const String' lvalue ParmVar 0x55c5439c05d8 'anno' 'const String &'
|-CXXMethodDecl 0x55c5439c09d0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55c5439c07b0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55c5439c0830 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55c5439c08a8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55c5439c4c88 <col:68, line:243:5>
|   `-ReturnStmt 0x55c5439c4c78 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55c5439c4c60 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55c5439c4c00 <col:9, col:41> 'int'
|         |-MemberExpr 0x55c5439c4bd0 <col:9> '<bound member function type>' ->xmessage 0x55c5439c06f0
|         | `-CXXThisExpr 0x55c5439c4bc0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55c5439c4a98 <col:18> 'const String' lvalue ParmVar 0x55c5439c07b0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55c5439c4c48 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55c5439c4c30 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55c5439c4ba0 <col:24, col:40> 'String' (CXXTemporary 0x55c5439c4ba0)
|               `-CXXMemberCallExpr 0x55c5439c4b38 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55c5439c4ac8 <col:24> '<bound member function type>' ->vformat 0x55c5439c1bb0
|                 | `-CXXThisExpr 0x55c5439c4ab8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55c5439c4b68 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55c5439c4af8 <col:32> 'const char *' lvalue ParmVar 0x55c5439c0830 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55c5439c4b80 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55c5439c4b18 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55c5439c08a8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55c5439c0c70 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55c5439c0a98 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55c5439c0b10 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55c5439c0b88 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55c5439c4fc8 <col:23, line:254:5>
|   `-ReturnStmt 0x55c5439c4fb8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55c5439c4fa0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55c5439c4f40 <col:9, col:71> 'int'
|         |-MemberExpr 0x55c5439c4f10 <col:9> '<bound member function type>' ->xmessage 0x55c5439c06f0
|         | `-CXXThisExpr 0x55c5439c4f00 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55c5439c4f88 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55c5439c4f70 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55c5439c4ec0 <col:18, col:65> 'String' (CXXTemporary 0x55c5439c4ec0)
|         |     `-CallExpr 0x55c5439c4e58 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55c5439c4e40 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55c5439c4d28 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55c5439c26e8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55c5439c4d48 <col:31> 'const String' lvalue ParmVar 0x55c5439c0b10 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55c5439c4ea0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55c5439c4e88 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55c5439c4e20 <col:37, col:64> 'String' (CXXTemporary 0x55c5439c4e20)
|         |             `-CallExpr 0x55c5439c4df0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55c5439c4dd8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55c5439c4d68 <col:37> 'String (const String &)' lvalue CXXMethod 0x55c5439c2d38 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55c5439c4d88 <col:56> 'const String' lvalue ParmVar 0x55c5439c0a98 'landmark' 'const String &'
|         `-DeclRefExpr 0x55c5439c4ee0 <col:68> 'const String' lvalue ParmVar 0x55c5439c0b88 'str' 'const String &'
|-CXXMethodDecl 0x55c5439c0ff0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55c5439c0d38 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55c5439c0db0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55c5439c0e30 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55c5439c0ea8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55c5439c5280 <col:34, line:267:5>
|   `-ReturnStmt 0x55c5439c5270 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55c5439c5258 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55c5439c51f0 <col:9, col:51> 'int'
|         |-MemberExpr 0x55c5439c51c0 <col:9> '<bound member function type>' ->xmessage 0x55c5439c0c70
|         | `-CXXThisExpr 0x55c5439c51b0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55c5439c5068 <col:18> 'const String' lvalue ParmVar 0x55c5439c0d38 'landmark' 'const String &'
|         |-DeclRefExpr 0x55c5439c5088 <col:28> 'const String' lvalue ParmVar 0x55c5439c0db0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55c5439c5240 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55c5439c5228 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55c5439c5190 <col:34, col:50> 'String' (CXXTemporary 0x55c5439c5190)
|               `-CXXMemberCallExpr 0x55c5439c5128 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55c5439c50b8 <col:34> '<bound member function type>' ->vformat 0x55c5439c1bb0
|                 | `-CXXThisExpr 0x55c5439c50a8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55c5439c5158 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55c5439c50e8 <col:42> 'const char *' lvalue ParmVar 0x55c5439c0e30 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55c5439c5170 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55c5439c5108 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55c5439c0ea8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55c5439c1100 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55c5439c5300 <col:25, line:288:5>
|   `-ReturnStmt 0x55c5439c52f0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55c5439c52d8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55c5439c52a8 <col:9> 'const int' lvalue ->_nerrors 0x55c5439c3ed8
|         `-CXXThisExpr 0x55c5439c5298 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55c5439c1310 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55c5439c11b8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55c5439c1238 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55c5439c15f8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55c5439c13d8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55c5439c1458 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55c5439c14d0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55c5439c1790 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55c5439c16c8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55c5439c19d8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55c5439c1850 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55c5439c18c8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55c5439c5560 <col:58, line:357:5>
|   `-ReturnStmt 0x55c5439c5550 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55c5439c5538 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55c5439c5508 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55c5439c54f0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55c5439c54d0 <col:9, col:29> 'String' (CXXTemporary 0x55c5439c54d0)
|             `-CallExpr 0x55c5439c5460 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55c5439c5448 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55c5439c53c8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55c5439c15f8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55c5439c5368 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55c5439c5498 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55c5439c5388 <col:21> 'const char *' lvalue ParmVar 0x55c5439c1850 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55c5439c54b0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55c5439c53a8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55c5439c18c8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55c5439c1bb0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55c5439c1aa0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55c5439c1b18 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55c5439c1d08 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55c5439c1c78 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55c5439c1e50 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55c5439c1dc0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55c5439c20f0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55c5439c1f08 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55c5439c1f88 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55c5439c2000 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55c5439c2250 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55c5439c21c0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55c5439c5678 <col:37, line:441:5>
|   `-IfStmt 0x55c5439c5660 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55c5439c55e8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55c5439c55b8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55c5439c5578 <col:6> 'int' lvalue ParmVar 0x55c5439c21c0 'level' 'int'
|     | `-ImplicitCastExpr 0x55c5439c55d0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55c5439c5598 <col:15> 'ErrorHandler::Level' EnumConstant 0x55c5439be2d0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55c5439c5648 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55c5439c5618 <col:8> 'int' lvalue ->_nerrors 0x55c5439c3ed8
|         `-CXXThisExpr 0x55c5439c5608 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55c5439c2318 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55c5439c5710 <col:26, line:448:5>
|   `-BinaryOperator 0x55c5439c56f0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55c5439c56a0 <col:2> 'int' lvalue ->_nerrors 0x55c5439c3ed8
|     | `-CXXThisExpr 0x55c5439c5690 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55c5439c56d0 <col:13> 'int' 0
|-CXXMethodDecl 0x55c5439c24e0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55c5439c23d0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55c5439c2448 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55c5439c26e8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55c5439c25a0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55c5439c2618 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55c5439c2998 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55c5439c27a8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55c5439c2828 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55c5439c28a8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55c5439c2a50 <col:59> 0 0
|-CXXMethodDecl 0x55c5439c2be8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55c5439c2ac8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55c5439c2b48 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55c5439c5d80 <col:70, line:534:5>
|   |-DeclStmt 0x55c5439c5880 <line:528:2, col:20>
|   | |-VarDecl 0x55c5439c5738 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55c5439c57a0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55c5439c57d8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55c5439c5840 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55c5439c5950 <line:529:2, col:23>
|   | `-VarDecl 0x55c5439c58b0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55c5439c5938 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55c5439c5918 <col:18> 'const char *' lvalue ParmVar 0x55c5439c2ac8 'begin' 'const char *'
|   |-DoStmt 0x55c5439c5d18 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55c5439c5c48 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55c5439c5c30 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55c5439c5c10 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55c5439c5968 <col:6> 'const char *' lvalue Var 0x55c5439c58b0 'x' 'const char *'
|   | |     `-CallExpr 0x55c5439c5b60 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55c5439c5b48 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55c5439c5b00 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55c5439c43b0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55c5439c5bc8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55c5439c5bb0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55c5439c5a20 <col:20, col:27> 'String' (CXXTemporary 0x55c5439c5a20)
|   | |       |     `-CXXTemporaryObjectExpr 0x55c5439c59e8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55c5439c5be0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55c5439c5a40 <col:30> 'const char *' lvalue Var 0x55c5439c58b0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55c5439c5bf8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55c5439c5a60 <col:33> 'const char *' lvalue ParmVar 0x55c5439c2b48 'end' 'const char *'
|   | |       |-UnaryOperator 0x55c5439c5aa0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55c5439c5a80 <col:39> 'String' lvalue Var 0x55c5439c5738 'name' 'String'
|   | |       |-UnaryOperator 0x55c5439c5ad8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55c5439c5ab8 <col:46> 'String' lvalue Var 0x55c5439c57d8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55c5439c5af0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55c5439c5d00 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55c5439c5ce8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55c5439c5cc8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55c5439c5c98 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55c5436bbd48
|   |         `-ImplicitCastExpr 0x55c5439c5c80 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55c5439c5c60 <col:11> 'String' lvalue Var 0x55c5439c5738 'name' 'String'
|   `-ReturnStmt 0x55c5439c5d70 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55c5439c5d58 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55c5439c5d38 <col:9> 'const char *' lvalue Var 0x55c5439c58b0 'x' 'const char *'
|-CXXMethodDecl 0x55c5439c2d38 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55c5439c2ca8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55c5439c6388 <col:55, line:550:5>
|   `-IfStmt 0x55c5439c6360 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55c5439c5fc0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55c5439c5fa8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55c5439c5f90 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55c5439c5f70 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55c5439c5f40 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55c5436bbd48
|     | |       `-DeclRefExpr 0x55c5439c5de0 <col:6> 'const String' lvalue ParmVar 0x55c5439c2ca8 'x' 'const String &'
|     | `-BinaryOperator 0x55c5439c5f20 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55c5439c5ef0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55c5439c5ea0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55c5439c5e88 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55c5439c5e40 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55c5436d5580 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55c5439c5e00 <col:11> 'const String' lvalue ParmVar 0x55c5439c2ca8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55c5439c5e20 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55c5439c5f08 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55c5439c5ed8 <col:19> 'char' 123
|     |-ReturnStmt 0x55c5439c6030 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55c5439c6000 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55c5439c5fe0 <col:13> 'const String' lvalue ParmVar 0x55c5439c2ca8 'x' 'const String &'
|     `-IfStmt 0x55c5439c6338 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55c5439c60c8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55c5439c60b0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55c5439c6090 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55c5439c6060 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55c5436bbd48
|       |       `-DeclRefExpr 0x55c5439c6040 <col:11> 'const String' lvalue ParmVar 0x55c5439c2ca8 'x' 'const String &'
|       |-ReturnStmt 0x55c5439c6250 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55c5439c6238 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55c5439c6208 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55c5439c61f0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55c5439c61d0 <col:13, col:29> 'String' (CXXTemporary 0x55c5439c61d0)
|       |         `-CallExpr 0x55c5439c6180 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55c5439c6168 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55c5439c60e0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55c5439c24e0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55c5439c61b0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55c5439c6100 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55c5439c6120 <col:28> 'const String' lvalue ParmVar 0x55c5439c2ca8 'x' 'const String &'
|       `-ReturnStmt 0x55c5439c6328 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55c5439c6310 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55c5439c62e0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55c5439c62c8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55c5439c62a8 <col:13, col:20> 'String' (CXXTemporary 0x55c5439c62a8)
|                 `-CXXTemporaryObjectExpr 0x55c5439c6270 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55c5439c2f00 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55c5439c2df0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55c5439c2e68 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c5439c4658 <col:71> 'bool' false
|-CXXRecordDecl 0x55c5439c2fb0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55c5439c32a8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55c5439c3240 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55c5439c31e0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55c5439c31a0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55c5436b85e0 'String'
|       | `-CXXRecord 0x55c5436b8550 'String'
|       |-BuiltinType 0x55c54338b370 'int'
|       `-DecayedType 0x55c54386eb10 '__va_list_tag *' sugar
|         |-TypedefType 0x55c54386eae0 'va_list' sugar
|         | |-Typedef 0x55c5435a9690 'va_list'
|         | `-TypedefType 0x55c5435a9640 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55c5434e1268 '__gnuc_va_list'
|         |   `-TypedefType 0x55c5434e11d0 '__builtin_va_list' sugar
|         |     |-Typedef 0x55c5433ccbd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55c5433ccb80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55c54338c0c0 '__va_list_tag'
|         |         `-CXXRecord 0x55c54338c028 '__va_list_tag'
|         `-PointerType 0x55c5435aef30 '__va_list_tag *'
|           `-RecordType 0x55c54338c0c0 '__va_list_tag'
|             `-CXXRecord 0x55c54338c028 '__va_list_tag'
|-EnumDecl 0x55c5439c3300 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55c5439c3400 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c5439c3980 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5439c33e0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55c5439c33c0 <col:16> 'int' 1
| |-EnumConstantDecl 0x55c5439c34b0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c5439c3998 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5439c3470 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55c5439c3450 <col:21> 'int' 2
| |-EnumConstantDecl 0x55c5439c3540 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c5439c39b0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5439c3520 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55c5439c3500 <col:22> 'int' 4
| |-EnumConstantDecl 0x55c5439c35d0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c5439c39c8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5439c35b0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55c5439c3590 <col:17> 'int' 8
| |-EnumConstantDecl 0x55c5439c3660 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c5439c39e0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5439c3640 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55c5439c3620 <col:22> 'int' 16
| |-EnumConstantDecl 0x55c5439c36f0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c5439c39f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5439c36d0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55c5439c36b0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55c5439c3780 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c5439c3a10 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5439c3760 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55c5439c3740 <col:17> 'int' 64
| |-EnumConstantDecl 0x55c5439c3810 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c5439c3a28 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5439c37f0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55c5439c37d0 <col:14> 'int' 128
| |-EnumConstantDecl 0x55c5439c38a0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c5439c3a40 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5439c3880 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55c5439c3860 <col:16> 'int' 256
| `-EnumConstantDecl 0x55c5439c3930 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55c5439c3a58 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c5439c3910 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55c5439c38f0 <col:12> 'int' 1024
|-CXXMethodDecl 0x55c5439c3c68 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55c5439c3a80 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55c5439c3b20 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55c5439c3df0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55c5439c3d28 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55c5439c3e98 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55c5439c3ed8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55c5439c3f38 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55c5439c3fb0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55c5439c43b0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55c5439c4028 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55c5439c40a8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55c5439c4128 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55c5439c41a0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55c5439c4218 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55c5439c4290 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55c5439c44d8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55c5439c44d8
| `-ParmVarDecl 0x55c5439c45e8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55c5439c66e8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55c5439c66e8
  `-ParmVarDecl 0x55c5439c67f8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c54386db58 prev 0x55c5438b2828 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c54386dc50 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55c54386dce0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55c54386de18 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55c54386dd18 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55c54386f240 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55c54386f220 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55c54386edb8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55c54386f2d0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55c54386f290 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55c54386dd18 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55c54386ee20 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55c54386f350 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55c54386f310 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55c54386ee80 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55c54386f390 <col:54> 'bool' false
| `-CompoundStmt 0x55c54386f498 <col:61, line:38:5>
|   `-BinaryOperator 0x55c54386f478 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55c54386f410 <col:9> 'const Element *' lvalue ->_context 0x55c54386ed58
|     | `-CXXThisExpr 0x55c54386f400 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55c54386f460 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55c54386f440 <col:20> 'int' 0
|-CXXConstructorDecl 0x55c54386e028 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55c54386ded8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55c54386df50 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55c54386f278 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55c54386f258 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55c54386ed58 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55c54386f4f0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55c54386f4b0 <col:20> 'const Element *' lvalue ParmVar 0x55c54386ded8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55c54386edb8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55c54386f570 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55c54386f530 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55c54386df50 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55c54386ee20 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55c54386f5f0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55c54386f5b0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55c54386ee80 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55c54386f630 <col:73> 'bool' false
| `-CompoundStmt 0x55c54386f6a8 <col:80, line:46:5>
|-CXXMethodDecl 0x55c54386e158 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55c54386f720 <col:36, line:51:5>
|   `-ReturnStmt 0x55c54386f710 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55c54386f6f8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55c54386f6c8 <col:16> 'const Element *const' lvalue ->_context 0x55c54386ed58
|         `-CXXThisExpr 0x55c54386f6b8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55c54386e248 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55c54386f7a0 <col:32, line:57:5>
|   `-ReturnStmt 0x55c54386f790 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55c54386f778 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55c54386f748 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55c54386edb8
|         `-CXXThisExpr 0x55c54386f738 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55c54386e308 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55c54386e490 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55c54386e3c0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55c54386e5e0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55c54386e550 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55c54386e730 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55c54386e6a0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55c54386e938 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55c54386e7e8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55c54386e860 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55c54386ec68 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55c54386e9f8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55c54386ea78 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55c54386eb40 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55c54386ed20 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55c54386ed58 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55c54386edb8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55c54386ee20 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55c54386ee80 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55c54386eed0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55c54386eed0
| `-ParmVarDecl 0x55c54386efe8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55c54386f088 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55c54386f088
| `-ParmVarDecl 0x55c54386f198 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55c5439e8fa0 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c54397a560 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55c54397a738 prev 0x55c54397a560 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55c54397a7c8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55c54397a7f0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55c54338b370 'int'
|-TypedefDecl 0x55c54397c3c0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55c54397c370 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55c54397aca0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55c54397aba0 'type'
|     `-TemplateSpecializationType 0x55c54397ab30 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55c54397aa10 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55c54397a9f0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55c54397a9d0 <col:24> 'unsigned long' 4
|       `-RecordType 0x55c54397ab10 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55c54397aa30 'char_array'
|-TypedefDecl 0x55c54397c478 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55c54397c440 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55c54397c420 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55c54397c3c0 'type'
|     `-ElaboratedType 0x55c54397c370 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55c54397aca0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55c54397aba0 'type'
|         `-TemplateSpecializationType 0x55c54397ab30 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55c54397aa10 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55c54397a9f0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55c54397a9d0 <col:24> 'unsigned long' 4
|           `-RecordType 0x55c54397ab10 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55c54397aa30 'char_array'
|-CXXMethodDecl 0x55c54397c5f8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55c54397c508 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55c54397c6e8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55c54397c7c8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55c54397ca98 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55c54397c9a0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55c54397ccd8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55c54397cb50 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c54397cbc8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c54397cea8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55c54397cd98 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c54397ce10 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c54397d008 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55c54397d0d8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55c54397d328 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55c54397d198 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55c54397d210 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c54397d588 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55c54397d3f8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55c54397d470 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c54397d748 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55c54397d658 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c54397d908 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55c54397d810 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c543984da0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55c543984e50 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55c543985088 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55c543984f00 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c543984f78 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c543985328 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55c543985230 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55c5439853f0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55c543985440 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55c543985490 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c543978f68 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55c543979178 prev 0x55c543978f68 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55c54397a4d0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55c54397a480 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55c54397a460 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55c54397a310 'type'
|     `-SubstTemplateTypeParmType 0x55c54397a130 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55c543651420 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c5436513c8 'T'
|       `-RecordType 0x55c543979c80 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55c543979b98 'sized_array_memory'
|-FieldDecl 0x55c5439854e0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55c543985530 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55c543985568 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55c543979210 'int' sugar
|   |-TemplateTypeParmType 0x55c543689110 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55c5436890b8 'T'
|   `-BuiltinType 0x55c54338b370 'int'
|-TypedefDecl 0x55c5439855f8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55c5439855c0 'int &'
|   `-SubstTemplateTypeParmType 0x55c543979210 'int' sugar
|     |-TemplateTypeParmType 0x55c543689110 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c5436890b8 'T'
|     `-BuiltinType 0x55c54338b370 'int'
|-TypedefDecl 0x55c5439856b8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55c543985680 'const int &'
|   `-QualType 0x55c543979211 'const int' const
|     `-SubstTemplateTypeParmType 0x55c543979210 'int' sugar
|       |-TemplateTypeParmType 0x55c543689110 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c5436890b8 'T'
|       `-BuiltinType 0x55c54338b370 'int'
|-TypedefDecl 0x55c543985748 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55c543985710 'int *'
|   `-SubstTemplateTypeParmType 0x55c543979210 'int' sugar
|     |-TemplateTypeParmType 0x55c543689110 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c5436890b8 'T'
|     `-BuiltinType 0x55c54338b370 'int'
|-TypedefDecl 0x55c5439857d8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55c5439857a0 'const int *'
|   `-QualType 0x55c543979211 'const int' const
|     `-SubstTemplateTypeParmType 0x55c543979210 'int' sugar
|       |-TemplateTypeParmType 0x55c543689110 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c5436890b8 'T'
|       `-BuiltinType 0x55c54338b370 'int'
|-TypedefDecl 0x55c5439863c0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55c543986370 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55c543986350 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55c5439862e0 'type'
|     `-SubstTemplateTypeParmType 0x55c5439860a0 'int' sugar
|       |-TemplateTypeParmType 0x55c54365c220 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c54365c1d0 'T'
|       `-BuiltinType 0x55c54338b370 'int'
|-TypedefDecl 0x55c543986428 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55c543985680 'const int &'
|   `-QualType 0x55c543979211 'const int' const
|     `-SubstTemplateTypeParmType 0x55c543979210 'int' sugar
|       |-TemplateTypeParmType 0x55c543689110 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c5436890b8 'T'
|       `-BuiltinType 0x55c54338b370 'int'
|-TypedefDecl 0x55c543986480 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55c54338b370 'int'
|-TypedefDecl 0x55c5439864e8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55c543985710 'int *'
|   `-SubstTemplateTypeParmType 0x55c543979210 'int' sugar
|     |-TemplateTypeParmType 0x55c543689110 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c5436890b8 'T'
|     `-BuiltinType 0x55c54338b370 'int'
|-TypedefDecl 0x55c543986550 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55c5439857a0 'const int *'
|   `-QualType 0x55c543979211 'const int' const
|     `-SubstTemplateTypeParmType 0x55c543979210 'int' sugar
|       |-TemplateTypeParmType 0x55c543689110 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c5436890b8 'T'
|       `-BuiltinType 0x55c54338b370 'int'
|-EnumDecl 0x55c5439865a8 <line:134:5> col:5
| `-EnumConstantDecl 0x55c5439866a0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55c543986680 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55c54368a798 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55c54368a770 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55c54368a750 <col:40> 'int' 1
|-CXXConstructorDecl 0x55c543986728 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55c543986978 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55c5439867e0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c543986880 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55c543986c38 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55c543986b20 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55c543986ef8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55c543986de0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55c543987240 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55c543987120 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55c543987550 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55c543987430 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55c543987840 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55c543987688 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c543987700 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55c543987968 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55c543987a48 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c543987aa0 <col:30> Inherited
|-CXXMethodDecl 0x55c543987ae8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55c543987b98 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c543987bf0 <col:30> Inherited
|-CXXMethodDecl 0x55c543987cb8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55c543987d68 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c543987dc0 <col:30> Inherited
|-CXXMethodDecl 0x55c543987e08 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55c543987eb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c543987f10 <col:30> Inherited
|-CXXMethodDecl 0x55c543987f58 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55c543988008 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c543988060 <col:30> Inherited
|-CXXMethodDecl 0x55c5439880a8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55c543988158 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c5439881b0 <col:30> Inherited
|-CXXMethodDecl 0x55c5439881d8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55c543988288 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55c543988338 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55c5439884f8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55c5439883e8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c543988460 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55c543988648 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55c5439885b8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c5439887f8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55c543988700 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55c5439888b0 <col:20>
| `-OptimizeNoneAttr 0x55c543988908 <col:30>
|-CXXMethodDecl 0x55c543988a28 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55c543988930 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55c543988ae0 <col:20>
| `-OptimizeNoneAttr 0x55c543988b38 <col:30>
|-CXXMethodDecl 0x55c543988bf0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55c543988b60 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c543988d38 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55c543988ca8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c543988e68 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55c543988f98 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55c543989068 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55c543989138 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55c543989278 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55c5439891e8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c5439893c0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55c543989330 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c543989508 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55c543989478 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55c5439895c0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55c5439896c0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55c543989630 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55c543989778 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55c543989838 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55c543989938 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55c543989ab8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55c5439899f8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55c54398a278 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55c543989b70 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55c54398a1d8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55c54398a0d8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55c54398a358 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55c54398a4a8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55c54398a418 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55c54398a560 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55c54398a7a8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55c54398a620 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55c54398a698 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55c54398a968 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55c54398a878 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55c54398abb8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55c54398aa30 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55c54398aaa8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55c54398ac78 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55c54398aed8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55c54398ade0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55c54398afa8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c5439770d8 prev 0x55c543958d28 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55c5439771d0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55c5439772c0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55c54399cd00 <col:16, line:828:9>
|-CXXDestructorDecl 0x55c5439773b0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55c54399cd10 <col:25, line:830:9>
|-CXXMethodDecl 0x55c5439774b0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55c543977560 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55c543977608 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55c543977608
| `-ParmVarDecl 0x55c543977718 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55c543977ed8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55c543977ed8
  `-ParmVarDecl 0x55c543977fe8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c543958b40 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55c543958c98 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55c543958d28 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55c543958de0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55c543958ee8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55c543958e18 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55c54398c568 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55c54398c548 <col:31> 'int' 0
|-CXXConstructorDecl 0x55c543959208 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55c543959080 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55c5439590f8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55c54398c5a0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55c54398c580 <col:59> 'int' 0
|-CXXConstructorDecl 0x55c5439593e0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55c5439592d0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55c543959348 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55c54398c5d8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55c54398c5b8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55c543959798 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55c543959580 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55c5439595f8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55c543959670 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55c54398c610 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55c54398c5f0 <col:31> 'int' 0
|-CXXConstructorDecl 0x55c543959958 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55c543959898 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55c543959a50 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55c543959c38 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55c543959b40 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55c543959d28 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55c54398c9c0 <col:24, line:291:5>
|   `-ReturnStmt 0x55c54398c9b0 <line:290:9, col:79>
|     `-BinaryOperator 0x55c54398c990 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55c54398c868 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55c54398c7c0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55c54398c7a0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55c54398c698 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55c54398c680 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55c54398c668 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55c54398c638 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55c543978f00
|       | |   |       `-CXXThisExpr 0x55c54398c628 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55c54398c788 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55c54398c770 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55c54398c738 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55c54398c708 <col:28, col:35> '<bound member function type>' ->size 0x55c543939c78
|       | |           `-ImplicitCastExpr 0x55c54398c758 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55c54398c6f0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55c54398c6c0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55c543978f00
|       | |                 `-CXXThisExpr 0x55c54398c6b0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55c54398c850 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55c54398c838 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55c54398c820 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55c54398c7f0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55c54398b0f0
|       |         `-CXXThisExpr 0x55c54398c7e0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55c54398c970 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55c54398c958 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55c54398c940 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55c54398c900 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55c54398c8e8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55c54398c898 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55c54398b1a0
|         |     |   `-CXXThisExpr 0x55c54398c888 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55c54398c8c8 <col:73> 'int' 0
|         `-IntegerLiteral 0x55c54398c920 <col:79> 'int' 0
|-CXXMethodDecl 0x55c543959de8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55c54398cb98 <col:32, line:296:5>
|   `-ReturnStmt 0x55c54398cb88 <line:295:9, col:49>
|     `-BinaryOperator 0x55c54398cb68 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55c54398ca48 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55c54398ca30 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55c54398ca18 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55c54398c9e8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55c54398b0f0
|       |       `-CXXThisExpr 0x55c54398c9d8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55c54398cb48 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55c54398cb30 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55c54398cb18 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55c54398cad8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55c54398cac0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55c54398ca70 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55c54398b1a0
|         |     |   `-CXXThisExpr 0x55c54398ca60 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55c54398caa0 <col:43> 'int' 0
|         `-IntegerLiteral 0x55c54398caf8 <col:49> 'int' 0
|-CXXMethodDecl 0x55c543959ed8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55c54398e710 <col:19, line:306:5>
|   |-IfStmt 0x55c54398ccc8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55c54398cc08 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55c54398cbf0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55c54398cbc0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55c543978f00
|   | |     `-CXXThisExpr 0x55c54398cbb0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55c54398cca8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55c54398cc78 <col:13, col:20> '<bound member function type>' ->clear 0x55c54393c678
|   |     `-ImplicitCastExpr 0x55c54398cc60 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55c54398cc30 <col:13> 'Vector<String> *' lvalue ->_conf 0x55c543978f00
|   |         `-CXXThisExpr 0x55c54398cc20 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55c54398cd50 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55c54398cd20 <col:9, col:16> '<bound member function type>' .clear 0x55c54398ac78
|   |   `-MemberExpr 0x55c54398ccf0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55c54398b090
|   |     `-CXXThisExpr 0x55c54398cce0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55c54398e700 <line:305:9, col:17>
|     `-UnaryOperator 0x55c54398cd80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c54398cd70 <col:17> 'Args *' this
|-CXXMethodDecl 0x55c54395a158 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55c54395a060 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55c54395a2d8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55c54395a210 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55c54395a658 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55c54395a380 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55c54395a5b8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55c54395a428 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55c54395a4a0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55c54398ea30 <col:67, line:327:5>
|     |-WhileStmt 0x55c54398e9e0 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55c54398e7f8 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55c54398e778 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55c5438aacf8 0x55c5436f42d8 0x55c5436f3fb0 0x55c5436e5790 0x55c5436e5440 0x55c5436e4d30 0x55c5436b76a0 0x55c543643b60
|     | | |-DeclRefExpr 0x55c54398e738 <col:16> 'Iter' lvalue ParmVar 0x55c54395a428 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55c54398e758 <col:25> 'Iter' lvalue ParmVar 0x55c54395a4a0 'end' 'Iter'
|     | `-CompoundStmt 0x55c54398e9c0 <col:30, line:325:9>
|     |   |-CallExpr 0x55c54398e960 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55c54398e840 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55c54398e930 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55c54398e8c0 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c5438afe78 0x55c5438afa98 0x55c5438af6c8 0x55c5438af2e8 0x55c5438aef08 0x55c5438aeb38
|     |   |   `-DeclRefExpr 0x55c54398e8a0 <col:24> 'Iter' lvalue ParmVar 0x55c54395a428 'begin' 'Iter'
|     |   `-UnaryOperator 0x55c54398e9a8 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55c54398e988 <col:15> 'Iter' lvalue ParmVar 0x55c54395a428 'begin' 'Iter'
|     `-ReturnStmt 0x55c54398ea20 <line:326:9, col:17>
|       `-UnaryOperator 0x55c54398ea08 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c54398e9f8 <col:17> 'Args *' this
|-CXXMethodDecl 0x55c54395a760 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55c54395a6d0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55c54395a8a8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55c54395a818 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55c54395a970 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55c54398eb10 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55c54398eab0 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55c54398ea60 <col:9> '<bound member function type>' ->reset_from 0x55c54398b518
|   | | `-CXXThisExpr 0x55c54398ea50 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55c54398ea90 <col:20> 'int' 0
|   `-ReturnStmt 0x55c54398eb00 <line:352:9, col:17>
|     `-UnaryOperator 0x55c54398eae8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c54398ead8 <col:17> 'Args *' this
|-VarDecl 0x55c54395aa28 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55c54395aa90 <col:38> 'int' 1
|-VarDecl 0x55c54395ab20 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55c54395ab88 <col:39> 'int' 2
|-VarDecl 0x55c54395ac18 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55c54395ac80 <col:39> 'int' 4
|-VarDecl 0x55c54395ad10 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55c54395ad78 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55c54395b0f8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55c54395adf0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c54395b058 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55c54395aea0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c54395af48 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55c54398ec68 <col:43, line:371:5>
|     `-ReturnStmt 0x55c54398ec58 <line:370:9, col:34>
|       `-CallExpr 0x55c54398ec20 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c54398eb40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c54398ebc0 <col:21> 'const char *' lvalue ParmVar 0x55c54395aea0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c54398ebe0 <col:30> 'int' 0
|         `-DeclRefExpr 0x55c54398ec00 <col:33> 'T' lvalue ParmVar 0x55c54395af48 'x' 'T &'
|-FunctionTemplateDecl 0x55c54395b428 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55c54395b160 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c54395b388 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55c54395b210 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c54395b2b8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55c54398edb8 <col:45, line:375:5>
|     `-ReturnStmt 0x55c54398eda8 <line:374:9, col:42>
|       `-CallExpr 0x55c54398ed70 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c54398ec90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c54398ed10 <col:21> 'const char *' lvalue ParmVar 0x55c54395b210 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c54398ed30 <col:30> 'const int' lvalue Var 0x55c54395aa28 'mandatory' 'const int'
|         `-DeclRefExpr 0x55c54398ed50 <col:41> 'T' lvalue ParmVar 0x55c54395b2b8 'x' 'T &'
|-FunctionTemplateDecl 0x55c54395b758 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55c54395b490 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c54395b6b8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55c54395b540 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c54395b5e8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55c54398ef08 <col:45, line:379:5>
|     `-ReturnStmt 0x55c54398eef8 <line:378:9, col:43>
|       `-CallExpr 0x55c54398eec0 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c54398ede0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c54398ee60 <col:21> 'const char *' lvalue ParmVar 0x55c54395b540 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c54398ee80 <col:30> 'const int' lvalue Var 0x55c54395ab20 'positional' 'const int'
|         `-DeclRefExpr 0x55c54398eea0 <col:42> 'T' lvalue ParmVar 0x55c54395b5e8 'x' 'T &'
|-FunctionTemplateDecl 0x55c54395ba88 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55c54395b7c0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55c54395b9e8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55c54395b870 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55c54395b918 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55c54398f108 <col:46, line:383:5>
| |   `-ReturnStmt 0x55c54398f0f8 <line:382:9, col:55>
| |     `-CallExpr 0x55c54398f0c0 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55c54398ef30 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55c54398efb0 <col:21> 'const char *' lvalue ParmVar 0x55c54395b870 'keyword' 'const char *'
| |       |-BinaryOperator 0x55c54398f080 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55c54398f030 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55c54398f010 <col:30> 'const int' lvalue Var 0x55c54395aa28 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55c54398f068 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55c54398f048 <col:42> 'const int' lvalue Var 0x55c54395ab20 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55c54398f0a0 <col:54> 'T' lvalue ParmVar 0x55c54395b918 'x' 'T &'
| `-CXXMethodDecl 0x55c5439ea0f8 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, unsigned char &)'
|   |-TemplateArgument type 'unsigned char'
|   |-ParmVarDecl 0x55c5439e9f18 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55c5439e9fe8 <col:40, col:43> col:43 x 'unsigned char &'
|-FunctionTemplateDecl 0x55c54395be88 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55c54395baf0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c54395bde8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55c54395bba0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c54395bc20 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55c54395bcc8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55c54398f248 <col:54, line:388:5>
|     |-CallExpr 0x55c54398f1d0 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c54398f120 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55c54398f160 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55c54398f170 <col:30> 'const char *' lvalue ParmVar 0x55c54395bba0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c54398f190 <col:39> 'int' lvalue ParmVar 0x55c54395bc20 'flags' 'int'
|     | `-DeclRefExpr 0x55c54398f1b0 <col:46> 'T' lvalue ParmVar 0x55c54395bcc8 'x' 'T &'
|     `-ReturnStmt 0x55c54398f238 <line:387:9, col:17>
|       `-UnaryOperator 0x55c54398f220 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c54398f210 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c54395c338 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55c54395bef8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c54395bf78 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55c54395c298 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55c54395c038 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c54395c0d8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55c54395c178 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c54398f3b8 <col:74, line:403:5>
|     `-ReturnStmt 0x55c54398f3a8 <line:402:9, col:56>
|       `-CallExpr 0x55c54398f368 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c54398f278 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c54398f2e8 <col:28> 'const char *' lvalue ParmVar 0x55c54395c038 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c54398f308 <col:37> 'int' 0
|         |-DeclRefExpr 0x55c54398f328 <col:40> 'T' lvalue ParmVar 0x55c54395c0d8 'x' 'T &'
|         `-DeclRefExpr 0x55c54398f348 <col:43> 'const V' lvalue ParmVar 0x55c54395c178 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55c54395c7a8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55c54395c3a8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c54395c428 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55c54395c708 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55c54395c4e8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c54395c588 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55c54395c628 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c54398f520 <col:76, line:407:5>
|     `-ReturnStmt 0x55c54398f510 <line:406:9, col:65>
|       `-CallExpr 0x55c54398f4d0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c54398f3e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c54398f450 <col:28> 'const char *' lvalue ParmVar 0x55c54395c4e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c54398f470 <col:37> 'const int' lvalue Var 0x55c54395ab20 'positional' 'const int'
|         |-DeclRefExpr 0x55c54398f490 <col:49> 'T' lvalue ParmVar 0x55c54395c588 'x' 'T &'
|         `-DeclRefExpr 0x55c54398f4b0 <col:52> 'const V' lvalue ParmVar 0x55c54395c628 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55c54395ccf8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55c54395c818 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c54395c898 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55c54395cc58 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55c54395c958 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c54395c9d8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55c54395ca78 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55c54395cb18 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c54398f688 <col:85, line:412:5>
|     |-CallExpr 0x55c54398f608 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c54398f538 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55c54398f578 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55c54398f588 <col:37> 'const char *' lvalue ParmVar 0x55c54395c958 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c54398f5a8 <col:46> 'int' lvalue ParmVar 0x55c54395c9d8 'flags' 'int'
|     | |-DeclRefExpr 0x55c54398f5c8 <col:53> 'T' lvalue ParmVar 0x55c54395ca78 'x' 'T &'
|     | `-DeclRefExpr 0x55c54398f5e8 <col:56> 'const V' lvalue ParmVar 0x55c54395cb18 'default_value' 'const V &'
|     `-ReturnStmt 0x55c54398f678 <line:411:9, col:17>
|       `-UnaryOperator 0x55c54398f660 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c54398f650 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c54395d188 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55c54395cd70 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c54395cde8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c54395d0e8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c54395cea8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c54395cf20 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55c54395cfc8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55c54398f808 <col:53, line:425:5>
|     `-ReturnStmt 0x55c54398f7f8 <line:424:9, col:42>
|       `-CallExpr 0x55c54398f7b8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c54398f6b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c54398f738 <col:21> 'const char *' lvalue ParmVar 0x55c54395cea8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c54398f758 <col:30> 'int' 0
|         |-DeclRefExpr 0x55c54398f778 <col:33> 'P' lvalue ParmVar 0x55c54395cf20 'parser' 'P'
|         `-DeclRefExpr 0x55c54398f798 <col:41> 'T' lvalue ParmVar 0x55c54395cfc8 'x' 'T &'
|-FunctionTemplateDecl 0x55c54395d5d8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55c54395d1f8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c54395d278 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c54395d538 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c54395d338 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c54395d3b0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55c54395d458 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55c54398f980 <col:55, line:429:5>
|     `-ReturnStmt 0x55c54398f970 <line:428:9, col:50>
|       `-CallExpr 0x55c54398f930 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c54398f830 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c54398f8b0 <col:21> 'const char *' lvalue ParmVar 0x55c54395d338 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c54398f8d0 <col:30> 'const int' lvalue Var 0x55c54395aa28 'mandatory' 'const int'
|         |-DeclRefExpr 0x55c54398f8f0 <col:41> 'P' lvalue ParmVar 0x55c54395d3b0 'parser' 'P'
|         `-DeclRefExpr 0x55c54398f910 <col:49> 'T' lvalue ParmVar 0x55c54395d458 'x' 'T &'
|-FunctionTemplateDecl 0x55c54395da28 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55c54395d648 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c54395d6c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c54395d988 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c54395d788 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c54395d800 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55c54395d8a8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55c54398faf8 <col:55, line:433:5>
|     `-ReturnStmt 0x55c54398fae8 <line:432:9, col:51>
|       `-CallExpr 0x55c54398faa8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c54398f9a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c54398fa28 <col:21> 'const char *' lvalue ParmVar 0x55c54395d788 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c54398fa48 <col:30> 'const int' lvalue Var 0x55c54395ab20 'positional' 'const int'
|         |-DeclRefExpr 0x55c54398fa68 <col:42> 'P' lvalue ParmVar 0x55c54395d800 'parser' 'P'
|         `-DeclRefExpr 0x55c54398fa88 <col:50> 'T' lvalue ParmVar 0x55c54395d8a8 'x' 'T &'
|-FunctionTemplateDecl 0x55c54395de78 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55c54395da98 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c54395db18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55c54395ddd8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55c54395dbd8 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55c54395dc50 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x55c54395dcf8 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x55c54398fd20 <col:56, line:437:5>
| |   `-ReturnStmt 0x55c54398fd10 <line:436:9, col:63>
| |     `-CallExpr 0x55c54398fcd0 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55c54398fb20 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55c54398fba0 <col:21> 'const char *' lvalue ParmVar 0x55c54395dbd8 'keyword' 'const char *'
| |       |-BinaryOperator 0x55c54398fc70 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55c54398fc20 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55c54398fc00 <col:30> 'const int' lvalue Var 0x55c54395aa28 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55c54398fc58 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55c54398fc38 <col:42> 'const int' lvalue Var 0x55c54395ab20 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x55c54398fc90 <col:54> 'P' lvalue ParmVar 0x55c54395dc50 'parser' 'P'
| |       `-DeclRefExpr 0x55c54398fcb0 <col:62> 'T' lvalue ParmVar 0x55c54395dcf8 'x' 'T &'
| `-CXXMethodDecl 0x55c5439e9a58 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, AnnoArg, int &)'
|   |-TemplateArgument type 'AnnoArg'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55c5439e97c0 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x55c5439e9868 <col:40, col:42> col:42 parser 'AnnoArg':'AnnoArg'
|   `-ParmVarDecl 0x55c5439e9938 <col:50, col:53> col:53 x 'int &'
|-FunctionTemplateDecl 0x55c54395e3a8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55c54395dee8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c54395df68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c54395e308 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55c54395e028 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c54395e0a8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55c54395e120 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55c54395e1c8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55c54398fe88 <col:64, line:442:5>
|     |-CallExpr 0x55c54398fe08 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c54398fd38 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55c54398fd78 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55c54398fd88 <col:30> 'const char *' lvalue ParmVar 0x55c54395e028 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c54398fda8 <col:39> 'int' lvalue ParmVar 0x55c54395e0a8 'flags' 'int'
|     | |-DeclRefExpr 0x55c54398fdc8 <col:46> 'P' lvalue ParmVar 0x55c54395e120 'parser' 'P'
|     | `-DeclRefExpr 0x55c54398fde8 <col:54> 'T' lvalue ParmVar 0x55c54395e1c8 'x' 'T &'
|     `-ReturnStmt 0x55c54398fe78 <line:441:9, col:17>
|       `-UnaryOperator 0x55c54398fe60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c54398fe50 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c54395e9a8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55c54395e420 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c54395e498 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55c54395e518 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55c54395e908 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55c54395e5e0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c54395e658 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55c54395e6f8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55c54395e7c8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c543990020 <col:84, line:458:5>
|     `-ReturnStmt 0x55c543990010 <line:457:9, col:64>
|       `-CallExpr 0x55c54398ffc8 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c54398feb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c54398ff28 <col:28> 'const char *' lvalue ParmVar 0x55c54395e5e0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c54398ff48 <col:37> 'int' 0
|         |-DeclRefExpr 0x55c54398ff68 <col:40> 'P' lvalue ParmVar 0x55c54395e658 'parser' 'P'
|         |-DeclRefExpr 0x55c54398ff88 <col:48> 'T' lvalue ParmVar 0x55c54395e6f8 'x' 'T &'
|         `-DeclRefExpr 0x55c54398ffa8 <col:51> 'const V' lvalue ParmVar 0x55c54395e7c8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55c54395ef28 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55c54395ea20 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c54395ea98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55c54395eb18 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55c54395ee88 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55c54395ebe0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c54395ec58 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55c54395ecf8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55c54395ed98 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c5439901b0 <col:86, line:462:5>
|     `-ReturnStmt 0x55c5439901a0 <line:461:9, col:73>
|       `-CallExpr 0x55c543990158 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c543990048 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c5439900b8 <col:28> 'const char *' lvalue ParmVar 0x55c54395ebe0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c5439900d8 <col:37> 'const int' lvalue Var 0x55c54395ab20 'positional' 'const int'
|         |-DeclRefExpr 0x55c5439900f8 <col:49> 'P' lvalue ParmVar 0x55c54395ec58 'parser' 'P'
|         |-DeclRefExpr 0x55c543990118 <col:57> 'T' lvalue ParmVar 0x55c54395ecf8 'x' 'T &'
|         `-DeclRefExpr 0x55c543990138 <col:60> 'const V' lvalue ParmVar 0x55c54395ed98 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55c54395f588 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55c54395efa0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c54395f018 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55c54395f098 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55c54395f4e8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55c54395f160 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c54395f1e0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55c54395f258 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55c54395f2f8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55c54395f398 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c543990340 <col:95, line:467:5>
|     |-CallExpr 0x55c5439902b8 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c5439901c8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55c543990208 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55c543990218 <col:37> 'const char *' lvalue ParmVar 0x55c54395f160 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c543990238 <col:46> 'int' lvalue ParmVar 0x55c54395f1e0 'flags' 'int'
|     | |-DeclRefExpr 0x55c543990258 <col:53> 'P' lvalue ParmVar 0x55c54395f258 'parser' 'P'
|     | |-DeclRefExpr 0x55c543990278 <col:61> 'T' lvalue ParmVar 0x55c54395f2f8 'x' 'T &'
|     | `-DeclRefExpr 0x55c543990298 <col:64> 'const V' lvalue ParmVar 0x55c54395f398 'default_value' 'const V &'
|     `-ReturnStmt 0x55c543990330 <line:466:9, col:17>
|       `-UnaryOperator 0x55c543990318 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c543990308 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c54395fb68 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55c54395f608 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c54395f688 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c54395f708 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c54395fac8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c54395f7d0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c54395f848 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55c54395f8e8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55c54395f988 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55c5439904e8 <col:63, line:481:5>
|     `-ReturnStmt 0x55c5439904d8 <line:480:9, col:47>
|       `-CallExpr 0x55c543990490 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c543990370 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c5439903f0 <col:21> 'const char *' lvalue ParmVar 0x55c54395f7d0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c543990410 <col:30> 'int' 0
|         |-DeclRefExpr 0x55c543990430 <col:33> 'P' lvalue ParmVar 0x55c54395f848 'parser' 'P'
|         |-DeclRefExpr 0x55c543990450 <col:41> 'T1' lvalue ParmVar 0x55c54395f8e8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55c543990470 <col:45> 'T2' lvalue ParmVar 0x55c54395f988 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55c5439600e8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55c54395fbe0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c54395fc58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c54395fcd8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c543960048 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c54395fda0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c54395fe18 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55c54395feb8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55c54395ff58 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55c543990688 <col:65, line:485:5>
|     `-ReturnStmt 0x55c543990678 <line:484:9, col:55>
|       `-CallExpr 0x55c543990630 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c543990510 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c543990590 <col:21> 'const char *' lvalue ParmVar 0x55c54395fda0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c5439905b0 <col:30> 'const int' lvalue Var 0x55c54395aa28 'mandatory' 'const int'
|         |-DeclRefExpr 0x55c5439905d0 <col:41> 'P' lvalue ParmVar 0x55c54395fe18 'parser' 'P'
|         |-DeclRefExpr 0x55c5439905f0 <col:49> 'T1' lvalue ParmVar 0x55c54395feb8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55c543990610 <col:53> 'T2' lvalue ParmVar 0x55c54395ff58 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55c543960668 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55c543960160 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c5439601d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c543960258 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c5439605c8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c543960320 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c543960398 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55c543960438 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55c5439604d8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55c543990828 <col:65, line:489:5>
|     `-ReturnStmt 0x55c543990818 <line:488:9, col:56>
|       `-CallExpr 0x55c5439907d0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c5439906b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c543990730 <col:21> 'const char *' lvalue ParmVar 0x55c543960320 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c543990750 <col:30> 'const int' lvalue Var 0x55c54395ab20 'positional' 'const int'
|         |-DeclRefExpr 0x55c543990770 <col:42> 'P' lvalue ParmVar 0x55c543960398 'parser' 'P'
|         |-DeclRefExpr 0x55c543990790 <col:50> 'T1' lvalue ParmVar 0x55c543960438 'x1' 'T1 &'
|         `-DeclRefExpr 0x55c5439907b0 <col:54> 'T2' lvalue ParmVar 0x55c5439604d8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55c5439660c8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55c5439606e0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c543960758 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c5439607d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c543966028 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c5439608a0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c543965df0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55c543965e98 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55c543965f38 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55c543990a78 <col:66, line:493:5>
|     `-ReturnStmt 0x55c543990a68 <line:492:9, col:68>
|       `-CallExpr 0x55c543990a20 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c543990850 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c5439908d0 <col:21> 'const char *' lvalue ParmVar 0x55c5439608a0 'keyword' 'const char *'
|         |-BinaryOperator 0x55c5439909a0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55c543990950 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55c543990930 <col:30> 'const int' lvalue Var 0x55c54395aa28 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55c543990988 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55c543990968 <col:42> 'const int' lvalue Var 0x55c54395ab20 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55c5439909c0 <col:54> 'P' lvalue ParmVar 0x55c543965df0 'parser' 'P'
|         |-DeclRefExpr 0x55c5439909e0 <col:62> 'T1' lvalue ParmVar 0x55c543965e98 'x1' 'T1 &'
|         `-DeclRefExpr 0x55c543990a00 <col:66> 'T2' lvalue ParmVar 0x55c543965f38 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55c543966728 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55c543966140 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c5439661b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c543966238 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c543966688 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c543966300 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c543966380 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55c5439663f8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55c543966498 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55c543966538 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55c543990c08 <col:74, line:498:5>
|     |-CallExpr 0x55c543990b80 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c543990a90 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55c543990ad0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55c543990ae0 <col:30> 'const char *' lvalue ParmVar 0x55c543966300 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c543990b00 <col:39> 'int' lvalue ParmVar 0x55c543966380 'flags' 'int'
|     | |-DeclRefExpr 0x55c543990b20 <col:46> 'P' lvalue ParmVar 0x55c5439663f8 'parser' 'P'
|     | |-DeclRefExpr 0x55c543990b40 <col:54> 'T1' lvalue ParmVar 0x55c543966498 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55c543990b60 <col:58> 'T2' lvalue ParmVar 0x55c543966538 'x2' 'T2 &'
|     `-ReturnStmt 0x55c543990bf8 <line:497:9, col:17>
|       `-UnaryOperator 0x55c543990be0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c543990bd0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c543966a88 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55c5439667a8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c5439669e8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55c543966860 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c5439668d8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55c543990d50 <col:52, line:509:5>
|     `-ReturnStmt 0x55c543990d40 <line:508:9, col:44>
|       `-CallExpr 0x55c543990d08 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c543990c38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c543990ca8 <col:26> 'const char *' lvalue ParmVar 0x55c543966860 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c543990cc8 <col:35> 'int' 0
|         `-DeclRefExpr 0x55c543990ce8 <col:38> 'P' lvalue ParmVar 0x55c5439668d8 'parser' 'P'
|-FunctionTemplateDecl 0x55c543966d88 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55c543966af0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c543966ce8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55c543966ba0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c543966c18 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55c543990e90 <col:54, line:513:5>
|     `-ReturnStmt 0x55c543990e80 <line:512:9, col:52>
|       `-CallExpr 0x55c543990e48 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c543990d78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c543990de8 <col:26> 'const char *' lvalue ParmVar 0x55c543966ba0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c543990e08 <col:35> 'const int' lvalue Var 0x55c54395aa28 'mandatory' 'const int'
|         `-DeclRefExpr 0x55c543990e28 <col:46> 'P' lvalue ParmVar 0x55c543966c18 'parser' 'P'
|-FunctionTemplateDecl 0x55c543967088 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55c543966df0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c543966fe8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55c543966ea0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c543966f18 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55c543990fd0 <col:54, line:517:5>
|     `-ReturnStmt 0x55c543990fc0 <line:516:9, col:53>
|       `-CallExpr 0x55c543990f88 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c543990eb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c543990f28 <col:26> 'const char *' lvalue ParmVar 0x55c543966ea0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c543990f48 <col:35> 'const int' lvalue Var 0x55c54395ab20 'positional' 'const int'
|         `-DeclRefExpr 0x55c543990f68 <col:47> 'P' lvalue ParmVar 0x55c543966f18 'parser' 'P'
|-FunctionTemplateDecl 0x55c543967388 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55c5439670f0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c5439672e8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55c5439671a0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c543967218 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55c5439911c0 <col:55, line:521:5>
|     `-ReturnStmt 0x55c5439911b0 <line:520:9, col:65>
|       `-CallExpr 0x55c543991178 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c543990ff8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c543991068 <col:26> 'const char *' lvalue ParmVar 0x55c5439671a0 'keyword' 'const char *'
|         |-BinaryOperator 0x55c543991138 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55c5439910e8 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55c5439910c8 <col:35> 'const int' lvalue Var 0x55c54395aa28 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55c543991120 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55c543991100 <col:47> 'const int' lvalue Var 0x55c54395ab20 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55c543991158 <col:59> 'P' lvalue ParmVar 0x55c543967218 'parser' 'P'
|-FunctionTemplateDecl 0x55c543967758 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55c5439673f0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c5439676b8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55c5439674a0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c543967520 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55c543967598 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55c543991300 <col:63, line:526:5>
|     |-CallExpr 0x55c543991288 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c5439911d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55c543991218 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55c543991228 <col:35> 'const char *' lvalue ParmVar 0x55c5439674a0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c543991248 <col:44> 'int' lvalue ParmVar 0x55c543967520 'flags' 'int'
|     | `-DeclRefExpr 0x55c543991268 <col:51> 'P' lvalue ParmVar 0x55c543967598 'parser' 'P'
|     `-ReturnStmt 0x55c5439912f0 <line:525:9, col:17>
|       `-UnaryOperator 0x55c5439912d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c5439912c8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c543967ba8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55c5439677c8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c543967848 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c543967b08 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c543967908 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c543967980 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55c543967a28 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55c543991458 <col:58, line:541:5>
|     `-ReturnStmt 0x55c543991448 <line:540:9, col:39>
|       `-CallExpr 0x55c543991410 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c543991330 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c5439913b0 <col:21> 'const char *' lvalue ParmVar 0x55c543967908 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c5439913d0 <col:30> 'P' lvalue ParmVar 0x55c543967980 'parser' 'P'
|         `-DeclRefExpr 0x55c5439913f0 <col:38> 'T' lvalue ParmVar 0x55c543967a28 'x' 'T &'
|-FunctionTemplateDecl 0x55c543967ff8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55c543967c18 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c543967c98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c543967f58 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c543967d58 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c543967dd0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55c543967e78 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55c543991590 <col:60, line:545:5>
|     `-ReturnStmt 0x55c543991580 <line:544:9, col:41>
|       `-CallExpr 0x55c543991548 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c543991480 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c5439914e8 <col:23> 'const char *' lvalue ParmVar 0x55c543967d58 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c543991508 <col:32> 'P' lvalue ParmVar 0x55c543967dd0 'parser' 'P'
|         `-DeclRefExpr 0x55c543991528 <col:40> 'T' lvalue ParmVar 0x55c543967e78 'x' 'T &'
|-FunctionTemplateDecl 0x55c543968448 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55c543968068 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c5439680e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c5439683a8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c5439681a8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c543968220 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55c5439682c8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55c5439916c8 <col:60, line:549:5>
|     `-ReturnStmt 0x55c5439916b8 <line:548:9, col:41>
|       `-CallExpr 0x55c543991680 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c5439915b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c543991620 <col:23> 'const char *' lvalue ParmVar 0x55c5439681a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c543991640 <col:32> 'P' lvalue ParmVar 0x55c543968220 'parser' 'P'
|         `-DeclRefExpr 0x55c543991660 <col:40> 'T' lvalue ParmVar 0x55c5439682c8 'x' 'T &'
|-FunctionTemplateDecl 0x55c543968898 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55c5439684b8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c543968538 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c5439687f8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c5439685f8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c543968670 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55c543968718 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55c543991800 <col:61, line:553:5>
|     `-ReturnStmt 0x55c5439917f0 <line:552:9, col:42>
|       `-CallExpr 0x55c5439917b8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c5439916f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c543991758 <col:24> 'const char *' lvalue ParmVar 0x55c5439685f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c543991778 <col:33> 'P' lvalue ParmVar 0x55c543968670 'parser' 'P'
|         `-DeclRefExpr 0x55c543991798 <col:41> 'T' lvalue ParmVar 0x55c543968718 'x' 'T &'
|-FunctionTemplateDecl 0x55c543968d78 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55c543968908 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c543968988 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c543968cd8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55c543968a48 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c543968ac8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55c543968b40 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55c543968be8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55c543991978 <col:69, line:557:5>
|     `-ReturnStmt 0x55c543991968 <line:556:9, col:46>
|       `-CallExpr 0x55c543991928 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c543991828 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c5439918a8 <col:21> 'const char *' lvalue ParmVar 0x55c543968a48 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c5439918c8 <col:30> 'int' lvalue ParmVar 0x55c543968ac8 'flags' 'int'
|         |-DeclRefExpr 0x55c5439918e8 <col:37> 'P' lvalue ParmVar 0x55c543968b40 'parser' 'P'
|         `-DeclRefExpr 0x55c543991908 <col:45> 'T' lvalue ParmVar 0x55c543968be8 'x' 'T &'
|-FunctionTemplateDecl 0x55c543969088 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55c543968df0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c543968fe8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55c543968ea0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c543968f18 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55c543991ab8 <col:56, line:571:5>
|     `-ReturnStmt 0x55c543991aa8 <line:570:9, col:48>
|       `-CallExpr 0x55c543991a70 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c5439919a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c543991a10 <col:30> 'const char *' lvalue ParmVar 0x55c543968ea0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c543991a30 <col:39> 'int' 0
|         `-DeclRefExpr 0x55c543991a50 <col:42> 'P' lvalue ParmVar 0x55c543968f18 'parser' 'P'
|-FunctionTemplateDecl 0x55c543969418 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55c5439690f0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c543969378 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55c5439691a0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c543969220 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55c543969298 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55c543991c88 <col:67, line:576:5>
|     |-CallExpr 0x55c543991c10 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c543991ad0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55c543991b10 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55c543991b20 <col:39> 'const char *' lvalue ParmVar 0x55c5439691a0 'keyword' 'const char *'
|     | |-BinaryOperator 0x55c543991bd0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55c543991b80 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55c543991b40 <col:48> 'int' lvalue ParmVar 0x55c543969220 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55c543991bb8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55c543991b98 <col:56> 'const int' lvalue Var 0x55c54395ad10 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55c543991bf0 <col:68> 'P' lvalue ParmVar 0x55c543969298 'parser' 'P'
|     `-ReturnStmt 0x55c543991c78 <line:575:9, col:17>
|       `-UnaryOperator 0x55c543991c60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c543991c50 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c543969868 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55c543969488 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c543969508 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c5439697c8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c5439695c8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c543969640 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55c5439696e8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55c543991df8 <col:62, line:592:5>
|     `-ReturnStmt 0x55c543991de8 <line:591:9, col:51>
|       `-CallExpr 0x55c543991da8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c543991cb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c543991d28 <col:30> 'const char *' lvalue ParmVar 0x55c5439695c8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c543991d48 <col:39> 'int' 0
|         |-DeclRefExpr 0x55c543991d68 <col:42> 'P' lvalue ParmVar 0x55c543969640 'parser' 'P'
|         `-DeclRefExpr 0x55c543991d88 <col:50> 'T' lvalue ParmVar 0x55c5439696e8 'x' 'T &'
|-FunctionTemplateDecl 0x55c543969d48 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55c5439698d8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c543969958 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c543969ca8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55c543969a18 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c543969a98 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55c543969b10 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55c543969bb8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55c543991ff0 <col:73, line:597:5>
|     |-CallExpr 0x55c543991f70 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c543991e10 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55c543991e50 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55c543991e60 <col:39> 'const char *' lvalue ParmVar 0x55c543969a18 'keyword' 'const char *'
|     | |-BinaryOperator 0x55c543991f10 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55c543991ec0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55c543991e80 <col:48> 'int' lvalue ParmVar 0x55c543969a98 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55c543991ef8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55c543991ed8 <col:56> 'const int' lvalue Var 0x55c54395ad10 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55c543991f30 <col:68> 'P' lvalue ParmVar 0x55c543969b10 'parser' 'P'
|     | `-DeclRefExpr 0x55c543991f50 <col:76> 'T' lvalue ParmVar 0x55c543969bb8 'x' 'T &'
|     `-ReturnStmt 0x55c543991fe0 <line:596:9, col:17>
|       `-UnaryOperator 0x55c543991fc8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c543991fb8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c54396a2f8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55c543969dc0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c543969e38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c54396a258 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55c543969ef8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c543969f70 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55c54396a130 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55c543992160 <col:65, line:614:5>
|     `-ReturnStmt 0x55c543992150 <line:613:9, col:46>
|       `-CallExpr 0x55c543992110 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c543992020 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c543992090 <col:25> 'const char *' lvalue ParmVar 0x55c543969ef8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c5439920b0 <col:34> 'int' 0
|         |-DeclRefExpr 0x55c5439920d0 <col:37> 'P' lvalue ParmVar 0x55c543969f70 'parser' 'P'
|         `-DeclRefExpr 0x55c5439920f0 <col:45> 'Vector<T>' lvalue ParmVar 0x55c54396a130 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55c54396a728 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55c54396a368 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c54396a688 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55c54396a420 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c54396a570 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55c543992380 <col:55, line:618:5>
|     `-ReturnStmt 0x55c543992370 <line:617:9, col:55>
|       `-CallExpr 0x55c543992330 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c543992188 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c5439921f8 <col:25> 'const char *' lvalue ParmVar 0x55c54396a420 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c543992218 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55c5439922f0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55c543992310 <col:54> 'Vector<T>' lvalue ParmVar 0x55c54396a570 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55c54396acf8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55c54396a790 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c54396a808 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c54396ac58 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55c54396a8c8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c54396a948 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55c54396a9c0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55c54396ab10 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55c543992578 <col:76, line:623:5>
|     |-CallExpr 0x55c5439924f8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c543992398 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55c5439923d8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55c5439923e8 <col:34> 'const char *' lvalue ParmVar 0x55c54396a8c8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55c543992498 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55c543992448 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55c543992408 <col:43> 'int' lvalue ParmVar 0x55c54396a948 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55c543992480 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55c543992460 <col:51> 'const int' lvalue Var 0x55c54395ad10 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55c5439924b8 <col:63> 'P' lvalue ParmVar 0x55c54396a9c0 'parser' 'P'
|     | `-DeclRefExpr 0x55c5439924d8 <col:71> 'Vector<T>' lvalue ParmVar 0x55c54396ab10 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55c543992568 <line:622:9, col:17>
|       `-UnaryOperator 0x55c543992550 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c543992540 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c54396b238 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55c54396ad70 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c54396ade8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c54396b198 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55c54396aea8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c54396af28 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55c54396b070 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55c5439927e0 <col:66, line:627:5>
|     `-ReturnStmt 0x55c5439927d0 <line:626:9, col:59>
|       `-CallExpr 0x55c543992790 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c5439925a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c543992618 <col:25> 'const char *' lvalue ParmVar 0x55c54396aea8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c543992638 <col:34> 'int' lvalue ParmVar 0x55c54396af28 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55c543992750 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55c543992770 <col:58> 'Vector<T>' lvalue ParmVar 0x55c54396b070 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55c54396b2c8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55c543992860 <col:25, line:633:5>
|   `-ReturnStmt 0x55c543992850 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55c543992838 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55c543992808 <col:16> 'const bool' lvalue ->_status 0x55c543978d68
|         `-CXXThisExpr 0x55c5439927f8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55c54396b448 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55c54396b380 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55c543992948 <col:27, line:639:5>
|   |-BinaryOperator 0x55c5439928f0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55c543992878 <col:9> 'bool' lvalue ParmVar 0x55c54396b380 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55c5439928d8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55c5439928a8 <col:13> 'bool' lvalue ->_status 0x55c543978d68
|   |     `-CXXThisExpr 0x55c543992898 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55c543992938 <line:638:9, col:17>
|     `-UnaryOperator 0x55c543992920 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c543992910 <col:17> 'Args *' this
|-CXXMethodDecl 0x55c54396b5c8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55c54396b508 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55c543992a38 <col:39, line:644:5>
|   |-BinaryOperator 0x55c5439929e0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55c543992968 <col:9> 'bool' lvalue ParmVar 0x55c54396b508 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55c5439929c8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55c543992998 <col:13> 'const bool' lvalue ->_status 0x55c543978d68
|   |     `-CXXThisExpr 0x55c543992988 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55c543992a28 <line:643:9, col:17>
|     `-UnaryOperator 0x55c543992a10 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c543992a00 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55c54396b690 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55c543992ae0 <col:30, line:651:5>
|   `-ReturnStmt 0x55c543992ad0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55c543992ab8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55c543992a88 <col:16> 'bool' lvalue ->_read_status 0x55c54386ee80
|         `-ImplicitCastExpr 0x55c543992a68 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55c543992a58 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55c54396b7d8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55c54396b748 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55c543992be8 <col:32, line:658:5>
|   |-BinaryOperator 0x55c543992b90 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55c543992af8 <col:9> 'bool' lvalue ParmVar 0x55c54396b748 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55c543992b78 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55c543992b48 <col:13> 'bool' lvalue ->_read_status 0x55c54386ee80
|   |     `-ImplicitCastExpr 0x55c543992b28 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55c543992b18 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55c543992bd8 <line:657:9, col:17>
|     `-UnaryOperator 0x55c543992bc0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c543992bb0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55c54396b928 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55c54396b898 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55c543992cf8 <col:44, line:663:5>
|   |-BinaryOperator 0x55c543992ca0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55c543992c08 <col:9> 'bool' lvalue ParmVar 0x55c54396b898 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55c543992c88 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55c543992c58 <col:13> 'bool' lvalue ->_read_status 0x55c54386ee80
|   |     `-ImplicitCastExpr 0x55c543992c38 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55c543992c28 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55c543992ce8 <line:662:9, col:17>
|     `-UnaryOperator 0x55c543992cd0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c543992cc0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55c54396b9f0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55c54396bab8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55c54396bb80 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55c54396bc48 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55c54396bf58 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55c54396bce8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c54396beb8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55c54396bdc8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55c5439930b0 <col:19, line:706:5>
|     `-IfStmt 0x55c543993088 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55c543992df8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55c543992fb8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55c543992f88 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55c543992f48 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55c543992e50 <col:42> '<bound member function type>' ->simple_slot 0x55c54398c1d0
|       |     | `-CXXThisExpr 0x55c543992e40 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55c543992ee8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55c543992ea0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55c5436f8d78
|       |     | `-DeclRefExpr 0x55c543992e80 <col:55> 'T' lvalue ParmVar 0x55c54396bdc8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55c543992f28 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55c543993078 <line:705:13, col:34>
|         `-CallExpr 0x55c543993050 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55c543992fd8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55c543993030 <col:33> 'T' lvalue ParmVar 0x55c54396bdc8 'x' 'T &'
|-FunctionTemplateDecl 0x55c54396c228 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55c54396bfb8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c54396c188 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55c54396c098 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55c543993490 <col:31, line:717:5>
|     |-DeclStmt 0x55c5439931f0 <line:713:9, col:23>
|     | `-VarDecl 0x55c5439930d8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55c5439931c8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55c543993150 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55c5439931a8 <col:21> 'T' lvalue ParmVar 0x55c54396c098 'x' 'T &'
|     |-IfStmt 0x55c543993440 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55c5439932e8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55c543993420 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55c5439933c0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55c543993350 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c5438afe78 0x55c5438afa98 0x55c5438af6c8 0x55c5438af2e8 0x55c5438aef08 0x55c5438aeb38
|     |   | `-DeclRefExpr 0x55c543993330 <col:14> 'T *' lvalue Var 0x55c5439930d8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55c543993400 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55c543993478 <line:716:9, col:16>
|       `-DeclRefExpr 0x55c543993458 <col:16> 'T *' lvalue Var 0x55c5439930d8 's' 'T *'
|-FunctionTemplateDecl 0x55c54396c638 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55c54396c288 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c54396c308 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55c54396c598 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55c54396c3e8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55c54396c488 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55c5439937a0 <col:37, line:726:5>
|     |-IfStmt 0x55c543993730 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55c543993750 <line:723:13, col:26>
|     | | `-VarDecl 0x55c5439934f8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55c5439935e8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55c543993570 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55c5439935c8 <col:25> 'T' lvalue ParmVar 0x55c54396c3e8 'x' 'T &'
|     | |-DeclRefExpr 0x55c543993610 <col:16> 'T *' lvalue Var 0x55c5439934f8 's' 'T *'
|     | `-BinaryOperator 0x55c543993710 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55c5439936c0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55c543993650 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c5438afe78 0x55c5438afa98 0x55c5438af6c8 0x55c5438af2e8 0x55c5438aef08 0x55c5438aeb38
|     |   | `-DeclRefExpr 0x55c543993630 <col:14> 'T *' lvalue Var 0x55c5439934f8 's' 'T *'
|     |   `-DeclRefExpr 0x55c5439936f0 <col:18> 'const V' lvalue ParmVar 0x55c54396c488 'value' 'const V &'
|     `-ReturnStmt 0x55c543993790 <line:725:9, col:17>
|       `-UnaryOperator 0x55c543993778 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c543993768 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c54396ca38 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55c54396c6a0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c54396c998 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55c54396c750 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c54396c7d0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55c54396c878 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55c5439945c0 <col:65, line:737:5>
|     |-DeclStmt 0x55c543993838 <line:732:9, col:26>
|     | `-VarDecl 0x55c5439937d0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55c543994588 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55c5439945a8 <line:733:13, col:58>
|       | `-VarDecl 0x55c543993860 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55c543993a40 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55c543993a10 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55c5439939f8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55c5439939d8 <col:26, col:58> 'String' (CXXTemporary 0x55c5439939d8)
|       |           `-CXXMemberCallExpr 0x55c543993968 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55c5439938d8 <col:26> '<bound member function type>' ->find 0x55c54398b7e8
|       |             | `-CXXThisExpr 0x55c5439938c8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55c5439939a0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c543993908 <col:31> 'const char *' lvalue ParmVar 0x55c54396c750 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55c5439939b8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c543993928 <col:40> 'int' lvalue ParmVar 0x55c54396c7d0 'flags' 'int'
|       |             `-DeclRefExpr 0x55c543993948 <col:47> 'Args::Slot *' lvalue Var 0x55c5439937d0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55c543993af8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55c543993ae0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55c543993ac0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55c543993a90 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55c5436bbd48
|       |       `-ImplicitCastExpr 0x55c543993a78 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55c543993a58 <col:20> 'String' lvalue Var 0x55c543993860 'str' 'String'
|       `-CompoundStmt 0x55c543994568 <col:61, line:736:9>
|         |-DeclStmt 0x55c543993fb0 <line:734:13, col:76>
|         | `-VarDecl 0x55c543993b48 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55c543993f80 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55c543993ef0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55c543993f38 <col:60> 'T' lvalue ParmVar 0x55c54396c878 'variable' 'T &'
|         |     `-UnaryOperator 0x55c543993f68 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55c543993f58 <col:71> 'Args *' this
|         `-CallExpr 0x55c543994538 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55c543993fd8 <col:13> '<bound member function type>' ->postparse 0x55c54398b9f8
|           | `-CXXThisExpr 0x55c543993fc8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55c5439944f8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55c543994008 <col:23> 'T *' lvalue Var 0x55c543993b48 's' 'T *'
|           | `-CallExpr 0x55c5439944b8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55c543994290 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55c543994390 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55c5439943b0 <col:86> 'String' lvalue Var 0x55c543993860 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55c543994460 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55c5439943f0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c5438afe78 0x55c5438afa98 0x55c5438af6c8 0x55c5438af2e8 0x55c5438aef08 0x55c5438aeb38
|           |   | `-DeclRefExpr 0x55c5439943d0 <col:92> 'T *' lvalue Var 0x55c543993b48 's' 'T *'
|           |   `-UnaryOperator 0x55c5439944a0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55c543994490 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55c543994518 <col:103> 'Args::Slot *' lvalue Var 0x55c5439937d0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c54396cf88 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55c54396caa8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c54396cb28 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55c54396cee8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55c54396cbe8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c54396cc68 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55c54396cd08 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55c54396cda8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55c543995460 <col:88, line:745:5>
|     |-DeclStmt 0x55c543994658 <line:741:9, col:26>
|     | `-VarDecl 0x55c5439945f0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55c543994878 <line:742:9, col:55>
|     | `-VarDecl 0x55c543994680 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55c543994860 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55c543994830 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55c543994818 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55c5439947f8 <col:22, col:54> 'String' (CXXTemporary 0x55c5439947f8)
|     |           `-CXXMemberCallExpr 0x55c543994788 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55c5439946f8 <col:22> '<bound member function type>' ->find 0x55c54398b7e8
|     |             | `-CXXThisExpr 0x55c5439946e8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55c5439947c0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55c543994728 <col:27> 'const char *' lvalue ParmVar 0x55c54396cbe8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55c5439947d8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55c543994748 <col:36> 'int' lvalue ParmVar 0x55c54396cc68 'flags' 'int'
|     |             `-DeclRefExpr 0x55c543994768 <col:43> 'Args::Slot *' lvalue Var 0x55c5439945f0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55c543994c50 <line:743:9, col:72>
|     | `-VarDecl 0x55c5439948c8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55c543994c20 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55c543994b90 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55c543994bd8 <col:56> 'T' lvalue ParmVar 0x55c54396cd08 'variable' 'T &'
|     |     `-UnaryOperator 0x55c543994c08 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55c543994bf8 <col:67> 'Args *' this
|     `-CallExpr 0x55c543995430 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55c543994c78 <col:9> '<bound member function type>' ->postparse 0x55c54398b9f8
|       | `-CXXThisExpr 0x55c543994c68 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55c5439953f0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55c543994ca8 <col:19> 'T *' lvalue Var 0x55c5439948c8 's' 'T *'
|       | `-ParenExpr 0x55c5439953d0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55c5439953a0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55c543995388 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55c543995370 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55c543995350 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55c543995320 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55c5436bbd48
|       |     |       `-ImplicitCastExpr 0x55c543995308 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55c543994cc8 <col:25> 'String' lvalue Var 0x55c543994680 'str' 'String'
|       |     |-CallExpr 0x55c543995178 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55c543994f50 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55c543995050 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55c543995070 <col:89> 'String' lvalue Var 0x55c543994680 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55c543995120 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55c5439950b0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c5438afe78 0x55c5438afa98 0x55c5438af6c8 0x55c5438af2e8 0x55c5438aef08 0x55c5438aeb38
|       |     | | `-DeclRefExpr 0x55c543995090 <col:95> 'T *' lvalue Var 0x55c5439948c8 's' 'T *'
|       |     | `-UnaryOperator 0x55c543995160 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55c543995150 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55c5439952e8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55c5439952c8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55c543995298 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55c543995248 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55c5439951d8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c5438afe78 0x55c5438afa98 0x55c5438af6c8 0x55c5438af2e8 0x55c5438aef08 0x55c5438aeb38
|       |         | | `-DeclRefExpr 0x55c5439951b8 <col:109> 'T *' lvalue Var 0x55c5439948c8 's' 'T *'
|       |         | `-DeclRefExpr 0x55c543995278 <col:113> 'const V' lvalue ParmVar 0x55c54396cda8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55c5439952b8 <col:120> 'bool' true
|       `-DeclRefExpr 0x55c543995410 <col:128> 'Args::Slot *' lvalue Var 0x55c5439945f0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c54396d4b8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55c54396d000 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c54396d078 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c54396d418 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55c54396d138 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c54396d1b8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55c54396d230 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55c54396d2d8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55c543996058 <col:75, line:754:5>
|     |-DeclStmt 0x55c543995508 <line:749:9, col:26>
|     | `-VarDecl 0x55c5439954a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55c543996020 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55c543996040 <line:750:13, col:58>
|       | `-VarDecl 0x55c543995530 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55c543995710 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55c5439956e0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55c5439956c8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55c5439956a8 <col:26, col:58> 'String' (CXXTemporary 0x55c5439956a8)
|       |           `-CXXMemberCallExpr 0x55c543995638 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55c5439955a8 <col:26> '<bound member function type>' ->find 0x55c54398b7e8
|       |             | `-CXXThisExpr 0x55c543995598 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55c543995670 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c5439955d8 <col:31> 'const char *' lvalue ParmVar 0x55c54396d138 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55c543995688 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c5439955f8 <col:40> 'int' lvalue ParmVar 0x55c54396d1b8 'flags' 'int'
|       |             `-DeclRefExpr 0x55c543995618 <col:47> 'Args::Slot *' lvalue Var 0x55c5439954a0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55c5439957c8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55c5439957b0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55c543995790 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55c543995760 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55c5436bbd48
|       |       `-ImplicitCastExpr 0x55c543995748 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55c543995728 <col:20> 'String' lvalue Var 0x55c543995530 'str' 'String'
|       `-CompoundStmt 0x55c543996000 <col:61, line:753:9>
|         |-DeclStmt 0x55c543995ba0 <line:751:13, col:63>
|         | `-VarDecl 0x55c543995818 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55c543995b70 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55c543995ae0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55c543995b28 <col:47> 'T' lvalue ParmVar 0x55c54396d2d8 'variable' 'T &'
|         |     `-UnaryOperator 0x55c543995b58 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55c543995b48 <col:58> 'Args *' this
|         `-CallExpr 0x55c543995fd0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55c543995bc8 <col:13> '<bound member function type>' ->postparse 0x55c54398b9f8
|           | `-CXXThisExpr 0x55c543995bb8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55c543995f90 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55c543995bf8 <col:23> 'T *' lvalue Var 0x55c543995818 's' 'T *'
|           | `-CallExpr 0x55c543995f50 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55c543995de0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55c543995e28 <col:56> 'P' lvalue ParmVar 0x55c54396d230 'parser' 'P'
|           |   |-DeclRefExpr 0x55c543995e48 <col:64> 'String' lvalue Var 0x55c543995530 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55c543995ef8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55c543995e88 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c5438afe78 0x55c5438afa98 0x55c5438af6c8 0x55c5438af2e8 0x55c5438aef08 0x55c5438aeb38
|           |   | `-DeclRefExpr 0x55c543995e68 <col:70> 'T *' lvalue Var 0x55c543995818 's' 'T *'
|           |   `-UnaryOperator 0x55c543995f38 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55c543995f28 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55c543995fb0 <col:81> 'Args::Slot *' lvalue Var 0x55c5439954a0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c54396db18 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55c54396d530 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c54396d5a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55c54396d628 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55c54396da78 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55c54396d6f0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c54396d770 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55c54396d7e8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55c54396d888 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55c54396d928 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55c5439990c8 <col:98, line:762:5>
|     |-DeclStmt 0x55c5439960f0 <line:758:9, col:26>
|     | `-VarDecl 0x55c543996088 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55c543996310 <line:759:9, col:55>
|     | `-VarDecl 0x55c543996118 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55c5439962f8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55c5439962c8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55c5439962b0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55c543996290 <col:22, col:54> 'String' (CXXTemporary 0x55c543996290)
|     |           `-CXXMemberCallExpr 0x55c543996220 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55c543996190 <col:22> '<bound member function type>' ->find 0x55c54398b7e8
|     |             | `-CXXThisExpr 0x55c543996180 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55c543996258 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55c5439961c0 <col:27> 'const char *' lvalue ParmVar 0x55c54396d6f0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55c543996270 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55c5439961e0 <col:36> 'int' lvalue ParmVar 0x55c54396d770 'flags' 'int'
|     |             `-DeclRefExpr 0x55c543996200 <col:43> 'Args::Slot *' lvalue Var 0x55c543996088 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55c543998a10 <line:760:9, col:59>
|     | `-VarDecl 0x55c543996368 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55c5439989e0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55c543996670 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55c5439966b8 <col:43> 'T' lvalue ParmVar 0x55c54396d888 'variable' 'T &'
|     |     `-UnaryOperator 0x55c5439966e8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55c5439966d8 <col:54> 'Args *' this
|     `-CallExpr 0x55c543999098 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55c543998a38 <col:9> '<bound member function type>' ->postparse 0x55c54398b9f8
|       | `-CXXThisExpr 0x55c543998a28 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55c543999058 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55c543998a68 <col:19> 'T *' lvalue Var 0x55c543996368 's' 'T *'
|       | `-ParenExpr 0x55c543999038 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55c543999008 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55c543998ff0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55c543998fd8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55c543998fb8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55c543998f88 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55c5436bbd48
|       |     |       `-ImplicitCastExpr 0x55c543998f70 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55c543998a88 <col:25> 'String' lvalue Var 0x55c543996118 'str' 'String'
|       |     |-CallExpr 0x55c543998de0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55c543998c70 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55c543998cb8 <col:59> 'P' lvalue ParmVar 0x55c54396d7e8 'parser' 'P'
|       |     | |-DeclRefExpr 0x55c543998cd8 <col:67> 'String' lvalue Var 0x55c543996118 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55c543998d88 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55c543998d18 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c5438afe78 0x55c5438afa98 0x55c5438af6c8 0x55c5438af2e8 0x55c5438aef08 0x55c5438aeb38
|       |     | | `-DeclRefExpr 0x55c543998cf8 <col:73> 'T *' lvalue Var 0x55c543996368 's' 'T *'
|       |     | `-UnaryOperator 0x55c543998dc8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55c543998db8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55c543998f50 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55c543998f30 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55c543998f00 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55c543998eb0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55c543998e40 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c5438afe78 0x55c5438afa98 0x55c5438af6c8 0x55c5438af2e8 0x55c5438aef08 0x55c5438aeb38
|       |         | | `-DeclRefExpr 0x55c543998e20 <col:87> 'T *' lvalue Var 0x55c543996368 's' 'T *'
|       |         | `-DeclRefExpr 0x55c543998ee0 <col:91> 'const V' lvalue ParmVar 0x55c54396d928 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55c543998f20 <col:98> 'bool' true
|       `-DeclRefExpr 0x55c543999078 <col:106> 'Args::Slot *' lvalue Var 0x55c543996088 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c543975de8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55c54396db98 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c54396dc18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c54396dc98 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c543975d48 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c54396dd60 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c543975a40 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55c543975ab8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55c543975b58 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55c543975bf8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55c54399a0a8 <col:60, line:773:5>
|     |-DeclStmt 0x55c543999170 <line:767:9, col:26>
|     | `-VarDecl 0x55c543999108 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55c54399a070 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55c54399a090 <line:768:13, col:58>
|       | `-VarDecl 0x55c543999198 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55c543999378 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55c543999348 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55c543999330 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55c543999310 <col:26, col:58> 'String' (CXXTemporary 0x55c543999310)
|       |           `-CXXMemberCallExpr 0x55c5439992a0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55c543999210 <col:26> '<bound member function type>' ->find 0x55c54398b7e8
|       |             | `-CXXThisExpr 0x55c543999200 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55c5439992d8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c543999240 <col:31> 'const char *' lvalue ParmVar 0x55c54396dd60 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55c5439992f0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c543999260 <col:40> 'int' lvalue ParmVar 0x55c543975a40 'flags' 'int'
|       |             `-DeclRefExpr 0x55c543999280 <col:47> 'Args::Slot *' lvalue Var 0x55c543999108 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55c543999430 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55c543999418 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55c5439993f8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55c5439993c8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55c5436bbd48
|       |       `-ImplicitCastExpr 0x55c5439993b0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55c543999390 <col:20> 'String' lvalue Var 0x55c543999198 'str' 'String'
|       `-CompoundStmt 0x55c54399a048 <col:61, line:772:9>
|         |-DeclStmt 0x55c543999770 <line:769:13, col:66>
|         | `-VarDecl 0x55c543999488 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55c543999740 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55c5439996b0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55c5439996f8 <col:49> 'T1' lvalue ParmVar 0x55c543975b58 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55c543999728 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55c543999718 <col:61> 'Args *' this
|         |-DeclStmt 0x55c543999ae0 <line:770:13, col:66>
|         | `-VarDecl 0x55c5439997f8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55c543999ab0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55c543999a20 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55c543999a68 <col:49> 'T2' lvalue ParmVar 0x55c543975bf8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55c543999a98 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55c543999a88 <col:61> 'Args *' this
|         `-CallExpr 0x55c54399a018 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55c543999b08 <col:13> '<bound member function type>' ->postparse 0x55c54398b9f8
|           | `-CXXThisExpr 0x55c543999af8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55c543999fd8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55c543999b78 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55c543999b38 <col:23> 'T1 *' lvalue Var 0x55c543999488 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55c543999b58 <col:29> 'T2 *' lvalue Var 0x55c5439997f8 's2' 'T2 *'
|           | `-CallExpr 0x55c543999f90 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55c543999d60 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55c543999da8 <col:63> 'P' lvalue ParmVar 0x55c543975ab8 'parser' 'P'
|           |   |-DeclRefExpr 0x55c543999dc8 <col:71> 'String' lvalue Var 0x55c543999198 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55c543999e78 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55c543999e08 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c5438afe78 0x55c5438afa98 0x55c5438af6c8 0x55c5438af2e8 0x55c5438aef08 0x55c5438aeb38
|           |   | `-DeclRefExpr 0x55c543999de8 <col:77> 'T1 *' lvalue Var 0x55c543999488 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55c543999f38 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55c543999ec8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c5438afe78 0x55c5438afa98 0x55c5438af6c8 0x55c5438af2e8 0x55c5438aef08 0x55c5438aeb38
|           |   | `-DeclRefExpr 0x55c543999ea8 <col:82> 'T2 *' lvalue Var 0x55c5439997f8 's2' 'T2 *'
|           |   `-UnaryOperator 0x55c543999f78 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55c543999f68 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55c543999ff8 <col:94> 'Args::Slot *' lvalue Var 0x55c543999108 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c5439761d8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55c543975e68 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c543976138 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55c543975f20 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c543975fa0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55c543976018 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55c54399a5c0 <col:67, line:780:5>
|     |-DeclStmt 0x55c54399a140 <line:777:9, col:26>
|     | `-VarDecl 0x55c54399a0d8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55c54399a588 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55c54399a5a8 <line:778:13, col:58>
|       | `-VarDecl 0x55c54399a168 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55c54399a348 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55c54399a318 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55c54399a300 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55c54399a2e0 <col:26, col:58> 'String' (CXXTemporary 0x55c54399a2e0)
|       |           `-CXXMemberCallExpr 0x55c54399a270 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55c54399a1e0 <col:26> '<bound member function type>' ->find 0x55c54398b7e8
|       |             | `-CXXThisExpr 0x55c54399a1d0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55c54399a2a8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c54399a210 <col:31> 'const char *' lvalue ParmVar 0x55c543975f20 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55c54399a2c0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c54399a230 <col:40> 'int' lvalue ParmVar 0x55c543975fa0 'flags' 'int'
|       |             `-DeclRefExpr 0x55c54399a250 <col:47> 'Args::Slot *' lvalue Var 0x55c54399a0d8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55c54399a400 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55c54399a3e8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55c54399a3c8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55c54399a398 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55c5436bbd48
|       |       `-ImplicitCastExpr 0x55c54399a380 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55c54399a360 <col:20> 'String' lvalue Var 0x55c54399a168 'str' 'String'
|       `-CallExpr 0x55c54399a558 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55c54399a428 <col:13> '<bound member function type>' ->postparse 0x55c54398b9f8
|         | `-CXXThisExpr 0x55c54399a418 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55c54399a508 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55c54399a478 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55c54399a458 <col:23> 'P' lvalue ParmVar 0x55c543976018 'parser' 'P'
|         | |-DeclRefExpr 0x55c54399a4c0 <col:36> 'String' lvalue Var 0x55c54399a168 'str' 'String'
|         | `-UnaryOperator 0x55c54399a4f0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55c54399a4e0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55c54399a538 <col:49> 'Args::Slot *' lvalue Var 0x55c54399a0d8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c543976578 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55c543976248 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c5439764d8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55c543976300 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c543976380 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55c5439763f8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55c54399af30 <col:71, line:792:5>
|     |-DeclStmt 0x55c54399a658 <line:784:9, col:26>
|     | `-VarDecl 0x55c54399a5f0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55c54399a728 <line:785:9, col:29>
|     | `-VarDecl 0x55c54399a688 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55c54399a710 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55c54399a6f0 <col:28> 'int' 1
|     |-WhileStmt 0x55c54399ade0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55c54399ae00 <line:786:16, col:61>
|     | | `-VarDecl 0x55c54399a750 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55c54399a930 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55c54399a900 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55c54399a8e8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55c54399a8c8 <col:29, col:61> 'String' (CXXTemporary 0x55c54399a8c8)
|     | |           `-CXXMemberCallExpr 0x55c54399a858 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55c54399a7c8 <col:29> '<bound member function type>' ->find 0x55c54398b7e8
|     | |             | `-CXXThisExpr 0x55c54399a7b8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55c54399a890 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c54399a7f8 <col:34> 'const char *' lvalue ParmVar 0x55c543976300 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55c54399a8a8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c54399a818 <col:43> 'int' lvalue ParmVar 0x55c543976380 'flags' 'int'
|     | |             `-DeclRefExpr 0x55c54399a838 <col:50> 'Args::Slot *' lvalue Var 0x55c54399a5f0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55c54399a9e8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55c54399a9d0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55c54399a9b0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55c54399a980 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55c5436bbd48
|     | |       `-ImplicitCastExpr 0x55c54399a968 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55c54399a948 <col:23> 'String' lvalue Var 0x55c54399a750 'str' 'String'
|     | `-CompoundStmt 0x55c54399adb8 <col:64, line:790:9>
|     |   |-CallExpr 0x55c54399ab40 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55c54399aa10 <col:13> '<bound member function type>' ->postparse 0x55c54398b9f8
|     |   | | `-CXXThisExpr 0x55c54399aa00 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55c54399aaf0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55c54399aa60 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55c54399aa40 <col:23> 'P' lvalue ParmVar 0x55c5439763f8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55c54399aaa8 <col:36> 'String' lvalue Var 0x55c54399a750 'str' 'String'
|     |   | | `-UnaryOperator 0x55c54399aad8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55c54399aac8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55c54399ab20 <col:49> 'Args::Slot *' lvalue Var 0x55c54399a5f0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55c54399acd8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55c54399ab70 <col:13> 'int' lvalue Var 0x55c54399a688 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55c54399acc0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55c54399aca0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55c54399ac08 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55c54399abe8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55c54399abd0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55c54399ab90 <col:28> 'int' lvalue Var 0x55c54399a688 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55c54399abb0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55c54399ac88 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55c54399ac58 <col:49> 'bool' lvalue ->_read_status 0x55c54386ee80
|     |   |         `-ImplicitCastExpr 0x55c54399ac38 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55c54399ac28 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55c54399ad88 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55c54399acf8 <col:13> 'int' lvalue ParmVar 0x55c543976380 'flags' 'int'
|     |     `-UnaryOperator 0x55c54399ad70 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55c54399ad58 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55c54399ad38 <col:23> 'const int' lvalue Var 0x55c54395aa28 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55c54399af10 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55c54399ae48 <col:9> 'bool' lvalue ->_read_status 0x55c54386ee80
|       | `-ImplicitCastExpr 0x55c54399ae28 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55c54399ae18 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55c54399aef0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55c54399aed0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55c54399aeb8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55c54399ae78 <col:25> 'int' lvalue Var 0x55c54399a688 'read_status' 'int'
|           `-IntegerLiteral 0x55c54399ae98 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55c543976a58 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55c5439765e8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c543976668 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c5439769b8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55c543976728 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c5439767a8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55c543976820 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55c5439768c8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55c54399bec0 <col:84, line:805:5>
|     |-DeclStmt 0x55c54399afd8 <line:796:9, col:26>
|     | `-VarDecl 0x55c54399af70 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55c54399b0a8 <line:797:9, col:29>
|     | `-VarDecl 0x55c54399b008 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55c54399b090 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55c54399b070 <col:28> 'int' 1
|     |-DeclStmt 0x55c54399b3e0 <line:798:9, col:71>
|     | `-VarDecl 0x55c54399b0f8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55c54399b3b0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55c54399b320 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55c54399b368 <col:55> 'T' lvalue ParmVar 0x55c5439768c8 'variable' 'T &'
|     |     `-UnaryOperator 0x55c54399b398 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55c54399b388 <col:66> 'Args *' this
|     |-WhileStmt 0x55c54399bd70 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55c54399bd90 <line:799:16, col:61>
|     | | `-VarDecl 0x55c54399b408 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55c54399b5e8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55c54399b5b8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55c54399b5a0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55c54399b580 <col:29, col:61> 'String' (CXXTemporary 0x55c54399b580)
|     | |           `-CXXMemberCallExpr 0x55c54399b510 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55c54399b480 <col:29> '<bound member function type>' ->find 0x55c54398b7e8
|     | |             | `-CXXThisExpr 0x55c54399b470 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55c54399b548 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c54399b4b0 <col:34> 'const char *' lvalue ParmVar 0x55c543976728 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55c54399b560 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c54399b4d0 <col:43> 'int' lvalue ParmVar 0x55c5439767a8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55c54399b4f0 <col:50> 'Args::Slot *' lvalue Var 0x55c54399af70 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55c54399b6a0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55c54399b688 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55c54399b668 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55c54399b638 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55c5436bbd48
|     | |       `-ImplicitCastExpr 0x55c54399b620 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55c54399b600 <col:23> 'String' lvalue Var 0x55c54399b408 'str' 'String'
|     | `-CompoundStmt 0x55c54399bd48 <col:64, line:803:9>
|     |   |-CallExpr 0x55c54399bad0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55c54399b6c8 <col:13> '<bound member function type>' ->postparse 0x55c54398b9f8
|     |   | | `-CXXThisExpr 0x55c54399b6b8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55c54399ba90 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55c54399b6f8 <col:23> 'T *' lvalue Var 0x55c54399b0f8 's' 'T *'
|     |   | | `-CallExpr 0x55c54399ba50 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55c54399b8e0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55c54399b928 <col:56> 'P' lvalue ParmVar 0x55c543976820 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55c54399b948 <col:64> 'String' lvalue Var 0x55c54399b408 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55c54399b9f8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55c54399b988 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c5438afe78 0x55c5438afa98 0x55c5438af6c8 0x55c5438af2e8 0x55c5438aef08 0x55c5438aeb38
|     |   | |   | `-DeclRefExpr 0x55c54399b968 <col:70> 'T *' lvalue Var 0x55c54399b0f8 's' 'T *'
|     |   | |   `-UnaryOperator 0x55c54399ba38 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55c54399ba28 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55c54399bab0 <col:81> 'Args::Slot *' lvalue Var 0x55c54399af70 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55c54399bc68 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55c54399bb00 <col:13> 'int' lvalue Var 0x55c54399b008 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55c54399bc50 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55c54399bc30 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55c54399bb98 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55c54399bb78 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55c54399bb60 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55c54399bb20 <col:28> 'int' lvalue Var 0x55c54399b008 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55c54399bb40 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55c54399bc18 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55c54399bbe8 <col:49> 'bool' lvalue ->_read_status 0x55c54386ee80
|     |   |         `-ImplicitCastExpr 0x55c54399bbc8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55c54399bbb8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55c54399bd18 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55c54399bc88 <col:13> 'int' lvalue ParmVar 0x55c5439767a8 'flags' 'int'
|     |     `-UnaryOperator 0x55c54399bd00 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55c54399bce8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55c54399bcc8 <col:23> 'const int' lvalue Var 0x55c54395aa28 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55c54399bea0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55c54399bdd8 <col:9> 'bool' lvalue ->_read_status 0x55c54386ee80
|       | `-ImplicitCastExpr 0x55c54399bdb8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55c54399bda8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55c54399be80 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55c54399be60 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55c54399be48 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55c54399be08 <col:25> 'int' lvalue Var 0x55c54399b008 'read_status' 'int'
|           `-IntegerLiteral 0x55c54399be28 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55c543977038 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55c543976ad0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c543976b48 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c543976f98 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55c543976c08 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c543976c88 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55c543976d00 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55c543976e50 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55c54399ccc8 <col:87, line:821:5>
|     |-DeclStmt 0x55c54399bf70 <line:809:9, col:26>
|     | `-VarDecl 0x55c54399bf08 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55c54399c040 <line:810:9, col:29>
|     | `-VarDecl 0x55c54399bfa0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55c54399c028 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55c54399c008 <col:28> 'int' 1
|     |-DeclStmt 0x55c54399c288 <line:811:9, col:38>
|     | `-VarDecl 0x55c54399c170 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55c54399c260 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55c54399c1e8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55c54399c240 <col:29> 'Vector<T>' lvalue ParmVar 0x55c543976e50 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55c54399cb78 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55c54399cb98 <line:812:16, col:61>
|     | | `-VarDecl 0x55c54399c2b0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55c54399c490 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55c54399c460 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55c54399c448 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55c54399c428 <col:29, col:61> 'String' (CXXTemporary 0x55c54399c428)
|     | |           `-CXXMemberCallExpr 0x55c54399c3b8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55c54399c328 <col:29> '<bound member function type>' ->find 0x55c54398b7e8
|     | |             | `-CXXThisExpr 0x55c54399c318 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55c54399c3f0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c54399c358 <col:34> 'const char *' lvalue ParmVar 0x55c543976c08 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55c54399c408 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c54399c378 <col:43> 'int' lvalue ParmVar 0x55c543976c88 'flags' 'int'
|     | |             `-DeclRefExpr 0x55c54399c398 <col:50> 'Args::Slot *' lvalue Var 0x55c54399bf08 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55c54399c548 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55c54399c530 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55c54399c510 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55c54399c4e0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55c5436bbd48
|     | |       `-ImplicitCastExpr 0x55c54399c4c8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55c54399c4a8 <col:23> 'String' lvalue Var 0x55c54399c2b0 'str' 'String'
|     | `-CompoundStmt 0x55c54399cb40 <col:64, line:819:9>
|     |   |-DeclStmt 0x55c54399c608 <line:813:13, col:23>
|     |   | `-VarDecl 0x55c54399c570 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55c54399c5e8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55c54399c788 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55c54399c630 <col:13> '<bound member function type>' ->postparse 0x55c54398b9f8
|     |   | | `-CXXThisExpr 0x55c54399c620 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55c54399c730 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55c54399c680 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55c54399c660 <col:23> 'P' lvalue ParmVar 0x55c543976d00 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55c54399c6c8 <col:36> 'String' lvalue Var 0x55c54399c2b0 'str' 'String'
|     |   | | |-DeclRefExpr 0x55c54399c6e8 <col:41> 'T' lvalue Var 0x55c54399c570 'sx' 'T'
|     |   | | `-UnaryOperator 0x55c54399c718 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55c54399c708 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55c54399c768 <col:53> 'Args::Slot *' lvalue Var 0x55c54399bf08 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55c54399c8e0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55c54399c818 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55c54399c7e8 <col:17> 'bool' lvalue ->_read_status 0x55c54386ee80
|     |   | |   `-ImplicitCastExpr 0x55c54399c7c8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55c54399c7b8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55c54399c8b8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55c54399c850 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55c54399c830 <col:17> 'Vector<T> *' lvalue Var 0x55c54399c170 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55c54399c898 <col:30> 'T' lvalue Var 0x55c54399c570 'sx' 'T'
|     |   |-BinaryOperator 0x55c54399ca60 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55c54399c8f8 <col:13> 'int' lvalue Var 0x55c54399bfa0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55c54399ca48 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55c54399ca28 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55c54399c990 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55c54399c970 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55c54399c958 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55c54399c918 <col:28> 'int' lvalue Var 0x55c54399bfa0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55c54399c938 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55c54399ca10 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55c54399c9e0 <col:49> 'bool' lvalue ->_read_status 0x55c54386ee80
|     |   |         `-ImplicitCastExpr 0x55c54399c9c0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55c54399c9b0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55c54399cb10 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55c54399ca80 <col:13> 'int' lvalue ParmVar 0x55c543976c88 'flags' 'int'
|     |     `-UnaryOperator 0x55c54399caf8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55c54399cae0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55c54399cac0 <col:23> 'const int' lvalue Var 0x55c54395aa28 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55c54399cca8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55c54399cbe0 <col:9> 'bool' lvalue ->_read_status 0x55c54386ee80
|       | `-ImplicitCastExpr 0x55c54399cbc0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55c54399cbb0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55c54399cc88 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55c54399cc68 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55c54399cc50 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55c54399cc10 <col:25> 'int' lvalue Var 0x55c54399bfa0 'read_status' 'int'
|           `-IntegerLiteral 0x55c54399cc30 <col:40> 'int' 1
|-AccessSpecDecl 0x55c5439770b0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55c5439770d8 prev 0x55c543958d28 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55c5439771d0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55c5439772c0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55c54399cd00 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55c5439773b0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55c54399cd10 <col:25, line:830:9>
| |-CXXMethodDecl 0x55c5439774b0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55c543977560 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55c543977608 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55c543977608
| | `-ParmVarDecl 0x55c543977718 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55c543977ed8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55c543977ed8
|   `-ParmVarDecl 0x55c543977fe8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55c543977788 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55c5439778e8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55c543977ae0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55c543977990 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55c543977a08 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55c54399cef0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55c543977d98 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55c54399cd60 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55c54399cd20 <col:20> 'void *' lvalue ParmVar 0x55c543977990 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55c543977e00 '_slot' 'char *'
| | | `-CXXNewExpr 0x55c54399cde8 <col:32, col:45> 'char *' array Function 0x55c5434de9b8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55c54399cdd0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55c54399cda0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55c543977a08 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55c543977e60 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55c54399ceb0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55c54399ce70 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55c543977a08 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55c54399cf70 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55c543977be0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55c5439773b0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55c54399cff8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55c54399cfd8 <line:840:13, col:22> 'void' array Function 0x55c5434ded18 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55c54399cfc0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55c54399cf90 <col:22> 'char *' lvalue ->_slot 0x55c543977e00
| |         `-CXXThisExpr 0x55c54399cf80 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55c543977ce0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55c5439774b0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55c54399d1e8 <col:22, line:844:9>
| |   `-CallExpr 0x55c54399d150 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55c54399d138 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55c54399d118 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55c5435ea798 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55c54399d188 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55c54399d068 <col:20> 'void *' lvalue ->_ptr 0x55c543977d98
| |     |   `-CXXThisExpr 0x55c54399d058 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55c54399d1b8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55c54399d1a0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55c54399d0a8 <col:26> 'char *' lvalue ->_slot 0x55c543977e00
| |     |     `-CXXThisExpr 0x55c54399d098 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55c54399d1d0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55c54399d0e8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55c543977e60
| |         `-CXXThisExpr 0x55c54399d0d8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55c543977d98 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55c543977e00 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55c543977e60 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55c543978058 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55c543978058
| | `-ParmVarDecl 0x55c543978168 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55c543978208 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55c543978208
|   `-ParmVarDecl 0x55c543978318 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55c5439784b8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55c543978388 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55c543978428 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55c543978750 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55c543978948 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55c543978818 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55c543978ac8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55c54399d220 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55c54399d200 <col:20> 'T *' lvalue ParmVar 0x55c543978818 'ptr' 'T *'
|   | `-CompoundStmt 0x55c54399d270 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55c543978a18 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55c5439774b0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55c54399d420 <col:22, line:857:9>
|   |   `-CallExpr 0x55c54399d3f0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55c54399d280 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55c5436a2ec8 0x55c54364d1f8
|   |     |-CXXOperatorCallExpr 0x55c54399d380 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55c54399d310 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c5438afe78 0x55c5438afa98 0x55c5438af6c8 0x55c5438af2e8 0x55c5438aef08 0x55c5438aeb38
|   |     | `-MemberExpr 0x55c54399d2e0 <col:29> 'T *' lvalue ->_ptr 0x55c543978ac8
|   |     |   `-CXXThisExpr 0x55c54399d2d0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55c54399d3c0 <col:35> 'T' lvalue ->_slot 0x55c543978b28
|   |       `-CXXThisExpr 0x55c54399d3b0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55c543978ac8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55c543978b28 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55c543978b90 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55c543978c90 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55c543978ce0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c543978c70 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55c543978c50 <col:31> 'int' 48
|-FieldDecl 0x55c543978d08 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55c543978d68 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55c543978dc8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55c543978f00 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55c54398b090 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55c54398b0f0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55c54398b1a0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55c54398b3c8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55c54398b2d0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55c54398b518 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55c54398b488 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55c54398b7e8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55c54398b5d8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55c54398b658 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55c54398b700 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55c54398b9f8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55c54398b8b0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55c54398b928 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55c54398bac8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55c54398bc18 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55c54398bb80 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55c54398bfa8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55c54398bcd8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55c54398bd58 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55c54398be00 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55c54398beb8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55c54398c1d0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55c54398c080 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55c54398c0f8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55c54398c4e8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55c54398c280 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55c54398c448 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55c54398c358 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class AnnoArg
         0 |   int size
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c5439b7e50 <../dummy_inc/click/args.hh:1294:1, line:1301:1> line:1294:7 referenced class AnnoArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c5439b7f68 <col:1, col:7> col:7 implicit referenced class AnnoArg
|-AccessSpecDecl 0x55c5439b7ff8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55c5439b8108 <line:1295:5, line:1297:5> line:1295:5 used AnnoArg 'void (int)'
| |-ParmVarDecl 0x55c5439b8038 <col:13, col:17> col:17 used s 'int'
| |-CXXCtorInitializer Field 0x55c5439b8458 'size' 'int'
| | `-ImplicitCastExpr 0x55c5439b8520 <line:1296:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55c5439b84e0 <col:16> 'int' lvalue ParmVar 0x55c5439b8038 's' 'int'
| `-CompoundStmt 0x55c5439b8568 <col:19, line:1297:5>
|-CXXMethodDecl 0x55c5439b8360 <line:1298:5, col:83> col:10 parse 'bool (const String &, int &, const ArgContext &)'
| |-ParmVarDecl 0x55c5439b81c8 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x55c5439b8248 <col:35, col:40> col:40 result 'int &'
| `-ParmVarDecl 0x55c5439b82c0 <col:48, col:73> col:66 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55c5439b84c0 <col:73> 'const ArgContext' lvalue Var 0x55c54399d448 'blank_args' 'const ArgContext'
|-AccessSpecDecl 0x55c5439b8418 <line:1299:3, col:10> col:3 private
|-FieldDecl 0x55c5439b8458 <line:1300:5, col:9> col:9 referenced size 'int'
|-CXXConstructorDecl 0x55c5439e9228 <line:1294:7> col:7 implicit constexpr AnnoArg 'void (const AnnoArg &)' inline default trivial noexcept-unevaluated 0x55c5439e9228
| `-ParmVarDecl 0x55c5439e9338 <col:7> col:7 'const AnnoArg &'
|-CXXConstructorDecl 0x55c5439e93d8 <col:7> col:7 implicit used constexpr AnnoArg 'void (AnnoArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55c5439e94e8 <col:7> col:7 used 'AnnoArg &&'
| |-CXXCtorInitializer Field 0x55c5439b8458 'size' 'int'
| | `-ImplicitCastExpr 0x55c5439e9d08 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55c5439e9cc0 <col:7> 'int' xvalue .size 0x55c5439b8458
| |     `-CXXStaticCastExpr 0x55c5439e9c90 <col:7> 'AnnoArg' xvalue static_cast<class AnnoArg &&> <NoOp>
| |       `-DeclRefExpr 0x55c5439e9c60 <col:7> 'AnnoArg' lvalue ParmVar 0x55c5439e94e8 '' 'AnnoArg &&'
| `-CompoundStmt 0x55c5439e9d50 <col:7>
`-CXXDestructorDecl 0x55c5439e9588 <col:7> col:7 implicit referenced ~AnnoArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.AnnoArg = type { i32 }
  NonVirtualBaseLLVMType:%class.AnnoArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c5436abbf0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c5436abd08 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55c5436abd98 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55c5436abe68 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55c5436abf50 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55c5436ac168 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55c5436ac010 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c5436ac318 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55c5436ac220 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55c5436ac460 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55c5436ac3d0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55c5436ac5a8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55c5436ac518 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c5436ac6f0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55c5436ac660 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c5436ac7b8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55c5436ac900 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55c5436ac870 <col:28> col:31 'int'
|-CXXMethodDecl 0x55c5436ac9c8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55c5436acb10 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55c5436aca80 <col:28> col:31 'int'
|-CXXMethodDecl 0x55c5436acc88 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55c5436acbc8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c5436acdd0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55c5436acd40 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c5436ace98 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55c5436ad058 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55c5436acf48 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55c5436acfc0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c5436ad2a8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55c5436ad118 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c5436ad190 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55c5436ad358 <col:86> "" ""
|-CXXMethodDecl 0x55c5436ad5c8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55c5436ad438 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55c5436ad4b0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c5436ad778 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55c5436ad688 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55c5436ad928 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55c5436ad830 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55c5436adbf8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55c5436ad9e0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55c5436ada58 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55c5436adad0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c5436aded8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55c5436adcc0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55c5436add38 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c5436addb0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55c5436adf90 <col:115> "" ""
|-AccessSpecDecl 0x55c5436ae000 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55c5436ae038 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c5436af550 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55c5436af550
| `-ParmVarDecl 0x55c5436af658 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55c5436af6f8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55c5436af6f8
| `-ParmVarDecl 0x55c5436af808 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55c5436e4e38 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55c5438d6c30 <col:7>
|-CXXConstructorDecl 0x55c5436e4f10 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55c5436e4f10
| `-ParmVarDecl 0x55c5436e5028 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55c5436e5098 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55c5436e5098
| `-ParmVarDecl 0x55c5436e51a8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55c5438d9630 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c5438c57d8 prev 0x55c5438ba9e0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c5438c58d0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55c5438c59c0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55c5438c5ae8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55c5438c5c68 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55c5438c5de8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55c5438c5f68 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55c5438d6d98 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55c5438d7608 <col:11>
|-CXXDestructorDecl 0x55c5438d6e70 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55c5438d6fa8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55c5438d6fa8
| `-ParmVarDecl 0x55c5438d70b8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55c5438d7158 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55c5438d7158
| `-ParmVarDecl 0x55c5438d7268 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55c5438da028 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55c5438da138 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55c5438da3b8 <col:11>
|   `-ReturnStmt 0x55c5438da3a8 <col:11>
|     `-UnaryOperator 0x55c5438da390 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c5438da380 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55c5438da1a8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55c5438da1a8
  `-ParmVarDecl 0x55c5438da2b8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c5438c5fd0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c5438c60e8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55c5438c6188 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55c5438c61f0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55c5438c6258 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55c5438c62c0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55c5438c6320 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55c5438c63e0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55c5438c6440 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55c5438c64a0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55c5438d6ca8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55c5438c6188 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55c5438d7618 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55c5438d7670 <col:12>
|-CXXConstructorDecl 0x55c5438d72d8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55c5438d72d8
| `-ParmVarDecl 0x55c5438d73e8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55c5438d7488 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55c5438d7488
| `-ParmVarDecl 0x55c5438d7598 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55c5438d9710 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c5438b40f0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55c5438b4208 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55c5438b4298 <col:16, col:22> col:16 public
|-EnumDecl 0x55c5438b42c0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55c5438b43c0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55c5438b44a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438b43a0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55c5438b4380 <col:21> 'int' 28
| `-EnumConstantDecl 0x55c5438b4450 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55c5438b44b8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c5438b4430 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55c5438b4410 <col:22> 'int' 64
|-CXXMethodDecl 0x55c5438b47f8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55c5438b44e0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c5438b4560 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55c5438b45d8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c5438b4650 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c5438b48b8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55c5438b4ab8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55c5438b4930 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55c5438b49a8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c5438b4b68 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55c5438b4cc8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55c5438b4bd8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c5438b4d70 <col:72> warn_unused_result ""
|-TypedefDecl 0x55c5438b50d0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55c5438b5060 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55c5438b5000 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55c5438b4fc0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55c54338b2d0 'void'
|       |-PointerType 0x55c543634490 'unsigned char *'
|       | `-BuiltinType 0x55c54338b3d0 'unsigned char'
|       |-TypedefType 0x55c543430a00 'size_t' sugar
|       | |-Typedef 0x55c5433fbb20 'size_t'
|       | `-BuiltinType 0x55c54338b430 'unsigned long'
|       `-PointerType 0x55c54338bad0 'void *'
|         `-BuiltinType 0x55c54338b2d0 'void'
|-CXXMethodDecl 0x55c5438b5548 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55c5438b5140 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55c5438b51b8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c5438b5250 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55c5438b52d0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55c5438cfc40 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55c5438cfc28 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55c5438cfbf0 <col:58> 'int' 0
| |-ParmVarDecl 0x55c5438b5350 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55c5438cfc68 <col:76> 'int' 0
| |-ParmVarDecl 0x55c5438b53d0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55c5438cfc88 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55c5438b5618 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55c5438b5698 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55c5438b5758 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55c5438b57f8 <col:20>
| `-OptimizeNoneAttr 0x55c5438b5850 <col:30>
|-CXXMethodDecl 0x55c5438b58c8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55c5438b5968 <col:20>
| `-OptimizeNoneAttr 0x55c5438b59c0 <col:30>
|-CXXMethodDecl 0x55c5438b5a38 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55c5438b5ad8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55c5438b5b88 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55c5438b5c28 <col:20>
| |-OptimizeNoneAttr 0x55c5438b5c80 <col:30>
| `-WarnUnusedResultAttr 0x55c5438b5ca8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55c5438b5d00 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55c5438b5da0 <col:20>
| `-OptimizeNoneAttr 0x55c5438b5df8 <col:30>
|-CXXMethodDecl 0x55c5438b5e48 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55c5438b5ee8 <col:20>
| `-OptimizeNoneAttr 0x55c5438b5f40 <col:30>
|-CXXMethodDecl 0x55c5438b5f88 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55c5438b6028 <col:20>
| `-OptimizeNoneAttr 0x55c5438b6080 <col:30>
|-CXXMethodDecl 0x55c5438b60c8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55c5438b6188 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55c5438b6250 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55c5438b6318 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55c5438b63d8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55c5438b64f8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55c5438cfd50 <col:54, line:99:5>
|   `-ReturnStmt 0x55c5438cfd40 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55c5438cfd28 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55c5438cfcf8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55c5438c67d8
|         `-CXXThisExpr 0x55c5438cfce8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55c5438b6698 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55c5438b65a8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55c5438cfe00 <col:67, line:103:5>
|   `-BinaryOperator 0x55c5438cfde0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55c5438cfd78 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55c5438c67d8
|     | `-CXXThisExpr 0x55c5438cfd68 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55c5438cfdc8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55c5438cfda8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55c5438b65a8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55c5438b6790 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55c5438cfe80 <col:33, line:107:5>
|   `-ReturnStmt 0x55c5438cfe70 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55c5438cfe58 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55c5438cfe28 <col:16> 'void *' lvalue ->_destructor_argument 0x55c5438c6840
|         `-CXXThisExpr 0x55c5438cfe18 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55c5438b6850 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55c5438d04b0 <col:25, line:113:5>
|   |-ParenExpr 0x55c5438d01f8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55c5438d01c8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55c5438cff38 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55c5438cff10 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55c5438cfed8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55c5438cfea8 <col:24> '<bound member function type>' ->shared 0x55c5438b58c8
|   |   |       `-ImplicitCastExpr 0x55c5438cfef8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55c5438cfe98 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55c5438cff98 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c5438cff78 <col:42> 'int' 0
|   |   `-CallExpr 0x55c5438d0128 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55c5438d0110 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c5438d00f0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c543427810 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c5438d0168 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d0008 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55c5438d0180 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d0030 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c5438d0198 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c5438d0068 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55c5438d01b0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c5438d00d8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c5438d00c0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c5438d0088 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55c5438d03f8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55c5438d0228 <col:2> 'unsigned char *' lvalue ->_head 0x55c5438c65e0
|   | | `-CXXThisExpr 0x55c5438d0218 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55c5438d03e0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55c5438d03c0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55c5438d0268 <col:10> 'unsigned char *' lvalue ->_data 0x55c5438c6648
|   |     | `-CXXThisExpr 0x55c5438d0258 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55c5438d03a8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55c5438d0388 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55c5438d02a8 <col:18> 'unsigned char *' lvalue ->_tail 0x55c5438c66b0
|   |         | `-CXXThisExpr 0x55c5438d0298 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55c5438d0370 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55c5438d0350 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55c5438d02e8 <col:26> 'unsigned char *' lvalue ->_end 0x55c5438c6718
|   |             | `-CXXThisExpr 0x55c5438d02d8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55c5438d0338 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55c5438d0318 <col:33> 'int' 0
|   `-BinaryOperator 0x55c5438d0490 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55c5438d0428 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55c5438c67d8
|     | `-CXXThisExpr 0x55c5438d0418 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55c5438d0478 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55c5438d0458 <col:16> 'int' 0
|-CXXMethodDecl 0x55c5438b6990 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55c5438b6900 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c5438b6a38 <col:20>
| |-OptimizeNoneAttr 0x55c5438b6a90 <col:30>
| `-WarnUnusedResultAttr 0x55c5438b6ab8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55c5438b6b88 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55c5438b6af8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c5438b6c30 <col:20>
| |-OptimizeNoneAttr 0x55c5438b6c88 <col:30>
| `-WarnUnusedResultAttr 0x55c5438b6cb0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55c5438b6de8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55c5438b6cf0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c5438b6e90 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55c5438b6f90 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55c5438b6f00 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c5438b7038 <col:20>
| `-OptimizeNoneAttr 0x55c5438b7090 <col:30>
|-CXXMethodDecl 0x55c5438b7158 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55c5438b70c8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c5438b7200 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55c5438b7300 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55c5438b7270 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c5438b73a8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55c5438b74a8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55c5438b7418 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c5438b7550 <col:20>
| `-OptimizeNoneAttr 0x55c5438b75a8 <col:30>
|-CXXMethodDecl 0x55c5438b7738 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55c5438b75e8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55c5438b7660 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55c5438cfca8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55c5438b77e8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55c5438b79e8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55c5438b7860 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55c5438b78d8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c5438b7bf8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55c5438b7aa8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55c5438b7b20 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c5438b7e08 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55c5438b7cb8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55c5438b7d38 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55c5438cfcb8 <col:39> 'int' 0
|-CXXMethodDecl 0x55c5438b7ed8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55c5438b7fa0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55c5438b8068 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55c5438b8128 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55c5438b81f0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55c5438b8338 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55c5438b82a8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55c5438b8508 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55c5438b83f8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55c5438b8470 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c5438b85d8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55c5438b8698 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55c5438b8738 <col:20>
| `-OptimizeNoneAttr 0x55c5438b8790 <col:30>
|-CXXMethodDecl 0x55c5438b87e0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55c5438b8880 <col:20>
| `-OptimizeNoneAttr 0x55c5438b88d8 <col:30>
|-CXXMethodDecl 0x55c5438b8928 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55c5438b89e8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55c5438b8ab0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55c5438b8b50 <col:20>
| `-OptimizeNoneAttr 0x55c5438b8ba8 <col:30>
|-CXXMethodDecl 0x55c5438b8cf8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55c5438b8be8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55c5438b8c60 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c5438b8e48 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55c5438b8db8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c5438b8f20 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55c5438b8fe0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55c5438b9080 <col:20>
| `-OptimizeNoneAttr 0x55c5438b90d8 <col:30>
|-CXXMethodDecl 0x55c5438b9128 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55c5438b91c8 <col:20>
| `-OptimizeNoneAttr 0x55c5438b9220 <col:30>
|-CXXMethodDecl 0x55c5438b9270 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55c5438b9338 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55c5438b93d8 <col:20>
| `-OptimizeNoneAttr 0x55c5438b9430 <col:30>
|-CXXMethodDecl 0x55c5438b9478 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55c5438b9598 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55c5438b9708 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55c5438b9648 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55c5438b97f8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55c5438b9898 <col:20>
| `-OptimizeNoneAttr 0x55c5438b98f0 <col:30>
|-CXXMethodDecl 0x55c5438b9940 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55c5438b9a00 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55c5438b9c38 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55c5438b9ab0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55c5438b9b28 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c5438b9ce8 <col:20>
| `-OptimizeNoneAttr 0x55c5438b9d40 <col:30>
|-CXXMethodDecl 0x55c5438b9de8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55c5438b9e88 <col:20>
| `-OptimizeNoneAttr 0x55c5438b9ee0 <col:30>
|-CXXMethodDecl 0x55c5438b9f30 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55c5438b9fd0 <col:20>
| `-OptimizeNoneAttr 0x55c5438ba028 <col:30>
|-CXXMethodDecl 0x55c5438ba070 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55c5438ba110 <col:20>
| `-OptimizeNoneAttr 0x55c5438ba168 <col:30>
|-CXXMethodDecl 0x55c5438ba268 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55c5438ba1a0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55c5438ba310 <col:20>
| `-OptimizeNoneAttr 0x55c5438ba368 <col:30>
|-CXXMethodDecl 0x55c5438ba528 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55c5438ba3a0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55c5438ba418 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c5438ba5d8 <col:20>
| `-OptimizeNoneAttr 0x55c5438ba630 <col:30>
|-CXXMethodDecl 0x55c5438ba6d8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55c5438ba7f8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55c5438ba918 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55c5438ba9b8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55c5438ba9e0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55c5438bab08 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55c5438baba8 <col:20>
| `-OptimizeNoneAttr 0x55c5438bac00 <col:30>
|-CXXMethodDecl 0x55c5438baca8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55c5438bad48 <col:20>
| `-OptimizeNoneAttr 0x55c5438bada0 <col:30>
|-AccessSpecDecl 0x55c5438badc8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55c5438badf0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55c5438baef0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55c5438baf40 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c5438baed0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55c5438baeb0 <col:14> 'int' 48
|-CXXMethodDecl 0x55c5438bafa8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55c5438bb048 <col:20>
| `-OptimizeNoneAttr 0x55c5438bb0a0 <col:30>
|-CXXMethodDecl 0x55c5438bb118 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55c5438bb1b8 <col:20>
| `-OptimizeNoneAttr 0x55c5438bb210 <col:30>
|-CXXMethodDecl 0x55c5438bb2d8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55c5438bb248 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55c5438bb478 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55c5438bb618 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55c5438bb528 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55c5438bb6c0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55c5438bb7c0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c5438bbb70 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438bb7a0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55c5438bb780 <col:9> 'int' 0
| |-EnumConstantDecl 0x55c5438bb850 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c5438bbb88 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438bb830 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55c5438bb810 <col:14> 'int' 1
| |-EnumConstantDecl 0x55c5438bb8e0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c5438bbba0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438bb8c0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55c5438bb8a0 <col:14> 'int' 2
| |-EnumConstantDecl 0x55c5438bb970 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c5438bbbb8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438bb950 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55c5438bb930 <col:14> 'int' 3
| |-EnumConstantDecl 0x55c5438bba00 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c5438bbbd0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438bb9e0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55c5438bb9c0 <col:13> 'int' 4
| |-EnumConstantDecl 0x55c5438bba90 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c5438bbbe8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438bba70 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55c5438bba50 <col:13> 'int' 5
| `-EnumConstantDecl 0x55c5438bbb20 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55c5438bbc00 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c5438bbb00 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55c5438bbae0 <col:14> 'int' 6
|-CXXMethodDecl 0x55c5438bbc68 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55c5438bbd08 <col:20>
| `-OptimizeNoneAttr 0x55c5438bbd60 <col:30>
|-CXXMethodDecl 0x55c5438bbe58 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55c5438bbd98 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55c5438bbf00 <col:20>
| `-OptimizeNoneAttr 0x55c5438bbf58 <col:30>
|-CXXMethodDecl 0x55c5438bbfc8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55c5438bc0f0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55c5438bc268 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55c5438bc1a0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55c5438bc330 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55c5438bc3f8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55c5438bc538 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55c5438bc4a8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55c5438bc5e0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55c5438bc6e0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55c5438bc8e0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438bc6c0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55c5438bc6a0 <col:23> 'int' 0
| |-EnumConstantDecl 0x55c5438bc770 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55c5438bc8f8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438bc750 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55c5438bc730 <col:45> 'int' 4
| |-EnumConstantDecl 0x55c5438bc800 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55c5438bc910 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438bc7e0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55c5438bc7c0 <col:24> 'int' 0
| `-EnumConstantDecl 0x55c5438bc890 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55c5438bc928 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c5438bc870 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55c5438bc850 <col:47> 'int' 16
|-CXXMethodDecl 0x55c5438bc988 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55c5438bcaf8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55c5438bca38 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55c5438bcba0 <col:20>
| `-OptimizeNoneAttr 0x55c5438bcbf8 <col:30>
|-CXXMethodDecl 0x55c5438bcc48 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55c5438d05d0 <col:18, col:36>
|   `-ReturnStmt 0x55c5438d05c0 <col:20, col:33>
|     `-ImplicitCastExpr 0x55c5438d05a8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55c5438d0588 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55c5438d0558 <col:27> '<bound member function type>' ->xanno 0x55c5438baca8
|           `-CXXThisExpr 0x55c5438d0548 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55c5438bcd40 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55c5438d06e0 <col:30, col:48>
|   `-ReturnStmt 0x55c5438d06d0 <col:32, col:45>
|     `-ImplicitCastExpr 0x55c5438d06b8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55c5438d0698 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55c5438d0668 <col:39> '<bound member function type>' ->xanno 0x55c5438bab08
|           `-CXXThisExpr 0x55c5438d0658 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55c5438bce28 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55c5438d0878 <col:24, col:50>
|   `-ReturnStmt 0x55c5438d0868 <col:26, col:47>
|     `-UnaryOperator 0x55c5438d0850 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55c5438d0830 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55c5438d0818 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c5438d07c8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55c5438c5ae8
|         |   `-CXXMemberCallExpr 0x55c5438d07a8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55c5438d0778 <col:34> '<bound member function type>' ->xanno 0x55c5438baca8
|         |       `-CXXThisExpr 0x55c5438d0768 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55c5438d07f8 <col:46> 'int' 0
|-CXXMethodDecl 0x55c5438bcf30 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55c5438d0a48 <col:36, col:62>
|   `-ReturnStmt 0x55c5438d0a38 <col:38, col:59>
|     `-UnaryOperator 0x55c5438d0a20 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55c5438d0a00 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55c5438d09e8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c5438d0960 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55c5438c5ae8
|         |   `-CXXMemberCallExpr 0x55c5438d0940 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55c5438d0910 <col:46> '<bound member function type>' ->xanno 0x55c5438bab08
|         |       `-CXXThisExpr 0x55c5438d0900 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55c5438d0990 <col:58> 'int' 0
|-CXXMethodDecl 0x55c5438bd048 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55c5438d0be0 <col:26, col:53>
|   `-ReturnStmt 0x55c5438d0bd0 <col:28, col:50>
|     `-UnaryOperator 0x55c5438d0bb8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55c5438d0b98 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55c5438d0b80 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c5438d0b30 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55c5438c5de8
|         |   `-CXXMemberCallExpr 0x55c5438d0b10 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55c5438d0ae0 <col:36> '<bound member function type>' ->xanno 0x55c5438baca8
|         |       `-CXXThisExpr 0x55c5438d0ad0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55c5438d0b60 <col:49> 'int' 0
|-CXXMethodDecl 0x55c5438bd168 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55c5438d0db8 <col:38, col:65>
|   `-ReturnStmt 0x55c5438d0da8 <col:40, col:62>
|     `-UnaryOperator 0x55c5438d0d90 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55c5438d0d70 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55c5438d0d58 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c5438d0cc8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55c5438c5de8
|         |   `-CXXMemberCallExpr 0x55c5438d0ca8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55c5438d0c78 <col:48> '<bound member function type>' ->xanno 0x55c5438bab08
|         |       `-CXXThisExpr 0x55c5438d0c68 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55c5438d0cf8 <col:61> 'int' 0
|-CXXMethodDecl 0x55c5438bd318 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55c5438bd220 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55c5438d1488 <col:34, line:463:5>
|   |-ParenExpr 0x55c5438d12d0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55c5438d12a0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55c5438d0f08 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c5438d0ed8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c5438d0e28 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c5438d0e10 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c5438d0dd0 <col:23> 'int' lvalue ParmVar 0x55c5438bd220 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c5438d0df0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c5438d0eb8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c5438d0e88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c5438d0e48 <col:33> 'int' lvalue ParmVar 0x55c5438bd220 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55c5438d0ea0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55c5438d0e68 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c5438baef0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55c5438d0f68 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c5438d0f48 <col:56> 'int' 0
|   |   `-CallExpr 0x55c5438d1200 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55c5438d11e8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c5438d11c8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c543427810 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c5438d1240 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d1058 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55c5438d1258 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d1088 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c5438d1270 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c5438d10c0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55c5438d1288 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c5438d11b0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c5438d1198 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c5438d1158 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55c5438d1478 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55c5438d1460 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55c5438d1440 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55c5438d1410 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c5438d13c0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55c5438c5ae8
|         |   `-CXXMemberCallExpr 0x55c5438d13a0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55c5438d1370 <col:9> '<bound member function type>' ->xanno 0x55c5438bab08
|         |       `-CXXThisExpr 0x55c5438d1360 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55c5438d1428 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55c5438d13f0 <col:21> 'int' lvalue ParmVar 0x55c5438bd220 'i' 'int'
|-CXXMethodDecl 0x55c5438bd568 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55c5438bd3d8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55c5438bd450 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55c5438d1b18 <col:40, line:472:5>
|   |-ParenExpr 0x55c5438d1930 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55c5438d1900 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55c5438d15e0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c5438d15b0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c5438d1500 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c5438d14e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c5438d14a8 <col:23> 'int' lvalue ParmVar 0x55c5438bd3d8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c5438d14c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c5438d1590 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c5438d1560 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c5438d1520 <col:33> 'int' lvalue ParmVar 0x55c5438bd3d8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55c5438d1578 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55c5438d1540 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c5438baef0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55c5438d1640 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c5438d1620 <col:56> 'int' 0
|   |   `-CallExpr 0x55c5438d1860 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55c5438d1848 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c5438d1828 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c543427810 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c5438d18a0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d16b0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55c5438d18b8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d16e0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c5438d18d0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c5438d1718 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55c5438d18e8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c5438d1810 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c5438d17f8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c5438d17b8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55c5438d1af8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55c5438d1aa0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55c5438d1a70 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55c5438d1a20 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55c5438c5ae8
|     | |   `-CXXMemberCallExpr 0x55c5438d1a00 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55c5438d19d0 <col:2> '<bound member function type>' ->xanno 0x55c5438baca8
|     | |       `-CXXThisExpr 0x55c5438d19c0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55c5438d1a88 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55c5438d1a50 <col:14> 'int' lvalue ParmVar 0x55c5438bd3d8 'i' 'int'
|     `-ImplicitCastExpr 0x55c5438d1ae0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55c5438d1ac0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55c5438bd450 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55c5438bd728 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55c5438bd630 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55c5438d2298 <col:36, line:485:5>
|   |-ParenExpr 0x55c5438d2000 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c5438d1fd0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c5438d1cb0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c5438d1c80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c5438d1b90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c5438d1b78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c5438d1b38 <col:23> 'int' lvalue ParmVar 0x55c5438bd630 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c5438d1b58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c5438d1c60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c5438d1c48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c5438d1bb0 <col:33> 'int' lvalue ParmVar 0x55c5438bd630 'i' 'int'
|   |   |     `-BinaryOperator 0x55c5438d1c28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c5438d1c10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c5438d1bd0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c5438baef0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c5438d1bf0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55c5438d1d10 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c5438d1cf0 <col:60> 'int' 0
|   |   `-CallExpr 0x55c5438d1f30 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c5438d1f18 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c5438d1ef8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c543427810 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c5438d1f70 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d1d80 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55c5438d1f88 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d1db8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c5438d1fa0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c5438d1df0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55c5438d1fb8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c5438d1ee0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c5438d1ec8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c5438d1e88 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55c5438d2288 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55c5438d2270 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55c5438d2258 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c5438d2228 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55c5438d21c8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c5438d2198 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c5438d2110 <col:61, col:70> 'char const[48]' lvalue ->c 0x55c5438c59c0
|             |   `-CXXMemberCallExpr 0x55c5438d20f0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c5438d20c0 <col:61> '<bound member function type>' ->xanno 0x55c5438bab08
|             |       `-CXXThisExpr 0x55c5438d20b0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c5438d21b0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c5438d2140 <col:74> 'int' lvalue ParmVar 0x55c5438bd630 'i' 'int'
|-CXXMethodDecl 0x55c5438bd978 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55c5438bd7e8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55c5438bd860 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55c5438d29e8 <col:42, line:500:5>
|   |-ParenExpr 0x55c5438d2780 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c5438d2750 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c5438d2430 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c5438d2400 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c5438d2310 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c5438d22f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c5438d22b8 <col:23> 'int' lvalue ParmVar 0x55c5438bd7e8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c5438d22d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c5438d23e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c5438d23c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c5438d2330 <col:33> 'int' lvalue ParmVar 0x55c5438bd7e8 'i' 'int'
|   |   |     `-BinaryOperator 0x55c5438d23a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c5438d2390 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c5438d2350 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c5438baef0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c5438d2370 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55c5438d2490 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c5438d2470 <col:60> 'int' 0
|   |   `-CallExpr 0x55c5438d26b0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c5438d2698 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c5438d2678 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c543427810 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c5438d26f0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d2500 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55c5438d2708 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d2538 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c5438d2720 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c5438d2570 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55c5438d2738 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c5438d2660 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c5438d2648 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c5438d2608 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55c5438d29c8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55c5438d2978 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55c5438d2948 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55c5438d28f0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55c5438d28c0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55c5438d2870 <col:48, col:57> 'char [48]' lvalue ->c 0x55c5438c59c0
|     |     |   `-CXXMemberCallExpr 0x55c5438d2850 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55c5438d2820 <col:48> '<bound member function type>' ->xanno 0x55c5438baca8
|     |     |       `-CXXThisExpr 0x55c5438d2810 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55c5438d28d8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55c5438d28a0 <col:61> 'int' lvalue ParmVar 0x55c5438bd7e8 'i' 'int'
|     `-ImplicitCastExpr 0x55c5438d29b0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55c5438d2990 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55c5438bd860 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55c5438bdb38 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55c5438bda40 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55c5438d3148 <col:35, line:513:5>
|   |-ParenExpr 0x55c5438d2e58 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c5438d2e28 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c5438d2b80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c5438d2b50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c5438d2a60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c5438d2a48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c5438d2a08 <col:23> 'int' lvalue ParmVar 0x55c5438bda40 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c5438d2a28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c5438d2b30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c5438d2b18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c5438d2a80 <col:33> 'int' lvalue ParmVar 0x55c5438bda40 'i' 'int'
|   |   |     `-BinaryOperator 0x55c5438d2af8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c5438d2ae0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c5438d2aa0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c5438baef0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c5438d2ac0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55c5438d2be0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c5438d2bc0 <col:60> 'int' 0
|   |   `-CallExpr 0x55c5438d2d88 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c5438d2d70 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c5438d2d50 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c543427810 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c5438d2dc8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d2c50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55c5438d2de0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d2c88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c5438d2df8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c5438d2cc0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55c5438d2e10 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c5438d2d38 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c5438d2d20 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c5438d2ce0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55c5438d3138 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55c5438d3120 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55c5438d3108 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c5438d30d8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55c5438d3050 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c5438d3020 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c5438d2fd0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55c5438c59c0
|             |   `-CXXMemberCallExpr 0x55c5438d2fb0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c5438d2f80 <col:60> '<bound member function type>' ->xanno 0x55c5438bab08
|             |       `-CXXThisExpr 0x55c5438d2f70 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c5438d3038 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c5438d3000 <col:73> 'int' lvalue ParmVar 0x55c5438bda40 'i' 'int'
|-CXXMethodDecl 0x55c5438bdd88 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55c5438bdbf8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55c5438bdc70 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55c5438d3868 <col:41, line:528:5>
|   |-ParenExpr 0x55c5438d35f0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c5438d35c0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c5438d32e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c5438d32b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c5438d31c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c5438d31a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c5438d3168 <col:23> 'int' lvalue ParmVar 0x55c5438bdbf8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c5438d3188 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c5438d3290 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c5438d3278 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c5438d31e0 <col:33> 'int' lvalue ParmVar 0x55c5438bdbf8 'i' 'int'
|   |   |     `-BinaryOperator 0x55c5438d3258 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c5438d3240 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c5438d3200 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c5438baef0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c5438d3220 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55c5438d3340 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c5438d3320 <col:60> 'int' 0
|   |   `-CallExpr 0x55c5438d3520 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c5438d3508 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c5438d34e8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c543427810 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c5438d3560 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d33b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55c5438d3578 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d33e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c5438d3590 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c5438d3420 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55c5438d35a8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c5438d34d0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c5438d34b8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c5438d3478 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55c5438d3848 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55c5438d37f8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55c5438d37c8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55c5438d3770 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55c5438d3730 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55c5438d36e0 <col:47, col:56> 'char [48]' lvalue ->c 0x55c5438c59c0
|     |     |   `-CXXMemberCallExpr 0x55c5438d36c0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55c5438d3690 <col:47> '<bound member function type>' ->xanno 0x55c5438baca8
|     |     |       `-CXXThisExpr 0x55c5438d3680 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55c5438d3748 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55c5438d3710 <col:60> 'int' lvalue ParmVar 0x55c5438bdbf8 'i' 'int'
|     `-ImplicitCastExpr 0x55c5438d3830 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55c5438d3810 <col:65> 'int16_t':'short' lvalue ParmVar 0x55c5438bdc70 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55c5438bdf48 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55c5438bde50 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55c5438d3f38 <col:36, line:541:5>
|   |-ParenExpr 0x55c5438d3cd8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c5438d3ca8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c5438d3a00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c5438d39d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c5438d38e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c5438d38c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c5438d3888 <col:23> 'int' lvalue ParmVar 0x55c5438bde50 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c5438d38a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c5438d39b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c5438d3998 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c5438d3900 <col:33> 'int' lvalue ParmVar 0x55c5438bde50 'i' 'int'
|   |   |     `-BinaryOperator 0x55c5438d3978 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c5438d3960 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c5438d3920 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c5438baef0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c5438d3940 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55c5438d3a60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c5438d3a40 <col:60> 'int' 0
|   |   `-CallExpr 0x55c5438d3c08 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c5438d3bf0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c5438d3bd0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c543427810 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c5438d3c48 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d3ad0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55c5438d3c60 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d3b08 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c5438d3c78 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c5438d3b40 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55c5438d3c90 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c5438d3bb8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c5438d3ba0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c5438d3b60 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55c5438d3f28 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55c5438d3f10 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55c5438d3ef8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c5438d3ec8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55c5438d3e70 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c5438d3e40 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c5438d3df0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55c5438c59c0
|             |   `-CXXMemberCallExpr 0x55c5438d3dd0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c5438d3da0 <col:61> '<bound member function type>' ->xanno 0x55c5438bab08
|             |       `-CXXThisExpr 0x55c5438d3d90 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c5438d3e58 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c5438d3e20 <col:74> 'int' lvalue ParmVar 0x55c5438bde50 'i' 'int'
|-CXXMethodDecl 0x55c5438be118 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55c5438be008 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55c5438be080 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c5438be1c8 <col:20>
| `-OptimizeNoneAttr 0x55c5438be220 <col:30>
|-CXXMethodDecl 0x55c5438be358 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55c5438be260 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55c5438d4608 <col:35, line:562:5>
|   |-ParenExpr 0x55c5438d43a8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c5438d4378 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c5438d40d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c5438d40a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c5438d3fb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c5438d3f98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c5438d3f58 <col:23> 'int' lvalue ParmVar 0x55c5438be260 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c5438d3f78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c5438d4080 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c5438d4068 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c5438d3fd0 <col:33> 'int' lvalue ParmVar 0x55c5438be260 'i' 'int'
|   |   |     `-BinaryOperator 0x55c5438d4048 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c5438d4030 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c5438d3ff0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c5438baef0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c5438d4010 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55c5438d4130 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c5438d4110 <col:60> 'int' 0
|   |   `-CallExpr 0x55c5438d42d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c5438d42c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c5438d42a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c543427810 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c5438d4318 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d41a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55c5438d4330 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d41d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c5438d4348 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c5438d4210 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55c5438d4360 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c5438d4288 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c5438d4270 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c5438d4230 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55c5438d45f8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55c5438d45e0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55c5438d45c8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c5438d4598 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55c5438d4540 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c5438d4510 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c5438d44c0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55c5438c59c0
|             |   `-CXXMemberCallExpr 0x55c5438d44a0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c5438d4470 <col:60> '<bound member function type>' ->xanno 0x55c5438bab08
|             |       `-CXXThisExpr 0x55c5438d4460 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c5438d4528 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c5438d44f0 <col:73> 'int' lvalue ParmVar 0x55c5438be260 'i' 'int'
|-CXXMethodDecl 0x55c5438be568 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55c5438be418 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55c5438be490 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55c5438d4ce8 <col:41, line:577:5>
|   |-ParenExpr 0x55c5438d4a78 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c5438d4a48 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c5438d47a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c5438d4770 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c5438d4680 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c5438d4668 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c5438d4628 <col:23> 'int' lvalue ParmVar 0x55c5438be418 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c5438d4648 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c5438d4750 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c5438d4738 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c5438d46a0 <col:33> 'int' lvalue ParmVar 0x55c5438be418 'i' 'int'
|   |   |     `-BinaryOperator 0x55c5438d4718 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c5438d4700 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c5438d46c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c5438baef0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c5438d46e0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55c5438d4800 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c5438d47e0 <col:60> 'int' 0
|   |   `-CallExpr 0x55c5438d49a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c5438d4990 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c5438d4970 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c543427810 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c5438d49e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d4870 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55c5438d4a00 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d48a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c5438d4a18 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c5438d48e0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55c5438d4a30 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c5438d4958 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c5438d4940 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c5438d4900 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55c5438d4cc8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55c5438d4c78 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55c5438d4c48 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55c5438d4be8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55c5438d4bb8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55c5438d4b68 <col:47, col:56> 'char [48]' lvalue ->c 0x55c5438c59c0
|     |     |   `-CXXMemberCallExpr 0x55c5438d4b48 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55c5438d4b18 <col:47> '<bound member function type>' ->xanno 0x55c5438baca8
|     |     |       `-CXXThisExpr 0x55c5438d4b08 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55c5438d4bd0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55c5438d4b98 <col:60> 'int' lvalue ParmVar 0x55c5438be418 'i' 'int'
|     `-ImplicitCastExpr 0x55c5438d4cb0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55c5438d4c90 <col:65> 'int32_t':'int' lvalue ParmVar 0x55c5438be490 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55c5438be728 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55c5438be630 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55c5438d5418 <col:36, line:591:5>
|   |-ParenExpr 0x55c5438d5158 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c5438d5128 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c5438d4e80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c5438d4e50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c5438d4d60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c5438d4d48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c5438d4d08 <col:23> 'int' lvalue ParmVar 0x55c5438be630 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c5438d4d28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c5438d4e30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c5438d4e18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c5438d4d80 <col:33> 'int' lvalue ParmVar 0x55c5438be630 'i' 'int'
|   |   |     `-BinaryOperator 0x55c5438d4df8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c5438d4de0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c5438d4da0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c5438baef0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c5438d4dc0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55c5438d4ee0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c5438d4ec0 <col:60> 'int' 0
|   |   `-CallExpr 0x55c5438d5088 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c5438d5070 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c5438d5050 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c543427810 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c5438d50c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d4f50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55c5438d50e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d4f88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c5438d50f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c5438d4fc0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55c5438d5110 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c5438d5038 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c5438d5020 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c5438d4fe0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55c5438d5408 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55c5438d53f0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55c5438d53d8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c5438d53a8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55c5438d5320 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c5438d52f0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c5438d52a0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55c5438c59c0
|             |   `-CXXMemberCallExpr 0x55c5438d5280 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c5438d5250 <col:61> '<bound member function type>' ->xanno 0x55c5438bab08
|             |       `-CXXThisExpr 0x55c5438d5240 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c5438d5308 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c5438d52d0 <col:74> 'int' lvalue ParmVar 0x55c5438be630 'i' 'int'
|-CXXMethodDecl 0x55c5438be978 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55c5438be7e8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55c5438be860 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55c5438d5af8 <col:42, line:606:5>
|   |-ParenExpr 0x55c5438d5888 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c5438d5858 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c5438d55b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c5438d5580 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c5438d5490 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c5438d5478 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c5438d5438 <col:23> 'int' lvalue ParmVar 0x55c5438be7e8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c5438d5458 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c5438d5560 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c5438d5548 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c5438d54b0 <col:33> 'int' lvalue ParmVar 0x55c5438be7e8 'i' 'int'
|   |   |     `-BinaryOperator 0x55c5438d5528 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c5438d5510 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c5438d54d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c5438baef0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c5438d54f0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55c5438d5610 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c5438d55f0 <col:60> 'int' 0
|   |   `-CallExpr 0x55c5438d57b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c5438d57a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c5438d5780 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c543427810 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c5438d57f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d5680 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55c5438d5810 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d56b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c5438d5828 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c5438d56f0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55c5438d5840 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c5438d5768 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c5438d5750 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c5438d5710 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55c5438d5ad8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55c5438d5a88 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55c5438d5a58 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55c5438d59f8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55c5438d59c8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55c5438d5978 <col:48, col:57> 'char [48]' lvalue ->c 0x55c5438c59c0
|     |     |   `-CXXMemberCallExpr 0x55c5438d5958 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55c5438d5928 <col:48> '<bound member function type>' ->xanno 0x55c5438baca8
|     |     |       `-CXXThisExpr 0x55c5438d5918 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55c5438d59e0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55c5438d59a8 <col:61> 'int' lvalue ParmVar 0x55c5438be7e8 'i' 'int'
|     `-ImplicitCastExpr 0x55c5438d5ac0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55c5438d5aa0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55c5438be860 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55c5438beb10 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55c5438bea40 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55c5438d6368 <col:33, line:620:5>
|   |-ParenExpr 0x55c5438d60e0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55c5438d60b0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55c5438d5d00 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c5438d5cd0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c5438d5b70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c5438d5b58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c5438d5b18 <col:23> 'int' lvalue ParmVar 0x55c5438bea40 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c5438d5b38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c5438d5cb0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55c5438d5c98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c5438d5b90 <col:33> 'int' lvalue ParmVar 0x55c5438bea40 'i' 'int'
|   |   |     `-BinaryOperator 0x55c5438d5c78 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c5438d5c60 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c5438d5bb0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c5438baef0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55c5438d5c38 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55c5438d5c20 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55c5438d5be8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55c5438d5d60 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c5438d5d40 <col:79> 'int' 0
|   |   `-CallExpr 0x55c5438d6010 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55c5438d5ff8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c5438d5fd8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c543427810 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c5438d6050 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d5e48 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55c5438d6068 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d5e90 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c5438d6080 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c5438d5ec8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55c5438d6098 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c5438d5fc0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c5438d5fa8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c5438d5f68 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55c5438d6358 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55c5438d6340 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55c5438d6328 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c5438d62f8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55c5438d6270 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c5438d6240 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c5438d61f0 <col:67, col:76> 'char const[48]' lvalue ->c 0x55c5438c59c0
|             |   `-CXXMemberCallExpr 0x55c5438d61d0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c5438d61a0 <col:67> '<bound member function type>' ->xanno 0x55c5438bab08
|             |       `-CXXThisExpr 0x55c5438d6190 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c5438d6258 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c5438d6220 <col:80> 'int' lvalue ParmVar 0x55c5438bea40 'i' 'int'
|-CXXMethodDecl 0x55c5438bed28 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55c5438bebd0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55c5438bec50 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55c5438d6b90 <col:45, line:635:5>
|   |-ParenExpr 0x55c5438d68d8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55c5438d68a8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55c5438d6570 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c5438d6540 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c5438d63e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c5438d63c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c5438d6388 <col:23> 'int' lvalue ParmVar 0x55c5438bebd0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c5438d63a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c5438d6520 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55c5438d6508 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c5438d6400 <col:33> 'int' lvalue ParmVar 0x55c5438bebd0 'i' 'int'
|   |   |     `-BinaryOperator 0x55c5438d64e8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c5438d64d0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c5438d6420 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c5438baef0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55c5438d64a8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55c5438d6490 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55c5438d6458 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55c5438d65d0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c5438d65b0 <col:79> 'int' 0
|   |   `-CallExpr 0x55c5438d6808 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55c5438d67f0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c5438d67d0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c543427810 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c5438d6848 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d6640 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55c5438d6860 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c5438d6688 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c5438d6878 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c5438d66c0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55c5438d6890 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c5438d67b8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c5438d67a0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c5438d6758 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55c5438d6b70 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55c5438d6ad8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55c5438d6aa8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55c5438d6a48 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55c5438d6a18 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55c5438d69c8 <col:54, col:63> 'char [48]' lvalue ->c 0x55c5438c59c0
|     |     |   `-CXXMemberCallExpr 0x55c5438d69a8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55c5438d6978 <col:54> '<bound member function type>' ->xanno 0x55c5438baca8
|     |     |       `-CXXThisExpr 0x55c5438d6968 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55c5438d6a30 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55c5438d69f8 <col:67> 'int' lvalue ParmVar 0x55c5438bebd0 'i' 'int'
|     `-CXXConstCastExpr 0x55c5438d6b40 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55c5438d6b28 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55c5438d6af0 <col:91> 'const void *' lvalue ParmVar 0x55c5438bec50 'x' 'const void *'
|-CXXMethodDecl 0x55c5438bedf8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55c5438d6c18 <col:34, line:640:5>
|   `-ReturnStmt 0x55c5438d6c08 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55c5438d6bf0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55c5438d6bc0 <col:16> 'Packet *' lvalue ->_data_packet 0x55c5438c6578
|         `-CXXThisExpr 0x55c5438d6bb0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55c5438bef38 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55c5438beea8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c5438cfcd8 <col:46> 'bool' true
|-CXXMethodDecl 0x55c5438bf0b8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55c5438beff0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55c5438bf160 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55c5438bf910 <line:660:22> "" ""
| |-EnumConstantDecl 0x55c5438bf260 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c5438bf980 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438bf240 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55c5438bf220 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55c5438b43c0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55c5438bf2f0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c5438bf998 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438bf2d0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55c5438bf2b0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55c5438b4450 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55c5438bf380 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c5438bf9b0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438bf360 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55c5438bf340 <col:21> 'int' 0
| |-EnumConstantDecl 0x55c5438bf410 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c5438bf9c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438bf3f0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55c5438bf3d0 <col:19> 'int' 16
| |-EnumConstantDecl 0x55c5438bf4a0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c5438bf9e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438bf480 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55c5438bf460 <col:21> 'int' 16
| |-EnumConstantDecl 0x55c5438bf530 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c5438bf9f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438bf510 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55c5438bf4f0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55c5438bf5c0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c5438bfa10 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438bf5a0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55c5438bf580 <col:19> 'int' EnumConstant 0x55c5438bf410 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55c5438bf650 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c5438bfa28 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438bf630 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55c5438bf610 <col:19> 'int' EnumConstant 0x55c5438bf530 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55c5438bf720 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c5438bfa40 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438bf700 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55c5438bf6e0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55c5438bf6a0 <col:23> 'int' EnumConstant 0x55c5438bf650 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55c5438bf6c0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55c5438bf7f0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c5438bfa58 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5438bf7d0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55c5438bf7b0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55c5438bf770 <col:23> 'int' EnumConstant 0x55c5438bf650 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55c5438bf790 <col:40> 'int' 4
| `-EnumConstantDecl 0x55c5438bf8c0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55c5438bfa70 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c5438bf8a0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55c5438bf880 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55c5438bf840 <col:23> 'int' EnumConstant 0x55c5438bf650 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55c5438bf860 <col:40> 'int' 8
|-CXXMethodDecl 0x55c5438bfab0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55c5438bfb50 <col:68> "" ""
|-CXXMethodDecl 0x55c5438bfbe8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55c5438bfc88 <col:45> "" ""
|-CXXMethodDecl 0x55c5438bfd20 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55c5438bfdc0 <col:57> "" ""
|-CXXMethodDecl 0x55c5438bfe58 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55c5438bfef8 <col:45> "" ""
|-CXXMethodDecl 0x55c5438bff90 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55c5438c0030 <col:57> "" ""
|-CXXMethodDecl 0x55c5438c00c0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55c5438c0160 <col:51> "" ""
|-CXXMethodDecl 0x55c5438c01f0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55c5438c0290 <col:63> "" ""
|-CXXMethodDecl 0x55c5438c0320 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55c5438c03c0 <col:53> "" ""
|-CXXMethodDecl 0x55c5438c0450 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55c5438c04f0 <col:65> "" ""
|-CXXMethodDecl 0x55c5438c0608 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55c5438c0578 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55c5438c06b0 <col:61> "" ""
|-CXXMethodDecl 0x55c5438c0848 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55c5438c0738 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55c5438c07b0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55c5438c08f8 <col:67> "" ""
|-CXXMethodDecl 0x55c5438c0a10 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55c5438c0980 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55c5438c0ab8 <col:63> "" ""
|-CXXMethodDecl 0x55c5438c0c50 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55c5438c0b40 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55c5438c0bb8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55c5438c0d00 <col:69> "" ""
|-CXXMethodDecl 0x55c5438c0e18 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55c5438c0d88 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55c5438c0ec0 <col:63> "" ""
|-CXXMethodDecl 0x55c5438c3598 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55c5438c3488 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55c5438c3500 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55c5438c3648 <col:69> "" ""
|-CXXMethodDecl 0x55c5438c3760 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55c5438c36d0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55c5438c3808 <col:62> "" ""
|-CXXMethodDecl 0x55c5438c39a0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55c5438c3890 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55c5438c3908 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55c5438c3a50 <col:68> "" ""
|-CXXMethodDecl 0x55c5438c3b68 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55c5438c3ad8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55c5438c3c10 <col:63> "" ""
|-CXXMethodDecl 0x55c5438c3da8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55c5438c3c98 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55c5438c3d10 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55c5438c3e58 <col:69> "" ""
|-CXXMethodDecl 0x55c5438c3ee8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55c5438c3f88 <col:64> "" ""
|-CXXMethodDecl 0x55c5438c4018 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55c5438c40b8 <col:52> "" ""
|-CXXMethodDecl 0x55c5438c4148 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55c5438c41e8 <col:67> "" ""
|-CXXMethodDecl 0x55c5438c4278 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55c5438c4318 <col:55> "" ""
|-CXXMethodDecl 0x55c5438c4430 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55c5438c43a0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55c5438c44d8 <col:58> "" ""
|-CXXMethodDecl 0x55c5438c4670 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55c5438c4560 <col:33> col:36 'int'
| |-ParmVarDecl 0x55c5438c45d8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55c5438c4720 <col:62> "" ""
|-CXXMethodDecl 0x55c5438c4838 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55c5438c47a8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55c5438c48e0 <col:58> "" ""
|-CXXMethodDecl 0x55c5438c4a78 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55c5438c4968 <col:33> col:36 'int'
| |-ParmVarDecl 0x55c5438c49e0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55c5438c4b28 <col:62> "" ""
|-CXXMethodDecl 0x55c5438c4c40 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55c5438c4bb0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55c5438c4ce8 <col:60> "" ""
|-CXXMethodDecl 0x55c5438c4e80 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55c5438c4d70 <col:34> col:37 'int'
| |-ParmVarDecl 0x55c5438c4de8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55c5438c4f30 <col:64> "" ""
|-CXXMethodDecl 0x55c5438c5048 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55c5438c4fb8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55c5438c50f0 <col:58> "" ""
|-CXXMethodDecl 0x55c5438c5288 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55c5438c5178 <col:33> col:36 'int'
| |-ParmVarDecl 0x55c5438c51f0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55c5438c5338 <col:62> "" ""
|-CXXMethodDecl 0x55c5438c5450 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55c5438c53c0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55c5438c54f8 <col:59> "" ""
|-CXXMethodDecl 0x55c5438c5690 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55c5438c5580 <col:33> col:36 'int'
| |-ParmVarDecl 0x55c5438c55f8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55c5438c5740 <col:63> "" ""
|-AccessSpecDecl 0x55c5438c57b0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55c5438c57d8 prev 0x55c5438ba9e0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55c5438c58d0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55c5438c59c0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55c5438c5ae8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55c5438c5c68 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55c5438c5de8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55c5438c5f68 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55c5438d6d98 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55c5438d7608 <col:11>
| |-CXXDestructorDecl 0x55c5438d6e70 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55c5438d6fa8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55c5438d6fa8
| | `-ParmVarDecl 0x55c5438d70b8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55c5438d7158 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55c5438d7158
| | `-ParmVarDecl 0x55c5438d7268 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55c5438da028 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55c5438da138 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55c5438da3b8 <col:11>
| |   `-ReturnStmt 0x55c5438da3a8 <col:11>
| |     `-UnaryOperator 0x55c5438da390 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55c5438da380 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55c5438da1a8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55c5438da1a8
|   `-ParmVarDecl 0x55c5438da2b8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55c5438c5fd0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55c5438c60e8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55c5438c6188 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55c5438c61f0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55c5438c6258 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55c5438c62c0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55c5438c6320 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55c5438c63e0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55c5438c6440 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55c5438c64a0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55c5438d6ca8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55c5438c6188 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55c5438d7618 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55c5438d7670 <col:12>
| |-CXXConstructorDecl 0x55c5438d72d8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55c5438d72d8
| | `-ParmVarDecl 0x55c5438d73e8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55c5438d7488 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55c5438d7488
| | `-ParmVarDecl 0x55c5438d7598 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55c5438d9710 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55c5438c6518 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55c5438c6578 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55c5438c65e0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55c5438c6648 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55c5438c66b0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55c5438c6718 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55c5438c6778 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55c5438c67d8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55c5438c6840 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55c5438c68c8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55c5438c6518 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55c5438d6c40 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55c5438c6778 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55c5438d7680 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55c5438d76e0 <col:21, line:755:5>
|-CXXConstructorDecl 0x55c5438c6a68 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55c5438c69a8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55c5438c6b60 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55c5438c6d48 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55c5438c6c50 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55c5438c7018 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55c5438c6e00 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c5438c6e78 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55c5438c6ef0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c5438c7238 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55c5438c70e8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55c5438c7160 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55c5438cf818 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55c5438c72f8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55c5438c7370 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55c5438c73e8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55c5438cf970 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55c5438cf8e0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c5438cfab8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55c5438cfa28 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55c5438cfbb0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned char>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned char * _ptr
        24 |   unsigned char _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned char>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c5439a8610 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c5439a8728 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55c5439a87b8 <col:16, col:22> col:16 public
|-EnumDecl 0x55c5439a87e0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55c5439a88e0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55c5439a8b30 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5439a88c0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55c5439a88a0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55c5439a8970 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55c5439a8b48 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5439a8950 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55c5439a8930 <col:24> 'int' 22
| |-EnumConstantDecl 0x55c5439a8a00 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55c5439a8b60 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5439a89e0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55c5439a89c0 <col:24> 'int' 34
| |-EnumConstantDecl 0x55c5439a8a90 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55c5439a8b78 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c5439a8a70 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55c5439a8a50 <col:25> 'int' 95
| `-EnumConstantDecl 0x55c5439a8ae0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55c5439aa4f0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55c5439aa928 <col:7>
|-CXXConstructorDecl 0x55c5439aa5f8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55c5439aa5f8
| `-ParmVarDecl 0x55c5439aa708 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55c5439aa7a8 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55c5439aa8b8 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55c543a2fb70 <col:7>
`-CXXDestructorDecl 0x55c5439aca48 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c5439a8ba8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55c5439a8d08 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55c5439a8d98 <col:32, col:38> col:32 public
|-TypedefDecl 0x55c5439a8dd0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55c5434e0d10 'uint32_t' sugar
|   |-Typedef 0x55c5433f4408 'uint32_t'
|   `-TypedefType 0x55c5433cd440 '__uint32_t' sugar
|     |-Typedef 0x55c5433cd038 '__uint32_t'
|     `-BuiltinType 0x55c54338b410 'unsigned int'
|-CXXConstructorDecl 0x55c5439a8f18 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55c5439a8e40 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55c5439aa3f8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55c5439aa938 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55c5439a9cb0 'base' 'int'
| | `-ImplicitCastExpr 0x55c5439aa498 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55c5439aa458 <col:16> 'int' lvalue ParmVar 0x55c5439a8e40 'b' 'int'
| `-CompoundStmt 0x55c5439aa9a8 <col:19, line:1046:5>
|-CXXMethodDecl 0x55c5439a9410 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55c5439a8fe0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55c5439a9060 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55c5439a90d8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55c5439a9158 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55c5439a9218 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55c5439a9298 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55c5439a9868 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55c5439a94e0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55c5439a97c8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55c5439a9588 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55c5439a9628 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55c5439a96a0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55c5439aa418 <col:82> 'const ArgContext' lvalue Var 0x55c54399d448 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55c5439ab8f8 <col:94, line:1067:5>
| |   |-DeclStmt 0x55c5439aab38 <line:1054:9, col:64>
| |   | `-VarDecl 0x55c5439aa9c8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x55c5439aaaf0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x55c5439aad58 <line:1055:9, col:91>
| |   | `-VarDecl 0x55c5439aab68 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55c5439aad30 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x55c5439aad10 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x55c5439aacc0 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x55c5439aaca0 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x55c5439aac48 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x55c5439aabf8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x55c5439aac28 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x55c5439aac88 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x55c5439aac68 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x55c5439aacf0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55c5439aaeb8 <line:1056:9, col:27>
| |   | `-VarDecl 0x55c5439aae50 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x55c5439ab300 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x55c5439ab230 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x55c5439ab1b0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55c5438aacf8 0x55c5436f42d8 0x55c5436f3fb0 0x55c5436e5790 0x55c5436e5440 0x55c5436e4d30 0x55c5436b76a0 0x55c543643b60
| |   | | |-CallExpr 0x55c5439ab0f0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x55c5439aaee0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x55c5439aaf90 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55c5439aaf60 <col:19, col:23> '<bound member function type>' .begin 0x55c5436d4998
| |   | | | |   `-DeclRefExpr 0x55c5439aaf40 <col:19> 'const String' lvalue ParmVar 0x55c5439a9588 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55c5439ab000 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55c5439aafd0 <col:32, col:36> '<bound member function type>' .end 0x55c5436d4bb0
| |   | | | |   `-DeclRefExpr 0x55c5439aafb0 <col:32> 'const String' lvalue ParmVar 0x55c5439a9588 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x55c5439ab020 <col:43> 'const bool' lvalue Var 0x55c5439aa9c8 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x55c5439ab088 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x55c5439ab068 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x55c5439ab0b0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55c5439aae50 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x55c5439ab0d0 <col:73> 'const int' lvalue Var 0x55c5439aab68 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x55c5439ab190 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55c5439ab160 <col:16, col:20> '<bound member function type>' .end 0x55c5436d4bb0
| |   | |     `-DeclRefExpr 0x55c5439ab140 <col:16> 'const String' lvalue ParmVar 0x55c5439a9588 'str' 'const String &'
| |   | `-BinaryOperator 0x55c5439ab2e0 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55c5439ab278 <col:13> 'int' lvalue ->status 0x55c5439a9d18
| |   |   | `-CXXThisExpr 0x55c5439ab268 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55c5439ab2c8 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55c5439ab2a8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55c5439a8970 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55c5439ab578 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55c5439ab438 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55c5439ab420 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55c5439ab408 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55c5439ab328 <col:13> 'int' lvalue ->status 0x55c5439a9d18
| |   | | |     `-CXXThisExpr 0x55c5439ab318 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55c5439ab3e8 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55c5439ab3b8 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55c5439ab368 <col:23> 'int' lvalue ->status 0x55c5439a9d18
| |   | |   |   `-CXXThisExpr 0x55c5439ab358 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55c5439ab3d0 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55c5439ab398 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55c5439a8a00 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55c5439ab558 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55c5439ab4f8 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55c5439ab4a0 <col:13, col:18> '<bound member function type>' .error 0x55c54386e490
| |   |   | | `-DeclRefExpr 0x55c5439ab480 <col:13> 'const ArgContext' lvalue ParmVar 0x55c5439a96a0 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55c5439ab520 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55c5439ab4d0 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55c5439ab548 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55c5439ab538 <col:20> 'bool' false
| |   |-DeclStmt 0x55c5439ab748 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55c5439ab6f0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x55c5439ab680 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x55c5439ab8a8 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x55c5439ab760 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55c543677b28
| |   | |-DeclRefExpr 0x55c5439ab7a8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55c5439aae50 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x55c5439ab878 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x55c5439ab7f0 <col:64> 'V' lvalue ParmVar 0x55c5439a9628 'result' 'V &'
| |   `-ReturnStmt 0x55c5439ab8e8 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55c5439ab8d8 <col:16> 'bool' true
| `-CXXMethodDecl 0x55c543a34838 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned char &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned char'
|   |-ParmVarDecl 0x55c543a34610 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55c543a346e8 <col:46, col:49> col:49 used result 'unsigned char &'
|   |-ParmVarDecl 0x55c543a34750 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55c543a365d0 <col:94, line:1067:5>
|     |-DeclStmt 0x55c543a35048 <line:1054:9, col:64>
|     | `-VarDecl 0x55c543a34e68 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55c543a34fd8 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55c543a34fa8 <col:36, col:55> 'const bool' lvalue Var 0x55c543660a50 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55c543a35228 <line:1055:9, col:91>
|     | `-VarDecl 0x55c543a35060 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55c543a351a8 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55c543a35190 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55c543a35170 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55c543a35150 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55c543a35130 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55c543a350f8 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55c543a350d8 <col:36, col:44> 'unsigned long' sizeof 'unsigned char':'unsigned char'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x55c5439aac28 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55c543a35118 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x55c5439aac68 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x55c5439aacf0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55c543a353c0 <line:1056:9, col:27>
|     | `-VarDecl 0x55c543a35358 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55c543a35848 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55c543a357f0 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55c543a356a8 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55c543a35678 <col:13> '<bound member function type>' ->parse 0x55c5439a9410
|     | | | | `-CXXThisExpr 0x55c543a35668 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55c543a35508 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55c543a354d8 <col:19, col:23> '<bound member function type>' .begin 0x55c5436d4998
|     | | | |   `-DeclRefExpr 0x55c543a354b8 <col:19> 'const String' lvalue ParmVar 0x55c543a34610 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55c543a35578 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55c543a35548 <col:32, col:36> '<bound member function type>' .end 0x55c5436d4bb0
|     | | | |   `-DeclRefExpr 0x55c543a35528 <col:32> 'const String' lvalue ParmVar 0x55c543a34610 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55c543a35718 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55c543a356f8 <col:43> 'const bool' lvalue Var 0x55c543a34e68 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55c543a35600 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55c543a355e8 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55c543a355c8 <col:58, col:66> 'unsigned long' sizeof 'unsigned char':'unsigned char'
|     | | | |-ImplicitCastExpr 0x55c543a35730 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55c543a35628 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55c543a35358 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55c543a35768 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55c543a35748 <col:73> 'const int' lvalue Var 0x55c543a35060 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55c543a357d0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55c543a357a0 <col:16, col:20> '<bound member function type>' .end 0x55c5436d4bb0
|     | |     `-DeclRefExpr 0x55c543a35780 <col:16> 'const String' lvalue ParmVar 0x55c543a34610 'str' 'const String &'
|     | `-BinaryOperator 0x55c543a35828 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55c5439ab278 <col:13> 'int' lvalue ->status 0x55c5439a9d18
|     |   | `-CXXThisExpr 0x55c5439ab268 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55c543a35810 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55c5439ab2a8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55c5439a8970 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55c543a359c0 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55c543a358e0 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55c543a358c8 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55c543a358b0 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55c5439ab328 <col:13> 'int' lvalue ->status 0x55c5439a9d18
|     | | |     `-CXXThisExpr 0x55c5439ab318 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55c543a35890 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55c543a35860 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55c5439ab368 <col:23> 'int' lvalue ->status 0x55c5439a9d18
|     | |   |   `-CXXThisExpr 0x55c5439ab358 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55c543a35878 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55c5439ab398 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55c5439a8a00 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55c543a359a0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55c543a35950 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55c543a35920 <col:13, col:18> '<bound member function type>' .error 0x55c54386e490
|     |   | | `-DeclRefExpr 0x55c543a35900 <col:13> 'const ArgContext' lvalue ParmVar 0x55c543a34750 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55c543a35978 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55c5439ab4d0 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55c543a35990 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55c5439ab538 <col:20> 'bool' false
|     |-DeclStmt 0x55c543a35f08 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55c543a35eb0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned char>::type':'unsigned char'
|     |   `-ElaboratedType 0x55c543a35e60 'typename make_unsigned<unsigned char>::type' sugar
|     |     `-TypedefType 0x55c543a35e40 'make_unsigned<unsigned char>::type' sugar
|     |       |-Typedef 0x55c543a35dd0 'type'
|     |       `-ElaboratedType 0x55c543a35d80 'typename integer_traits<unsigned char>::unsigned_type' sugar
|     |         `-TypedefType 0x55c543a35d60 'integer_traits<unsigned char>::unsigned_type' sugar
|     |           |-Typedef 0x55c543660ba8 'unsigned_type'
|     |           `-BuiltinType 0x55c54338b3d0 'unsigned char'
|     |-CallExpr 0x55c543a36560 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55c543a36548 <col:9> 'void (*)(const unsigned int *, unsigned char &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55c543a364c8 <col:9> 'void (const unsigned int *, unsigned char &)' lvalue Function 0x55c543a363a8 'extract_integer' 'void (const unsigned int *, unsigned char &)' (FunctionTemplate 0x55c543677b28 'extract_integer')
|     | |-ImplicitCastExpr 0x55c543a365a8 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55c543a36590 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55c543a35f68 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55c543a35358 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55c543a36038 <col:28, col:70> 'unsigned_v_type':'unsigned char' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x55c543a35fe8 <col:64> 'unsigned char':'unsigned char' lvalue ParmVar 0x55c543a346e8 'result' 'unsigned char &'
|     `-ReturnStmt 0x55c543a365c0 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55c5439ab8d8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55c5439a9c28 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55c5439a98d8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55c5439a9b88 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55c5439a9988 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55c5439a9a28 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55c5439a9aa0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55c5439aa438 <col:71> 'const ArgContext' lvalue Var 0x55c54399d448 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55c5439ac068 <col:83, line:1083:5>
| |   |-DeclStmt 0x55c5439ab9c0 <line:1071:9, col:12>
| |   | `-VarDecl 0x55c5439ab958 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55c5439ac040 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55c5439abc50 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55c5439abad8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55c5439abaa0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55c5439ab9e8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55c5439aba40 <col:31> 'const String' lvalue ParmVar 0x55c5439a9988 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55c5439aba60 <col:36> 'V' lvalue Var 0x55c5439ab958 'x' 'V'
| |     | |   `-DeclRefExpr 0x55c5439aba80 <col:39> 'const ArgContext' lvalue ParmVar 0x55c5439a9aa0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55c5439abc30 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55c5439abc10 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55c5439abbf8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55c5439abbe0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55c5439abb00 <col:17> 'int' lvalue ->status 0x55c5439a9d18
| |     |     |     `-CXXThisExpr 0x55c5439abaf0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55c5439abbc0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55c5439abb90 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55c5439abb40 <col:27> 'int' lvalue ->status 0x55c5439a9d18
| |     |       |   `-CXXThisExpr 0x55c5439abb30 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55c5439abba8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55c5439abb70 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55c5439a8a00 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55c5439abc80 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55c5439abc70 <col:20> 'bool' false
| |     `-IfStmt 0x55c5439ac018 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55c5439abd20 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55c5439abcf0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55c5439abca0 <col:18> 'int' lvalue ->status 0x55c5439a9d18
| |       | |   `-CXXThisExpr 0x55c5439abc90 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55c5439abd08 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55c5439abcd0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55c5439a8a00 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55c5439abf58 <col:42, line:1079:9>
| |       | |-CallExpr 0x55c5439abf00 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55c5439abd50 <line:1076:13> '<bound member function type>' ->range_error 0x55c5439aa328
| |       | | | `-CXXThisExpr 0x55c5439abd40 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55c5439abd80 <col:25> 'const ArgContext' lvalue ParmVar 0x55c5439a9aa0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55c5439abe60 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55c5439abed8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55c5439abeb8 <col:43> 'V' lvalue Var 0x55c5439ab958 'x' 'V'
| |       | `-ReturnStmt 0x55c5439abf48 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55c5439abf38 <col:20> 'bool' false
| |       `-CompoundStmt 0x55c5439abff8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55c5439abfb8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55c5439abf78 <col:13> 'V' lvalue ParmVar 0x55c5439a9a28 'result' 'V &'
| |         | `-DeclRefExpr 0x55c5439abf98 <col:22> 'V' lvalue Var 0x55c5439ab958 'x' 'V'
| |         `-ReturnStmt 0x55c5439abfe8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55c5439abfd8 <col:20> 'bool' true
| `-CXXMethodDecl 0x55c543a341f8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned char &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned char'
|   |-ParmVarDecl 0x55c543a33f90 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55c543a34068 <col:35, col:38> col:38 used result 'unsigned char &'
|   |-ParmVarDecl 0x55c543a340d0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x55c543a34e48 <col:83, line:1083:5>
|     |-DeclStmt 0x55c543a34480 <line:1071:9, col:12>
|     | `-VarDecl 0x55c543a34418 <col:9, col:11> col:11 used x 'unsigned char':'unsigned char'
|     `-IfStmt 0x55c543a34e20 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55c543a34ab0 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55c543a349d8 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55c543a349a0 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55c543a34958 <col:14> '<bound member function type>' ->parse_saturating 0x55c543a34838
|       | |   | `-CXXThisExpr 0x55c543a34948 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55c543a344f0 <col:31> 'const String' lvalue ParmVar 0x55c543a33f90 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55c543a34510 <col:36> 'unsigned char':'unsigned char' lvalue Var 0x55c543a34418 'x' 'unsigned char':'unsigned char'
|       | |   `-DeclRefExpr 0x55c543a34530 <col:39> 'const ArgContext' lvalue ParmVar 0x55c543a340d0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55c543a34a90 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55c543a34a70 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55c543a34a58 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55c543a34a40 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x55c5439abb00 <col:17> 'int' lvalue ->status 0x55c5439a9d18
|       |     |     `-CXXThisExpr 0x55c5439abaf0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55c543a34a20 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55c543a349f0 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x55c5439abb40 <col:27> 'int' lvalue ->status 0x55c5439a9d18
|       |       |   `-CXXThisExpr 0x55c5439abb30 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55c543a34a08 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x55c5439abb70 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55c5439a8a00 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55c543a34ad0 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55c5439abc70 <col:20> 'bool' false
|       `-IfStmt 0x55c543a34df8 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55c543a34b10 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55c543a34ae0 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x55c5439abca0 <col:18> 'int' lvalue ->status 0x55c5439a9d18
|         | |   `-CXXThisExpr 0x55c5439abc90 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55c543a34af8 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55c5439abcd0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55c5439a8a00 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55c543a34d30 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55c543a34ca0 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x55c5439abd50 <line:1076:13> '<bound member function type>' ->range_error 0x55c5439aa328
|         | | | `-CXXThisExpr 0x55c5439abd40 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55c543a34b30 <col:25> 'const ArgContext' lvalue ParmVar 0x55c543a340d0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55c543a34d08 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55c543a34cd8 <col:31, col:50> 'const bool' lvalue Var 0x55c543660a50 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55c543a34c78 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55c543a34c60 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55c543a34c48 <col:43> 'unsigned char':'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55c543a34c28 <col:43> 'unsigned char':'unsigned char' lvalue Var 0x55c543a34418 'x' 'unsigned char':'unsigned char'
|         | `-ReturnStmt 0x55c543a34d20 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55c5439abf38 <col:20> 'bool' false
|         `-CompoundStmt 0x55c543a34dd8 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55c543a34da8 <line:1080:13, col:22> 'unsigned char':'unsigned char' lvalue '='
|           | |-DeclRefExpr 0x55c543a34d50 <col:13> 'unsigned char':'unsigned char' lvalue ParmVar 0x55c543a34068 'result' 'unsigned char &'
|           | `-ImplicitCastExpr 0x55c543a34d90 <col:22> 'unsigned char':'unsigned char' <LValueToRValue>
|           |   `-DeclRefExpr 0x55c543a34d70 <col:22> 'unsigned char':'unsigned char' lvalue Var 0x55c543a34418 'x' 'unsigned char':'unsigned char'
|           `-ReturnStmt 0x55c543a34dc8 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x55c5439abfd8 <col:20> 'bool' true
|-FieldDecl 0x55c5439a9cb0 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55c5439a9d18 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55c5439a9d68 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55c5439aa020 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55c5439a9da8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55c5439a9e28 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55c5439a9ea0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55c5439a9f20 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55c5439aa328 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55c5439aa0f0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55c5439aa168 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55c5439aa200 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55c5439ac8c8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55c5439ac8c8
| `-ParmVarDecl 0x55c5439ac9d8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55c5439acb58 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55c5439acc68 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55c543a2fb80 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55c543a2fb50 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55c543a2fb20 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55c543a2faf0 <col:7> 'IntArg' lvalue ParmVar 0x55c5439acc68 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55c5439a9cb0 'base' 'int'
| | `-ImplicitCastExpr 0x55c543a2fc78 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55c543a2fc48 <col:7> 'int' xvalue .base 0x55c5439a9cb0
| |     `-CXXStaticCastExpr 0x55c543a2fc18 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55c543a2fbe8 <col:7> 'IntArg' lvalue ParmVar 0x55c5439acc68 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55c5439a9d18 'status' 'int'
| | `-ImplicitCastExpr 0x55c543a2fd48 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55c543a2fd18 <col:7> 'int' xvalue .status 0x55c5439a9d18
| |     `-CXXStaticCastExpr 0x55c543a2fce8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55c543a2fcb8 <col:7> 'IntArg' lvalue ParmVar 0x55c5439acc68 '' 'IntArg &&'
| `-CompoundStmt 0x55c543a2fda0 <col:7>
`-CXXDestructorDecl 0x55c543a2ece0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c5439afe68 <../dummy_inc/click/args.hh:1177:1, col:62> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned char'
|-CXXRecordDecl 0x55c5439b00c8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55c543a2ec08 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55c543a2f180 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55c543a2f160 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55c543a2f1f0 <col:19>
|-CXXConstructorDecl 0x55c543a2ede8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned char> &)' inline default trivial noexcept-unevaluated 0x55c543a2ede8
| `-ParmVarDecl 0x55c543a2eef8 <col:19> col:19 'const DefaultArg<unsigned char> &'
|-CXXConstructorDecl 0x55c543a2ef98 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned char> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55c543a2f0a8 <col:19> col:19 used 'DefaultArg<unsigned char> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55c543a2fdb0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55c543a2fad0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55c543a2faa0 <col:19> 'DefaultArg<unsigned char>' xvalue static_cast<struct DefaultArg<unsigned char> &&> <NoOp>
| |       `-DeclRefExpr 0x55c543a2fa70 <col:19> 'DefaultArg<unsigned char>' lvalue ParmVar 0x55c543a2f0a8 '' 'DefaultArg<unsigned char> &&'
| `-CompoundStmt 0x55c543a2fe20 <col:19>
`-CXXDestructorDecl 0x55c543a2f230 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
