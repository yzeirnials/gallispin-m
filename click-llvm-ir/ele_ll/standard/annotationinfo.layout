
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56331f440708 prev 0x56331f437ea8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56331f440800 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x56331f440890 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x56331f440908 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x56331f4409c8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x56331f440a90 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x56331f440c08 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x56331f440b40 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x56331f440cb0 <col:24>
| `-OptimizeNoneAttr 0x56331f440d08 <col:34>
|-CXXMethodDecl 0x56331f440d50 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x56331f441008 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x56331f440e00 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x56331f440e78 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x56331f440ef8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x56331f4410c0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x56331f4410f8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x56331f441160 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x56331f4411e8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x56331f441508 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x56331f4412a0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x56331f441318 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x56331f441390 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x56331f441410 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x56331f441620 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x56331f448f98 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x56331f448f98
| `-ParmVarDecl 0x56331f4490a8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x56331f449148 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x56331f449148
| `-ParmVarDecl 0x56331f449258 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x56331f54c480 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56331f433720 prev 0x56331f4334a0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56331f433818 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x56331f4338a8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x56331f433908 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x56331f4339f8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x56331f433af8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x56331f433cc8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x56331f433b78 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x56331f433bf0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x56331f433e58 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x56331f433d90 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x56331f433f00 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x56331f434038 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x56331f433f70 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x56331f4341d8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x56331f434118 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x56331f434378 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x56331f4342b8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x56331f434420 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x56331f434520 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x56331f434600 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f434500 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x56331f4344e0 <col:26> 'int' 1
| `-EnumConstantDecl 0x56331f4345b0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x56331f434618 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56331f434590 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x56331f434570 <col:44> 'int' 2
|-CXXMethodDecl 0x56331f434760 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x56331f434648 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x56331f4346c8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x56331f4348b8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x56331f434828 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x56331f434af8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x56331f434978 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x56331f4349f0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x56331f434ba8 <col:20>
| `-OptimizeNoneAttr 0x56331f434c00 <col:30>
|-CXXMethodDecl 0x56331f434d08 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x56331f434c40 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x56331f434db0 <col:20>
| `-OptimizeNoneAttr 0x56331f434e08 <col:30>
|-CXXMethodDecl 0x56331f434e58 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x56331f434f20 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x56331f435038 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x56331f4350c0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x56331f435148 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x56331f4351d0 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x56331f435258 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x56331f4352e8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x56331f4353a8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x56331f435430 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x56331f4354b8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x56331f435540 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x56331f4355c8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x56331f435650 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x56331f4356e0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x56331f4357a0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x56331f435830 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x56331f435980 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x56331f4358e8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x56331f435b10 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x56331f435a40 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x56331f435dc0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x56331f435bc8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x56331f435c48 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x56331f435cc8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x56331f435e78 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x56331f435f80 <line:80:9, col:33> col:9 referenced CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56331f436210 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f435f60 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x56331f435f40 <col:33> 'int' 0
| |-EnumConstantDecl 0x56331f436010 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56331f436228 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f435ff0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x56331f435fd0 <col:32> 'int' 20
| |-EnumConstantDecl 0x56331f4360a0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56331f436240 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f436080 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x56331f436060 <col:38> 'int' 90
| |-EnumConstantDecl 0x56331f436130 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56331f436258 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f436110 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x56331f4360f0 <col:35> 'int' 100
| `-EnumConstantDecl 0x56331f4361c0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x56331f436270 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56331f4361a0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x56331f436180 <col:32> 'int' 2000
|-CXXMethodDecl 0x56331f4362b0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x56331f4366f0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56331f436560 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x56331f4365d8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56331f4367c0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x56331f436940 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x56331f436870 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56331f436b48 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56331f4369f8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x56331f436a70 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56331f436c48 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x56331f436ce8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x56331f436db0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x56331f436e40 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x56331f437070 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f436e20 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x56331f436e00 <col:36> 'int' EnumConstant 0x56331f436db0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x56331f436e90 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56331f436ee0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56331f436f30 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56331f436f80 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56331f436fd0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x56331f437020 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x56331f437158 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x56331f437098 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x56331f437220 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x56331f4372e0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x56331f4373a0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x56331f437460 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x56331f437578 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x56331f437640 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x56331f4377c0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x56331f4376f0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x56331f4378e8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x56331f437ae8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x56331f437998 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x56331f437a18 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x56331f445438 <col:54, line:127:5>
|   |-ParenExpr 0x56331f4452e8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x56331f4452b8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x56331f444fa8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x56331f444f80 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x56331f444f68 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x56331f444f50 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x56331f444f20 <col:31> 'Router *' lvalue ->_router 0x56331f442e00
|   |   |         `-CXXThisExpr 0x56331f444f10 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x56331f445008 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56331f444fe8 <col:48> 'int' 0
|   |   `-CallExpr 0x56331f445218 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x56331f445200 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56331f4451e0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56331ef6de00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56331f445258 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f445078 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x56331f445270 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f445098 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x56331f445288 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56331f4450d0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x56331f4452a0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56331f4451c8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56331f4451b0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56331f445168 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x56331f445380 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x56331f445318 <col:9> 'Router *' lvalue ->_router 0x56331f442e00
|   | | `-CXXThisExpr 0x56331f445308 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x56331f445368 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56331f445348 <col:19> 'Router *' lvalue ParmVar 0x56331f437998 'r' 'Router *'
|   `-BinaryOperator 0x56331f445418 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x56331f4453b0 <col:9> 'int' lvalue ->_eindex 0x56331f442e68
|     | `-CXXThisExpr 0x56331f4453a0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x56331f445400 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x56331f4453e0 <col:19> 'int' lvalue ParmVar 0x56331f437a18 'eindex' 'int'
|-CXXMethodDecl 0x56331f437c70 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x56331f437ba8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x56331f437d40 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x56331f437e08 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x56331f437ea8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x56331f4380f8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x56331f437f70 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x56331f437ff0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x56331f4381a8 <col:20>
| `-OptimizeNoneAttr 0x56331f438200 <col:30>
|-CXXMethodDecl 0x56331f438308 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x56331f438240 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x56331f4383b0 <col:20>
| `-OptimizeNoneAttr 0x56331f438408 <col:30>
|-CXXMethodDecl 0x56331f4384d8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x56331f438448 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x56331f438580 <col:20>
| `-OptimizeNoneAttr 0x56331f4385d8 <col:30>
|-CXXMethodDecl 0x56331f438768 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x56331f438610 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x56331f438690 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x56331f4388f8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x56331f438830 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x56331f438a48 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x56331f4389b8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x56331f438b98 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x56331f438b08 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x56331f438ce8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x56331f438c58 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x56331f438fa8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x56331f438da0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x56331f438e20 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x56331f438ec8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x56331f439080 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x56331f439140 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x56331f439410 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56331f4392c0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x56331f439338 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x56331f439538 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x56331f439710 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x56331f4395f0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x56331f439670 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x56331f4398f8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x56331f4397d8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x56331f439858 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x56331f439c68 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x56331f4399b8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56331f439a30 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56331f439ab0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56331f444a20 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56331f444a00 <col:106> 'int' 0
| `-ParmVarDecl 0x56331f439b28 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56331f444a58 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56331f444a38 <col:126> 'int' 0
|-CXXMethodDecl 0x56331f43a008 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56331f439d38 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56331f439dd0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56331f439e50 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x56331f439ec8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56331f444a90 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56331f444a70 <col:114> 'int' 0
|-CXXMethodDecl 0x56331f43a398 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56331f43a0e0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x56331f43a158 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56331f43a1d8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x56331f444aa8 <col:96> 'int' 0
| `-ParmVarDecl 0x56331f43a250 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56331f444ae8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56331f444ac8 <col:116> 'int' 0
|-CXXMethodDecl 0x56331f43a718 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x56331f43a468 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x56331f43a4e0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56331f43a560 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56331f444b20 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56331f444b00 <col:109> 'int' 0
| `-ParmVarDecl 0x56331f43a5d8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56331f444b58 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56331f444b38 <col:129> 'int' 0
|-CXXMethodDecl 0x56331f43aa98 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56331f43a7e8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x56331f43a860 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56331f43a8e0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x56331f43a958 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56331f444b90 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56331f444b70 <col:117> 'int' 0
|-CXXMethodDecl 0x56331f43ae28 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56331f43ab70 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56331f43abe8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56331f43ac68 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x56331f444ba8 <col:99> 'int' 0
| `-ParmVarDecl 0x56331f43ace0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56331f444be8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56331f444bc8 <col:119> 'int' 0
|-CXXMethodDecl 0x56331f43b248 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x56331f43aef8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x56331f43af78 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x56331f43aff0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56331f43b070 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56331f444c20 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56331f444c00 <col:108> 'int' 0
| `-ParmVarDecl 0x56331f43b0f0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x56331f444c58 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x56331f444c38 <col:141> 'int' 0
|-CXXMethodDecl 0x56331f43b668 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x56331f43b320 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x56331f43b3a0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x56331f43b418 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56331f43b498 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x56331f43b518 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x56331f444c70 <col:121> 'int' 0
|-CXXMethodDecl 0x56331f43ba98 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x56331f43b748 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x56331f43b7c8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x56331f43b840 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56331f43b8c0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x56331f444c90 <col:98> 'int' 0
| `-ParmVarDecl 0x56331f43b940 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x56331f444cb0 <col:123> 'int' 0
|-CXXMethodDecl 0x56331f43bd60 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x56331f43bb70 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56331f43bbf0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x56331f43bc70 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x56331f444cd0 <col:80> 'int' 0
|-EnumDecl 0x56331f43be18 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x56331f43bf20 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56331f43c1b0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f43bf00 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x56331f43bee0 <col:42> 'int' 1
| |-EnumConstantDecl 0x56331f43bfb0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56331f43c1c8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f43bf90 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x56331f43bf70 <col:40> 'int' 2
| |-EnumConstantDecl 0x56331f43c040 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56331f43c1e0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f43c020 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x56331f43c000 <col:44> 'int' 4
| |-EnumConstantDecl 0x56331f43c0d0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56331f43c1f8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f43c0b0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x56331f43c090 <col:36> 'int' 7
| `-EnumConstantDecl 0x56331f43c160 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x56331f43c210 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56331f43c140 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x56331f43c120 <col:34> 'int' 6
|-CXXMethodDecl 0x56331f43c4c8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x56331f43c238 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x56331f43c2d8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x56331f43c358 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x56331f43c3d0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x56331f444d88 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x56331f444d70 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x56331f444d58 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x56331f444d38 <col:98, col:105> 'String' (CXXTemporary 0x56331f444d38)
|           `-CXXTemporaryObjectExpr 0x56331f444d00 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x56331f43c768 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x56331f43c598 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x56331f43c610 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x56331f43c688 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x56331f444e38 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x56331f444e20 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x56331f444e08 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x56331f444de8 <col:94, col:101> 'String' (CXXTemporary 0x56331f444de8)
| |         `-CXXTemporaryObjectExpr 0x56331f444db0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x56331f445620 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x56331f445598 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x56331f445568 <col:9> '<bound member function type>' ->add_task_handlers 0x56331f43c4c8
|     | `-CXXThisExpr 0x56331f445558 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x56331f4455d8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x56331f4454d8 <col:27> 'Task *' lvalue ParmVar 0x56331f43c598 'task' 'Task *'
|     |-ImplicitCastExpr 0x56331f4455f0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x56331f4454f8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x56331f43c610 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x56331f445608 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x56331f445518 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x56331f43c160 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x56331f445538 <col:62> 'const String' lvalue ParmVar 0x56331f43c688 'prefix' 'const String &'
|-CXXMethodDecl 0x56331f43c978 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x56331f43c830 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x56331f43c8a8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x56331f444ee8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x56331f444ed0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x56331f444eb8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x56331f444e98 <col:70, col:77> 'String' (CXXTemporary 0x56331f444e98)
| |         `-CXXTemporaryObjectExpr 0x56331f444e60 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x56331f4457f8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x56331f445770 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x56331f445740 <col:9> '<bound member function type>' ->add_task_handlers 0x56331f43c4c8
|     | `-CXXThisExpr 0x56331f445730 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x56331f4457b0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x56331f4456b0 <col:27> 'Task *' lvalue ParmVar 0x56331f43c830 'task' 'Task *'
|     |-ImplicitCastExpr 0x56331f4457c8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x56331f4456d0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x56331f4457e0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x56331f4456f0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x56331f43c160 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x56331f445710 <col:57> 'const String' lvalue ParmVar 0x56331f43c8a8 'prefix' 'const String &'
|-CXXMethodDecl 0x56331f43cc58 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x56331f43ca40 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56331f43cac0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56331f43cb38 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x56331f43cf08 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x56331f43cd28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56331f43cda8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56331f43ce28 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x56331f43d1f8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x56331f43cfd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56331f43d058 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56331f43d0d0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x56331f43d4a8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x56331f43d2c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56331f43d348 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56331f43d3c8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x56331f43d758 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x56331f43d578 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56331f43d5f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56331f43d678 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x56331f43da08 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x56331f43d828 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56331f43d8a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56331f43d920 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x56331f43dcb8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x56331f43dad8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56331f43db58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56331f43dbd8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x56331f43dfc8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x56331f43dde0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56331f43de60 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56331f43dee0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x56331f43e2a8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x56331f43e098 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56331f43e118 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56331f43e1c0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x56331f43e588 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x56331f43e378 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56331f43e3f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56331f43e4a0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x56331f43e7f0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x56331f43e658 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x56331f43e6d8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x56331f43e750 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x56331f43ea98 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x56331f43e8c0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x56331f43e940 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x56331f43e9b8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x56331f43ed48 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x56331f43eb68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56331f43ebe8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56331f43ec68 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x56331f43eff8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x56331f43ee18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56331f43ee98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56331f43ef10 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x56331f43f2a8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x56331f43f0c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56331f43f148 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56331f43f1c0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x56331f43f578 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x56331f43f378 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56331f43f3f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56331f43f498 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x56331f43f8a8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x56331f43f648 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56331f43f6c8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x56331f43f740 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x56331f43f7b8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56331f444f00 <col:93> 'bool' false
|-CXXMethodDecl 0x56331f43fa90 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56331f43f978 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x56331f43f9f8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x56331f43fc68 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56331f43fb50 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x56331f43fbd0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x56331f43ff48 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56331f43fd28 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x56331f43fda0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x56331f43fe20 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x56331f43fe98 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x56331f440238 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56331f440018 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x56331f440090 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x56331f440110 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x56331f440188 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x56331f440470 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x56331f440310 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x56331f440390 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x56331f440658 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x56331f440538 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x56331f4405b8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x56331f440708 prev 0x56331f437ea8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56331f440800 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x56331f440890 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x56331f440908 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x56331f4409c8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x56331f440a90 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x56331f440c08 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x56331f440b40 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x56331f440cb0 <col:24>
| | `-OptimizeNoneAttr 0x56331f440d08 <col:34>
| |-CXXMethodDecl 0x56331f440d50 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x56331f441008 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x56331f440e00 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x56331f440e78 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x56331f440ef8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x56331f4410c0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x56331f4410f8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x56331f441160 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x56331f4411e8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x56331f441508 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x56331f4412a0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x56331f441318 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x56331f441390 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x56331f441410 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x56331f441620 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x56331f448f98 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x56331f448f98
| | `-ParmVarDecl 0x56331f4490a8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x56331f449148 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x56331f449148
| | `-ParmVarDecl 0x56331f449258 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x56331f54c480 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56331f441698 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x56331f441738 <col:38> "" ""
|-CXXMethodDecl 0x56331f4417c8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x56331f441868 <col:44> "" ""
|-AccessSpecDecl 0x56331f4418d8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x56331f441900 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x56331f441a00 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x56331f441a50 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56331f4419e0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x56331f4419c0 <col:27> 'int' 4
|-FieldDecl 0x56331f441b08 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x56331f441cb8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x56331f441d70 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x56331f442e00 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x56331f442e68 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x56331f442fb8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x56331f442ef8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x56331f443168 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x56331f443078 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x56331f443348 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x56331f443228 <col:20> col:23 'int'
| `-ParmVarDecl 0x56331f4432a8 <col:25> col:28 'int'
|-CXXMethodDecl 0x56331f4435f0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x56331f443410 <col:23> col:26 'int'
| |-ParmVarDecl 0x56331f443490 <col:28> col:31 'int'
| `-ParmVarDecl 0x56331f443508 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x56331f4436a8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x56331f443770 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x56331f4437c0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x56331f443810 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x56331f4439f0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x56331f4438a0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x56331f443918 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56331f443c98 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x56331f443ab8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x56331f443b38 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x56331f443bb0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x56331f443eb8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x56331f443d68 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x56331f443de8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x56331f4441f0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x56331f443f78 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x56331f443ff8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x56331f444070 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x56331f4440f0 <col:57> col:60 'int'
|-CXXMethodDecl 0x56331f4443d8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56331f4442c0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x56331f444340 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x56331f444528 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x56331f444498 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x56331f4448a8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x56331f4445e8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x56331f444668 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x56331f4446e0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x56331f444760 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x56331f4449c0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class AnnotationInfo
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56331f44c108 <../elements/standard/annotationinfo.hh:29:1, line:39:1> line:29:7 class AnnotationInfo definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x56331f44c268 <col:1, col:7> col:7 implicit referenced class AnnotationInfo
|-AccessSpecDecl 0x56331f44c2f8 <col:41, col:47> col:41 public
|-CXXConstructorDecl 0x56331f44c380 <line:31:5, col:20> col:5 AnnotationInfo 'void ()'
|-CXXMethodDecl 0x56331f44c480 <line:33:5, col:63> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x56331f434e58 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x56331f44d1f0 <col:36, col:63>
|   `-ReturnStmt 0x56331f44d1e0 <col:38, col:45>
|     `-ImplicitCastExpr 0x56331f44d1c8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x56331f44d1a0 <col:45> 'const char [15]' lvalue "AnnotationInfo"
|-CXXMethodDecl 0x56331f44c548 <line:35:5, col:65> col:9 configure_phase 'int () const'
| |-Overrides: [ 0x56331f4362b0 Element::configure_phase 'int () const' ]
| `-CompoundStmt 0x56331f44d250 <col:33, col:65>
|   `-ReturnStmt 0x56331f44d240 <col:35, col:42>
|     `-ImplicitCastExpr 0x56331f44d228 <col:42> 'int' <IntegralCast>
|       `-DeclRefExpr 0x56331f44d208 <col:42> 'Element::ConfigurePhase' EnumConstant 0x56331f435f80 'CONFIGURE_PHASE_FIRST' 'Element::ConfigurePhase'
|-CXXMethodDecl 0x56331f44c820 <line:36:5, col:59> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x56331f4366f0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x56331f44c6d0 <col:19, col:35> col:35 conf 'Vector<String> &'
| `-ParmVarDecl 0x56331f44c748 <col:41, col:55> col:55 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56331f44c978 <line:37:5, col:38> col:9 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x56331f436940 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x56331f44c8e0 <col:20, col:34> col:34 errh 'ErrorHandler *'
|-CXXConstructorDecl 0x56331f44ca48 <line:29:7> col:7 implicit AnnotationInfo 'void (const AnnotationInfo &)' inline default_delete noexcept-unevaluated 0x56331f44ca48
| `-ParmVarDecl 0x56331f44cb58 <col:7> col:7 'const AnnotationInfo &'
|-CXXConstructorDecl 0x56331f44cbf8 <col:7> col:7 implicit AnnotationInfo 'void (AnnotationInfo &&)' inline default_delete noexcept-unevaluated 0x56331f44cbf8
| `-ParmVarDecl 0x56331f44cd08 <col:7> col:7 'AnnotationInfo &&'
|-CXXMethodDecl 0x56331f44cda8 <col:7> col:7 implicit operator= 'AnnotationInfo &(const AnnotationInfo &)' inline default_delete noexcept-unevaluated 0x56331f44cda8
| `-ParmVarDecl 0x56331f44ceb8 <col:7> col:7 'const AnnotationInfo &'
|-CXXMethodDecl 0x56331f44cf28 <col:7> col:7 implicit operator= 'AnnotationInfo &(AnnotationInfo &&)' inline default_delete noexcept-unevaluated 0x56331f44cf28
| `-ParmVarDecl 0x56331f44d038 <col:7> col:7 'AnnotationInfo &&'
`-CXXDestructorDecl 0x56331f44d0c0 <col:7> col:7 implicit ~AnnotationInfo 'void ()' inline default noexcept-unevaluated 0x56331f44d0c0
  `-Overrides: [ 0x56331f4339f8 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.AnnotationInfo = type { %class.Element.base, [4 x i8] }
  NonVirtualBaseLLVMType:%class.AnnotationInfo.base = type { %class.Element.base }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56331f2075c0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x56331f2076d8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x56331f207778 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x56331f2077d8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x56331f207838 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x56331f2078e8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56331f207bf0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56331f207d08 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x56331f207db0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x56331f207e18 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x56331f207ea8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x56331f20df40 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56331f20e378 <col:12>
|-CXXConstructorDecl 0x56331f20e048 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56331f20e158 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56331f207db0 'data' 'const char *'
| | `-ImplicitCastExpr 0x56331f210900 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x56331f2108d0 <col:12> 'const char *const' lvalue .data 0x56331f207db0
| |     `-DeclRefExpr 0x56331f2108b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56331f20e158 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56331f207e18 'length' 'int'
| | `-ImplicitCastExpr 0x56331f210990 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x56331f210960 <col:12> 'const int' lvalue .length 0x56331f207e18
| |     `-DeclRefExpr 0x56331f210940 <col:12> 'const String::rep_t' lvalue ParmVar 0x56331f20e158 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56331f207ea8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x56331f210a20 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x56331f2109f0 <col:12> 'String::memo_t *const' lvalue .memo 0x56331f207ea8
| |     `-DeclRefExpr 0x56331f2109d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56331f20e158 '' 'const String::rep_t &'
| `-CompoundStmt 0x56331f210a78 <col:12>
|-CXXConstructorDecl 0x56331f20e1f8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56331f20e1f8
| `-ParmVarDecl 0x56331f20e308 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x56331f213860 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56331f21f278 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56331f21f388 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x56331f21f8a0 <col:12>
|   |-BinaryOperator 0x56331f21f6b8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x56331f21f670 <col:12> 'const char *' lvalue ->data 0x56331f207db0
|   | | `-CXXThisExpr 0x56331f21f660 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56331f21f6a0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x56331f21f630 <col:12> 'const char *const' lvalue .data 0x56331f207db0
|   |     `-DeclRefExpr 0x56331f21f610 <col:12> 'const String::rep_t' lvalue ParmVar 0x56331f21f388 '' 'const String::rep_t &'
|   |-BinaryOperator 0x56331f21f780 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x56331f21f738 <col:12> 'int' lvalue ->length 0x56331f207e18
|   | | `-CXXThisExpr 0x56331f21f728 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56331f21f768 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x56331f21f6f8 <col:12> 'const int' lvalue .length 0x56331f207e18
|   |     `-DeclRefExpr 0x56331f21f6d8 <col:12> 'const String::rep_t' lvalue ParmVar 0x56331f21f388 '' 'const String::rep_t &'
|   |-BinaryOperator 0x56331f21f848 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x56331f21f800 <col:12> 'String::memo_t *' lvalue ->memo 0x56331f207ea8
|   | | `-CXXThisExpr 0x56331f21f7f0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56331f21f830 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x56331f21f7c0 <col:12> 'String::memo_t *const' lvalue .memo 0x56331f207ea8
|   |     `-DeclRefExpr 0x56331f21f7a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56331f21f388 '' 'const String::rep_t &'
|   `-ReturnStmt 0x56331f21f890 <col:12>
|     `-UnaryOperator 0x56331f21f878 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56331f21f868 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x56331f21f3f8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56331f21f3f8
  `-ParmVarDecl 0x56331f21f508 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56331f1feb30 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56331f1fec48 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x56331f1fecd8 <col:16, col:22> col:16 public
|-TypedefDecl 0x56331f1fed18 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x56331eed1e00 'const char *'
|   `-QualType 0x56331eed1351 'const char' const
|     `-BuiltinType 0x56331eed1350 'char'
|-TypedefDecl 0x56331f1feda0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x56331f1fed70 'String::const_iterator' sugar
|   |-Typedef 0x56331f1fed18 'const_iterator'
|   `-PointerType 0x56331eed1e00 'const char *'
|     `-QualType 0x56331eed1351 'const char' const
|       `-BuiltinType 0x56331eed1350 'char'
|-TypedefDecl 0x56331f1fef10 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x56331f1fee80 'int (String::*)() const'
|   |-RecordType 0x56331f1febc0 'String'
|   | `-CXXRecord 0x56331f1feb30 'String'
|   `-ParenType 0x56331f1fee20 'int () const' sugar
|     `-FunctionProtoType 0x56331f1d29b0 'int () const' const cdecl
|       `-BuiltinType 0x56331eed13b0 'int'
|-TypedefDecl 0x56331f1fef78 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x56331f027590 'int64_t' sugar
|   |-Typedef 0x56331ef3a2a0 'int64_t'
|   `-TypedefType 0x56331ef13510 '__int64_t' sugar
|     |-Typedef 0x56331ef130e8 '__int64_t'
|     `-BuiltinType 0x56331eed13d0 'long'
|-TypedefDecl 0x56331f1fefe0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x56331f0274b0 'uint64_t' sugar
|   |-Typedef 0x56331ef3a440 'uint64_t'
|   `-TypedefType 0x56331ef135a0 '__uint64_t' sugar
|     |-Typedef 0x56331ef13158 '__uint64_t'
|     `-BuiltinType 0x56331eed1470 'unsigned long'
|-TypedefDecl 0x56331f1ff070 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x56331f1ff040 'String::intmax_t' sugar
|   |-Typedef 0x56331f1fef78 'intmax_t'
|   `-TypedefType 0x56331f027590 'int64_t' sugar
|     |-Typedef 0x56331ef3a2a0 'int64_t'
|     `-TypedefType 0x56331ef13510 '__int64_t' sugar
|       |-Typedef 0x56331ef130e8 '__int64_t'
|       `-BuiltinType 0x56331eed13d0 'long'
|-TypedefDecl 0x56331f1ff100 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x56331f1ff0d0 'String::uintmax_t' sugar
|   |-Typedef 0x56331f1fefe0 'uintmax_t'
|   `-TypedefType 0x56331f0274b0 'uint64_t' sugar
|     |-Typedef 0x56331ef3a440 'uint64_t'
|     `-TypedefType 0x56331ef135a0 '__uint64_t' sugar
|       |-Typedef 0x56331ef13158 '__uint64_t'
|       `-BuiltinType 0x56331eed1470 'unsigned long'
|-CXXConstructorDecl 0x56331f1ff1c0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x56331f1ff368 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x56331f1ff2a8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x56331f1ff518 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x56331f1ff458 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x56331f1ff670 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x56331f1ff5e0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x56331f1ff888 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x56331f1ff738 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x56331f1ff7b8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x56331f1ffaa8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x56331f1ff958 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x56331f1ff9d8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x56331f1ffcc8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x56331f1ffb78 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x56331f1ffbf8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x56331f1ffee8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x56331f1ffd98 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x56331f1ffe18 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x56331f200078 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x56331f1fffb0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x56331f2001f8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x56331f200138 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x56331f200388 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x56331f2002c0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x56331f2004e0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x56331f200450 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x56331f200638 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x56331f2005a8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x56331f200790 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x56331f200700 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x56331f200918 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x56331f200858 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x56331f200aa8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x56331f2009e0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x56331f200c38 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x56331f200b70 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x56331f200dc8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x56331f200d00 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x56331f200ec0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x56331f200fe8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x56331f201168 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x56331f2010a0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x56331f2012b8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x56331f201228 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x56331f201370 <col:63> "" ""
|-CXXMethodDecl 0x56331f2014b8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x56331f2013f8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x56331f2016c8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x56331f201578 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x56331f2015f8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x56331f2018e8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x56331f201790 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x56331f201810 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x56331f201bc8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x56331f2019a8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x56331f201a28 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x56331f20da10 <col:55> 'int' 10
| `-ParmVarDecl 0x56331f201aa0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56331f20da30 <col:76> 'bool' true
|-CXXMethodDecl 0x56331f201ea8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x56331f201c90 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x56331f201d10 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x56331f20da40 <col:56> 'int' 10
| `-ParmVarDecl 0x56331f201d88 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56331f20da60 <col:77> 'bool' true
|-CXXMethodDecl 0x56331f201fb0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x56331f202078 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x56331f202140 <line:81:5, col:60> col:52 used c_str 'const char *() const'
| |-NoInlineAttr 0x56331f2021e0 <col:20>
| `-OptimizeNoneAttr 0x56331f202238 <col:30>
|-CXXConversionDecl 0x56331f202328 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x56331f2023f8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x56331f2024b8 <line:85:5, col:29> col:17 used operator! 'bool () const' inline
|-CXXMethodDecl 0x56331f2025a8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x56331f202668 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x56331f2027e8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x56331f202720 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x56331f202938 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x56331f2028a8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x56331f202a28 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x56331f202ae8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x56331f202d38 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x56331f202ba0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x56331f202c20 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x56331f202f98 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x56331f202e00 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x56331f202e80 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x56331f203068 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x56331f203278 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x56331f203120 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x56331f2031a0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x56331f203498 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x56331f203340 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x56331f2033c0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x56331f203628 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x56331f203560 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x56331f203718 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x56331f203888 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x56331f2037c8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56331f203a98 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x56331f203948 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x56331f2039c8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x56331f203cb0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x56331f203b58 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x56331f203bd0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x56331f203e40 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x56331f203d70 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56331f204060 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x56331f203f00 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x56331f203f80 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x56331f2041b0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x56331f204120 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x56331f204388 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x56331f204270 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x56331f2042f0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x56331f2044d8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x56331f204448 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x56331f2046f0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x56331f204590 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x56331f204610 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x56331f20da70 <col:39> 'int' 0
|-CXXMethodDecl 0x56331f204910 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x56331f2047b0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x56331f204830 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x56331f20da90 <col:48> 'int' 0
|-CXXMethodDecl 0x56331f204af0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x56331f2049d0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x56331f204a50 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x56331f20dab0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x56331f204bc0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x56331f204c80 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x56331f204d40 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x56331f204e00 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x56331f204ec0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x56331f205068 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x56331f204f70 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x56331f2051e8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x56331f205120 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x56331f2053c0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x56331f2052a8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x56331f205538 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x56331f205478 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x56331f205680 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x56331f2055f0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56331f2057d0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x56331f205740 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x56331f2059a8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x56331f205890 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x56331f205910 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x56331f205b88 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x56331f205a70 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x56331f205af0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x56331f205cd8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x56331f205c48 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x56331f205ee8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x56331f205d98 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x56331f205e18 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x56331f206048 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x56331f205fb0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x56331f2061a0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x56331f206108 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x56331f206248 <col:57> "" ""
|-CXXMethodDecl 0x56331f206358 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x56331f2062c8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x56331f2064a8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x56331f206418 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x56331f206628 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x56331f206560 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x56331f2066f0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x56331f2067b0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x56331f206870 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x56331f206910 <col:49> "" ""
|-CXXMethodDecl 0x56331f2069a0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x56331f206a60 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x56331f206b50 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x56331f206c18 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x56331f206cd8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x56331f206d98 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x56331f206e90 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x56331f206f58 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x56331f207020 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x56331f2071f8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x56331f2070d8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x56331f207158 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x56331f207420 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x56331f2072c0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x56331f207340 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x56331f207530 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x56331f207598 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x56331f2075c0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56331f2076d8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x56331f207778 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x56331f2077d8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x56331f207838 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x56331f2078e8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x56331f207950 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x56331f207b88 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x56331f207bd8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56331f207b68 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x56331f207a78 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x56331f207a20 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x56331f207a60 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x56331f207a40 <col:32> 'int' 8
|-CXXRecordDecl 0x56331f207bf0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56331f207d08 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x56331f207db0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x56331f207e18 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x56331f207ea8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x56331f20df40 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56331f20e378 <col:12>
| |-CXXConstructorDecl 0x56331f20e048 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56331f20e158 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56331f207db0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x56331f210900 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x56331f2108d0 <col:12> 'const char *const' lvalue .data 0x56331f207db0
| | |     `-DeclRefExpr 0x56331f2108b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56331f20e158 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56331f207e18 'length' 'int'
| | | `-ImplicitCastExpr 0x56331f210990 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x56331f210960 <col:12> 'const int' lvalue .length 0x56331f207e18
| | |     `-DeclRefExpr 0x56331f210940 <col:12> 'const String::rep_t' lvalue ParmVar 0x56331f20e158 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56331f207ea8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x56331f210a20 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x56331f2109f0 <col:12> 'String::memo_t *const' lvalue .memo 0x56331f207ea8
| | |     `-DeclRefExpr 0x56331f2109d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56331f20e158 '' 'const String::rep_t &'
| | `-CompoundStmt 0x56331f210a78 <col:12>
| |-CXXConstructorDecl 0x56331f20e1f8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56331f20e1f8
| | `-ParmVarDecl 0x56331f20e308 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x56331f213860 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x56331f21f278 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56331f21f388 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x56331f21f8a0 <col:12>
| |   |-BinaryOperator 0x56331f21f6b8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x56331f21f670 <col:12> 'const char *' lvalue ->data 0x56331f207db0
| |   | | `-CXXThisExpr 0x56331f21f660 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56331f21f6a0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x56331f21f630 <col:12> 'const char *const' lvalue .data 0x56331f207db0
| |   |     `-DeclRefExpr 0x56331f21f610 <col:12> 'const String::rep_t' lvalue ParmVar 0x56331f21f388 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x56331f21f780 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x56331f21f738 <col:12> 'int' lvalue ->length 0x56331f207e18
| |   | | `-CXXThisExpr 0x56331f21f728 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56331f21f768 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x56331f21f6f8 <col:12> 'const int' lvalue .length 0x56331f207e18
| |   |     `-DeclRefExpr 0x56331f21f6d8 <col:12> 'const String::rep_t' lvalue ParmVar 0x56331f21f388 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x56331f21f848 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x56331f21f800 <col:12> 'String::memo_t *' lvalue ->memo 0x56331f207ea8
| |   | | `-CXXThisExpr 0x56331f21f7f0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56331f21f830 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x56331f21f7c0 <col:12> 'String::memo_t *const' lvalue .memo 0x56331f207ea8
| |   |     `-DeclRefExpr 0x56331f21f7a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56331f21f388 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x56331f21f890 <col:12>
| |     `-UnaryOperator 0x56331f21f878 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56331f21f868 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x56331f21f3f8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56331f21f3f8
|   `-ParmVarDecl 0x56331f21f508 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x56331f207f20 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x56331f208168 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x56331f207f88 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x56331f208008 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x56331f208080 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x56331f20df00 <col:79, line:261:5>
|   |-BinaryOperator 0x56331f20db78 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x56331f20db10 <col:2, col:5> 'const char *' lvalue .data 0x56331f207db0
|   | | `-MemberExpr 0x56331f20dae0 <col:2> 'String::rep_t' lvalue ->_r 0x56331f207f20
|   | |   `-CXXThisExpr 0x56331f20dad0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x56331f20db60 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56331f20db40 <col:12> 'const char *' lvalue ParmVar 0x56331f207f88 'data' 'const char *'
|   |-BinaryOperator 0x56331f20dc40 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x56331f20dbd8 <col:2, col:5> 'int' lvalue .length 0x56331f207e18
|   | | `-MemberExpr 0x56331f20dba8 <col:2> 'String::rep_t' lvalue ->_r 0x56331f207f20
|   | |   `-CXXThisExpr 0x56331f20db98 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x56331f20dc28 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56331f20dc08 <col:14> 'int' lvalue ParmVar 0x56331f208008 'length' 'int'
|   `-IfStmt 0x56331f20dee8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x56331f20dd60 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x56331f20dd48 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x56331f20dd28 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x56331f20dd08 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x56331f20dca0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x56331f207ea8
|     |       | `-MemberExpr 0x56331f20dc70 <col:7> 'String::rep_t' lvalue ->_r 0x56331f207f20
|     |       |   `-CXXThisExpr 0x56331f20dc60 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x56331f20dcf0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x56331f20dcd0 <col:17> 'String::memo_t *' lvalue ParmVar 0x56331f208080 'memo' 'String::memo_t *'
|     `-CallExpr 0x56331f20dec0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x56331f20dea8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56331f20ddb0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x56331f1f6b98 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x56331f20de18 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56331f207778
|         `-ImplicitCastExpr 0x56331f20de00 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x56331f20dde0 <col:27> 'String::memo_t *' lvalue ParmVar 0x56331f208080 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x56331f208418 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x56331f208238 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x56331f2082b8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x56331f208330 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x56331f207f20 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x56331f20e388 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56331f20e518 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x56331f20e480 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x56331f20e3f0 <col:2> '<bound member function type>' ->assign_memo 0x56331f208168
|     | `-ImplicitCastExpr 0x56331f20e4b8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x56331f20e3e0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x56331f20e4d0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x56331f20e420 <col:14> 'const char *' lvalue ParmVar 0x56331f208238 'data' 'const char *'
|     |-ImplicitCastExpr 0x56331f20e4e8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x56331f20e440 <col:20> 'int' lvalue ParmVar 0x56331f2082b8 'length' 'int'
|     `-ImplicitCastExpr 0x56331f20e500 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x56331f20e460 <col:28> 'String::memo_t *' lvalue ParmVar 0x56331f208330 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x56331f2085a8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x56331f2084e8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x56331f20e770 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x56331f20e6f0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x56331f20e540 <col:2> '<bound member function type>' ->assign_memo 0x56331f208168
|     | `-CXXThisExpr 0x56331f20e530 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x56331f20e728 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x56331f20e5c0 <col:14, col:19> 'const char *' lvalue .data 0x56331f207db0
|     |   `-MemberExpr 0x56331f20e590 <col:14, col:16> 'String::rep_t' lvalue ._r 0x56331f207f20
|     |     `-DeclRefExpr 0x56331f20e570 <col:14> 'const String' lvalue ParmVar 0x56331f2084e8 'x' 'const String &'
|     |-ImplicitCastExpr 0x56331f20e740 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x56331f20e640 <col:25, col:30> 'int' lvalue .length 0x56331f207e18
|     |   `-MemberExpr 0x56331f20e610 <col:25, col:27> 'String::rep_t' lvalue ._r 0x56331f207f20
|     |     `-DeclRefExpr 0x56331f20e5f0 <col:25> 'const String' lvalue ParmVar 0x56331f2084e8 'x' 'const String &'
|     `-ImplicitCastExpr 0x56331f20e758 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x56331f20e6c0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x56331f207ea8
|         `-MemberExpr 0x56331f20e690 <col:38, col:40> 'String::rep_t' lvalue ._r 0x56331f207f20
|           `-DeclRefExpr 0x56331f20e670 <col:38> 'const String' lvalue ParmVar 0x56331f2084e8 'x' 'const String &'
|-CXXMethodDecl 0x56331f208670 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x56331f20f130 <col:31, line:278:5>
|   `-IfStmt 0x56331f20f118 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x56331f20e810 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x56331f20e7f8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x56331f20e7c8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x56331f207ea8
|     |     `-MemberExpr 0x56331f20e798 <col:6> 'String::rep_t' lvalue ->_r 0x56331f207f20
|     |       `-CXXThisExpr 0x56331f20e788 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x56331f20f0f0 <col:15, line:277:2>
|       |-ParenExpr 0x56331f20ecc0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x56331f20ec90 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x56331f20e920 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x56331f20e908 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x56331f20e8f0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x56331f20e8b0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56331f207778
|       |   |       `-ImplicitCastExpr 0x56331f20e898 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x56331f20e868 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x56331f207ea8
|       |   |           `-MemberExpr 0x56331f20e838 <col:27> 'String::rep_t' lvalue ->_r 0x56331f207f20
|       |   |             `-CXXThisExpr 0x56331f20e828 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x56331f20e980 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x56331f20e960 <col:54> 'int' 0
|       |   `-CallExpr 0x56331f20ebf0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x56331f20ebd8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x56331f20eb58 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56331ef6de00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x56331f20ec30 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x56331f20ea68 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x56331f20ec48 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x56331f20ea98 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x56331f20ec60 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x56331f20ead0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x56331f20ec78 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x56331f20eb40 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x56331f20eb28 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x56331f20eaf0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x56331f20f010 <line:274:6, line:275:22>
|       | |-CallExpr 0x56331f20eed0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x56331f20eeb8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x56331f20ee30 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x56331f1f7fe0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x56331f20ee00 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56331f207778
|       | |   `-ImplicitCastExpr 0x56331f20ede8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x56331f20edb8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x56331f207ea8
|       | |       `-MemberExpr 0x56331f20ed88 <col:40> 'String::rep_t' lvalue ->_r 0x56331f207f20
|       | |         `-CXXThisExpr 0x56331f20ed78 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x56331f20efd0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x56331f20efb8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x56331f20eef8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x56331f20ce50 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x56331f20eff8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x56331f20ef58 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x56331f207ea8
|       |       `-MemberExpr 0x56331f20ef28 <col:15> 'String::rep_t' lvalue ->_r 0x56331f207f20
|       |         `-CXXThisExpr 0x56331f20ef18 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x56331f20f0d0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x56331f20f068 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x56331f207ea8
|         | `-MemberExpr 0x56331f20f038 <col:6> 'String::rep_t' lvalue ->_r 0x56331f207f20
|         |   `-CXXThisExpr 0x56331f20f028 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x56331f20f0b8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x56331f20f098 <col:16> 'int' 0
|-CXXMethodDecl 0x56331f208908 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x56331f208728 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x56331f2087a8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x56331f208820 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x56331f2089e0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x56331f208c30 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x56331f208a98 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x56331f208b18 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x56331f208b90 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x56331f208e18 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x56331f208d00 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x56331f208d80 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x56331f208f18 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x56331f20f208 <col:41, line:286:5>
|   `-ReturnStmt 0x56331f20f1f8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x56331f20f1c8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x56331f20f190 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x56331f20f178 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x56331f20f158 <col:46> 'int' 1
|-CXXMethodDecl 0x56331f2091b8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x56331f208fd0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x56331f209050 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x56331f2090d0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x56331f20ce50 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x56331f209280 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x56331f20cf20 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x56331f20d0f0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x56331f20cfd8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x56331f20d058 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x56331f20d1b0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x56331f20d278 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x56331f20d378 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x56331f20d3f0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x56331f20d468 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x56331f20d4d0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x56331f20d5d0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x56331f20d620 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56331f20d5b0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x56331f20d590 <col:22> 'int' 14
|-CXXMethodDecl 0x56331f20d838 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x56331f20d650 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x56331f20d6d0 <col:38> col:41 'int'
| `-ParmVarDecl 0x56331f20d750 <col:43> col:46 'int'
|-FriendDecl 0x56331f20d940 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x56331f20d9d0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56331f2cf550 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x56331f2cf728 prev 0x56331f2cf550 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56331f2cf7b8 <col:46, col:52> col:46 public
|-TypedefDecl 0x56331f2cf7e0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56331eed13b0 'int'
|-TypedefDecl 0x56331f2d1140 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x56331f2d10f0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x56331f2d10d0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x56331f2cf9f8 'type'
|     `-SubstTemplateTypeParmType 0x56331f2cf9c0 'String' sugar
|       |-TemplateTypeParmType 0x56331f1c23d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56331f1c2380 'T'
|       `-RecordType 0x56331f1febc0 'String'
|         `-CXXRecord 0x56331f1feb30 'String'
|-TypedefDecl 0x56331f2d11f8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x56331f2d11c0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x56331f2d11a0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x56331f2d1140 'type'
|     `-ElaboratedType 0x56331f2d10f0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x56331f2d10d0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x56331f2cf9f8 'type'
|         `-SubstTemplateTypeParmType 0x56331f2cf9c0 'String' sugar
|           |-TemplateTypeParmType 0x56331f1c23d0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x56331f1c2380 'T'
|           `-RecordType 0x56331f1febc0 'String'
|             `-CXXRecord 0x56331f1feb30 'String'
|-CXXMethodDecl 0x56331f2d1378 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x56331f2d1288 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x56331f2d1468 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56331f2d1548 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x56331f2d1818 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x56331f2d1720 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x56331f2d1a58 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56331f2d18d0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56331f2d1948 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56331f2d1c28 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56331f2d1b18 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56331f2d1b90 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56331f2d1d88 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x56331f2d1e58 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x56331f47c0b8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56331f2d1f18 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x56331f47bfa0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56331f47c318 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x56331f47c188 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x56331f47c200 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56331f47c4d8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56331f47c3e8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56331f47c698 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56331f47c5a0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56331f47c750 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56331f47c800 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56331f47ca38 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56331f47c8b0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56331f47c928 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56331f47ccd8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x56331f47cbe0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x56331f47cda0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x56331f47cdf0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56331f47ce40 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56331f436360 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x56331f2cdfb8 prev 0x56331f436360 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56331f2cf4c0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x56331f2cf470 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x56331f2cf450 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x56331f2cf300 'type'
|     `-SubstTemplateTypeParmType 0x56331f2cf190 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x56331f198180 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x56331f198128 'F'
|       `-RecordType 0x56331f2cedf0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x56331f2ced10 'typed_array_memory'
|-FieldDecl 0x56331f47ce90 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x56331f47cee0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56331f47cf18 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x56331f2ce050 'String' sugar
|   |-TemplateTypeParmType 0x56331f1cf6f0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56331f1cf698 'T'
|   `-RecordType 0x56331f1febc0 'String'
|     `-CXXRecord 0x56331f1feb30 'String'
|-TypedefDecl 0x56331f47cfa8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x56331f47cf70 'String &'
|   `-SubstTemplateTypeParmType 0x56331f2ce050 'String' sugar
|     |-TemplateTypeParmType 0x56331f1cf6f0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56331f1cf698 'T'
|     `-RecordType 0x56331f1febc0 'String'
|       `-CXXRecord 0x56331f1feb30 'String'
|-TypedefDecl 0x56331f47d038 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x56331f47d000 'const String &'
|   `-QualType 0x56331f2ce051 'const String' const
|     `-SubstTemplateTypeParmType 0x56331f2ce050 'String' sugar
|       |-TemplateTypeParmType 0x56331f1cf6f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56331f1cf698 'T'
|       `-RecordType 0x56331f1febc0 'String'
|         `-CXXRecord 0x56331f1feb30 'String'
|-TypedefDecl 0x56331f47d0c8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x56331f47d090 'String *'
|   `-SubstTemplateTypeParmType 0x56331f2ce050 'String' sugar
|     |-TemplateTypeParmType 0x56331f1cf6f0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56331f1cf698 'T'
|     `-RecordType 0x56331f1febc0 'String'
|       `-CXXRecord 0x56331f1feb30 'String'
|-TypedefDecl 0x56331f47d158 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x56331f47d120 'const String *'
|   `-QualType 0x56331f2ce051 'const String' const
|     `-SubstTemplateTypeParmType 0x56331f2ce050 'String' sugar
|       |-TemplateTypeParmType 0x56331f1cf6f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56331f1cf698 'T'
|       `-RecordType 0x56331f1febc0 'String'
|         `-CXXRecord 0x56331f1feb30 'String'
|-TypedefDecl 0x56331f47ddb0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x56331f47dd60 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x56331f47dd40 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x56331f47dc78 'type'
|     `-LValueReferenceType 0x56331f47dc40 'const String &'
|       `-QualType 0x56331f47d9e1 'const String' const
|         `-SubstTemplateTypeParmType 0x56331f47d9e0 'String' sugar
|           |-TemplateTypeParmType 0x56331f1a20d0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x56331f1a2078 'T'
|           `-RecordType 0x56331f1febc0 'String'
|             `-CXXRecord 0x56331f1feb30 'String'
|-TypedefDecl 0x56331f47de18 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x56331f47d000 'const String &'
|   `-QualType 0x56331f2ce051 'const String' const
|     `-SubstTemplateTypeParmType 0x56331f2ce050 'String' sugar
|       |-TemplateTypeParmType 0x56331f1cf6f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56331f1cf698 'T'
|       `-RecordType 0x56331f1febc0 'String'
|         `-CXXRecord 0x56331f1feb30 'String'
|-TypedefDecl 0x56331f47de70 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56331eed13b0 'int'
|-TypedefDecl 0x56331f47ded8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x56331f47d090 'String *'
|   `-SubstTemplateTypeParmType 0x56331f2ce050 'String' sugar
|     |-TemplateTypeParmType 0x56331f1cf6f0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56331f1cf698 'T'
|     `-RecordType 0x56331f1febc0 'String'
|       `-CXXRecord 0x56331f1feb30 'String'
|-TypedefDecl 0x56331f47df40 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x56331f47d120 'const String *'
|   `-QualType 0x56331f2ce051 'const String' const
|     `-SubstTemplateTypeParmType 0x56331f2ce050 'String' sugar
|       |-TemplateTypeParmType 0x56331f1cf6f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56331f1cf698 'T'
|       `-RecordType 0x56331f1febc0 'String'
|         `-CXXRecord 0x56331f1feb30 'String'
|-EnumDecl 0x56331f47df98 <line:134:5> col:5
| `-EnumConstantDecl 0x56331f47e090 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56331f47e070 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56331f1d0d78 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56331f1d0d50 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56331f1d0d30 <col:40> 'int' 1
|-CXXConstructorDecl 0x56331f47e118 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x56331f47e3a8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56331f47e1d0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56331f47e270 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x56331f47e638 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x56331f47e520 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x56331f47e8f8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x56331f47e7e0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x56331f47ec10 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x56331f47eaf0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x56331f47ef20 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x56331f47ee00 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x56331f47f210 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56331f47f058 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56331f47f0d0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56331f47f338 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x56331f47f3e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56331f47f440 <col:30> Inherited
|-CXXMethodDecl 0x56331f47f488 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x56331f47f538 <col:20> Inherited
| `-OptimizeNoneAttr 0x56331f47f590 <col:30> Inherited
|-CXXMethodDecl 0x56331f47f658 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56331f47f708 <col:20> Inherited
| `-OptimizeNoneAttr 0x56331f47f760 <col:30> Inherited
|-CXXMethodDecl 0x56331f47f7a8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56331f47f858 <col:20> Inherited
| `-OptimizeNoneAttr 0x56331f47f8b0 <col:30> Inherited
|-CXXMethodDecl 0x56331f47f8f8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56331f47f9a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56331f47fa00 <col:30> Inherited
|-CXXMethodDecl 0x56331f47fa48 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56331f47faf8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56331f47fb50 <col:30> Inherited
|-CXXMethodDecl 0x56331f47fb78 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56331f47fc28 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56331f47fcd8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56331f47fe98 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56331f47fd88 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56331f47fe00 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56331f47ffe8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56331f47ff58 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56331f480198 <line:163:5, col:65> col:43 used operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x56331f4800a0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56331f480250 <col:20>
| `-OptimizeNoneAttr 0x56331f4802a8 <col:30>
|-CXXMethodDecl 0x56331f4803c8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x56331f4802d0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56331f480480 <col:20>
| `-OptimizeNoneAttr 0x56331f4804d8 <col:30>
|-CXXMethodDecl 0x56331f480590 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x56331f480500 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56331f4806d8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56331f480648 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56331f480808 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x56331f480908 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x56331f4809d8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x56331f480aa8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x56331f480be8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x56331f480b58 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56331f480d30 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56331f480ca0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56331f480e78 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x56331f480de8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56331f480f30 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56331f481030 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56331f480fa0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56331f4810e8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56331f4811a8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x56331f4812a8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x56331f481428 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x56331f481368 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x56331f481be8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56331f4814e0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x56331f481b48 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x56331f481a48 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x56331f481cc8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56331f481e18 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x56331f481d88 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56331f481ed0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56331f482118 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56331f481f90 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x56331f482008 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56331f4822a8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x56331f4821e8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x56331f4824b8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x56331f482370 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x56331f4823e8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x56331f482578 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x56331f4827d8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x56331f4826e0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x56331f4828a8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x56331f531c50 <col:29>

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56331f5345e8 prev 0x56331f51ce70 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56331f5346e0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x56331f534770 <col:22, col:28> col:22 public
|-EnumDecl 0x56331f534798 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x56331f5348b8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x56331f534898 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x56331f534880 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x56331f534860 <col:14> 'int' 999
| |-EnumConstantDecl 0x56331f534960 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x56331f534940 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x56331f534928 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x56331f534908 <col:14> 'int' 1
| |-EnumConstantDecl 0x56331f5349f0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x56331f5349d0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x56331f5349b0 <col:17> 'int' 0
| |-EnumConstantDecl 0x56331f534a80 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x56331f534a60 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x56331f534a40 <col:13> 'int' 1
| |-EnumConstantDecl 0x56331f534b10 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x56331f534af0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x56331f534ad0 <col:16> 'int' 2
| |-EnumConstantDecl 0x56331f534ba0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x56331f534b80 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x56331f534b60 <col:13> 'int' 3
| |-EnumConstantDecl 0x56331f534c30 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x56331f534c10 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x56331f534bf0 <col:15> 'int' 4
| |-EnumConstantDecl 0x56331f534cc0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x56331f534ca0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x56331f534c80 <col:14> 'int' 5
| |-EnumConstantDecl 0x56331f534d50 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x56331f534d30 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x56331f534d10 <col:12> 'int' 6
| `-EnumConstantDecl 0x56331f534de0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x56331f534dc0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x56331f534da0 <col:13> 'int' 7
|-VarDecl 0x56331f534e50 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x56331f534ed8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x56331f534f60 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x56331f534fe8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x56331f535070 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x56331f5350f8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x56331f535180 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x56331f535208 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x56331f535290 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x56331f535318 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x56331f5353a0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x56331f5354a0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x56331f53e288 '_nerrors' 'int'
| | `-IntegerLiteral 0x56331f53ea18 <line:128:13> 'int' 0
| `-CompoundStmt 0x56331f53ea88 <col:16, line:129:5>
|-CXXDestructorDecl 0x56331f535590 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x56331f53ea98 <col:29, line:132:5>
|-CXXMethodDecl 0x56331f535748 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x56331f535680 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56331f535810 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x56331f5358f8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x56331f53eaf0 <col:44, line:161:5>
|   `-ReturnStmt 0x56331f53eae0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x56331f53eac8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x56331f53eaa8 <col:9> 'ErrorHandler *' lvalue Var 0x56331f53e2e8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x56331f535a38 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x56331f5359a8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56331f535b00 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x56331f53eb50 <col:43, line:173:5>
|   `-ReturnStmt 0x56331f53eb40 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x56331f53eb28 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x56331f53eb08 <col:9> 'ErrorHandler *' lvalue Var 0x56331f53e360 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x56331f535bb8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x56331f535c38 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x56331f535d48 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x56331f535cb8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x56331f535e98 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x56331f535e08 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56331f535ff0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x56331f535f58 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x56331f536148 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x56331f5360b0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x56331f5362a0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x56331f536208 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x56331f5364b0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x56331f536358 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x56331f5363d8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x56331f536688 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x56331f536570 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x56331f5365f0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x56331f5368a8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56331f536748 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x56331f5367c8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x56331f536a88 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56331f536968 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x56331f5369e8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x56331f536c68 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56331f536b48 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x56331f536bc8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x56331f536df0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x56331f536d28 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x56331f536fc0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x56331f536ea8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x56331f536f20 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x56331f53eda8 <col:57, line:234:5>
|   `-ReturnStmt 0x56331f53ed98 <line:233:2, col:41>
|     `-ExprWithCleanups 0x56331f53ed80 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x56331f53ed28 <col:9, col:41> 'int'
|         |-MemberExpr 0x56331f53ecf8 <col:9> '<bound member function type>' ->xmessage 0x56331f536df0
|         | `-CXXThisExpr 0x56331f53ece8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x56331f53ed68 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x56331f53ed50 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56331f53ecc8 <col:18, col:40> 'String' (CXXTemporary 0x56331f53ecc8)
|               `-CallExpr 0x56331f53ec90 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x56331f53ec78 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x56331f53ebf0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x56331f538fb8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x56331f53ec10 <col:31> 'const String' lvalue ParmVar 0x56331f536f20 'str' 'const String &'
|                 `-DeclRefExpr 0x56331f53ec30 <col:36> 'const String' lvalue ParmVar 0x56331f536ea8 'anno' 'const String &'
|-CXXMethodDecl 0x56331f5372a0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x56331f537080 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x56331f537100 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x56331f537178 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56331f53f038 <col:68, line:243:5>
|   `-ReturnStmt 0x56331f53f028 <line:242:2, col:41>
|     `-ExprWithCleanups 0x56331f53f010 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x56331f53efb0 <col:9, col:41> 'int'
|         |-MemberExpr 0x56331f53ef80 <col:9> '<bound member function type>' ->xmessage 0x56331f536fc0
|         | `-CXXThisExpr 0x56331f53ef70 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x56331f53ee48 <col:18> 'const String' lvalue ParmVar 0x56331f537080 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x56331f53eff8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x56331f53efe0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56331f53ef50 <col:24, col:40> 'String' (CXXTemporary 0x56331f53ef50)
|               `-CXXMemberCallExpr 0x56331f53eee8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x56331f53ee78 <col:24> '<bound member function type>' ->vformat 0x56331f538480
|                 | `-CXXThisExpr 0x56331f53ee68 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x56331f53ef18 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x56331f53eea8 <col:32> 'const char *' lvalue ParmVar 0x56331f537100 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x56331f53ef30 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x56331f53eec8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56331f537178 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56331f537540 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x56331f537368 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x56331f5373e0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x56331f537458 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x56331f53f378 <col:23, line:254:5>
|   `-ReturnStmt 0x56331f53f368 <line:253:2, col:71>
|     `-ExprWithCleanups 0x56331f53f350 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x56331f53f2f0 <col:9, col:71> 'int'
|         |-MemberExpr 0x56331f53f2c0 <col:9> '<bound member function type>' ->xmessage 0x56331f536fc0
|         | `-CXXThisExpr 0x56331f53f2b0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x56331f53f338 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x56331f53f320 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x56331f53f270 <col:18, col:65> 'String' (CXXTemporary 0x56331f53f270)
|         |     `-CallExpr 0x56331f53f208 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x56331f53f1f0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x56331f53f0d8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x56331f538fb8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x56331f53f0f8 <col:31> 'const String' lvalue ParmVar 0x56331f5373e0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x56331f53f250 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x56331f53f238 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x56331f53f1d0 <col:37, col:64> 'String' (CXXTemporary 0x56331f53f1d0)
|         |             `-CallExpr 0x56331f53f1a0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x56331f53f188 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x56331f53f118 <col:37> 'String (const String &)' lvalue CXXMethod 0x56331f539608 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x56331f53f138 <col:56> 'const String' lvalue ParmVar 0x56331f537368 'landmark' 'const String &'
|         `-DeclRefExpr 0x56331f53f290 <col:68> 'const String' lvalue ParmVar 0x56331f537458 'str' 'const String &'
|-CXXMethodDecl 0x56331f5378c0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x56331f537608 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x56331f537680 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x56331f537700 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x56331f537778 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56331f53f630 <col:34, line:267:5>
|   `-ReturnStmt 0x56331f53f620 <line:266:2, col:51>
|     `-ExprWithCleanups 0x56331f53f608 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x56331f53f5a0 <col:9, col:51> 'int'
|         |-MemberExpr 0x56331f53f570 <col:9> '<bound member function type>' ->xmessage 0x56331f537540
|         | `-CXXThisExpr 0x56331f53f560 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x56331f53f418 <col:18> 'const String' lvalue ParmVar 0x56331f537608 'landmark' 'const String &'
|         |-DeclRefExpr 0x56331f53f438 <col:28> 'const String' lvalue ParmVar 0x56331f537680 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x56331f53f5f0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x56331f53f5d8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56331f53f540 <col:34, col:50> 'String' (CXXTemporary 0x56331f53f540)
|               `-CXXMemberCallExpr 0x56331f53f4d8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x56331f53f468 <col:34> '<bound member function type>' ->vformat 0x56331f538480
|                 | `-CXXThisExpr 0x56331f53f458 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x56331f53f508 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x56331f53f498 <col:42> 'const char *' lvalue ParmVar 0x56331f537700 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x56331f53f520 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x56331f53f4b8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56331f537778 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56331f5379d0 <line:286:5, line:288:5> line:286:9 used nerrors 'int () const'
| `-CompoundStmt 0x56331f53f6b0 <col:25, line:288:5>
|   `-ReturnStmt 0x56331f53f6a0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x56331f53f688 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x56331f53f658 <col:9> 'const int' lvalue ->_nerrors 0x56331f53e288
|         `-CXXThisExpr 0x56331f53f648 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x56331f537be0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x56331f537a88 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x56331f537b08 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x56331f537ec8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x56331f537ca8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x56331f537d28 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x56331f537da0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56331f538060 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x56331f537f98 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x56331f5382a8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x56331f538120 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x56331f538198 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56331f53f910 <col:58, line:357:5>
|   `-ReturnStmt 0x56331f53f900 <line:356:2, col:29>
|     `-ExprWithCleanups 0x56331f53f8e8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x56331f53f8b8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x56331f53f8a0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x56331f53f880 <col:9, col:29> 'String' (CXXTemporary 0x56331f53f880)
|             `-CallExpr 0x56331f53f810 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x56331f53f7f8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x56331f53f778 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x56331f537ec8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x56331f53f718 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x56331f53f848 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x56331f53f738 <col:21> 'const char *' lvalue ParmVar 0x56331f538120 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x56331f53f860 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x56331f53f758 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56331f538198 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56331f538480 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x56331f538370 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x56331f5383e8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56331f5385d8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x56331f538548 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x56331f538720 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x56331f538690 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x56331f5389c0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x56331f5387d8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x56331f538858 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x56331f5388d0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x56331f538b20 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x56331f538a90 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x56331f53fa28 <col:37, line:441:5>
|   `-IfStmt 0x56331f53fa10 <line:439:2, line:440:8>
|     |-BinaryOperator 0x56331f53f998 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x56331f53f968 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x56331f53f928 <col:6> 'int' lvalue ParmVar 0x56331f538a90 'level' 'int'
|     | `-ImplicitCastExpr 0x56331f53f980 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x56331f53f948 <col:15> 'ErrorHandler::Level' EnumConstant 0x56331f534ba0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x56331f53f9f8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x56331f53f9c8 <col:8> 'int' lvalue ->_nerrors 0x56331f53e288
|         `-CXXThisExpr 0x56331f53f9b8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x56331f538be8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x56331f53fac0 <col:26, line:448:5>
|   `-BinaryOperator 0x56331f53faa0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x56331f53fa50 <col:2> 'int' lvalue ->_nerrors 0x56331f53e288
|     | `-CXXThisExpr 0x56331f53fa40 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x56331f53fa80 <col:13> 'int' 0
|-CXXMethodDecl 0x56331f538db0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x56331f538ca0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x56331f538d18 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x56331f538fb8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x56331f538e70 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x56331f538ee8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x56331f539268 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x56331f539078 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x56331f5390f8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x56331f539178 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x56331f539320 <col:59> 0 0
|-CXXMethodDecl 0x56331f5394b8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x56331f539398 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x56331f539418 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x56331f540130 <col:70, line:534:5>
|   |-DeclStmt 0x56331f53fc30 <line:528:2, col:20>
|   | |-VarDecl 0x56331f53fae8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x56331f53fb50 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x56331f53fb88 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x56331f53fbf0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x56331f53fd00 <line:529:2, col:23>
|   | `-VarDecl 0x56331f53fc60 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x56331f53fce8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x56331f53fcc8 <col:18> 'const char *' lvalue ParmVar 0x56331f539398 'begin' 'const char *'
|   |-DoStmt 0x56331f5400c8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x56331f53fff8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x56331f53ffe0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x56331f53ffc0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x56331f53fd18 <col:6> 'const char *' lvalue Var 0x56331f53fc60 'x' 'const char *'
|   | |     `-CallExpr 0x56331f53ff10 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x56331f53fef8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x56331f53feb0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x56331f53e760 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x56331f53ff78 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x56331f53ff60 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x56331f53fdd0 <col:20, col:27> 'String' (CXXTemporary 0x56331f53fdd0)
|   | |       |     `-CXXTemporaryObjectExpr 0x56331f53fd98 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x56331f53ff90 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x56331f53fdf0 <col:30> 'const char *' lvalue Var 0x56331f53fc60 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x56331f53ffa8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x56331f53fe10 <col:33> 'const char *' lvalue ParmVar 0x56331f539418 'end' 'const char *'
|   | |       |-UnaryOperator 0x56331f53fe50 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x56331f53fe30 <col:39> 'String' lvalue Var 0x56331f53fae8 'name' 'String'
|   | |       |-UnaryOperator 0x56331f53fe88 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x56331f53fe68 <col:46> 'String' lvalue Var 0x56331f53fb88 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x56331f53fea0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x56331f5400b0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x56331f540098 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x56331f540078 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x56331f540048 <col:11> '<bound member function type>' .operator int (String::*)() const 0x56331f202328
|   |         `-ImplicitCastExpr 0x56331f540030 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x56331f540010 <col:11> 'String' lvalue Var 0x56331f53fae8 'name' 'String'
|   `-ReturnStmt 0x56331f540120 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x56331f540108 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x56331f5400e8 <col:9> 'const char *' lvalue Var 0x56331f53fc60 'x' 'const char *'
|-CXXMethodDecl 0x56331f539608 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x56331f539578 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x56331f540738 <col:55, line:550:5>
|   `-IfStmt 0x56331f540710 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x56331f540370 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x56331f540358 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56331f540340 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56331f540320 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56331f5402f0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x56331f202328
|     | |       `-DeclRefExpr 0x56331f540190 <col:6> 'const String' lvalue ParmVar 0x56331f539578 'x' 'const String &'
|     | `-BinaryOperator 0x56331f5402d0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x56331f5402a0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x56331f540250 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x56331f540238 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x56331f5401f0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x56331f21bb60 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x56331f5401b0 <col:11> 'const String' lvalue ParmVar 0x56331f539578 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x56331f5401d0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x56331f5402b8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x56331f540288 <col:19> 'char' 123
|     |-ReturnStmt 0x56331f5403e0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x56331f5403b0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x56331f540390 <col:13> 'const String' lvalue ParmVar 0x56331f539578 'x' 'const String &'
|     `-IfStmt 0x56331f5406e8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x56331f540478 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56331f540460 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56331f540440 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56331f540410 <col:11> '<bound member function type>' .operator int (String::*)() const 0x56331f202328
|       |       `-DeclRefExpr 0x56331f5403f0 <col:11> 'const String' lvalue ParmVar 0x56331f539578 'x' 'const String &'
|       |-ReturnStmt 0x56331f540600 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x56331f5405e8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x56331f5405b8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x56331f5405a0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x56331f540580 <col:13, col:29> 'String' (CXXTemporary 0x56331f540580)
|       |         `-CallExpr 0x56331f540530 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x56331f540518 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x56331f540490 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x56331f538db0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x56331f540560 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x56331f5404b0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x56331f5404d0 <col:28> 'const String' lvalue ParmVar 0x56331f539578 'x' 'const String &'
|       `-ReturnStmt 0x56331f5406d8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x56331f5406c0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x56331f540690 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x56331f540678 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x56331f540658 <col:13, col:20> 'String' (CXXTemporary 0x56331f540658)
|                 `-CXXTemporaryObjectExpr 0x56331f540620 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x56331f5397d0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x56331f5396c0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x56331f539738 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56331f53ea08 <col:71> 'bool' false
|-CXXRecordDecl 0x56331f539880 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x56331f53d678 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x56331f53d610 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x56331f53d5b0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x56331f53d570 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x56331f1febc0 'String'
|       | `-CXXRecord 0x56331f1feb30 'String'
|       |-BuiltinType 0x56331eed13b0 'int'
|       `-DecayedType 0x56331f3b4dd0 '__va_list_tag *' sugar
|         |-TypedefType 0x56331f3b4da0 'va_list' sugar
|         | |-Typedef 0x56331f0efc70 'va_list'
|         | `-TypedefType 0x56331f0efc20 '__gnuc_va_list' sugar
|         |   |-Typedef 0x56331f027848 '__gnuc_va_list'
|         |   `-TypedefType 0x56331f0277b0 '__builtin_va_list' sugar
|         |     |-Typedef 0x56331ef12c18 '__builtin_va_list'
|         |     `-ConstantArrayType 0x56331ef12bc0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x56331eed2100 '__va_list_tag'
|         |         `-CXXRecord 0x56331eed2068 '__va_list_tag'
|         `-PointerType 0x56331f0f5510 '__va_list_tag *'
|           `-RecordType 0x56331eed2100 '__va_list_tag'
|             `-CXXRecord 0x56331eed2068 '__va_list_tag'
|-EnumDecl 0x56331f53d6d0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x56331f53d7d0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56331f53dd30 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f53d7b0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x56331f53d790 <col:16> 'int' 1
| |-EnumConstantDecl 0x56331f53d860 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56331f53dd48 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f53d840 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x56331f53d820 <col:21> 'int' 2
| |-EnumConstantDecl 0x56331f53d8f0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56331f53dd60 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f53d8d0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x56331f53d8b0 <col:22> 'int' 4
| |-EnumConstantDecl 0x56331f53d980 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56331f53dd78 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f53d960 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x56331f53d940 <col:17> 'int' 8
| |-EnumConstantDecl 0x56331f53da10 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56331f53dd90 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f53d9f0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x56331f53d9d0 <col:22> 'int' 16
| |-EnumConstantDecl 0x56331f53daa0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56331f53dda8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f53da80 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x56331f53da60 <col:19> 'int' 32
| |-EnumConstantDecl 0x56331f53db30 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56331f53ddc0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f53db10 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x56331f53daf0 <col:17> 'int' 64
| |-EnumConstantDecl 0x56331f53dbc0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56331f53ddd8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f53dba0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x56331f53db80 <col:14> 'int' 128
| |-EnumConstantDecl 0x56331f53dc50 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56331f53ddf0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f53dc30 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x56331f53dc10 <col:16> 'int' 256
| `-EnumConstantDecl 0x56331f53dce0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x56331f53de08 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56331f53dcc0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x56331f53dca0 <col:12> 'int' 1024
|-CXXMethodDecl 0x56331f53e018 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x56331f53de30 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x56331f53ded0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x56331f53e1a0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x56331f53e0d8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x56331f53e248 <line:580:3, col:10> col:3 private
|-FieldDecl 0x56331f53e288 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x56331f53e2e8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x56331f53e360 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x56331f53e760 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x56331f53e3d8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x56331f53e458 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x56331f53e4d8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x56331f53e550 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x56331f53e5c8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x56331f53e640 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x56331f53e888 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x56331f53e888
| `-ParmVarDecl 0x56331f53e998 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x56331f540a98 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x56331f540a98
  `-ParmVarDecl 0x56331f540ba8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56331f4ee7e0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56331f4ee8f8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x56331f4ee988 <col:16, col:22> col:16 public
|-EnumDecl 0x56331f4ee9b0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x56331f4eeab0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56331f4eed00 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f4eea90 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56331f4eea70 <col:21> 'int' 0
| |-EnumConstantDecl 0x56331f4eeb40 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56331f4eed18 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f4eeb20 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x56331f4eeb00 <col:24> 'int' 22
| |-EnumConstantDecl 0x56331f4eebd0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56331f4eed30 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f4eebb0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x56331f4eeb90 <col:24> 'int' 34
| |-EnumConstantDecl 0x56331f4eec60 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56331f4eed48 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f4eec40 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x56331f4eec20 <col:25> 'int' 95
| `-EnumConstantDecl 0x56331f4eecb0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x56331f4f06c0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56331f4f0af8 <col:7>
|-CXXConstructorDecl 0x56331f4f07c8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x56331f4f07c8
| `-ParmVarDecl 0x56331f4f08d8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x56331f4f0978 <col:7> col:7 implicit constexpr NumArg 'void (NumArg &&)' inline default trivial noexcept-unevaluated 0x56331f4f0978
| `-ParmVarDecl 0x56331f4f0a88 <col:7> col:7 'NumArg &&'
`-CXXDestructorDecl 0x56331f4f2c08 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56331f4eed78 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x56331f4eeed8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x56331f4eef68 <col:32, col:38> col:32 public
|-TypedefDecl 0x56331f4eefa0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x56331f0272f0 'uint32_t' sugar
|   |-Typedef 0x56331ef3a3d8 'uint32_t'
|   `-TypedefType 0x56331ef13480 '__uint32_t' sugar
|     |-Typedef 0x56331ef13078 '__uint32_t'
|     `-BuiltinType 0x56331eed1450 'unsigned int'
|-CXXConstructorDecl 0x56331f4ef0e8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x56331f4ef010 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x56331f4f05c8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x56331f4f0b08 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x56331f4efe80 'base' 'int'
| | `-ImplicitCastExpr 0x56331f4f0668 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x56331f4f0628 <col:16> 'int' lvalue ParmVar 0x56331f4ef010 'b' 'int'
| `-CompoundStmt 0x56331f4f0b78 <col:19, line:1046:5>
|-CXXMethodDecl 0x56331f4ef5e0 <line:1048:5, line:1050:50> line:1048:17 parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x56331f4ef1b0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x56331f4ef230 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x56331f4ef2a8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x56331f4ef328 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x56331f4ef3e8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x56331f4ef468 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x56331f4efa38 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x56331f4ef6b0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x56331f4ef998 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x56331f4ef758 <col:27, col:41> col:41 referenced str 'const String &'
|   |-ParmVarDecl 0x56331f4ef7f8 <col:46, col:49> col:49 referenced result 'V &'
|   |-ParmVarDecl 0x56331f4ef870 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x56331f4f05e8 <col:82> 'const ArgContext' lvalue Var 0x56331f4e3688 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x56331f4f1ab8 <col:94, line:1067:5>
|     |-DeclStmt 0x56331f4f0d08 <line:1054:9, col:64>
|     | `-VarDecl 0x56331f4f0b98 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-CXXDependentScopeMemberExpr 0x56331f4f0cc0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
|     |-DeclStmt 0x56331f4f0f28 <line:1055:9, col:91>
|     | `-VarDecl 0x56331f4f0d38 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x56331f4f0f00 <col:31, col:90> 'int' functional cast to int <Dependent>
|     |     `-BinaryOperator 0x56331f4f0ee0 <col:35, col:89> 'unsigned long' '/'
|     |       |-ParenExpr 0x56331f4f0e90 <col:35, col:69> 'unsigned long'
|     |       | `-BinaryOperator 0x56331f4f0e70 <col:36, col:68> 'unsigned long' '-'
|     |       |   |-BinaryOperator 0x56331f4f0e18 <col:36, col:64> 'unsigned long' '+'
|     |       |   | |-UnaryExprOrTypeTraitExpr 0x56331f4f0dc8 <col:36, col:44> 'unsigned long' sizeof 'V'
|     |       |   | `-UnaryExprOrTypeTraitExpr 0x56331f4f0df8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |       |   `-ImplicitCastExpr 0x56331f4f0e58 <col:68> 'unsigned long' <IntegralCast>
|     |       |     `-IntegerLiteral 0x56331f4f0e38 <col:68> 'int' 1
|     |       `-UnaryExprOrTypeTraitExpr 0x56331f4f0ec0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x56331f4f1088 <line:1056:9, col:27>
|     | `-VarDecl 0x56331f4f1020 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
|     |-IfStmt 0x56331f4f14d0 <line:1057:9, line:1059:22>
|     | |-CXXOperatorCallExpr 0x56331f4f1400 <line:1057:13, line:1058:24> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x56331f4f1380 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x56331f3f12d8 0x56331f23a8b8 0x56331f23a590 0x56331f22bd70 0x56331f22ba20 0x56331f22b310 0x56331f1fdc80 0x56331f18a140
|     | | |-CallExpr 0x56331f4f12c0 <line:1057:13, col:78> '<dependent type>'
|     | | | |-UnresolvedMemberExpr 0x56331f4f10b0 <col:13> '<bound member function type>' lvalue
|     | | | |-CXXMemberCallExpr 0x56331f4f1160 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x56331f4f1130 <col:19, col:23> '<bound member function type>' .begin 0x56331f21af78
|     | | | |   `-DeclRefExpr 0x56331f4f1110 <col:19> 'const String' lvalue ParmVar 0x56331f4ef758 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x56331f4f11d0 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x56331f4f11a0 <col:32, col:36> '<bound member function type>' .end 0x56331f21b190
|     | | | |   `-DeclRefExpr 0x56331f4f1180 <col:32> 'const String' lvalue ParmVar 0x56331f4ef758 'str' 'const String &'
|     | | | |-DeclRefExpr 0x56331f4f11f0 <col:43> 'const bool' lvalue Var 0x56331f4f0b98 'is_signed' 'const bool'
|     | | | |-CXXFunctionalCastExpr 0x56331f4f1258 <col:54, col:67> 'int' functional cast to int <Dependent>
|     | | | | `-UnaryExprOrTypeTraitExpr 0x56331f4f1238 <col:58, col:66> 'unsigned long' sizeof 'V'
|     | | | |-DeclRefExpr 0x56331f4f1280 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x56331f4f1020 'x' 'IntArg::limb_type [nlimb]'
|     | | | `-DeclRefExpr 0x56331f4f12a0 <col:73> 'const int' lvalue Var 0x56331f4f0d38 'nlimb' 'const int'
|     | | `-CXXMemberCallExpr 0x56331f4f1360 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x56331f4f1330 <col:16, col:20> '<bound member function type>' .end 0x56331f21b190
|     | |     `-DeclRefExpr 0x56331f4f1310 <col:16> 'const String' lvalue ParmVar 0x56331f4ef758 'str' 'const String &'
|     | `-BinaryOperator 0x56331f4f14b0 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x56331f4f1448 <col:13> 'int' lvalue ->status 0x56331f4efee8
|     |   | `-CXXThisExpr 0x56331f4f1438 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x56331f4f1498 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x56331f4f1478 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56331f4eeb40 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x56331f4f1720 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x56331f4f1608 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x56331f4f15f0 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x56331f4f15d8 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x56331f4f14f8 <col:13> 'int' lvalue ->status 0x56331f4efee8
|     | | |     `-CXXThisExpr 0x56331f4f14e8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x56331f4f15b8 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x56331f4f1588 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x56331f4f1538 <col:23> 'int' lvalue ->status 0x56331f4efee8
|     | |   |   `-CXXThisExpr 0x56331f4f1528 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x56331f4f15a0 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x56331f4f1568 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56331f4eebd0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x56331f4f1700 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x56331f4f16a0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x56331f4f1648 <col:13, col:18> '<bound member function type>' .error 0x56331f3b4750
|     |   | | `-DeclRefExpr 0x56331f4f1628 <col:13> 'const ArgContext' lvalue ParmVar 0x56331f4ef870 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x56331f4f16c8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x56331f4f1678 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x56331f4f16f0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x56331f4f16e0 <col:20> 'bool' false
|     |-DeclStmt 0x56331f4f18f8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x56331f4f18a0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
|     |   `-DependentNameType 0x56331f4f1830 'typename make_unsigned<V>::type' dependent
|     |-CallExpr 0x56331f4f1a68 <line:1065:9, col:71> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56331f4f1910 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x56331f1be108
|     | |-DeclRefExpr 0x56331f4f1958 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x56331f4f1020 'x' 'IntArg::limb_type [nlimb]'
|     | `-CXXReinterpretCastExpr 0x56331f4f1a38 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
|     |   `-DeclRefExpr 0x56331f4f19b0 <col:64> 'V' lvalue ParmVar 0x56331f4ef7f8 'result' 'V &'
|     `-ReturnStmt 0x56331f4f1aa8 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x56331f4f1a98 <col:16> 'bool' true
|-FunctionTemplateDecl 0x56331f4efdf8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x56331f4efaa8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x56331f4efd58 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x56331f4efb58 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x56331f4efbf8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x56331f4efc70 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x56331f4f0608 <col:71> 'const ArgContext' lvalue Var 0x56331f4e3688 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x56331f4f2228 <col:83, line:1083:5>
| |   |-DeclStmt 0x56331f4f1b80 <line:1071:9, col:12>
| |   | `-VarDecl 0x56331f4f1b18 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x56331f4f2200 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x56331f4f1e10 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x56331f4f1c98 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x56331f4f1c60 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x56331f4f1ba8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x56331f4f1c00 <col:31> 'const String' lvalue ParmVar 0x56331f4efb58 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x56331f4f1c20 <col:36> 'V' lvalue Var 0x56331f4f1b18 'x' 'V'
| |     | |   `-DeclRefExpr 0x56331f4f1c40 <col:39> 'const ArgContext' lvalue ParmVar 0x56331f4efc70 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x56331f4f1df0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x56331f4f1dd0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x56331f4f1db8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x56331f4f1da0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x56331f4f1cc0 <col:17> 'int' lvalue ->status 0x56331f4efee8
| |     |     |     `-CXXThisExpr 0x56331f4f1cb0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x56331f4f1d80 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x56331f4f1d50 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x56331f4f1d00 <col:27> 'int' lvalue ->status 0x56331f4efee8
| |     |       |   `-CXXThisExpr 0x56331f4f1cf0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x56331f4f1d68 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x56331f4f1d30 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56331f4eebd0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x56331f4f1e40 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x56331f4f1e30 <col:20> 'bool' false
| |     `-IfStmt 0x56331f4f21d8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x56331f4f1ee0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x56331f4f1eb0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x56331f4f1e60 <col:18> 'int' lvalue ->status 0x56331f4efee8
| |       | |   `-CXXThisExpr 0x56331f4f1e50 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x56331f4f1ec8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x56331f4f1e90 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56331f4eebd0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x56331f4f2118 <col:42, line:1079:9>
| |       | |-CallExpr 0x56331f4f20c0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x56331f4f1f10 <line:1076:13> '<bound member function type>' ->range_error 0x56331f4f04f8
| |       | | | `-CXXThisExpr 0x56331f4f1f00 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x56331f4f1f40 <col:25> 'const ArgContext' lvalue ParmVar 0x56331f4efc70 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x56331f4f2020 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x56331f4f2098 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x56331f4f2078 <col:43> 'V' lvalue Var 0x56331f4f1b18 'x' 'V'
| |       | `-ReturnStmt 0x56331f4f2108 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x56331f4f20f8 <col:20> 'bool' false
| |       `-CompoundStmt 0x56331f4f21b8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x56331f4f2178 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x56331f4f2138 <col:13> 'V' lvalue ParmVar 0x56331f4efbf8 'result' 'V &'
| |         | `-DeclRefExpr 0x56331f4f2158 <col:22> 'V' lvalue Var 0x56331f4f1b18 'x' 'V'
| |         `-ReturnStmt 0x56331f4f21a8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x56331f4f2198 <col:20> 'bool' true
| `-CXXMethodDecl 0x56331f5343f8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x56331f5341d8 <col:16, col:30> col:30 str 'const String &'
|   |-ParmVarDecl 0x56331f5342a8 <col:35, col:38> col:38 result 'int &'
|   `-ParmVarDecl 0x56331f534310 <col:46, col:71> col:64 args 'const ArgContext &' cinit
|     `-DeclRefExpr 0x56331f4f0608 <col:71> 'const ArgContext' lvalue Var 0x56331f4e3688 'blank_args' 'const ArgContext'
|-FieldDecl 0x56331f4efe80 <line:1085:5, col:9> col:9 base 'int'
|-FieldDecl 0x56331f4efee8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x56331f4eff38 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x56331f4f01f0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x56331f4eff78 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x56331f4efff8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x56331f4f0070 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x56331f4f00f0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x56331f4f04f8 <line:1092:5, line:1093:45> line:1092:10 referenced range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x56331f4f02c0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x56331f4f0338 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x56331f4f03d0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x56331f4f2a88 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x56331f4f2a88
| `-ParmVarDecl 0x56331f4f2b98 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x56331f4f2d18 <col:7> col:7 implicit constexpr IntArg 'void (IntArg &&)' inline default trivial noexcept-unevaluated 0x56331f4f2d18
| `-ParmVarDecl 0x56331f4f2e28 <col:7> col:7 'IntArg &&'
`-CXXDestructorDecl 0x56331f533f58 <col:7> col:7 implicit referenced ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56331f3b3e18 prev 0x56331f3f8e08 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x56331f3b3f10 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x56331f3b3fa0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x56331f3b40d8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x56331f3b3fd8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x56331f3b5500 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x56331f3b54e0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x56331f3b5078 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x56331f3b5590 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x56331f3b5550 <col:17> 'ErrorHandler *' lvalue ParmVar 0x56331f3b3fd8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x56331f3b50e0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x56331f3b5610 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x56331f3b55d0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x56331f3b5140 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x56331f3b5650 <col:54> 'bool' false
| `-CompoundStmt 0x56331f3b5758 <col:61, line:38:5>
|   `-BinaryOperator 0x56331f3b5738 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x56331f3b56d0 <col:9> 'const Element *' lvalue ->_context 0x56331f3b5018
|     | `-CXXThisExpr 0x56331f3b56c0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x56331f3b5720 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x56331f3b5700 <col:20> 'int' 0
|-CXXConstructorDecl 0x56331f3b42e8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56331f3b4198 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x56331f3b4210 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x56331f3b5538 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x56331f3b5518 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x56331f3b5018 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x56331f3b57b0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x56331f3b5770 <col:20> 'const Element *' lvalue ParmVar 0x56331f3b4198 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x56331f3b5078 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x56331f3b5830 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x56331f3b57f0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x56331f3b4210 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x56331f3b50e0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x56331f3b58b0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x56331f3b5870 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x56331f3b5140 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x56331f3b58f0 <col:73> 'bool' false
| `-CompoundStmt 0x56331f3b5968 <col:80, line:46:5>
|-CXXMethodDecl 0x56331f3b4418 <line:49:5, line:51:5> line:49:20 used context 'const Element *() const'
| `-CompoundStmt 0x56331f3b59e0 <col:36, line:51:5>
|   `-ReturnStmt 0x56331f3b59d0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x56331f3b59b8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x56331f3b5988 <col:16> 'const Element *const' lvalue ->_context 0x56331f3b5018
|         `-CXXThisExpr 0x56331f3b5978 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56331f3b4508 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x56331f3b5a60 <col:32, line:57:5>
|   `-ReturnStmt 0x56331f3b5a50 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x56331f3b5a38 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x56331f3b5a08 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x56331f3b5078
|         `-CXXThisExpr 0x56331f3b59f8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56331f3b45c8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x56331f3b4750 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x56331f3b4680 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x56331f3b48a0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x56331f3b4810 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56331f3b49f0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x56331f3b4960 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56331f3b4bf8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x56331f3b4aa8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x56331f3b4b20 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x56331f3b4f28 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x56331f3b4cb8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x56331f3b4d38 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x56331f3b4e00 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x56331f3b4fe0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x56331f3b5018 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x56331f3b5078 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x56331f3b50e0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x56331f3b5140 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x56331f3b5190 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x56331f3b5190
| `-ParmVarDecl 0x56331f3b52a8 <col:7> col:7 'const ArgContext &'
`-CXXMethodDecl 0x56331f3b5348 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x56331f3b5348
  `-ParmVarDecl 0x56331f3b5458 <col:7> col:7 'const ArgContext &'

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56331f4c0760 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x56331f4c0938 prev 0x56331f4c0760 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56331f4c09c8 <col:46, col:52> col:46 public
|-TypedefDecl 0x56331f4c09f0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56331eed13b0 'int'
|-TypedefDecl 0x56331f4c25c0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x56331f4c2570 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x56331f4c0ea0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x56331f4c0da0 'type'
|     `-TemplateSpecializationType 0x56331f4c0d30 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x56331f4c0c10 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x56331f4c0bf0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x56331f4c0bd0 <col:24> 'unsigned long' 4
|       `-RecordType 0x56331f4c0d10 'char_array<4>'
|         `-ClassTemplateSpecialization 0x56331f4c0c30 'char_array'
|-TypedefDecl 0x56331f4c2678 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x56331f4c2640 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x56331f4c2620 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x56331f4c25c0 'type'
|     `-ElaboratedType 0x56331f4c2570 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x56331f4c0ea0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x56331f4c0da0 'type'
|         `-TemplateSpecializationType 0x56331f4c0d30 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x56331f4c0c10 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x56331f4c0bf0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x56331f4c0bd0 <col:24> 'unsigned long' 4
|           `-RecordType 0x56331f4c0d10 'char_array<4>'
|             `-ClassTemplateSpecialization 0x56331f4c0c30 'char_array'
|-CXXMethodDecl 0x56331f4c27f8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x56331f4c2708 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x56331f4c28e8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56331f4c29c8 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x56331f4c2c98 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56331f4c2ba0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x56331f4c2ed8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56331f4c2d50 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56331f4c2dc8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56331f4c30a8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56331f4c2f98 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56331f4c3010 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56331f4c3208 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x56331f4c32d8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x56331f4c3528 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56331f4c3398 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x56331f4c3410 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56331f4c3788 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x56331f4c35f8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x56331f4c3670 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56331f4c3948 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x56331f4c3858 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56331f4c3b08 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x56331f4c3a10 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56331f4c3bc0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56331f4c3c70 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56331f4c3ea8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56331f4c3d20 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56331f4c3d98 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56331f4cb4a8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56331f4cb3b0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x56331f4cb570 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x56331f4cb5c0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56331f4cb610 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56331f4bf168 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x56331f4bf378 prev 0x56331f4bf168 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56331f4c06d0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x56331f4c0680 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x56331f4c0660 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x56331f4c0510 'type'
|     `-SubstTemplateTypeParmType 0x56331f4c0330 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x56331f197a00 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56331f1979a8 'T'
|       `-RecordType 0x56331f4bfe80 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x56331f4bfd98 'sized_array_memory'
|-FieldDecl 0x56331f4cb660 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x56331f4cb6b0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56331f4cb6e8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x56331f4bf410 'int' sugar
|   |-TemplateTypeParmType 0x56331f1cf6f0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56331f1cf698 'T'
|   `-BuiltinType 0x56331eed13b0 'int'
|-TypedefDecl 0x56331f4cb778 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x56331f4cb740 'int &'
|   `-SubstTemplateTypeParmType 0x56331f4bf410 'int' sugar
|     |-TemplateTypeParmType 0x56331f1cf6f0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56331f1cf698 'T'
|     `-BuiltinType 0x56331eed13b0 'int'
|-TypedefDecl 0x56331f4cb838 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x56331f4cb800 'const int &'
|   `-QualType 0x56331f4bf411 'const int' const
|     `-SubstTemplateTypeParmType 0x56331f4bf410 'int' sugar
|       |-TemplateTypeParmType 0x56331f1cf6f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56331f1cf698 'T'
|       `-BuiltinType 0x56331eed13b0 'int'
|-TypedefDecl 0x56331f4cb8c8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x56331f4cb890 'int *'
|   `-SubstTemplateTypeParmType 0x56331f4bf410 'int' sugar
|     |-TemplateTypeParmType 0x56331f1cf6f0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56331f1cf698 'T'
|     `-BuiltinType 0x56331eed13b0 'int'
|-TypedefDecl 0x56331f4cb958 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x56331f4cb920 'const int *'
|   `-QualType 0x56331f4bf411 'const int' const
|     `-SubstTemplateTypeParmType 0x56331f4bf410 'int' sugar
|       |-TemplateTypeParmType 0x56331f1cf6f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56331f1cf698 'T'
|       `-BuiltinType 0x56331eed13b0 'int'
|-TypedefDecl 0x56331f4cc540 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x56331f4cc4f0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x56331f4cc4d0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x56331f4cc460 'type'
|     `-SubstTemplateTypeParmType 0x56331f4cc220 'int' sugar
|       |-TemplateTypeParmType 0x56331f1a2800 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56331f1a27b0 'T'
|       `-BuiltinType 0x56331eed13b0 'int'
|-TypedefDecl 0x56331f4cc5a8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x56331f4cb800 'const int &'
|   `-QualType 0x56331f4bf411 'const int' const
|     `-SubstTemplateTypeParmType 0x56331f4bf410 'int' sugar
|       |-TemplateTypeParmType 0x56331f1cf6f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56331f1cf698 'T'
|       `-BuiltinType 0x56331eed13b0 'int'
|-TypedefDecl 0x56331f4cc600 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56331eed13b0 'int'
|-TypedefDecl 0x56331f4cc668 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x56331f4cb890 'int *'
|   `-SubstTemplateTypeParmType 0x56331f4bf410 'int' sugar
|     |-TemplateTypeParmType 0x56331f1cf6f0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56331f1cf698 'T'
|     `-BuiltinType 0x56331eed13b0 'int'
|-TypedefDecl 0x56331f4cc6d0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x56331f4cb920 'const int *'
|   `-QualType 0x56331f4bf411 'const int' const
|     `-SubstTemplateTypeParmType 0x56331f4bf410 'int' sugar
|       |-TemplateTypeParmType 0x56331f1cf6f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56331f1cf698 'T'
|       `-BuiltinType 0x56331eed13b0 'int'
|-EnumDecl 0x56331f4cc728 <line:134:5> col:5
| `-EnumConstantDecl 0x56331f4cc820 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56331f4cc800 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56331f1d0d78 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56331f1d0d50 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56331f1d0d30 <col:40> 'int' 1
|-CXXConstructorDecl 0x56331f4cc8a8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56331f4ccaf8 <line:138:5, col:62> col:21 used Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56331f4cc960 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56331f4cca00 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x56331f4ccdb8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x56331f4ccca0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x56331f4cd078 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x56331f4ccf60 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x56331f4cd3c0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x56331f4cd2a0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x56331f4cd6d0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x56331f4cd5b0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x56331f4cd9c0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56331f4cd808 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56331f4cd880 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56331f4cdae8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x56331f4cdbc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56331f4cdc20 <col:30> Inherited
|-CXXMethodDecl 0x56331f4cdc68 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x56331f4cdd18 <col:20> Inherited
| `-OptimizeNoneAttr 0x56331f4cdd70 <col:30> Inherited
|-CXXMethodDecl 0x56331f4cde38 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56331f4cdee8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56331f4cdf40 <col:30> Inherited
|-CXXMethodDecl 0x56331f4cdf88 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56331f4ce038 <col:20> Inherited
| `-OptimizeNoneAttr 0x56331f4ce090 <col:30> Inherited
|-CXXMethodDecl 0x56331f4ce0d8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56331f4ce188 <col:20> Inherited
| `-OptimizeNoneAttr 0x56331f4ce1e0 <col:30> Inherited
|-CXXMethodDecl 0x56331f4ce228 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56331f4ce2d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56331f4ce330 <col:30> Inherited
|-CXXMethodDecl 0x56331f4ce358 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56331f4ce408 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56331f4ce4b8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56331f4ce678 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56331f4ce568 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56331f4ce5e0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56331f4ce7c8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56331f4ce738 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56331f4ce978 <line:163:5, col:65> col:43 used operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x56331f4ce880 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56331f4cea30 <col:20>
| `-OptimizeNoneAttr 0x56331f4cea88 <col:30>
|-CXXMethodDecl 0x56331f4ceba8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x56331f4ceab0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56331f4cec60 <col:20>
| `-OptimizeNoneAttr 0x56331f4cecb8 <col:30>
|-CXXMethodDecl 0x56331f4ced70 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x56331f4cece0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56331f4ceeb8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56331f4cee28 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56331f4cefe8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x56331f4cf118 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x56331f4cf1e8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x56331f4cf2b8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x56331f4cf3f8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x56331f4cf368 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56331f4cf540 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56331f4cf4b0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56331f4cf688 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x56331f4cf5f8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56331f4cf740 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56331f4cf840 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56331f4cf7b0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56331f4cf8f8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56331f4cf9b8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x56331f4cfab8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x56331f4cfc38 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x56331f4cfb78 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x56331f4d03f8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56331f4cfcf0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x56331f4d0358 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x56331f4d0258 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x56331f4d04d8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56331f4d0628 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x56331f4d0598 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56331f4d06e0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56331f4d0928 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56331f4d07a0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x56331f4d0818 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56331f4d0ae8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x56331f4d09f8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x56331f4d0d38 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x56331f4d0bb0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x56331f4d0c28 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x56331f4d0df8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x56331f4d1058 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x56331f4d0f60 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x56331f4d1128 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x56331f550828 <col:29>

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56331f1f21d0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56331f1f22e8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x56331f1f2378 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x56331f1f2448 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x56331f1f2530 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x56331f1f2748 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56331f1f25f0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56331f1f28f8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x56331f1f2800 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x56331f1f2a40 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x56331f1f29b0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x56331f1f2b88 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56331f1f2af8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56331f1f2cd0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56331f1f2c40 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56331f1f2d98 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x56331f1f2ee0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x56331f1f2e50 <col:28> col:31 'int'
|-CXXMethodDecl 0x56331f1f2fa8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x56331f1f30f0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x56331f1f3060 <col:28> col:31 'int'
|-CXXMethodDecl 0x56331f1f3268 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x56331f1f31a8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56331f1f33b0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x56331f1f3320 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56331f1f3478 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x56331f1f3638 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56331f1f3528 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56331f1f35a0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56331f1f3888 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56331f1f36f8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56331f1f3770 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56331f1f3938 <col:86> "" ""
|-CXXMethodDecl 0x56331f1f3ba8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x56331f1f3a18 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x56331f1f3a90 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56331f1f3d58 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x56331f1f3c68 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x56331f1f3f08 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x56331f1f3e10 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x56331f1f41d8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x56331f1f3fc0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x56331f1f4038 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56331f1f40b0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56331f1f44b8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x56331f1f42a0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x56331f1f4318 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56331f1f4390 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56331f1f4570 <col:115> "" ""
|-AccessSpecDecl 0x56331f1f45e0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x56331f1f4618 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56331f1f5b30 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x56331f1f5b30
| `-ParmVarDecl 0x56331f1f5c38 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x56331f1f5cd8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x56331f1f5cd8
| `-ParmVarDecl 0x56331f1f5de8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x56331f22b418 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56331f41d210 <col:7>
|-CXXConstructorDecl 0x56331f22b4f0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x56331f22b4f0
| `-ParmVarDecl 0x56331f22b608 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x56331f22b678 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x56331f22b678
| `-ParmVarDecl 0x56331f22b788 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x56331f41fc10 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56331f40bdb8 prev 0x56331f400fc0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56331f40beb0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x56331f40bfa0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x56331f40c0c8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x56331f40c248 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x56331f40c3c8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x56331f40c548 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x56331f41d378 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56331f41dbe8 <col:11>
|-CXXDestructorDecl 0x56331f41d450 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56331f41d588 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x56331f41d588
| `-ParmVarDecl 0x56331f41d698 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x56331f41d738 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56331f41d738
| `-ParmVarDecl 0x56331f41d848 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x56331f420608 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x56331f420718 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x56331f420998 <col:11>
|   `-ReturnStmt 0x56331f420988 <col:11>
|     `-UnaryOperator 0x56331f420970 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56331f420960 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x56331f420788 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56331f420788
  `-ParmVarDecl 0x56331f420898 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56331f40c5b0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56331f40c6c8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x56331f40c768 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x56331f40c7d0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x56331f40c838 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x56331f40c8a0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x56331f40c900 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x56331f40c9c0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x56331f40ca20 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x56331f40ca80 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x56331f41d288 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x56331f40c768 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x56331f41dbf8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x56331f41dc50 <col:12>
|-CXXConstructorDecl 0x56331f41d8b8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x56331f41d8b8
| `-ParmVarDecl 0x56331f41d9c8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x56331f41da68 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x56331f41da68
| `-ParmVarDecl 0x56331f41db78 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x56331f41fcf0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56331f3fa6d0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56331f3fa7e8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x56331f3fa878 <col:16, col:22> col:16 public
|-EnumDecl 0x56331f3fa8a0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x56331f3fa9a0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x56331f3faa80 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f3fa980 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x56331f3fa960 <col:21> 'int' 28
| `-EnumConstantDecl 0x56331f3faa30 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x56331f3faa98 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56331f3faa10 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x56331f3fa9f0 <col:22> 'int' 64
|-CXXMethodDecl 0x56331f3fadd8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x56331f3faac0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56331f3fab40 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x56331f3fabb8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56331f3fac30 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56331f3fae98 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x56331f3fb098 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x56331f3faf10 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x56331f3faf88 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56331f3fb148 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x56331f3fb2a8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x56331f3fb1b8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56331f3fb350 <col:72> warn_unused_result ""
|-TypedefDecl 0x56331f3fb6b0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x56331f3fb640 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x56331f3fb5e0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x56331f3fb5a0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x56331eed1310 'void'
|       |-PointerType 0x56331f17aa70 'unsigned char *'
|       | `-BuiltinType 0x56331eed1410 'unsigned char'
|       |-TypedefType 0x56331ef77040 'size_t' sugar
|       | |-Typedef 0x56331ef41af0 'size_t'
|       | `-BuiltinType 0x56331eed1470 'unsigned long'
|       `-PointerType 0x56331eed1b10 'void *'
|         `-BuiltinType 0x56331eed1310 'void'
|-CXXMethodDecl 0x56331f3fbb28 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x56331f3fb720 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x56331f3fb798 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56331f3fb830 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x56331f3fb8b0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x56331f416220 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x56331f416208 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x56331f4161d0 <col:58> 'int' 0
| |-ParmVarDecl 0x56331f3fb930 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x56331f416248 <col:76> 'int' 0
| |-ParmVarDecl 0x56331f3fb9b0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x56331f416268 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x56331f3fbbf8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x56331f3fbc78 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x56331f3fbd38 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x56331f3fbdd8 <col:20>
| `-OptimizeNoneAttr 0x56331f3fbe30 <col:30>
|-CXXMethodDecl 0x56331f3fbea8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x56331f3fbf48 <col:20>
| `-OptimizeNoneAttr 0x56331f3fbfa0 <col:30>
|-CXXMethodDecl 0x56331f3fc018 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x56331f3fc0b8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x56331f3fc168 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x56331f3fc208 <col:20>
| |-OptimizeNoneAttr 0x56331f3fc260 <col:30>
| `-WarnUnusedResultAttr 0x56331f3fc288 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x56331f3fc2e0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x56331f3fc380 <col:20>
| `-OptimizeNoneAttr 0x56331f3fc3d8 <col:30>
|-CXXMethodDecl 0x56331f3fc428 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x56331f3fc4c8 <col:20>
| `-OptimizeNoneAttr 0x56331f3fc520 <col:30>
|-CXXMethodDecl 0x56331f3fc568 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x56331f3fc608 <col:20>
| `-OptimizeNoneAttr 0x56331f3fc660 <col:30>
|-CXXMethodDecl 0x56331f3fc6a8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x56331f3fc768 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x56331f3fc830 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56331f3fc8f8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56331f3fc9b8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56331f3fcad8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x56331f416330 <col:54, line:99:5>
|   `-ReturnStmt 0x56331f416320 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x56331f416308 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x56331f4162d8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56331f40cdb8
|         `-CXXThisExpr 0x56331f4162c8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x56331f3fcc78 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x56331f3fcb88 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x56331f4163e0 <col:67, line:103:5>
|   `-BinaryOperator 0x56331f4163c0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x56331f416358 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56331f40cdb8
|     | `-CXXThisExpr 0x56331f416348 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x56331f4163a8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x56331f416388 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x56331f3fcb88 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x56331f3fcd70 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x56331f416460 <col:33, line:107:5>
|   `-ReturnStmt 0x56331f416450 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x56331f416438 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x56331f416408 <col:16> 'void *' lvalue ->_destructor_argument 0x56331f40ce20
|         `-CXXThisExpr 0x56331f4163f8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x56331f3fce30 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x56331f416a90 <col:25, line:113:5>
|   |-ParenExpr 0x56331f4167d8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x56331f4167a8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x56331f416518 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x56331f4164f0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x56331f4164b8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x56331f416488 <col:24> '<bound member function type>' ->shared 0x56331f3fbea8
|   |   |       `-ImplicitCastExpr 0x56331f4164d8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x56331f416478 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x56331f416578 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56331f416558 <col:42> 'int' 0
|   |   `-CallExpr 0x56331f416708 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x56331f4166f0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56331f4166d0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56331ef6de00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56331f416748 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f4165e8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x56331f416760 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f416610 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56331f416778 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56331f416648 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x56331f416790 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56331f4166b8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56331f4166a0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56331f416668 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x56331f4169d8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x56331f416808 <col:2> 'unsigned char *' lvalue ->_head 0x56331f40cbc0
|   | | `-CXXThisExpr 0x56331f4167f8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x56331f4169c0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x56331f4169a0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x56331f416848 <col:10> 'unsigned char *' lvalue ->_data 0x56331f40cc28
|   |     | `-CXXThisExpr 0x56331f416838 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x56331f416988 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x56331f416968 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x56331f416888 <col:18> 'unsigned char *' lvalue ->_tail 0x56331f40cc90
|   |         | `-CXXThisExpr 0x56331f416878 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x56331f416950 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x56331f416930 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x56331f4168c8 <col:26> 'unsigned char *' lvalue ->_end 0x56331f40ccf8
|   |             | `-CXXThisExpr 0x56331f4168b8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x56331f416918 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x56331f4168f8 <col:33> 'int' 0
|   `-BinaryOperator 0x56331f416a70 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x56331f416a08 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56331f40cdb8
|     | `-CXXThisExpr 0x56331f4169f8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x56331f416a58 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x56331f416a38 <col:16> 'int' 0
|-CXXMethodDecl 0x56331f3fcf70 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56331f3fcee0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56331f3fd018 <col:20>
| |-OptimizeNoneAttr 0x56331f3fd070 <col:30>
| `-WarnUnusedResultAttr 0x56331f3fd098 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x56331f3fd168 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56331f3fd0d8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56331f3fd210 <col:20>
| |-OptimizeNoneAttr 0x56331f3fd268 <col:30>
| `-WarnUnusedResultAttr 0x56331f3fd290 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x56331f3fd3c8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x56331f3fd2d0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56331f3fd470 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x56331f3fd570 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x56331f3fd4e0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56331f3fd618 <col:20>
| `-OptimizeNoneAttr 0x56331f3fd670 <col:30>
|-CXXMethodDecl 0x56331f3fd738 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56331f3fd6a8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56331f3fd7e0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x56331f3fd8e0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x56331f3fd850 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56331f3fd988 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x56331f3fda88 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x56331f3fd9f8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56331f3fdb30 <col:20>
| `-OptimizeNoneAttr 0x56331f3fdb88 <col:30>
|-CXXMethodDecl 0x56331f3fdd18 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x56331f3fdbc8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x56331f3fdc40 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x56331f416288 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x56331f3fddc8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x56331f3fdfc8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56331f3fde40 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x56331f3fdeb8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56331f3fe1d8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56331f3fe088 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56331f3fe100 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56331f3fe3e8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x56331f3fe298 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x56331f3fe318 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x56331f416298 <col:39> 'int' 0
|-CXXMethodDecl 0x56331f3fe4b8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x56331f3fe580 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56331f3fe648 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x56331f3fe708 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56331f3fe7d0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x56331f3fe918 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x56331f3fe888 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x56331f3feae8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56331f3fe9d8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x56331f3fea50 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56331f3febb8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x56331f3fec78 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x56331f3fed18 <col:20>
| `-OptimizeNoneAttr 0x56331f3fed70 <col:30>
|-CXXMethodDecl 0x56331f3fedc0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x56331f3fee60 <col:20>
| `-OptimizeNoneAttr 0x56331f3feeb8 <col:30>
|-CXXMethodDecl 0x56331f3fef08 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x56331f3fefc8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56331f3ff090 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x56331f3ff130 <col:20>
| `-OptimizeNoneAttr 0x56331f3ff188 <col:30>
|-CXXMethodDecl 0x56331f3ff2d8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56331f3ff1c8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x56331f3ff240 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56331f3ff428 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x56331f3ff398 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56331f3ff500 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x56331f3ff5c0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x56331f3ff660 <col:20>
| `-OptimizeNoneAttr 0x56331f3ff6b8 <col:30>
|-CXXMethodDecl 0x56331f3ff708 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x56331f3ff7a8 <col:20>
| `-OptimizeNoneAttr 0x56331f3ff800 <col:30>
|-CXXMethodDecl 0x56331f3ff850 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x56331f3ff918 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x56331f3ff9b8 <col:20>
| `-OptimizeNoneAttr 0x56331f3ffa10 <col:30>
|-CXXMethodDecl 0x56331f3ffa58 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x56331f3ffb78 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x56331f3ffce8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x56331f3ffc28 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x56331f3ffdd8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x56331f3ffe78 <col:20>
| `-OptimizeNoneAttr 0x56331f3ffed0 <col:30>
|-CXXMethodDecl 0x56331f3fff20 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x56331f3fffe0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56331f400218 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x56331f400090 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x56331f400108 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56331f4002c8 <col:20>
| `-OptimizeNoneAttr 0x56331f400320 <col:30>
|-CXXMethodDecl 0x56331f4003c8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x56331f400468 <col:20>
| `-OptimizeNoneAttr 0x56331f4004c0 <col:30>
|-CXXMethodDecl 0x56331f400510 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x56331f4005b0 <col:20>
| `-OptimizeNoneAttr 0x56331f400608 <col:30>
|-CXXMethodDecl 0x56331f400650 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x56331f4006f0 <col:20>
| `-OptimizeNoneAttr 0x56331f400748 <col:30>
|-CXXMethodDecl 0x56331f400848 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x56331f400780 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x56331f4008f0 <col:20>
| `-OptimizeNoneAttr 0x56331f400948 <col:30>
|-CXXMethodDecl 0x56331f400b08 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x56331f400980 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x56331f4009f8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56331f400bb8 <col:20>
| `-OptimizeNoneAttr 0x56331f400c10 <col:30>
|-CXXMethodDecl 0x56331f400cb8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x56331f400dd8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x56331f400ef8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x56331f400f98 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x56331f400fc0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x56331f4010e8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x56331f401188 <col:20>
| `-OptimizeNoneAttr 0x56331f4011e0 <col:30>
|-CXXMethodDecl 0x56331f401288 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x56331f401328 <col:20>
| `-OptimizeNoneAttr 0x56331f401380 <col:30>
|-AccessSpecDecl 0x56331f4013a8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x56331f4013d0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x56331f4014d0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x56331f401520 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56331f4014b0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x56331f401490 <col:14> 'int' 48
|-CXXMethodDecl 0x56331f401588 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x56331f401628 <col:20>
| `-OptimizeNoneAttr 0x56331f401680 <col:30>
|-CXXMethodDecl 0x56331f4016f8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x56331f401798 <col:20>
| `-OptimizeNoneAttr 0x56331f4017f0 <col:30>
|-CXXMethodDecl 0x56331f4018b8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x56331f401828 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x56331f401a58 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x56331f401bf8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x56331f401b08 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x56331f401ca0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x56331f401da0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56331f402150 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f401d80 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x56331f401d60 <col:9> 'int' 0
| |-EnumConstantDecl 0x56331f401e30 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56331f402168 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f401e10 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x56331f401df0 <col:14> 'int' 1
| |-EnumConstantDecl 0x56331f401ec0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56331f402180 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f401ea0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x56331f401e80 <col:14> 'int' 2
| |-EnumConstantDecl 0x56331f401f50 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56331f402198 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f401f30 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x56331f401f10 <col:14> 'int' 3
| |-EnumConstantDecl 0x56331f401fe0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56331f4021b0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f401fc0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x56331f401fa0 <col:13> 'int' 4
| |-EnumConstantDecl 0x56331f402070 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56331f4021c8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f402050 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x56331f402030 <col:13> 'int' 5
| `-EnumConstantDecl 0x56331f402100 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x56331f4021e0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56331f4020e0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x56331f4020c0 <col:14> 'int' 6
|-CXXMethodDecl 0x56331f402248 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x56331f4022e8 <col:20>
| `-OptimizeNoneAttr 0x56331f402340 <col:30>
|-CXXMethodDecl 0x56331f402438 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x56331f402378 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x56331f4024e0 <col:20>
| `-OptimizeNoneAttr 0x56331f402538 <col:30>
|-CXXMethodDecl 0x56331f4025a8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x56331f4026d0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x56331f402848 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x56331f402780 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x56331f402910 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x56331f4029d8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x56331f402b18 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x56331f402a88 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x56331f402bc0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x56331f402cc0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56331f402ec0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f402ca0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x56331f402c80 <col:23> 'int' 0
| |-EnumConstantDecl 0x56331f402d50 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56331f402ed8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f402d30 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x56331f402d10 <col:45> 'int' 4
| |-EnumConstantDecl 0x56331f402de0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56331f402ef0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f402dc0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x56331f402da0 <col:24> 'int' 0
| `-EnumConstantDecl 0x56331f402e70 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x56331f402f08 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56331f402e50 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x56331f402e30 <col:47> 'int' 16
|-CXXMethodDecl 0x56331f402f68 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x56331f4030d8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x56331f403018 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x56331f403180 <col:20>
| `-OptimizeNoneAttr 0x56331f4031d8 <col:30>
|-CXXMethodDecl 0x56331f403228 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x56331f416bb0 <col:18, col:36>
|   `-ReturnStmt 0x56331f416ba0 <col:20, col:33>
|     `-ImplicitCastExpr 0x56331f416b88 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x56331f416b68 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x56331f416b38 <col:27> '<bound member function type>' ->xanno 0x56331f401288
|           `-CXXThisExpr 0x56331f416b28 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x56331f403320 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x56331f416cc0 <col:30, col:48>
|   `-ReturnStmt 0x56331f416cb0 <col:32, col:45>
|     `-ImplicitCastExpr 0x56331f416c98 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x56331f416c78 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x56331f416c48 <col:39> '<bound member function type>' ->xanno 0x56331f4010e8
|           `-CXXThisExpr 0x56331f416c38 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x56331f403408 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x56331f416e58 <col:24, col:50>
|   `-ReturnStmt 0x56331f416e48 <col:26, col:47>
|     `-UnaryOperator 0x56331f416e30 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56331f416e10 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x56331f416df8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56331f416da8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x56331f40c0c8
|         |   `-CXXMemberCallExpr 0x56331f416d88 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x56331f416d58 <col:34> '<bound member function type>' ->xanno 0x56331f401288
|         |       `-CXXThisExpr 0x56331f416d48 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x56331f416dd8 <col:46> 'int' 0
|-CXXMethodDecl 0x56331f403510 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x56331f417028 <col:36, col:62>
|   `-ReturnStmt 0x56331f417018 <col:38, col:59>
|     `-UnaryOperator 0x56331f417000 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56331f416fe0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x56331f416fc8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56331f416f40 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x56331f40c0c8
|         |   `-CXXMemberCallExpr 0x56331f416f20 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56331f416ef0 <col:46> '<bound member function type>' ->xanno 0x56331f4010e8
|         |       `-CXXThisExpr 0x56331f416ee0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x56331f416f70 <col:58> 'int' 0
|-CXXMethodDecl 0x56331f403628 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x56331f4171c0 <col:26, col:53>
|   `-ReturnStmt 0x56331f4171b0 <col:28, col:50>
|     `-UnaryOperator 0x56331f417198 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56331f417178 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x56331f417160 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56331f417110 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x56331f40c3c8
|         |   `-CXXMemberCallExpr 0x56331f4170f0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x56331f4170c0 <col:36> '<bound member function type>' ->xanno 0x56331f401288
|         |       `-CXXThisExpr 0x56331f4170b0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x56331f417140 <col:49> 'int' 0
|-CXXMethodDecl 0x56331f403748 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x56331f417398 <col:38, col:65>
|   `-ReturnStmt 0x56331f417388 <col:40, col:62>
|     `-UnaryOperator 0x56331f417370 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56331f417350 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x56331f417338 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56331f4172a8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x56331f40c3c8
|         |   `-CXXMemberCallExpr 0x56331f417288 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56331f417258 <col:48> '<bound member function type>' ->xanno 0x56331f4010e8
|         |       `-CXXThisExpr 0x56331f417248 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x56331f4172d8 <col:61> 'int' 0
|-CXXMethodDecl 0x56331f4038f8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x56331f403800 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x56331f417a68 <col:34, line:463:5>
|   |-ParenExpr 0x56331f4178b0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x56331f417880 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x56331f4174e8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56331f4174b8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56331f417408 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56331f4173f0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56331f4173b0 <col:23> 'int' lvalue ParmVar 0x56331f403800 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56331f4173d0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56331f417498 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56331f417468 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56331f417428 <col:33> 'int' lvalue ParmVar 0x56331f403800 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x56331f417480 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x56331f417448 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56331f4014d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x56331f417548 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56331f417528 <col:56> 'int' 0
|   |   `-CallExpr 0x56331f4177e0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x56331f4177c8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56331f4177a8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56331ef6de00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56331f417820 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f417638 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x56331f417838 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f417668 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56331f417850 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56331f4176a0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x56331f417868 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56331f417790 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56331f417778 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56331f417738 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x56331f417a58 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x56331f417a40 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x56331f417a20 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x56331f4179f0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56331f4179a0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x56331f40c0c8
|         |   `-CXXMemberCallExpr 0x56331f417980 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56331f417950 <col:9> '<bound member function type>' ->xanno 0x56331f4010e8
|         |       `-CXXThisExpr 0x56331f417940 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x56331f417a08 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x56331f4179d0 <col:21> 'int' lvalue ParmVar 0x56331f403800 'i' 'int'
|-CXXMethodDecl 0x56331f403b48 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x56331f4039b8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x56331f403a30 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x56331f4180f8 <col:40, line:472:5>
|   |-ParenExpr 0x56331f417f10 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x56331f417ee0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x56331f417bc0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56331f417b90 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56331f417ae0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56331f417ac8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56331f417a88 <col:23> 'int' lvalue ParmVar 0x56331f4039b8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56331f417aa8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56331f417b70 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56331f417b40 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56331f417b00 <col:33> 'int' lvalue ParmVar 0x56331f4039b8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x56331f417b58 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x56331f417b20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56331f4014d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x56331f417c20 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56331f417c00 <col:56> 'int' 0
|   |   `-CallExpr 0x56331f417e40 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x56331f417e28 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56331f417e08 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56331ef6de00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56331f417e80 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f417c90 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x56331f417e98 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f417cc0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56331f417eb0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56331f417cf8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x56331f417ec8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56331f417df0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56331f417dd8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56331f417d98 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x56331f4180d8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x56331f418080 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x56331f418050 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x56331f418000 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x56331f40c0c8
|     | |   `-CXXMemberCallExpr 0x56331f417fe0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x56331f417fb0 <col:2> '<bound member function type>' ->xanno 0x56331f401288
|     | |       `-CXXThisExpr 0x56331f417fa0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x56331f418068 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x56331f418030 <col:14> 'int' lvalue ParmVar 0x56331f4039b8 'i' 'int'
|     `-ImplicitCastExpr 0x56331f4180c0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x56331f4180a0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x56331f403a30 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x56331f403d08 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x56331f403c10 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56331f418878 <col:36, line:485:5>
|   |-ParenExpr 0x56331f4185e0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x56331f4185b0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56331f418290 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56331f418260 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56331f418170 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56331f418158 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56331f418118 <col:23> 'int' lvalue ParmVar 0x56331f403c10 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56331f418138 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56331f418240 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56331f418228 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56331f418190 <col:33> 'int' lvalue ParmVar 0x56331f403c10 'i' 'int'
|   |   |     `-BinaryOperator 0x56331f418208 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56331f4181f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56331f4181b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56331f4014d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56331f4181d0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56331f4182f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56331f4182d0 <col:60> 'int' 0
|   |   `-CallExpr 0x56331f418510 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56331f4184f8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56331f4184d8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56331ef6de00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56331f418550 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f418360 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56331f418568 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f418398 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56331f418580 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56331f4183d0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x56331f418598 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56331f4184c0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56331f4184a8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56331f418468 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x56331f418868 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x56331f418850 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x56331f418838 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56331f418808 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x56331f4187a8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56331f418778 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56331f4186f0 <col:61, col:70> 'char const[48]' lvalue ->c 0x56331f40bfa0
|             |   `-CXXMemberCallExpr 0x56331f4186d0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56331f4186a0 <col:61> '<bound member function type>' ->xanno 0x56331f4010e8
|             |       `-CXXThisExpr 0x56331f418690 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56331f418790 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56331f418720 <col:74> 'int' lvalue ParmVar 0x56331f403c10 'i' 'int'
|-CXXMethodDecl 0x56331f403f58 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x56331f403dc8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56331f403e40 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x56331f418fc8 <col:42, line:500:5>
|   |-ParenExpr 0x56331f418d60 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x56331f418d30 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56331f418a10 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56331f4189e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56331f4188f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56331f4188d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56331f418898 <col:23> 'int' lvalue ParmVar 0x56331f403dc8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56331f4188b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56331f4189c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56331f4189a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56331f418910 <col:33> 'int' lvalue ParmVar 0x56331f403dc8 'i' 'int'
|   |   |     `-BinaryOperator 0x56331f418988 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56331f418970 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56331f418930 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56331f4014d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56331f418950 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56331f418a70 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56331f418a50 <col:60> 'int' 0
|   |   `-CallExpr 0x56331f418c90 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56331f418c78 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56331f418c58 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56331ef6de00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56331f418cd0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f418ae0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56331f418ce8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f418b18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56331f418d00 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56331f418b50 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x56331f418d18 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56331f418c40 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56331f418c28 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56331f418be8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x56331f418fa8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x56331f418f58 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56331f418f28 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x56331f418ed0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56331f418ea0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56331f418e50 <col:48, col:57> 'char [48]' lvalue ->c 0x56331f40bfa0
|     |     |   `-CXXMemberCallExpr 0x56331f418e30 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56331f418e00 <col:48> '<bound member function type>' ->xanno 0x56331f401288
|     |     |       `-CXXThisExpr 0x56331f418df0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56331f418eb8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56331f418e80 <col:61> 'int' lvalue ParmVar 0x56331f403dc8 'i' 'int'
|     `-ImplicitCastExpr 0x56331f418f90 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x56331f418f70 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x56331f403e40 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x56331f404118 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x56331f404020 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x56331f419728 <col:35, line:513:5>
|   |-ParenExpr 0x56331f419438 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x56331f419408 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56331f419160 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56331f419130 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56331f419040 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56331f419028 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56331f418fe8 <col:23> 'int' lvalue ParmVar 0x56331f404020 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56331f419008 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56331f419110 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56331f4190f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56331f419060 <col:33> 'int' lvalue ParmVar 0x56331f404020 'i' 'int'
|   |   |     `-BinaryOperator 0x56331f4190d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56331f4190c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56331f419080 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56331f4014d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56331f4190a0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56331f4191c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56331f4191a0 <col:60> 'int' 0
|   |   `-CallExpr 0x56331f419368 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56331f419350 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56331f419330 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56331ef6de00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56331f4193a8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f419230 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56331f4193c0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f419268 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56331f4193d8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56331f4192a0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x56331f4193f0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56331f419318 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56331f419300 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56331f4192c0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x56331f419718 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x56331f419700 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x56331f4196e8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56331f4196b8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x56331f419630 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x56331f419600 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56331f4195b0 <col:60, col:69> 'char const[48]' lvalue ->c 0x56331f40bfa0
|             |   `-CXXMemberCallExpr 0x56331f419590 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56331f419560 <col:60> '<bound member function type>' ->xanno 0x56331f4010e8
|             |       `-CXXThisExpr 0x56331f419550 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56331f419618 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56331f4195e0 <col:73> 'int' lvalue ParmVar 0x56331f404020 'i' 'int'
|-CXXMethodDecl 0x56331f404368 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x56331f4041d8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56331f404250 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x56331f419e48 <col:41, line:528:5>
|   |-ParenExpr 0x56331f419bd0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x56331f419ba0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56331f4198c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56331f419890 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56331f4197a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56331f419788 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56331f419748 <col:23> 'int' lvalue ParmVar 0x56331f4041d8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56331f419768 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56331f419870 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56331f419858 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56331f4197c0 <col:33> 'int' lvalue ParmVar 0x56331f4041d8 'i' 'int'
|   |   |     `-BinaryOperator 0x56331f419838 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56331f419820 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56331f4197e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56331f4014d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56331f419800 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56331f419920 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56331f419900 <col:60> 'int' 0
|   |   `-CallExpr 0x56331f419b00 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56331f419ae8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56331f419ac8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56331ef6de00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56331f419b40 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f419990 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56331f419b58 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f4199c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56331f419b70 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56331f419a00 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x56331f419b88 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56331f419ab0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56331f419a98 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56331f419a58 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x56331f419e28 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x56331f419dd8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56331f419da8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x56331f419d50 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56331f419d10 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56331f419cc0 <col:47, col:56> 'char [48]' lvalue ->c 0x56331f40bfa0
|     |     |   `-CXXMemberCallExpr 0x56331f419ca0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56331f419c70 <col:47> '<bound member function type>' ->xanno 0x56331f401288
|     |     |       `-CXXThisExpr 0x56331f419c60 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56331f419d28 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56331f419cf0 <col:60> 'int' lvalue ParmVar 0x56331f4041d8 'i' 'int'
|     `-ImplicitCastExpr 0x56331f419e10 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x56331f419df0 <col:65> 'int16_t':'short' lvalue ParmVar 0x56331f404250 'x' 'int16_t':'short'
|-CXXMethodDecl 0x56331f404528 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x56331f404430 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56331f41a518 <col:36, line:541:5>
|   |-ParenExpr 0x56331f41a2b8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x56331f41a288 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56331f419fe0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56331f419fb0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56331f419ec0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56331f419ea8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56331f419e68 <col:23> 'int' lvalue ParmVar 0x56331f404430 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56331f419e88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56331f419f90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56331f419f78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56331f419ee0 <col:33> 'int' lvalue ParmVar 0x56331f404430 'i' 'int'
|   |   |     `-BinaryOperator 0x56331f419f58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56331f419f40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56331f419f00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56331f4014d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56331f419f20 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56331f41a040 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56331f41a020 <col:60> 'int' 0
|   |   `-CallExpr 0x56331f41a1e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56331f41a1d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56331f41a1b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56331ef6de00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56331f41a228 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f41a0b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56331f41a240 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f41a0e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56331f41a258 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56331f41a120 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x56331f41a270 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56331f41a198 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56331f41a180 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56331f41a140 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x56331f41a508 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x56331f41a4f0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x56331f41a4d8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56331f41a4a8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x56331f41a450 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56331f41a420 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56331f41a3d0 <col:61, col:70> 'char const[48]' lvalue ->c 0x56331f40bfa0
|             |   `-CXXMemberCallExpr 0x56331f41a3b0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56331f41a380 <col:61> '<bound member function type>' ->xanno 0x56331f4010e8
|             |       `-CXXThisExpr 0x56331f41a370 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56331f41a438 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56331f41a400 <col:74> 'int' lvalue ParmVar 0x56331f404430 'i' 'int'
|-CXXMethodDecl 0x56331f4046f8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x56331f4045e8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x56331f404660 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56331f4047a8 <col:20>
| `-OptimizeNoneAttr 0x56331f404800 <col:30>
|-CXXMethodDecl 0x56331f404938 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x56331f404840 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x56331f41abe8 <col:35, line:562:5>
|   |-ParenExpr 0x56331f41a988 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x56331f41a958 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56331f41a6b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56331f41a680 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56331f41a590 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56331f41a578 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56331f41a538 <col:23> 'int' lvalue ParmVar 0x56331f404840 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56331f41a558 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56331f41a660 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56331f41a648 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56331f41a5b0 <col:33> 'int' lvalue ParmVar 0x56331f404840 'i' 'int'
|   |   |     `-BinaryOperator 0x56331f41a628 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56331f41a610 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56331f41a5d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56331f4014d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56331f41a5f0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56331f41a710 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56331f41a6f0 <col:60> 'int' 0
|   |   `-CallExpr 0x56331f41a8b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56331f41a8a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56331f41a880 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56331ef6de00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56331f41a8f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f41a780 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56331f41a910 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f41a7b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56331f41a928 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56331f41a7f0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x56331f41a940 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56331f41a868 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56331f41a850 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56331f41a810 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x56331f41abd8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x56331f41abc0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x56331f41aba8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56331f41ab78 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x56331f41ab20 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x56331f41aaf0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56331f41aaa0 <col:60, col:69> 'char const[48]' lvalue ->c 0x56331f40bfa0
|             |   `-CXXMemberCallExpr 0x56331f41aa80 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56331f41aa50 <col:60> '<bound member function type>' ->xanno 0x56331f4010e8
|             |       `-CXXThisExpr 0x56331f41aa40 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56331f41ab08 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56331f41aad0 <col:73> 'int' lvalue ParmVar 0x56331f404840 'i' 'int'
|-CXXMethodDecl 0x56331f404b48 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x56331f4049f8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56331f404a70 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x56331f41b2c8 <col:41, line:577:5>
|   |-ParenExpr 0x56331f41b058 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x56331f41b028 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56331f41ad80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56331f41ad50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56331f41ac60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56331f41ac48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56331f41ac08 <col:23> 'int' lvalue ParmVar 0x56331f4049f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56331f41ac28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56331f41ad30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56331f41ad18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56331f41ac80 <col:33> 'int' lvalue ParmVar 0x56331f4049f8 'i' 'int'
|   |   |     `-BinaryOperator 0x56331f41acf8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56331f41ace0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56331f41aca0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56331f4014d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56331f41acc0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56331f41ade0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56331f41adc0 <col:60> 'int' 0
|   |   `-CallExpr 0x56331f41af88 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56331f41af70 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56331f41af50 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56331ef6de00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56331f41afc8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f41ae50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56331f41afe0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f41ae88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56331f41aff8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56331f41aec0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x56331f41b010 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56331f41af38 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56331f41af20 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56331f41aee0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x56331f41b2a8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x56331f41b258 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56331f41b228 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x56331f41b1c8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56331f41b198 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56331f41b148 <col:47, col:56> 'char [48]' lvalue ->c 0x56331f40bfa0
|     |     |   `-CXXMemberCallExpr 0x56331f41b128 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56331f41b0f8 <col:47> '<bound member function type>' ->xanno 0x56331f401288
|     |     |       `-CXXThisExpr 0x56331f41b0e8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56331f41b1b0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56331f41b178 <col:60> 'int' lvalue ParmVar 0x56331f4049f8 'i' 'int'
|     `-ImplicitCastExpr 0x56331f41b290 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x56331f41b270 <col:65> 'int32_t':'int' lvalue ParmVar 0x56331f404a70 'x' 'int32_t':'int'
|-CXXMethodDecl 0x56331f404d08 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x56331f404c10 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56331f41b9f8 <col:36, line:591:5>
|   |-ParenExpr 0x56331f41b738 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x56331f41b708 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56331f41b460 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56331f41b430 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56331f41b340 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56331f41b328 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56331f41b2e8 <col:23> 'int' lvalue ParmVar 0x56331f404c10 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56331f41b308 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56331f41b410 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56331f41b3f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56331f41b360 <col:33> 'int' lvalue ParmVar 0x56331f404c10 'i' 'int'
|   |   |     `-BinaryOperator 0x56331f41b3d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56331f41b3c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56331f41b380 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56331f4014d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56331f41b3a0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x56331f41b4c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56331f41b4a0 <col:60> 'int' 0
|   |   `-CallExpr 0x56331f41b668 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56331f41b650 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56331f41b630 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56331ef6de00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56331f41b6a8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f41b530 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x56331f41b6c0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f41b568 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56331f41b6d8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56331f41b5a0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x56331f41b6f0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56331f41b618 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56331f41b600 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56331f41b5c0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x56331f41b9e8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x56331f41b9d0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x56331f41b9b8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56331f41b988 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x56331f41b900 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56331f41b8d0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56331f41b880 <col:61, col:70> 'char const[48]' lvalue ->c 0x56331f40bfa0
|             |   `-CXXMemberCallExpr 0x56331f41b860 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56331f41b830 <col:61> '<bound member function type>' ->xanno 0x56331f4010e8
|             |       `-CXXThisExpr 0x56331f41b820 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56331f41b8e8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56331f41b8b0 <col:74> 'int' lvalue ParmVar 0x56331f404c10 'i' 'int'
|-CXXMethodDecl 0x56331f404f58 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x56331f404dc8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56331f404e40 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x56331f41c0d8 <col:42, line:606:5>
|   |-ParenExpr 0x56331f41be68 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x56331f41be38 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56331f41bb90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56331f41bb60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56331f41ba70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56331f41ba58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56331f41ba18 <col:23> 'int' lvalue ParmVar 0x56331f404dc8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56331f41ba38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56331f41bb40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56331f41bb28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56331f41ba90 <col:33> 'int' lvalue ParmVar 0x56331f404dc8 'i' 'int'
|   |   |     `-BinaryOperator 0x56331f41bb08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56331f41baf0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56331f41bab0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56331f4014d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56331f41bad0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x56331f41bbf0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56331f41bbd0 <col:60> 'int' 0
|   |   `-CallExpr 0x56331f41bd98 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56331f41bd80 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56331f41bd60 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56331ef6de00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56331f41bdd8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f41bc60 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x56331f41bdf0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f41bc98 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56331f41be08 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56331f41bcd0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x56331f41be20 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56331f41bd48 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56331f41bd30 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56331f41bcf0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x56331f41c0b8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x56331f41c068 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56331f41c038 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x56331f41bfd8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56331f41bfa8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56331f41bf58 <col:48, col:57> 'char [48]' lvalue ->c 0x56331f40bfa0
|     |     |   `-CXXMemberCallExpr 0x56331f41bf38 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56331f41bf08 <col:48> '<bound member function type>' ->xanno 0x56331f401288
|     |     |       `-CXXThisExpr 0x56331f41bef8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56331f41bfc0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56331f41bf88 <col:61> 'int' lvalue ParmVar 0x56331f404dc8 'i' 'int'
|     `-ImplicitCastExpr 0x56331f41c0a0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x56331f41c080 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x56331f404e40 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x56331f4050f0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x56331f405020 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x56331f41c948 <col:33, line:620:5>
|   |-ParenExpr 0x56331f41c6c0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x56331f41c690 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x56331f41c2e0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56331f41c2b0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56331f41c150 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56331f41c138 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56331f41c0f8 <col:23> 'int' lvalue ParmVar 0x56331f405020 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56331f41c118 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56331f41c290 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x56331f41c278 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56331f41c170 <col:33> 'int' lvalue ParmVar 0x56331f405020 'i' 'int'
|   |   |     `-BinaryOperator 0x56331f41c258 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56331f41c240 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56331f41c190 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56331f4014d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x56331f41c218 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x56331f41c200 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x56331f41c1c8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x56331f41c340 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56331f41c320 <col:79> 'int' 0
|   |   `-CallExpr 0x56331f41c5f0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x56331f41c5d8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56331f41c5b8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56331ef6de00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56331f41c630 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f41c428 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x56331f41c648 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f41c470 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56331f41c660 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56331f41c4a8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x56331f41c678 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56331f41c5a0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56331f41c588 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56331f41c548 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x56331f41c938 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x56331f41c920 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x56331f41c908 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56331f41c8d8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x56331f41c850 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x56331f41c820 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56331f41c7d0 <col:67, col:76> 'char const[48]' lvalue ->c 0x56331f40bfa0
|             |   `-CXXMemberCallExpr 0x56331f41c7b0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56331f41c780 <col:67> '<bound member function type>' ->xanno 0x56331f4010e8
|             |       `-CXXThisExpr 0x56331f41c770 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56331f41c838 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56331f41c800 <col:80> 'int' lvalue ParmVar 0x56331f405020 'i' 'int'
|-CXXMethodDecl 0x56331f405308 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x56331f4051b0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56331f405230 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x56331f41d170 <col:45, line:635:5>
|   |-ParenExpr 0x56331f41ceb8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x56331f41ce88 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x56331f41cb50 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56331f41cb20 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56331f41c9c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56331f41c9a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56331f41c968 <col:23> 'int' lvalue ParmVar 0x56331f4051b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56331f41c988 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56331f41cb00 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x56331f41cae8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56331f41c9e0 <col:33> 'int' lvalue ParmVar 0x56331f4051b0 'i' 'int'
|   |   |     `-BinaryOperator 0x56331f41cac8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56331f41cab0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56331f41ca00 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56331f4014d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x56331f41ca88 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x56331f41ca70 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x56331f41ca38 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x56331f41cbb0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56331f41cb90 <col:79> 'int' 0
|   |   `-CallExpr 0x56331f41cde8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x56331f41cdd0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56331f41cdb0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56331ef6de00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56331f41ce28 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f41cc20 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x56331f41ce40 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56331f41cc68 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56331f41ce58 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56331f41cca0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x56331f41ce70 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56331f41cd98 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56331f41cd80 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56331f41cd38 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x56331f41d150 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x56331f41d0b8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56331f41d088 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x56331f41d028 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56331f41cff8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56331f41cfa8 <col:54, col:63> 'char [48]' lvalue ->c 0x56331f40bfa0
|     |     |   `-CXXMemberCallExpr 0x56331f41cf88 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56331f41cf58 <col:54> '<bound member function type>' ->xanno 0x56331f401288
|     |     |       `-CXXThisExpr 0x56331f41cf48 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56331f41d010 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56331f41cfd8 <col:67> 'int' lvalue ParmVar 0x56331f4051b0 'i' 'int'
|     `-CXXConstCastExpr 0x56331f41d120 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x56331f41d108 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x56331f41d0d0 <col:91> 'const void *' lvalue ParmVar 0x56331f405230 'x' 'const void *'
|-CXXMethodDecl 0x56331f4053d8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x56331f41d1f8 <col:34, line:640:5>
|   `-ReturnStmt 0x56331f41d1e8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x56331f41d1d0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x56331f41d1a0 <col:16> 'Packet *' lvalue ->_data_packet 0x56331f40cb58
|         `-CXXThisExpr 0x56331f41d190 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x56331f405518 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x56331f405488 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56331f4162b8 <col:46> 'bool' true
|-CXXMethodDecl 0x56331f405698 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x56331f4055d0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x56331f405740 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x56331f405ef0 <line:660:22> "" ""
| |-EnumConstantDecl 0x56331f405840 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56331f405f60 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f405820 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x56331f405800 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x56331f3fa9a0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x56331f4058d0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56331f405f78 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f4058b0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x56331f405890 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x56331f3faa30 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x56331f405960 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56331f405f90 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f405940 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56331f405920 <col:21> 'int' 0
| |-EnumConstantDecl 0x56331f4059f0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56331f405fa8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f4059d0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x56331f4059b0 <col:19> 'int' 16
| |-EnumConstantDecl 0x56331f405a80 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56331f405fc0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f405a60 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x56331f405a40 <col:21> 'int' 16
| |-EnumConstantDecl 0x56331f405b10 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56331f405fd8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f405af0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x56331f405ad0 <col:19> 'int' 32
| |-EnumConstantDecl 0x56331f405ba0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56331f405ff0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f405b80 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x56331f405b60 <col:19> 'int' EnumConstant 0x56331f4059f0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x56331f405c30 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56331f406008 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f405c10 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x56331f405bf0 <col:19> 'int' EnumConstant 0x56331f405b10 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x56331f405d00 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56331f406020 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f405ce0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x56331f405cc0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x56331f405c80 <col:23> 'int' EnumConstant 0x56331f405c30 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x56331f405ca0 <col:40> 'int' 2
| |-EnumConstantDecl 0x56331f405dd0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56331f406038 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f405db0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x56331f405d90 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x56331f405d50 <col:23> 'int' EnumConstant 0x56331f405c30 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x56331f405d70 <col:40> 'int' 4
| `-EnumConstantDecl 0x56331f405ea0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x56331f406050 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56331f405e80 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x56331f405e60 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x56331f405e20 <col:23> 'int' EnumConstant 0x56331f405c30 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x56331f405e40 <col:40> 'int' 8
|-CXXMethodDecl 0x56331f406090 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x56331f406130 <col:68> "" ""
|-CXXMethodDecl 0x56331f4061c8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x56331f406268 <col:45> "" ""
|-CXXMethodDecl 0x56331f406300 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x56331f4063a0 <col:57> "" ""
|-CXXMethodDecl 0x56331f406438 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x56331f4064d8 <col:45> "" ""
|-CXXMethodDecl 0x56331f406570 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x56331f406610 <col:57> "" ""
|-CXXMethodDecl 0x56331f4066a0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x56331f406740 <col:51> "" ""
|-CXXMethodDecl 0x56331f4067d0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x56331f406870 <col:63> "" ""
|-CXXMethodDecl 0x56331f406900 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x56331f4069a0 <col:53> "" ""
|-CXXMethodDecl 0x56331f406a30 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x56331f406ad0 <col:65> "" ""
|-CXXMethodDecl 0x56331f406be8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x56331f406b58 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x56331f406c90 <col:61> "" ""
|-CXXMethodDecl 0x56331f406e28 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x56331f406d18 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x56331f406d90 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x56331f406ed8 <col:67> "" ""
|-CXXMethodDecl 0x56331f406ff0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x56331f406f60 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56331f407098 <col:63> "" ""
|-CXXMethodDecl 0x56331f407230 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x56331f407120 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56331f407198 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x56331f4072e0 <col:69> "" ""
|-CXXMethodDecl 0x56331f4073f8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x56331f407368 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56331f4074a0 <col:63> "" ""
|-CXXMethodDecl 0x56331f409b78 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56331f409a68 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56331f409ae0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56331f409c28 <col:69> "" ""
|-CXXMethodDecl 0x56331f409d40 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x56331f409cb0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x56331f409de8 <col:62> "" ""
|-CXXMethodDecl 0x56331f409f80 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x56331f409e70 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56331f409ee8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x56331f40a030 <col:68> "" ""
|-CXXMethodDecl 0x56331f40a148 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x56331f40a0b8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56331f40a1f0 <col:63> "" ""
|-CXXMethodDecl 0x56331f40a388 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x56331f40a278 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56331f40a2f0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x56331f40a438 <col:69> "" ""
|-CXXMethodDecl 0x56331f40a4c8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x56331f40a568 <col:64> "" ""
|-CXXMethodDecl 0x56331f40a5f8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x56331f40a698 <col:52> "" ""
|-CXXMethodDecl 0x56331f40a728 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x56331f40a7c8 <col:67> "" ""
|-CXXMethodDecl 0x56331f40a858 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x56331f40a8f8 <col:55> "" ""
|-CXXMethodDecl 0x56331f40aa10 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x56331f40a980 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56331f40aab8 <col:58> "" ""
|-CXXMethodDecl 0x56331f40ac50 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x56331f40ab40 <col:33> col:36 'int'
| |-ParmVarDecl 0x56331f40abb8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x56331f40ad00 <col:62> "" ""
|-CXXMethodDecl 0x56331f40ae18 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x56331f40ad88 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56331f40aec0 <col:58> "" ""
|-CXXMethodDecl 0x56331f40b058 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x56331f40af48 <col:33> col:36 'int'
| |-ParmVarDecl 0x56331f40afc0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x56331f40b108 <col:62> "" ""
|-CXXMethodDecl 0x56331f40b220 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x56331f40b190 <col:34> col:37 'int'
| `-DeprecatedAttr 0x56331f40b2c8 <col:60> "" ""
|-CXXMethodDecl 0x56331f40b460 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x56331f40b350 <col:34> col:37 'int'
| |-ParmVarDecl 0x56331f40b3c8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x56331f40b510 <col:64> "" ""
|-CXXMethodDecl 0x56331f40b628 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x56331f40b598 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56331f40b6d0 <col:58> "" ""
|-CXXMethodDecl 0x56331f40b868 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x56331f40b758 <col:33> col:36 'int'
| |-ParmVarDecl 0x56331f40b7d0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x56331f40b918 <col:62> "" ""
|-CXXMethodDecl 0x56331f40ba30 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x56331f40b9a0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x56331f40bad8 <col:59> "" ""
|-CXXMethodDecl 0x56331f40bc70 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56331f40bb60 <col:33> col:36 'int'
| |-ParmVarDecl 0x56331f40bbd8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56331f40bd20 <col:63> "" ""
|-AccessSpecDecl 0x56331f40bd90 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x56331f40bdb8 prev 0x56331f400fc0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56331f40beb0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x56331f40bfa0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x56331f40c0c8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x56331f40c248 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x56331f40c3c8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x56331f40c548 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x56331f41d378 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56331f41dbe8 <col:11>
| |-CXXDestructorDecl 0x56331f41d450 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x56331f41d588 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x56331f41d588
| | `-ParmVarDecl 0x56331f41d698 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x56331f41d738 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56331f41d738
| | `-ParmVarDecl 0x56331f41d848 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x56331f420608 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56331f420718 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x56331f420998 <col:11>
| |   `-ReturnStmt 0x56331f420988 <col:11>
| |     `-UnaryOperator 0x56331f420970 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56331f420960 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x56331f420788 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56331f420788
|   `-ParmVarDecl 0x56331f420898 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x56331f40c5b0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56331f40c6c8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x56331f40c768 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x56331f40c7d0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x56331f40c838 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x56331f40c8a0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x56331f40c900 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x56331f40c9c0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x56331f40ca20 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x56331f40ca80 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x56331f41d288 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x56331f40c768 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x56331f41dbf8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x56331f41dc50 <col:12>
| |-CXXConstructorDecl 0x56331f41d8b8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x56331f41d8b8
| | `-ParmVarDecl 0x56331f41d9c8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x56331f41da68 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x56331f41da68
| | `-ParmVarDecl 0x56331f41db78 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x56331f41fcf0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x56331f40caf8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x56331f40cb58 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x56331f40cbc0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x56331f40cc28 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x56331f40cc90 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x56331f40ccf8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x56331f40cd58 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x56331f40cdb8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x56331f40ce20 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x56331f40cea8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x56331f40caf8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x56331f41d220 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x56331f40cd58 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x56331f41dc60 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x56331f41dcc0 <col:21, line:755:5>
|-CXXConstructorDecl 0x56331f40d048 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x56331f40cf88 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x56331f40d140 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x56331f40d328 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x56331f40d230 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x56331f40d5f8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x56331f40d3e0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56331f40d458 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56331f40d4d0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56331f40d818 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x56331f40d6c8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x56331f40d740 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x56331f415df8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x56331f40d8d8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x56331f40d950 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x56331f40d9c8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x56331f415f50 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x56331f415ec0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56331f416098 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x56331f416008 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x56331f416190 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<4>
         0 |   char [4] x
           | [sizeof=4, dsize=4, align=1,
           |  nvsize=4, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56331f4c0c30 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 4
|-PackedAttr 0x56331f3ed340 <line:167:18>
|-CXXRecordDecl 0x56331f3ed400 prev 0x56331f4c0c30 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x56331f3ed510 <line:166:5, col:13> col:10 x 'char [4]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array = type { [4 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array = type { [4 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NameDB
         0 |   (NameDB vtable pointer)
         8 |   uint32_t _type
        16 |   class String _context
        16 |     struct String::rep_t _r
        16 |       const char * data
        24 |       int length
        32 |       struct String::memo_t * memo
        40 |   size_t _value_size
        48 |   class NameDB * _context_parent
        56 |   class NameDB * _context_sibling
        64 |   class NameDB * _context_child
        72 |   class NameInfo * _installed
           | [sizeof=80, dsize=80, align=8,
           |  nvsize=80, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<8> >
         0 |   vector_memory<class sized_array_memory<8> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class NameDB *>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class NameInfo
         0 |   class Vector<class NameDB *> _namedb_roots
         0 |     class vector_memory<class sized_array_memory<8> > vm_
         0 |       vector_memory<class sized_array_memory<8> >::type * l_
         8 |       vector_memory::size_type n_
        12 |       vector_memory::size_type capacity_
        16 |   class Vector<class NameDB *> _namedbs
        16 |     class vector_memory<class sized_array_memory<8> > vm_
        16 |       vector_memory<class sized_array_memory<8> >::type * l_
        24 |       vector_memory::size_type n_
        28 |       vector_memory::size_type capacity_
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56331f5219f0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<8>'
|-CXXRecordDecl 0x56331f521bc8 prev 0x56331f5219f0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56331f521c58 <col:46, col:52> col:46 public
|-TypedefDecl 0x56331f521c80 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56331eed13b0 'int'
|-TypedefDecl 0x56331f523850 <line:13:5, col:31> col:31 type 'typename sized_array_memory<8>::type':'char_array<8>'
| `-ElaboratedType 0x56331f523800 'typename sized_array_memory<8>::type' sugar
|   `-TypedefType 0x56331f522130 'sized_array_memory<8>::type' sugar
|     |-Typedef 0x56331f522030 'type'
|     `-TemplateSpecializationType 0x56331f521fc0 'char_array<8UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x56331f521ea0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|       |   `-SubstNonTypeTemplateParmExpr 0x56331f521e80 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x56331f521e60 <col:24> 'unsigned long' 8
|       `-RecordType 0x56331f521fa0 'char_array<8>'
|         `-ClassTemplateSpecialization 0x56331f521ec0 'char_array'
|-TypedefDecl 0x56331f523908 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<8> >::type *'
| `-PointerType 0x56331f5238d0 'vector_memory<sized_array_memory<8> >::type *'
|   `-TypedefType 0x56331f5238b0 'vector_memory<sized_array_memory<8> >::type' sugar
|     |-Typedef 0x56331f523850 'type'
|     `-ElaboratedType 0x56331f523800 'typename sized_array_memory<8>::type' sugar
|       `-TypedefType 0x56331f522130 'sized_array_memory<8>::type' sugar
|         |-Typedef 0x56331f522030 'type'
|         `-TemplateSpecializationType 0x56331f521fc0 'char_array<8UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x56331f521ea0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|           |   `-SubstNonTypeTemplateParmExpr 0x56331f521e80 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x56331f521e60 <col:24> 'unsigned long' 8
|           `-RecordType 0x56331f521fa0 'char_array<8>'
|             `-ClassTemplateSpecialization 0x56331f521ec0 'char_array'
|-CXXMethodDecl 0x56331f523a88 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<8> >::type *) const' inline
| `-ParmVarDecl 0x56331f523998 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXConstructorDecl 0x56331f523b78 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56331f523c58 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x56331f523c58
|-CXXMethodDecl 0x56331f523f28 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x56331f523e30 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<8> > &'
|-CXXMethodDecl 0x56331f524168 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x56331f523fe0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56331f524058 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56331f524338 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x56331f524228 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56331f5242a0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56331f524498 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x56331f524568 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x56331f5247b8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x56331f524628 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x56331f5246a0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56331f524a18 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, vector_memory<sized_array_memory<8> >::iterator)'
| |-ParmVarDecl 0x56331f524888 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x56331f524900 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56331f524bd8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x56331f524ae8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56331f524d98 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x56331f524ca0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56331f524e50 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56331f524f00 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56331f525138 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x56331f524fb0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56331f525028 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56331f5253d8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x56331f5252e0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<8> > &'
|-FieldDecl 0x56331f5254a0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<8> >::type *'
|-FieldDecl 0x56331f5254f0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56331f525540 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.3 = type { %struct.char_array.4*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.3 = type { %struct.char_array.4*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56331f520550 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'NameDB *'
|-CXXRecordDecl 0x56331f520758 prev 0x56331f520550 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56331f5218a0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<NameDB *>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x56331f521850 'typename array_memory<NameDB *>::type' sugar
|   `-TypedefType 0x56331f521830 'conditional<true, sized_array_memory<8>, typed_array_memory<NameDB *> >::type' sugar
|     |-Typedef 0x56331f5216e0 'type'
|     `-SubstTemplateTypeParmType 0x56331f521500 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x56331f197a00 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56331f1979a8 'T'
|       `-RecordType 0x56331f521050 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x56331f520f68 'sized_array_memory'
|-FieldDecl 0x56331f525590 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<NameDB *>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x56331f5255e0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56331f525618 <line:118:5, col:15> col:15 value_type 'NameDB *':'NameDB *'
| `-SubstTemplateTypeParmType 0x56331f5207f0 'NameDB *' sugar
|   |-TemplateTypeParmType 0x56331f1cf6f0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56331f1cf698 'T'
|   `-PointerType 0x56331f51e6e0 'NameDB *'
|     `-RecordType 0x56331f51ce50 'NameDB'
|       `-CXXRecord 0x56331f52bbd8 'NameDB'
|-TypedefDecl 0x56331f5256d8 <line:119:5, col:16> col:16 reference 'NameDB *&'
| `-LValueReferenceType 0x56331f5256a0 'NameDB *&'
|   `-SubstTemplateTypeParmType 0x56331f5207f0 'NameDB *' sugar
|     |-TemplateTypeParmType 0x56331f1cf6f0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56331f1cf698 'T'
|     `-PointerType 0x56331f51e6e0 'NameDB *'
|       `-RecordType 0x56331f51ce50 'NameDB'
|         `-CXXRecord 0x56331f52bbd8 'NameDB'
|-TypedefDecl 0x56331f525798 <line:120:5, col:22> col:22 const_reference 'NameDB *const &'
| `-LValueReferenceType 0x56331f525760 'NameDB *const &'
|   `-QualType 0x56331f5207f1 'NameDB *const' const
|     `-SubstTemplateTypeParmType 0x56331f5207f0 'NameDB *' sugar
|       |-TemplateTypeParmType 0x56331f1cf6f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56331f1cf698 'T'
|       `-PointerType 0x56331f51e6e0 'NameDB *'
|         `-RecordType 0x56331f51ce50 'NameDB'
|           `-CXXRecord 0x56331f52bbd8 'NameDB'
|-TypedefDecl 0x56331f525858 <line:121:5, col:16> col:16 pointer 'NameDB **'
| `-PointerType 0x56331f525820 'NameDB **'
|   `-SubstTemplateTypeParmType 0x56331f5207f0 'NameDB *' sugar
|     |-TemplateTypeParmType 0x56331f1cf6f0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56331f1cf698 'T'
|     `-PointerType 0x56331f51e6e0 'NameDB *'
|       `-RecordType 0x56331f51ce50 'NameDB'
|         `-CXXRecord 0x56331f52bbd8 'NameDB'
|-TypedefDecl 0x56331f525918 <line:122:5, col:22> col:22 const_pointer 'NameDB *const *'
| `-PointerType 0x56331f5258e0 'NameDB *const *'
|   `-QualType 0x56331f5207f1 'NameDB *const' const
|     `-SubstTemplateTypeParmType 0x56331f5207f0 'NameDB *' sugar
|       |-TemplateTypeParmType 0x56331f1cf6f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56331f1cf698 'T'
|       `-PointerType 0x56331f51e6e0 'NameDB *'
|         `-RecordType 0x56331f51ce50 'NameDB'
|           `-CXXRecord 0x56331f52bbd8 'NameDB'
|-TypedefDecl 0x56331f5264f0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<NameDB *>::type':'NameDB *'
| `-ElaboratedType 0x56331f5264a0 'typename fast_argument<NameDB *>::type' sugar
|   `-TypedefType 0x56331f526480 'fast_argument<NameDB *, false>::type' sugar
|     |-Typedef 0x56331f526410 'type'
|     `-SubstTemplateTypeParmType 0x56331f5261d0 'NameDB *' sugar
|       |-TemplateTypeParmType 0x56331f1a2800 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56331f1a27b0 'T'
|       `-PointerType 0x56331f51e6e0 'NameDB *'
|         `-RecordType 0x56331f51ce50 'NameDB'
|           `-CXXRecord 0x56331f52bbd8 'NameDB'
|-TypedefDecl 0x56331f526558 <line:126:5, col:22> col:22 const_access_type 'NameDB *const &'
| `-LValueReferenceType 0x56331f525760 'NameDB *const &'
|   `-QualType 0x56331f5207f1 'NameDB *const' const
|     `-SubstTemplateTypeParmType 0x56331f5207f0 'NameDB *' sugar
|       |-TemplateTypeParmType 0x56331f1cf6f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56331f1cf698 'T'
|       `-PointerType 0x56331f51e6e0 'NameDB *'
|         `-RecordType 0x56331f51ce50 'NameDB'
|           `-CXXRecord 0x56331f52bbd8 'NameDB'
|-TypedefDecl 0x56331f5265b0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56331eed13b0 'int'
|-TypedefDecl 0x56331f526618 <line:130:5, col:16> col:16 iterator 'NameDB **'
| `-PointerType 0x56331f525820 'NameDB **'
|   `-SubstTemplateTypeParmType 0x56331f5207f0 'NameDB *' sugar
|     |-TemplateTypeParmType 0x56331f1cf6f0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56331f1cf698 'T'
|     `-PointerType 0x56331f51e6e0 'NameDB *'
|       `-RecordType 0x56331f51ce50 'NameDB'
|         `-CXXRecord 0x56331f52bbd8 'NameDB'
|-TypedefDecl 0x56331f526680 <line:131:5, col:22> col:22 const_iterator 'NameDB *const *'
| `-PointerType 0x56331f5258e0 'NameDB *const *'
|   `-QualType 0x56331f5207f1 'NameDB *const' const
|     `-SubstTemplateTypeParmType 0x56331f5207f0 'NameDB *' sugar
|       |-TemplateTypeParmType 0x56331f1cf6f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56331f1cf698 'T'
|       `-PointerType 0x56331f51e6e0 'NameDB *'
|         `-RecordType 0x56331f51ce50 'NameDB'
|           `-CXXRecord 0x56331f52bbd8 'NameDB'
|-EnumDecl 0x56331f5266d8 <line:134:5> col:5
| `-EnumConstantDecl 0x56331f5267d0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<NameDB *>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56331f5267b0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56331f1d0d78 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56331f1d0d50 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56331f1d0d30 <col:40> 'int' 1
|-CXXConstructorDecl 0x56331f526858 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56331f526ae8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<NameDB *>::value_argument_type)' inline
| |-ParmVarDecl 0x56331f526910 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56331f5269b0 <col:41, col:61> col:61 v 'Vector<NameDB *>::value_argument_type':'NameDB *'
|-CXXConstructorDecl 0x56331f526da8 <line:139:5, col:37> col:12 Vector 'void (const Vector<NameDB *> &)' inline
| `-ParmVarDecl 0x56331f526c90 <col:19, col:36> col:36 x 'const Vector<NameDB *> &'
|-CXXConstructorDecl 0x56331f527068 <line:141:5, col:32> col:12 Vector 'void (Vector<NameDB *> &&)' inline
| `-ParmVarDecl 0x56331f526f50 <col:19, col:31> col:31 x 'Vector<NameDB *> &&'
|-CXXMethodDecl 0x56331f5273b0 <line:144:5, col:51> col:23 operator= 'Vector<NameDB *> &(const Vector<NameDB *> &)' inline
| `-ParmVarDecl 0x56331f527290 <col:33, col:50> col:50 x 'const Vector<NameDB *> &'
|-CXXMethodDecl 0x56331f5276c0 <line:146:5, col:46> col:23 operator= 'Vector<NameDB *> &(Vector<NameDB *> &&)' inline
| `-ParmVarDecl 0x56331f5275a0 <col:33, col:45> col:45 x 'Vector<NameDB *> &&'
|-CXXMethodDecl 0x56331f5279b0 <line:148:5, col:70> col:23 assign 'Vector<NameDB *> &(Vector::size_type, Vector<NameDB *>::value_argument_type)' inline
| |-ParmVarDecl 0x56331f5277f8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56331f527870 <col:43, col:69> col:63 v 'Vector<NameDB *>::value_argument_type':'NameDB *'
|-CXXMethodDecl 0x56331f527b08 <line:150:5, col:55> col:49 begin 'Vector<NameDB *>::iterator ()'
| |-NoInlineAttr 0x56331f527be8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56331f527c40 <col:30> Inherited
|-CXXMethodDecl 0x56331f527c88 <line:151:5, col:53> col:49 end 'Vector<NameDB *>::iterator ()'
| |-NoInlineAttr 0x56331f527d38 <col:20> Inherited
| `-OptimizeNoneAttr 0x56331f527d90 <col:30> Inherited
|-CXXMethodDecl 0x56331f527e58 <line:152:5, col:63> col:55 begin 'Vector<NameDB *>::const_iterator () const'
| |-NoInlineAttr 0x56331f527f08 <col:20> Inherited
| `-OptimizeNoneAttr 0x56331f527f60 <col:30> Inherited
|-CXXMethodDecl 0x56331f527fa8 <line:153:5, col:61> col:55 end 'Vector<NameDB *>::const_iterator () const'
| |-NoInlineAttr 0x56331f528058 <col:20> Inherited
| `-OptimizeNoneAttr 0x56331f5280b0 <col:30> Inherited
|-CXXMethodDecl 0x56331f5280f8 <line:154:5, col:64> col:55 cbegin 'Vector<NameDB *>::const_iterator () const'
| |-NoInlineAttr 0x56331f5281a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56331f528200 <col:30> Inherited
|-CXXMethodDecl 0x56331f528248 <line:155:5, col:62> col:55 cend 'Vector<NameDB *>::const_iterator () const'
| |-NoInlineAttr 0x56331f5282f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56331f528350 <col:30> Inherited
|-CXXMethodDecl 0x56331f528378 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56331f528428 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56331f5284d8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56331f528698 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<NameDB *>::value_argument_type)' inline
| |-ParmVarDecl 0x56331f528588 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56331f528600 <col:37, col:63> col:57 v 'Vector<NameDB *>::value_argument_type':'NameDB *'
|-CXXMethodDecl 0x56331f5287e8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56331f528758 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56331f528998 <line:163:5, col:65> col:43 operator[] 'NameDB *&(Vector::size_type)'
| |-ParmVarDecl 0x56331f5288a0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56331f528a50 <col:20>
| `-OptimizeNoneAttr 0x56331f528aa8 <col:30>
|-CXXMethodDecl 0x56331f528bc8 <line:164:5, col:73> col:49 operator[] 'NameDB *const &(Vector::size_type) const'
| |-ParmVarDecl 0x56331f528ad0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56331f528c80 <col:20>
| `-OptimizeNoneAttr 0x56331f528cd8 <col:30>
|-CXXMethodDecl 0x56331f528d90 <line:165:5, col:29> col:15 at 'NameDB *&(Vector::size_type)' inline
| `-ParmVarDecl 0x56331f528d00 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56331f528ed8 <line:166:5, col:37> col:21 at 'NameDB *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56331f528e48 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56331f529008 <line:167:5, col:21> col:15 front 'NameDB *&()' inline
|-CXXMethodDecl 0x56331f529138 <line:168:5, col:29> col:21 front 'NameDB *const &() const' inline
|-CXXMethodDecl 0x56331f529208 <line:169:5, col:20> col:15 back 'NameDB *&()' inline
|-CXXMethodDecl 0x56331f5292d8 <line:170:5, col:28> col:21 back 'NameDB *const &() const' inline
|-CXXMethodDecl 0x56331f529418 <line:172:5, col:39> col:15 unchecked_at 'NameDB *&(Vector::size_type)' inline
| `-ParmVarDecl 0x56331f529388 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56331f529560 <line:173:5, col:47> col:21 unchecked_at 'NameDB *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56331f5294d0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56331f5296a8 <line:174:5, col:59> col:15 at_u 'NameDB *&(Vector::size_type)' inline
| |-ParmVarDecl 0x56331f529618 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56331f529760 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56331f529860 <line:175:5, col:71> col:21 at_u 'NameDB *const &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56331f5297d0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56331f529918 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56331f529a00 <line:177:5, col:20> col:15 data 'NameDB **()' inline
|-CXXMethodDecl 0x56331f529af8 <line:178:5, col:28> col:21 data 'NameDB *const *() const' inline
|-CXXMethodDecl 0x56331f529c78 <line:180:5, col:48> col:17 push_back 'void (Vector<NameDB *>::value_argument_type)' inline
| `-ParmVarDecl 0x56331f529bb8 <col:27, col:47> col:47 v 'Vector<NameDB *>::value_argument_type':'NameDB *'
|-FunctionTemplateDecl 0x56331f52a438 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56331f529d30 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<NameDB *>':'fast_argument<NameDB *, false>'
| `-CXXMethodDecl 0x56331f52a398 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (NameDB *&&)' inline
|   `-ParmVarDecl 0x56331f52a298 <col:58, col:62> col:62 v 'NameDB *&&'
|-CXXMethodDecl 0x56331f52a518 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56331f52a668 <line:186:5, col:49> col:17 push_front 'void (Vector<NameDB *>::value_argument_type)' inline
| `-ParmVarDecl 0x56331f52a5d8 <col:28, col:48> col:48 v 'Vector<NameDB *>::value_argument_type':'NameDB *'
|-CXXMethodDecl 0x56331f52a720 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56331f52a968 <line:189:5, col:62> col:21 insert 'Vector<NameDB *>::iterator (Vector<NameDB *>::iterator, Vector<NameDB *>::value_argument_type)' inline
| |-ParmVarDecl 0x56331f52a7e0 <col:28, col:37> col:37 it 'Vector<NameDB *>::iterator':'NameDB **'
| `-ParmVarDecl 0x56331f52a858 <col:41, col:61> col:61 v 'Vector<NameDB *>::value_argument_type':'NameDB *'
|-CXXMethodDecl 0x56331f52ab28 <line:190:5, col:38> col:21 erase 'Vector<NameDB *>::iterator (Vector<NameDB *>::iterator)' inline
| `-ParmVarDecl 0x56331f52aa38 <col:27, col:36> col:36 it 'Vector<NameDB *>::iterator':'NameDB **'
|-CXXMethodDecl 0x56331f52ad78 <line:191:5, col:49> col:21 erase 'Vector<NameDB *>::iterator (Vector<NameDB *>::iterator, Vector<NameDB *>::iterator)' inline
| |-ParmVarDecl 0x56331f52abf0 <col:27, col:36> col:36 a 'Vector<NameDB *>::iterator':'NameDB **'
| `-ParmVarDecl 0x56331f52ac68 <col:39, col:48> col:48 b 'Vector<NameDB *>::iterator':'NameDB **'
|-CXXMethodDecl 0x56331f52ae38 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x56331f52b098 <line:195:5, col:34> col:17 swap 'void (Vector<NameDB *> &)' inline
| `-ParmVarDecl 0x56331f52afa0 <col:22, col:33> col:33 x 'Vector<NameDB *> &'
`-CXXDestructorDecl 0x56331f52b168 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x56331f52b168

Layout: <CGRecordLayout
  LLVMType:%class.Vector.2 = type { %class.vector_memory.3 }
  NonVirtualBaseLLVMType:%class.Vector.2 = type { %class.vector_memory.3 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56331f51cf00 <../dummy_inc/click/nameinfo.hh:11:1, line:243:1> line:11:7 referenced class NameInfo definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56331f51d018 <col:1, col:7> col:7 implicit referenced class NameInfo
|-AccessSpecDecl 0x56331f51d0a8 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x56331f51d130 <line:16:5, col:14> col:5 NameInfo 'void ()'
|-CXXDestructorDecl 0x56331f51d220 <line:23:5, col:15> col:5 ~NameInfo 'void ()' noexcept-unevaluated 0x56331f51d220
|-CXXMethodDecl 0x56331f51d320 <line:29:5, col:35> col:17 static_initialize 'void ()' static
|-CXXMethodDecl 0x56331f51d3e0 <line:35:5, col:32> col:17 static_cleanup 'void ()' static
|-EnumDecl 0x56331f51d480 <line:38:5, line:63:5> line:38:10 DBType
| |-EnumConstantDecl 0x56331f51d580 <line:39:2, col:11> col:2 T_NONE 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x56331f51e2c0 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f51d560 <col:11> 'int' Int: 0
| |     `-IntegerLiteral 0x56331f51d540 <col:11> 'int' 0
| |-EnumConstantDecl 0x56331f51d610 <line:40:2, col:19> col:2 T_SCHEDULEINFO 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x56331f51e2d8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f51d5f0 <col:19> 'int' Int: 1
| |     `-IntegerLiteral 0x56331f51d5d0 <col:19> 'int' 1
| |-EnumConstantDecl 0x56331f51d6a0 <line:41:2, col:17> col:2 referenced T_ANNOTATION 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x56331f51e2f0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f51d680 <col:17> 'int' Int: 2
| |     `-IntegerLiteral 0x56331f51d660 <col:17> 'int' 2
| |-EnumConstantDecl 0x56331f51d730 <line:42:2, col:18> col:2 T_SCRIPT_INSN 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x56331f51e308 <col:18> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f51d710 <col:18> 'int' Int: 3
| |     `-IntegerLiteral 0x56331f51d6f0 <col:18> 'int' 3
| |-EnumConstantDecl 0x56331f51d7c0 <line:43:2, col:12> col:2 T_SIGNO 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x56331f51e320 <col:12> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f51d7a0 <col:12> 'int' Int: 4
| |     `-IntegerLiteral 0x56331f51d780 <col:12> 'int' 4
| |-EnumConstantDecl 0x56331f51d850 <line:44:2, col:15> col:2 T_SPINLOCK 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x56331f51e338 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f51d830 <col:15> 'int' Int: 5
| |     `-IntegerLiteral 0x56331f51d810 <col:15> 'int' 5
| |-EnumConstantDecl 0x56331f51d8e0 <line:45:2, col:20> col:2 T_ETHERNET_ADDR 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x56331f51e350 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f51d8c0 <col:20> 'int' Int: 16777217
| |     `-IntegerLiteral 0x56331f51d8a0 <col:20> 'int' 16777217
| |-EnumConstantDecl 0x56331f51d970 <line:46:2, col:14> col:2 T_IP_ADDR 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x56331f51e368 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f51d950 <col:14> 'int' Int: 67108865
| |     `-IntegerLiteral 0x56331f51d930 <col:14> 'int' 67108865
| |-EnumConstantDecl 0x56331f51da00 <line:47:2, col:16> col:2 T_IP_PREFIX 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x56331f51e380 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f51d9e0 <col:16> 'int' Int: 67108866
| |     `-IntegerLiteral 0x56331f51d9c0 <col:16> 'int' 67108866
| |-EnumConstantDecl 0x56331f51da90 <line:48:2, col:15> col:2 T_IP_PROTO 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x56331f51e398 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f51da70 <col:15> 'int' Int: 67108867
| |     `-IntegerLiteral 0x56331f51da50 <col:15> 'int' 67108867
| |-EnumConstantDecl 0x56331f51db20 <line:49:2, col:20> col:2 T_IPFILTER_TYPE 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x56331f51e3b0 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f51db00 <col:20> 'int' Int: 67108868
| |     `-IntegerLiteral 0x56331f51dae0 <col:20> 'int' 67108868
| |-EnumConstantDecl 0x56331f51dbb0 <line:50:2, col:14> col:2 T_TCP_OPT 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x56331f51e3c8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f51db90 <col:14> 'int' Int: 67108869
| |     `-IntegerLiteral 0x56331f51db70 <col:14> 'int' 67108869
| |-EnumConstantDecl 0x56331f51dc40 <line:51:2, col:25> col:2 T_IPREWRITER_PATTERN 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x56331f51e3e0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f51dc20 <col:25> 'int' Int: 67108870
| |     `-IntegerLiteral 0x56331f51dc00 <col:25> 'int' 67108870
| |-EnumConstantDecl 0x56331f51dcd0 <line:52:2, col:16> col:2 T_ICMP_TYPE 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x56331f51e3f8 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f51dcb0 <col:16> 'int' Int: 67174400
| |     `-IntegerLiteral 0x56331f51dc90 <col:16> 'int' 67174400
| |-EnumConstantDecl 0x56331f51dd60 <line:53:2, col:16> col:2 T_ICMP_CODE 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x56331f51e410 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f51dd40 <col:16> 'int' Int: 67174656
| |     `-IntegerLiteral 0x56331f51dd20 <col:16> 'int' 67174656
| |-EnumConstantDecl 0x56331f51ddf0 <line:54:2, col:14> col:2 T_IP_PORT 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x56331f51e428 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f51ddd0 <col:14> 'int' Int: 67239936
| |     `-IntegerLiteral 0x56331f51ddb0 <col:14> 'int' 67239936
| |-EnumConstantDecl 0x56331f51de80 <line:55:2, col:15> col:2 T_TCP_PORT 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x56331f51e440 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f51de60 <col:15> 'int' Int: 67239942
| |     `-IntegerLiteral 0x56331f51de40 <col:15> 'int' 67239942
| |-EnumConstantDecl 0x56331f51df10 <line:56:2, col:15> col:2 T_UDP_PORT 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x56331f51e458 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f51def0 <col:15> 'int' Int: 67239953
| |     `-IntegerLiteral 0x56331f51ded0 <col:15> 'int' 67239953
| |-EnumConstantDecl 0x56331f51dfa0 <line:57:2, col:19> col:2 T_IP_FIELDNAME 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x56331f51e470 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f51df80 <col:19> 'int' Int: 67305472
| |     `-IntegerLiteral 0x56331f51df60 <col:19> 'int' 67305472
| |-EnumConstantDecl 0x56331f51e030 <line:58:2, col:21> col:2 T_ICMP_FIELDNAME 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x56331f51e488 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f51e010 <col:21> 'int' Int: 67305473
| |     `-IntegerLiteral 0x56331f51dff0 <col:21> 'int' 67305473
| |-EnumConstantDecl 0x56331f51e0c0 <line:59:2, col:20> col:2 T_TCP_FIELDNAME 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x56331f51e4a0 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f51e0a0 <col:20> 'int' Int: 67305478
| |     `-IntegerLiteral 0x56331f51e080 <col:20> 'int' 67305478
| |-EnumConstantDecl 0x56331f51e150 <line:60:2, col:20> col:2 T_UDP_FIELDNAME 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x56331f51e4b8 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f51e130 <col:20> 'int' Int: 67305489
| |     `-IntegerLiteral 0x56331f51e110 <col:20> 'int' 67305489
| |-EnumConstantDecl 0x56331f51e1e0 <line:61:2, col:15> col:2 T_IP6_ADDR 'NameInfo::DBType'
| | `-ImplicitCastExpr 0x56331f51e4d0 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56331f51e1c0 <col:15> 'int' Int: 100663297
| |     `-IntegerLiteral 0x56331f51e1a0 <col:15> 'int' 100663297
| `-EnumConstantDecl 0x56331f51e270 <line:62:2, col:17> col:2 T_IP6_PREFIX 'NameInfo::DBType'
|   `-ImplicitCastExpr 0x56331f51e4e8 <col:17> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56331f51e250 <col:17> 'int' Int: 100663298
|       `-IntegerLiteral 0x56331f51e230 <col:17> 'int' 100663298
|-CXXMethodDecl 0x56331f51e7e8 <line:85:5, line:86:35> line:85:20 used getdb 'NameDB *(uint32_t, const Element *, size_t, bool)' static
| |-ParmVarDecl 0x56331f51e510 <col:26, col:35> col:35 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56331f51e588 <col:41, col:56> col:56 context 'const Element *'
| |-ParmVarDecl 0x56331f51e600 <line:86:5, col:12> col:12 value_size 'size_t':'unsigned long'
| `-ParmVarDecl 0x56331f51e678 <col:24, col:29> col:29 create 'bool'
|-CXXMethodDecl 0x56331f51ea08 <line:104:5, col:61> col:17 installdb 'void (NameDB *, const Element *)' static
| |-ParmVarDecl 0x56331f51e8b8 <col:27, col:35> col:35 db 'NameDB *'
| `-ParmVarDecl 0x56331f51e930 <col:39, col:54> col:54 context 'const Element *'
|-CXXMethodDecl 0x56331f51eb88 <line:112:5, col:39> col:17 used uninstalldb 'void (NameDB *)' static
| `-ParmVarDecl 0x56331f51eac8 <col:29, col:37> col:37 db 'NameDB *'
|-CXXMethodDecl 0x56331f51ef78 <line:127:5, line:128:65> line:127:17 used query 'bool (uint32_t, const Element *, const String &, void *, size_t)' static
| |-ParmVarDecl 0x56331f51ec40 <col:23, col:32> col:32 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56331f51ecb8 <col:38, col:53> col:53 context 'const Element *'
| |-ParmVarDecl 0x56331f51ed30 <line:128:9, col:23> col:23 name 'const String &'
| |-ParmVarDecl 0x56331f51edb0 <col:29, col:35> col:35 value_store 'void *'
| `-ParmVarDecl 0x56331f51ee28 <col:48, col:55> col:55 value_size 'size_t':'unsigned long'
|-CXXMethodDecl 0x56331f51f2f8 <line:147:5, line:148:46> line:147:17 query_int 'bool (uint32_t, const Element *, const String &, int32_t *)' static
| |-ParmVarDecl 0x56331f51f050 <col:27, col:36> col:36 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56331f51f0c8 <col:42, col:57> col:57 context 'const Element *'
| |-ParmVarDecl 0x56331f51f140 <line:148:6, col:20> col:20 name 'const String &'
| `-ParmVarDecl 0x56331f51f1b8 <col:26, col:35> col:35 value_store 'int32_t *'
|-CXXMethodDecl 0x56331f51f678 <line:151:5, line:152:47> line:151:17 query_int 'bool (uint32_t, const Element *, const String &, uint32_t *)' static
| |-ParmVarDecl 0x56331f51f3c8 <col:27, col:36> col:36 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56331f51f440 <col:42, col:57> col:57 context 'const Element *'
| |-ParmVarDecl 0x56331f51f4b8 <line:152:6, col:20> col:20 name 'const String &'
| `-ParmVarDecl 0x56331f51f530 <col:26, col:36> col:36 value_store 'uint32_t *'
|-CXXMethodDecl 0x56331f51f9f8 <line:167:5, line:168:43> line:167:19 used revquery 'String (uint32_t, const Element *, const void *, size_t)' static
| |-ParmVarDecl 0x56331f51f748 <col:28, col:37> col:37 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56331f51f7c0 <col:43, col:58> col:58 context 'const Element *'
| |-ParmVarDecl 0x56331f51f840 <line:168:7, col:19> col:19 value 'const void *'
| `-ParmVarDecl 0x56331f51f8b8 <col:26, col:33> col:33 value_size 'size_t':'unsigned long'
|-CXXMethodDecl 0x56331f51fcd8 <line:182:5, line:183:24> line:182:26 revquery_int 'String (uint32_t, const Element *, int32_t)' static inline
| |-ParmVarDecl 0x56331f51fac8 <col:39, col:48> col:48 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56331f51fb40 <col:54, col:69> col:69 context 'const Element *'
| `-ParmVarDecl 0x56331f51fbb8 <line:183:11, col:19> col:19 value 'int32_t':'int'
|-CXXMethodDecl 0x56331f5200d8 <line:202:5, line:203:66> line:202:24 used define 'bool (uint32_t, const Element *, const String &, const void *, size_t)' static inline
| |-ParmVarDecl 0x56331f51fda0 <col:31, col:40> col:40 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56331f51fe18 <col:46, col:61> col:61 context 'const Element *'
| |-ParmVarDecl 0x56331f51fe90 <line:203:10, col:24> col:24 name 'const String &'
| |-ParmVarDecl 0x56331f51ff10 <col:30, col:42> col:42 value 'const void *'
| `-ParmVarDecl 0x56331f51ff88 <col:49, col:56> col:56 value_size 'size_t':'unsigned long'
|-CXXMethodDecl 0x56331f520458 <line:220:5, line:221:40> line:220:24 define_int 'bool (uint32_t, const Element *, const String &, int32_t)' static inline
| |-ParmVarDecl 0x56331f5201b0 <col:35, col:44> col:44 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56331f520228 <col:50, col:65> col:65 context 'const Element *'
| |-ParmVarDecl 0x56331f5202a0 <line:221:7, col:21> col:21 name 'const String &'
| `-ParmVarDecl 0x56331f520318 <col:27, col:35> col:35 value 'int32_t':'int'
|-AccessSpecDecl 0x56331f520518 <line:230:3, col:10> col:3 private
|-FieldDecl 0x56331f52b250 <line:232:5, col:22> col:22 _namedb_roots 'Vector<NameDB *>':'Vector<NameDB *>'
|-FieldDecl 0x56331f52b350 <line:233:5, col:22> col:22 _namedbs 'Vector<NameDB *>':'Vector<NameDB *>'
|-CXXMethodDecl 0x56331f52b3e8 <line:235:5, col:73> col:20 install_dynamic_sentinel 'NameDB *()' inline
| `-CompoundStmt 0x56331f52bbc0 <col:47, col:73>
|   `-ReturnStmt 0x56331f52bbb0 <col:49, col:67>
|     `-CStyleCastExpr 0x56331f52bb88 <col:56, col:67> 'NameDB *' <BitCast>
|       `-CXXThisExpr 0x56331f52bb68 <col:67> 'NameInfo *' this
|-CXXMethodDecl 0x56331f52b748 <line:236:5, col:87> col:13 namedb 'NameDB *(uint32_t, size_t, const String &, NameDB *)'
| |-ParmVarDecl 0x56331f52b498 <col:20, col:29> col:29 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56331f52b510 <col:35, col:42> col:42 size 'size_t':'unsigned long'
| |-ParmVarDecl 0x56331f52b588 <col:48, col:62> col:62 prefix 'const String &'
| `-ParmVarDecl 0x56331f52b600 <col:70, col:78> col:78 installer 'NameDB *'
|-CXXConstructorDecl 0x56331f52b838 <line:11:7> col:7 implicit NameInfo 'void (const NameInfo &)' inline default noexcept-unevaluated 0x56331f52b838
| `-ParmVarDecl 0x56331f52b948 <col:7> col:7 'const NameInfo &'
`-CXXMethodDecl 0x56331f52b9e8 <col:7> col:7 implicit operator= 'NameInfo &(const NameInfo &)' inline default noexcept-unevaluated 0x56331f52b9e8
  `-ParmVarDecl 0x56331f52baf8 <col:7> col:7 'const NameInfo &'

Layout: <CGRecordLayout
  LLVMType:%class.NameInfo = type { %class.Vector.2, %class.Vector.2 }
  NonVirtualBaseLLVMType:%class.NameInfo = type { %class.Vector.2, %class.Vector.2 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56331f52bbd8 prev 0x56331f51cdb8 <../dummy_inc/click/nameinfo.hh:245:1, line:348:1> line:245:7 referenced class NameDB definition
|-DefinitionData polymorphic abstract has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-CXXRecordDecl 0x56331f52bcd0 <col:1, col:7> col:7 implicit referenced class NameDB
|-AccessSpecDecl 0x56331f52bd60 <col:16, col:22> col:16 public
|-CXXConstructorDecl 0x56331f52bfc8 <line:253:5, col:74> col:12 used NameDB 'void (uint32_t, const String &, size_t)' inline
| |-ParmVarDecl 0x56331f52bd98 <col:19, col:28> col:28 type 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56331f52be10 <col:34, col:48> col:48 context 'const String &'
| `-ParmVarDecl 0x56331f52be88 <col:57, col:64> col:64 value_size 'size_t':'unsigned long'
|-CXXDestructorDecl 0x56331f52c0d0 <line:259:5, line:261:5> line:259:13 used ~NameDB 'void () noexcept' virtual
| `-CompoundStmt 0x56331f52d758 <col:23, line:261:5>
|   `-CallExpr 0x56331f52d730 <line:260:2, col:28> 'void'
|     |-ImplicitCastExpr 0x56331f52d718 <col:2, col:12> 'void (*)(NameDB *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56331f52d6a8 <col:2, col:12> 'void (NameDB *)' lvalue CXXMethod 0x56331f51eb88 'uninstalldb' 'void (NameDB *)'
|     `-CXXThisExpr 0x56331f52d6d8 <col:24> 'NameDB *' this
|-CXXMethodDecl 0x56331f52c1f8 <line:264:5, line:266:5> line:264:14 type 'uint32_t () const'
| `-CompoundStmt 0x56331f52d7d8 <col:27, line:266:5>
|   `-ReturnStmt 0x56331f52d7c8 <line:265:2, col:9>
|     `-ImplicitCastExpr 0x56331f52d7b0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x56331f52d780 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_type 0x56331f52cfe0
|         `-CXXThisExpr 0x56331f52d770 <col:9> 'const NameDB *' implicit this
|-CXXMethodDecl 0x56331f52c2b8 <line:269:5, line:271:5> line:269:19 context 'const String &() const'
| `-CompoundStmt 0x56331f52d840 <col:35, line:271:5>
|   `-ReturnStmt 0x56331f52d830 <line:270:2, col:9>
|     `-MemberExpr 0x56331f52d800 <col:9> 'const String' lvalue ->_context 0x56331f52d040
|       `-CXXThisExpr 0x56331f52d7f0 <col:9> 'const NameDB *' implicit this
|-CXXMethodDecl 0x56331f52c3a8 <line:279:5, line:281:5> line:279:13 context_parent 'NameDB *() const'
| `-CompoundStmt 0x56331f52d8c0 <col:36, line:281:5>
|   `-ReturnStmt 0x56331f52d8b0 <line:280:2, col:9>
|     `-ImplicitCastExpr 0x56331f52d898 <col:9> 'NameDB *' <LValueToRValue>
|       `-MemberExpr 0x56331f52d868 <col:9> 'NameDB *const' lvalue ->_context_parent 0x56331f52d100
|         `-CXXThisExpr 0x56331f52d858 <col:9> 'const NameDB *' implicit this
|-CXXMethodDecl 0x56331f52c498 <line:284:5, line:286:5> line:284:12 value_size 'size_t () const'
| `-CompoundStmt 0x56331f52d940 <col:31, line:286:5>
|   `-ReturnStmt 0x56331f52d930 <line:285:2, col:9>
|     `-ImplicitCastExpr 0x56331f52d918 <col:9> 'size_t':'unsigned long' <LValueToRValue>
|       `-MemberExpr 0x56331f52d8e8 <col:9> 'const size_t':'const unsigned long' lvalue ->_value_size 0x56331f52d0a0
|         `-CXXThisExpr 0x56331f52d8d8 <col:9> 'const NameDB *' implicit this
|-CXXMethodDecl 0x56331f52c768 <line:295:5, col:78> col:18 query 'bool (const String &, void *, size_t)' virtual pure
| |-ParmVarDecl 0x56331f52c548 <col:24, col:38> col:38 name 'const String &'
| |-ParmVarDecl 0x56331f52c5c8 <col:44, col:50> col:50 value 'void *'
| `-ParmVarDecl 0x56331f52c640 <col:57, col:64> col:64 value_size 'size_t':'unsigned long'
|-CXXMethodDecl 0x56331f52c9c8 <line:305:5, col:65> col:20 revquery 'String (const void *, size_t)' virtual
| |-ParmVarDecl 0x56331f52c838 <col:29, col:41> col:41 value 'const void *'
| `-ParmVarDecl 0x56331f52c8b0 <col:48, col:55> col:55 value_size 'size_t':'unsigned long'
|-CXXMethodDecl 0x56331f52cca8 <line:315:5, col:81> col:18 used define 'bool (const String &, const void *, size_t)' virtual
| |-ParmVarDecl 0x56331f52ca88 <col:25, col:39> col:39 name 'const String &'
| |-ParmVarDecl 0x56331f52cb08 <col:45, col:57> col:57 value 'const void *'
| `-ParmVarDecl 0x56331f52cb80 <col:64, col:71> col:71 value_size 'size_t':'unsigned long'
|-CXXMethodDecl 0x56331f52cef8 <line:324:5, col:61> col:17 define_int 'bool (const String &, int32_t)' inline
| |-ParmVarDecl 0x56331f52cd70 <col:28, col:42> col:42 name 'const String &'
| `-ParmVarDecl 0x56331f52cde8 <col:48, col:56> col:56 value 'int32_t':'int'
|-AccessSpecDecl 0x56331f52cfa8 <line:332:3, col:10> col:3 private
|-FieldDecl 0x56331f52cfe0 <line:334:5, col:14> col:14 referenced _type 'uint32_t':'unsigned int'
|-FieldDecl 0x56331f52d040 <line:335:5, col:12> col:12 referenced _context 'String'
|-FieldDecl 0x56331f52d0a0 <line:336:5, col:12> col:12 referenced _value_size 'size_t':'unsigned long'
|-FieldDecl 0x56331f52d100 <line:337:5, col:13> col:13 referenced _context_parent 'NameDB *'
|-FieldDecl 0x56331f52d160 <line:338:5, col:13> col:13 _context_sibling 'NameDB *'
|-FieldDecl 0x56331f52d1c0 <line:339:5, col:13> col:13 _context_child 'NameDB *'
|-FieldDecl 0x56331f52d220 <line:340:5, col:15> col:15 _installed 'NameInfo *'
|-FriendDecl 0x56331f52d2c0 <line:346:5, col:18> col:12 'class NameInfo':'NameInfo'
|-CXXConstructorDecl 0x56331f52d328 <line:245:7> col:7 implicit NameDB 'void (const NameDB &)' inline default noexcept-unevaluated 0x56331f52d328
| `-ParmVarDecl 0x56331f52d438 <col:7> col:7 'const NameDB &'
`-CXXMethodDecl 0x56331f52d4d8 <col:7> col:7 implicit operator= 'NameDB &(const NameDB &)' inline default noexcept-unevaluated 0x56331f52d4d8
  `-ParmVarDecl 0x56331f52d5e8 <col:7> col:7 'const NameDB &'

Layout: <CGRecordLayout
  LLVMType:%class.NameDB = type { i32 (...)**, i32, %class.String, i64, %class.NameDB*, %class.NameDB*, %class.NameDB*, %class.NameInfo* }
  NonVirtualBaseLLVMType:%class.NameDB = type { i32 (...)**, i32, %class.String, i64, %class.NameDB*, %class.NameDB*, %class.NameDB*, %class.NameInfo* }
  IsZeroInitializable:1
  BitFields:[
]>
