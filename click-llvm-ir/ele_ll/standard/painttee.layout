
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564df5f9c9f8 prev 0x564df5f94198 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564df5f9caf0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x564df5f9cb80 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x564df5f9cbf8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x564df5f9ccb8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x564df5f9cd80 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x564df5f9cef8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x564df5f9ce30 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x564df5f9cfa0 <col:24>
| `-OptimizeNoneAttr 0x564df5f9cff8 <col:34>
|-CXXMethodDecl 0x564df5f9d040 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x564df5f9d2f8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x564df5f9d0f0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x564df5f9d168 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x564df5f9d1e8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x564df5f9d3b0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x564df5f9d3e8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x564df5f9d450 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x564df5f9d4d8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x564df5f9d7f8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x564df5f9d590 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x564df5f9d608 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x564df5f9d680 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x564df5f9d700 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x564df5f9d910 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x564df5fa5288 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x564df5fa5288
| `-ParmVarDecl 0x564df5fa5398 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x564df5fa5438 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x564df5fa5438
| `-ParmVarDecl 0x564df5fa5548 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x564df6072050 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564df5f8fa10 prev 0x564df5f8f790 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x564df5f8fb08 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x564df5f8fb98 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x564df5f8fbf8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x564df5f8fce8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x564df5f8fde8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x564df5f8ffb8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x564df5f8fe68 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x564df5f8fee0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x564df5f90148 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x564df5f90080 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x564df5f901f0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x564df5f90328 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x564df5f90260 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x564df5f904c8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x564df5f90408 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x564df5f90668 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x564df5f905a8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x564df5f90710 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x564df5f90810 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x564df5f908f0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f907f0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x564df5f907d0 <col:26> 'int' 1
| `-EnumConstantDecl 0x564df5f908a0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x564df5f90908 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564df5f90880 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x564df5f90860 <col:44> 'int' 2
|-CXXMethodDecl 0x564df5f90a50 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x564df5f90938 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x564df5f909b8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x564df5f90ba8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x564df5f90b18 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x564df5f90de8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x564df5f90c68 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x564df5f90ce0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x564df5f90e98 <col:20>
| `-OptimizeNoneAttr 0x564df5f90ef0 <col:30>
|-CXXMethodDecl 0x564df5f90ff8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x564df5f90f30 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x564df5f910a0 <col:20>
| `-OptimizeNoneAttr 0x564df5f910f8 <col:30>
|-CXXMethodDecl 0x564df5f91148 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x564df5f91210 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x564df5f91328 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x564df5f913b0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x564df5f91438 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x564df5f914c0 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x564df5f91548 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x564df5f915d8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x564df5f91698 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x564df5f91720 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x564df5f917a8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x564df5f91830 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x564df5f918b8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x564df5f91940 <line:67:5, col:39> col:23 used PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x564df5f919d0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x564df5f91a90 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x564df5f91b20 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x564df5f91c70 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x564df5f91bd8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x564df5f91e00 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x564df5f91d30 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x564df5f920b0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x564df5f91eb8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x564df5f91f38 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x564df5f91fb8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x564df5f92168 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x564df5f92270 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x564df5f92500 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f92250 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x564df5f92230 <col:33> 'int' 0
| |-EnumConstantDecl 0x564df5f92300 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x564df5f92518 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f922e0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x564df5f922c0 <col:32> 'int' 20
| |-EnumConstantDecl 0x564df5f92390 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x564df5f92530 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f92370 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x564df5f92350 <col:38> 'int' 90
| |-EnumConstantDecl 0x564df5f92420 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x564df5f92548 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f92400 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x564df5f923e0 <col:35> 'int' 100
| `-EnumConstantDecl 0x564df5f924b0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x564df5f92560 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564df5f92490 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x564df5f92470 <col:32> 'int' 2000
|-CXXMethodDecl 0x564df5f925a0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x564df5f929e0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x564df5f92850 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x564df5f928c8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x564df5f92ab0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x564df5f92c30 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x564df5f92b60 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x564df5f92e38 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x564df5f92ce8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x564df5f92d60 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x564df5f92f38 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x564df5f92fd8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x564df5f930a0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x564df5f93130 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x564df5f93360 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f93110 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x564df5f930f0 <col:36> 'int' EnumConstant 0x564df5f930a0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x564df5f93180 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x564df5f931d0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x564df5f93220 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x564df5f93270 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x564df5f932c0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x564df5f93310 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x564df5f93448 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x564df5f93388 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x564df5f93510 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x564df5f935d0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x564df5f93690 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x564df5f93750 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x564df5f93868 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x564df5f93930 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x564df5f93ab0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x564df5f939e0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x564df5f93bd8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x564df5f93dd8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x564df5f93c88 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x564df5f93d08 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x564df5fa1728 <col:54, line:127:5>
|   |-ParenExpr 0x564df5fa15d8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x564df5fa15a8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x564df5fa1298 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x564df5fa1270 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x564df5fa1258 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x564df5fa1240 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x564df5fa1210 <col:31> 'Router *' lvalue ->_router 0x564df5f9f0f0
|   |   |         `-CXXThisExpr 0x564df5fa1200 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x564df5fa12f8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564df5fa12d8 <col:48> 'int' 0
|   |   `-CallExpr 0x564df5fa1508 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x564df5fa14f0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564df5fa14d0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564df5aca090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564df5fa1548 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5fa1368 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x564df5fa1560 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5fa1388 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x564df5fa1578 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564df5fa13c0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x564df5fa1590 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564df5fa14b8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564df5fa14a0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564df5fa1458 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x564df5fa1670 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x564df5fa1608 <col:9> 'Router *' lvalue ->_router 0x564df5f9f0f0
|   | | `-CXXThisExpr 0x564df5fa15f8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x564df5fa1658 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x564df5fa1638 <col:19> 'Router *' lvalue ParmVar 0x564df5f93c88 'r' 'Router *'
|   `-BinaryOperator 0x564df5fa1708 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x564df5fa16a0 <col:9> 'int' lvalue ->_eindex 0x564df5f9f158
|     | `-CXXThisExpr 0x564df5fa1690 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x564df5fa16f0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x564df5fa16d0 <col:19> 'int' lvalue ParmVar 0x564df5f93d08 'eindex' 'int'
|-CXXMethodDecl 0x564df5f93f60 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x564df5f93e98 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x564df5f94030 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x564df5f940f8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x564df5f94198 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x564df5f943e8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x564df5f94260 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x564df5f942e0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x564df5f94498 <col:20>
| `-OptimizeNoneAttr 0x564df5f944f0 <col:30>
|-CXXMethodDecl 0x564df5f945f8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x564df5f94530 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x564df5f946a0 <col:20>
| `-OptimizeNoneAttr 0x564df5f946f8 <col:30>
|-CXXMethodDecl 0x564df5f947c8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x564df5f94738 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x564df5f94870 <col:20>
| `-OptimizeNoneAttr 0x564df5f948c8 <col:30>
|-CXXMethodDecl 0x564df5f94a58 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x564df5f94900 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x564df5f94980 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x564df5f94be8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x564df5f94b20 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x564df5f94d38 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x564df5f94ca8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x564df5f94e88 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x564df5f94df8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x564df5f94fd8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x564df5f94f48 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x564df5f95298 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x564df5f95090 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x564df5f95110 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x564df5f951b8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x564df5f95370 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x564df5f95430 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x564df5f95700 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x564df5f955b0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x564df5f95628 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x564df5f95828 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x564df5f95a00 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x564df5f958e0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x564df5f95960 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x564df5f95be8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x564df5f95ac8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x564df5f95b48 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x564df5f95f58 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x564df5f95ca8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x564df5f95d20 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x564df5f95da0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x564df5fa0d10 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x564df5fa0cf0 <col:106> 'int' 0
| `-ParmVarDecl 0x564df5f95e18 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x564df5fa0d48 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x564df5fa0d28 <col:126> 'int' 0
|-CXXMethodDecl 0x564df5f962f8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x564df5f96028 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x564df5f960c0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x564df5f96140 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x564df5f961b8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x564df5fa0d80 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x564df5fa0d60 <col:114> 'int' 0
|-CXXMethodDecl 0x564df5f96688 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x564df5f963d0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x564df5f96448 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x564df5f964c8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x564df5fa0d98 <col:96> 'int' 0
| `-ParmVarDecl 0x564df5f96540 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x564df5fa0dd8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x564df5fa0db8 <col:116> 'int' 0
|-CXXMethodDecl 0x564df5f96a08 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x564df5f96758 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x564df5f967d0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x564df5f96850 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x564df5fa0e10 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x564df5fa0df0 <col:109> 'int' 0
| `-ParmVarDecl 0x564df5f968c8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x564df5fa0e48 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x564df5fa0e28 <col:129> 'int' 0
|-CXXMethodDecl 0x564df5f96d88 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x564df5f96ad8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x564df5f96b50 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x564df5f96bd0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x564df5f96c48 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x564df5fa0e80 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x564df5fa0e60 <col:117> 'int' 0
|-CXXMethodDecl 0x564df5f97118 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x564df5f96e60 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564df5f96ed8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x564df5f96f58 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x564df5fa0e98 <col:99> 'int' 0
| `-ParmVarDecl 0x564df5f96fd0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x564df5fa0ed8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x564df5fa0eb8 <col:119> 'int' 0
|-CXXMethodDecl 0x564df5f97538 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x564df5f971e8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x564df5f97268 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x564df5f972e0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x564df5f97360 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x564df5fa0f10 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x564df5fa0ef0 <col:108> 'int' 0
| `-ParmVarDecl 0x564df5f973e0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x564df5fa0f48 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x564df5fa0f28 <col:141> 'int' 0
|-CXXMethodDecl 0x564df5f97958 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x564df5f97610 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x564df5f97690 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x564df5f97708 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x564df5f97788 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x564df5f97808 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x564df5fa0f60 <col:121> 'int' 0
|-CXXMethodDecl 0x564df5f97d88 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x564df5f97a38 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x564df5f97ab8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x564df5f97b30 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x564df5f97bb0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x564df5fa0f80 <col:98> 'int' 0
| `-ParmVarDecl 0x564df5f97c30 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x564df5fa0fa0 <col:123> 'int' 0
|-CXXMethodDecl 0x564df5f98050 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x564df5f97e60 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x564df5f97ee0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x564df5f97f60 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x564df5fa0fc0 <col:80> 'int' 0
|-EnumDecl 0x564df5f98108 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x564df5f98210 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x564df5f984a0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f981f0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x564df5f981d0 <col:42> 'int' 1
| |-EnumConstantDecl 0x564df5f982a0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x564df5f984b8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f98280 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x564df5f98260 <col:40> 'int' 2
| |-EnumConstantDecl 0x564df5f98330 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x564df5f984d0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f98310 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x564df5f982f0 <col:44> 'int' 4
| |-EnumConstantDecl 0x564df5f983c0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x564df5f984e8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f983a0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x564df5f98380 <col:36> 'int' 7
| `-EnumConstantDecl 0x564df5f98450 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x564df5f98500 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564df5f98430 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x564df5f98410 <col:34> 'int' 6
|-CXXMethodDecl 0x564df5f987b8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x564df5f98528 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x564df5f985c8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x564df5f98648 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x564df5f986c0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x564df5fa1078 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x564df5fa1060 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x564df5fa1048 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x564df5fa1028 <col:98, col:105> 'String' (CXXTemporary 0x564df5fa1028)
|           `-CXXTemporaryObjectExpr 0x564df5fa0ff0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x564df5f98a58 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x564df5f98888 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x564df5f98900 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x564df5f98978 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x564df5fa1128 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x564df5fa1110 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x564df5fa10f8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x564df5fa10d8 <col:94, col:101> 'String' (CXXTemporary 0x564df5fa10d8)
| |         `-CXXTemporaryObjectExpr 0x564df5fa10a0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x564df5fa1910 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x564df5fa1888 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x564df5fa1858 <col:9> '<bound member function type>' ->add_task_handlers 0x564df5f987b8
|     | `-CXXThisExpr 0x564df5fa1848 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x564df5fa18c8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x564df5fa17c8 <col:27> 'Task *' lvalue ParmVar 0x564df5f98888 'task' 'Task *'
|     |-ImplicitCastExpr 0x564df5fa18e0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x564df5fa17e8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x564df5f98900 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x564df5fa18f8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x564df5fa1808 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x564df5f98450 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x564df5fa1828 <col:62> 'const String' lvalue ParmVar 0x564df5f98978 'prefix' 'const String &'
|-CXXMethodDecl 0x564df5f98c68 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x564df5f98b20 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x564df5f98b98 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x564df5fa11d8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x564df5fa11c0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x564df5fa11a8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x564df5fa1188 <col:70, col:77> 'String' (CXXTemporary 0x564df5fa1188)
| |         `-CXXTemporaryObjectExpr 0x564df5fa1150 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x564df5fa1ae8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x564df5fa1a60 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x564df5fa1a30 <col:9> '<bound member function type>' ->add_task_handlers 0x564df5f987b8
|     | `-CXXThisExpr 0x564df5fa1a20 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x564df5fa1aa0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x564df5fa19a0 <col:27> 'Task *' lvalue ParmVar 0x564df5f98b20 'task' 'Task *'
|     |-ImplicitCastExpr 0x564df5fa1ab8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x564df5fa19c0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x564df5fa1ad0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x564df5fa19e0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x564df5f98450 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x564df5fa1a00 <col:57> 'const String' lvalue ParmVar 0x564df5f98b98 'prefix' 'const String &'
|-CXXMethodDecl 0x564df5f98f48 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x564df5f98d30 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564df5f98db0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564df5f98e28 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x564df5f991f8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x564df5f99018 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564df5f99098 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564df5f99118 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x564df5f994e8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x564df5f992c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564df5f99348 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564df5f993c0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x564df5f99798 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x564df5f995b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564df5f99638 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564df5f996b8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x564df5f99a48 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x564df5f99868 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564df5f998e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564df5f99968 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x564df5f99cf8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x564df5f99b18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564df5f99b98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564df5f99c10 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x564df5f99fa8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x564df5f99dc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564df5f99e48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564df5f99ec8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x564df5f9a2b8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x564df5f9a0d0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564df5f9a150 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564df5f9a1d0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x564df5f9a598 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x564df5f9a388 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564df5f9a408 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564df5f9a4b0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x564df5f9a878 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x564df5f9a668 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564df5f9a6e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564df5f9a790 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x564df5f9aae0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x564df5f9a948 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x564df5f9a9c8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x564df5f9aa40 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x564df5f9ad88 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x564df5f9abb0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x564df5f9ac30 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x564df5f9aca8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x564df5f9b038 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x564df5f9ae58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564df5f9aed8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564df5f9af58 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x564df5f9b2e8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x564df5f9b108 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564df5f9b188 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564df5f9b200 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x564df5f9b598 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x564df5f9b3b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564df5f9b438 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564df5f9b4b0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x564df5f9b868 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x564df5f9b668 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564df5f9b6e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564df5f9b788 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x564df5f9bb98 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x564df5f9b938 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564df5f9b9b8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x564df5f9ba30 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x564df5f9baa8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x564df5fa11f0 <col:93> 'bool' false
|-CXXMethodDecl 0x564df5f9bd80 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x564df5f9bc68 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x564df5f9bce8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x564df5f9bf58 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x564df5f9be40 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x564df5f9bec0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x564df5f9c238 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x564df5f9c018 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x564df5f9c090 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x564df5f9c110 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x564df5f9c188 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x564df5f9c528 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x564df5f9c308 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x564df5f9c380 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x564df5f9c400 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x564df5f9c478 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x564df5f9c760 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x564df5f9c600 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x564df5f9c680 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x564df5f9c948 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x564df5f9c828 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x564df5f9c8a8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x564df5f9c9f8 prev 0x564df5f94198 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x564df5f9caf0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x564df5f9cb80 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x564df5f9cbf8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x564df5f9ccb8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x564df5f9cd80 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x564df5f9cef8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x564df5f9ce30 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x564df5f9cfa0 <col:24>
| | `-OptimizeNoneAttr 0x564df5f9cff8 <col:34>
| |-CXXMethodDecl 0x564df5f9d040 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x564df5f9d2f8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x564df5f9d0f0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x564df5f9d168 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x564df5f9d1e8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x564df5f9d3b0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x564df5f9d3e8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x564df5f9d450 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x564df5f9d4d8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x564df5f9d7f8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x564df5f9d590 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x564df5f9d608 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x564df5f9d680 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x564df5f9d700 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x564df5f9d910 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x564df5fa5288 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x564df5fa5288
| | `-ParmVarDecl 0x564df5fa5398 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x564df5fa5438 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x564df5fa5438
| | `-ParmVarDecl 0x564df5fa5548 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x564df6072050 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x564df5f9d988 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x564df5f9da28 <col:38> "" ""
|-CXXMethodDecl 0x564df5f9dab8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x564df5f9db58 <col:44> "" ""
|-AccessSpecDecl 0x564df5f9dbc8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x564df5f9dbf0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x564df5f9dcf0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x564df5f9dd40 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564df5f9dcd0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x564df5f9dcb0 <col:27> 'int' 4
|-FieldDecl 0x564df5f9ddf8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x564df5f9dfa8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x564df5f9e060 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x564df5f9f0f0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x564df5f9f158 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x564df5f9f2a8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x564df5f9f1e8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x564df5f9f458 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x564df5f9f368 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x564df5f9f638 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x564df5f9f518 <col:20> col:23 'int'
| `-ParmVarDecl 0x564df5f9f598 <col:25> col:28 'int'
|-CXXMethodDecl 0x564df5f9f8e0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x564df5f9f700 <col:23> col:26 'int'
| |-ParmVarDecl 0x564df5f9f780 <col:28> col:31 'int'
| `-ParmVarDecl 0x564df5f9f7f8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x564df5f9f998 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x564df5f9fa60 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x564df5f9fab0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x564df5f9fb00 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x564df5f9fce0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x564df5f9fb90 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x564df5f9fc08 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x564df5f9ff88 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x564df5f9fda8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x564df5f9fe28 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x564df5f9fea0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x564df5fa01a8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x564df5fa0058 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x564df5fa00d8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x564df5fa04e0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x564df5fa0268 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x564df5fa02e8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x564df5fa0360 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x564df5fa03e0 <col:57> col:60 'int'
|-CXXMethodDecl 0x564df5fa06c8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x564df5fa05b0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x564df5fa0630 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x564df5fa0818 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x564df5fa0788 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x564df5fa0b98 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x564df5fa08d8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x564df5fa0958 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x564df5fa09d0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x564df5fa0a50 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x564df5fa0cb0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class PaintTee
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   uint8_t _anno
       109 |   uint8_t _color
           | [sizeof=112, dsize=110, align=8,
           |  nvsize=110, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564df5fa83f8 <../elements/standard/painttee.hh:31:1, line:49:1> line:31:7 class PaintTee definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x564df5fa8558 <col:1, col:7> col:7 implicit referenced class PaintTee
|-AccessSpecDecl 0x564df5fa85e8 <col:35, col:41> col:35 public
|-CXXConstructorDecl 0x564df5fa8670 <line:33:5, col:14> col:5 PaintTee 'void ()'
|-CXXMethodDecl 0x564df5fa8770 <line:35:5, col:57> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x564df5f91148 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x564df5fa9738 <col:36, col:57>
|   `-ReturnStmt 0x564df5fa9728 <col:38, col:45>
|     `-ImplicitCastExpr 0x564df5fa9710 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x564df5fa96f0 <col:45> 'const char [9]' lvalue "PaintTee"
|-CXXMethodDecl 0x564df5fa8838 <line:36:5, col:52> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x564df5f91210 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x564df5fa9798 <col:36, col:52>
|   `-ReturnStmt 0x564df5fa9788 <col:38, col:45>
|     `-ImplicitCastExpr 0x564df5fa9770 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x564df5fa9750 <col:45> 'const char [4]' lvalue "1/2"
|-CXXMethodDecl 0x564df5fa8900 <line:37:5, col:62> col:17 processing 'const char *() const'
| |-Overrides: [ 0x564df5f915d8 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x564df5fa97f8 <col:36, col:62>
|   `-ReturnStmt 0x564df5fa97e8 <col:38, col:45>
|     `-ImplicitCastExpr 0x564df5fa97d0 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x564df5fa97b0 <col:45> 'const char []' lvalue Var 0x564df5f91940 'PROCESSING_A_AH' 'const char []'
|-CXXMethodDecl 0x564df5fa8bd0 <line:39:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x564df5f929e0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x564df5fa8a80 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x564df5fa8af8 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x564df5fa8ca0 <line:40:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x564df5f92ab0 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x564df5fa8de0 <line:42:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x564df5f90328 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x564df5fa8d50 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x564df5fa8e88 <line:44:3, col:10> col:3 private
|-FieldDecl 0x564df5fa8ec0 <line:46:5, col:13> col:13 _anno 'uint8_t':'unsigned char'
|-FieldDecl 0x564df5fa8f20 <line:47:5, col:13> col:13 _color 'uint8_t':'unsigned char'
|-CXXConstructorDecl 0x564df5fa8f98 <line:31:7> col:7 implicit PaintTee 'void (const PaintTee &)' inline default_delete noexcept-unevaluated 0x564df5fa8f98
| `-ParmVarDecl 0x564df5fa90a8 <col:7> col:7 'const PaintTee &'
|-CXXConstructorDecl 0x564df5fa9148 <col:7> col:7 implicit PaintTee 'void (PaintTee &&)' inline default_delete noexcept-unevaluated 0x564df5fa9148
| `-ParmVarDecl 0x564df5fa9258 <col:7> col:7 'PaintTee &&'
|-CXXMethodDecl 0x564df5fa92f8 <col:7> col:7 implicit operator= 'PaintTee &(const PaintTee &)' inline default_delete noexcept-unevaluated 0x564df5fa92f8
| `-ParmVarDecl 0x564df5fa9408 <col:7> col:7 'const PaintTee &'
|-CXXMethodDecl 0x564df5fa9478 <col:7> col:7 implicit operator= 'PaintTee &(PaintTee &&)' inline default_delete noexcept-unevaluated 0x564df5fa9478
| `-ParmVarDecl 0x564df5fa9588 <col:7> col:7 'PaintTee &&'
`-CXXDestructorDecl 0x564df5fa9610 <col:7> col:7 implicit ~PaintTee 'void ()' inline default noexcept-unevaluated 0x564df5fa9610
  `-Overrides: [ 0x564df5f8fce8 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.PaintTee = type { %class.Element.base, i8, i8, [2 x i8] }
  NonVirtualBaseLLVMType:%class.PaintTee.base = type { %class.Element.base, i8, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564df5d638b0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x564df5d639c8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x564df5d63a68 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x564df5d63ac8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x564df5d63b28 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x564df5d63bd8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564df5d63ee0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564df5d63ff8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x564df5d640a0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x564df5d64108 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x564df5d64198 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x564df5d6a230 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x564df5d6a668 <col:12>
|-CXXConstructorDecl 0x564df5d6a338 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x564df5d6a448 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x564df5d640a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x564df5d6cbf0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x564df5d6cbc0 <col:12> 'const char *const' lvalue .data 0x564df5d640a0
| |     `-DeclRefExpr 0x564df5d6cba0 <col:12> 'const String::rep_t' lvalue ParmVar 0x564df5d6a448 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x564df5d64108 'length' 'int'
| | `-ImplicitCastExpr 0x564df5d6cc80 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x564df5d6cc50 <col:12> 'const int' lvalue .length 0x564df5d64108
| |     `-DeclRefExpr 0x564df5d6cc30 <col:12> 'const String::rep_t' lvalue ParmVar 0x564df5d6a448 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x564df5d64198 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x564df5d6cd10 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x564df5d6cce0 <col:12> 'String::memo_t *const' lvalue .memo 0x564df5d64198
| |     `-DeclRefExpr 0x564df5d6ccc0 <col:12> 'const String::rep_t' lvalue ParmVar 0x564df5d6a448 '' 'const String::rep_t &'
| `-CompoundStmt 0x564df5d6cd68 <col:12>
|-CXXConstructorDecl 0x564df5d6a4e8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x564df5d6a4e8
| `-ParmVarDecl 0x564df5d6a5f8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x564df5d6fb50 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x564df5d7b568 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x564df5d7b678 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x564df5d7bb90 <col:12>
|   |-BinaryOperator 0x564df5d7b9a8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x564df5d7b960 <col:12> 'const char *' lvalue ->data 0x564df5d640a0
|   | | `-CXXThisExpr 0x564df5d7b950 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x564df5d7b990 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x564df5d7b920 <col:12> 'const char *const' lvalue .data 0x564df5d640a0
|   |     `-DeclRefExpr 0x564df5d7b900 <col:12> 'const String::rep_t' lvalue ParmVar 0x564df5d7b678 '' 'const String::rep_t &'
|   |-BinaryOperator 0x564df5d7ba70 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x564df5d7ba28 <col:12> 'int' lvalue ->length 0x564df5d64108
|   | | `-CXXThisExpr 0x564df5d7ba18 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x564df5d7ba58 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x564df5d7b9e8 <col:12> 'const int' lvalue .length 0x564df5d64108
|   |     `-DeclRefExpr 0x564df5d7b9c8 <col:12> 'const String::rep_t' lvalue ParmVar 0x564df5d7b678 '' 'const String::rep_t &'
|   |-BinaryOperator 0x564df5d7bb38 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x564df5d7baf0 <col:12> 'String::memo_t *' lvalue ->memo 0x564df5d64198
|   | | `-CXXThisExpr 0x564df5d7bae0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x564df5d7bb20 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x564df5d7bab0 <col:12> 'String::memo_t *const' lvalue .memo 0x564df5d64198
|   |     `-DeclRefExpr 0x564df5d7ba90 <col:12> 'const String::rep_t' lvalue ParmVar 0x564df5d7b678 '' 'const String::rep_t &'
|   `-ReturnStmt 0x564df5d7bb80 <col:12>
|     `-UnaryOperator 0x564df5d7bb68 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564df5d7bb58 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x564df5d7b6e8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x564df5d7b6e8
  `-ParmVarDecl 0x564df5d7b7f8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564df5d5ae20 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x564df5d5af38 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x564df5d5afc8 <col:16, col:22> col:16 public
|-TypedefDecl 0x564df5d5b008 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x564df5a2efd0 'const char *'
|   `-QualType 0x564df5a2e521 'const char' const
|     `-BuiltinType 0x564df5a2e520 'char'
|-TypedefDecl 0x564df5d5b090 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x564df5d5b060 'String::const_iterator' sugar
|   |-Typedef 0x564df5d5b008 'const_iterator'
|   `-PointerType 0x564df5a2efd0 'const char *'
|     `-QualType 0x564df5a2e521 'const char' const
|       `-BuiltinType 0x564df5a2e520 'char'
|-TypedefDecl 0x564df5d5b200 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x564df5d5b170 'int (String::*)() const'
|   |-RecordType 0x564df5d5aeb0 'String'
|   | `-CXXRecord 0x564df5d5ae20 'String'
|   `-ParenType 0x564df5d5b110 'int () const' sugar
|     `-FunctionProtoType 0x564df5d2eca0 'int () const' const cdecl
|       `-BuiltinType 0x564df5a2e580 'int'
|-TypedefDecl 0x564df5d5b268 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x564df5b83880 'int64_t' sugar
|   |-Typedef 0x564df5a97390 'int64_t'
|   `-TypedefType 0x564df5a70630 '__int64_t' sugar
|     |-Typedef 0x564df5a70208 '__int64_t'
|     `-BuiltinType 0x564df5a2e5a0 'long'
|-TypedefDecl 0x564df5d5b2d0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x564df5b837a0 'uint64_t' sugar
|   |-Typedef 0x564df5a97530 'uint64_t'
|   `-TypedefType 0x564df5a706c0 '__uint64_t' sugar
|     |-Typedef 0x564df5a70278 '__uint64_t'
|     `-BuiltinType 0x564df5a2e640 'unsigned long'
|-TypedefDecl 0x564df5d5b360 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x564df5d5b330 'String::intmax_t' sugar
|   |-Typedef 0x564df5d5b268 'intmax_t'
|   `-TypedefType 0x564df5b83880 'int64_t' sugar
|     |-Typedef 0x564df5a97390 'int64_t'
|     `-TypedefType 0x564df5a70630 '__int64_t' sugar
|       |-Typedef 0x564df5a70208 '__int64_t'
|       `-BuiltinType 0x564df5a2e5a0 'long'
|-TypedefDecl 0x564df5d5b3f0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x564df5d5b3c0 'String::uintmax_t' sugar
|   |-Typedef 0x564df5d5b2d0 'uintmax_t'
|   `-TypedefType 0x564df5b837a0 'uint64_t' sugar
|     |-Typedef 0x564df5a97530 'uint64_t'
|     `-TypedefType 0x564df5a706c0 '__uint64_t' sugar
|       |-Typedef 0x564df5a70278 '__uint64_t'
|       `-BuiltinType 0x564df5a2e640 'unsigned long'
|-CXXConstructorDecl 0x564df5d5b4b0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x564df5d5b658 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x564df5d5b598 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x564df5d5b808 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x564df5d5b748 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x564df5d5b960 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x564df5d5b8d0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x564df5d5bb78 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x564df5d5ba28 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x564df5d5baa8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x564df5d5bd98 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x564df5d5bc48 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x564df5d5bcc8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x564df5d5bfb8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x564df5d5be68 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x564df5d5bee8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x564df5d5c1d8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x564df5d5c088 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x564df5d5c108 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x564df5d5c368 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x564df5d5c2a0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x564df5d5c4e8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x564df5d5c428 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x564df5d5c678 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x564df5d5c5b0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x564df5d5c7d0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x564df5d5c740 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x564df5d5c928 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x564df5d5c898 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x564df5d5ca80 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x564df5d5c9f0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x564df5d5cc08 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x564df5d5cb48 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x564df5d5cd98 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x564df5d5ccd0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x564df5d5cf28 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x564df5d5ce60 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x564df5d5d0b8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x564df5d5cff0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x564df5d5d1b0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x564df5d5d2d8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x564df5d5d458 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x564df5d5d390 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x564df5d5d5a8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x564df5d5d518 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x564df5d5d660 <col:63> "" ""
|-CXXMethodDecl 0x564df5d5d7a8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x564df5d5d6e8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x564df5d5d9b8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x564df5d5d868 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x564df5d5d8e8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x564df5d5dbd8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x564df5d5da80 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x564df5d5db00 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x564df5d5deb8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x564df5d5dc98 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x564df5d5dd18 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x564df5d69d00 <col:55> 'int' 10
| `-ParmVarDecl 0x564df5d5dd90 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x564df5d69d20 <col:76> 'bool' true
|-CXXMethodDecl 0x564df5d5e198 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x564df5d5df80 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x564df5d5e000 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x564df5d69d30 <col:56> 'int' 10
| `-ParmVarDecl 0x564df5d5e078 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x564df5d69d50 <col:77> 'bool' true
|-CXXMethodDecl 0x564df5d5e2a0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x564df5d5e368 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x564df5d5e430 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x564df5d5e4d0 <col:20>
| `-OptimizeNoneAttr 0x564df5d5e528 <col:30>
|-CXXConversionDecl 0x564df5d5e618 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x564df5d5e6e8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x564df5d5e7a8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x564df5d5e898 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x564df5d5e958 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x564df5d5ead8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x564df5d5ea10 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x564df5d5ec28 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x564df5d5eb98 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x564df5d5ed18 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x564df5d5edd8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x564df5d5f028 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x564df5d5ee90 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x564df5d5ef10 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x564df5d5f288 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x564df5d5f0f0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x564df5d5f170 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x564df5d5f358 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x564df5d5f568 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x564df5d5f410 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x564df5d5f490 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x564df5d5f788 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x564df5d5f630 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x564df5d5f6b0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x564df5d5f918 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x564df5d5f850 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x564df5d5fa08 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x564df5d5fb78 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x564df5d5fab8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x564df5d5fd88 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x564df5d5fc38 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x564df5d5fcb8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x564df5d5ffa0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x564df5d5fe48 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x564df5d5fec0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x564df5d60130 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x564df5d60060 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x564df5d60350 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x564df5d601f0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x564df5d60270 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x564df5d604a0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x564df5d60410 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x564df5d60678 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x564df5d60560 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x564df5d605e0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x564df5d607c8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x564df5d60738 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x564df5d609e0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x564df5d60880 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x564df5d60900 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x564df5d69d60 <col:39> 'int' 0
|-CXXMethodDecl 0x564df5d60c00 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x564df5d60aa0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x564df5d60b20 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x564df5d69d80 <col:48> 'int' 0
|-CXXMethodDecl 0x564df5d60de0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x564df5d60cc0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x564df5d60d40 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x564df5d69da0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x564df5d60eb0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x564df5d60f70 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x564df5d61030 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x564df5d610f0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x564df5d611b0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x564df5d61358 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x564df5d61260 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x564df5d614d8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x564df5d61410 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x564df5d616b0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x564df5d61598 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x564df5d61828 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x564df5d61768 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x564df5d61970 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x564df5d618e0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x564df5d61ac0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x564df5d61a30 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x564df5d61c98 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x564df5d61b80 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x564df5d61c00 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x564df5d61e78 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x564df5d61d60 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x564df5d61de0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x564df5d61fc8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x564df5d61f38 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x564df5d621d8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x564df5d62088 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x564df5d62108 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x564df5d62338 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x564df5d622a0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x564df5d62490 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x564df5d623f8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x564df5d62538 <col:57> "" ""
|-CXXMethodDecl 0x564df5d62648 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x564df5d625b8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x564df5d62798 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x564df5d62708 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x564df5d62918 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x564df5d62850 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x564df5d629e0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x564df5d62aa0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x564df5d62b60 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x564df5d62c00 <col:49> "" ""
|-CXXMethodDecl 0x564df5d62c90 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x564df5d62d50 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x564df5d62e40 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x564df5d62f08 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x564df5d62fc8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x564df5d63088 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x564df5d63180 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x564df5d63248 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x564df5d63310 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x564df5d634e8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x564df5d633c8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x564df5d63448 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x564df5d63710 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x564df5d635b0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x564df5d63630 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x564df5d63820 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x564df5d63888 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x564df5d638b0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x564df5d639c8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x564df5d63a68 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x564df5d63ac8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x564df5d63b28 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x564df5d63bd8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x564df5d63c40 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x564df5d63e78 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x564df5d63ec8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564df5d63e58 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x564df5d63d68 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x564df5d63d10 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x564df5d63d50 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x564df5d63d30 <col:32> 'int' 8
|-CXXRecordDecl 0x564df5d63ee0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x564df5d63ff8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x564df5d640a0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x564df5d64108 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x564df5d64198 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x564df5d6a230 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x564df5d6a668 <col:12>
| |-CXXConstructorDecl 0x564df5d6a338 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x564df5d6a448 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x564df5d640a0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x564df5d6cbf0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x564df5d6cbc0 <col:12> 'const char *const' lvalue .data 0x564df5d640a0
| | |     `-DeclRefExpr 0x564df5d6cba0 <col:12> 'const String::rep_t' lvalue ParmVar 0x564df5d6a448 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x564df5d64108 'length' 'int'
| | | `-ImplicitCastExpr 0x564df5d6cc80 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x564df5d6cc50 <col:12> 'const int' lvalue .length 0x564df5d64108
| | |     `-DeclRefExpr 0x564df5d6cc30 <col:12> 'const String::rep_t' lvalue ParmVar 0x564df5d6a448 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x564df5d64198 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x564df5d6cd10 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x564df5d6cce0 <col:12> 'String::memo_t *const' lvalue .memo 0x564df5d64198
| | |     `-DeclRefExpr 0x564df5d6ccc0 <col:12> 'const String::rep_t' lvalue ParmVar 0x564df5d6a448 '' 'const String::rep_t &'
| | `-CompoundStmt 0x564df5d6cd68 <col:12>
| |-CXXConstructorDecl 0x564df5d6a4e8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x564df5d6a4e8
| | `-ParmVarDecl 0x564df5d6a5f8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x564df5d6fb50 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x564df5d7b568 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x564df5d7b678 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x564df5d7bb90 <col:12>
| |   |-BinaryOperator 0x564df5d7b9a8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x564df5d7b960 <col:12> 'const char *' lvalue ->data 0x564df5d640a0
| |   | | `-CXXThisExpr 0x564df5d7b950 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x564df5d7b990 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x564df5d7b920 <col:12> 'const char *const' lvalue .data 0x564df5d640a0
| |   |     `-DeclRefExpr 0x564df5d7b900 <col:12> 'const String::rep_t' lvalue ParmVar 0x564df5d7b678 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x564df5d7ba70 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x564df5d7ba28 <col:12> 'int' lvalue ->length 0x564df5d64108
| |   | | `-CXXThisExpr 0x564df5d7ba18 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x564df5d7ba58 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x564df5d7b9e8 <col:12> 'const int' lvalue .length 0x564df5d64108
| |   |     `-DeclRefExpr 0x564df5d7b9c8 <col:12> 'const String::rep_t' lvalue ParmVar 0x564df5d7b678 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x564df5d7bb38 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x564df5d7baf0 <col:12> 'String::memo_t *' lvalue ->memo 0x564df5d64198
| |   | | `-CXXThisExpr 0x564df5d7bae0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x564df5d7bb20 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x564df5d7bab0 <col:12> 'String::memo_t *const' lvalue .memo 0x564df5d64198
| |   |     `-DeclRefExpr 0x564df5d7ba90 <col:12> 'const String::rep_t' lvalue ParmVar 0x564df5d7b678 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x564df5d7bb80 <col:12>
| |     `-UnaryOperator 0x564df5d7bb68 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x564df5d7bb58 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x564df5d7b6e8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x564df5d7b6e8
|   `-ParmVarDecl 0x564df5d7b7f8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x564df5d64210 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x564df5d64458 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x564df5d64278 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x564df5d642f8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x564df5d64370 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x564df5d6a1f0 <col:79, line:261:5>
|   |-BinaryOperator 0x564df5d69e68 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x564df5d69e00 <col:2, col:5> 'const char *' lvalue .data 0x564df5d640a0
|   | | `-MemberExpr 0x564df5d69dd0 <col:2> 'String::rep_t' lvalue ->_r 0x564df5d64210
|   | |   `-CXXThisExpr 0x564df5d69dc0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x564df5d69e50 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x564df5d69e30 <col:12> 'const char *' lvalue ParmVar 0x564df5d64278 'data' 'const char *'
|   |-BinaryOperator 0x564df5d69f30 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x564df5d69ec8 <col:2, col:5> 'int' lvalue .length 0x564df5d64108
|   | | `-MemberExpr 0x564df5d69e98 <col:2> 'String::rep_t' lvalue ->_r 0x564df5d64210
|   | |   `-CXXThisExpr 0x564df5d69e88 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x564df5d69f18 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x564df5d69ef8 <col:14> 'int' lvalue ParmVar 0x564df5d642f8 'length' 'int'
|   `-IfStmt 0x564df5d6a1d8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x564df5d6a050 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x564df5d6a038 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x564df5d6a018 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x564df5d69ff8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x564df5d69f90 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x564df5d64198
|     |       | `-MemberExpr 0x564df5d69f60 <col:7> 'String::rep_t' lvalue ->_r 0x564df5d64210
|     |       |   `-CXXThisExpr 0x564df5d69f50 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x564df5d69fe0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x564df5d69fc0 <col:17> 'String::memo_t *' lvalue ParmVar 0x564df5d64370 'memo' 'String::memo_t *'
|     `-CallExpr 0x564df5d6a1b0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x564df5d6a198 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x564df5d6a0a0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x564df5d52e88 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x564df5d6a108 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x564df5d63a68
|         `-ImplicitCastExpr 0x564df5d6a0f0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x564df5d6a0d0 <col:27> 'String::memo_t *' lvalue ParmVar 0x564df5d64370 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x564df5d64708 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x564df5d64528 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x564df5d645a8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x564df5d64620 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x564df5d64210 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x564df5d6a678 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x564df5d6a808 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x564df5d6a770 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x564df5d6a6e0 <col:2> '<bound member function type>' ->assign_memo 0x564df5d64458
|     | `-ImplicitCastExpr 0x564df5d6a7a8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x564df5d6a6d0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x564df5d6a7c0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x564df5d6a710 <col:14> 'const char *' lvalue ParmVar 0x564df5d64528 'data' 'const char *'
|     |-ImplicitCastExpr 0x564df5d6a7d8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x564df5d6a730 <col:20> 'int' lvalue ParmVar 0x564df5d645a8 'length' 'int'
|     `-ImplicitCastExpr 0x564df5d6a7f0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x564df5d6a750 <col:28> 'String::memo_t *' lvalue ParmVar 0x564df5d64620 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x564df5d64898 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x564df5d647d8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x564df5d6aa60 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x564df5d6a9e0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x564df5d6a830 <col:2> '<bound member function type>' ->assign_memo 0x564df5d64458
|     | `-CXXThisExpr 0x564df5d6a820 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x564df5d6aa18 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x564df5d6a8b0 <col:14, col:19> 'const char *' lvalue .data 0x564df5d640a0
|     |   `-MemberExpr 0x564df5d6a880 <col:14, col:16> 'String::rep_t' lvalue ._r 0x564df5d64210
|     |     `-DeclRefExpr 0x564df5d6a860 <col:14> 'const String' lvalue ParmVar 0x564df5d647d8 'x' 'const String &'
|     |-ImplicitCastExpr 0x564df5d6aa30 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x564df5d6a930 <col:25, col:30> 'int' lvalue .length 0x564df5d64108
|     |   `-MemberExpr 0x564df5d6a900 <col:25, col:27> 'String::rep_t' lvalue ._r 0x564df5d64210
|     |     `-DeclRefExpr 0x564df5d6a8e0 <col:25> 'const String' lvalue ParmVar 0x564df5d647d8 'x' 'const String &'
|     `-ImplicitCastExpr 0x564df5d6aa48 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x564df5d6a9b0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x564df5d64198
|         `-MemberExpr 0x564df5d6a980 <col:38, col:40> 'String::rep_t' lvalue ._r 0x564df5d64210
|           `-DeclRefExpr 0x564df5d6a960 <col:38> 'const String' lvalue ParmVar 0x564df5d647d8 'x' 'const String &'
|-CXXMethodDecl 0x564df5d64960 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x564df5d6b420 <col:31, line:278:5>
|   `-IfStmt 0x564df5d6b408 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x564df5d6ab00 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x564df5d6aae8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x564df5d6aab8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x564df5d64198
|     |     `-MemberExpr 0x564df5d6aa88 <col:6> 'String::rep_t' lvalue ->_r 0x564df5d64210
|     |       `-CXXThisExpr 0x564df5d6aa78 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x564df5d6b3e0 <col:15, line:277:2>
|       |-ParenExpr 0x564df5d6afb0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x564df5d6af80 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x564df5d6ac10 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x564df5d6abf8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x564df5d6abe0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x564df5d6aba0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x564df5d63a68
|       |   |       `-ImplicitCastExpr 0x564df5d6ab88 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x564df5d6ab58 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x564df5d64198
|       |   |           `-MemberExpr 0x564df5d6ab28 <col:27> 'String::rep_t' lvalue ->_r 0x564df5d64210
|       |   |             `-CXXThisExpr 0x564df5d6ab18 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x564df5d6ac70 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x564df5d6ac50 <col:54> 'int' 0
|       |   `-CallExpr 0x564df5d6aee0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x564df5d6aec8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x564df5d6ae48 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564df5aca090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x564df5d6af20 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x564df5d6ad58 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x564df5d6af38 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x564df5d6ad88 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x564df5d6af50 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x564df5d6adc0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x564df5d6af68 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x564df5d6ae30 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x564df5d6ae18 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x564df5d6ade0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x564df5d6b300 <line:274:6, line:275:22>
|       | |-CallExpr 0x564df5d6b1c0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x564df5d6b1a8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x564df5d6b120 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x564df5d542d0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x564df5d6b0f0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x564df5d63a68
|       | |   `-ImplicitCastExpr 0x564df5d6b0d8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x564df5d6b0a8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x564df5d64198
|       | |       `-MemberExpr 0x564df5d6b078 <col:40> 'String::rep_t' lvalue ->_r 0x564df5d64210
|       | |         `-CXXThisExpr 0x564df5d6b068 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x564df5d6b2c0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x564df5d6b2a8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x564df5d6b1e8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x564df5d69140 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x564df5d6b2e8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x564df5d6b248 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x564df5d64198
|       |       `-MemberExpr 0x564df5d6b218 <col:15> 'String::rep_t' lvalue ->_r 0x564df5d64210
|       |         `-CXXThisExpr 0x564df5d6b208 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x564df5d6b3c0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x564df5d6b358 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x564df5d64198
|         | `-MemberExpr 0x564df5d6b328 <col:6> 'String::rep_t' lvalue ->_r 0x564df5d64210
|         |   `-CXXThisExpr 0x564df5d6b318 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x564df5d6b3a8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x564df5d6b388 <col:16> 'int' 0
|-CXXMethodDecl 0x564df5d64bf8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x564df5d64a18 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x564df5d64a98 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x564df5d64b10 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x564df5d64cd0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x564df5d64f20 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x564df5d64d88 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x564df5d64e08 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x564df5d64e80 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x564df5d65108 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x564df5d64ff0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x564df5d65070 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x564df5d65208 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x564df5d6b4f8 <col:41, line:286:5>
|   `-ReturnStmt 0x564df5d6b4e8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x564df5d6b4b8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x564df5d6b480 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x564df5d6b468 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x564df5d6b448 <col:46> 'int' 1
|-CXXMethodDecl 0x564df5d654a8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x564df5d652c0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x564df5d65340 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x564df5d653c0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x564df5d69140 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x564df5d65570 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x564df5d69210 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x564df5d693e0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x564df5d692c8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x564df5d69348 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x564df5d694a0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x564df5d69568 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x564df5d69668 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x564df5d696e0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x564df5d69758 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x564df5d697c0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x564df5d698c0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x564df5d69910 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564df5d698a0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x564df5d69880 <col:22> 'int' 14
|-CXXMethodDecl 0x564df5d69b28 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x564df5d69940 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x564df5d699c0 <col:38> col:41 'int'
| `-ParmVarDecl 0x564df5d69a40 <col:43> col:46 'int'
|-FriendDecl 0x564df5d69c30 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x564df5d69cc0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x564df5e2bbe0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x564df5e2bdb8 prev 0x564df5e2bbe0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x564df5e2be48 <col:46, col:52> col:46 public
|-TypedefDecl 0x564df5e2be70 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x564df5a2e580 'int'
|-TypedefDecl 0x564df5e2d7d0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x564df5e2d780 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x564df5e2d760 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x564df5e2c088 'type'
|     `-SubstTemplateTypeParmType 0x564df5e2c050 'String' sugar
|       |-TemplateTypeParmType 0x564df5d1e6c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564df5d1e670 'T'
|       `-RecordType 0x564df5d5aeb0 'String'
|         `-CXXRecord 0x564df5d5ae20 'String'
|-TypedefDecl 0x564df5e2d888 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x564df5e2d850 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x564df5e2d830 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x564df5e2d7d0 'type'
|     `-ElaboratedType 0x564df5e2d780 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x564df5e2d760 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x564df5e2c088 'type'
|         `-SubstTemplateTypeParmType 0x564df5e2c050 'String' sugar
|           |-TemplateTypeParmType 0x564df5d1e6c0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x564df5d1e670 'T'
|           `-RecordType 0x564df5d5aeb0 'String'
|             `-CXXRecord 0x564df5d5ae20 'String'
|-CXXMethodDecl 0x564df5e2da08 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x564df5e2d918 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x564df5e2daf8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x564df5e2dbd8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x564df5e2dbd8
|-CXXMethodDecl 0x564df5e2dea8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x564df5e2ddb0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x564df5e2e0e8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x564df5e2df60 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x564df5e2dfd8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x564df5fd8610 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x564df5e2e1a8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x564df5e2e220 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x564df5fd8768 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x564df5fd8838 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x564df5fd8a88 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x564df5fd88f8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x564df5fd8970 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x564df5fd8ce8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x564df5fd8b58 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x564df5fd8bd0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x564df5fd8ea8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x564df5fd8db8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x564df5fd9068 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x564df5fd8f70 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x564df5fd9120 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x564df5fd91d0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x564df5fd9408 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x564df5fd9280 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x564df5fd92f8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x564df5fd96a8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x564df5fd95b0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x564df5fd9770 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x564df5fd97c0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x564df5fd9810 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x564df5f92650 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x564df5e2a648 prev 0x564df5f92650 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x564df5e2bb50 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x564df5e2bb00 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x564df5e2bae0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x564df5e2b990 'type'
|     `-SubstTemplateTypeParmType 0x564df5e2b820 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x564df5cf4470 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x564df5cf4418 'F'
|       `-RecordType 0x564df5e2b480 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x564df5e2b3a0 'typed_array_memory'
|-FieldDecl 0x564df5fd9860 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x564df5fd98b0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x564df5fd98e8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x564df5e2a6e0 'String' sugar
|   |-TemplateTypeParmType 0x564df5d2b9e0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x564df5d2b988 'T'
|   `-RecordType 0x564df5d5aeb0 'String'
|     `-CXXRecord 0x564df5d5ae20 'String'
|-TypedefDecl 0x564df5fd9978 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x564df5fd9940 'String &'
|   `-SubstTemplateTypeParmType 0x564df5e2a6e0 'String' sugar
|     |-TemplateTypeParmType 0x564df5d2b9e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x564df5d2b988 'T'
|     `-RecordType 0x564df5d5aeb0 'String'
|       `-CXXRecord 0x564df5d5ae20 'String'
|-TypedefDecl 0x564df5fd9a08 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x564df5fd99d0 'const String &'
|   `-QualType 0x564df5e2a6e1 'const String' const
|     `-SubstTemplateTypeParmType 0x564df5e2a6e0 'String' sugar
|       |-TemplateTypeParmType 0x564df5d2b9e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564df5d2b988 'T'
|       `-RecordType 0x564df5d5aeb0 'String'
|         `-CXXRecord 0x564df5d5ae20 'String'
|-TypedefDecl 0x564df5fd9a98 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x564df5fd9a60 'String *'
|   `-SubstTemplateTypeParmType 0x564df5e2a6e0 'String' sugar
|     |-TemplateTypeParmType 0x564df5d2b9e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x564df5d2b988 'T'
|     `-RecordType 0x564df5d5aeb0 'String'
|       `-CXXRecord 0x564df5d5ae20 'String'
|-TypedefDecl 0x564df5fd9b28 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x564df5fd9af0 'const String *'
|   `-QualType 0x564df5e2a6e1 'const String' const
|     `-SubstTemplateTypeParmType 0x564df5e2a6e0 'String' sugar
|       |-TemplateTypeParmType 0x564df5d2b9e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564df5d2b988 'T'
|       `-RecordType 0x564df5d5aeb0 'String'
|         `-CXXRecord 0x564df5d5ae20 'String'
|-TypedefDecl 0x564df5fda780 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x564df5fda730 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x564df5fda710 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x564df5fda648 'type'
|     `-LValueReferenceType 0x564df5fda610 'const String &'
|       `-QualType 0x564df5fda3b1 'const String' const
|         `-SubstTemplateTypeParmType 0x564df5fda3b0 'String' sugar
|           |-TemplateTypeParmType 0x564df5cfe3c0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x564df5cfe368 'T'
|           `-RecordType 0x564df5d5aeb0 'String'
|             `-CXXRecord 0x564df5d5ae20 'String'
|-TypedefDecl 0x564df5fda7e8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x564df5fd99d0 'const String &'
|   `-QualType 0x564df5e2a6e1 'const String' const
|     `-SubstTemplateTypeParmType 0x564df5e2a6e0 'String' sugar
|       |-TemplateTypeParmType 0x564df5d2b9e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564df5d2b988 'T'
|       `-RecordType 0x564df5d5aeb0 'String'
|         `-CXXRecord 0x564df5d5ae20 'String'
|-TypedefDecl 0x564df5fda840 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x564df5a2e580 'int'
|-TypedefDecl 0x564df5fda8a8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x564df5fd9a60 'String *'
|   `-SubstTemplateTypeParmType 0x564df5e2a6e0 'String' sugar
|     |-TemplateTypeParmType 0x564df5d2b9e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x564df5d2b988 'T'
|     `-RecordType 0x564df5d5aeb0 'String'
|       `-CXXRecord 0x564df5d5ae20 'String'
|-TypedefDecl 0x564df5fda910 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x564df5fd9af0 'const String *'
|   `-QualType 0x564df5e2a6e1 'const String' const
|     `-SubstTemplateTypeParmType 0x564df5e2a6e0 'String' sugar
|       |-TemplateTypeParmType 0x564df5d2b9e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564df5d2b988 'T'
|       `-RecordType 0x564df5d5aeb0 'String'
|         `-CXXRecord 0x564df5d5ae20 'String'
|-EnumDecl 0x564df5fda968 <line:134:5> col:5
| `-EnumConstantDecl 0x564df5fdaa60 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x564df5fdaa40 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x564df5d2d068 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x564df5d2d040 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x564df5d2d020 <col:40> 'int' 1
|-CXXConstructorDecl 0x564df5fdaae8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x564df5fdad78 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x564df5fdaba0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x564df5fdac40 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x564df5fdb008 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x564df5fdaef0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x564df5fdb2c8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x564df5fdb1b0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x564df5fdb5e0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x564df5fdb4c0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x564df5fdb8f0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x564df5fdb7d0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x564df5fdbbe0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x564df5fdba28 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x564df5fdbaa0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x564df5fdbd08 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x564df5fdbdb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x564df5fdbe10 <col:30> Inherited
|-CXXMethodDecl 0x564df5fdbe58 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x564df5fdbf08 <col:20> Inherited
| `-OptimizeNoneAttr 0x564df5fdbf60 <col:30> Inherited
|-CXXMethodDecl 0x564df5fdc028 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x564df5fdc0d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x564df5fdc130 <col:30> Inherited
|-CXXMethodDecl 0x564df5fdc178 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x564df5fdc228 <col:20> Inherited
| `-OptimizeNoneAttr 0x564df5fdc280 <col:30> Inherited
|-CXXMethodDecl 0x564df5fdc2c8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x564df5fdc378 <col:20> Inherited
| `-OptimizeNoneAttr 0x564df5fdc3d0 <col:30> Inherited
|-CXXMethodDecl 0x564df5fdc418 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x564df5fdc4c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x564df5fdc520 <col:30> Inherited
|-CXXMethodDecl 0x564df5fdc548 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x564df5fdc5f8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x564df5fdc6a8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x564df5fdc868 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x564df5fdc758 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x564df5fdc7d0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x564df5fdc9b8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x564df5fdc928 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x564df5fdcb68 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x564df5fdca70 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x564df5fdcc20 <col:20>
| `-OptimizeNoneAttr 0x564df5fdcc78 <col:30>
|-CXXMethodDecl 0x564df5fdcd98 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x564df5fdcca0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x564df5fdce50 <col:20>
| `-OptimizeNoneAttr 0x564df5fdcea8 <col:30>
|-CXXMethodDecl 0x564df5fdcf60 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x564df5fdced0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564df5fdd0a8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x564df5fdd018 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564df5fdd1d8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x564df5fdd2d8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x564df5fdd3a8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x564df5fdd478 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x564df5fdd5b8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x564df5fdd528 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564df5fdd700 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x564df5fdd670 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564df5fdd848 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x564df5fdd7b8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x564df5fdd900 <col:48> Inherited "" ""
|-CXXMethodDecl 0x564df5fdda00 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x564df5fdd970 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x564df5fddab8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x564df5fddb78 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x564df5fddc78 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x564df5fdddf8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x564df5fddd38 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x564df5fde5b8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x564df5fddeb0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x564df5fde518 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x564df5fde418 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x564df5fde698 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x564df5fde7e8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x564df5fde758 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x564df5fde8a0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x564df5fdeae8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x564df5fde960 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x564df5fde9d8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x564df5fdec78 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x564df5fdebb8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x564df5fdee88 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x564df5fded40 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x564df5fdedb8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x564df5fdef48 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x564df5fdf1a8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x564df5fdf0b0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x564df5fdf278 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x564df5fdf278

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564df60605e8 prev 0x564df5f10398 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x564df60606e0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x564df6060770 <col:22, col:28> col:22 public
|-EnumDecl 0x564df6060798 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x564df60608b8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x564df6060898 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x564df6060880 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x564df6060860 <col:14> 'int' 999
| |-EnumConstantDecl 0x564df6060960 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x564df6060940 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x564df6060928 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x564df6060908 <col:14> 'int' 1
| |-EnumConstantDecl 0x564df60609f0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x564df60609d0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x564df60609b0 <col:17> 'int' 0
| |-EnumConstantDecl 0x564df6060a80 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x564df6060a60 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x564df6060a40 <col:13> 'int' 1
| |-EnumConstantDecl 0x564df6060b10 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x564df6060af0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x564df6060ad0 <col:16> 'int' 2
| |-EnumConstantDecl 0x564df6060ba0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x564df6060b80 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x564df6060b60 <col:13> 'int' 3
| |-EnumConstantDecl 0x564df6060c30 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x564df6060c10 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x564df6060bf0 <col:15> 'int' 4
| |-EnumConstantDecl 0x564df6060cc0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x564df6060ca0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x564df6060c80 <col:14> 'int' 5
| |-EnumConstantDecl 0x564df6060d50 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x564df6060d30 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x564df6060d10 <col:12> 'int' 6
| `-EnumConstantDecl 0x564df6060de0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x564df6060dc0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x564df6060da0 <col:13> 'int' 7
|-VarDecl 0x564df6060e50 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x564df6060ed8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x564df6060f60 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x564df6060fe8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x564df6061070 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x564df60610f8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x564df6061180 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x564df6061208 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x564df6061290 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x564df6061318 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x564df60613a0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x564df60614a0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x564df60667a8 '_nerrors' 'int'
| | `-IntegerLiteral 0x564df6066f38 <line:128:13> 'int' 0
| `-CompoundStmt 0x564df6066fa8 <col:16, line:129:5>
|-CXXDestructorDecl 0x564df6061590 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x564df6066fb8 <col:29, line:132:5>
|-CXXMethodDecl 0x564df6061748 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x564df6061680 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x564df6061810 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x564df60618f8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x564df6067010 <col:44, line:161:5>
|   `-ReturnStmt 0x564df6067000 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x564df6066fe8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x564df6066fc8 <col:9> 'ErrorHandler *' lvalue Var 0x564df6066808 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x564df6061a38 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x564df60619a8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x564df6061b00 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x564df6067070 <col:43, line:173:5>
|   `-ReturnStmt 0x564df6067060 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x564df6067048 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x564df6067028 <col:9> 'ErrorHandler *' lvalue Var 0x564df6066880 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x564df6061bb8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x564df6061c38 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x564df6061d48 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x564df6061cb8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x564df6061e98 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x564df6061e08 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x564df6061ff0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x564df6061f58 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x564df6062148 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x564df60620b0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x564df60622a0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x564df6062208 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x564df60624b0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x564df6062358 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x564df60623d8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x564df6062688 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x564df6062570 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x564df60625f0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x564df60628a8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x564df6062748 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x564df60627c8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x564df6062a88 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x564df6062968 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x564df60629e8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x564df6062c68 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x564df6062b48 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x564df6062bc8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x564df6062df0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x564df6062d28 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x564df6062fc0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x564df6062ea8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x564df6062f20 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x564df60672c8 <col:57, line:234:5>
|   `-ReturnStmt 0x564df60672b8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x564df60672a0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x564df6067248 <col:9, col:41> 'int'
|         |-MemberExpr 0x564df6067218 <col:9> '<bound member function type>' ->xmessage 0x564df6062df0
|         | `-CXXThisExpr 0x564df6067208 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x564df6067288 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x564df6067270 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x564df60671e8 <col:18, col:40> 'String' (CXXTemporary 0x564df60671e8)
|               `-CallExpr 0x564df60671b0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x564df6067198 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x564df6067110 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x564df6064fb8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x564df6067130 <col:31> 'const String' lvalue ParmVar 0x564df6062f20 'str' 'const String &'
|                 `-DeclRefExpr 0x564df6067150 <col:36> 'const String' lvalue ParmVar 0x564df6062ea8 'anno' 'const String &'
|-CXXMethodDecl 0x564df60632a0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x564df6063080 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x564df6063100 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x564df6063178 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x564df6067558 <col:68, line:243:5>
|   `-ReturnStmt 0x564df6067548 <line:242:2, col:41>
|     `-ExprWithCleanups 0x564df6067530 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x564df60674d0 <col:9, col:41> 'int'
|         |-MemberExpr 0x564df60674a0 <col:9> '<bound member function type>' ->xmessage 0x564df6062fc0
|         | `-CXXThisExpr 0x564df6067490 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x564df6067368 <col:18> 'const String' lvalue ParmVar 0x564df6063080 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x564df6067518 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x564df6067500 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x564df6067470 <col:24, col:40> 'String' (CXXTemporary 0x564df6067470)
|               `-CXXMemberCallExpr 0x564df6067408 <col:24, col:40> 'String'
|                 |-MemberExpr 0x564df6067398 <col:24> '<bound member function type>' ->vformat 0x564df6064480
|                 | `-CXXThisExpr 0x564df6067388 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x564df6067438 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x564df60673c8 <col:32> 'const char *' lvalue ParmVar 0x564df6063100 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x564df6067450 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x564df60673e8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x564df6063178 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x564df6063540 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x564df6063368 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x564df60633e0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x564df6063458 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x564df6067898 <col:23, line:254:5>
|   `-ReturnStmt 0x564df6067888 <line:253:2, col:71>
|     `-ExprWithCleanups 0x564df6067870 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x564df6067810 <col:9, col:71> 'int'
|         |-MemberExpr 0x564df60677e0 <col:9> '<bound member function type>' ->xmessage 0x564df6062fc0
|         | `-CXXThisExpr 0x564df60677d0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x564df6067858 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x564df6067840 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x564df6067790 <col:18, col:65> 'String' (CXXTemporary 0x564df6067790)
|         |     `-CallExpr 0x564df6067728 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x564df6067710 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x564df60675f8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x564df6064fb8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x564df6067618 <col:31> 'const String' lvalue ParmVar 0x564df60633e0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x564df6067770 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x564df6067758 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x564df60676f0 <col:37, col:64> 'String' (CXXTemporary 0x564df60676f0)
|         |             `-CallExpr 0x564df60676c0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x564df60676a8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x564df6067638 <col:37> 'String (const String &)' lvalue CXXMethod 0x564df6065608 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x564df6067658 <col:56> 'const String' lvalue ParmVar 0x564df6063368 'landmark' 'const String &'
|         `-DeclRefExpr 0x564df60677b0 <col:68> 'const String' lvalue ParmVar 0x564df6063458 'str' 'const String &'
|-CXXMethodDecl 0x564df60638c0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x564df6063608 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x564df6063680 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x564df6063700 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x564df6063778 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x564df6067b50 <col:34, line:267:5>
|   `-ReturnStmt 0x564df6067b40 <line:266:2, col:51>
|     `-ExprWithCleanups 0x564df6067b28 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x564df6067ac0 <col:9, col:51> 'int'
|         |-MemberExpr 0x564df6067a90 <col:9> '<bound member function type>' ->xmessage 0x564df6063540
|         | `-CXXThisExpr 0x564df6067a80 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x564df6067938 <col:18> 'const String' lvalue ParmVar 0x564df6063608 'landmark' 'const String &'
|         |-DeclRefExpr 0x564df6067958 <col:28> 'const String' lvalue ParmVar 0x564df6063680 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x564df6067b10 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x564df6067af8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x564df6067a60 <col:34, col:50> 'String' (CXXTemporary 0x564df6067a60)
|               `-CXXMemberCallExpr 0x564df60679f8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x564df6067988 <col:34> '<bound member function type>' ->vformat 0x564df6064480
|                 | `-CXXThisExpr 0x564df6067978 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x564df6067a28 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x564df60679b8 <col:42> 'const char *' lvalue ParmVar 0x564df6063700 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x564df6067a40 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x564df60679d8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x564df6063778 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x564df60639d0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x564df6067bd0 <col:25, line:288:5>
|   `-ReturnStmt 0x564df6067bc0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x564df6067ba8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x564df6067b78 <col:9> 'const int' lvalue ->_nerrors 0x564df60667a8
|         `-CXXThisExpr 0x564df6067b68 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x564df6063be0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x564df6063a88 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x564df6063b08 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x564df6063ec8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x564df6063ca8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x564df6063d28 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x564df6063da0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x564df6064060 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x564df6063f98 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x564df60642a8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x564df6064120 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x564df6064198 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x564df6067e30 <col:58, line:357:5>
|   `-ReturnStmt 0x564df6067e20 <line:356:2, col:29>
|     `-ExprWithCleanups 0x564df6067e08 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x564df6067dd8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x564df6067dc0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x564df6067da0 <col:9, col:29> 'String' (CXXTemporary 0x564df6067da0)
|             `-CallExpr 0x564df6067d30 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x564df6067d18 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x564df6067c98 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x564df6063ec8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x564df6067c38 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x564df6067d68 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x564df6067c58 <col:21> 'const char *' lvalue ParmVar 0x564df6064120 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x564df6067d80 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x564df6067c78 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x564df6064198 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x564df6064480 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x564df6064370 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x564df60643e8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x564df60645d8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x564df6064548 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x564df6064720 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x564df6064690 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x564df60649c0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x564df60647d8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x564df6064858 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x564df60648d0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x564df6064b20 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x564df6064a90 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x564df6067f48 <col:37, line:441:5>
|   `-IfStmt 0x564df6067f30 <line:439:2, line:440:8>
|     |-BinaryOperator 0x564df6067eb8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x564df6067e88 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x564df6067e48 <col:6> 'int' lvalue ParmVar 0x564df6064a90 'level' 'int'
|     | `-ImplicitCastExpr 0x564df6067ea0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x564df6067e68 <col:15> 'ErrorHandler::Level' EnumConstant 0x564df6060ba0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x564df6067f18 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x564df6067ee8 <col:8> 'int' lvalue ->_nerrors 0x564df60667a8
|         `-CXXThisExpr 0x564df6067ed8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x564df6064be8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x564df6067fe0 <col:26, line:448:5>
|   `-BinaryOperator 0x564df6067fc0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x564df6067f70 <col:2> 'int' lvalue ->_nerrors 0x564df60667a8
|     | `-CXXThisExpr 0x564df6067f60 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x564df6067fa0 <col:13> 'int' 0
|-CXXMethodDecl 0x564df6064db0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x564df6064ca0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x564df6064d18 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x564df6064fb8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x564df6064e70 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x564df6064ee8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x564df6065268 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x564df6065078 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x564df60650f8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x564df6065178 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x564df6065320 <col:59> 0 0
|-CXXMethodDecl 0x564df60654b8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x564df6065398 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x564df6065418 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x564df6068650 <col:70, line:534:5>
|   |-DeclStmt 0x564df6068150 <line:528:2, col:20>
|   | |-VarDecl 0x564df6068008 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x564df6068070 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x564df60680a8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x564df6068110 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x564df6068220 <line:529:2, col:23>
|   | `-VarDecl 0x564df6068180 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x564df6068208 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x564df60681e8 <col:18> 'const char *' lvalue ParmVar 0x564df6065398 'begin' 'const char *'
|   |-DoStmt 0x564df60685e8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x564df6068518 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x564df6068500 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x564df60684e0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x564df6068238 <col:6> 'const char *' lvalue Var 0x564df6068180 'x' 'const char *'
|   | |     `-CallExpr 0x564df6068430 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x564df6068418 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x564df60683d0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x564df6066c80 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x564df6068498 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x564df6068480 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x564df60682f0 <col:20, col:27> 'String' (CXXTemporary 0x564df60682f0)
|   | |       |     `-CXXTemporaryObjectExpr 0x564df60682b8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x564df60684b0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x564df6068310 <col:30> 'const char *' lvalue Var 0x564df6068180 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x564df60684c8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x564df6068330 <col:33> 'const char *' lvalue ParmVar 0x564df6065418 'end' 'const char *'
|   | |       |-UnaryOperator 0x564df6068370 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x564df6068350 <col:39> 'String' lvalue Var 0x564df6068008 'name' 'String'
|   | |       |-UnaryOperator 0x564df60683a8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x564df6068388 <col:46> 'String' lvalue Var 0x564df60680a8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x564df60683c0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x564df60685d0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x564df60685b8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x564df6068598 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x564df6068568 <col:11> '<bound member function type>' .operator int (String::*)() const 0x564df5d5e618
|   |         `-ImplicitCastExpr 0x564df6068550 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x564df6068530 <col:11> 'String' lvalue Var 0x564df6068008 'name' 'String'
|   `-ReturnStmt 0x564df6068640 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x564df6068628 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x564df6068608 <col:9> 'const char *' lvalue Var 0x564df6068180 'x' 'const char *'
|-CXXMethodDecl 0x564df6065608 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x564df6065578 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x564df6068c58 <col:55, line:550:5>
|   `-IfStmt 0x564df6068c30 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x564df6068890 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x564df6068878 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x564df6068860 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x564df6068840 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x564df6068810 <col:6> '<bound member function type>' .operator int (String::*)() const 0x564df5d5e618
|     | |       `-DeclRefExpr 0x564df60686b0 <col:6> 'const String' lvalue ParmVar 0x564df6065578 'x' 'const String &'
|     | `-BinaryOperator 0x564df60687f0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x564df60687c0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x564df6068770 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x564df6068758 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x564df6068710 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x564df5d77e50 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x564df60686d0 <col:11> 'const String' lvalue ParmVar 0x564df6065578 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x564df60686f0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x564df60687d8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x564df60687a8 <col:19> 'char' 123
|     |-ReturnStmt 0x564df6068900 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x564df60688d0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x564df60688b0 <col:13> 'const String' lvalue ParmVar 0x564df6065578 'x' 'const String &'
|     `-IfStmt 0x564df6068c08 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x564df6068998 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x564df6068980 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x564df6068960 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x564df6068930 <col:11> '<bound member function type>' .operator int (String::*)() const 0x564df5d5e618
|       |       `-DeclRefExpr 0x564df6068910 <col:11> 'const String' lvalue ParmVar 0x564df6065578 'x' 'const String &'
|       |-ReturnStmt 0x564df6068b20 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x564df6068b08 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x564df6068ad8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x564df6068ac0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x564df6068aa0 <col:13, col:29> 'String' (CXXTemporary 0x564df6068aa0)
|       |         `-CallExpr 0x564df6068a50 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x564df6068a38 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x564df60689b0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x564df6064db0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x564df6068a80 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x564df60689d0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x564df60689f0 <col:28> 'const String' lvalue ParmVar 0x564df6065578 'x' 'const String &'
|       `-ReturnStmt 0x564df6068bf8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x564df6068be0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x564df6068bb0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x564df6068b98 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x564df6068b78 <col:13, col:20> 'String' (CXXTemporary 0x564df6068b78)
|                 `-CXXTemporaryObjectExpr 0x564df6068b40 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x564df60657d0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x564df60656c0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x564df6065738 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x564df6066f28 <col:71> 'bool' false
|-CXXRecordDecl 0x564df6065880 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x564df6065b78 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x564df6065b10 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x564df6065ab0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x564df6065a70 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x564df5d5aeb0 'String'
|       | `-CXXRecord 0x564df5d5ae20 'String'
|       |-BuiltinType 0x564df5a2e580 'int'
|       `-DecayedType 0x564df5f113e0 '__va_list_tag *' sugar
|         |-TypedefType 0x564df5f113b0 'va_list' sugar
|         | |-Typedef 0x564df5c4bf60 'va_list'
|         | `-TypedefType 0x564df5c4bf10 '__gnuc_va_list' sugar
|         |   |-Typedef 0x564df5b83b38 '__gnuc_va_list'
|         |   `-TypedefType 0x564df5b83aa0 '__builtin_va_list' sugar
|         |     |-Typedef 0x564df5a6fd38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x564df5a6fce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x564df5a2f2d0 '__va_list_tag'
|         |         `-CXXRecord 0x564df5a2f238 '__va_list_tag'
|         `-PointerType 0x564df5c51800 '__va_list_tag *'
|           `-RecordType 0x564df5a2f2d0 '__va_list_tag'
|             `-CXXRecord 0x564df5a2f238 '__va_list_tag'
|-EnumDecl 0x564df6065bd0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x564df6065cd0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564df6066250 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df6065cb0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x564df6065c90 <col:16> 'int' 1
| |-EnumConstantDecl 0x564df6065d80 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564df6066268 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df6065d40 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x564df6065d20 <col:21> 'int' 2
| |-EnumConstantDecl 0x564df6065e10 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564df6066280 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df6065df0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x564df6065dd0 <col:22> 'int' 4
| |-EnumConstantDecl 0x564df6065ea0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564df6066298 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df6065e80 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x564df6065e60 <col:17> 'int' 8
| |-EnumConstantDecl 0x564df6065f30 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564df60662b0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df6065f10 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x564df6065ef0 <col:22> 'int' 16
| |-EnumConstantDecl 0x564df6065fc0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564df60662c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df6065fa0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x564df6065f80 <col:19> 'int' 32
| |-EnumConstantDecl 0x564df6066050 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564df60662e0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df6066030 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x564df6066010 <col:17> 'int' 64
| |-EnumConstantDecl 0x564df60660e0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564df60662f8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df60660c0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x564df60660a0 <col:14> 'int' 128
| |-EnumConstantDecl 0x564df6066170 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564df6066310 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df6066150 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x564df6066130 <col:16> 'int' 256
| `-EnumConstantDecl 0x564df6066200 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x564df6066328 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564df60661e0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x564df60661c0 <col:12> 'int' 1024
|-CXXMethodDecl 0x564df6066538 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x564df6066350 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x564df60663f0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x564df60666c0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x564df60665f8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x564df6066768 <line:580:3, col:10> col:3 private
|-FieldDecl 0x564df60667a8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x564df6066808 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x564df6066880 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x564df6066c80 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x564df60668f8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x564df6066978 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x564df60669f8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x564df6066a70 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x564df6066ae8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x564df6066b60 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x564df6066da8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x564df6066da8
| `-ParmVarDecl 0x564df6066eb8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x564df6068fb8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x564df6068fb8
  `-ParmVarDecl 0x564df60690c8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564df5f10428 prev 0x564df5f550f8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564df5f10520 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x564df5f105b0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x564df5f106e8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x564df5f105e8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x564df5f11b10 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x564df5f11af0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x564df5f11688 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x564df5f11ba0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x564df5f11b60 <col:17> 'ErrorHandler *' lvalue ParmVar 0x564df5f105e8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x564df5f116f0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x564df5f11c20 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x564df5f11be0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x564df5f11750 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x564df5f11c60 <col:54> 'bool' false
| `-CompoundStmt 0x564df5f11d68 <col:61, line:38:5>
|   `-BinaryOperator 0x564df5f11d48 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x564df5f11ce0 <col:9> 'const Element *' lvalue ->_context 0x564df5f11628
|     | `-CXXThisExpr 0x564df5f11cd0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x564df5f11d30 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x564df5f11d10 <col:20> 'int' 0
|-CXXConstructorDecl 0x564df5f108f8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x564df5f107a8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x564df5f10820 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x564df5f11b48 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x564df5f11b28 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x564df5f11628 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x564df5f11dc0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x564df5f11d80 <col:20> 'const Element *' lvalue ParmVar 0x564df5f107a8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x564df5f11688 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x564df5f11e40 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x564df5f11e00 <col:36> 'ErrorHandler *' lvalue ParmVar 0x564df5f10820 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x564df5f116f0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x564df5f11ec0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x564df5f11e80 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x564df5f11750 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x564df5f11f00 <col:73> 'bool' false
| `-CompoundStmt 0x564df5f11f78 <col:80, line:46:5>
|-CXXMethodDecl 0x564df5f10a28 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x564df5f11ff0 <col:36, line:51:5>
|   `-ReturnStmt 0x564df5f11fe0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x564df5f11fc8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x564df5f11f98 <col:16> 'const Element *const' lvalue ->_context 0x564df5f11628
|         `-CXXThisExpr 0x564df5f11f88 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x564df5f10b18 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x564df5f12070 <col:32, line:57:5>
|   `-ReturnStmt 0x564df5f12060 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x564df5f12048 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x564df5f12018 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x564df5f11688
|         `-CXXThisExpr 0x564df5f12008 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x564df5f10bd8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x564df5f10d60 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x564df5f10c90 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x564df5f10eb0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x564df5f10e20 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x564df5f11000 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x564df5f10f70 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x564df5f11208 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x564df5f110b8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x564df5f11130 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x564df5f11538 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x564df5f112c8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x564df5f11348 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x564df5f11410 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x564df5f115f0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x564df5f11628 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x564df5f11688 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x564df5f116f0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x564df5f11750 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x564df5f117a0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x564df5f117a0
| `-ParmVarDecl 0x564df5f118b8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x564df5f11958 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x564df5f11958
| `-ParmVarDecl 0x564df5f11a68 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x564df60728a0 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x564df601ce30 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x564df601d008 prev 0x564df601ce30 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x564df601d098 <col:46, col:52> col:46 public
|-TypedefDecl 0x564df601d0c0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x564df5a2e580 'int'
|-TypedefDecl 0x564df601ec90 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x564df601ec40 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x564df601d570 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x564df601d470 'type'
|     `-TemplateSpecializationType 0x564df601d400 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x564df601d2e0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x564df601d2c0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x564df601d2a0 <col:24> 'unsigned long' 4
|       `-RecordType 0x564df601d3e0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x564df601d300 'char_array'
|-TypedefDecl 0x564df601ed48 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x564df601ed10 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x564df601ecf0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x564df601ec90 'type'
|     `-ElaboratedType 0x564df601ec40 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x564df601d570 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x564df601d470 'type'
|         `-TemplateSpecializationType 0x564df601d400 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x564df601d2e0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x564df601d2c0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x564df601d2a0 <col:24> 'unsigned long' 4
|           `-RecordType 0x564df601d3e0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x564df601d300 'char_array'
|-CXXMethodDecl 0x564df601eec8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x564df601edd8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x564df601efb8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x564df601f098 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x564df601f368 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x564df601f270 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x564df601f5a8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x564df601f420 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x564df601f498 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x564df601f778 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x564df601f668 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x564df601f6e0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x564df601f8d8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x564df601f9a8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x564df601fbf8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x564df601fa68 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x564df601fae0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x564df601fe58 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x564df601fcc8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x564df601fd40 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x564df6020018 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x564df601ff28 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x564df60201d8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x564df60200e0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x564df6027670 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x564df6027720 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x564df6027958 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x564df60277d0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x564df6027848 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x564df6027bf8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x564df6027b00 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x564df6027cc0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x564df6027d10 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x564df6027d60 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x564df601b838 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x564df601ba48 prev 0x564df601b838 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x564df601cda0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x564df601cd50 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x564df601cd30 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x564df601cbe0 'type'
|     `-SubstTemplateTypeParmType 0x564df601ca00 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x564df5cf3cf0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564df5cf3c98 'T'
|       `-RecordType 0x564df601c550 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x564df601c468 'sized_array_memory'
|-FieldDecl 0x564df6027db0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x564df6027e00 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x564df6027e38 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x564df601bae0 'int' sugar
|   |-TemplateTypeParmType 0x564df5d2b9e0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x564df5d2b988 'T'
|   `-BuiltinType 0x564df5a2e580 'int'
|-TypedefDecl 0x564df6027ec8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x564df6027e90 'int &'
|   `-SubstTemplateTypeParmType 0x564df601bae0 'int' sugar
|     |-TemplateTypeParmType 0x564df5d2b9e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x564df5d2b988 'T'
|     `-BuiltinType 0x564df5a2e580 'int'
|-TypedefDecl 0x564df6027f88 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x564df6027f50 'const int &'
|   `-QualType 0x564df601bae1 'const int' const
|     `-SubstTemplateTypeParmType 0x564df601bae0 'int' sugar
|       |-TemplateTypeParmType 0x564df5d2b9e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564df5d2b988 'T'
|       `-BuiltinType 0x564df5a2e580 'int'
|-TypedefDecl 0x564df6028018 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x564df6027fe0 'int *'
|   `-SubstTemplateTypeParmType 0x564df601bae0 'int' sugar
|     |-TemplateTypeParmType 0x564df5d2b9e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x564df5d2b988 'T'
|     `-BuiltinType 0x564df5a2e580 'int'
|-TypedefDecl 0x564df60280a8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x564df6028070 'const int *'
|   `-QualType 0x564df601bae1 'const int' const
|     `-SubstTemplateTypeParmType 0x564df601bae0 'int' sugar
|       |-TemplateTypeParmType 0x564df5d2b9e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564df5d2b988 'T'
|       `-BuiltinType 0x564df5a2e580 'int'
|-TypedefDecl 0x564df6028c90 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x564df6028c40 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x564df6028c20 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x564df6028bb0 'type'
|     `-SubstTemplateTypeParmType 0x564df6028970 'int' sugar
|       |-TemplateTypeParmType 0x564df5cfeaf0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564df5cfeaa0 'T'
|       `-BuiltinType 0x564df5a2e580 'int'
|-TypedefDecl 0x564df6028cf8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x564df6027f50 'const int &'
|   `-QualType 0x564df601bae1 'const int' const
|     `-SubstTemplateTypeParmType 0x564df601bae0 'int' sugar
|       |-TemplateTypeParmType 0x564df5d2b9e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564df5d2b988 'T'
|       `-BuiltinType 0x564df5a2e580 'int'
|-TypedefDecl 0x564df6028d50 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x564df5a2e580 'int'
|-TypedefDecl 0x564df6028db8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x564df6027fe0 'int *'
|   `-SubstTemplateTypeParmType 0x564df601bae0 'int' sugar
|     |-TemplateTypeParmType 0x564df5d2b9e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x564df5d2b988 'T'
|     `-BuiltinType 0x564df5a2e580 'int'
|-TypedefDecl 0x564df6028e20 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x564df6028070 'const int *'
|   `-QualType 0x564df601bae1 'const int' const
|     `-SubstTemplateTypeParmType 0x564df601bae0 'int' sugar
|       |-TemplateTypeParmType 0x564df5d2b9e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564df5d2b988 'T'
|       `-BuiltinType 0x564df5a2e580 'int'
|-EnumDecl 0x564df6028e78 <line:134:5> col:5
| `-EnumConstantDecl 0x564df6028f70 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x564df6028f50 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x564df5d2d068 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x564df5d2d040 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x564df5d2d020 <col:40> 'int' 1
|-CXXConstructorDecl 0x564df6028ff8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x564df6029248 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x564df60290b0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x564df6029150 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x564df6029508 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x564df60293f0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x564df60297c8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x564df60296b0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x564df6029b10 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x564df60299f0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x564df6029e20 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x564df6029d00 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x564df602a110 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x564df6029f58 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x564df6029fd0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x564df602a238 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x564df602a318 <col:20> Inherited
| `-OptimizeNoneAttr 0x564df602a370 <col:30> Inherited
|-CXXMethodDecl 0x564df602a3b8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x564df602a468 <col:20> Inherited
| `-OptimizeNoneAttr 0x564df602a4c0 <col:30> Inherited
|-CXXMethodDecl 0x564df602a588 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x564df602a638 <col:20> Inherited
| `-OptimizeNoneAttr 0x564df602a690 <col:30> Inherited
|-CXXMethodDecl 0x564df602a6d8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x564df602a788 <col:20> Inherited
| `-OptimizeNoneAttr 0x564df602a7e0 <col:30> Inherited
|-CXXMethodDecl 0x564df602a828 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x564df602a8d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x564df602a930 <col:30> Inherited
|-CXXMethodDecl 0x564df602a978 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x564df602aa28 <col:20> Inherited
| `-OptimizeNoneAttr 0x564df602aa80 <col:30> Inherited
|-CXXMethodDecl 0x564df602aaa8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x564df602ab58 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x564df602ac08 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x564df602adc8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x564df602acb8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x564df602ad30 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x564df602af18 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x564df602ae88 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x564df602b0c8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x564df602afd0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x564df602b180 <col:20>
| `-OptimizeNoneAttr 0x564df602b1d8 <col:30>
|-CXXMethodDecl 0x564df602b2f8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x564df602b200 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x564df602b3b0 <col:20>
| `-OptimizeNoneAttr 0x564df602b408 <col:30>
|-CXXMethodDecl 0x564df602b4c0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x564df602b430 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564df602b608 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x564df602b578 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564df602b738 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x564df602b868 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x564df602b938 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x564df602ba08 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x564df602bb48 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x564df602bab8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564df602bc90 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x564df602bc00 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564df602bdd8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x564df602bd48 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x564df602be90 <col:48> Inherited "" ""
|-CXXMethodDecl 0x564df602bf90 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x564df602bf00 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x564df602c048 <col:60> Inherited "" ""
|-CXXMethodDecl 0x564df602c108 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x564df602c208 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x564df602c388 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x564df602c2c8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x564df602cb48 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x564df602c440 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x564df602caa8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x564df602c9a8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x564df602cc28 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x564df602cd78 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x564df602cce8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x564df602ce30 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x564df602d078 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x564df602cef0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x564df602cf68 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x564df602d238 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x564df602d148 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x564df602d488 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x564df602d300 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x564df602d378 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x564df602d548 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x564df602d7a8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x564df602d6b0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x564df602d878 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564df60199a8 prev 0x564df5ffb5f8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x564df6019aa0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x564df6019b90 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x564df603f5d0 <col:16, line:828:9>
|-CXXDestructorDecl 0x564df6019c80 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x564df603f5e0 <col:25, line:830:9>
|-CXXMethodDecl 0x564df6019d80 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x564df6019e30 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x564df6019ed8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x564df6019ed8
| `-ParmVarDecl 0x564df6019fe8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x564df601a7a8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x564df601a7a8
  `-ParmVarDecl 0x564df601a8b8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564df5ffb410 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x564df5ffb568 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x564df5ffb5f8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x564df5ffb6b0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x564df5ffb7b8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x564df5ffb6e8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x564df602ee38 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x564df602ee18 <col:31> 'int' 0
|-CXXConstructorDecl 0x564df5ffbad8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x564df5ffb950 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x564df5ffb9c8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x564df602ee70 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x564df602ee50 <col:59> 'int' 0
|-CXXConstructorDecl 0x564df5ffbcb0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x564df5ffbba0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x564df5ffbc18 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x564df602eea8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x564df602ee88 <col:55> 'int' 0
|-CXXConstructorDecl 0x564df5ffc068 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x564df5ffbe50 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x564df5ffbec8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x564df5ffbf40 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x564df602eee0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x564df602eec0 <col:31> 'int' 0
|-CXXConstructorDecl 0x564df5ffc228 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x564df5ffc168 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x564df5ffc320 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x564df5ffc508 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x564df5ffc410 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x564df5ffc5f8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x564df602f290 <col:24, line:291:5>
|   `-ReturnStmt 0x564df602f280 <line:290:9, col:79>
|     `-BinaryOperator 0x564df602f260 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x564df602f138 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x564df602f090 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x564df602f070 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x564df602ef68 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x564df602ef50 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x564df602ef38 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x564df602ef08 <col:18> 'Vector<String> *const' lvalue ->_conf 0x564df601b7d0
|       | |   |       `-CXXThisExpr 0x564df602eef8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x564df602f058 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x564df602f040 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x564df602f008 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x564df602efd8 <col:28, col:35> '<bound member function type>' ->size 0x564df5fdc548
|       | |           `-ImplicitCastExpr 0x564df602f028 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x564df602efc0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x564df602ef90 <col:28> 'Vector<String> *const' lvalue ->_conf 0x564df601b7d0
|       | |                 `-CXXThisExpr 0x564df602ef80 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x564df602f120 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x564df602f108 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x564df602f0f0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x564df602f0c0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x564df602d9c0
|       |         `-CXXThisExpr 0x564df602f0b0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x564df602f240 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x564df602f228 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x564df602f210 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x564df602f1d0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x564df602f1b8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x564df602f168 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x564df602da70
|         |     |   `-CXXThisExpr 0x564df602f158 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x564df602f198 <col:73> 'int' 0
|         `-IntegerLiteral 0x564df602f1f0 <col:79> 'int' 0
|-CXXMethodDecl 0x564df5ffc6b8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x564df602f468 <col:32, line:296:5>
|   `-ReturnStmt 0x564df602f458 <line:295:9, col:49>
|     `-BinaryOperator 0x564df602f438 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x564df602f318 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x564df602f300 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x564df602f2e8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x564df602f2b8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x564df602d9c0
|       |       `-CXXThisExpr 0x564df602f2a8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x564df602f418 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x564df602f400 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x564df602f3e8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x564df602f3a8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x564df602f390 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x564df602f340 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x564df602da70
|         |     |   `-CXXThisExpr 0x564df602f330 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x564df602f370 <col:43> 'int' 0
|         `-IntegerLiteral 0x564df602f3c8 <col:49> 'int' 0
|-CXXMethodDecl 0x564df5ffc7a8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x564df6030fe0 <col:19, line:306:5>
|   |-IfStmt 0x564df602f598 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x564df602f4d8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x564df602f4c0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x564df602f490 <col:13> 'Vector<String> *' lvalue ->_conf 0x564df601b7d0
|   | |     `-CXXThisExpr 0x564df602f480 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x564df602f578 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x564df602f548 <col:13, col:20> '<bound member function type>' ->clear 0x564df5fdef48
|   |     `-ImplicitCastExpr 0x564df602f530 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x564df602f500 <col:13> 'Vector<String> *' lvalue ->_conf 0x564df601b7d0
|   |         `-CXXThisExpr 0x564df602f4f0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x564df602f620 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x564df602f5f0 <col:9, col:16> '<bound member function type>' .clear 0x564df602d548
|   |   `-MemberExpr 0x564df602f5c0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x564df602d960
|   |     `-CXXThisExpr 0x564df602f5b0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x564df6030fd0 <line:305:9, col:17>
|     `-UnaryOperator 0x564df602f650 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564df602f640 <col:17> 'Args *' this
|-CXXMethodDecl 0x564df5ffca28 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x564df5ffc930 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x564df5ffcba8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x564df5ffcae0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x564df5ffcf28 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x564df5ffcc50 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x564df5ffce88 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x564df5ffccf8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x564df5ffcd70 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x564df6031300 <col:67, line:327:5>
|     |-WhileStmt 0x564df60312b0 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x564df60310c8 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x564df6031048 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x564df5f4d5c8 0x564df5d96ba8 0x564df5d96880 0x564df5d88060 0x564df5d87d10 0x564df5d87600 0x564df5d59f70 0x564df5ce6430
|     | | |-DeclRefExpr 0x564df6031008 <col:16> 'Iter' lvalue ParmVar 0x564df5ffccf8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x564df6031028 <col:25> 'Iter' lvalue ParmVar 0x564df5ffcd70 'end' 'Iter'
|     | `-CompoundStmt 0x564df6031290 <col:30, line:325:9>
|     |   |-CallExpr 0x564df6031230 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x564df6031110 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x564df6031200 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x564df6031190 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564df5f52748 0x564df5f52368 0x564df5f51f98 0x564df5f51bb8 0x564df5f517d8 0x564df5f51408
|     |   |   `-DeclRefExpr 0x564df6031170 <col:24> 'Iter' lvalue ParmVar 0x564df5ffccf8 'begin' 'Iter'
|     |   `-UnaryOperator 0x564df6031278 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x564df6031258 <col:15> 'Iter' lvalue ParmVar 0x564df5ffccf8 'begin' 'Iter'
|     `-ReturnStmt 0x564df60312f0 <line:326:9, col:17>
|       `-UnaryOperator 0x564df60312d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564df60312c8 <col:17> 'Args *' this
|-CXXMethodDecl 0x564df5ffd030 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x564df5ffcfa0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x564df5ffd178 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x564df5ffd0e8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x564df5ffd240 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x564df60313e0 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x564df6031380 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x564df6031330 <col:9> '<bound member function type>' ->reset_from 0x564df602dde8
|   | | `-CXXThisExpr 0x564df6031320 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x564df6031360 <col:20> 'int' 0
|   `-ReturnStmt 0x564df60313d0 <line:352:9, col:17>
|     `-UnaryOperator 0x564df60313b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564df60313a8 <col:17> 'Args *' this
|-VarDecl 0x564df5ffd2f8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x564df5ffd360 <col:38> 'int' 1
|-VarDecl 0x564df5ffd3f0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x564df5ffd458 <col:39> 'int' 2
|-VarDecl 0x564df5ffd4e8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x564df5ffd550 <col:39> 'int' 4
|-VarDecl 0x564df5ffd5e0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x564df5ffd648 <col:39> 'int' 8
|-FunctionTemplateDecl 0x564df5ffd9c8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x564df5ffd6c0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x564df5ffd928 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x564df5ffd770 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df5ffd818 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x564df6031538 <col:43, line:371:5>
|     `-ReturnStmt 0x564df6031528 <line:370:9, col:34>
|       `-CallExpr 0x564df60314f0 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df6031410 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df6031490 <col:21> 'const char *' lvalue ParmVar 0x564df5ffd770 'keyword' 'const char *'
|         |-IntegerLiteral 0x564df60314b0 <col:30> 'int' 0
|         `-DeclRefExpr 0x564df60314d0 <col:33> 'T' lvalue ParmVar 0x564df5ffd818 'x' 'T &'
|-FunctionTemplateDecl 0x564df5ffdcf8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x564df5ffda30 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x564df5ffdc58 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x564df5ffdae0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df5ffdb88 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x564df6031688 <col:45, line:375:5>
|     `-ReturnStmt 0x564df6031678 <line:374:9, col:42>
|       `-CallExpr 0x564df6031640 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df6031560 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df60315e0 <col:21> 'const char *' lvalue ParmVar 0x564df5ffdae0 'keyword' 'const char *'
|         |-DeclRefExpr 0x564df6031600 <col:30> 'const int' lvalue Var 0x564df5ffd2f8 'mandatory' 'const int'
|         `-DeclRefExpr 0x564df6031620 <col:41> 'T' lvalue ParmVar 0x564df5ffdb88 'x' 'T &'
|-FunctionTemplateDecl 0x564df5ffe028 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x564df5ffdd60 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x564df5ffdf88 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x564df5ffde10 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df5ffdeb8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x564df60317d8 <col:45, line:379:5>
|     `-ReturnStmt 0x564df60317c8 <line:378:9, col:43>
|       `-CallExpr 0x564df6031790 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df60316b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df6031730 <col:21> 'const char *' lvalue ParmVar 0x564df5ffde10 'keyword' 'const char *'
|         |-DeclRefExpr 0x564df6031750 <col:30> 'const int' lvalue Var 0x564df5ffd3f0 'positional' 'const int'
|         `-DeclRefExpr 0x564df6031770 <col:42> 'T' lvalue ParmVar 0x564df5ffdeb8 'x' 'T &'
|-FunctionTemplateDecl 0x564df5ffe358 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x564df5ffe090 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x564df5ffe2b8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x564df5ffe140 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x564df5ffe1e8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x564df60319d8 <col:46, line:383:5>
| |   `-ReturnStmt 0x564df60319c8 <line:382:9, col:55>
| |     `-CallExpr 0x564df6031990 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x564df6031800 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x564df6031880 <col:21> 'const char *' lvalue ParmVar 0x564df5ffe140 'keyword' 'const char *'
| |       |-BinaryOperator 0x564df6031950 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x564df6031900 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x564df60318e0 <col:30> 'const int' lvalue Var 0x564df5ffd2f8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x564df6031938 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x564df6031918 <col:42> 'const int' lvalue Var 0x564df5ffd3f0 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x564df6031970 <col:54> 'T' lvalue ParmVar 0x564df5ffe1e8 'x' 'T &'
| `-CXXMethodDecl 0x564df6072d28 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, unsigned char &)'
|   |-TemplateArgument type 'unsigned char'
|   |-ParmVarDecl 0x564df6072b48 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x564df6072c18 <col:40, col:43> col:43 x 'unsigned char &'
|-FunctionTemplateDecl 0x564df5ffe758 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x564df5ffe3c0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x564df5ffe6b8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x564df5ffe470 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df5ffe4f0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x564df5ffe598 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x564df6031b18 <col:54, line:388:5>
|     |-CallExpr 0x564df6031aa0 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564df60319f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x564df6031a30 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x564df6031a40 <col:30> 'const char *' lvalue ParmVar 0x564df5ffe470 'keyword' 'const char *'
|     | |-DeclRefExpr 0x564df6031a60 <col:39> 'int' lvalue ParmVar 0x564df5ffe4f0 'flags' 'int'
|     | `-DeclRefExpr 0x564df6031a80 <col:46> 'T' lvalue ParmVar 0x564df5ffe598 'x' 'T &'
|     `-ReturnStmt 0x564df6031b08 <line:387:9, col:17>
|       `-UnaryOperator 0x564df6031af0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564df6031ae0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564df5ffec08 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x564df5ffe7c8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x564df5ffe848 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x564df5ffeb68 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x564df5ffe908 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df5ffe9a8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x564df5ffea48 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x564df6031c88 <col:74, line:403:5>
|     `-ReturnStmt 0x564df6031c78 <line:402:9, col:56>
|       `-CallExpr 0x564df6031c38 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df6031b48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df6031bb8 <col:28> 'const char *' lvalue ParmVar 0x564df5ffe908 'keyword' 'const char *'
|         |-IntegerLiteral 0x564df6031bd8 <col:37> 'int' 0
|         |-DeclRefExpr 0x564df6031bf8 <col:40> 'T' lvalue ParmVar 0x564df5ffe9a8 'x' 'T &'
|         `-DeclRefExpr 0x564df6031c18 <col:43> 'const V' lvalue ParmVar 0x564df5ffea48 'default_value' 'const V &'
|-FunctionTemplateDecl 0x564df5fff078 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x564df5ffec78 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x564df5ffecf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x564df5ffefd8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x564df5ffedb8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df5ffee58 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x564df5ffeef8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x564df6031df0 <col:76, line:407:5>
|     `-ReturnStmt 0x564df6031de0 <line:406:9, col:65>
|       `-CallExpr 0x564df6031da0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df6031cb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df6031d20 <col:28> 'const char *' lvalue ParmVar 0x564df5ffedb8 'keyword' 'const char *'
|         |-DeclRefExpr 0x564df6031d40 <col:37> 'const int' lvalue Var 0x564df5ffd3f0 'positional' 'const int'
|         |-DeclRefExpr 0x564df6031d60 <col:49> 'T' lvalue ParmVar 0x564df5ffee58 'x' 'T &'
|         `-DeclRefExpr 0x564df6031d80 <col:52> 'const V' lvalue ParmVar 0x564df5ffeef8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x564df5fff5c8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x564df5fff0e8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x564df5fff168 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x564df5fff528 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x564df5fff228 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df5fff2a8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x564df5fff348 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x564df5fff3e8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x564df6031f58 <col:85, line:412:5>
|     |-CallExpr 0x564df6031ed8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564df6031e08 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x564df6031e48 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x564df6031e58 <col:37> 'const char *' lvalue ParmVar 0x564df5fff228 'keyword' 'const char *'
|     | |-DeclRefExpr 0x564df6031e78 <col:46> 'int' lvalue ParmVar 0x564df5fff2a8 'flags' 'int'
|     | |-DeclRefExpr 0x564df6031e98 <col:53> 'T' lvalue ParmVar 0x564df5fff348 'x' 'T &'
|     | `-DeclRefExpr 0x564df6031eb8 <col:56> 'const V' lvalue ParmVar 0x564df5fff3e8 'default_value' 'const V &'
|     `-ReturnStmt 0x564df6031f48 <line:411:9, col:17>
|       `-UnaryOperator 0x564df6031f30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564df6031f20 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564df5fffa58 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x564df5fff640 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df5fff6b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564df5fff9b8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x564df5fff778 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df5fff7f0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x564df5fff898 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x564df60320d8 <col:53, line:425:5>
|     `-ReturnStmt 0x564df60320c8 <line:424:9, col:42>
|       `-CallExpr 0x564df6032088 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df6031f88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df6032008 <col:21> 'const char *' lvalue ParmVar 0x564df5fff778 'keyword' 'const char *'
|         |-IntegerLiteral 0x564df6032028 <col:30> 'int' 0
|         |-DeclRefExpr 0x564df6032048 <col:33> 'P' lvalue ParmVar 0x564df5fff7f0 'parser' 'P'
|         `-DeclRefExpr 0x564df6032068 <col:41> 'T' lvalue ParmVar 0x564df5fff898 'x' 'T &'
|-FunctionTemplateDecl 0x564df5fffea8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x564df5fffac8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df5fffb48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564df5fffe08 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x564df5fffc08 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df5fffc80 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x564df5fffd28 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x564df6032250 <col:55, line:429:5>
|     `-ReturnStmt 0x564df6032240 <line:428:9, col:50>
|       `-CallExpr 0x564df6032200 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df6032100 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df6032180 <col:21> 'const char *' lvalue ParmVar 0x564df5fffc08 'keyword' 'const char *'
|         |-DeclRefExpr 0x564df60321a0 <col:30> 'const int' lvalue Var 0x564df5ffd2f8 'mandatory' 'const int'
|         |-DeclRefExpr 0x564df60321c0 <col:41> 'P' lvalue ParmVar 0x564df5fffc80 'parser' 'P'
|         `-DeclRefExpr 0x564df60321e0 <col:49> 'T' lvalue ParmVar 0x564df5fffd28 'x' 'T &'
|-FunctionTemplateDecl 0x564df60002f8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x564df5ffff18 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df5ffff98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x564df6000258 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x564df6000058 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x564df60000d0 <col:39, col:41> col:41 referenced parser 'P'
| | |-ParmVarDecl 0x564df6000178 <col:49, col:52> col:52 referenced x 'T &'
| | `-CompoundStmt 0x564df60323c8 <col:55, line:433:5>
| |   `-ReturnStmt 0x564df60323b8 <line:432:9, col:51>
| |     `-CallExpr 0x564df6032378 <col:16, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x564df6032278 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x564df60322f8 <col:21> 'const char *' lvalue ParmVar 0x564df6000058 'keyword' 'const char *'
| |       |-DeclRefExpr 0x564df6032318 <col:30> 'const int' lvalue Var 0x564df5ffd3f0 'positional' 'const int'
| |       |-DeclRefExpr 0x564df6032338 <col:42> 'P' lvalue ParmVar 0x564df60000d0 'parser' 'P'
| |       `-DeclRefExpr 0x564df6032358 <col:50> 'T' lvalue ParmVar 0x564df6000178 'x' 'T &'
| `-CXXMethodDecl 0x564df6073838 <line:431:5, line:433:5> line:431:11 used read_p 'Args &(const char *, AnnoArg, int &)'
|   |-TemplateArgument type 'AnnoArg'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x564df60735a0 <col:18, col:30> col:30 keyword 'const char *'
|   |-ParmVarDecl 0x564df6073648 <col:39, col:41> col:41 parser 'AnnoArg':'AnnoArg'
|   `-ParmVarDecl 0x564df6073718 <col:49, col:52> col:52 x 'int &'
|-FunctionTemplateDecl 0x564df6000748 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x564df6000368 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df60003e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564df60006a8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x564df60004a8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df6000520 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x564df60005c8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x564df60325f0 <col:56, line:437:5>
|     `-ReturnStmt 0x564df60325e0 <line:436:9, col:63>
|       `-CallExpr 0x564df60325a0 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df60323f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df6032470 <col:21> 'const char *' lvalue ParmVar 0x564df60004a8 'keyword' 'const char *'
|         |-BinaryOperator 0x564df6032540 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x564df60324f0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x564df60324d0 <col:30> 'const int' lvalue Var 0x564df5ffd2f8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x564df6032528 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x564df6032508 <col:42> 'const int' lvalue Var 0x564df5ffd3f0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x564df6032560 <col:54> 'P' lvalue ParmVar 0x564df6000520 'parser' 'P'
|         `-DeclRefExpr 0x564df6032580 <col:62> 'T' lvalue ParmVar 0x564df60005c8 'x' 'T &'
|-FunctionTemplateDecl 0x564df6000c78 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x564df60007b8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df6000838 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564df6000bd8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x564df60008f8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df6000978 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x564df60009f0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x564df6000a98 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x564df6032758 <col:64, line:442:5>
|     |-CallExpr 0x564df60326d8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564df6032608 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x564df6032648 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x564df6032658 <col:30> 'const char *' lvalue ParmVar 0x564df60008f8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x564df6032678 <col:39> 'int' lvalue ParmVar 0x564df6000978 'flags' 'int'
|     | |-DeclRefExpr 0x564df6032698 <col:46> 'P' lvalue ParmVar 0x564df60009f0 'parser' 'P'
|     | `-DeclRefExpr 0x564df60326b8 <col:54> 'T' lvalue ParmVar 0x564df6000a98 'x' 'T &'
|     `-ReturnStmt 0x564df6032748 <line:441:9, col:17>
|       `-UnaryOperator 0x564df6032730 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564df6032720 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564df6001278 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x564df6000cf0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df6000d68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x564df6000de8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x564df60011d8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x564df6000eb0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df6000f28 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x564df6000fc8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x564df6001098 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x564df60328f0 <col:84, line:458:5>
|     `-ReturnStmt 0x564df60328e0 <line:457:9, col:64>
|       `-CallExpr 0x564df6032898 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df6032788 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df60327f8 <col:28> 'const char *' lvalue ParmVar 0x564df6000eb0 'keyword' 'const char *'
|         |-IntegerLiteral 0x564df6032818 <col:37> 'int' 0
|         |-DeclRefExpr 0x564df6032838 <col:40> 'P' lvalue ParmVar 0x564df6000f28 'parser' 'P'
|         |-DeclRefExpr 0x564df6032858 <col:48> 'T' lvalue ParmVar 0x564df6000fc8 'x' 'T &'
|         `-DeclRefExpr 0x564df6032878 <col:51> 'const V' lvalue ParmVar 0x564df6001098 'default_value' 'const V &'
|-FunctionTemplateDecl 0x564df60017f8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x564df60012f0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df6001368 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x564df60013e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x564df6001758 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x564df60014b0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df6001528 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x564df60015c8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x564df6001668 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x564df6032a80 <col:86, line:462:5>
|     `-ReturnStmt 0x564df6032a70 <line:461:9, col:73>
|       `-CallExpr 0x564df6032a28 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df6032918 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df6032988 <col:28> 'const char *' lvalue ParmVar 0x564df60014b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x564df60329a8 <col:37> 'const int' lvalue Var 0x564df5ffd3f0 'positional' 'const int'
|         |-DeclRefExpr 0x564df60329c8 <col:49> 'P' lvalue ParmVar 0x564df6001528 'parser' 'P'
|         |-DeclRefExpr 0x564df60329e8 <col:57> 'T' lvalue ParmVar 0x564df60015c8 'x' 'T &'
|         `-DeclRefExpr 0x564df6032a08 <col:60> 'const V' lvalue ParmVar 0x564df6001668 'default_value' 'const V &'
|-FunctionTemplateDecl 0x564df6001e58 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x564df6001870 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df60018e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x564df6001968 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x564df6001db8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x564df6001a30 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df6001ab0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x564df6001b28 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x564df6001bc8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x564df6001c68 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x564df6032c10 <col:95, line:467:5>
|     |-CallExpr 0x564df6032b88 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564df6032a98 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x564df6032ad8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x564df6032ae8 <col:37> 'const char *' lvalue ParmVar 0x564df6001a30 'keyword' 'const char *'
|     | |-DeclRefExpr 0x564df6032b08 <col:46> 'int' lvalue ParmVar 0x564df6001ab0 'flags' 'int'
|     | |-DeclRefExpr 0x564df6032b28 <col:53> 'P' lvalue ParmVar 0x564df6001b28 'parser' 'P'
|     | |-DeclRefExpr 0x564df6032b48 <col:61> 'T' lvalue ParmVar 0x564df6001bc8 'x' 'T &'
|     | `-DeclRefExpr 0x564df6032b68 <col:64> 'const V' lvalue ParmVar 0x564df6001c68 'default_value' 'const V &'
|     `-ReturnStmt 0x564df6032c00 <line:466:9, col:17>
|       `-UnaryOperator 0x564df6032be8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564df6032bd8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564df6002438 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x564df6001ed8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df6001f58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x564df6001fd8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x564df6002398 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x564df60020a0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df6002118 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x564df60021b8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x564df6002258 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x564df6032db8 <col:63, line:481:5>
|     `-ReturnStmt 0x564df6032da8 <line:480:9, col:47>
|       `-CallExpr 0x564df6032d60 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df6032c40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df6032cc0 <col:21> 'const char *' lvalue ParmVar 0x564df60020a0 'keyword' 'const char *'
|         |-IntegerLiteral 0x564df6032ce0 <col:30> 'int' 0
|         |-DeclRefExpr 0x564df6032d00 <col:33> 'P' lvalue ParmVar 0x564df6002118 'parser' 'P'
|         |-DeclRefExpr 0x564df6032d20 <col:41> 'T1' lvalue ParmVar 0x564df60021b8 'x1' 'T1 &'
|         `-DeclRefExpr 0x564df6032d40 <col:45> 'T2' lvalue ParmVar 0x564df6002258 'x2' 'T2 &'
|-FunctionTemplateDecl 0x564df60029b8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x564df60024b0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df6002528 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x564df60025a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x564df6002918 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x564df6002670 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df60026e8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x564df6002788 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x564df6002828 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x564df6032f58 <col:65, line:485:5>
|     `-ReturnStmt 0x564df6032f48 <line:484:9, col:55>
|       `-CallExpr 0x564df6032f00 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df6032de0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df6032e60 <col:21> 'const char *' lvalue ParmVar 0x564df6002670 'keyword' 'const char *'
|         |-DeclRefExpr 0x564df6032e80 <col:30> 'const int' lvalue Var 0x564df5ffd2f8 'mandatory' 'const int'
|         |-DeclRefExpr 0x564df6032ea0 <col:41> 'P' lvalue ParmVar 0x564df60026e8 'parser' 'P'
|         |-DeclRefExpr 0x564df6032ec0 <col:49> 'T1' lvalue ParmVar 0x564df6002788 'x1' 'T1 &'
|         `-DeclRefExpr 0x564df6032ee0 <col:53> 'T2' lvalue ParmVar 0x564df6002828 'x2' 'T2 &'
|-FunctionTemplateDecl 0x564df6002f38 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x564df6002a30 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df6002aa8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x564df6002b28 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x564df6002e98 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x564df6002bf0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df6002c68 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x564df6002d08 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x564df6002da8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x564df60330f8 <col:65, line:489:5>
|     `-ReturnStmt 0x564df60330e8 <line:488:9, col:56>
|       `-CallExpr 0x564df60330a0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df6032f80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df6033000 <col:21> 'const char *' lvalue ParmVar 0x564df6002bf0 'keyword' 'const char *'
|         |-DeclRefExpr 0x564df6033020 <col:30> 'const int' lvalue Var 0x564df5ffd3f0 'positional' 'const int'
|         |-DeclRefExpr 0x564df6033040 <col:42> 'P' lvalue ParmVar 0x564df6002c68 'parser' 'P'
|         |-DeclRefExpr 0x564df6033060 <col:50> 'T1' lvalue ParmVar 0x564df6002d08 'x1' 'T1 &'
|         `-DeclRefExpr 0x564df6033080 <col:54> 'T2' lvalue ParmVar 0x564df6002da8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x564df6008998 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x564df6002fb0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df6003028 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x564df60030a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x564df60088f8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x564df6003170 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df60086c0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x564df6008768 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x564df6008808 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x564df6033348 <col:66, line:493:5>
|     `-ReturnStmt 0x564df6033338 <line:492:9, col:68>
|       `-CallExpr 0x564df60332f0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df6033120 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df60331a0 <col:21> 'const char *' lvalue ParmVar 0x564df6003170 'keyword' 'const char *'
|         |-BinaryOperator 0x564df6033270 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x564df6033220 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x564df6033200 <col:30> 'const int' lvalue Var 0x564df5ffd2f8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x564df6033258 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x564df6033238 <col:42> 'const int' lvalue Var 0x564df5ffd3f0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x564df6033290 <col:54> 'P' lvalue ParmVar 0x564df60086c0 'parser' 'P'
|         |-DeclRefExpr 0x564df60332b0 <col:62> 'T1' lvalue ParmVar 0x564df6008768 'x1' 'T1 &'
|         `-DeclRefExpr 0x564df60332d0 <col:66> 'T2' lvalue ParmVar 0x564df6008808 'x2' 'T2 &'
|-FunctionTemplateDecl 0x564df6008ff8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x564df6008a10 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df6008a88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x564df6008b08 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x564df6008f58 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x564df6008bd0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df6008c50 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x564df6008cc8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x564df6008d68 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x564df6008e08 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x564df60334d8 <col:74, line:498:5>
|     |-CallExpr 0x564df6033450 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564df6033360 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x564df60333a0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x564df60333b0 <col:30> 'const char *' lvalue ParmVar 0x564df6008bd0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x564df60333d0 <col:39> 'int' lvalue ParmVar 0x564df6008c50 'flags' 'int'
|     | |-DeclRefExpr 0x564df60333f0 <col:46> 'P' lvalue ParmVar 0x564df6008cc8 'parser' 'P'
|     | |-DeclRefExpr 0x564df6033410 <col:54> 'T1' lvalue ParmVar 0x564df6008d68 'x1' 'T1 &'
|     | `-DeclRefExpr 0x564df6033430 <col:58> 'T2' lvalue ParmVar 0x564df6008e08 'x2' 'T2 &'
|     `-ReturnStmt 0x564df60334c8 <line:497:9, col:17>
|       `-UnaryOperator 0x564df60334b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564df60334a0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564df6009358 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x564df6009078 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564df60092b8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x564df6009130 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df60091a8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x564df6033620 <col:52, line:509:5>
|     `-ReturnStmt 0x564df6033610 <line:508:9, col:44>
|       `-CallExpr 0x564df60335d8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df6033508 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df6033578 <col:26> 'const char *' lvalue ParmVar 0x564df6009130 'keyword' 'const char *'
|         |-IntegerLiteral 0x564df6033598 <col:35> 'int' 0
|         `-DeclRefExpr 0x564df60335b8 <col:38> 'P' lvalue ParmVar 0x564df60091a8 'parser' 'P'
|-FunctionTemplateDecl 0x564df6009658 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x564df60093c0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564df60095b8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x564df6009470 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df60094e8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x564df6033760 <col:54, line:513:5>
|     `-ReturnStmt 0x564df6033750 <line:512:9, col:52>
|       `-CallExpr 0x564df6033718 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df6033648 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df60336b8 <col:26> 'const char *' lvalue ParmVar 0x564df6009470 'keyword' 'const char *'
|         |-DeclRefExpr 0x564df60336d8 <col:35> 'const int' lvalue Var 0x564df5ffd2f8 'mandatory' 'const int'
|         `-DeclRefExpr 0x564df60336f8 <col:46> 'P' lvalue ParmVar 0x564df60094e8 'parser' 'P'
|-FunctionTemplateDecl 0x564df6009958 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x564df60096c0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564df60098b8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x564df6009770 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df60097e8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x564df60338a0 <col:54, line:517:5>
|     `-ReturnStmt 0x564df6033890 <line:516:9, col:53>
|       `-CallExpr 0x564df6033858 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df6033788 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df60337f8 <col:26> 'const char *' lvalue ParmVar 0x564df6009770 'keyword' 'const char *'
|         |-DeclRefExpr 0x564df6033818 <col:35> 'const int' lvalue Var 0x564df5ffd3f0 'positional' 'const int'
|         `-DeclRefExpr 0x564df6033838 <col:47> 'P' lvalue ParmVar 0x564df60097e8 'parser' 'P'
|-FunctionTemplateDecl 0x564df6009c58 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x564df60099c0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564df6009bb8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x564df6009a70 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df6009ae8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x564df6033a90 <col:55, line:521:5>
|     `-ReturnStmt 0x564df6033a80 <line:520:9, col:65>
|       `-CallExpr 0x564df6033a48 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df60338c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df6033938 <col:26> 'const char *' lvalue ParmVar 0x564df6009a70 'keyword' 'const char *'
|         |-BinaryOperator 0x564df6033a08 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x564df60339b8 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x564df6033998 <col:35> 'const int' lvalue Var 0x564df5ffd2f8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x564df60339f0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x564df60339d0 <col:47> 'const int' lvalue Var 0x564df5ffd3f0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x564df6033a28 <col:59> 'P' lvalue ParmVar 0x564df6009ae8 'parser' 'P'
|-FunctionTemplateDecl 0x564df600a028 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x564df6009cc0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564df6009f88 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x564df6009d70 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df6009df0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x564df6009e68 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x564df6033bd0 <col:63, line:526:5>
|     |-CallExpr 0x564df6033b58 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564df6033aa8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x564df6033ae8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x564df6033af8 <col:35> 'const char *' lvalue ParmVar 0x564df6009d70 'keyword' 'const char *'
|     | |-DeclRefExpr 0x564df6033b18 <col:44> 'int' lvalue ParmVar 0x564df6009df0 'flags' 'int'
|     | `-DeclRefExpr 0x564df6033b38 <col:51> 'P' lvalue ParmVar 0x564df6009e68 'parser' 'P'
|     `-ReturnStmt 0x564df6033bc0 <line:525:9, col:17>
|       `-UnaryOperator 0x564df6033ba8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564df6033b98 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564df600a478 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x564df600a098 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df600a118 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564df600a3d8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x564df600a1d8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df600a250 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x564df600a2f8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x564df6033d28 <col:58, line:541:5>
|     `-ReturnStmt 0x564df6033d18 <line:540:9, col:39>
|       `-CallExpr 0x564df6033ce0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df6033c00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df6033c80 <col:21> 'const char *' lvalue ParmVar 0x564df600a1d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x564df6033ca0 <col:30> 'P' lvalue ParmVar 0x564df600a250 'parser' 'P'
|         `-DeclRefExpr 0x564df6033cc0 <col:38> 'T' lvalue ParmVar 0x564df600a2f8 'x' 'T &'
|-FunctionTemplateDecl 0x564df600a8c8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x564df600a4e8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df600a568 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564df600a828 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x564df600a628 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df600a6a0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x564df600a748 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x564df6033e60 <col:60, line:545:5>
|     `-ReturnStmt 0x564df6033e50 <line:544:9, col:41>
|       `-CallExpr 0x564df6033e18 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df6033d50 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df6033db8 <col:23> 'const char *' lvalue ParmVar 0x564df600a628 'keyword' 'const char *'
|         |-DeclRefExpr 0x564df6033dd8 <col:32> 'P' lvalue ParmVar 0x564df600a6a0 'parser' 'P'
|         `-DeclRefExpr 0x564df6033df8 <col:40> 'T' lvalue ParmVar 0x564df600a748 'x' 'T &'
|-FunctionTemplateDecl 0x564df600ad18 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x564df600a938 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df600a9b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564df600ac78 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x564df600aa78 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df600aaf0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x564df600ab98 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x564df6033f98 <col:60, line:549:5>
|     `-ReturnStmt 0x564df6033f88 <line:548:9, col:41>
|       `-CallExpr 0x564df6033f50 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df6033e88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df6033ef0 <col:23> 'const char *' lvalue ParmVar 0x564df600aa78 'keyword' 'const char *'
|         |-DeclRefExpr 0x564df6033f10 <col:32> 'P' lvalue ParmVar 0x564df600aaf0 'parser' 'P'
|         `-DeclRefExpr 0x564df6033f30 <col:40> 'T' lvalue ParmVar 0x564df600ab98 'x' 'T &'
|-FunctionTemplateDecl 0x564df600b168 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x564df600ad88 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df600ae08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564df600b0c8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x564df600aec8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df600af40 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x564df600afe8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x564df60340d0 <col:61, line:553:5>
|     `-ReturnStmt 0x564df60340c0 <line:552:9, col:42>
|       `-CallExpr 0x564df6034088 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df6033fc0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df6034028 <col:24> 'const char *' lvalue ParmVar 0x564df600aec8 'keyword' 'const char *'
|         |-DeclRefExpr 0x564df6034048 <col:33> 'P' lvalue ParmVar 0x564df600af40 'parser' 'P'
|         `-DeclRefExpr 0x564df6034068 <col:41> 'T' lvalue ParmVar 0x564df600afe8 'x' 'T &'
|-FunctionTemplateDecl 0x564df600b648 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x564df600b1d8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df600b258 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564df600b5a8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x564df600b318 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df600b398 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x564df600b410 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x564df600b4b8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x564df6034248 <col:69, line:557:5>
|     `-ReturnStmt 0x564df6034238 <line:556:9, col:46>
|       `-CallExpr 0x564df60341f8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df60340f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df6034178 <col:21> 'const char *' lvalue ParmVar 0x564df600b318 'keyword' 'const char *'
|         |-DeclRefExpr 0x564df6034198 <col:30> 'int' lvalue ParmVar 0x564df600b398 'flags' 'int'
|         |-DeclRefExpr 0x564df60341b8 <col:37> 'P' lvalue ParmVar 0x564df600b410 'parser' 'P'
|         `-DeclRefExpr 0x564df60341d8 <col:45> 'T' lvalue ParmVar 0x564df600b4b8 'x' 'T &'
|-FunctionTemplateDecl 0x564df600b958 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x564df600b6c0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564df600b8b8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x564df600b770 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df600b7e8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x564df6034388 <col:56, line:571:5>
|     `-ReturnStmt 0x564df6034378 <line:570:9, col:48>
|       `-CallExpr 0x564df6034340 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df6034270 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df60342e0 <col:30> 'const char *' lvalue ParmVar 0x564df600b770 'keyword' 'const char *'
|         |-IntegerLiteral 0x564df6034300 <col:39> 'int' 0
|         `-DeclRefExpr 0x564df6034320 <col:42> 'P' lvalue ParmVar 0x564df600b7e8 'parser' 'P'
|-FunctionTemplateDecl 0x564df600bce8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x564df600b9c0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564df600bc48 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x564df600ba70 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df600baf0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x564df600bb68 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x564df6034558 <col:67, line:576:5>
|     |-CallExpr 0x564df60344e0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564df60343a0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x564df60343e0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x564df60343f0 <col:39> 'const char *' lvalue ParmVar 0x564df600ba70 'keyword' 'const char *'
|     | |-BinaryOperator 0x564df60344a0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x564df6034450 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x564df6034410 <col:48> 'int' lvalue ParmVar 0x564df600baf0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x564df6034488 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x564df6034468 <col:56> 'const int' lvalue Var 0x564df5ffd5e0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x564df60344c0 <col:68> 'P' lvalue ParmVar 0x564df600bb68 'parser' 'P'
|     `-ReturnStmt 0x564df6034548 <line:575:9, col:17>
|       `-UnaryOperator 0x564df6034530 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564df6034520 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564df600c138 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x564df600bd58 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df600bdd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564df600c098 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x564df600be98 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df600bf10 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x564df600bfb8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x564df60346c8 <col:62, line:592:5>
|     `-ReturnStmt 0x564df60346b8 <line:591:9, col:51>
|       `-CallExpr 0x564df6034678 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df6034588 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df60345f8 <col:30> 'const char *' lvalue ParmVar 0x564df600be98 'keyword' 'const char *'
|         |-IntegerLiteral 0x564df6034618 <col:39> 'int' 0
|         |-DeclRefExpr 0x564df6034638 <col:42> 'P' lvalue ParmVar 0x564df600bf10 'parser' 'P'
|         `-DeclRefExpr 0x564df6034658 <col:50> 'T' lvalue ParmVar 0x564df600bfb8 'x' 'T &'
|-FunctionTemplateDecl 0x564df600c618 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x564df600c1a8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df600c228 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564df600c578 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x564df600c2e8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df600c368 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x564df600c3e0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x564df600c488 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x564df60348c0 <col:73, line:597:5>
|     |-CallExpr 0x564df6034840 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564df60346e0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x564df6034720 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x564df6034730 <col:39> 'const char *' lvalue ParmVar 0x564df600c2e8 'keyword' 'const char *'
|     | |-BinaryOperator 0x564df60347e0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x564df6034790 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x564df6034750 <col:48> 'int' lvalue ParmVar 0x564df600c368 'flags' 'int'
|     | | `-ImplicitCastExpr 0x564df60347c8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x564df60347a8 <col:56> 'const int' lvalue Var 0x564df5ffd5e0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x564df6034800 <col:68> 'P' lvalue ParmVar 0x564df600c3e0 'parser' 'P'
|     | `-DeclRefExpr 0x564df6034820 <col:76> 'T' lvalue ParmVar 0x564df600c488 'x' 'T &'
|     `-ReturnStmt 0x564df60348b0 <line:596:9, col:17>
|       `-UnaryOperator 0x564df6034898 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564df6034888 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564df600cbc8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x564df600c690 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df600c708 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564df600cb28 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x564df600c7c8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df600c840 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x564df600ca00 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x564df6034a30 <col:65, line:614:5>
|     `-ReturnStmt 0x564df6034a20 <line:613:9, col:46>
|       `-CallExpr 0x564df60349e0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df60348f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df6034960 <col:25> 'const char *' lvalue ParmVar 0x564df600c7c8 'keyword' 'const char *'
|         |-IntegerLiteral 0x564df6034980 <col:34> 'int' 0
|         |-DeclRefExpr 0x564df60349a0 <col:37> 'P' lvalue ParmVar 0x564df600c840 'parser' 'P'
|         `-DeclRefExpr 0x564df60349c0 <col:45> 'Vector<T>' lvalue ParmVar 0x564df600ca00 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x564df600cff8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x564df600cc38 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x564df600cf58 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x564df600ccf0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df600ce40 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x564df6034c50 <col:55, line:618:5>
|     `-ReturnStmt 0x564df6034c40 <line:617:9, col:55>
|       `-CallExpr 0x564df6034c00 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df6034a58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df6034ac8 <col:25> 'const char *' lvalue ParmVar 0x564df600ccf0 'keyword' 'const char *'
|         |-IntegerLiteral 0x564df6034ae8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x564df6034bc0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x564df6034be0 <col:54> 'Vector<T>' lvalue ParmVar 0x564df600ce40 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x564df600d5c8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x564df600d060 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df600d0d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564df600d528 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x564df600d198 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df600d218 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x564df600d290 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x564df600d3e0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x564df6034e48 <col:76, line:623:5>
|     |-CallExpr 0x564df6034dc8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564df6034c68 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x564df6034ca8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x564df6034cb8 <col:34> 'const char *' lvalue ParmVar 0x564df600d198 'keyword' 'const char *'
|     | |-BinaryOperator 0x564df6034d68 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x564df6034d18 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x564df6034cd8 <col:43> 'int' lvalue ParmVar 0x564df600d218 'flags' 'int'
|     | | `-ImplicitCastExpr 0x564df6034d50 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x564df6034d30 <col:51> 'const int' lvalue Var 0x564df5ffd5e0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x564df6034d88 <col:63> 'P' lvalue ParmVar 0x564df600d290 'parser' 'P'
|     | `-DeclRefExpr 0x564df6034da8 <col:71> 'Vector<T>' lvalue ParmVar 0x564df600d3e0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x564df6034e38 <line:622:9, col:17>
|       `-UnaryOperator 0x564df6034e20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564df6034e10 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564df600db08 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x564df600d640 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df600d6b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564df600da68 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x564df600d778 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df600d7f8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x564df600d940 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x564df60350b0 <col:66, line:627:5>
|     `-ReturnStmt 0x564df60350a0 <line:626:9, col:59>
|       `-CallExpr 0x564df6035060 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564df6034e78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564df6034ee8 <col:25> 'const char *' lvalue ParmVar 0x564df600d778 'keyword' 'const char *'
|         |-DeclRefExpr 0x564df6034f08 <col:34> 'int' lvalue ParmVar 0x564df600d7f8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x564df6035020 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x564df6035040 <col:58> 'Vector<T>' lvalue ParmVar 0x564df600d940 'x' 'Vector<T> &'
|-CXXMethodDecl 0x564df600db98 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x564df6035130 <col:25, line:633:5>
|   `-ReturnStmt 0x564df6035120 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x564df6035108 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x564df60350d8 <col:16> 'const bool' lvalue ->_status 0x564df601b638
|         `-CXXThisExpr 0x564df60350c8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x564df600dd18 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x564df600dc50 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x564df6035218 <col:27, line:639:5>
|   |-BinaryOperator 0x564df60351c0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x564df6035148 <col:9> 'bool' lvalue ParmVar 0x564df600dc50 'x' 'bool &'
|   | `-ImplicitCastExpr 0x564df60351a8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x564df6035178 <col:13> 'bool' lvalue ->_status 0x564df601b638
|   |     `-CXXThisExpr 0x564df6035168 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x564df6035208 <line:638:9, col:17>
|     `-UnaryOperator 0x564df60351f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564df60351e0 <col:17> 'Args *' this
|-CXXMethodDecl 0x564df600de98 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x564df600ddd8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x564df6035308 <col:39, line:644:5>
|   |-BinaryOperator 0x564df60352b0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x564df6035238 <col:9> 'bool' lvalue ParmVar 0x564df600ddd8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x564df6035298 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x564df6035268 <col:13> 'const bool' lvalue ->_status 0x564df601b638
|   |     `-CXXThisExpr 0x564df6035258 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x564df60352f8 <line:643:9, col:17>
|     `-UnaryOperator 0x564df60352e0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564df60352d0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x564df600df60 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x564df60353b0 <col:30, line:651:5>
|   `-ReturnStmt 0x564df60353a0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x564df6035388 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x564df6035358 <col:16> 'bool' lvalue ->_read_status 0x564df5f11750
|         `-ImplicitCastExpr 0x564df6035338 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x564df6035328 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x564df600e0a8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x564df600e018 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x564df60354b8 <col:32, line:658:5>
|   |-BinaryOperator 0x564df6035460 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x564df60353c8 <col:9> 'bool' lvalue ParmVar 0x564df600e018 'x' 'bool &'
|   | `-ImplicitCastExpr 0x564df6035448 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x564df6035418 <col:13> 'bool' lvalue ->_read_status 0x564df5f11750
|   |     `-ImplicitCastExpr 0x564df60353f8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x564df60353e8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x564df60354a8 <line:657:9, col:17>
|     `-UnaryOperator 0x564df6035490 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564df6035480 <col:17> 'Args *' this
|-CXXMethodDecl 0x564df600e1f8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x564df600e168 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x564df60355c8 <col:44, line:663:5>
|   |-BinaryOperator 0x564df6035570 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x564df60354d8 <col:9> 'bool' lvalue ParmVar 0x564df600e168 'x' 'bool &'
|   | `-ImplicitCastExpr 0x564df6035558 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x564df6035528 <col:13> 'bool' lvalue ->_read_status 0x564df5f11750
|   |     `-ImplicitCastExpr 0x564df6035508 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x564df60354f8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x564df60355b8 <line:662:9, col:17>
|     `-UnaryOperator 0x564df60355a0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564df6035590 <col:17> 'const Args *' this
|-CXXMethodDecl 0x564df600e2c0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x564df600e388 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x564df600e450 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x564df600e518 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x564df600e828 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x564df600e5b8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x564df600e788 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x564df600e698 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x564df6035980 <col:19, line:706:5>
|     `-IfStmt 0x564df6035958 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x564df60356c8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x564df6035888 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x564df6035858 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x564df6035818 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x564df6035720 <col:42> '<bound member function type>' ->simple_slot 0x564df602eaa0
|       |     | `-CXXThisExpr 0x564df6035710 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x564df60357b8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x564df6035770 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x564df5d9b648
|       |     | `-DeclRefExpr 0x564df6035750 <col:55> 'T' lvalue ParmVar 0x564df600e698 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x564df60357f8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x564df6035948 <line:705:13, col:34>
|         `-CallExpr 0x564df6035920 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x564df60358a8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x564df6035900 <col:33> 'T' lvalue ParmVar 0x564df600e698 'x' 'T &'
|-FunctionTemplateDecl 0x564df600eaf8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x564df600e888 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x564df600ea58 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x564df600e968 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x564df6035d60 <col:31, line:717:5>
|     |-DeclStmt 0x564df6035ac0 <line:713:9, col:23>
|     | `-VarDecl 0x564df60359a8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x564df6035a98 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x564df6035a20 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x564df6035a78 <col:21> 'T' lvalue ParmVar 0x564df600e968 'x' 'T &'
|     |-IfStmt 0x564df6035d10 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x564df6035bb8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x564df6035cf0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x564df6035c90 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x564df6035c20 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564df5f52748 0x564df5f52368 0x564df5f51f98 0x564df5f51bb8 0x564df5f517d8 0x564df5f51408
|     |   | `-DeclRefExpr 0x564df6035c00 <col:14> 'T *' lvalue Var 0x564df60359a8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x564df6035cd0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x564df6035d48 <line:716:9, col:16>
|       `-DeclRefExpr 0x564df6035d28 <col:16> 'T *' lvalue Var 0x564df60359a8 's' 'T *'
|-FunctionTemplateDecl 0x564df600ef08 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x564df600eb58 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x564df600ebd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x564df600ee68 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x564df600ecb8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x564df600ed58 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x564df6036070 <col:37, line:726:5>
|     |-IfStmt 0x564df6036000 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x564df6036020 <line:723:13, col:26>
|     | | `-VarDecl 0x564df6035dc8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x564df6035eb8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x564df6035e40 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x564df6035e98 <col:25> 'T' lvalue ParmVar 0x564df600ecb8 'x' 'T &'
|     | |-DeclRefExpr 0x564df6035ee0 <col:16> 'T *' lvalue Var 0x564df6035dc8 's' 'T *'
|     | `-BinaryOperator 0x564df6035fe0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x564df6035f90 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x564df6035f20 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564df5f52748 0x564df5f52368 0x564df5f51f98 0x564df5f51bb8 0x564df5f517d8 0x564df5f51408
|     |   | `-DeclRefExpr 0x564df6035f00 <col:14> 'T *' lvalue Var 0x564df6035dc8 's' 'T *'
|     |   `-DeclRefExpr 0x564df6035fc0 <col:18> 'const V' lvalue ParmVar 0x564df600ed58 'value' 'const V &'
|     `-ReturnStmt 0x564df6036060 <line:725:9, col:17>
|       `-UnaryOperator 0x564df6036048 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564df6036038 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564df600f308 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x564df600ef70 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x564df600f268 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x564df600f020 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df600f0a0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x564df600f148 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x564df6036e90 <col:65, line:737:5>
|     |-DeclStmt 0x564df6036108 <line:732:9, col:26>
|     | `-VarDecl 0x564df60360a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x564df6036e58 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x564df6036e78 <line:733:13, col:58>
|       | `-VarDecl 0x564df6036130 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x564df6036310 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x564df60362e0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x564df60362c8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x564df60362a8 <col:26, col:58> 'String' (CXXTemporary 0x564df60362a8)
|       |           `-CXXMemberCallExpr 0x564df6036238 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x564df60361a8 <col:26> '<bound member function type>' ->find 0x564df602e0b8
|       |             | `-CXXThisExpr 0x564df6036198 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x564df6036270 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564df60361d8 <col:31> 'const char *' lvalue ParmVar 0x564df600f020 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x564df6036288 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564df60361f8 <col:40> 'int' lvalue ParmVar 0x564df600f0a0 'flags' 'int'
|       |             `-DeclRefExpr 0x564df6036218 <col:47> 'Args::Slot *' lvalue Var 0x564df60360a0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x564df60363c8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x564df60363b0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x564df6036390 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x564df6036360 <col:20> '<bound member function type>' .operator int (String::*)() const 0x564df5d5e618
|       |       `-ImplicitCastExpr 0x564df6036348 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x564df6036328 <col:20> 'String' lvalue Var 0x564df6036130 'str' 'String'
|       `-CompoundStmt 0x564df6036e38 <col:61, line:736:9>
|         |-DeclStmt 0x564df6036880 <line:734:13, col:76>
|         | `-VarDecl 0x564df6036418 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x564df6036850 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x564df60367c0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x564df6036808 <col:60> 'T' lvalue ParmVar 0x564df600f148 'variable' 'T &'
|         |     `-UnaryOperator 0x564df6036838 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x564df6036828 <col:71> 'Args *' this
|         `-CallExpr 0x564df6036e08 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x564df60368a8 <col:13> '<bound member function type>' ->postparse 0x564df602e2c8
|           | `-CXXThisExpr 0x564df6036898 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x564df6036dc8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x564df60368d8 <col:23> 'T *' lvalue Var 0x564df6036418 's' 'T *'
|           | `-CallExpr 0x564df6036d88 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x564df6036b60 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x564df6036c60 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x564df6036c80 <col:86> 'String' lvalue Var 0x564df6036130 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x564df6036d30 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x564df6036cc0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564df5f52748 0x564df5f52368 0x564df5f51f98 0x564df5f51bb8 0x564df5f517d8 0x564df5f51408
|           |   | `-DeclRefExpr 0x564df6036ca0 <col:92> 'T *' lvalue Var 0x564df6036418 's' 'T *'
|           |   `-UnaryOperator 0x564df6036d70 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x564df6036d60 <col:96> 'Args *' this
|           `-DeclRefExpr 0x564df6036de8 <col:103> 'Args::Slot *' lvalue Var 0x564df60360a0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x564df600f858 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x564df600f378 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x564df600f3f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x564df600f7b8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x564df600f4b8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df600f538 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x564df600f5d8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x564df600f678 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x564df6037d30 <col:88, line:745:5>
|     |-DeclStmt 0x564df6036f28 <line:741:9, col:26>
|     | `-VarDecl 0x564df6036ec0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x564df6037148 <line:742:9, col:55>
|     | `-VarDecl 0x564df6036f50 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x564df6037130 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x564df6037100 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x564df60370e8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x564df60370c8 <col:22, col:54> 'String' (CXXTemporary 0x564df60370c8)
|     |           `-CXXMemberCallExpr 0x564df6037058 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x564df6036fc8 <col:22> '<bound member function type>' ->find 0x564df602e0b8
|     |             | `-CXXThisExpr 0x564df6036fb8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x564df6037090 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x564df6036ff8 <col:27> 'const char *' lvalue ParmVar 0x564df600f4b8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x564df60370a8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x564df6037018 <col:36> 'int' lvalue ParmVar 0x564df600f538 'flags' 'int'
|     |             `-DeclRefExpr 0x564df6037038 <col:43> 'Args::Slot *' lvalue Var 0x564df6036ec0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x564df6037520 <line:743:9, col:72>
|     | `-VarDecl 0x564df6037198 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x564df60374f0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x564df6037460 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x564df60374a8 <col:56> 'T' lvalue ParmVar 0x564df600f5d8 'variable' 'T &'
|     |     `-UnaryOperator 0x564df60374d8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x564df60374c8 <col:67> 'Args *' this
|     `-CallExpr 0x564df6037d00 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x564df6037548 <col:9> '<bound member function type>' ->postparse 0x564df602e2c8
|       | `-CXXThisExpr 0x564df6037538 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x564df6037cc0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x564df6037578 <col:19> 'T *' lvalue Var 0x564df6037198 's' 'T *'
|       | `-ParenExpr 0x564df6037ca0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x564df6037c70 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x564df6037c58 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x564df6037c40 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x564df6037c20 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x564df6037bf0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x564df5d5e618
|       |     |       `-ImplicitCastExpr 0x564df6037bd8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x564df6037598 <col:25> 'String' lvalue Var 0x564df6036f50 'str' 'String'
|       |     |-CallExpr 0x564df6037a48 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x564df6037820 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x564df6037920 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x564df6037940 <col:89> 'String' lvalue Var 0x564df6036f50 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x564df60379f0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x564df6037980 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564df5f52748 0x564df5f52368 0x564df5f51f98 0x564df5f51bb8 0x564df5f517d8 0x564df5f51408
|       |     | | `-DeclRefExpr 0x564df6037960 <col:95> 'T *' lvalue Var 0x564df6037198 's' 'T *'
|       |     | `-UnaryOperator 0x564df6037a30 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x564df6037a20 <col:99> 'Args *' this
|       |     `-ParenExpr 0x564df6037bb8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x564df6037b98 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x564df6037b68 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x564df6037b18 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x564df6037aa8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564df5f52748 0x564df5f52368 0x564df5f51f98 0x564df5f51bb8 0x564df5f517d8 0x564df5f51408
|       |         | | `-DeclRefExpr 0x564df6037a88 <col:109> 'T *' lvalue Var 0x564df6037198 's' 'T *'
|       |         | `-DeclRefExpr 0x564df6037b48 <col:113> 'const V' lvalue ParmVar 0x564df600f678 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x564df6037b88 <col:120> 'bool' true
|       `-DeclRefExpr 0x564df6037ce0 <col:128> 'Args::Slot *' lvalue Var 0x564df6036ec0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x564df600fd88 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x564df600f8d0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df600f948 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564df600fce8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x564df600fa08 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df600fa88 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x564df600fb00 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x564df600fba8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x564df6038928 <col:75, line:754:5>
|     |-DeclStmt 0x564df6037dd8 <line:749:9, col:26>
|     | `-VarDecl 0x564df6037d70 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x564df60388f0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x564df6038910 <line:750:13, col:58>
|       | `-VarDecl 0x564df6037e00 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x564df6037fe0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x564df6037fb0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x564df6037f98 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x564df6037f78 <col:26, col:58> 'String' (CXXTemporary 0x564df6037f78)
|       |           `-CXXMemberCallExpr 0x564df6037f08 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x564df6037e78 <col:26> '<bound member function type>' ->find 0x564df602e0b8
|       |             | `-CXXThisExpr 0x564df6037e68 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x564df6037f40 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564df6037ea8 <col:31> 'const char *' lvalue ParmVar 0x564df600fa08 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x564df6037f58 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564df6037ec8 <col:40> 'int' lvalue ParmVar 0x564df600fa88 'flags' 'int'
|       |             `-DeclRefExpr 0x564df6037ee8 <col:47> 'Args::Slot *' lvalue Var 0x564df6037d70 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x564df6038098 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x564df6038080 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x564df6038060 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x564df6038030 <col:20> '<bound member function type>' .operator int (String::*)() const 0x564df5d5e618
|       |       `-ImplicitCastExpr 0x564df6038018 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x564df6037ff8 <col:20> 'String' lvalue Var 0x564df6037e00 'str' 'String'
|       `-CompoundStmt 0x564df60388d0 <col:61, line:753:9>
|         |-DeclStmt 0x564df6038470 <line:751:13, col:63>
|         | `-VarDecl 0x564df60380e8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x564df6038440 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x564df60383b0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x564df60383f8 <col:47> 'T' lvalue ParmVar 0x564df600fba8 'variable' 'T &'
|         |     `-UnaryOperator 0x564df6038428 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x564df6038418 <col:58> 'Args *' this
|         `-CallExpr 0x564df60388a0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x564df6038498 <col:13> '<bound member function type>' ->postparse 0x564df602e2c8
|           | `-CXXThisExpr 0x564df6038488 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x564df6038860 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x564df60384c8 <col:23> 'T *' lvalue Var 0x564df60380e8 's' 'T *'
|           | `-CallExpr 0x564df6038820 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x564df60386b0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x564df60386f8 <col:56> 'P' lvalue ParmVar 0x564df600fb00 'parser' 'P'
|           |   |-DeclRefExpr 0x564df6038718 <col:64> 'String' lvalue Var 0x564df6037e00 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x564df60387c8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x564df6038758 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564df5f52748 0x564df5f52368 0x564df5f51f98 0x564df5f51bb8 0x564df5f517d8 0x564df5f51408
|           |   | `-DeclRefExpr 0x564df6038738 <col:70> 'T *' lvalue Var 0x564df60380e8 's' 'T *'
|           |   `-UnaryOperator 0x564df6038808 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x564df60387f8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x564df6038880 <col:81> 'Args::Slot *' lvalue Var 0x564df6037d70 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x564df60103e8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x564df600fe00 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x564df600fe78 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x564df600fef8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x564df6010348 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x564df600ffc0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df6010040 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x564df60100b8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x564df6010158 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x564df60101f8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x564df603b998 <col:98, line:762:5>
|     |-DeclStmt 0x564df60389c0 <line:758:9, col:26>
|     | `-VarDecl 0x564df6038958 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x564df6038be0 <line:759:9, col:55>
|     | `-VarDecl 0x564df60389e8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x564df6038bc8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x564df6038b98 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x564df6038b80 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x564df6038b60 <col:22, col:54> 'String' (CXXTemporary 0x564df6038b60)
|     |           `-CXXMemberCallExpr 0x564df6038af0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x564df6038a60 <col:22> '<bound member function type>' ->find 0x564df602e0b8
|     |             | `-CXXThisExpr 0x564df6038a50 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x564df6038b28 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x564df6038a90 <col:27> 'const char *' lvalue ParmVar 0x564df600ffc0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x564df6038b40 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x564df6038ab0 <col:36> 'int' lvalue ParmVar 0x564df6010040 'flags' 'int'
|     |             `-DeclRefExpr 0x564df6038ad0 <col:43> 'Args::Slot *' lvalue Var 0x564df6038958 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x564df603b2e0 <line:760:9, col:59>
|     | `-VarDecl 0x564df6038c38 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x564df603b2b0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x564df6038f40 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x564df6038f88 <col:43> 'T' lvalue ParmVar 0x564df6010158 'variable' 'T &'
|     |     `-UnaryOperator 0x564df6038fb8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x564df6038fa8 <col:54> 'Args *' this
|     `-CallExpr 0x564df603b968 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x564df603b308 <col:9> '<bound member function type>' ->postparse 0x564df602e2c8
|       | `-CXXThisExpr 0x564df603b2f8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x564df603b928 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x564df603b338 <col:19> 'T *' lvalue Var 0x564df6038c38 's' 'T *'
|       | `-ParenExpr 0x564df603b908 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x564df603b8d8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x564df603b8c0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x564df603b8a8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x564df603b888 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x564df603b858 <col:25> '<bound member function type>' .operator int (String::*)() const 0x564df5d5e618
|       |     |       `-ImplicitCastExpr 0x564df603b840 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x564df603b358 <col:25> 'String' lvalue Var 0x564df60389e8 'str' 'String'
|       |     |-CallExpr 0x564df603b6b0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x564df603b540 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x564df603b588 <col:59> 'P' lvalue ParmVar 0x564df60100b8 'parser' 'P'
|       |     | |-DeclRefExpr 0x564df603b5a8 <col:67> 'String' lvalue Var 0x564df60389e8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x564df603b658 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x564df603b5e8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564df5f52748 0x564df5f52368 0x564df5f51f98 0x564df5f51bb8 0x564df5f517d8 0x564df5f51408
|       |     | | `-DeclRefExpr 0x564df603b5c8 <col:73> 'T *' lvalue Var 0x564df6038c38 's' 'T *'
|       |     | `-UnaryOperator 0x564df603b698 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x564df603b688 <col:77> 'Args *' this
|       |     `-ParenExpr 0x564df603b820 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x564df603b800 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x564df603b7d0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x564df603b780 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x564df603b710 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564df5f52748 0x564df5f52368 0x564df5f51f98 0x564df5f51bb8 0x564df5f517d8 0x564df5f51408
|       |         | | `-DeclRefExpr 0x564df603b6f0 <col:87> 'T *' lvalue Var 0x564df6038c38 's' 'T *'
|       |         | `-DeclRefExpr 0x564df603b7b0 <col:91> 'const V' lvalue ParmVar 0x564df60101f8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x564df603b7f0 <col:98> 'bool' true
|       `-DeclRefExpr 0x564df603b948 <col:106> 'Args::Slot *' lvalue Var 0x564df6038958 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x564df60186b8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x564df6010468 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df60104e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x564df6010568 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x564df6018618 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x564df6010630 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df6018310 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x564df6018388 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x564df6018428 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x564df60184c8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x564df603c978 <col:60, line:773:5>
|     |-DeclStmt 0x564df603ba40 <line:767:9, col:26>
|     | `-VarDecl 0x564df603b9d8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x564df603c940 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x564df603c960 <line:768:13, col:58>
|       | `-VarDecl 0x564df603ba68 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x564df603bc48 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x564df603bc18 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x564df603bc00 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x564df603bbe0 <col:26, col:58> 'String' (CXXTemporary 0x564df603bbe0)
|       |           `-CXXMemberCallExpr 0x564df603bb70 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x564df603bae0 <col:26> '<bound member function type>' ->find 0x564df602e0b8
|       |             | `-CXXThisExpr 0x564df603bad0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x564df603bba8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564df603bb10 <col:31> 'const char *' lvalue ParmVar 0x564df6010630 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x564df603bbc0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564df603bb30 <col:40> 'int' lvalue ParmVar 0x564df6018310 'flags' 'int'
|       |             `-DeclRefExpr 0x564df603bb50 <col:47> 'Args::Slot *' lvalue Var 0x564df603b9d8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x564df603bd00 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x564df603bce8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x564df603bcc8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x564df603bc98 <col:20> '<bound member function type>' .operator int (String::*)() const 0x564df5d5e618
|       |       `-ImplicitCastExpr 0x564df603bc80 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x564df603bc60 <col:20> 'String' lvalue Var 0x564df603ba68 'str' 'String'
|       `-CompoundStmt 0x564df603c918 <col:61, line:772:9>
|         |-DeclStmt 0x564df603c040 <line:769:13, col:66>
|         | `-VarDecl 0x564df603bd58 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x564df603c010 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x564df603bf80 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x564df603bfc8 <col:49> 'T1' lvalue ParmVar 0x564df6018428 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x564df603bff8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x564df603bfe8 <col:61> 'Args *' this
|         |-DeclStmt 0x564df603c3b0 <line:770:13, col:66>
|         | `-VarDecl 0x564df603c0c8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x564df603c380 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x564df603c2f0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x564df603c338 <col:49> 'T2' lvalue ParmVar 0x564df60184c8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x564df603c368 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x564df603c358 <col:61> 'Args *' this
|         `-CallExpr 0x564df603c8e8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x564df603c3d8 <col:13> '<bound member function type>' ->postparse 0x564df602e2c8
|           | `-CXXThisExpr 0x564df603c3c8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x564df603c8a8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x564df603c448 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x564df603c408 <col:23> 'T1 *' lvalue Var 0x564df603bd58 's1' 'T1 *'
|           | | `-DeclRefExpr 0x564df603c428 <col:29> 'T2 *' lvalue Var 0x564df603c0c8 's2' 'T2 *'
|           | `-CallExpr 0x564df603c860 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x564df603c630 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x564df603c678 <col:63> 'P' lvalue ParmVar 0x564df6018388 'parser' 'P'
|           |   |-DeclRefExpr 0x564df603c698 <col:71> 'String' lvalue Var 0x564df603ba68 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x564df603c748 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x564df603c6d8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564df5f52748 0x564df5f52368 0x564df5f51f98 0x564df5f51bb8 0x564df5f517d8 0x564df5f51408
|           |   | `-DeclRefExpr 0x564df603c6b8 <col:77> 'T1 *' lvalue Var 0x564df603bd58 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x564df603c808 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x564df603c798 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564df5f52748 0x564df5f52368 0x564df5f51f98 0x564df5f51bb8 0x564df5f517d8 0x564df5f51408
|           |   | `-DeclRefExpr 0x564df603c778 <col:82> 'T2 *' lvalue Var 0x564df603c0c8 's2' 'T2 *'
|           |   `-UnaryOperator 0x564df603c848 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x564df603c838 <col:87> 'Args *' this
|           `-DeclRefExpr 0x564df603c8c8 <col:94> 'Args::Slot *' lvalue Var 0x564df603b9d8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x564df6018aa8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x564df6018738 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564df6018a08 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x564df60187f0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df6018870 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x564df60188e8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x564df603ce90 <col:67, line:780:5>
|     |-DeclStmt 0x564df603ca10 <line:777:9, col:26>
|     | `-VarDecl 0x564df603c9a8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x564df603ce58 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x564df603ce78 <line:778:13, col:58>
|       | `-VarDecl 0x564df603ca38 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x564df603cc18 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x564df603cbe8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x564df603cbd0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x564df603cbb0 <col:26, col:58> 'String' (CXXTemporary 0x564df603cbb0)
|       |           `-CXXMemberCallExpr 0x564df603cb40 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x564df603cab0 <col:26> '<bound member function type>' ->find 0x564df602e0b8
|       |             | `-CXXThisExpr 0x564df603caa0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x564df603cb78 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564df603cae0 <col:31> 'const char *' lvalue ParmVar 0x564df60187f0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x564df603cb90 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564df603cb00 <col:40> 'int' lvalue ParmVar 0x564df6018870 'flags' 'int'
|       |             `-DeclRefExpr 0x564df603cb20 <col:47> 'Args::Slot *' lvalue Var 0x564df603c9a8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x564df603ccd0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x564df603ccb8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x564df603cc98 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x564df603cc68 <col:20> '<bound member function type>' .operator int (String::*)() const 0x564df5d5e618
|       |       `-ImplicitCastExpr 0x564df603cc50 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x564df603cc30 <col:20> 'String' lvalue Var 0x564df603ca38 'str' 'String'
|       `-CallExpr 0x564df603ce28 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x564df603ccf8 <col:13> '<bound member function type>' ->postparse 0x564df602e2c8
|         | `-CXXThisExpr 0x564df603cce8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x564df603cdd8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x564df603cd48 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x564df603cd28 <col:23> 'P' lvalue ParmVar 0x564df60188e8 'parser' 'P'
|         | |-DeclRefExpr 0x564df603cd90 <col:36> 'String' lvalue Var 0x564df603ca38 'str' 'String'
|         | `-UnaryOperator 0x564df603cdc0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x564df603cdb0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x564df603ce08 <col:49> 'Args::Slot *' lvalue Var 0x564df603c9a8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x564df6018e48 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x564df6018b18 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564df6018da8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x564df6018bd0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df6018c50 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x564df6018cc8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x564df603d800 <col:71, line:792:5>
|     |-DeclStmt 0x564df603cf28 <line:784:9, col:26>
|     | `-VarDecl 0x564df603cec0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x564df603cff8 <line:785:9, col:29>
|     | `-VarDecl 0x564df603cf58 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x564df603cfe0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x564df603cfc0 <col:28> 'int' 1
|     |-WhileStmt 0x564df603d6b0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x564df603d6d0 <line:786:16, col:61>
|     | | `-VarDecl 0x564df603d020 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x564df603d200 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x564df603d1d0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x564df603d1b8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x564df603d198 <col:29, col:61> 'String' (CXXTemporary 0x564df603d198)
|     | |           `-CXXMemberCallExpr 0x564df603d128 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x564df603d098 <col:29> '<bound member function type>' ->find 0x564df602e0b8
|     | |             | `-CXXThisExpr 0x564df603d088 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x564df603d160 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x564df603d0c8 <col:34> 'const char *' lvalue ParmVar 0x564df6018bd0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x564df603d178 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x564df603d0e8 <col:43> 'int' lvalue ParmVar 0x564df6018c50 'flags' 'int'
|     | |             `-DeclRefExpr 0x564df603d108 <col:50> 'Args::Slot *' lvalue Var 0x564df603cec0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x564df603d2b8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x564df603d2a0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x564df603d280 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x564df603d250 <col:23> '<bound member function type>' .operator int (String::*)() const 0x564df5d5e618
|     | |       `-ImplicitCastExpr 0x564df603d238 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x564df603d218 <col:23> 'String' lvalue Var 0x564df603d020 'str' 'String'
|     | `-CompoundStmt 0x564df603d688 <col:64, line:790:9>
|     |   |-CallExpr 0x564df603d410 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x564df603d2e0 <col:13> '<bound member function type>' ->postparse 0x564df602e2c8
|     |   | | `-CXXThisExpr 0x564df603d2d0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x564df603d3c0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x564df603d330 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x564df603d310 <col:23> 'P' lvalue ParmVar 0x564df6018cc8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x564df603d378 <col:36> 'String' lvalue Var 0x564df603d020 'str' 'String'
|     |   | | `-UnaryOperator 0x564df603d3a8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x564df603d398 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x564df603d3f0 <col:49> 'Args::Slot *' lvalue Var 0x564df603cec0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x564df603d5a8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x564df603d440 <col:13> 'int' lvalue Var 0x564df603cf58 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x564df603d590 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x564df603d570 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x564df603d4d8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x564df603d4b8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x564df603d4a0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x564df603d460 <col:28> 'int' lvalue Var 0x564df603cf58 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x564df603d480 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x564df603d558 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x564df603d528 <col:49> 'bool' lvalue ->_read_status 0x564df5f11750
|     |   |         `-ImplicitCastExpr 0x564df603d508 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x564df603d4f8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x564df603d658 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x564df603d5c8 <col:13> 'int' lvalue ParmVar 0x564df6018c50 'flags' 'int'
|     |     `-UnaryOperator 0x564df603d640 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x564df603d628 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x564df603d608 <col:23> 'const int' lvalue Var 0x564df5ffd2f8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x564df603d7e0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x564df603d718 <col:9> 'bool' lvalue ->_read_status 0x564df5f11750
|       | `-ImplicitCastExpr 0x564df603d6f8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x564df603d6e8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x564df603d7c0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x564df603d7a0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x564df603d788 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x564df603d748 <col:25> 'int' lvalue Var 0x564df603cf58 'read_status' 'int'
|           `-IntegerLiteral 0x564df603d768 <col:40> 'int' 1
|-FunctionTemplateDecl 0x564df6019328 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x564df6018eb8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df6018f38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564df6019288 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x564df6018ff8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df6019078 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x564df60190f0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x564df6019198 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x564df603e790 <col:84, line:805:5>
|     |-DeclStmt 0x564df603d8a8 <line:796:9, col:26>
|     | `-VarDecl 0x564df603d840 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x564df603d978 <line:797:9, col:29>
|     | `-VarDecl 0x564df603d8d8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x564df603d960 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x564df603d940 <col:28> 'int' 1
|     |-DeclStmt 0x564df603dcb0 <line:798:9, col:71>
|     | `-VarDecl 0x564df603d9c8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x564df603dc80 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x564df603dbf0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x564df603dc38 <col:55> 'T' lvalue ParmVar 0x564df6019198 'variable' 'T &'
|     |     `-UnaryOperator 0x564df603dc68 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x564df603dc58 <col:66> 'Args *' this
|     |-WhileStmt 0x564df603e640 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x564df603e660 <line:799:16, col:61>
|     | | `-VarDecl 0x564df603dcd8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x564df603deb8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x564df603de88 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x564df603de70 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x564df603de50 <col:29, col:61> 'String' (CXXTemporary 0x564df603de50)
|     | |           `-CXXMemberCallExpr 0x564df603dde0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x564df603dd50 <col:29> '<bound member function type>' ->find 0x564df602e0b8
|     | |             | `-CXXThisExpr 0x564df603dd40 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x564df603de18 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x564df603dd80 <col:34> 'const char *' lvalue ParmVar 0x564df6018ff8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x564df603de30 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x564df603dda0 <col:43> 'int' lvalue ParmVar 0x564df6019078 'flags' 'int'
|     | |             `-DeclRefExpr 0x564df603ddc0 <col:50> 'Args::Slot *' lvalue Var 0x564df603d840 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x564df603df70 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x564df603df58 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x564df603df38 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x564df603df08 <col:23> '<bound member function type>' .operator int (String::*)() const 0x564df5d5e618
|     | |       `-ImplicitCastExpr 0x564df603def0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x564df603ded0 <col:23> 'String' lvalue Var 0x564df603dcd8 'str' 'String'
|     | `-CompoundStmt 0x564df603e618 <col:64, line:803:9>
|     |   |-CallExpr 0x564df603e3a0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x564df603df98 <col:13> '<bound member function type>' ->postparse 0x564df602e2c8
|     |   | | `-CXXThisExpr 0x564df603df88 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x564df603e360 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x564df603dfc8 <col:23> 'T *' lvalue Var 0x564df603d9c8 's' 'T *'
|     |   | | `-CallExpr 0x564df603e320 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x564df603e1b0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x564df603e1f8 <col:56> 'P' lvalue ParmVar 0x564df60190f0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x564df603e218 <col:64> 'String' lvalue Var 0x564df603dcd8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x564df603e2c8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x564df603e258 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564df5f52748 0x564df5f52368 0x564df5f51f98 0x564df5f51bb8 0x564df5f517d8 0x564df5f51408
|     |   | |   | `-DeclRefExpr 0x564df603e238 <col:70> 'T *' lvalue Var 0x564df603d9c8 's' 'T *'
|     |   | |   `-UnaryOperator 0x564df603e308 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x564df603e2f8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x564df603e380 <col:81> 'Args::Slot *' lvalue Var 0x564df603d840 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x564df603e538 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x564df603e3d0 <col:13> 'int' lvalue Var 0x564df603d8d8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x564df603e520 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x564df603e500 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x564df603e468 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x564df603e448 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x564df603e430 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x564df603e3f0 <col:28> 'int' lvalue Var 0x564df603d8d8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x564df603e410 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x564df603e4e8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x564df603e4b8 <col:49> 'bool' lvalue ->_read_status 0x564df5f11750
|     |   |         `-ImplicitCastExpr 0x564df603e498 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x564df603e488 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x564df603e5e8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x564df603e558 <col:13> 'int' lvalue ParmVar 0x564df6019078 'flags' 'int'
|     |     `-UnaryOperator 0x564df603e5d0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x564df603e5b8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x564df603e598 <col:23> 'const int' lvalue Var 0x564df5ffd2f8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x564df603e770 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x564df603e6a8 <col:9> 'bool' lvalue ->_read_status 0x564df5f11750
|       | `-ImplicitCastExpr 0x564df603e688 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x564df603e678 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x564df603e750 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x564df603e730 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x564df603e718 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x564df603e6d8 <col:25> 'int' lvalue Var 0x564df603d8d8 'read_status' 'int'
|           `-IntegerLiteral 0x564df603e6f8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x564df6019908 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x564df60193a0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564df6019418 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564df6019868 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x564df60194d8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564df6019558 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x564df60195d0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x564df6019720 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x564df603f598 <col:87, line:821:5>
|     |-DeclStmt 0x564df603e840 <line:809:9, col:26>
|     | `-VarDecl 0x564df603e7d8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x564df603e910 <line:810:9, col:29>
|     | `-VarDecl 0x564df603e870 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x564df603e8f8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x564df603e8d8 <col:28> 'int' 1
|     |-DeclStmt 0x564df603eb58 <line:811:9, col:38>
|     | `-VarDecl 0x564df603ea40 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x564df603eb30 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x564df603eab8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x564df603eb10 <col:29> 'Vector<T>' lvalue ParmVar 0x564df6019720 'variable' 'Vector<T> &'
|     |-WhileStmt 0x564df603f448 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x564df603f468 <line:812:16, col:61>
|     | | `-VarDecl 0x564df603eb80 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x564df603ed60 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x564df603ed30 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x564df603ed18 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x564df603ecf8 <col:29, col:61> 'String' (CXXTemporary 0x564df603ecf8)
|     | |           `-CXXMemberCallExpr 0x564df603ec88 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x564df603ebf8 <col:29> '<bound member function type>' ->find 0x564df602e0b8
|     | |             | `-CXXThisExpr 0x564df603ebe8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x564df603ecc0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x564df603ec28 <col:34> 'const char *' lvalue ParmVar 0x564df60194d8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x564df603ecd8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x564df603ec48 <col:43> 'int' lvalue ParmVar 0x564df6019558 'flags' 'int'
|     | |             `-DeclRefExpr 0x564df603ec68 <col:50> 'Args::Slot *' lvalue Var 0x564df603e7d8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x564df603ee18 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x564df603ee00 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x564df603ede0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x564df603edb0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x564df5d5e618
|     | |       `-ImplicitCastExpr 0x564df603ed98 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x564df603ed78 <col:23> 'String' lvalue Var 0x564df603eb80 'str' 'String'
|     | `-CompoundStmt 0x564df603f410 <col:64, line:819:9>
|     |   |-DeclStmt 0x564df603eed8 <line:813:13, col:23>
|     |   | `-VarDecl 0x564df603ee40 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x564df603eeb8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x564df603f058 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x564df603ef00 <col:13> '<bound member function type>' ->postparse 0x564df602e2c8
|     |   | | `-CXXThisExpr 0x564df603eef0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x564df603f000 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x564df603ef50 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x564df603ef30 <col:23> 'P' lvalue ParmVar 0x564df60195d0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x564df603ef98 <col:36> 'String' lvalue Var 0x564df603eb80 'str' 'String'
|     |   | | |-DeclRefExpr 0x564df603efb8 <col:41> 'T' lvalue Var 0x564df603ee40 'sx' 'T'
|     |   | | `-UnaryOperator 0x564df603efe8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x564df603efd8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x564df603f038 <col:53> 'Args::Slot *' lvalue Var 0x564df603e7d8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x564df603f1b0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x564df603f0e8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x564df603f0b8 <col:17> 'bool' lvalue ->_read_status 0x564df5f11750
|     |   | |   `-ImplicitCastExpr 0x564df603f098 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x564df603f088 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x564df603f188 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x564df603f120 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x564df603f100 <col:17> 'Vector<T> *' lvalue Var 0x564df603ea40 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x564df603f168 <col:30> 'T' lvalue Var 0x564df603ee40 'sx' 'T'
|     |   |-BinaryOperator 0x564df603f330 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x564df603f1c8 <col:13> 'int' lvalue Var 0x564df603e870 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x564df603f318 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x564df603f2f8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x564df603f260 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x564df603f240 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x564df603f228 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x564df603f1e8 <col:28> 'int' lvalue Var 0x564df603e870 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x564df603f208 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x564df603f2e0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x564df603f2b0 <col:49> 'bool' lvalue ->_read_status 0x564df5f11750
|     |   |         `-ImplicitCastExpr 0x564df603f290 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x564df603f280 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x564df603f3e0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x564df603f350 <col:13> 'int' lvalue ParmVar 0x564df6019558 'flags' 'int'
|     |     `-UnaryOperator 0x564df603f3c8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x564df603f3b0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x564df603f390 <col:23> 'const int' lvalue Var 0x564df5ffd2f8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x564df603f578 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x564df603f4b0 <col:9> 'bool' lvalue ->_read_status 0x564df5f11750
|       | `-ImplicitCastExpr 0x564df603f490 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x564df603f480 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x564df603f558 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x564df603f538 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x564df603f520 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x564df603f4e0 <col:25> 'int' lvalue Var 0x564df603e870 'read_status' 'int'
|           `-IntegerLiteral 0x564df603f500 <col:40> 'int' 1
|-AccessSpecDecl 0x564df6019980 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x564df60199a8 prev 0x564df5ffb5f8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x564df6019aa0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x564df6019b90 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x564df603f5d0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x564df6019c80 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x564df603f5e0 <col:25, line:830:9>
| |-CXXMethodDecl 0x564df6019d80 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x564df6019e30 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x564df6019ed8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x564df6019ed8
| | `-ParmVarDecl 0x564df6019fe8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x564df601a7a8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x564df601a7a8
|   `-ParmVarDecl 0x564df601a8b8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x564df601a058 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x564df601a1b8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x564df601a3b0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x564df601a260 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x564df601a2d8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x564df603f7c0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x564df601a668 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x564df603f630 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x564df603f5f0 <col:20> 'void *' lvalue ParmVar 0x564df601a260 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x564df601a6d0 '_slot' 'char *'
| | | `-CXXNewExpr 0x564df603f6b8 <col:32, col:45> 'char *' array Function 0x564df5b81288 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x564df603f6a0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x564df603f670 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x564df601a2d8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x564df601a730 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x564df603f780 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x564df603f740 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x564df601a2d8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x564df603f840 <col:61, line:838:9>
| |-CXXDestructorDecl 0x564df601a4b0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x564df6019c80 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x564df603f8c8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x564df603f8a8 <line:840:13, col:22> 'void' array Function 0x564df5b815e8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x564df603f890 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x564df603f860 <col:22> 'char *' lvalue ->_slot 0x564df601a6d0
| |         `-CXXThisExpr 0x564df603f850 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x564df601a5b0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x564df6019d80 Slot::store 'void ()' ]
| | `-CompoundStmt 0x564df603fab8 <col:22, line:844:9>
| |   `-CallExpr 0x564df603fa20 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x564df603fa08 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x564df603f9e8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x564df5c8d068 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x564df603fa58 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x564df603f938 <col:20> 'void *' lvalue ->_ptr 0x564df601a668
| |     |   `-CXXThisExpr 0x564df603f928 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x564df603fa88 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x564df603fa70 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x564df603f978 <col:26> 'char *' lvalue ->_slot 0x564df601a6d0
| |     |     `-CXXThisExpr 0x564df603f968 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x564df603faa0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x564df603f9b8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x564df601a730
| |         `-CXXThisExpr 0x564df603f9a8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x564df601a668 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x564df601a6d0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x564df601a730 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x564df601a928 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x564df601a928
| | `-ParmVarDecl 0x564df601aa38 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x564df601aad8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x564df601aad8
|   `-ParmVarDecl 0x564df601abe8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x564df601ad88 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x564df601ac58 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x564df601acf8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x564df601b020 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x564df601b218 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x564df601b0e8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x564df601b398 '_ptr' 'T *'
|   | | `-ParenListExpr 0x564df603faf0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x564df603fad0 <col:20> 'T *' lvalue ParmVar 0x564df601b0e8 'ptr' 'T *'
|   | `-CompoundStmt 0x564df603fb40 <col:25, line:854:9>
|   |-CXXMethodDecl 0x564df601b2e8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x564df6019d80 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x564df603fcf0 <col:22, line:857:9>
|   |   `-CallExpr 0x564df603fcc0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x564df603fb50 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x564df5d45798 0x564df5cefac8
|   |     |-CXXOperatorCallExpr 0x564df603fc50 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x564df603fbe0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564df5f52748 0x564df5f52368 0x564df5f51f98 0x564df5f51bb8 0x564df5f517d8 0x564df5f51408
|   |     | `-MemberExpr 0x564df603fbb0 <col:29> 'T *' lvalue ->_ptr 0x564df601b398
|   |     |   `-CXXThisExpr 0x564df603fba0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x564df603fc90 <col:35> 'T' lvalue ->_slot 0x564df601b3f8
|   |       `-CXXThisExpr 0x564df603fc80 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x564df601b398 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x564df601b3f8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x564df601b460 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x564df601b560 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x564df601b5b0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564df601b540 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x564df601b520 <col:31> 'int' 48
|-FieldDecl 0x564df601b5d8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x564df601b638 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x564df601b698 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x564df601b7d0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x564df602d960 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x564df602d9c0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x564df602da70 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x564df602dc98 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x564df602dba0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x564df602dde8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x564df602dd58 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x564df602e0b8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x564df602dea8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x564df602df28 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x564df602dfd0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x564df602e2c8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x564df602e180 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x564df602e1f8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x564df602e398 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x564df602e4e8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x564df602e450 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x564df602e878 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x564df602e5a8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x564df602e628 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x564df602e6d0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x564df602e788 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x564df602eaa0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x564df602e950 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x564df602e9c8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x564df602edb8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x564df602eb50 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x564df602ed18 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x564df602ec28 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class AnnoArg
         0 |   int size
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564df605a720 <../dummy_inc/click/args.hh:1294:1, line:1301:1> line:1294:7 referenced class AnnoArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564df605a838 <col:1, col:7> col:7 implicit referenced class AnnoArg
|-AccessSpecDecl 0x564df605a8c8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x564df605a9d8 <line:1295:5, line:1297:5> line:1295:5 used AnnoArg 'void (int)'
| |-ParmVarDecl 0x564df605a908 <col:13, col:17> col:17 used s 'int'
| |-CXXCtorInitializer Field 0x564df605ad28 'size' 'int'
| | `-ImplicitCastExpr 0x564df605adf0 <line:1296:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x564df605adb0 <col:16> 'int' lvalue ParmVar 0x564df605a908 's' 'int'
| `-CompoundStmt 0x564df605ae38 <col:19, line:1297:5>
|-CXXMethodDecl 0x564df605ac30 <line:1298:5, col:83> col:10 parse 'bool (const String &, int &, const ArgContext &)'
| |-ParmVarDecl 0x564df605aa98 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x564df605ab18 <col:35, col:40> col:40 result 'int &'
| `-ParmVarDecl 0x564df605ab90 <col:48, col:73> col:66 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x564df605ad90 <col:73> 'const ArgContext' lvalue Var 0x564df603fd18 'blank_args' 'const ArgContext'
|-AccessSpecDecl 0x564df605ace8 <line:1299:3, col:10> col:3 private
|-FieldDecl 0x564df605ad28 <line:1300:5, col:9> col:9 referenced size 'int'
|-CXXConstructorDecl 0x564df6073028 <line:1294:7> col:7 implicit constexpr AnnoArg 'void (const AnnoArg &)' inline default trivial noexcept-unevaluated 0x564df6073028
| `-ParmVarDecl 0x564df6073138 <col:7> col:7 'const AnnoArg &'
|-CXXConstructorDecl 0x564df60731d8 <col:7> col:7 implicit used constexpr AnnoArg 'void (AnnoArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x564df60732e8 <col:7> col:7 used 'AnnoArg &&'
| |-CXXCtorInitializer Field 0x564df605ad28 'size' 'int'
| | `-ImplicitCastExpr 0x564df6073ae8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x564df6073aa0 <col:7> 'int' xvalue .size 0x564df605ad28
| |     `-CXXStaticCastExpr 0x564df6073a70 <col:7> 'AnnoArg' xvalue static_cast<class AnnoArg &&> <NoOp>
| |       `-DeclRefExpr 0x564df6073a40 <col:7> 'AnnoArg' lvalue ParmVar 0x564df60732e8 '' 'AnnoArg &&'
| `-CompoundStmt 0x564df6073b30 <col:7>
`-CXXDestructorDecl 0x564df6073388 <col:7> col:7 implicit referenced ~AnnoArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.AnnoArg = type { i32 }
  NonVirtualBaseLLVMType:%class.AnnoArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564df5d4e4c0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564df5d4e5d8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x564df5d4e668 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x564df5d4e738 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x564df5d4e820 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x564df5d4ea38 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x564df5d4e8e0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564df5d4ebe8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x564df5d4eaf0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x564df5d4ed30 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x564df5d4eca0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x564df5d4ee78 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x564df5d4ede8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564df5d4efc0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x564df5d4ef30 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564df5d4f088 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x564df5d4f1d0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x564df5d4f140 <col:28> col:31 'int'
|-CXXMethodDecl 0x564df5d4f298 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x564df5d4f3e0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x564df5d4f350 <col:28> col:31 'int'
|-CXXMethodDecl 0x564df5d4f558 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x564df5d4f498 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564df5d4f6a0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x564df5d4f610 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564df5d4f768 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x564df5d4f928 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x564df5d4f818 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x564df5d4f890 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564df5d4fb78 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x564df5d4f9e8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x564df5d4fa60 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x564df5d4fc28 <col:86> "" ""
|-CXXMethodDecl 0x564df5d4fe98 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x564df5d4fd08 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x564df5d4fd80 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564df5d50048 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x564df5d4ff58 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x564df5d501f8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x564df5d50100 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x564df5d504c8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x564df5d502b0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x564df5d50328 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x564df5d503a0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564df5d507a8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x564df5d50590 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x564df5d50608 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x564df5d50680 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x564df5d50860 <col:115> "" ""
|-AccessSpecDecl 0x564df5d508d0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x564df5d50908 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564df5d51e20 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x564df5d51e20
| `-ParmVarDecl 0x564df5d51f28 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x564df5d51fc8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x564df5d51fc8
| `-ParmVarDecl 0x564df5d520d8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x564df5d87708 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x564df5f79500 <col:7>
|-CXXConstructorDecl 0x564df5d877e0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x564df5d877e0
| `-ParmVarDecl 0x564df5d878f8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x564df5d87968 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x564df5d87968
| `-ParmVarDecl 0x564df5d87a78 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x564df5f7bf00 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564df5f680a8 prev 0x564df5f5d2b0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564df5f681a0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x564df5f68290 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x564df5f683b8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x564df5f68538 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x564df5f686b8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x564df5f68838 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x564df5f79668 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x564df5f79ed8 <col:11>
|-CXXDestructorDecl 0x564df5f79740 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x564df5f79878 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x564df5f79878
| `-ParmVarDecl 0x564df5f79988 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x564df5f79a28 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x564df5f79a28
| `-ParmVarDecl 0x564df5f79b38 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x564df5f7c8f8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x564df5f7ca08 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x564df5f7cc88 <col:11>
|   `-ReturnStmt 0x564df5f7cc78 <col:11>
|     `-UnaryOperator 0x564df5f7cc60 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564df5f7cc50 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x564df5f7ca78 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x564df5f7ca78
  `-ParmVarDecl 0x564df5f7cb88 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564df5f688a0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564df5f689b8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x564df5f68a58 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x564df5f68ac0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x564df5f68b28 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x564df5f68b90 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x564df5f68bf0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x564df5f68cb0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x564df5f68d10 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x564df5f68d70 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x564df5f79578 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x564df5f68a58 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x564df5f79ee8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x564df5f79f40 <col:12>
|-CXXConstructorDecl 0x564df5f79ba8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x564df5f79ba8
| `-ParmVarDecl 0x564df5f79cb8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x564df5f79d58 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x564df5f79d58
| `-ParmVarDecl 0x564df5f79e68 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x564df5f7bfe0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564df5f569c0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x564df5f56ad8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x564df5f56b68 <col:16, col:22> col:16 public
|-EnumDecl 0x564df5f56b90 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x564df5f56c90 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x564df5f56d70 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f56c70 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x564df5f56c50 <col:21> 'int' 28
| `-EnumConstantDecl 0x564df5f56d20 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x564df5f56d88 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564df5f56d00 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x564df5f56ce0 <col:22> 'int' 64
|-CXXMethodDecl 0x564df5f570c8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x564df5f56db0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x564df5f56e30 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x564df5f56ea8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x564df5f56f20 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x564df5f57188 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x564df5f57388 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x564df5f57200 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x564df5f57278 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x564df5f57438 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x564df5f57598 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x564df5f574a8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x564df5f57640 <col:72> warn_unused_result ""
|-TypedefDecl 0x564df5f579a0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x564df5f57930 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x564df5f578d0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x564df5f57890 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x564df5a2e4e0 'void'
|       |-PointerType 0x564df5cd6d60 'unsigned char *'
|       | `-BuiltinType 0x564df5a2e5e0 'unsigned char'
|       |-TypedefType 0x564df5ad3330 'size_t' sugar
|       | |-Typedef 0x564df5a9ebe0 'size_t'
|       | `-BuiltinType 0x564df5a2e640 'unsigned long'
|       `-PointerType 0x564df5a2ece0 'void *'
|         `-BuiltinType 0x564df5a2e4e0 'void'
|-CXXMethodDecl 0x564df5f57e18 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x564df5f57a10 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x564df5f57a88 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x564df5f57b20 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x564df5f57ba0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x564df5f72510 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x564df5f724f8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x564df5f724c0 <col:58> 'int' 0
| |-ParmVarDecl 0x564df5f57c20 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x564df5f72538 <col:76> 'int' 0
| |-ParmVarDecl 0x564df5f57ca0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x564df5f72558 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x564df5f57ee8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x564df5f57f68 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x564df5f58028 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x564df5f580c8 <col:20>
| `-OptimizeNoneAttr 0x564df5f58120 <col:30>
|-CXXMethodDecl 0x564df5f58198 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x564df5f58238 <col:20>
| `-OptimizeNoneAttr 0x564df5f58290 <col:30>
|-CXXMethodDecl 0x564df5f58308 <line:76:5, col:55> col:13 used clone 'Packet *()'
| `-WarnUnusedResultAttr 0x564df5f583a8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x564df5f58458 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x564df5f584f8 <col:20>
| |-OptimizeNoneAttr 0x564df5f58550 <col:30>
| `-WarnUnusedResultAttr 0x564df5f58578 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x564df5f585d0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x564df5f58670 <col:20>
| `-OptimizeNoneAttr 0x564df5f586c8 <col:30>
|-CXXMethodDecl 0x564df5f58718 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x564df5f587b8 <col:20>
| `-OptimizeNoneAttr 0x564df5f58810 <col:30>
|-CXXMethodDecl 0x564df5f58858 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x564df5f588f8 <col:20>
| `-OptimizeNoneAttr 0x564df5f58950 <col:30>
|-CXXMethodDecl 0x564df5f58998 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x564df5f58a58 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x564df5f58b20 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x564df5f58be8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x564df5f58ca8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x564df5f58dc8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x564df5f72620 <col:54, line:99:5>
|   `-ReturnStmt 0x564df5f72610 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x564df5f725f8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x564df5f725c8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x564df5f690a8
|         `-CXXThisExpr 0x564df5f725b8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x564df5f58f68 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x564df5f58e78 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x564df5f726d0 <col:67, line:103:5>
|   `-BinaryOperator 0x564df5f726b0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x564df5f72648 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x564df5f690a8
|     | `-CXXThisExpr 0x564df5f72638 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x564df5f72698 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x564df5f72678 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x564df5f58e78 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x564df5f59060 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x564df5f72750 <col:33, line:107:5>
|   `-ReturnStmt 0x564df5f72740 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x564df5f72728 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x564df5f726f8 <col:16> 'void *' lvalue ->_destructor_argument 0x564df5f69110
|         `-CXXThisExpr 0x564df5f726e8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x564df5f59120 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x564df5f72d80 <col:25, line:113:5>
|   |-ParenExpr 0x564df5f72ac8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x564df5f72a98 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x564df5f72808 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x564df5f727e0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x564df5f727a8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x564df5f72778 <col:24> '<bound member function type>' ->shared 0x564df5f58198
|   |   |       `-ImplicitCastExpr 0x564df5f727c8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x564df5f72768 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x564df5f72868 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564df5f72848 <col:42> 'int' 0
|   |   `-CallExpr 0x564df5f729f8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x564df5f729e0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564df5f729c0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564df5aca090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564df5f72a38 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f728d8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x564df5f72a50 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f72900 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564df5f72a68 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564df5f72938 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x564df5f72a80 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564df5f729a8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564df5f72990 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564df5f72958 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x564df5f72cc8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x564df5f72af8 <col:2> 'unsigned char *' lvalue ->_head 0x564df5f68eb0
|   | | `-CXXThisExpr 0x564df5f72ae8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x564df5f72cb0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x564df5f72c90 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x564df5f72b38 <col:10> 'unsigned char *' lvalue ->_data 0x564df5f68f18
|   |     | `-CXXThisExpr 0x564df5f72b28 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x564df5f72c78 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x564df5f72c58 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x564df5f72b78 <col:18> 'unsigned char *' lvalue ->_tail 0x564df5f68f80
|   |         | `-CXXThisExpr 0x564df5f72b68 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x564df5f72c40 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x564df5f72c20 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x564df5f72bb8 <col:26> 'unsigned char *' lvalue ->_end 0x564df5f68fe8
|   |             | `-CXXThisExpr 0x564df5f72ba8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x564df5f72c08 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x564df5f72be8 <col:33> 'int' 0
|   `-BinaryOperator 0x564df5f72d60 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x564df5f72cf8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x564df5f690a8
|     | `-CXXThisExpr 0x564df5f72ce8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x564df5f72d48 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x564df5f72d28 <col:16> 'int' 0
|-CXXMethodDecl 0x564df5f59260 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x564df5f591d0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x564df5f59308 <col:20>
| |-OptimizeNoneAttr 0x564df5f59360 <col:30>
| `-WarnUnusedResultAttr 0x564df5f59388 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x564df5f59458 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x564df5f593c8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x564df5f59500 <col:20>
| |-OptimizeNoneAttr 0x564df5f59558 <col:30>
| `-WarnUnusedResultAttr 0x564df5f59580 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x564df5f596b8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x564df5f595c0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x564df5f59760 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x564df5f59860 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x564df5f597d0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x564df5f59908 <col:20>
| `-OptimizeNoneAttr 0x564df5f59960 <col:30>
|-CXXMethodDecl 0x564df5f59a28 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x564df5f59998 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x564df5f59ad0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x564df5f59bd0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x564df5f59b40 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x564df5f59c78 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x564df5f59d78 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x564df5f59ce8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x564df5f59e20 <col:20>
| `-OptimizeNoneAttr 0x564df5f59e78 <col:30>
|-CXXMethodDecl 0x564df5f5a008 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x564df5f59eb8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x564df5f59f30 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x564df5f72578 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x564df5f5a0b8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x564df5f5a2b8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x564df5f5a130 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x564df5f5a1a8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564df5f5a4c8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x564df5f5a378 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x564df5f5a3f0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564df5f5a6d8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x564df5f5a588 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x564df5f5a608 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x564df5f72588 <col:39> 'int' 0
|-CXXMethodDecl 0x564df5f5a7a8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x564df5f5a870 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x564df5f5a938 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x564df5f5a9f8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x564df5f5aac0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x564df5f5ac08 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x564df5f5ab78 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x564df5f5add8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x564df5f5acc8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x564df5f5ad40 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564df5f5aea8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x564df5f5af68 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x564df5f5b008 <col:20>
| `-OptimizeNoneAttr 0x564df5f5b060 <col:30>
|-CXXMethodDecl 0x564df5f5b0b0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x564df5f5b150 <col:20>
| `-OptimizeNoneAttr 0x564df5f5b1a8 <col:30>
|-CXXMethodDecl 0x564df5f5b1f8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x564df5f5b2b8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x564df5f5b380 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x564df5f5b420 <col:20>
| `-OptimizeNoneAttr 0x564df5f5b478 <col:30>
|-CXXMethodDecl 0x564df5f5b5c8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x564df5f5b4b8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x564df5f5b530 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564df5f5b718 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x564df5f5b688 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564df5f5b7f0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x564df5f5b8b0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x564df5f5b950 <col:20>
| `-OptimizeNoneAttr 0x564df5f5b9a8 <col:30>
|-CXXMethodDecl 0x564df5f5b9f8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x564df5f5ba98 <col:20>
| `-OptimizeNoneAttr 0x564df5f5baf0 <col:30>
|-CXXMethodDecl 0x564df5f5bb40 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x564df5f5bc08 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x564df5f5bca8 <col:20>
| `-OptimizeNoneAttr 0x564df5f5bd00 <col:30>
|-CXXMethodDecl 0x564df5f5bd48 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x564df5f5be68 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x564df5f5bfd8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x564df5f5bf18 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x564df5f5c0c8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x564df5f5c168 <col:20>
| `-OptimizeNoneAttr 0x564df5f5c1c0 <col:30>
|-CXXMethodDecl 0x564df5f5c210 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x564df5f5c2d0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x564df5f5c508 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x564df5f5c380 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x564df5f5c3f8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x564df5f5c5b8 <col:20>
| `-OptimizeNoneAttr 0x564df5f5c610 <col:30>
|-CXXMethodDecl 0x564df5f5c6b8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x564df5f5c758 <col:20>
| `-OptimizeNoneAttr 0x564df5f5c7b0 <col:30>
|-CXXMethodDecl 0x564df5f5c800 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x564df5f5c8a0 <col:20>
| `-OptimizeNoneAttr 0x564df5f5c8f8 <col:30>
|-CXXMethodDecl 0x564df5f5c940 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x564df5f5c9e0 <col:20>
| `-OptimizeNoneAttr 0x564df5f5ca38 <col:30>
|-CXXMethodDecl 0x564df5f5cb38 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x564df5f5ca70 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x564df5f5cbe0 <col:20>
| `-OptimizeNoneAttr 0x564df5f5cc38 <col:30>
|-CXXMethodDecl 0x564df5f5cdf8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x564df5f5cc70 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x564df5f5cce8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x564df5f5cea8 <col:20>
| `-OptimizeNoneAttr 0x564df5f5cf00 <col:30>
|-CXXMethodDecl 0x564df5f5cfa8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x564df5f5d0c8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x564df5f5d1e8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x564df5f5d288 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x564df5f5d2b0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x564df5f5d3d8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x564df5f5d478 <col:20>
| `-OptimizeNoneAttr 0x564df5f5d4d0 <col:30>
|-CXXMethodDecl 0x564df5f5d578 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x564df5f5d618 <col:20>
| `-OptimizeNoneAttr 0x564df5f5d670 <col:30>
|-AccessSpecDecl 0x564df5f5d698 <line:344:3, col:9> col:3 public
|-EnumDecl 0x564df5f5d6c0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x564df5f5d7c0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x564df5f5d810 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564df5f5d7a0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x564df5f5d780 <col:14> 'int' 48
|-CXXMethodDecl 0x564df5f5d878 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x564df5f5d918 <col:20>
| `-OptimizeNoneAttr 0x564df5f5d970 <col:30>
|-CXXMethodDecl 0x564df5f5d9e8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x564df5f5da88 <col:20>
| `-OptimizeNoneAttr 0x564df5f5dae0 <col:30>
|-CXXMethodDecl 0x564df5f5dba8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x564df5f5db18 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x564df5f5dd48 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x564df5f5dee8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x564df5f5ddf8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x564df5f5df90 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x564df5f5e090 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x564df5f5e440 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f5e070 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x564df5f5e050 <col:9> 'int' 0
| |-EnumConstantDecl 0x564df5f5e120 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x564df5f5e458 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f5e100 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x564df5f5e0e0 <col:14> 'int' 1
| |-EnumConstantDecl 0x564df5f5e1b0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x564df5f5e470 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f5e190 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x564df5f5e170 <col:14> 'int' 2
| |-EnumConstantDecl 0x564df5f5e240 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x564df5f5e488 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f5e220 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x564df5f5e200 <col:14> 'int' 3
| |-EnumConstantDecl 0x564df5f5e2d0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x564df5f5e4a0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f5e2b0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x564df5f5e290 <col:13> 'int' 4
| |-EnumConstantDecl 0x564df5f5e360 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x564df5f5e4b8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f5e340 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x564df5f5e320 <col:13> 'int' 5
| `-EnumConstantDecl 0x564df5f5e3f0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x564df5f5e4d0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564df5f5e3d0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x564df5f5e3b0 <col:14> 'int' 6
|-CXXMethodDecl 0x564df5f5e538 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x564df5f5e5d8 <col:20>
| `-OptimizeNoneAttr 0x564df5f5e630 <col:30>
|-CXXMethodDecl 0x564df5f5e728 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x564df5f5e668 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x564df5f5e7d0 <col:20>
| `-OptimizeNoneAttr 0x564df5f5e828 <col:30>
|-CXXMethodDecl 0x564df5f5e898 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x564df5f5e9c0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x564df5f5eb38 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x564df5f5ea70 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x564df5f5ec00 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x564df5f5ecc8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x564df5f5ee08 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x564df5f5ed78 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x564df5f5eeb0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x564df5f5efb0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x564df5f5f1b0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f5ef90 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x564df5f5ef70 <col:23> 'int' 0
| |-EnumConstantDecl 0x564df5f5f040 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x564df5f5f1c8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f5f020 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x564df5f5f000 <col:45> 'int' 4
| |-EnumConstantDecl 0x564df5f5f0d0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x564df5f5f1e0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f5f0b0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x564df5f5f090 <col:24> 'int' 0
| `-EnumConstantDecl 0x564df5f5f160 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x564df5f5f1f8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564df5f5f140 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x564df5f5f120 <col:47> 'int' 16
|-CXXMethodDecl 0x564df5f5f258 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x564df5f5f3c8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x564df5f5f308 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x564df5f5f470 <col:20>
| `-OptimizeNoneAttr 0x564df5f5f4c8 <col:30>
|-CXXMethodDecl 0x564df5f5f518 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x564df5f72ea0 <col:18, col:36>
|   `-ReturnStmt 0x564df5f72e90 <col:20, col:33>
|     `-ImplicitCastExpr 0x564df5f72e78 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x564df5f72e58 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x564df5f72e28 <col:27> '<bound member function type>' ->xanno 0x564df5f5d578
|           `-CXXThisExpr 0x564df5f72e18 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x564df5f5f610 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x564df5f72fb0 <col:30, col:48>
|   `-ReturnStmt 0x564df5f72fa0 <col:32, col:45>
|     `-ImplicitCastExpr 0x564df5f72f88 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x564df5f72f68 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x564df5f72f38 <col:39> '<bound member function type>' ->xanno 0x564df5f5d3d8
|           `-CXXThisExpr 0x564df5f72f28 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x564df5f5f6f8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x564df5f73148 <col:24, col:50>
|   `-ReturnStmt 0x564df5f73138 <col:26, col:47>
|     `-UnaryOperator 0x564df5f73120 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x564df5f73100 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x564df5f730e8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x564df5f73098 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x564df5f683b8
|         |   `-CXXMemberCallExpr 0x564df5f73078 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x564df5f73048 <col:34> '<bound member function type>' ->xanno 0x564df5f5d578
|         |       `-CXXThisExpr 0x564df5f73038 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x564df5f730c8 <col:46> 'int' 0
|-CXXMethodDecl 0x564df5f5f800 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x564df5f73318 <col:36, col:62>
|   `-ReturnStmt 0x564df5f73308 <col:38, col:59>
|     `-UnaryOperator 0x564df5f732f0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x564df5f732d0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x564df5f732b8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x564df5f73230 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x564df5f683b8
|         |   `-CXXMemberCallExpr 0x564df5f73210 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x564df5f731e0 <col:46> '<bound member function type>' ->xanno 0x564df5f5d3d8
|         |       `-CXXThisExpr 0x564df5f731d0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x564df5f73260 <col:58> 'int' 0
|-CXXMethodDecl 0x564df5f5f918 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x564df5f734b0 <col:26, col:53>
|   `-ReturnStmt 0x564df5f734a0 <col:28, col:50>
|     `-UnaryOperator 0x564df5f73488 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x564df5f73468 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x564df5f73450 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x564df5f73400 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x564df5f686b8
|         |   `-CXXMemberCallExpr 0x564df5f733e0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x564df5f733b0 <col:36> '<bound member function type>' ->xanno 0x564df5f5d578
|         |       `-CXXThisExpr 0x564df5f733a0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x564df5f73430 <col:49> 'int' 0
|-CXXMethodDecl 0x564df5f5fa38 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x564df5f73688 <col:38, col:65>
|   `-ReturnStmt 0x564df5f73678 <col:40, col:62>
|     `-UnaryOperator 0x564df5f73660 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x564df5f73640 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x564df5f73628 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x564df5f73598 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x564df5f686b8
|         |   `-CXXMemberCallExpr 0x564df5f73578 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x564df5f73548 <col:48> '<bound member function type>' ->xanno 0x564df5f5d3d8
|         |       `-CXXThisExpr 0x564df5f73538 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x564df5f735c8 <col:61> 'int' 0
|-CXXMethodDecl 0x564df5f5fbe8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x564df5f5faf0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x564df5f73d58 <col:34, line:463:5>
|   |-ParenExpr 0x564df5f73ba0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x564df5f73b70 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x564df5f737d8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564df5f737a8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564df5f736f8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564df5f736e0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564df5f736a0 <col:23> 'int' lvalue ParmVar 0x564df5f5faf0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564df5f736c0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564df5f73788 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564df5f73758 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564df5f73718 <col:33> 'int' lvalue ParmVar 0x564df5f5faf0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x564df5f73770 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x564df5f73738 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564df5f5d7c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x564df5f73838 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564df5f73818 <col:56> 'int' 0
|   |   `-CallExpr 0x564df5f73ad0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x564df5f73ab8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564df5f73a98 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564df5aca090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564df5f73b10 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f73928 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x564df5f73b28 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f73958 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564df5f73b40 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564df5f73990 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x564df5f73b58 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564df5f73a80 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564df5f73a68 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564df5f73a28 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x564df5f73d48 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x564df5f73d30 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x564df5f73d10 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x564df5f73ce0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x564df5f73c90 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x564df5f683b8
|         |   `-CXXMemberCallExpr 0x564df5f73c70 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x564df5f73c40 <col:9> '<bound member function type>' ->xanno 0x564df5f5d3d8
|         |       `-CXXThisExpr 0x564df5f73c30 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x564df5f73cf8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x564df5f73cc0 <col:21> 'int' lvalue ParmVar 0x564df5f5faf0 'i' 'int'
|-CXXMethodDecl 0x564df5f5fe38 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x564df5f5fca8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x564df5f5fd20 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x564df5f743e8 <col:40, line:472:5>
|   |-ParenExpr 0x564df5f74200 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x564df5f741d0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x564df5f73eb0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564df5f73e80 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564df5f73dd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564df5f73db8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564df5f73d78 <col:23> 'int' lvalue ParmVar 0x564df5f5fca8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564df5f73d98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564df5f73e60 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564df5f73e30 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564df5f73df0 <col:33> 'int' lvalue ParmVar 0x564df5f5fca8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x564df5f73e48 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x564df5f73e10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564df5f5d7c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x564df5f73f10 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564df5f73ef0 <col:56> 'int' 0
|   |   `-CallExpr 0x564df5f74130 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x564df5f74118 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564df5f740f8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564df5aca090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564df5f74170 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f73f80 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x564df5f74188 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f73fb0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564df5f741a0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564df5f73fe8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x564df5f741b8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564df5f740e0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564df5f740c8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564df5f74088 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x564df5f743c8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x564df5f74370 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x564df5f74340 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x564df5f742f0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x564df5f683b8
|     | |   `-CXXMemberCallExpr 0x564df5f742d0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x564df5f742a0 <col:2> '<bound member function type>' ->xanno 0x564df5f5d578
|     | |       `-CXXThisExpr 0x564df5f74290 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x564df5f74358 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x564df5f74320 <col:14> 'int' lvalue ParmVar 0x564df5f5fca8 'i' 'int'
|     `-ImplicitCastExpr 0x564df5f743b0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x564df5f74390 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x564df5f5fd20 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x564df5f5fff8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x564df5f5ff00 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x564df5f74b68 <col:36, line:485:5>
|   |-ParenExpr 0x564df5f748d0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x564df5f748a0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564df5f74580 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564df5f74550 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564df5f74460 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564df5f74448 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564df5f74408 <col:23> 'int' lvalue ParmVar 0x564df5f5ff00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564df5f74428 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564df5f74530 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564df5f74518 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564df5f74480 <col:33> 'int' lvalue ParmVar 0x564df5f5ff00 'i' 'int'
|   |   |     `-BinaryOperator 0x564df5f744f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564df5f744e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564df5f744a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564df5f5d7c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564df5f744c0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x564df5f745e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564df5f745c0 <col:60> 'int' 0
|   |   `-CallExpr 0x564df5f74800 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564df5f747e8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564df5f747c8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564df5aca090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564df5f74840 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f74650 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x564df5f74858 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f74688 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564df5f74870 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564df5f746c0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x564df5f74888 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564df5f747b0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564df5f74798 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564df5f74758 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x564df5f74b58 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x564df5f74b40 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x564df5f74b28 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x564df5f74af8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x564df5f74a98 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x564df5f74a68 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x564df5f749e0 <col:61, col:70> 'char const[48]' lvalue ->c 0x564df5f68290
|             |   `-CXXMemberCallExpr 0x564df5f749c0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x564df5f74990 <col:61> '<bound member function type>' ->xanno 0x564df5f5d3d8
|             |       `-CXXThisExpr 0x564df5f74980 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x564df5f74a80 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x564df5f74a10 <col:74> 'int' lvalue ParmVar 0x564df5f5ff00 'i' 'int'
|-CXXMethodDecl 0x564df5f60248 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x564df5f600b8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x564df5f60130 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x564df5f752b8 <col:42, line:500:5>
|   |-ParenExpr 0x564df5f75050 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x564df5f75020 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564df5f74d00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564df5f74cd0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564df5f74be0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564df5f74bc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564df5f74b88 <col:23> 'int' lvalue ParmVar 0x564df5f600b8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564df5f74ba8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564df5f74cb0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564df5f74c98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564df5f74c00 <col:33> 'int' lvalue ParmVar 0x564df5f600b8 'i' 'int'
|   |   |     `-BinaryOperator 0x564df5f74c78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564df5f74c60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564df5f74c20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564df5f5d7c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564df5f74c40 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x564df5f74d60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564df5f74d40 <col:60> 'int' 0
|   |   `-CallExpr 0x564df5f74f80 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564df5f74f68 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564df5f74f48 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564df5aca090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564df5f74fc0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f74dd0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x564df5f74fd8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f74e08 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564df5f74ff0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564df5f74e40 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x564df5f75008 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564df5f74f30 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564df5f74f18 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564df5f74ed8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x564df5f75298 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x564df5f75248 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x564df5f75218 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x564df5f751c0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x564df5f75190 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x564df5f75140 <col:48, col:57> 'char [48]' lvalue ->c 0x564df5f68290
|     |     |   `-CXXMemberCallExpr 0x564df5f75120 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x564df5f750f0 <col:48> '<bound member function type>' ->xanno 0x564df5f5d578
|     |     |       `-CXXThisExpr 0x564df5f750e0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x564df5f751a8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x564df5f75170 <col:61> 'int' lvalue ParmVar 0x564df5f600b8 'i' 'int'
|     `-ImplicitCastExpr 0x564df5f75280 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x564df5f75260 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x564df5f60130 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x564df5f60408 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x564df5f60310 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x564df5f75a18 <col:35, line:513:5>
|   |-ParenExpr 0x564df5f75728 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x564df5f756f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564df5f75450 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564df5f75420 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564df5f75330 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564df5f75318 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564df5f752d8 <col:23> 'int' lvalue ParmVar 0x564df5f60310 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564df5f752f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564df5f75400 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564df5f753e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564df5f75350 <col:33> 'int' lvalue ParmVar 0x564df5f60310 'i' 'int'
|   |   |     `-BinaryOperator 0x564df5f753c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564df5f753b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564df5f75370 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564df5f5d7c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564df5f75390 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x564df5f754b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564df5f75490 <col:60> 'int' 0
|   |   `-CallExpr 0x564df5f75658 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564df5f75640 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564df5f75620 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564df5aca090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564df5f75698 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f75520 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x564df5f756b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f75558 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564df5f756c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564df5f75590 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x564df5f756e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564df5f75608 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564df5f755f0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564df5f755b0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x564df5f75a08 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x564df5f759f0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x564df5f759d8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x564df5f759a8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x564df5f75920 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x564df5f758f0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x564df5f758a0 <col:60, col:69> 'char const[48]' lvalue ->c 0x564df5f68290
|             |   `-CXXMemberCallExpr 0x564df5f75880 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x564df5f75850 <col:60> '<bound member function type>' ->xanno 0x564df5f5d3d8
|             |       `-CXXThisExpr 0x564df5f75840 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x564df5f75908 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x564df5f758d0 <col:73> 'int' lvalue ParmVar 0x564df5f60310 'i' 'int'
|-CXXMethodDecl 0x564df5f60658 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x564df5f604c8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x564df5f60540 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x564df5f76138 <col:41, line:528:5>
|   |-ParenExpr 0x564df5f75ec0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x564df5f75e90 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564df5f75bb0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564df5f75b80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564df5f75a90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564df5f75a78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564df5f75a38 <col:23> 'int' lvalue ParmVar 0x564df5f604c8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564df5f75a58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564df5f75b60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564df5f75b48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564df5f75ab0 <col:33> 'int' lvalue ParmVar 0x564df5f604c8 'i' 'int'
|   |   |     `-BinaryOperator 0x564df5f75b28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564df5f75b10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564df5f75ad0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564df5f5d7c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564df5f75af0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x564df5f75c10 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564df5f75bf0 <col:60> 'int' 0
|   |   `-CallExpr 0x564df5f75df0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564df5f75dd8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564df5f75db8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564df5aca090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564df5f75e30 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f75c80 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x564df5f75e48 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f75cb8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564df5f75e60 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564df5f75cf0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x564df5f75e78 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564df5f75da0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564df5f75d88 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564df5f75d48 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x564df5f76118 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x564df5f760c8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x564df5f76098 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x564df5f76040 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x564df5f76000 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x564df5f75fb0 <col:47, col:56> 'char [48]' lvalue ->c 0x564df5f68290
|     |     |   `-CXXMemberCallExpr 0x564df5f75f90 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x564df5f75f60 <col:47> '<bound member function type>' ->xanno 0x564df5f5d578
|     |     |       `-CXXThisExpr 0x564df5f75f50 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x564df5f76018 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x564df5f75fe0 <col:60> 'int' lvalue ParmVar 0x564df5f604c8 'i' 'int'
|     `-ImplicitCastExpr 0x564df5f76100 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x564df5f760e0 <col:65> 'int16_t':'short' lvalue ParmVar 0x564df5f60540 'x' 'int16_t':'short'
|-CXXMethodDecl 0x564df5f60818 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x564df5f60720 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x564df5f76808 <col:36, line:541:5>
|   |-ParenExpr 0x564df5f765a8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x564df5f76578 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564df5f762d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564df5f762a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564df5f761b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564df5f76198 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564df5f76158 <col:23> 'int' lvalue ParmVar 0x564df5f60720 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564df5f76178 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564df5f76280 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564df5f76268 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564df5f761d0 <col:33> 'int' lvalue ParmVar 0x564df5f60720 'i' 'int'
|   |   |     `-BinaryOperator 0x564df5f76248 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564df5f76230 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564df5f761f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564df5f5d7c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564df5f76210 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x564df5f76330 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564df5f76310 <col:60> 'int' 0
|   |   `-CallExpr 0x564df5f764d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564df5f764c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564df5f764a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564df5aca090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564df5f76518 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f763a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x564df5f76530 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f763d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564df5f76548 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564df5f76410 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x564df5f76560 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564df5f76488 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564df5f76470 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564df5f76430 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x564df5f767f8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x564df5f767e0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x564df5f767c8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x564df5f76798 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x564df5f76740 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x564df5f76710 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x564df5f766c0 <col:61, col:70> 'char const[48]' lvalue ->c 0x564df5f68290
|             |   `-CXXMemberCallExpr 0x564df5f766a0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x564df5f76670 <col:61> '<bound member function type>' ->xanno 0x564df5f5d3d8
|             |       `-CXXThisExpr 0x564df5f76660 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x564df5f76728 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x564df5f766f0 <col:74> 'int' lvalue ParmVar 0x564df5f60720 'i' 'int'
|-CXXMethodDecl 0x564df5f609e8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x564df5f608d8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x564df5f60950 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x564df5f60a98 <col:20>
| `-OptimizeNoneAttr 0x564df5f60af0 <col:30>
|-CXXMethodDecl 0x564df5f60c28 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x564df5f60b30 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x564df5f76ed8 <col:35, line:562:5>
|   |-ParenExpr 0x564df5f76c78 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x564df5f76c48 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564df5f769a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564df5f76970 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564df5f76880 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564df5f76868 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564df5f76828 <col:23> 'int' lvalue ParmVar 0x564df5f60b30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564df5f76848 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564df5f76950 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564df5f76938 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564df5f768a0 <col:33> 'int' lvalue ParmVar 0x564df5f60b30 'i' 'int'
|   |   |     `-BinaryOperator 0x564df5f76918 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564df5f76900 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564df5f768c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564df5f5d7c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564df5f768e0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x564df5f76a00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564df5f769e0 <col:60> 'int' 0
|   |   `-CallExpr 0x564df5f76ba8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564df5f76b90 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564df5f76b70 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564df5aca090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564df5f76be8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f76a70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x564df5f76c00 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f76aa8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564df5f76c18 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564df5f76ae0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x564df5f76c30 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564df5f76b58 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564df5f76b40 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564df5f76b00 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x564df5f76ec8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x564df5f76eb0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x564df5f76e98 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x564df5f76e68 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x564df5f76e10 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x564df5f76de0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x564df5f76d90 <col:60, col:69> 'char const[48]' lvalue ->c 0x564df5f68290
|             |   `-CXXMemberCallExpr 0x564df5f76d70 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x564df5f76d40 <col:60> '<bound member function type>' ->xanno 0x564df5f5d3d8
|             |       `-CXXThisExpr 0x564df5f76d30 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x564df5f76df8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x564df5f76dc0 <col:73> 'int' lvalue ParmVar 0x564df5f60b30 'i' 'int'
|-CXXMethodDecl 0x564df5f60e38 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x564df5f60ce8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x564df5f60d60 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x564df5f775b8 <col:41, line:577:5>
|   |-ParenExpr 0x564df5f77348 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x564df5f77318 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564df5f77070 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564df5f77040 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564df5f76f50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564df5f76f38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564df5f76ef8 <col:23> 'int' lvalue ParmVar 0x564df5f60ce8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564df5f76f18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564df5f77020 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564df5f77008 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564df5f76f70 <col:33> 'int' lvalue ParmVar 0x564df5f60ce8 'i' 'int'
|   |   |     `-BinaryOperator 0x564df5f76fe8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564df5f76fd0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564df5f76f90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564df5f5d7c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564df5f76fb0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x564df5f770d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564df5f770b0 <col:60> 'int' 0
|   |   `-CallExpr 0x564df5f77278 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564df5f77260 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564df5f77240 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564df5aca090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564df5f772b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f77140 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x564df5f772d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f77178 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564df5f772e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564df5f771b0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x564df5f77300 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564df5f77228 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564df5f77210 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564df5f771d0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x564df5f77598 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x564df5f77548 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x564df5f77518 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x564df5f774b8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x564df5f77488 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x564df5f77438 <col:47, col:56> 'char [48]' lvalue ->c 0x564df5f68290
|     |     |   `-CXXMemberCallExpr 0x564df5f77418 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x564df5f773e8 <col:47> '<bound member function type>' ->xanno 0x564df5f5d578
|     |     |       `-CXXThisExpr 0x564df5f773d8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x564df5f774a0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x564df5f77468 <col:60> 'int' lvalue ParmVar 0x564df5f60ce8 'i' 'int'
|     `-ImplicitCastExpr 0x564df5f77580 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x564df5f77560 <col:65> 'int32_t':'int' lvalue ParmVar 0x564df5f60d60 'x' 'int32_t':'int'
|-CXXMethodDecl 0x564df5f60ff8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x564df5f60f00 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x564df5f77ce8 <col:36, line:591:5>
|   |-ParenExpr 0x564df5f77a28 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x564df5f779f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564df5f77750 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564df5f77720 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564df5f77630 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564df5f77618 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564df5f775d8 <col:23> 'int' lvalue ParmVar 0x564df5f60f00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564df5f775f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564df5f77700 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564df5f776e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564df5f77650 <col:33> 'int' lvalue ParmVar 0x564df5f60f00 'i' 'int'
|   |   |     `-BinaryOperator 0x564df5f776c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564df5f776b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564df5f77670 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564df5f5d7c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564df5f77690 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x564df5f777b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564df5f77790 <col:60> 'int' 0
|   |   `-CallExpr 0x564df5f77958 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564df5f77940 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564df5f77920 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564df5aca090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564df5f77998 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f77820 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x564df5f779b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f77858 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564df5f779c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564df5f77890 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x564df5f779e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564df5f77908 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564df5f778f0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564df5f778b0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x564df5f77cd8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x564df5f77cc0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x564df5f77ca8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x564df5f77c78 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x564df5f77bf0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x564df5f77bc0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x564df5f77b70 <col:61, col:70> 'char const[48]' lvalue ->c 0x564df5f68290
|             |   `-CXXMemberCallExpr 0x564df5f77b50 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x564df5f77b20 <col:61> '<bound member function type>' ->xanno 0x564df5f5d3d8
|             |       `-CXXThisExpr 0x564df5f77b10 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x564df5f77bd8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x564df5f77ba0 <col:74> 'int' lvalue ParmVar 0x564df5f60f00 'i' 'int'
|-CXXMethodDecl 0x564df5f61248 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x564df5f610b8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x564df5f61130 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x564df5f783c8 <col:42, line:606:5>
|   |-ParenExpr 0x564df5f78158 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x564df5f78128 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564df5f77e80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564df5f77e50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564df5f77d60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564df5f77d48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564df5f77d08 <col:23> 'int' lvalue ParmVar 0x564df5f610b8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564df5f77d28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564df5f77e30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564df5f77e18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564df5f77d80 <col:33> 'int' lvalue ParmVar 0x564df5f610b8 'i' 'int'
|   |   |     `-BinaryOperator 0x564df5f77df8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564df5f77de0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564df5f77da0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564df5f5d7c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564df5f77dc0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x564df5f77ee0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564df5f77ec0 <col:60> 'int' 0
|   |   `-CallExpr 0x564df5f78088 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564df5f78070 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564df5f78050 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564df5aca090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564df5f780c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f77f50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x564df5f780e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f77f88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564df5f780f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564df5f77fc0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x564df5f78110 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564df5f78038 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564df5f78020 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564df5f77fe0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x564df5f783a8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x564df5f78358 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x564df5f78328 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x564df5f782c8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x564df5f78298 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x564df5f78248 <col:48, col:57> 'char [48]' lvalue ->c 0x564df5f68290
|     |     |   `-CXXMemberCallExpr 0x564df5f78228 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x564df5f781f8 <col:48> '<bound member function type>' ->xanno 0x564df5f5d578
|     |     |       `-CXXThisExpr 0x564df5f781e8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x564df5f782b0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x564df5f78278 <col:61> 'int' lvalue ParmVar 0x564df5f610b8 'i' 'int'
|     `-ImplicitCastExpr 0x564df5f78390 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x564df5f78370 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x564df5f61130 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x564df5f613e0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x564df5f61310 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x564df5f78c38 <col:33, line:620:5>
|   |-ParenExpr 0x564df5f789b0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x564df5f78980 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x564df5f785d0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564df5f785a0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564df5f78440 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564df5f78428 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564df5f783e8 <col:23> 'int' lvalue ParmVar 0x564df5f61310 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564df5f78408 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564df5f78580 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x564df5f78568 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564df5f78460 <col:33> 'int' lvalue ParmVar 0x564df5f61310 'i' 'int'
|   |   |     `-BinaryOperator 0x564df5f78548 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564df5f78530 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564df5f78480 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564df5f5d7c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x564df5f78508 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x564df5f784f0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x564df5f784b8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x564df5f78630 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564df5f78610 <col:79> 'int' 0
|   |   `-CallExpr 0x564df5f788e0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x564df5f788c8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564df5f788a8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564df5aca090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564df5f78920 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f78718 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x564df5f78938 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f78760 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564df5f78950 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564df5f78798 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x564df5f78968 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564df5f78890 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564df5f78878 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564df5f78838 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x564df5f78c28 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x564df5f78c10 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x564df5f78bf8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x564df5f78bc8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x564df5f78b40 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x564df5f78b10 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x564df5f78ac0 <col:67, col:76> 'char const[48]' lvalue ->c 0x564df5f68290
|             |   `-CXXMemberCallExpr 0x564df5f78aa0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x564df5f78a70 <col:67> '<bound member function type>' ->xanno 0x564df5f5d3d8
|             |       `-CXXThisExpr 0x564df5f78a60 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x564df5f78b28 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x564df5f78af0 <col:80> 'int' lvalue ParmVar 0x564df5f61310 'i' 'int'
|-CXXMethodDecl 0x564df5f615f8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x564df5f614a0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x564df5f61520 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x564df5f79460 <col:45, line:635:5>
|   |-ParenExpr 0x564df5f791a8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x564df5f79178 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x564df5f78e40 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564df5f78e10 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564df5f78cb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564df5f78c98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564df5f78c58 <col:23> 'int' lvalue ParmVar 0x564df5f614a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564df5f78c78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564df5f78df0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x564df5f78dd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564df5f78cd0 <col:33> 'int' lvalue ParmVar 0x564df5f614a0 'i' 'int'
|   |   |     `-BinaryOperator 0x564df5f78db8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564df5f78da0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564df5f78cf0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564df5f5d7c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x564df5f78d78 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x564df5f78d60 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x564df5f78d28 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x564df5f78ea0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564df5f78e80 <col:79> 'int' 0
|   |   `-CallExpr 0x564df5f790d8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x564df5f790c0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564df5f790a0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564df5aca090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564df5f79118 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f78f10 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x564df5f79130 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564df5f78f58 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564df5f79148 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564df5f78f90 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x564df5f79160 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564df5f79088 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564df5f79070 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564df5f79028 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x564df5f79440 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x564df5f793a8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x564df5f79378 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x564df5f79318 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x564df5f792e8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x564df5f79298 <col:54, col:63> 'char [48]' lvalue ->c 0x564df5f68290
|     |     |   `-CXXMemberCallExpr 0x564df5f79278 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x564df5f79248 <col:54> '<bound member function type>' ->xanno 0x564df5f5d578
|     |     |       `-CXXThisExpr 0x564df5f79238 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x564df5f79300 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x564df5f792c8 <col:67> 'int' lvalue ParmVar 0x564df5f614a0 'i' 'int'
|     `-CXXConstCastExpr 0x564df5f79410 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x564df5f793f8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x564df5f793c0 <col:91> 'const void *' lvalue ParmVar 0x564df5f61520 'x' 'const void *'
|-CXXMethodDecl 0x564df5f616c8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x564df5f794e8 <col:34, line:640:5>
|   `-ReturnStmt 0x564df5f794d8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x564df5f794c0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x564df5f79490 <col:16> 'Packet *' lvalue ->_data_packet 0x564df5f68e48
|         `-CXXThisExpr 0x564df5f79480 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x564df5f61808 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x564df5f61778 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x564df5f725a8 <col:46> 'bool' true
|-CXXMethodDecl 0x564df5f61988 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x564df5f618c0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x564df5f61a30 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x564df5f621e0 <line:660:22> "" ""
| |-EnumConstantDecl 0x564df5f61b30 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564df5f62250 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f61b10 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x564df5f61af0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x564df5f56c90 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x564df5f61bc0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564df5f62268 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f61ba0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x564df5f61b80 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x564df5f56d20 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x564df5f61c50 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564df5f62280 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f61c30 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x564df5f61c10 <col:21> 'int' 0
| |-EnumConstantDecl 0x564df5f61ce0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564df5f62298 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f61cc0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x564df5f61ca0 <col:19> 'int' 16
| |-EnumConstantDecl 0x564df5f61d70 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564df5f622b0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f61d50 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x564df5f61d30 <col:21> 'int' 16
| |-EnumConstantDecl 0x564df5f61e00 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564df5f622c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f61de0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x564df5f61dc0 <col:19> 'int' 32
| |-EnumConstantDecl 0x564df5f61e90 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564df5f622e0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f61e70 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x564df5f61e50 <col:19> 'int' EnumConstant 0x564df5f61ce0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x564df5f61f20 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564df5f622f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f61f00 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x564df5f61ee0 <col:19> 'int' EnumConstant 0x564df5f61e00 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x564df5f61ff0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564df5f62310 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f61fd0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x564df5f61fb0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x564df5f61f70 <col:23> 'int' EnumConstant 0x564df5f61f20 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x564df5f61f90 <col:40> 'int' 2
| |-EnumConstantDecl 0x564df5f620c0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564df5f62328 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df5f620a0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x564df5f62080 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x564df5f62040 <col:23> 'int' EnumConstant 0x564df5f61f20 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x564df5f62060 <col:40> 'int' 4
| `-EnumConstantDecl 0x564df5f62190 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x564df5f62340 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564df5f62170 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x564df5f62150 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x564df5f62110 <col:23> 'int' EnumConstant 0x564df5f61f20 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x564df5f62130 <col:40> 'int' 8
|-CXXMethodDecl 0x564df5f62380 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x564df5f62420 <col:68> "" ""
|-CXXMethodDecl 0x564df5f624b8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x564df5f62558 <col:45> "" ""
|-CXXMethodDecl 0x564df5f625f0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x564df5f62690 <col:57> "" ""
|-CXXMethodDecl 0x564df5f62728 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x564df5f627c8 <col:45> "" ""
|-CXXMethodDecl 0x564df5f62860 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x564df5f62900 <col:57> "" ""
|-CXXMethodDecl 0x564df5f62990 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x564df5f62a30 <col:51> "" ""
|-CXXMethodDecl 0x564df5f62ac0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x564df5f62b60 <col:63> "" ""
|-CXXMethodDecl 0x564df5f62bf0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x564df5f62c90 <col:53> "" ""
|-CXXMethodDecl 0x564df5f62d20 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x564df5f62dc0 <col:65> "" ""
|-CXXMethodDecl 0x564df5f62ed8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x564df5f62e48 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x564df5f62f80 <col:61> "" ""
|-CXXMethodDecl 0x564df5f63118 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x564df5f63008 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x564df5f63080 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x564df5f631c8 <col:67> "" ""
|-CXXMethodDecl 0x564df5f632e0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x564df5f63250 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x564df5f63388 <col:63> "" ""
|-CXXMethodDecl 0x564df5f63520 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x564df5f63410 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x564df5f63488 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x564df5f635d0 <col:69> "" ""
|-CXXMethodDecl 0x564df5f636e8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x564df5f63658 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x564df5f63790 <col:63> "" ""
|-CXXMethodDecl 0x564df5f65e68 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x564df5f65d58 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x564df5f65dd0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x564df5f65f18 <col:69> "" ""
|-CXXMethodDecl 0x564df5f66030 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x564df5f65fa0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x564df5f660d8 <col:62> "" ""
|-CXXMethodDecl 0x564df5f66270 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x564df5f66160 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x564df5f661d8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x564df5f66320 <col:68> "" ""
|-CXXMethodDecl 0x564df5f66438 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x564df5f663a8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x564df5f664e0 <col:63> "" ""
|-CXXMethodDecl 0x564df5f66678 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x564df5f66568 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x564df5f665e0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x564df5f66728 <col:69> "" ""
|-CXXMethodDecl 0x564df5f667b8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x564df5f66858 <col:64> "" ""
|-CXXMethodDecl 0x564df5f668e8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x564df5f66988 <col:52> "" ""
|-CXXMethodDecl 0x564df5f66a18 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x564df5f66ab8 <col:67> "" ""
|-CXXMethodDecl 0x564df5f66b48 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x564df5f66be8 <col:55> "" ""
|-CXXMethodDecl 0x564df5f66d00 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x564df5f66c70 <col:32> col:35 'int'
| `-DeprecatedAttr 0x564df5f66da8 <col:58> "" ""
|-CXXMethodDecl 0x564df5f66f40 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x564df5f66e30 <col:33> col:36 'int'
| |-ParmVarDecl 0x564df5f66ea8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x564df5f66ff0 <col:62> "" ""
|-CXXMethodDecl 0x564df5f67108 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x564df5f67078 <col:32> col:35 'int'
| `-DeprecatedAttr 0x564df5f671b0 <col:58> "" ""
|-CXXMethodDecl 0x564df5f67348 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x564df5f67238 <col:33> col:36 'int'
| |-ParmVarDecl 0x564df5f672b0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x564df5f673f8 <col:62> "" ""
|-CXXMethodDecl 0x564df5f67510 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x564df5f67480 <col:34> col:37 'int'
| `-DeprecatedAttr 0x564df5f675b8 <col:60> "" ""
|-CXXMethodDecl 0x564df5f67750 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x564df5f67640 <col:34> col:37 'int'
| |-ParmVarDecl 0x564df5f676b8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x564df5f67800 <col:64> "" ""
|-CXXMethodDecl 0x564df5f67918 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x564df5f67888 <col:32> col:35 'int'
| `-DeprecatedAttr 0x564df5f679c0 <col:58> "" ""
|-CXXMethodDecl 0x564df5f67b58 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x564df5f67a48 <col:33> col:36 'int'
| |-ParmVarDecl 0x564df5f67ac0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x564df5f67c08 <col:62> "" ""
|-CXXMethodDecl 0x564df5f67d20 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x564df5f67c90 <col:33> col:36 'int'
| `-DeprecatedAttr 0x564df5f67dc8 <col:59> "" ""
|-CXXMethodDecl 0x564df5f67f60 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x564df5f67e50 <col:33> col:36 'int'
| |-ParmVarDecl 0x564df5f67ec8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x564df5f68010 <col:63> "" ""
|-AccessSpecDecl 0x564df5f68080 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x564df5f680a8 prev 0x564df5f5d2b0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x564df5f681a0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x564df5f68290 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x564df5f683b8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x564df5f68538 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x564df5f686b8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x564df5f68838 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x564df5f79668 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x564df5f79ed8 <col:11>
| |-CXXDestructorDecl 0x564df5f79740 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x564df5f79878 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x564df5f79878
| | `-ParmVarDecl 0x564df5f79988 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x564df5f79a28 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x564df5f79a28
| | `-ParmVarDecl 0x564df5f79b38 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x564df5f7c8f8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x564df5f7ca08 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x564df5f7cc88 <col:11>
| |   `-ReturnStmt 0x564df5f7cc78 <col:11>
| |     `-UnaryOperator 0x564df5f7cc60 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x564df5f7cc50 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x564df5f7ca78 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x564df5f7ca78
|   `-ParmVarDecl 0x564df5f7cb88 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x564df5f688a0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x564df5f689b8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x564df5f68a58 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x564df5f68ac0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x564df5f68b28 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x564df5f68b90 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x564df5f68bf0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x564df5f68cb0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x564df5f68d10 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x564df5f68d70 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x564df5f79578 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x564df5f68a58 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x564df5f79ee8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x564df5f79f40 <col:12>
| |-CXXConstructorDecl 0x564df5f79ba8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x564df5f79ba8
| | `-ParmVarDecl 0x564df5f79cb8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x564df5f79d58 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x564df5f79d58
| | `-ParmVarDecl 0x564df5f79e68 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x564df5f7bfe0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x564df5f68de8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x564df5f68e48 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x564df5f68eb0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x564df5f68f18 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x564df5f68f80 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x564df5f68fe8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x564df5f69048 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x564df5f690a8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x564df5f69110 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x564df5f69198 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x564df5f68de8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x564df5f79510 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x564df5f69048 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x564df5f79f50 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x564df5f79fb0 <col:21, line:755:5>
|-CXXConstructorDecl 0x564df5f69338 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x564df5f69278 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x564df5f69430 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x564df5f69618 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x564df5f69520 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x564df5f698e8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x564df5f696d0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x564df5f69748 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x564df5f697c0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564df5f69b08 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x564df5f699b8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x564df5f69a30 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x564df5f720e8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x564df5f69bc8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x564df5f69c40 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x564df5f69cb8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x564df5f72240 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x564df5f721b0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564df5f72388 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x564df5f722f8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x564df5f72480 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned char>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned char * _ptr
        24 |   unsigned char _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned char>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564df604aee0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564df604aff8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x564df604b088 <col:16, col:22> col:16 public
|-EnumDecl 0x564df604b0b0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x564df604b1b0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x564df604b400 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df604b190 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x564df604b170 <col:21> 'int' 0
| |-EnumConstantDecl 0x564df604b240 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x564df604b418 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df604b220 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x564df604b200 <col:24> 'int' 22
| |-EnumConstantDecl 0x564df604b2d0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x564df604b430 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df604b2b0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x564df604b290 <col:24> 'int' 34
| |-EnumConstantDecl 0x564df604b360 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x564df604b448 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564df604b340 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x564df604b320 <col:25> 'int' 95
| `-EnumConstantDecl 0x564df604b3b0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x564df604cdc0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x564df604d1f8 <col:7>
|-CXXConstructorDecl 0x564df604cec8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x564df604cec8
| `-ParmVarDecl 0x564df604cfd8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x564df604d078 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x564df604d188 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x564df60ac3d0 <col:7>
`-CXXDestructorDecl 0x564df604f318 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564df604b478 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x564df604b5d8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x564df604b668 <col:32, col:38> col:32 public
|-TypedefDecl 0x564df604b6a0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x564df5b835e0 'uint32_t' sugar
|   |-Typedef 0x564df5a974c8 'uint32_t'
|   `-TypedefType 0x564df5a705a0 '__uint32_t' sugar
|     |-Typedef 0x564df5a70198 '__uint32_t'
|     `-BuiltinType 0x564df5a2e620 'unsigned int'
|-CXXConstructorDecl 0x564df604b7e8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x564df604b710 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x564df604ccc8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x564df604d208 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x564df604c580 'base' 'int'
| | `-ImplicitCastExpr 0x564df604cd68 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x564df604cd28 <col:16> 'int' lvalue ParmVar 0x564df604b710 'b' 'int'
| `-CompoundStmt 0x564df604d278 <col:19, line:1046:5>
|-CXXMethodDecl 0x564df604bce0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x564df604b8b0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x564df604b930 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x564df604b9a8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x564df604ba28 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x564df604bae8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x564df604bb68 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x564df604c138 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x564df604bdb0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x564df604c098 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x564df604be58 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x564df604bef8 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x564df604bf70 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x564df604cce8 <col:82> 'const ArgContext' lvalue Var 0x564df603fd18 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x564df604e1c8 <col:94, line:1067:5>
| |   |-DeclStmt 0x564df604d408 <line:1054:9, col:64>
| |   | `-VarDecl 0x564df604d298 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x564df604d3c0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x564df604d628 <line:1055:9, col:91>
| |   | `-VarDecl 0x564df604d438 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x564df604d600 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x564df604d5e0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x564df604d590 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x564df604d570 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x564df604d518 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x564df604d4c8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x564df604d4f8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x564df604d558 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x564df604d538 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x564df604d5c0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x564df604d788 <line:1056:9, col:27>
| |   | `-VarDecl 0x564df604d720 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x564df604dbd0 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x564df604db00 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x564df604da80 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x564df5f4d5c8 0x564df5d96ba8 0x564df5d96880 0x564df5d88060 0x564df5d87d10 0x564df5d87600 0x564df5d59f70 0x564df5ce6430
| |   | | |-CallExpr 0x564df604d9c0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x564df604d7b0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x564df604d860 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x564df604d830 <col:19, col:23> '<bound member function type>' .begin 0x564df5d77268
| |   | | | |   `-DeclRefExpr 0x564df604d810 <col:19> 'const String' lvalue ParmVar 0x564df604be58 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x564df604d8d0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x564df604d8a0 <col:32, col:36> '<bound member function type>' .end 0x564df5d77480
| |   | | | |   `-DeclRefExpr 0x564df604d880 <col:32> 'const String' lvalue ParmVar 0x564df604be58 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x564df604d8f0 <col:43> 'const bool' lvalue Var 0x564df604d298 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x564df604d958 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x564df604d938 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x564df604d980 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x564df604d720 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x564df604d9a0 <col:73> 'const int' lvalue Var 0x564df604d438 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x564df604da60 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x564df604da30 <col:16, col:20> '<bound member function type>' .end 0x564df5d77480
| |   | |     `-DeclRefExpr 0x564df604da10 <col:16> 'const String' lvalue ParmVar 0x564df604be58 'str' 'const String &'
| |   | `-BinaryOperator 0x564df604dbb0 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x564df604db48 <col:13> 'int' lvalue ->status 0x564df604c5e8
| |   |   | `-CXXThisExpr 0x564df604db38 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x564df604db98 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x564df604db78 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x564df604b240 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x564df604de48 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x564df604dd08 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x564df604dcf0 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x564df604dcd8 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x564df604dbf8 <col:13> 'int' lvalue ->status 0x564df604c5e8
| |   | | |     `-CXXThisExpr 0x564df604dbe8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x564df604dcb8 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x564df604dc88 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x564df604dc38 <col:23> 'int' lvalue ->status 0x564df604c5e8
| |   | |   |   `-CXXThisExpr 0x564df604dc28 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x564df604dca0 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x564df604dc68 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x564df604b2d0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x564df604de28 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x564df604ddc8 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x564df604dd70 <col:13, col:18> '<bound member function type>' .error 0x564df5f10d60
| |   |   | | `-DeclRefExpr 0x564df604dd50 <col:13> 'const ArgContext' lvalue ParmVar 0x564df604bf70 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x564df604ddf0 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x564df604dda0 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x564df604de18 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x564df604de08 <col:20> 'bool' false
| |   |-DeclStmt 0x564df604e018 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x564df604dfc0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x564df604df50 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x564df604e178 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x564df604e030 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x564df5d1a3f8
| |   | |-DeclRefExpr 0x564df604e078 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x564df604d720 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x564df604e148 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x564df604e0c0 <col:64> 'V' lvalue ParmVar 0x564df604bef8 'result' 'V &'
| |   `-ReturnStmt 0x564df604e1b8 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x564df604e1a8 <col:16> 'bool' true
| `-CXXMethodDecl 0x564df60b28a8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned char &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned char'
|   |-ParmVarDecl 0x564df60b2680 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x564df60b2758 <col:46, col:49> col:49 used result 'unsigned char &'
|   |-ParmVarDecl 0x564df60b27c0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x564df60b4640 <col:94, line:1067:5>
|     |-DeclStmt 0x564df60b30b8 <line:1054:9, col:64>
|     | `-VarDecl 0x564df60b2ed8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x564df60b3048 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x564df60b3018 <col:36, col:55> 'const bool' lvalue Var 0x564df5d03320 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x564df60b3298 <line:1055:9, col:91>
|     | `-VarDecl 0x564df60b30d0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x564df60b3218 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x564df60b3200 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x564df60b31e0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x564df60b31c0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x564df60b31a0 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x564df60b3168 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x564df60b3148 <col:36, col:44> 'unsigned long' sizeof 'unsigned char':'unsigned char'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x564df604d4f8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x564df60b3188 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x564df604d538 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x564df604d5c0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x564df60b3430 <line:1056:9, col:27>
|     | `-VarDecl 0x564df60b33c8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x564df60b38b8 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x564df60b3860 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x564df60b3718 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x564df60b36e8 <col:13> '<bound member function type>' ->parse 0x564df604bce0
|     | | | | `-CXXThisExpr 0x564df60b36d8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x564df60b3578 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x564df60b3548 <col:19, col:23> '<bound member function type>' .begin 0x564df5d77268
|     | | | |   `-DeclRefExpr 0x564df60b3528 <col:19> 'const String' lvalue ParmVar 0x564df60b2680 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x564df60b35e8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x564df60b35b8 <col:32, col:36> '<bound member function type>' .end 0x564df5d77480
|     | | | |   `-DeclRefExpr 0x564df60b3598 <col:32> 'const String' lvalue ParmVar 0x564df60b2680 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x564df60b3788 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x564df60b3768 <col:43> 'const bool' lvalue Var 0x564df60b2ed8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x564df60b3670 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x564df60b3658 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x564df60b3638 <col:58, col:66> 'unsigned long' sizeof 'unsigned char':'unsigned char'
|     | | | |-ImplicitCastExpr 0x564df60b37a0 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x564df60b3698 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x564df60b33c8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x564df60b37d8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x564df60b37b8 <col:73> 'const int' lvalue Var 0x564df60b30d0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x564df60b3840 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x564df60b3810 <col:16, col:20> '<bound member function type>' .end 0x564df5d77480
|     | |     `-DeclRefExpr 0x564df60b37f0 <col:16> 'const String' lvalue ParmVar 0x564df60b2680 'str' 'const String &'
|     | `-BinaryOperator 0x564df60b3898 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x564df604db48 <col:13> 'int' lvalue ->status 0x564df604c5e8
|     |   | `-CXXThisExpr 0x564df604db38 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x564df60b3880 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x564df604db78 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x564df604b240 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x564df60b3a30 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x564df60b3950 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x564df60b3938 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x564df60b3920 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x564df604dbf8 <col:13> 'int' lvalue ->status 0x564df604c5e8
|     | | |     `-CXXThisExpr 0x564df604dbe8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x564df60b3900 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x564df60b38d0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x564df604dc38 <col:23> 'int' lvalue ->status 0x564df604c5e8
|     | |   |   `-CXXThisExpr 0x564df604dc28 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x564df60b38e8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x564df604dc68 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x564df604b2d0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x564df60b3a10 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x564df60b39c0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x564df60b3990 <col:13, col:18> '<bound member function type>' .error 0x564df5f10d60
|     |   | | `-DeclRefExpr 0x564df60b3970 <col:13> 'const ArgContext' lvalue ParmVar 0x564df60b27c0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x564df60b39e8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x564df604dda0 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x564df60b3a00 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x564df604de08 <col:20> 'bool' false
|     |-DeclStmt 0x564df60b3f78 <line:1064:9, col:64>
|     | `-TypedefDecl 0x564df60b3f20 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned char>::type':'unsigned char'
|     |   `-ElaboratedType 0x564df60b3ed0 'typename make_unsigned<unsigned char>::type' sugar
|     |     `-TypedefType 0x564df60b3eb0 'make_unsigned<unsigned char>::type' sugar
|     |       |-Typedef 0x564df60b3e40 'type'
|     |       `-ElaboratedType 0x564df60b3df0 'typename integer_traits<unsigned char>::unsigned_type' sugar
|     |         `-TypedefType 0x564df60b3dd0 'integer_traits<unsigned char>::unsigned_type' sugar
|     |           |-Typedef 0x564df5d03478 'unsigned_type'
|     |           `-BuiltinType 0x564df5a2e5e0 'unsigned char'
|     |-CallExpr 0x564df60b45d0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x564df60b45b8 <col:9> 'void (*)(const unsigned int *, unsigned char &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x564df60b4538 <col:9> 'void (const unsigned int *, unsigned char &)' lvalue Function 0x564df60b4418 'extract_integer' 'void (const unsigned int *, unsigned char &)' (FunctionTemplate 0x564df5d1a3f8 'extract_integer')
|     | |-ImplicitCastExpr 0x564df60b4618 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x564df60b4600 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x564df60b3fd8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x564df60b33c8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x564df60b40a8 <col:28, col:70> 'unsigned_v_type':'unsigned char' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x564df60b4058 <col:64> 'unsigned char':'unsigned char' lvalue ParmVar 0x564df60b2758 'result' 'unsigned char &'
|     `-ReturnStmt 0x564df60b4630 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x564df604e1a8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x564df604c4f8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x564df604c1a8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x564df604c458 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x564df604c258 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x564df604c2f8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x564df604c370 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x564df604cd08 <col:71> 'const ArgContext' lvalue Var 0x564df603fd18 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x564df604e938 <col:83, line:1083:5>
| |   |-DeclStmt 0x564df604e290 <line:1071:9, col:12>
| |   | `-VarDecl 0x564df604e228 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x564df604e910 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x564df604e520 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x564df604e3a8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x564df604e370 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x564df604e2b8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x564df604e310 <col:31> 'const String' lvalue ParmVar 0x564df604c258 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x564df604e330 <col:36> 'V' lvalue Var 0x564df604e228 'x' 'V'
| |     | |   `-DeclRefExpr 0x564df604e350 <col:39> 'const ArgContext' lvalue ParmVar 0x564df604c370 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x564df604e500 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x564df604e4e0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x564df604e4c8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x564df604e4b0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x564df604e3d0 <col:17> 'int' lvalue ->status 0x564df604c5e8
| |     |     |     `-CXXThisExpr 0x564df604e3c0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x564df604e490 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x564df604e460 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x564df604e410 <col:27> 'int' lvalue ->status 0x564df604c5e8
| |     |       |   `-CXXThisExpr 0x564df604e400 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x564df604e478 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x564df604e440 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x564df604b2d0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x564df604e550 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x564df604e540 <col:20> 'bool' false
| |     `-IfStmt 0x564df604e8e8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x564df604e5f0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x564df604e5c0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x564df604e570 <col:18> 'int' lvalue ->status 0x564df604c5e8
| |       | |   `-CXXThisExpr 0x564df604e560 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x564df604e5d8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x564df604e5a0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x564df604b2d0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x564df604e828 <col:42, line:1079:9>
| |       | |-CallExpr 0x564df604e7d0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x564df604e620 <line:1076:13> '<bound member function type>' ->range_error 0x564df604cbf8
| |       | | | `-CXXThisExpr 0x564df604e610 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x564df604e650 <col:25> 'const ArgContext' lvalue ParmVar 0x564df604c370 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x564df604e730 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x564df604e7a8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x564df604e788 <col:43> 'V' lvalue Var 0x564df604e228 'x' 'V'
| |       | `-ReturnStmt 0x564df604e818 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x564df604e808 <col:20> 'bool' false
| |       `-CompoundStmt 0x564df604e8c8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x564df604e888 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x564df604e848 <col:13> 'V' lvalue ParmVar 0x564df604c2f8 'result' 'V &'
| |         | `-DeclRefExpr 0x564df604e868 <col:22> 'V' lvalue Var 0x564df604e228 'x' 'V'
| |         `-ReturnStmt 0x564df604e8b8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x564df604e8a8 <col:20> 'bool' true
| `-CXXMethodDecl 0x564df60b2268 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned char &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned char'
|   |-ParmVarDecl 0x564df60b2000 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x564df60b20d8 <col:35, col:38> col:38 used result 'unsigned char &'
|   |-ParmVarDecl 0x564df60b2140 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x564df60b2eb8 <col:83, line:1083:5>
|     |-DeclStmt 0x564df60b24f0 <line:1071:9, col:12>
|     | `-VarDecl 0x564df60b2488 <col:9, col:11> col:11 used x 'unsigned char':'unsigned char'
|     `-IfStmt 0x564df60b2e90 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x564df60b2b20 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x564df60b2a48 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x564df60b2a10 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x564df60b29c8 <col:14> '<bound member function type>' ->parse_saturating 0x564df60b28a8
|       | |   | `-CXXThisExpr 0x564df60b29b8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x564df60b2560 <col:31> 'const String' lvalue ParmVar 0x564df60b2000 'str' 'const String &'
|       | |   |-DeclRefExpr 0x564df60b2580 <col:36> 'unsigned char':'unsigned char' lvalue Var 0x564df60b2488 'x' 'unsigned char':'unsigned char'
|       | |   `-DeclRefExpr 0x564df60b25a0 <col:39> 'const ArgContext' lvalue ParmVar 0x564df60b2140 'args' 'const ArgContext &'
|       | `-ParenExpr 0x564df60b2b00 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x564df60b2ae0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x564df60b2ac8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x564df60b2ab0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x564df604e3d0 <col:17> 'int' lvalue ->status 0x564df604c5e8
|       |     |     `-CXXThisExpr 0x564df604e3c0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x564df60b2a90 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x564df60b2a60 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x564df604e410 <col:27> 'int' lvalue ->status 0x564df604c5e8
|       |       |   `-CXXThisExpr 0x564df604e400 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x564df60b2a78 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x564df604e440 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x564df604b2d0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x564df60b2b40 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x564df604e540 <col:20> 'bool' false
|       `-IfStmt 0x564df60b2e68 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x564df60b2b80 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x564df60b2b50 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x564df604e570 <col:18> 'int' lvalue ->status 0x564df604c5e8
|         | |   `-CXXThisExpr 0x564df604e560 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x564df60b2b68 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x564df604e5a0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x564df604b2d0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x564df60b2da0 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x564df60b2d10 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x564df604e620 <line:1076:13> '<bound member function type>' ->range_error 0x564df604cbf8
|         | | | `-CXXThisExpr 0x564df604e610 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x564df60b2ba0 <col:25> 'const ArgContext' lvalue ParmVar 0x564df60b2140 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x564df60b2d78 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x564df60b2d48 <col:31, col:50> 'const bool' lvalue Var 0x564df5d03320 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x564df60b2ce8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x564df60b2cd0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x564df60b2cb8 <col:43> 'unsigned char':'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x564df60b2c98 <col:43> 'unsigned char':'unsigned char' lvalue Var 0x564df60b2488 'x' 'unsigned char':'unsigned char'
|         | `-ReturnStmt 0x564df60b2d90 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x564df604e808 <col:20> 'bool' false
|         `-CompoundStmt 0x564df60b2e48 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x564df60b2e18 <line:1080:13, col:22> 'unsigned char':'unsigned char' lvalue '='
|           | |-DeclRefExpr 0x564df60b2dc0 <col:13> 'unsigned char':'unsigned char' lvalue ParmVar 0x564df60b20d8 'result' 'unsigned char &'
|           | `-ImplicitCastExpr 0x564df60b2e00 <col:22> 'unsigned char':'unsigned char' <LValueToRValue>
|           |   `-DeclRefExpr 0x564df60b2de0 <col:22> 'unsigned char':'unsigned char' lvalue Var 0x564df60b2488 'x' 'unsigned char':'unsigned char'
|           `-ReturnStmt 0x564df60b2e38 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x564df604e8a8 <col:20> 'bool' true
|-FieldDecl 0x564df604c580 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x564df604c5e8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x564df604c638 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x564df604c8f0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x564df604c678 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x564df604c6f8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x564df604c770 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x564df604c7f0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x564df604cbf8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x564df604c9c0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x564df604ca38 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x564df604cad0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x564df604f198 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x564df604f198
| `-ParmVarDecl 0x564df604f2a8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x564df604f428 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x564df604f538 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x564df60ac3e0 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x564df60ac3b0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x564df60ac380 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x564df60ac350 <col:7> 'IntArg' lvalue ParmVar 0x564df604f538 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x564df604c580 'base' 'int'
| | `-ImplicitCastExpr 0x564df60ac4d8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x564df60ac4a8 <col:7> 'int' xvalue .base 0x564df604c580
| |     `-CXXStaticCastExpr 0x564df60ac478 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x564df60ac448 <col:7> 'IntArg' lvalue ParmVar 0x564df604f538 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x564df604c5e8 'status' 'int'
| | `-ImplicitCastExpr 0x564df60ac5a8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x564df60ac578 <col:7> 'int' xvalue .status 0x564df604c5e8
| |     `-CXXStaticCastExpr 0x564df60ac548 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x564df60ac518 <col:7> 'IntArg' lvalue ParmVar 0x564df604f538 '' 'IntArg &&'
| `-CompoundStmt 0x564df60ac600 <col:7>
`-CXXDestructorDecl 0x564df60ab540 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x564df6052738 <../dummy_inc/click/args.hh:1177:1, col:62> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned char'
|-CXXRecordDecl 0x564df6052998 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x564df60ab468 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x564df60ab9e0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x564df60ab9c0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x564df60aba50 <col:19>
|-CXXConstructorDecl 0x564df60ab648 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned char> &)' inline default trivial noexcept-unevaluated 0x564df60ab648
| `-ParmVarDecl 0x564df60ab758 <col:19> col:19 'const DefaultArg<unsigned char> &'
|-CXXConstructorDecl 0x564df60ab7f8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned char> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x564df60ab908 <col:19> col:19 used 'DefaultArg<unsigned char> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x564df60ac610 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x564df60ac330 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x564df60ac300 <col:19> 'DefaultArg<unsigned char>' xvalue static_cast<struct DefaultArg<unsigned char> &&> <NoOp>
| |       `-DeclRefExpr 0x564df60ac2d0 <col:19> 'DefaultArg<unsigned char>' lvalue ParmVar 0x564df60ab908 '' 'DefaultArg<unsigned char> &&'
| `-CompoundStmt 0x564df60ac680 <col:19>
`-CXXDestructorDecl 0x564df60aba90 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
