
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559587522048 prev 0x5595875197e8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559587522140 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5595875221d0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x559587522248 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x559587522308 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5595875223d0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x559587522548 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x559587522480 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5595875225f0 <col:24>
| `-OptimizeNoneAttr 0x559587522648 <col:34>
|-CXXMethodDecl 0x559587522690 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x559587522948 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x559587522740 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5595875227b8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x559587522838 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x559587522a00 <line:229:7, col:14> col:7 private
|-FieldDecl 0x559587522a38 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x559587522aa0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x559587522b28 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x559587522e48 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x559587522be0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x559587522c58 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x559587522cd0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x559587522d50 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x559587522f60 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55958752a8d8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55958752a8d8
| `-ParmVarDecl 0x55958752a9e8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55958752aa88 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55958752aa88
| `-ParmVarDecl 0x55958752ab98 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x559587613570 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559587515060 prev 0x559587514de0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x559587515158 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5595875151e8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x559587515248 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x559587515338 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x559587515438 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x559587515608 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5595875154b8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x559587515530 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x559587515798 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5595875156d0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x559587515840 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x559587515978 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5595875158b0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x559587515b18 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x559587515a58 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x559587515cb8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x559587515bf8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x559587515d60 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x559587515e60 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x559587515f40 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559587515e40 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x559587515e20 <col:26> 'int' 1
| `-EnumConstantDecl 0x559587515ef0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x559587515f58 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559587515ed0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x559587515eb0 <col:44> 'int' 2
|-CXXMethodDecl 0x5595875160a0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x559587515f88 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x559587516008 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5595875161f8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x559587516168 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x559587516438 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5595875162b8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x559587516330 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5595875164e8 <col:20>
| `-OptimizeNoneAttr 0x559587516540 <col:30>
|-CXXMethodDecl 0x559587516648 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x559587516580 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5595875166f0 <col:20>
| `-OptimizeNoneAttr 0x559587516748 <col:30>
|-CXXMethodDecl 0x559587516798 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x559587516860 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x559587516978 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x559587516a00 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x559587516a88 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x559587516b10 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x559587516b98 <line:59:5, col:35> col:23 used PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x559587516c28 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x559587516ce8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x559587516d70 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x559587516df8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x559587516e80 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x559587516f08 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x559587516f90 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x559587517020 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5595875170e0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x559587517170 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5595875172c0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x559587517228 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x559587517450 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x559587517380 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x559587517700 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x559587517508 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x559587517588 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x559587517608 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5595875177b8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5595875178c0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x559587517b50 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595875178a0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x559587517880 <col:33> 'int' 0
| |-EnumConstantDecl 0x559587517950 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x559587517b68 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559587517930 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x559587517910 <col:32> 'int' 20
| |-EnumConstantDecl 0x5595875179e0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x559587517b80 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595875179c0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5595875179a0 <col:38> 'int' 90
| |-EnumConstantDecl 0x559587517a70 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x559587517b98 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559587517a50 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x559587517a30 <col:35> 'int' 100
| `-EnumConstantDecl 0x559587517b00 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x559587517bb0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559587517ae0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x559587517ac0 <col:32> 'int' 2000
|-CXXMethodDecl 0x559587517bf0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x559587518030 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x559587517ea0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x559587517f18 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x559587518100 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x559587518280 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5595875181b0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x559587518488 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x559587518338 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5595875183b0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x559587518588 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x559587518628 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5595875186f0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x559587518780 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5595875189b0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559587518760 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x559587518740 <col:36> 'int' EnumConstant 0x5595875186f0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5595875187d0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x559587518820 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x559587518870 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5595875188c0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x559587518910 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x559587518960 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x559587518a98 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5595875189d8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x559587518b60 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x559587518c20 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x559587518ce0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x559587518da0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x559587518eb8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x559587518f80 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x559587519100 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x559587519030 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x559587519228 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x559587519428 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5595875192d8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x559587519358 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x559587526d78 <col:54, line:127:5>
|   |-ParenExpr 0x559587526c28 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x559587526bf8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5595875268e8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5595875268c0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5595875268a8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x559587526890 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x559587526860 <col:31> 'Router *' lvalue ->_router 0x559587524740
|   |   |         `-CXXThisExpr 0x559587526850 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x559587526948 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559587526928 <col:48> 'int' 0
|   |   `-CallExpr 0x559587526b58 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x559587526b40 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559587526b20 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55958704f730 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559587526b98 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595875269b8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x559587526bb0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595875269d8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x559587526bc8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559587526a10 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x559587526be0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559587526b08 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559587526af0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559587526aa8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x559587526cc0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x559587526c58 <col:9> 'Router *' lvalue ->_router 0x559587524740
|   | | `-CXXThisExpr 0x559587526c48 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x559587526ca8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x559587526c88 <col:19> 'Router *' lvalue ParmVar 0x5595875192d8 'r' 'Router *'
|   `-BinaryOperator 0x559587526d58 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x559587526cf0 <col:9> 'int' lvalue ->_eindex 0x5595875247a8
|     | `-CXXThisExpr 0x559587526ce0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x559587526d40 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x559587526d20 <col:19> 'int' lvalue ParmVar 0x559587519358 'eindex' 'int'
|-CXXMethodDecl 0x5595875195b0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5595875194e8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x559587519680 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x559587519748 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5595875197e8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x559587519a38 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5595875198b0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x559587519930 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x559587519ae8 <col:20>
| `-OptimizeNoneAttr 0x559587519b40 <col:30>
|-CXXMethodDecl 0x559587519c48 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x559587519b80 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x559587519cf0 <col:20>
| `-OptimizeNoneAttr 0x559587519d48 <col:30>
|-CXXMethodDecl 0x559587519e18 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x559587519d88 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x559587519ec0 <col:20>
| `-OptimizeNoneAttr 0x559587519f18 <col:30>
|-CXXMethodDecl 0x55958751a0a8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x559587519f50 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x559587519fd0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55958751a238 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55958751a170 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55958751a388 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55958751a2f8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55958751a4d8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55958751a448 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55958751a628 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55958751a598 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55958751a8e8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55958751a6e0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55958751a760 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55958751a808 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55958751a9c0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55958751aa80 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55958751ad50 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55958751ac00 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55958751ac78 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55958751ae78 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55958751b050 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55958751af30 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55958751afb0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55958751b238 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55958751b118 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55958751b198 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55958751b5a8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55958751b2f8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55958751b370 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55958751b3f0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x559587526360 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x559587526340 <col:106> 'int' 0
| `-ParmVarDecl 0x55958751b468 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x559587526398 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x559587526378 <col:126> 'int' 0
|-CXXMethodDecl 0x55958751b948 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55958751b678 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55958751b710 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55958751b790 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55958751b808 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5595875263d0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5595875263b0 <col:114> 'int' 0
|-CXXMethodDecl 0x55958751bcd8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55958751ba20 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55958751ba98 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55958751bb18 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5595875263e8 <col:96> 'int' 0
| `-ParmVarDecl 0x55958751bb90 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x559587526428 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x559587526408 <col:116> 'int' 0
|-CXXMethodDecl 0x55958751c058 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55958751bda8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55958751be20 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55958751bea0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x559587526460 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x559587526440 <col:109> 'int' 0
| `-ParmVarDecl 0x55958751bf18 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x559587526498 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x559587526478 <col:129> 'int' 0
|-CXXMethodDecl 0x55958751c3d8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55958751c128 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55958751c1a0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55958751c220 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55958751c298 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5595875264d0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5595875264b0 <col:117> 'int' 0
|-CXXMethodDecl 0x55958751c768 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55958751c4b0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55958751c528 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55958751c5a8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5595875264e8 <col:99> 'int' 0
| `-ParmVarDecl 0x55958751c620 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x559587526528 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x559587526508 <col:119> 'int' 0
|-CXXMethodDecl 0x55958751cb88 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55958751c838 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55958751c8b8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55958751c930 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55958751c9b0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x559587526560 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x559587526540 <col:108> 'int' 0
| `-ParmVarDecl 0x55958751ca30 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x559587526598 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x559587526578 <col:141> 'int' 0
|-CXXMethodDecl 0x55958751cfa8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55958751cc60 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55958751cce0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55958751cd58 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55958751cdd8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55958751ce58 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5595875265b0 <col:121> 'int' 0
|-CXXMethodDecl 0x55958751d3d8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55958751d088 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55958751d108 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55958751d180 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55958751d200 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5595875265d0 <col:98> 'int' 0
| `-ParmVarDecl 0x55958751d280 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5595875265f0 <col:123> 'int' 0
|-CXXMethodDecl 0x55958751d6a0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55958751d4b0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55958751d530 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55958751d5b0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x559587526610 <col:80> 'int' 0
|-EnumDecl 0x55958751d758 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55958751d860 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55958751daf0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55958751d840 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55958751d820 <col:42> 'int' 1
| |-EnumConstantDecl 0x55958751d8f0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55958751db08 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55958751d8d0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55958751d8b0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55958751d980 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55958751db20 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55958751d960 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55958751d940 <col:44> 'int' 4
| |-EnumConstantDecl 0x55958751da10 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55958751db38 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55958751d9f0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55958751d9d0 <col:36> 'int' 7
| `-EnumConstantDecl 0x55958751daa0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55958751db50 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55958751da80 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55958751da60 <col:34> 'int' 6
|-CXXMethodDecl 0x55958751de08 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55958751db78 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55958751dc18 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55958751dc98 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55958751dd10 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5595875266c8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5595875266b0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x559587526698 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x559587526678 <col:98, col:105> 'String' (CXXTemporary 0x559587526678)
|           `-CXXTemporaryObjectExpr 0x559587526640 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55958751e0a8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55958751ded8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55958751df50 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55958751dfc8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x559587526778 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x559587526760 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x559587526748 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x559587526728 <col:94, col:101> 'String' (CXXTemporary 0x559587526728)
| |         `-CXXTemporaryObjectExpr 0x5595875266f0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x559587526f60 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x559587526ed8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x559587526ea8 <col:9> '<bound member function type>' ->add_task_handlers 0x55958751de08
|     | `-CXXThisExpr 0x559587526e98 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x559587526f18 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x559587526e18 <col:27> 'Task *' lvalue ParmVar 0x55958751ded8 'task' 'Task *'
|     |-ImplicitCastExpr 0x559587526f30 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x559587526e38 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55958751df50 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x559587526f48 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x559587526e58 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55958751daa0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x559587526e78 <col:62> 'const String' lvalue ParmVar 0x55958751dfc8 'prefix' 'const String &'
|-CXXMethodDecl 0x55958751e2b8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55958751e170 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55958751e1e8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x559587526828 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x559587526810 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5595875267f8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5595875267d8 <col:70, col:77> 'String' (CXXTemporary 0x5595875267d8)
| |         `-CXXTemporaryObjectExpr 0x5595875267a0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x559587527138 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5595875270b0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x559587527080 <col:9> '<bound member function type>' ->add_task_handlers 0x55958751de08
|     | `-CXXThisExpr 0x559587527070 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5595875270f0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x559587526ff0 <col:27> 'Task *' lvalue ParmVar 0x55958751e170 'task' 'Task *'
|     |-ImplicitCastExpr 0x559587527108 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x559587527010 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x559587527120 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x559587527030 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55958751daa0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x559587527050 <col:57> 'const String' lvalue ParmVar 0x55958751e1e8 'prefix' 'const String &'
|-CXXMethodDecl 0x55958751e598 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55958751e380 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55958751e400 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55958751e478 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55958751e848 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55958751e668 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55958751e6e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55958751e768 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55958751eb38 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55958751e918 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55958751e998 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55958751ea10 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55958751ede8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55958751ec08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55958751ec88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55958751ed08 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55958751f098 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55958751eeb8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55958751ef38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55958751efb8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55958751f348 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55958751f168 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55958751f1e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55958751f260 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55958751f5f8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55958751f418 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55958751f498 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55958751f518 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55958751f908 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55958751f720 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55958751f7a0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55958751f820 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55958751fbe8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55958751f9d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55958751fa58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55958751fb00 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55958751fec8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55958751fcb8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55958751fd38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55958751fde0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x559587520130 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55958751ff98 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x559587520018 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x559587520090 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5595875203d8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x559587520200 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x559587520280 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5595875202f8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x559587520688 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5595875204a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559587520528 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5595875205a8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x559587520938 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x559587520758 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5595875207d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559587520850 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x559587520be8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x559587520a08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559587520a88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559587520b00 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x559587520eb8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x559587520cb8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559587520d38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559587520dd8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5595875211e8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x559587520f88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559587521008 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x559587521080 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5595875210f8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x559587526840 <col:93> 'bool' false
|-CXXMethodDecl 0x5595875213d0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5595875212b8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x559587521338 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5595875215a8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x559587521490 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x559587521510 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x559587521888 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x559587521668 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5595875216e0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x559587521760 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5595875217d8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x559587521b78 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x559587521958 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5595875219d0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x559587521a50 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x559587521ac8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x559587521db0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x559587521c50 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x559587521cd0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x559587521f98 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x559587521e78 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x559587521ef8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x559587522048 prev 0x5595875197e8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x559587522140 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5595875221d0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x559587522248 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x559587522308 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5595875223d0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x559587522548 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x559587522480 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5595875225f0 <col:24>
| | `-OptimizeNoneAttr 0x559587522648 <col:34>
| |-CXXMethodDecl 0x559587522690 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x559587522948 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x559587522740 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5595875227b8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x559587522838 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x559587522a00 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x559587522a38 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x559587522aa0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x559587522b28 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x559587522e48 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x559587522be0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x559587522c58 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x559587522cd0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x559587522d50 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x559587522f60 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55958752a8d8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55958752a8d8
| | `-ParmVarDecl 0x55958752a9e8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55958752aa88 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55958752aa88
| | `-ParmVarDecl 0x55958752ab98 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x559587613570 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x559587522fd8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x559587523078 <col:38> "" ""
|-CXXMethodDecl 0x559587523108 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5595875231a8 <col:44> "" ""
|-AccessSpecDecl 0x559587523218 <line:260:3, col:10> col:3 private
|-EnumDecl 0x559587523240 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x559587523340 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x559587523390 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559587523320 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x559587523300 <col:27> 'int' 4
|-FieldDecl 0x559587523448 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5595875235f8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5595875236b0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x559587524740 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5595875247a8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5595875248f8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x559587524838 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x559587524aa8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5595875249b8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x559587524c88 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x559587524b68 <col:20> col:23 'int'
| `-ParmVarDecl 0x559587524be8 <col:25> col:28 'int'
|-CXXMethodDecl 0x559587524f30 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x559587524d50 <col:23> col:26 'int'
| |-ParmVarDecl 0x559587524dd0 <col:28> col:31 'int'
| `-ParmVarDecl 0x559587524e48 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x559587524fe8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5595875250b0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x559587525100 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x559587525150 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x559587525330 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5595875251e0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x559587525258 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5595875255d8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5595875253f8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x559587525478 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5595875254f0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5595875257f8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5595875256a8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x559587525728 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x559587525b30 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5595875258b8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x559587525938 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5595875259b0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x559587525a30 <col:57> col:60 'int'
|-CXXMethodDecl 0x559587525d18 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x559587525c00 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x559587525c80 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x559587525e68 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x559587525dd8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5595875261e8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x559587525f28 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x559587525fa8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x559587526020 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5595875260a0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x559587526300 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class Storage
         0 |   Storage::index_type _capacity
         4 |   volatile Storage::index_type _head
         8 |   volatile Storage::index_type _tail
           | [sizeof=12, dsize=12, align=4,
           |  nvsize=12, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55958752e268 <../dummy_inc/click/standard/storage.hh:9:1, line:54:1> line:9:7 referenced class Storage definition
|-DefinitionData pass_in_registers trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55958752e388 <col:1, col:7> col:7 implicit referenced class Storage
|-AccessSpecDecl 0x55958752e418 <col:17, col:23> col:17 public
|-TypedefDecl 0x55958752e450 <line:11:5, col:22> col:22 referenced index_type 'uint32_t':'unsigned int'
| `-TypedefType 0x559587108c30 'uint32_t' sugar
|   |-Typedef 0x55958701c408 'uint32_t'
|   `-TypedefType 0x559586ff5440 '__uint32_t' sugar
|     |-Typedef 0x559586ff5038 '__uint32_t'
|     `-BuiltinType 0x559586fb3410 'unsigned int'
|-TypedefDecl 0x55958752e4b8 <line:12:5, col:21> col:21 referenced signed_index_type 'int32_t':'int'
| `-TypedefType 0x559587108d10 'int32_t' sugar
|   |-Typedef 0x55958701c268 'int32_t'
|   `-TypedefType 0x559586ff53b0 '__int32_t' sugar
|     |-Typedef 0x559586ff4fc8 '__int32_t'
|     `-BuiltinType 0x559586fb3370 'int'
|-VarDecl 0x55958752e540 <line:13:5, col:59> col:29 referenced invalid_index 'const Storage::index_type':'const unsigned int' static cinit
| `-CStyleCastExpr 0x55958752e608 <col:45, col:59> 'Storage::index_type':'unsigned int' <NoOp>
|   `-ImplicitCastExpr 0x55958752e5f0 <col:58, col:59> 'Storage::index_type':'unsigned int' <IntegralCast> part_of_explicit_cast
|     `-UnaryOperator 0x55958752e5c8 <col:58, col:59> 'int' prefix '-'
|       `-IntegerLiteral 0x55958752e5a8 <col:59> 'int' 1
|-CXXConstructorDecl 0x55958752e6f0 <line:15:5, col:38> col:5 used Storage 'void ()'
| |-CXXCtorInitializer Field 0x55958752ff40 '_head' 'volatile Storage::index_type':'volatile unsigned int'
| | `-ImplicitCastExpr 0x559587530048 <col:23> 'volatile Storage::index_type':'volatile unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x559587530008 <col:23> 'int' 0
| |-CXXCtorInitializer Field 0x55958752ffa0 '_tail' 'volatile Storage::index_type':'volatile unsigned int'
| | `-ImplicitCastExpr 0x5595875300c8 <col:33> 'volatile Storage::index_type':'volatile unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x559587530088 <col:33> 'int' 0
| `-CompoundStmt 0x559587530118 <col:36, col:38>
|-CXXConversionDecl 0x55958752e7f8 <line:17:5, col:52> col:5 operator bool 'bool () const'
| `-CompoundStmt 0x559587530208 <col:27, col:52>
|   `-ReturnStmt 0x5595875301f8 <col:29, col:45>
|     `-BinaryOperator 0x5595875301d8 <col:36, col:45> 'bool' '!='
|       |-ImplicitCastExpr 0x5595875301a8 <col:36> 'Storage::index_type':'unsigned int' <LValueToRValue>
|       | `-MemberExpr 0x559587530138 <col:36> 'const volatile Storage::index_type':'const volatile unsigned int' lvalue ->_head 0x55958752ff40
|       |   `-CXXThisExpr 0x559587530128 <col:36> 'const Storage *' implicit this
|       `-ImplicitCastExpr 0x5595875301c0 <col:45> 'Storage::index_type':'unsigned int' <LValueToRValue>
|         `-MemberExpr 0x559587530178 <col:45> 'const volatile Storage::index_type':'const volatile unsigned int' lvalue ->_tail 0x55958752ffa0
|           `-CXXThisExpr 0x559587530168 <col:45> 'const Storage *' implicit this
|-CXXMethodDecl 0x55958752e8c8 <line:18:5, col:49> col:10 empty 'bool () const'
| `-CompoundStmt 0x559587530300 <col:24, col:49>
|   `-ReturnStmt 0x5595875302f0 <col:26, col:42>
|     `-BinaryOperator 0x5595875302d0 <col:33, col:42> 'bool' '=='
|       |-ImplicitCastExpr 0x5595875302a0 <col:33> 'Storage::index_type':'unsigned int' <LValueToRValue>
|       | `-MemberExpr 0x559587530230 <col:33> 'const volatile Storage::index_type':'const volatile unsigned int' lvalue ->_head 0x55958752ff40
|       |   `-CXXThisExpr 0x559587530220 <col:33> 'const Storage *' implicit this
|       `-ImplicitCastExpr 0x5595875302b8 <col:42> 'Storage::index_type':'unsigned int' <LValueToRValue>
|         `-MemberExpr 0x559587530270 <col:42> 'const volatile Storage::index_type':'const volatile unsigned int' lvalue ->_tail 0x55958752ffa0
|           `-CXXThisExpr 0x559587530260 <col:42> 'const Storage *' implicit this
|-CXXMethodDecl 0x55958752e990 <line:19:5, col:16> col:9 size 'int () const'
|-CXXMethodDecl 0x55958752ebd0 <line:20:5, col:48> col:9 used size 'int (Storage::index_type, Storage::index_type) const'
| |-ParmVarDecl 0x55958752ea40 <col:14, col:25> col:25 head 'Storage::index_type':'unsigned int'
| `-ParmVarDecl 0x55958752eab8 <col:31, col:42> col:42 tail 'Storage::index_type':'unsigned int'
|-CXXMethodDecl 0x55958752eca8 <line:21:5, col:46> col:9 capacity 'int () const'
| `-CompoundStmt 0x559587530398 <col:26, col:46>
|   `-ReturnStmt 0x559587530388 <col:28, col:35>
|     `-ImplicitCastExpr 0x559587530370 <col:35> 'int' <IntegralCast>
|       `-ImplicitCastExpr 0x559587530358 <col:35> 'Storage::index_type':'unsigned int' <LValueToRValue>
|         `-MemberExpr 0x559587530328 <col:35> 'const Storage::index_type':'const unsigned int' lvalue ->_capacity 0x55958752feb8
|           `-CXXThisExpr 0x559587530318 <col:35> 'const Storage *' implicit this
|-CXXMethodDecl 0x55958752ed98 <line:23:5, col:45> col:16 used head 'Storage::index_type () const'
| `-CompoundStmt 0x559587530418 <col:29, col:45>
|   `-ReturnStmt 0x559587530408 <col:31, col:38>
|     `-ImplicitCastExpr 0x5595875303f0 <col:38> 'Storage::index_type':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5595875303c0 <col:38> 'const volatile Storage::index_type':'const volatile unsigned int' lvalue ->_head 0x55958752ff40
|         `-CXXThisExpr 0x5595875303b0 <col:38> 'const Storage *' implicit this
|-CXXMethodDecl 0x55958752ee58 <line:24:5, col:45> col:16 used tail 'Storage::index_type () const'
| `-CompoundStmt 0x559587530498 <col:29, col:45>
|   `-ReturnStmt 0x559587530488 <col:31, col:38>
|     `-ImplicitCastExpr 0x559587530470 <col:38> 'Storage::index_type':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x559587530440 <col:38> 'const volatile Storage::index_type':'const volatile unsigned int' lvalue ->_tail 0x55958752ffa0
|         `-CXXThisExpr 0x559587530430 <col:38> 'const Storage *' implicit this
|-CXXMethodDecl 0x55958752eff8 <line:26:5, line:28:5> line:26:16 used next_i 'Storage::index_type (Storage::index_type) const'
| |-ParmVarDecl 0x55958752ef08 <col:23, col:34> col:34 used i 'Storage::index_type':'unsigned int'
| `-CompoundStmt 0x559587530688 <col:43, line:28:5>
|   `-ReturnStmt 0x559587530678 <line:27:2, col:32>
|     `-ParenExpr 0x559587530658 <col:9, col:32> 'unsigned int'
|       `-ConditionalOperator 0x559587530628 <col:10, col:31> 'unsigned int'
|         |-BinaryOperator 0x559587530540 <col:10, col:13> 'bool' '!='
|         | |-ImplicitCastExpr 0x559587530510 <col:10> 'Storage::index_type':'unsigned int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5595875304b0 <col:10> 'Storage::index_type':'unsigned int' lvalue ParmVar 0x55958752ef08 'i' 'Storage::index_type':'unsigned int'
|         | `-ImplicitCastExpr 0x559587530528 <col:13> 'Storage::index_type':'unsigned int' <LValueToRValue>
|         |   `-MemberExpr 0x5595875304e0 <col:13> 'const Storage::index_type':'const unsigned int' lvalue ->_capacity 0x55958752feb8
|         |     `-CXXThisExpr 0x5595875304d0 <col:13> 'const Storage *' implicit this
|         |-BinaryOperator 0x5595875305d0 <col:25, col:27> 'unsigned int' '+'
|         | |-ImplicitCastExpr 0x5595875305a0 <col:25> 'Storage::index_type':'unsigned int' <LValueToRValue>
|         | | `-DeclRefExpr 0x559587530560 <col:25> 'Storage::index_type':'unsigned int' lvalue ParmVar 0x55958752ef08 'i' 'Storage::index_type':'unsigned int'
|         | `-ImplicitCastExpr 0x5595875305b8 <col:27> 'unsigned int' <IntegralCast>
|         |   `-IntegerLiteral 0x559587530580 <col:27> 'int' 1
|         `-ImplicitCastExpr 0x559587530610 <col:31> 'unsigned int' <IntegralCast>
|           `-IntegerLiteral 0x5595875305f0 <col:31> 'int' 0
|-CXXMethodDecl 0x55958752f140 <line:29:5, line:31:5> line:29:16 used prev_i 'Storage::index_type (Storage::index_type) const'
| |-ParmVarDecl 0x55958752f0b0 <col:23, col:34> col:34 used i 'Storage::index_type':'unsigned int'
| `-CompoundStmt 0x559587530878 <col:43, line:31:5>
|   `-ReturnStmt 0x559587530868 <line:30:2, col:32>
|     `-ParenExpr 0x559587530848 <col:9, col:32> 'unsigned int'
|       `-ConditionalOperator 0x559587530818 <col:10, col:23> 'unsigned int'
|         |-BinaryOperator 0x559587530710 <col:10, col:13> 'bool' '!='
|         | |-ImplicitCastExpr 0x5595875306e0 <col:10> 'Storage::index_type':'unsigned int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5595875306a0 <col:10> 'Storage::index_type':'unsigned int' lvalue ParmVar 0x55958752f0b0 'i' 'Storage::index_type':'unsigned int'
|         | `-ImplicitCastExpr 0x5595875306f8 <col:13> 'unsigned int' <IntegralCast>
|         |   `-IntegerLiteral 0x5595875306c0 <col:13> 'int' 0
|         |-BinaryOperator 0x5595875307a0 <col:17, col:19> 'unsigned int' '-'
|         | |-ImplicitCastExpr 0x559587530770 <col:17> 'Storage::index_type':'unsigned int' <LValueToRValue>
|         | | `-DeclRefExpr 0x559587530730 <col:17> 'Storage::index_type':'unsigned int' lvalue ParmVar 0x55958752f0b0 'i' 'Storage::index_type':'unsigned int'
|         | `-ImplicitCastExpr 0x559587530788 <col:19> 'unsigned int' <IntegralCast>
|         |   `-IntegerLiteral 0x559587530750 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x559587530800 <col:23> 'Storage::index_type':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x5595875307d0 <col:23> 'const Storage::index_type':'const unsigned int' lvalue ->_capacity 0x55958752feb8
|             `-CXXThisExpr 0x5595875307c0 <col:23> 'const Storage *' implicit this
|-CXXMethodDecl 0x55958752f2b8 <line:34:5, col:54> col:10 set_capacity 'void (Storage::index_type)'
| |-ParmVarDecl 0x55958752f1f8 <col:23, col:34> col:34 used c 'Storage::index_type':'unsigned int'
| `-CompoundStmt 0x559587530928 <col:37, col:54>
|   `-BinaryOperator 0x559587530908 <col:39, col:51> 'Storage::index_type':'unsigned int' lvalue '='
|     |-MemberExpr 0x5595875308a0 <col:39> 'Storage::index_type':'unsigned int' lvalue ->_capacity 0x55958752feb8
|     | `-CXXThisExpr 0x559587530890 <col:39> 'Storage *' implicit this
|     `-ImplicitCastExpr 0x5595875308f0 <col:51> 'Storage::index_type':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5595875308d0 <col:51> 'Storage::index_type':'unsigned int' lvalue ParmVar 0x55958752f1f8 'c' 'Storage::index_type':'unsigned int'
|-CXXMethodDecl 0x55958752f400 <line:35:5, col:38> col:17 used set_head 'void (Storage::index_type)' inline
| `-ParmVarDecl 0x55958752f370 <col:26, col:37> col:37 h 'Storage::index_type':'unsigned int'
|-CXXMethodDecl 0x55958752f548 <line:36:5, col:38> col:17 used set_tail 'void (Storage::index_type)' inline
| `-ParmVarDecl 0x55958752f4b8 <col:26, col:37> col:37 t 'Storage::index_type':'unsigned int'
|-CXXMethodDecl 0x55958752f690 <line:37:5, col:46> col:17 used set_head_release 'void (Storage::index_type)' inline
| `-ParmVarDecl 0x55958752f600 <col:34, col:45> col:45 h 'Storage::index_type':'unsigned int'
|-CXXMethodDecl 0x55958752f7d8 <line:38:5, col:46> col:17 set_tail_acquire 'void (Storage::index_type)' inline
| `-ParmVarDecl 0x55958752f748 <col:34, col:45> col:45 t 'Storage::index_type':'unsigned int'
|-CXXMethodDecl 0x55958752f8c8 <line:39:5, col:43> col:23 reserve_tail_atomic 'Storage::index_type ()' inline
|-CXXMethodDecl 0x55958752fb68 <line:41:5, line:43:35> line:41:24 packet_memory_barrier 'void (Packet *volatile &, volatile Storage::index_type &)' static inline
| |-ParmVarDecl 0x55958752f9b0 <col:46, col:64> col:64 packet 'Packet *volatile &'
| |-ParmVarDecl 0x55958752fa58 <line:42:46, col:67> col:67 index 'volatile Storage::index_type &'
| `-DeprecatedAttr 0x55958752fc18 <line:43:24> "" ""
|-CXXMethodDecl 0x55958752fd68 <line:44:5, line:45:35> line:44:17 packet_memory_barrier 'void (Packet *volatile &)' inline
| |-ParmVarDecl 0x55958752fca0 <col:39, col:57> col:57 packet 'Packet *volatile &'
| `-DeprecatedAttr 0x55958752fe10 <line:45:24> "" ""
|-AccessSpecDecl 0x55958752fe80 <line:47:3, col:12> col:3 protected
|-FieldDecl 0x55958752feb8 <line:48:5, col:16> col:16 referenced _capacity 'Storage::index_type':'unsigned int'
|-AccessSpecDecl 0x55958752ff08 <line:50:3, col:10> col:3 private
|-FieldDecl 0x55958752ff40 <line:51:5, col:25> col:25 referenced _head 'volatile Storage::index_type':'volatile unsigned int'
|-FieldDecl 0x55958752ffa0 <line:52:5, col:25> col:25 referenced _tail 'volatile Storage::index_type':'volatile unsigned int'
|-CXXDestructorDecl 0x5595874974f0 <line:9:7> col:7 implicit ~Storage 'void ()' inline default trivial noexcept-unevaluated 0x5595874974f0
|-CXXConstructorDecl 0x5595876131c8 <col:7> col:7 implicit constexpr Storage 'void (const Storage &)' inline default trivial noexcept-unevaluated 0x5595876131c8
| `-ParmVarDecl 0x5595876132d8 <col:7> col:7 'const Storage &'
`-CXXConstructorDecl 0x559587613378 <col:7> col:7 implicit constexpr Storage 'void (Storage &&)' inline default trivial noexcept-unevaluated 0x559587613378
  `-ParmVarDecl 0x559587613488 <col:7> col:7 'Storage &&'

Layout: <CGRecordLayout
  LLVMType:%class.Storage = type { i32, i32, i32 }
  NonVirtualBaseLLVMType:%class.Storage = type { i32, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class SimpleQueue
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   class Storage (base)
       108 |     Storage::index_type _capacity
       112 |     volatile Storage::index_type _head
       116 |     volatile Storage::index_type _tail
       120 |   class Packet *volatile * _q
       128 |   volatile int _drops
       132 |   int _highwater_length
           | [sizeof=136, dsize=136, align=8,
           |  nvsize=136, nvalign=8]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5595872d3b10 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5595872d3c28 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5595872d3cb8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5595872d3d88 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5595872d3e70 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5595872d4088 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5595872d3f30 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5595872d4238 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5595872d4140 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5595872d4380 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5595872d42f0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5595872d44c8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5595872d4438 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5595872d4610 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5595872d4580 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5595872d46d8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5595872d4820 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5595872d4790 <col:28> col:31 'int'
|-CXXMethodDecl 0x5595872d48e8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5595872d4a30 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5595872d49a0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5595872d4ba8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5595872d4ae8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5595872d4cf0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5595872d4c60 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5595872d4db8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5595872d4f78 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5595872d4e68 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5595872d4ee0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5595872d51c8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5595872d5038 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5595872d50b0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5595872d5278 <col:86> "" ""
|-CXXMethodDecl 0x5595872d54e8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5595872d5358 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5595872d53d0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5595872d5698 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5595872d55a8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5595872d5848 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5595872d5750 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5595872d5b18 <line:81:5, col:98> col:28 used compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5595872d5900 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5595872d5978 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5595872d59f0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5595872d5df8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5595872d5be0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5595872d5c58 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5595872d5cd0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5595872d5eb0 <col:115> "" ""
|-AccessSpecDecl 0x5595872d5f20 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5595872d5f58 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5595872d7470 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5595872d7470
| `-ParmVarDecl 0x5595872d7578 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5595872d7618 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5595872d7618
| `-ParmVarDecl 0x5595872d7728 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55958730cd58 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5595874feb50 <col:7>
|-CXXConstructorDecl 0x55958730ce30 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55958730ce30
| `-ParmVarDecl 0x55958730cf48 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55958730cfb8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55958730cfb8
| `-ParmVarDecl 0x55958730d0c8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x559587501550 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5595874ed6f8 prev 0x5595874e2900 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5595874ed7f0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5595874ed8e0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5595874eda08 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5595874edb88 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5595874edd08 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5595874ede88 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5595874fecb8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5595874ff528 <col:11>
|-CXXDestructorDecl 0x5595874fed90 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5595874feec8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5595874feec8
| `-ParmVarDecl 0x5595874fefd8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5595874ff078 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5595874ff078
| `-ParmVarDecl 0x5595874ff188 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x559587501f48 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x559587502058 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5595875022d8 <col:11>
|   `-ReturnStmt 0x5595875022c8 <col:11>
|     `-UnaryOperator 0x5595875022b0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5595875022a0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5595875020c8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5595875020c8
  `-ParmVarDecl 0x5595875021d8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5595874edef0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5595874ee008 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5595874ee0a8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5595874ee110 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5595874ee178 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5595874ee1e0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5595874ee240 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5595874ee300 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5595874ee360 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5595874ee3c0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5595874febc8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5595874ee0a8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5595874ff538 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5595874ff590 <col:12>
|-CXXConstructorDecl 0x5595874ff1f8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5595874ff1f8
| `-ParmVarDecl 0x5595874ff308 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5595874ff3a8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5595874ff3a8
| `-ParmVarDecl 0x5595874ff4b8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x559587501630 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5595874dc010 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5595874dc128 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5595874dc1b8 <col:16, col:22> col:16 public
|-EnumDecl 0x5595874dc1e0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5595874dc2e0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5595874dc3c0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595874dc2c0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5595874dc2a0 <col:21> 'int' 28
| `-EnumConstantDecl 0x5595874dc370 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5595874dc3d8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5595874dc350 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5595874dc330 <col:22> 'int' 64
|-CXXMethodDecl 0x5595874dc718 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5595874dc400 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5595874dc480 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5595874dc4f8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5595874dc570 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5595874dc7d8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5595874dc9d8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5595874dc850 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5595874dc8c8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5595874dca88 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5595874dcbe8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5595874dcaf8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5595874dcc90 <col:72> warn_unused_result ""
|-TypedefDecl 0x5595874dcff0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5595874dcf80 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5595874dcf20 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5595874dcee0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x559586fb32d0 'void'
|       |-PointerType 0x55958725c3b0 'unsigned char *'
|       | `-BuiltinType 0x559586fb33d0 'unsigned char'
|       |-TypedefType 0x559587058920 'size_t' sugar
|       | |-Typedef 0x559587023b20 'size_t'
|       | `-BuiltinType 0x559586fb3430 'unsigned long'
|       `-PointerType 0x559586fb3ad0 'void *'
|         `-BuiltinType 0x559586fb32d0 'void'
|-CXXMethodDecl 0x5595874dd468 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5595874dd060 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5595874dd0d8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5595874dd170 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5595874dd1f0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5595874f7b60 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5595874f7b48 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5595874f7b10 <col:58> 'int' 0
| |-ParmVarDecl 0x5595874dd270 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5595874f7b88 <col:76> 'int' 0
| |-ParmVarDecl 0x5595874dd2f0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5595874f7ba8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5595874dd538 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5595874dd5b8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5595874dd678 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5595874dd718 <col:20>
| `-OptimizeNoneAttr 0x5595874dd770 <col:30>
|-CXXMethodDecl 0x5595874dd7e8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5595874dd888 <col:20>
| `-OptimizeNoneAttr 0x5595874dd8e0 <col:30>
|-CXXMethodDecl 0x5595874dd958 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5595874dd9f8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5595874ddaa8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5595874ddb48 <col:20>
| |-OptimizeNoneAttr 0x5595874ddba0 <col:30>
| `-WarnUnusedResultAttr 0x5595874ddbc8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5595874ddc20 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5595874ddcc0 <col:20>
| `-OptimizeNoneAttr 0x5595874ddd18 <col:30>
|-CXXMethodDecl 0x5595874ddd68 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5595874dde08 <col:20>
| `-OptimizeNoneAttr 0x5595874dde60 <col:30>
|-CXXMethodDecl 0x5595874ddea8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x5595874ddf48 <col:20>
| `-OptimizeNoneAttr 0x5595874ddfa0 <col:30>
|-CXXMethodDecl 0x5595874ddfe8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5595874de0a8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5595874de170 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5595874de238 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5595874de2f8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5595874de418 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5595874f7c70 <col:54, line:99:5>
|   `-ReturnStmt 0x5595874f7c60 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5595874f7c48 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5595874f7c18 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5595874ee6f8
|         `-CXXThisExpr 0x5595874f7c08 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5595874de5b8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5595874de4c8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5595874f7d20 <col:67, line:103:5>
|   `-BinaryOperator 0x5595874f7d00 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5595874f7c98 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5595874ee6f8
|     | `-CXXThisExpr 0x5595874f7c88 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5595874f7ce8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5595874f7cc8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5595874de4c8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5595874de6b0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5595874f7da0 <col:33, line:107:5>
|   `-ReturnStmt 0x5595874f7d90 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5595874f7d78 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5595874f7d48 <col:16> 'void *' lvalue ->_destructor_argument 0x5595874ee760
|         `-CXXThisExpr 0x5595874f7d38 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5595874de770 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5595874f83d0 <col:25, line:113:5>
|   |-ParenExpr 0x5595874f8118 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5595874f80e8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5595874f7e58 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5595874f7e30 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5595874f7df8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5595874f7dc8 <col:24> '<bound member function type>' ->shared 0x5595874dd7e8
|   |   |       `-ImplicitCastExpr 0x5595874f7e18 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5595874f7db8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5595874f7eb8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5595874f7e98 <col:42> 'int' 0
|   |   `-CallExpr 0x5595874f8048 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5595874f8030 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5595874f8010 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55958704f730 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5595874f8088 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874f7f28 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5595874f80a0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874f7f50 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5595874f80b8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5595874f7f88 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5595874f80d0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5595874f7ff8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5595874f7fe0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5595874f7fa8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5595874f8318 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5595874f8148 <col:2> 'unsigned char *' lvalue ->_head 0x5595874ee500
|   | | `-CXXThisExpr 0x5595874f8138 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5595874f8300 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5595874f82e0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5595874f8188 <col:10> 'unsigned char *' lvalue ->_data 0x5595874ee568
|   |     | `-CXXThisExpr 0x5595874f8178 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5595874f82c8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5595874f82a8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5595874f81c8 <col:18> 'unsigned char *' lvalue ->_tail 0x5595874ee5d0
|   |         | `-CXXThisExpr 0x5595874f81b8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5595874f8290 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5595874f8270 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5595874f8208 <col:26> 'unsigned char *' lvalue ->_end 0x5595874ee638
|   |             | `-CXXThisExpr 0x5595874f81f8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5595874f8258 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5595874f8238 <col:33> 'int' 0
|   `-BinaryOperator 0x5595874f83b0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5595874f8348 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5595874ee6f8
|     | `-CXXThisExpr 0x5595874f8338 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5595874f8398 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5595874f8378 <col:16> 'int' 0
|-CXXMethodDecl 0x5595874de8b0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5595874de820 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5595874de958 <col:20>
| |-OptimizeNoneAttr 0x5595874de9b0 <col:30>
| `-WarnUnusedResultAttr 0x5595874de9d8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5595874deaa8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5595874dea18 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5595874deb50 <col:20>
| |-OptimizeNoneAttr 0x5595874deba8 <col:30>
| `-WarnUnusedResultAttr 0x5595874debd0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5595874ded08 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5595874dec10 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5595874dedb0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5595874deeb0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5595874dee20 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5595874def58 <col:20>
| `-OptimizeNoneAttr 0x5595874defb0 <col:30>
|-CXXMethodDecl 0x5595874df078 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5595874defe8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5595874df120 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5595874df220 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5595874df190 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5595874df2c8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5595874df3c8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5595874df338 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5595874df470 <col:20>
| `-OptimizeNoneAttr 0x5595874df4c8 <col:30>
|-CXXMethodDecl 0x5595874df658 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5595874df508 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5595874df580 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5595874f7bc8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5595874df708 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5595874df908 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5595874df780 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5595874df7f8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5595874dfb18 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5595874df9c8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5595874dfa40 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5595874dfd28 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5595874dfbd8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5595874dfc58 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5595874f7bd8 <col:39> 'int' 0
|-CXXMethodDecl 0x5595874dfdf8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5595874dfec0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5595874dff88 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5595874e0048 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5595874e0110 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5595874e0258 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5595874e01c8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5595874e0428 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5595874e0318 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5595874e0390 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5595874e04f8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5595874e05b8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5595874e0658 <col:20>
| `-OptimizeNoneAttr 0x5595874e06b0 <col:30>
|-CXXMethodDecl 0x5595874e0700 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5595874e07a0 <col:20>
| `-OptimizeNoneAttr 0x5595874e07f8 <col:30>
|-CXXMethodDecl 0x5595874e0848 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5595874e0908 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5595874e09d0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5595874e0a70 <col:20>
| `-OptimizeNoneAttr 0x5595874e0ac8 <col:30>
|-CXXMethodDecl 0x5595874e0c18 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5595874e0b08 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5595874e0b80 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5595874e0d68 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5595874e0cd8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5595874e0e40 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5595874e0f00 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5595874e0fa0 <col:20>
| `-OptimizeNoneAttr 0x5595874e0ff8 <col:30>
|-CXXMethodDecl 0x5595874e1048 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5595874e10e8 <col:20>
| `-OptimizeNoneAttr 0x5595874e1140 <col:30>
|-CXXMethodDecl 0x5595874e1190 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5595874e1258 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5595874e12f8 <col:20>
| `-OptimizeNoneAttr 0x5595874e1350 <col:30>
|-CXXMethodDecl 0x5595874e1398 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5595874e14b8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5595874e1628 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5595874e1568 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5595874e1718 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5595874e17b8 <col:20>
| `-OptimizeNoneAttr 0x5595874e1810 <col:30>
|-CXXMethodDecl 0x5595874e1860 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5595874e1920 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5595874e1b58 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5595874e19d0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5595874e1a48 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5595874e1c08 <col:20>
| `-OptimizeNoneAttr 0x5595874e1c60 <col:30>
|-CXXMethodDecl 0x5595874e1d08 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5595874e1da8 <col:20>
| `-OptimizeNoneAttr 0x5595874e1e00 <col:30>
|-CXXMethodDecl 0x5595874e1e50 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5595874e1ef0 <col:20>
| `-OptimizeNoneAttr 0x5595874e1f48 <col:30>
|-CXXMethodDecl 0x5595874e1f90 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5595874e2030 <col:20>
| `-OptimizeNoneAttr 0x5595874e2088 <col:30>
|-CXXMethodDecl 0x5595874e2188 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5595874e20c0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5595874e2230 <col:20>
| `-OptimizeNoneAttr 0x5595874e2288 <col:30>
|-CXXMethodDecl 0x5595874e2448 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5595874e22c0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5595874e2338 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5595874e24f8 <col:20>
| `-OptimizeNoneAttr 0x5595874e2550 <col:30>
|-CXXMethodDecl 0x5595874e25f8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5595874e2718 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5595874e2838 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5595874e28d8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5595874e2900 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5595874e2a28 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5595874e2ac8 <col:20>
| `-OptimizeNoneAttr 0x5595874e2b20 <col:30>
|-CXXMethodDecl 0x5595874e2bc8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5595874e2c68 <col:20>
| `-OptimizeNoneAttr 0x5595874e2cc0 <col:30>
|-AccessSpecDecl 0x5595874e2ce8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5595874e2d10 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5595874e2e10 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5595874e2e60 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5595874e2df0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5595874e2dd0 <col:14> 'int' 48
|-CXXMethodDecl 0x5595874e2ec8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5595874e2f68 <col:20>
| `-OptimizeNoneAttr 0x5595874e2fc0 <col:30>
|-CXXMethodDecl 0x5595874e3038 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5595874e30d8 <col:20>
| `-OptimizeNoneAttr 0x5595874e3130 <col:30>
|-CXXMethodDecl 0x5595874e31f8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5595874e3168 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5595874e3398 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5595874e3538 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5595874e3448 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5595874e35e0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5595874e36e0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5595874e3a90 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595874e36c0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5595874e36a0 <col:9> 'int' 0
| |-EnumConstantDecl 0x5595874e3770 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5595874e3aa8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595874e3750 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5595874e3730 <col:14> 'int' 1
| |-EnumConstantDecl 0x5595874e3800 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5595874e3ac0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595874e37e0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5595874e37c0 <col:14> 'int' 2
| |-EnumConstantDecl 0x5595874e3890 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5595874e3ad8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595874e3870 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5595874e3850 <col:14> 'int' 3
| |-EnumConstantDecl 0x5595874e3920 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5595874e3af0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595874e3900 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5595874e38e0 <col:13> 'int' 4
| |-EnumConstantDecl 0x5595874e39b0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5595874e3b08 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595874e3990 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5595874e3970 <col:13> 'int' 5
| `-EnumConstantDecl 0x5595874e3a40 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5595874e3b20 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5595874e3a20 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5595874e3a00 <col:14> 'int' 6
|-CXXMethodDecl 0x5595874e3b88 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5595874e3c28 <col:20>
| `-OptimizeNoneAttr 0x5595874e3c80 <col:30>
|-CXXMethodDecl 0x5595874e3d78 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5595874e3cb8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5595874e3e20 <col:20>
| `-OptimizeNoneAttr 0x5595874e3e78 <col:30>
|-CXXMethodDecl 0x5595874e3ee8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5595874e4010 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5595874e4188 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5595874e40c0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5595874e4250 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5595874e4318 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5595874e4458 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5595874e43c8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5595874e4500 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5595874e4600 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5595874e4800 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595874e45e0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5595874e45c0 <col:23> 'int' 0
| |-EnumConstantDecl 0x5595874e4690 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5595874e4818 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595874e4670 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5595874e4650 <col:45> 'int' 4
| |-EnumConstantDecl 0x5595874e4720 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5595874e4830 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595874e4700 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5595874e46e0 <col:24> 'int' 0
| `-EnumConstantDecl 0x5595874e47b0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5595874e4848 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5595874e4790 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5595874e4770 <col:47> 'int' 16
|-CXXMethodDecl 0x5595874e48a8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5595874e4a18 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5595874e4958 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5595874e4ac0 <col:20>
| `-OptimizeNoneAttr 0x5595874e4b18 <col:30>
|-CXXMethodDecl 0x5595874e4b68 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5595874f84f0 <col:18, col:36>
|   `-ReturnStmt 0x5595874f84e0 <col:20, col:33>
|     `-ImplicitCastExpr 0x5595874f84c8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5595874f84a8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5595874f8478 <col:27> '<bound member function type>' ->xanno 0x5595874e2bc8
|           `-CXXThisExpr 0x5595874f8468 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5595874e4c60 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5595874f8600 <col:30, col:48>
|   `-ReturnStmt 0x5595874f85f0 <col:32, col:45>
|     `-ImplicitCastExpr 0x5595874f85d8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5595874f85b8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5595874f8588 <col:39> '<bound member function type>' ->xanno 0x5595874e2a28
|           `-CXXThisExpr 0x5595874f8578 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5595874e4d48 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5595874f8798 <col:24, col:50>
|   `-ReturnStmt 0x5595874f8788 <col:26, col:47>
|     `-UnaryOperator 0x5595874f8770 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5595874f8750 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5595874f8738 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5595874f86e8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5595874eda08
|         |   `-CXXMemberCallExpr 0x5595874f86c8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5595874f8698 <col:34> '<bound member function type>' ->xanno 0x5595874e2bc8
|         |       `-CXXThisExpr 0x5595874f8688 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5595874f8718 <col:46> 'int' 0
|-CXXMethodDecl 0x5595874e4e50 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5595874f8968 <col:36, col:62>
|   `-ReturnStmt 0x5595874f8958 <col:38, col:59>
|     `-UnaryOperator 0x5595874f8940 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5595874f8920 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5595874f8908 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5595874f8880 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5595874eda08
|         |   `-CXXMemberCallExpr 0x5595874f8860 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5595874f8830 <col:46> '<bound member function type>' ->xanno 0x5595874e2a28
|         |       `-CXXThisExpr 0x5595874f8820 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5595874f88b0 <col:58> 'int' 0
|-CXXMethodDecl 0x5595874e4f68 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5595874f8b00 <col:26, col:53>
|   `-ReturnStmt 0x5595874f8af0 <col:28, col:50>
|     `-UnaryOperator 0x5595874f8ad8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5595874f8ab8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5595874f8aa0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5595874f8a50 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5595874edd08
|         |   `-CXXMemberCallExpr 0x5595874f8a30 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5595874f8a00 <col:36> '<bound member function type>' ->xanno 0x5595874e2bc8
|         |       `-CXXThisExpr 0x5595874f89f0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5595874f8a80 <col:49> 'int' 0
|-CXXMethodDecl 0x5595874e5088 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5595874f8cd8 <col:38, col:65>
|   `-ReturnStmt 0x5595874f8cc8 <col:40, col:62>
|     `-UnaryOperator 0x5595874f8cb0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5595874f8c90 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5595874f8c78 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5595874f8be8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5595874edd08
|         |   `-CXXMemberCallExpr 0x5595874f8bc8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5595874f8b98 <col:48> '<bound member function type>' ->xanno 0x5595874e2a28
|         |       `-CXXThisExpr 0x5595874f8b88 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5595874f8c18 <col:61> 'int' 0
|-CXXMethodDecl 0x5595874e5238 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5595874e5140 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5595874f93a8 <col:34, line:463:5>
|   |-ParenExpr 0x5595874f91f0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5595874f91c0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5595874f8e28 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5595874f8df8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5595874f8d48 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5595874f8d30 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5595874f8cf0 <col:23> 'int' lvalue ParmVar 0x5595874e5140 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5595874f8d10 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5595874f8dd8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5595874f8da8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5595874f8d68 <col:33> 'int' lvalue ParmVar 0x5595874e5140 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5595874f8dc0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5595874f8d88 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5595874e2e10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5595874f8e88 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5595874f8e68 <col:56> 'int' 0
|   |   `-CallExpr 0x5595874f9120 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5595874f9108 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5595874f90e8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55958704f730 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5595874f9160 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874f8f78 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5595874f9178 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874f8fa8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5595874f9190 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5595874f8fe0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5595874f91a8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5595874f90d0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5595874f90b8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5595874f9078 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5595874f9398 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5595874f9380 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5595874f9360 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5595874f9330 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5595874f92e0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5595874eda08
|         |   `-CXXMemberCallExpr 0x5595874f92c0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5595874f9290 <col:9> '<bound member function type>' ->xanno 0x5595874e2a28
|         |       `-CXXThisExpr 0x5595874f9280 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5595874f9348 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5595874f9310 <col:21> 'int' lvalue ParmVar 0x5595874e5140 'i' 'int'
|-CXXMethodDecl 0x5595874e5488 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5595874e52f8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5595874e5370 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5595874f9a38 <col:40, line:472:5>
|   |-ParenExpr 0x5595874f9850 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5595874f9820 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5595874f9500 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5595874f94d0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5595874f9420 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5595874f9408 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5595874f93c8 <col:23> 'int' lvalue ParmVar 0x5595874e52f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5595874f93e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5595874f94b0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5595874f9480 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5595874f9440 <col:33> 'int' lvalue ParmVar 0x5595874e52f8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5595874f9498 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5595874f9460 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5595874e2e10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5595874f9560 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5595874f9540 <col:56> 'int' 0
|   |   `-CallExpr 0x5595874f9780 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5595874f9768 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5595874f9748 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55958704f730 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5595874f97c0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874f95d0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5595874f97d8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874f9600 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5595874f97f0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5595874f9638 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5595874f9808 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5595874f9730 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5595874f9718 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5595874f96d8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5595874f9a18 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5595874f99c0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5595874f9990 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5595874f9940 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5595874eda08
|     | |   `-CXXMemberCallExpr 0x5595874f9920 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5595874f98f0 <col:2> '<bound member function type>' ->xanno 0x5595874e2bc8
|     | |       `-CXXThisExpr 0x5595874f98e0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5595874f99a8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5595874f9970 <col:14> 'int' lvalue ParmVar 0x5595874e52f8 'i' 'int'
|     `-ImplicitCastExpr 0x5595874f9a00 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5595874f99e0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5595874e5370 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5595874e5648 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5595874e5550 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5595874fa1b8 <col:36, line:485:5>
|   |-ParenExpr 0x5595874f9f20 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5595874f9ef0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5595874f9bd0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5595874f9ba0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5595874f9ab0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5595874f9a98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5595874f9a58 <col:23> 'int' lvalue ParmVar 0x5595874e5550 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5595874f9a78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5595874f9b80 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5595874f9b68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5595874f9ad0 <col:33> 'int' lvalue ParmVar 0x5595874e5550 'i' 'int'
|   |   |     `-BinaryOperator 0x5595874f9b48 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5595874f9b30 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5595874f9af0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5595874e2e10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5595874f9b10 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5595874f9c30 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5595874f9c10 <col:60> 'int' 0
|   |   `-CallExpr 0x5595874f9e50 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5595874f9e38 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5595874f9e18 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55958704f730 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5595874f9e90 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874f9ca0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5595874f9ea8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874f9cd8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5595874f9ec0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5595874f9d10 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5595874f9ed8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5595874f9e00 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5595874f9de8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5595874f9da8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5595874fa1a8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5595874fa190 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5595874fa178 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5595874fa148 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5595874fa0e8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5595874fa0b8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5595874fa030 <col:61, col:70> 'char const[48]' lvalue ->c 0x5595874ed8e0
|             |   `-CXXMemberCallExpr 0x5595874fa010 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5595874f9fe0 <col:61> '<bound member function type>' ->xanno 0x5595874e2a28
|             |       `-CXXThisExpr 0x5595874f9fd0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5595874fa0d0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5595874fa060 <col:74> 'int' lvalue ParmVar 0x5595874e5550 'i' 'int'
|-CXXMethodDecl 0x5595874e5898 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5595874e5708 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5595874e5780 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5595874fa908 <col:42, line:500:5>
|   |-ParenExpr 0x5595874fa6a0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5595874fa670 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5595874fa350 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5595874fa320 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5595874fa230 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5595874fa218 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5595874fa1d8 <col:23> 'int' lvalue ParmVar 0x5595874e5708 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5595874fa1f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5595874fa300 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5595874fa2e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5595874fa250 <col:33> 'int' lvalue ParmVar 0x5595874e5708 'i' 'int'
|   |   |     `-BinaryOperator 0x5595874fa2c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5595874fa2b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5595874fa270 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5595874e2e10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5595874fa290 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5595874fa3b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5595874fa390 <col:60> 'int' 0
|   |   `-CallExpr 0x5595874fa5d0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5595874fa5b8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5595874fa598 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55958704f730 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5595874fa610 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874fa420 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5595874fa628 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874fa458 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5595874fa640 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5595874fa490 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5595874fa658 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5595874fa580 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5595874fa568 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5595874fa528 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5595874fa8e8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5595874fa898 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5595874fa868 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5595874fa810 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5595874fa7e0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5595874fa790 <col:48, col:57> 'char [48]' lvalue ->c 0x5595874ed8e0
|     |     |   `-CXXMemberCallExpr 0x5595874fa770 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5595874fa740 <col:48> '<bound member function type>' ->xanno 0x5595874e2bc8
|     |     |       `-CXXThisExpr 0x5595874fa730 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5595874fa7f8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5595874fa7c0 <col:61> 'int' lvalue ParmVar 0x5595874e5708 'i' 'int'
|     `-ImplicitCastExpr 0x5595874fa8d0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5595874fa8b0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5595874e5780 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5595874e5a58 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5595874e5960 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5595874fb068 <col:35, line:513:5>
|   |-ParenExpr 0x5595874fad78 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5595874fad48 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5595874faaa0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5595874faa70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5595874fa980 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5595874fa968 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5595874fa928 <col:23> 'int' lvalue ParmVar 0x5595874e5960 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5595874fa948 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5595874faa50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5595874faa38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5595874fa9a0 <col:33> 'int' lvalue ParmVar 0x5595874e5960 'i' 'int'
|   |   |     `-BinaryOperator 0x5595874faa18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5595874faa00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5595874fa9c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5595874e2e10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5595874fa9e0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5595874fab00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5595874faae0 <col:60> 'int' 0
|   |   `-CallExpr 0x5595874faca8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5595874fac90 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5595874fac70 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55958704f730 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5595874face8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874fab70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5595874fad00 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874faba8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5595874fad18 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5595874fabe0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5595874fad30 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5595874fac58 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5595874fac40 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5595874fac00 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5595874fb058 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5595874fb040 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5595874fb028 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5595874faff8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5595874faf70 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5595874faf40 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5595874faef0 <col:60, col:69> 'char const[48]' lvalue ->c 0x5595874ed8e0
|             |   `-CXXMemberCallExpr 0x5595874faed0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5595874faea0 <col:60> '<bound member function type>' ->xanno 0x5595874e2a28
|             |       `-CXXThisExpr 0x5595874fae90 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5595874faf58 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5595874faf20 <col:73> 'int' lvalue ParmVar 0x5595874e5960 'i' 'int'
|-CXXMethodDecl 0x5595874e5ca8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5595874e5b18 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5595874e5b90 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5595874fb788 <col:41, line:528:5>
|   |-ParenExpr 0x5595874fb510 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5595874fb4e0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5595874fb200 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5595874fb1d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5595874fb0e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5595874fb0c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5595874fb088 <col:23> 'int' lvalue ParmVar 0x5595874e5b18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5595874fb0a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5595874fb1b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5595874fb198 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5595874fb100 <col:33> 'int' lvalue ParmVar 0x5595874e5b18 'i' 'int'
|   |   |     `-BinaryOperator 0x5595874fb178 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5595874fb160 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5595874fb120 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5595874e2e10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5595874fb140 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5595874fb260 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5595874fb240 <col:60> 'int' 0
|   |   `-CallExpr 0x5595874fb440 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5595874fb428 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5595874fb408 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55958704f730 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5595874fb480 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874fb2d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5595874fb498 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874fb308 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5595874fb4b0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5595874fb340 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5595874fb4c8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5595874fb3f0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5595874fb3d8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5595874fb398 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5595874fb768 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5595874fb718 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5595874fb6e8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5595874fb690 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5595874fb650 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5595874fb600 <col:47, col:56> 'char [48]' lvalue ->c 0x5595874ed8e0
|     |     |   `-CXXMemberCallExpr 0x5595874fb5e0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5595874fb5b0 <col:47> '<bound member function type>' ->xanno 0x5595874e2bc8
|     |     |       `-CXXThisExpr 0x5595874fb5a0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5595874fb668 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5595874fb630 <col:60> 'int' lvalue ParmVar 0x5595874e5b18 'i' 'int'
|     `-ImplicitCastExpr 0x5595874fb750 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5595874fb730 <col:65> 'int16_t':'short' lvalue ParmVar 0x5595874e5b90 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5595874e5e68 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5595874e5d70 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5595874fbe58 <col:36, line:541:5>
|   |-ParenExpr 0x5595874fbbf8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5595874fbbc8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5595874fb920 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5595874fb8f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5595874fb800 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5595874fb7e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5595874fb7a8 <col:23> 'int' lvalue ParmVar 0x5595874e5d70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5595874fb7c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5595874fb8d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5595874fb8b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5595874fb820 <col:33> 'int' lvalue ParmVar 0x5595874e5d70 'i' 'int'
|   |   |     `-BinaryOperator 0x5595874fb898 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5595874fb880 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5595874fb840 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5595874e2e10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5595874fb860 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5595874fb980 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5595874fb960 <col:60> 'int' 0
|   |   `-CallExpr 0x5595874fbb28 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5595874fbb10 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5595874fbaf0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55958704f730 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5595874fbb68 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874fb9f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5595874fbb80 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874fba28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5595874fbb98 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5595874fba60 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5595874fbbb0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5595874fbad8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5595874fbac0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5595874fba80 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5595874fbe48 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5595874fbe30 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5595874fbe18 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5595874fbde8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5595874fbd90 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5595874fbd60 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5595874fbd10 <col:61, col:70> 'char const[48]' lvalue ->c 0x5595874ed8e0
|             |   `-CXXMemberCallExpr 0x5595874fbcf0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5595874fbcc0 <col:61> '<bound member function type>' ->xanno 0x5595874e2a28
|             |       `-CXXThisExpr 0x5595874fbcb0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5595874fbd78 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5595874fbd40 <col:74> 'int' lvalue ParmVar 0x5595874e5d70 'i' 'int'
|-CXXMethodDecl 0x5595874e6038 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5595874e5f28 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5595874e5fa0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5595874e60e8 <col:20>
| `-OptimizeNoneAttr 0x5595874e6140 <col:30>
|-CXXMethodDecl 0x5595874e6278 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5595874e6180 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5595874fc528 <col:35, line:562:5>
|   |-ParenExpr 0x5595874fc2c8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5595874fc298 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5595874fbff0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5595874fbfc0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5595874fbed0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5595874fbeb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5595874fbe78 <col:23> 'int' lvalue ParmVar 0x5595874e6180 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5595874fbe98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5595874fbfa0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5595874fbf88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5595874fbef0 <col:33> 'int' lvalue ParmVar 0x5595874e6180 'i' 'int'
|   |   |     `-BinaryOperator 0x5595874fbf68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5595874fbf50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5595874fbf10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5595874e2e10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5595874fbf30 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5595874fc050 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5595874fc030 <col:60> 'int' 0
|   |   `-CallExpr 0x5595874fc1f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5595874fc1e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5595874fc1c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55958704f730 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5595874fc238 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874fc0c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5595874fc250 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874fc0f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5595874fc268 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5595874fc130 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5595874fc280 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5595874fc1a8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5595874fc190 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5595874fc150 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5595874fc518 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5595874fc500 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5595874fc4e8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5595874fc4b8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5595874fc460 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5595874fc430 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5595874fc3e0 <col:60, col:69> 'char const[48]' lvalue ->c 0x5595874ed8e0
|             |   `-CXXMemberCallExpr 0x5595874fc3c0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5595874fc390 <col:60> '<bound member function type>' ->xanno 0x5595874e2a28
|             |       `-CXXThisExpr 0x5595874fc380 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5595874fc448 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5595874fc410 <col:73> 'int' lvalue ParmVar 0x5595874e6180 'i' 'int'
|-CXXMethodDecl 0x5595874e6488 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5595874e6338 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5595874e63b0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5595874fcc08 <col:41, line:577:5>
|   |-ParenExpr 0x5595874fc998 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5595874fc968 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5595874fc6c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5595874fc690 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5595874fc5a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5595874fc588 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5595874fc548 <col:23> 'int' lvalue ParmVar 0x5595874e6338 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5595874fc568 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5595874fc670 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5595874fc658 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5595874fc5c0 <col:33> 'int' lvalue ParmVar 0x5595874e6338 'i' 'int'
|   |   |     `-BinaryOperator 0x5595874fc638 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5595874fc620 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5595874fc5e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5595874e2e10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5595874fc600 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5595874fc720 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5595874fc700 <col:60> 'int' 0
|   |   `-CallExpr 0x5595874fc8c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5595874fc8b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5595874fc890 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55958704f730 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5595874fc908 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874fc790 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5595874fc920 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874fc7c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5595874fc938 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5595874fc800 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5595874fc950 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5595874fc878 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5595874fc860 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5595874fc820 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5595874fcbe8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5595874fcb98 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5595874fcb68 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5595874fcb08 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5595874fcad8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5595874fca88 <col:47, col:56> 'char [48]' lvalue ->c 0x5595874ed8e0
|     |     |   `-CXXMemberCallExpr 0x5595874fca68 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5595874fca38 <col:47> '<bound member function type>' ->xanno 0x5595874e2bc8
|     |     |       `-CXXThisExpr 0x5595874fca28 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5595874fcaf0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5595874fcab8 <col:60> 'int' lvalue ParmVar 0x5595874e6338 'i' 'int'
|     `-ImplicitCastExpr 0x5595874fcbd0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5595874fcbb0 <col:65> 'int32_t':'int' lvalue ParmVar 0x5595874e63b0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5595874e6648 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5595874e6550 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5595874fd338 <col:36, line:591:5>
|   |-ParenExpr 0x5595874fd078 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5595874fd048 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5595874fcda0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5595874fcd70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5595874fcc80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5595874fcc68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5595874fcc28 <col:23> 'int' lvalue ParmVar 0x5595874e6550 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5595874fcc48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5595874fcd50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5595874fcd38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5595874fcca0 <col:33> 'int' lvalue ParmVar 0x5595874e6550 'i' 'int'
|   |   |     `-BinaryOperator 0x5595874fcd18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5595874fcd00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5595874fccc0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5595874e2e10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5595874fcce0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5595874fce00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5595874fcde0 <col:60> 'int' 0
|   |   `-CallExpr 0x5595874fcfa8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5595874fcf90 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5595874fcf70 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55958704f730 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5595874fcfe8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874fce70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5595874fd000 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874fcea8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5595874fd018 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5595874fcee0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5595874fd030 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5595874fcf58 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5595874fcf40 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5595874fcf00 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5595874fd328 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5595874fd310 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5595874fd2f8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5595874fd2c8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5595874fd240 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5595874fd210 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5595874fd1c0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5595874ed8e0
|             |   `-CXXMemberCallExpr 0x5595874fd1a0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5595874fd170 <col:61> '<bound member function type>' ->xanno 0x5595874e2a28
|             |       `-CXXThisExpr 0x5595874fd160 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5595874fd228 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5595874fd1f0 <col:74> 'int' lvalue ParmVar 0x5595874e6550 'i' 'int'
|-CXXMethodDecl 0x5595874e6898 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5595874e6708 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5595874e6780 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5595874fda18 <col:42, line:606:5>
|   |-ParenExpr 0x5595874fd7a8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5595874fd778 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5595874fd4d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5595874fd4a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5595874fd3b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5595874fd398 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5595874fd358 <col:23> 'int' lvalue ParmVar 0x5595874e6708 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5595874fd378 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5595874fd480 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5595874fd468 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5595874fd3d0 <col:33> 'int' lvalue ParmVar 0x5595874e6708 'i' 'int'
|   |   |     `-BinaryOperator 0x5595874fd448 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5595874fd430 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5595874fd3f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5595874e2e10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5595874fd410 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5595874fd530 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5595874fd510 <col:60> 'int' 0
|   |   `-CallExpr 0x5595874fd6d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5595874fd6c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5595874fd6a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55958704f730 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5595874fd718 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874fd5a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5595874fd730 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874fd5d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5595874fd748 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5595874fd610 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5595874fd760 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5595874fd688 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5595874fd670 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5595874fd630 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5595874fd9f8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5595874fd9a8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5595874fd978 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5595874fd918 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5595874fd8e8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5595874fd898 <col:48, col:57> 'char [48]' lvalue ->c 0x5595874ed8e0
|     |     |   `-CXXMemberCallExpr 0x5595874fd878 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5595874fd848 <col:48> '<bound member function type>' ->xanno 0x5595874e2bc8
|     |     |       `-CXXThisExpr 0x5595874fd838 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5595874fd900 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5595874fd8c8 <col:61> 'int' lvalue ParmVar 0x5595874e6708 'i' 'int'
|     `-ImplicitCastExpr 0x5595874fd9e0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5595874fd9c0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5595874e6780 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5595874e6a30 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5595874e6960 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5595874fe288 <col:33, line:620:5>
|   |-ParenExpr 0x5595874fe000 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5595874fdfd0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5595874fdc20 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5595874fdbf0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5595874fda90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5595874fda78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5595874fda38 <col:23> 'int' lvalue ParmVar 0x5595874e6960 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5595874fda58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5595874fdbd0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5595874fdbb8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5595874fdab0 <col:33> 'int' lvalue ParmVar 0x5595874e6960 'i' 'int'
|   |   |     `-BinaryOperator 0x5595874fdb98 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5595874fdb80 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5595874fdad0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5595874e2e10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5595874fdb58 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5595874fdb40 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5595874fdb08 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5595874fdc80 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5595874fdc60 <col:79> 'int' 0
|   |   `-CallExpr 0x5595874fdf30 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5595874fdf18 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5595874fdef8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55958704f730 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5595874fdf70 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874fdd68 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5595874fdf88 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874fddb0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5595874fdfa0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5595874fdde8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5595874fdfb8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5595874fdee0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5595874fdec8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5595874fde88 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5595874fe278 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5595874fe260 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5595874fe248 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5595874fe218 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5595874fe190 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5595874fe160 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5595874fe110 <col:67, col:76> 'char const[48]' lvalue ->c 0x5595874ed8e0
|             |   `-CXXMemberCallExpr 0x5595874fe0f0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5595874fe0c0 <col:67> '<bound member function type>' ->xanno 0x5595874e2a28
|             |       `-CXXThisExpr 0x5595874fe0b0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5595874fe178 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5595874fe140 <col:80> 'int' lvalue ParmVar 0x5595874e6960 'i' 'int'
|-CXXMethodDecl 0x5595874e6c48 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5595874e6af0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5595874e6b70 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5595874feab0 <col:45, line:635:5>
|   |-ParenExpr 0x5595874fe7f8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5595874fe7c8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5595874fe490 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5595874fe460 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5595874fe300 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5595874fe2e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5595874fe2a8 <col:23> 'int' lvalue ParmVar 0x5595874e6af0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5595874fe2c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5595874fe440 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5595874fe428 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5595874fe320 <col:33> 'int' lvalue ParmVar 0x5595874e6af0 'i' 'int'
|   |   |     `-BinaryOperator 0x5595874fe408 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5595874fe3f0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5595874fe340 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5595874e2e10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5595874fe3c8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5595874fe3b0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5595874fe378 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5595874fe4f0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5595874fe4d0 <col:79> 'int' 0
|   |   `-CallExpr 0x5595874fe728 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5595874fe710 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5595874fe6f0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55958704f730 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5595874fe768 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874fe560 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5595874fe780 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5595874fe5a8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5595874fe798 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5595874fe5e0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5595874fe7b0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5595874fe6d8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5595874fe6c0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5595874fe678 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5595874fea90 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5595874fe9f8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5595874fe9c8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5595874fe968 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5595874fe938 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5595874fe8e8 <col:54, col:63> 'char [48]' lvalue ->c 0x5595874ed8e0
|     |     |   `-CXXMemberCallExpr 0x5595874fe8c8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5595874fe898 <col:54> '<bound member function type>' ->xanno 0x5595874e2bc8
|     |     |       `-CXXThisExpr 0x5595874fe888 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5595874fe950 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5595874fe918 <col:67> 'int' lvalue ParmVar 0x5595874e6af0 'i' 'int'
|     `-CXXConstCastExpr 0x5595874fea60 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5595874fea48 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5595874fea10 <col:91> 'const void *' lvalue ParmVar 0x5595874e6b70 'x' 'const void *'
|-CXXMethodDecl 0x5595874e6d18 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5595874feb38 <col:34, line:640:5>
|   `-ReturnStmt 0x5595874feb28 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5595874feb10 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5595874feae0 <col:16> 'Packet *' lvalue ->_data_packet 0x5595874ee498
|         `-CXXThisExpr 0x5595874fead0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5595874e6e58 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5595874e6dc8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5595874f7bf8 <col:46> 'bool' true
|-CXXMethodDecl 0x5595874e6fd8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5595874e6f10 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5595874e7080 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5595874e7830 <line:660:22> "" ""
| |-EnumConstantDecl 0x5595874e7180 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5595874e78a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595874e7160 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5595874e7140 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5595874dc2e0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5595874e7210 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5595874e78b8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595874e71f0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5595874e71d0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5595874dc370 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5595874e72a0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5595874e78d0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595874e7280 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5595874e7260 <col:21> 'int' 0
| |-EnumConstantDecl 0x5595874e7330 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5595874e78e8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595874e7310 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5595874e72f0 <col:19> 'int' 16
| |-EnumConstantDecl 0x5595874e73c0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5595874e7900 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595874e73a0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5595874e7380 <col:21> 'int' 16
| |-EnumConstantDecl 0x5595874e7450 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5595874e7918 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595874e7430 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5595874e7410 <col:19> 'int' 32
| |-EnumConstantDecl 0x5595874e74e0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5595874e7930 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595874e74c0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5595874e74a0 <col:19> 'int' EnumConstant 0x5595874e7330 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5595874e7570 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5595874e7948 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595874e7550 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5595874e7530 <col:19> 'int' EnumConstant 0x5595874e7450 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5595874e7640 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5595874e7960 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595874e7620 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5595874e7600 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5595874e75c0 <col:23> 'int' EnumConstant 0x5595874e7570 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5595874e75e0 <col:40> 'int' 2
| |-EnumConstantDecl 0x5595874e7710 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5595874e7978 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595874e76f0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5595874e76d0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5595874e7690 <col:23> 'int' EnumConstant 0x5595874e7570 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5595874e76b0 <col:40> 'int' 4
| `-EnumConstantDecl 0x5595874e77e0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5595874e7990 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5595874e77c0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5595874e77a0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5595874e7760 <col:23> 'int' EnumConstant 0x5595874e7570 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5595874e7780 <col:40> 'int' 8
|-CXXMethodDecl 0x5595874e79d0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5595874e7a70 <col:68> "" ""
|-CXXMethodDecl 0x5595874e7b08 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5595874e7ba8 <col:45> "" ""
|-CXXMethodDecl 0x5595874e7c40 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5595874e7ce0 <col:57> "" ""
|-CXXMethodDecl 0x5595874e7d78 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5595874e7e18 <col:45> "" ""
|-CXXMethodDecl 0x5595874e7eb0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5595874e7f50 <col:57> "" ""
|-CXXMethodDecl 0x5595874e7fe0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5595874e8080 <col:51> "" ""
|-CXXMethodDecl 0x5595874e8110 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5595874e81b0 <col:63> "" ""
|-CXXMethodDecl 0x5595874e8240 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5595874e82e0 <col:53> "" ""
|-CXXMethodDecl 0x5595874e8370 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5595874e8410 <col:65> "" ""
|-CXXMethodDecl 0x5595874e8528 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5595874e8498 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5595874e85d0 <col:61> "" ""
|-CXXMethodDecl 0x5595874e8768 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5595874e8658 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5595874e86d0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5595874e8818 <col:67> "" ""
|-CXXMethodDecl 0x5595874e8930 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5595874e88a0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5595874e89d8 <col:63> "" ""
|-CXXMethodDecl 0x5595874e8b70 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5595874e8a60 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5595874e8ad8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5595874e8c20 <col:69> "" ""
|-CXXMethodDecl 0x5595874e8d38 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5595874e8ca8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5595874e8de0 <col:63> "" ""
|-CXXMethodDecl 0x5595874eb4b8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5595874eb3a8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5595874eb420 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5595874eb568 <col:69> "" ""
|-CXXMethodDecl 0x5595874eb680 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5595874eb5f0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5595874eb728 <col:62> "" ""
|-CXXMethodDecl 0x5595874eb8c0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5595874eb7b0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5595874eb828 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5595874eb970 <col:68> "" ""
|-CXXMethodDecl 0x5595874eba88 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5595874eb9f8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5595874ebb30 <col:63> "" ""
|-CXXMethodDecl 0x5595874ebcc8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5595874ebbb8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5595874ebc30 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5595874ebd78 <col:69> "" ""
|-CXXMethodDecl 0x5595874ebe08 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5595874ebea8 <col:64> "" ""
|-CXXMethodDecl 0x5595874ebf38 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5595874ebfd8 <col:52> "" ""
|-CXXMethodDecl 0x5595874ec068 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5595874ec108 <col:67> "" ""
|-CXXMethodDecl 0x5595874ec198 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5595874ec238 <col:55> "" ""
|-CXXMethodDecl 0x5595874ec350 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5595874ec2c0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5595874ec3f8 <col:58> "" ""
|-CXXMethodDecl 0x5595874ec590 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5595874ec480 <col:33> col:36 'int'
| |-ParmVarDecl 0x5595874ec4f8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5595874ec640 <col:62> "" ""
|-CXXMethodDecl 0x5595874ec758 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5595874ec6c8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5595874ec800 <col:58> "" ""
|-CXXMethodDecl 0x5595874ec998 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5595874ec888 <col:33> col:36 'int'
| |-ParmVarDecl 0x5595874ec900 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5595874eca48 <col:62> "" ""
|-CXXMethodDecl 0x5595874ecb60 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5595874ecad0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5595874ecc08 <col:60> "" ""
|-CXXMethodDecl 0x5595874ecda0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5595874ecc90 <col:34> col:37 'int'
| |-ParmVarDecl 0x5595874ecd08 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5595874ece50 <col:64> "" ""
|-CXXMethodDecl 0x5595874ecf68 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5595874eced8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5595874ed010 <col:58> "" ""
|-CXXMethodDecl 0x5595874ed1a8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5595874ed098 <col:33> col:36 'int'
| |-ParmVarDecl 0x5595874ed110 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5595874ed258 <col:62> "" ""
|-CXXMethodDecl 0x5595874ed370 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5595874ed2e0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5595874ed418 <col:59> "" ""
|-CXXMethodDecl 0x5595874ed5b0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5595874ed4a0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5595874ed518 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5595874ed660 <col:63> "" ""
|-AccessSpecDecl 0x5595874ed6d0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5595874ed6f8 prev 0x5595874e2900 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5595874ed7f0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5595874ed8e0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5595874eda08 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5595874edb88 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5595874edd08 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5595874ede88 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5595874fecb8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5595874ff528 <col:11>
| |-CXXDestructorDecl 0x5595874fed90 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5595874feec8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5595874feec8
| | `-ParmVarDecl 0x5595874fefd8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5595874ff078 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5595874ff078
| | `-ParmVarDecl 0x5595874ff188 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x559587501f48 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x559587502058 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5595875022d8 <col:11>
| |   `-ReturnStmt 0x5595875022c8 <col:11>
| |     `-UnaryOperator 0x5595875022b0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5595875022a0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5595875020c8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5595875020c8
|   `-ParmVarDecl 0x5595875021d8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5595874edef0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5595874ee008 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5595874ee0a8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5595874ee110 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5595874ee178 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5595874ee1e0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5595874ee240 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5595874ee300 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5595874ee360 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5595874ee3c0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5595874febc8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5595874ee0a8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5595874ff538 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5595874ff590 <col:12>
| |-CXXConstructorDecl 0x5595874ff1f8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5595874ff1f8
| | `-ParmVarDecl 0x5595874ff308 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5595874ff3a8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5595874ff3a8
| | `-ParmVarDecl 0x5595874ff4b8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x559587501630 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5595874ee438 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5595874ee498 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5595874ee500 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5595874ee568 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5595874ee5d0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5595874ee638 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5595874ee698 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5595874ee6f8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5595874ee760 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5595874ee7e8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5595874ee438 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5595874feb60 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5595874ee698 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5595874ff5a0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5595874ff600 <col:21, line:755:5>
|-CXXConstructorDecl 0x5595874ee988 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5595874ee8c8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5595874eea80 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5595874eec68 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5595874eeb70 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5595874eef38 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5595874eed20 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5595874eed98 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5595874eee10 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5595874ef158 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5595874ef008 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5595874ef080 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5595874f7738 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5595874ef218 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5595874ef290 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5595874ef308 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5595874f7890 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5595874f7800 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5595874f79d8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5595874f7948 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5595874f7ad0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559587532f00 <../elements/standard/simplequeue.hh:65:1, line:114:1> line:65:7 class SimpleQueue definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-public 'Storage'
|-CXXRecordDecl 0x559587533098 <col:1, col:7> col:7 implicit referenced class SimpleQueue
|-AccessSpecDecl 0x559587533128 <col:54, col:60> col:54 public
|-CXXConstructorDecl 0x5595875331b0 <line:67:5, col:17> col:5 SimpleQueue 'void ()'
|-CXXMethodDecl 0x5595875332b0 <line:69:5, col:40> col:9 drops 'int () const'
| `-CompoundStmt 0x559587497638 <col:23, col:40>
|   `-ReturnStmt 0x559587497628 <col:25, col:32>
|     `-ImplicitCastExpr 0x559587497610 <col:32> 'int' <LValueToRValue>
|       `-MemberExpr 0x5595874975e0 <col:32> 'const volatile int' lvalue ->_drops 0x559587496278
|         `-CXXThisExpr 0x5595874975d0 <col:32> 'const SimpleQueue *' implicit this
|-CXXMethodDecl 0x559587533378 <line:70:5, col:62> col:9 highwater_length 'int () const'
| `-CompoundStmt 0x5595874976b8 <col:34, col:62>
|   `-ReturnStmt 0x5595874976a8 <col:36, col:43>
|     `-ImplicitCastExpr 0x559587497690 <col:43> 'int' <LValueToRValue>
|       `-MemberExpr 0x559587497660 <col:43> 'const int' lvalue ->_highwater_length 0x5595874962e0
|         `-CXXThisExpr 0x559587497650 <col:43> 'const SimpleQueue *' implicit this
|-CXXMethodDecl 0x5595875334e8 <line:72:5, col:28> col:17 enq 'bool (Packet *)' inline
| `-ParmVarDecl 0x559587533428 <col:21, col:27> col:28 'Packet *'
|-CXXMethodDecl 0x559587533630 <line:73:5, col:33> col:17 lifo_enq 'void (Packet *)' inline
| `-ParmVarDecl 0x5595875335a0 <col:26, col:32> col:33 'Packet *'
|-CXXMethodDecl 0x5595875336f8 <line:74:5, col:24> col:20 deq 'Packet *()' inline
|-CXXMethodDecl 0x559587533840 <line:77:5, col:49> col:13 packet 'Packet *(int) const'
| |-ParmVarDecl 0x5595875337b0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5595874977a8 <col:33, col:49>
|   `-ReturnStmt 0x559587497798 <col:35, col:46>
|     `-ImplicitCastExpr 0x559587497780 <col:42, col:46> 'Packet *' <LValueToRValue>
|       `-ArraySubscriptExpr 0x559587497760 <col:42, col:46> 'Packet *volatile' lvalue
|         |-ImplicitCastExpr 0x559587497730 <col:42> 'Packet *volatile *' <LValueToRValue>
|         | `-MemberExpr 0x5595874976e0 <col:42> 'Packet *volatile *const' lvalue ->_q 0x559587496210
|         |   `-CXXThisExpr 0x5595874976d0 <col:42> 'const SimpleQueue *' implicit this
|         `-ImplicitCastExpr 0x559587497748 <col:45> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x559587497710 <col:45> 'int' lvalue ParmVar 0x5595875337b0 'i' 'int'
|-CXXMethodDecl 0x559587533908 <line:78:5, col:16> col:10 reset 'void ()'
|-FunctionTemplateDecl 0x559587533be8 <line:80:5, col:52> col:40 yank1
| |-TemplateTypeParmDecl 0x5595875339a8 <col:15, col:24> col:24 referenced typename depth 0 index 0 Filter
| `-CXXMethodDecl 0x559587533b48 <col:32, col:52> col:40 yank1 'Packet *(Filter)'
|   `-ParmVarDecl 0x559587533a58 <col:46> col:52 'Filter'
|-FunctionTemplateDecl 0x559587533e58 <line:81:5, col:57> col:40 yank1_peek
| |-TemplateTypeParmDecl 0x559587533c48 <col:15, col:24> col:24 referenced typename depth 0 index 0 Filter
| `-CXXMethodDecl 0x559587533db8 <col:32, col:57> col:40 yank1_peek 'Packet *(Filter)'
|   `-ParmVarDecl 0x559587533cf8 <col:51> col:57 'Filter'
|-FunctionTemplateDecl 0x5595875343a0 <line:82:5, col:67> col:36 yank
| |-TemplateTypeParmDecl 0x559587533eb8 <col:15, col:24> col:24 referenced typename depth 0 index 0 Filter
| `-CXXMethodDecl 0x559587534300 <col:32, col:67> col:36 yank 'int (Filter, Vector<Packet *> &)'
|   |-ParmVarDecl 0x559587533f68 <col:41> col:47 'Filter'
|   `-ParmVarDecl 0x5595875341e0 <col:49, col:66> col:67 'Vector<Packet *> &'
|-CXXMethodDecl 0x559587534430 <line:84:5, col:60> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x559587516798 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x559587497810 <col:36, col:60>
|   `-ReturnStmt 0x559587497800 <col:38, col:45>
|     `-ImplicitCastExpr 0x5595874977e8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5595874977c0 <col:45> 'const char [12]' lvalue "SimpleQueue"
|-CXXMethodDecl 0x5595875344f8 <line:85:5, col:58> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x559587516860 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x559587497870 <col:36, col:58>
|   `-ReturnStmt 0x559587497860 <col:38, col:45>
|     `-ImplicitCastExpr 0x559587497848 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x559587497828 <col:45> 'const char []' lvalue Var 0x559587516b98 'PORTS_1_1X2' 'const char []'
|-CXXMethodDecl 0x5595875345c0 <line:86:5, col:53> col:17 processing 'const char *() const'
| |-Overrides: [ 0x559587516c28 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x559587497950 <col:36, col:53>
|   `-ReturnStmt 0x559587497940 <col:38, col:45>
|     `-ImplicitCastExpr 0x559587497928 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x559587497908 <col:45> 'const char [5]' lvalue "h/lh"
|-CXXMethodDecl 0x559587495220 <line:87:5, col:27> col:11 cast 'void *(const char *)'
| |-Overrides: [ 0x559587517450 Element::cast 'void *(const char *)' ]
| `-ParmVarDecl 0x559587534678 <col:16, col:26> col:27 'const char *'
|-CXXMethodDecl 0x559587495500 <line:89:5, col:49> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x559587518030 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5595874953b0 <col:19, col:33> col:34 'Vector<String> &'
| `-ParmVarDecl 0x559587495428 <col:36, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x559587495658 <line:90:5, col:33> col:9 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x559587518280 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x5595874955c0 <col:20, col:32> col:33 'ErrorHandler *'
|-CXXMethodDecl 0x5595874957a0 <line:91:5, col:30> col:10 cleanup 'void (Element::CleanupStage)'
| |-Overrides: [ 0x559587518a98 Element::cleanup 'void (Element::CleanupStage)' ]
| `-ParmVarDecl 0x559587495710 <col:18> col:30 'Element::CleanupStage'
|-CXXMethodDecl 0x559587495868 <line:92:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x55958751aa80 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x559587497988 <col:39, col:54>
|   `-ReturnStmt 0x559587497978 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x559587497968 <col:48> 'bool' true
|-CXXMethodDecl 0x559587495b40 <line:93:5, col:56> col:9 live_reconfigure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55958751ad50 Element::live_reconfigure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5595874959f0 <col:26, col:40> col:41 'Vector<String> &'
| `-ParmVarDecl 0x559587495a68 <col:43, col:55> col:56 'ErrorHandler *'
|-CXXMethodDecl 0x559587495d10 <line:94:5, col:44> col:10 take_state 'void (Element *, ErrorHandler *)'
| |-Overrides: [ 0x559587518488 Element::take_state 'void (Element *, ErrorHandler *)' ]
| |-ParmVarDecl 0x559587495c00 <col:21, col:28> col:29 'Element *'
| `-ParmVarDecl 0x559587495c78 <col:31, col:43> col:44 'ErrorHandler *'
|-CXXMethodDecl 0x559587495de0 <line:95:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x559587518100 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x559587495fa8 <line:97:5, col:32> col:10 push 'void (int, Packet *)'
| |-Overrides: [ 0x559587515608 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x559587495e98 <col:15, col:19> col:19 port 'int'
| `-ParmVarDecl 0x559587495f10 <col:25, col:31> col:32 'Packet *'
|-CXXMethodDecl 0x559587496100 <line:98:5, col:26> col:13 pull 'Packet *(int)'
| |-Overrides: [ 0x559587515798 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x559587496070 <col:18, col:22> col:22 port 'int'
|-AccessSpecDecl 0x5595874961a8 <line:100:3, col:12> col:3 protected
|-FieldDecl 0x559587496210 <line:102:5, col:24> col:24 referenced _q 'Packet *volatile *'
|-FieldDecl 0x559587496278 <line:103:5, col:18> col:18 referenced _drops 'volatile int'
|-FieldDecl 0x5595874962e0 <line:104:5, col:9> col:9 referenced _highwater_length 'int'
|-FriendDecl 0x559587496448 <line:106:5, col:18> col:12 'class MixedQueue':'MixedQueue'
|-FriendDecl 0x5595874965a8 <line:107:5, col:18> col:12 'class TokenQueue':'TokenQueue'
|-FriendDecl 0x559587496708 <line:108:5, col:18> col:12 'class InOrderQueue':'InOrderQueue'
|-FriendDecl 0x559587496868 <line:109:5, col:18> col:12 'class ECNQueue':'ECNQueue'
|-CXXMethodDecl 0x5595874969d0 <line:111:5, col:47> col:19 read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5595874968b8 <col:32, col:39> col:40 'Element *'
| `-ParmVarDecl 0x559587496938 <col:42, col:46> col:47 'void *'
|-CXXMethodDecl 0x559587496cb0 <line:112:5, col:75> col:16 write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x559587496a90 <col:30, col:42> col:43 'const String &'
| |-ParmVarDecl 0x559587496b08 <col:45, col:52> col:53 'Element *'
| |-ParmVarDecl 0x559587496b88 <col:55, col:59> col:60 'void *'
| `-ParmVarDecl 0x559587496c00 <col:62, col:74> col:75 'ErrorHandler *'
|-CXXConstructorDecl 0x559587496d98 <line:65:7> col:7 implicit SimpleQueue 'void (const SimpleQueue &)' inline default_delete noexcept-unevaluated 0x559587496d98
| `-ParmVarDecl 0x559587496ea8 <col:7> col:7 'const SimpleQueue &'
|-CXXConstructorDecl 0x559587496f48 <col:7> col:7 implicit SimpleQueue 'void (SimpleQueue &&)' inline default_delete noexcept-unevaluated 0x559587496f48
| `-ParmVarDecl 0x559587497058 <col:7> col:7 'SimpleQueue &&'
|-CXXMethodDecl 0x5595874970f8 <col:7> col:7 implicit operator= 'SimpleQueue &(const SimpleQueue &)' inline default_delete noexcept-unevaluated 0x5595874970f8
| `-ParmVarDecl 0x559587497208 <col:7> col:7 'const SimpleQueue &'
|-CXXMethodDecl 0x559587497278 <col:7> col:7 implicit operator= 'SimpleQueue &(SimpleQueue &&)' inline default_delete noexcept-unevaluated 0x559587497278
| `-ParmVarDecl 0x559587497388 <col:7> col:7 'SimpleQueue &&'
`-CXXDestructorDecl 0x559587497410 <col:7> col:7 implicit ~SimpleQueue 'void ()' inline default noexcept-unevaluated 0x559587497410
  `-Overrides: [ 0x559587515338 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.SimpleQueue = type { %class.Element.base, %class.Storage, %class.Packet**, i32, i32 }
  NonVirtualBaseLLVMType:%class.SimpleQueue = type { %class.Element.base, %class.Storage, %class.Packet**, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5595872e8f00 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5595872e9018 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5595872e90b8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5595872e9118 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5595872e9178 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5595872e9228 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5595872e9530 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5595872e9648 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5595872e96f0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5595872e9758 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5595872e97e8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5595872ef880 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5595872efcb8 <col:12>
|-CXXConstructorDecl 0x5595872ef988 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5595872efa98 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5595872e96f0 'data' 'const char *'
| | `-ImplicitCastExpr 0x5595872f2240 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5595872f2210 <col:12> 'const char *const' lvalue .data 0x5595872e96f0
| |     `-DeclRefExpr 0x5595872f21f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5595872efa98 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5595872e9758 'length' 'int'
| | `-ImplicitCastExpr 0x5595872f22d0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5595872f22a0 <col:12> 'const int' lvalue .length 0x5595872e9758
| |     `-DeclRefExpr 0x5595872f2280 <col:12> 'const String::rep_t' lvalue ParmVar 0x5595872efa98 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5595872e97e8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5595872f2360 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5595872f2330 <col:12> 'String::memo_t *const' lvalue .memo 0x5595872e97e8
| |     `-DeclRefExpr 0x5595872f2310 <col:12> 'const String::rep_t' lvalue ParmVar 0x5595872efa98 '' 'const String::rep_t &'
| `-CompoundStmt 0x5595872f23b8 <col:12>
|-CXXConstructorDecl 0x5595872efb38 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5595872efb38
| `-ParmVarDecl 0x5595872efc48 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5595872f51a0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x559587300bb8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x559587300cc8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5595873011e0 <col:12>
|   |-BinaryOperator 0x559587300ff8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x559587300fb0 <col:12> 'const char *' lvalue ->data 0x5595872e96f0
|   | | `-CXXThisExpr 0x559587300fa0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x559587300fe0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x559587300f70 <col:12> 'const char *const' lvalue .data 0x5595872e96f0
|   |     `-DeclRefExpr 0x559587300f50 <col:12> 'const String::rep_t' lvalue ParmVar 0x559587300cc8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5595873010c0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x559587301078 <col:12> 'int' lvalue ->length 0x5595872e9758
|   | | `-CXXThisExpr 0x559587301068 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5595873010a8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x559587301038 <col:12> 'const int' lvalue .length 0x5595872e9758
|   |     `-DeclRefExpr 0x559587301018 <col:12> 'const String::rep_t' lvalue ParmVar 0x559587300cc8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x559587301188 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x559587301140 <col:12> 'String::memo_t *' lvalue ->memo 0x5595872e97e8
|   | | `-CXXThisExpr 0x559587301130 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x559587301170 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x559587301100 <col:12> 'String::memo_t *const' lvalue .memo 0x5595872e97e8
|   |     `-DeclRefExpr 0x5595873010e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x559587300cc8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5595873011d0 <col:12>
|     `-UnaryOperator 0x5595873011b8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5595873011a8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x559587300d38 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x559587300d38
  `-ParmVarDecl 0x559587300e48 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5595872e0470 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5595872e0588 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5595872e0618 <col:16, col:22> col:16 public
|-TypedefDecl 0x5595872e0658 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x559586fb3dc0 'const char *'
|   `-QualType 0x559586fb3311 'const char' const
|     `-BuiltinType 0x559586fb3310 'char'
|-TypedefDecl 0x5595872e06e0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5595872e06b0 'String::const_iterator' sugar
|   |-Typedef 0x5595872e0658 'const_iterator'
|   `-PointerType 0x559586fb3dc0 'const char *'
|     `-QualType 0x559586fb3311 'const char' const
|       `-BuiltinType 0x559586fb3310 'char'
|-TypedefDecl 0x5595872e0850 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5595872e07c0 'int (String::*)() const'
|   |-RecordType 0x5595872e0500 'String'
|   | `-CXXRecord 0x5595872e0470 'String'
|   `-ParenType 0x5595872e0760 'int () const' sugar
|     `-FunctionProtoType 0x5595872b42f0 'int () const' const cdecl
|       `-BuiltinType 0x559586fb3370 'int'
|-TypedefDecl 0x5595872e08b8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x559587108ed0 'int64_t' sugar
|   |-Typedef 0x55958701c2d0 'int64_t'
|   `-TypedefType 0x559586ff54d0 '__int64_t' sugar
|     |-Typedef 0x559586ff50a8 '__int64_t'
|     `-BuiltinType 0x559586fb3390 'long'
|-TypedefDecl 0x5595872e0920 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x559587108df0 'uint64_t' sugar
|   |-Typedef 0x55958701c470 'uint64_t'
|   `-TypedefType 0x559586ff5560 '__uint64_t' sugar
|     |-Typedef 0x559586ff5118 '__uint64_t'
|     `-BuiltinType 0x559586fb3430 'unsigned long'
|-TypedefDecl 0x5595872e09b0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5595872e0980 'String::intmax_t' sugar
|   |-Typedef 0x5595872e08b8 'intmax_t'
|   `-TypedefType 0x559587108ed0 'int64_t' sugar
|     |-Typedef 0x55958701c2d0 'int64_t'
|     `-TypedefType 0x559586ff54d0 '__int64_t' sugar
|       |-Typedef 0x559586ff50a8 '__int64_t'
|       `-BuiltinType 0x559586fb3390 'long'
|-TypedefDecl 0x5595872e0a40 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5595872e0a10 'String::uintmax_t' sugar
|   |-Typedef 0x5595872e0920 'uintmax_t'
|   `-TypedefType 0x559587108df0 'uint64_t' sugar
|     |-Typedef 0x55958701c470 'uint64_t'
|     `-TypedefType 0x559586ff5560 '__uint64_t' sugar
|       |-Typedef 0x559586ff5118 '__uint64_t'
|       `-BuiltinType 0x559586fb3430 'unsigned long'
|-CXXConstructorDecl 0x5595872e0b00 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5595872e0ca8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5595872e0be8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5595872e0e58 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5595872e0d98 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5595872e0fb0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5595872e0f20 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5595872e11c8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5595872e1078 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5595872e10f8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5595872e13e8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5595872e1298 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5595872e1318 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5595872e1608 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5595872e14b8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5595872e1538 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5595872e1828 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5595872e16d8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5595872e1758 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5595872e19b8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5595872e18f0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5595872e1b38 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5595872e1a78 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5595872e1cc8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5595872e1c00 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5595872e1e20 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5595872e1d90 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5595872e1f78 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5595872e1ee8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5595872e20d0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5595872e2040 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5595872e2258 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5595872e2198 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5595872e23e8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5595872e2320 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5595872e2578 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5595872e24b0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5595872e2708 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5595872e2640 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5595872e2800 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5595872e2928 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5595872e2aa8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5595872e29e0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5595872e2bf8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5595872e2b68 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5595872e2cb0 <col:63> "" ""
|-CXXMethodDecl 0x5595872e2df8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5595872e2d38 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5595872e3008 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5595872e2eb8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5595872e2f38 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5595872e3228 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5595872e30d0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5595872e3150 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5595872e3508 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5595872e32e8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5595872e3368 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5595872ef350 <col:55> 'int' 10
| `-ParmVarDecl 0x5595872e33e0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5595872ef370 <col:76> 'bool' true
|-CXXMethodDecl 0x5595872e37e8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5595872e35d0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5595872e3650 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5595872ef380 <col:56> 'int' 10
| `-ParmVarDecl 0x5595872e36c8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5595872ef3a0 <col:77> 'bool' true
|-CXXMethodDecl 0x5595872e38f0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5595872e39b8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5595872e3a80 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5595872e3b20 <col:20>
| `-OptimizeNoneAttr 0x5595872e3b78 <col:30>
|-CXXConversionDecl 0x5595872e3c68 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5595872e3d38 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5595872e3df8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5595872e3ee8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5595872e3fa8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5595872e4128 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5595872e4060 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5595872e4278 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5595872e41e8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5595872e4368 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5595872e4428 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5595872e4678 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5595872e44e0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5595872e4560 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5595872e48d8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5595872e4740 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5595872e47c0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5595872e49a8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5595872e4bb8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5595872e4a60 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5595872e4ae0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5595872e4dd8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5595872e4c80 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5595872e4d00 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5595872e4f68 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5595872e4ea0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5595872e5058 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5595872e51c8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5595872e5108 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5595872e53d8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5595872e5288 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5595872e5308 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5595872e55f0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5595872e5498 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5595872e5510 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5595872e5780 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5595872e56b0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5595872e59a0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5595872e5840 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5595872e58c0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5595872e5af0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5595872e5a60 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5595872e5cc8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5595872e5bb0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5595872e5c30 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5595872e5e18 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5595872e5d88 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5595872e6030 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5595872e5ed0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5595872e5f50 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5595872ef3b0 <col:39> 'int' 0
|-CXXMethodDecl 0x5595872e6250 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5595872e60f0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5595872e6170 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5595872ef3d0 <col:48> 'int' 0
|-CXXMethodDecl 0x5595872e6430 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5595872e6310 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5595872e6390 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5595872ef3f0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5595872e6500 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5595872e65c0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5595872e6680 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5595872e6740 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5595872e6800 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5595872e69a8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5595872e68b0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5595872e6b28 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5595872e6a60 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5595872e6d00 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5595872e6be8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5595872e6e78 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5595872e6db8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5595872e6fc0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5595872e6f30 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5595872e7110 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5595872e7080 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5595872e72e8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5595872e71d0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5595872e7250 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5595872e74c8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5595872e73b0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5595872e7430 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5595872e7618 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5595872e7588 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5595872e7828 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5595872e76d8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5595872e7758 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5595872e7988 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5595872e78f0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5595872e7ae0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5595872e7a48 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5595872e7b88 <col:57> "" ""
|-CXXMethodDecl 0x5595872e7c98 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5595872e7c08 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5595872e7de8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5595872e7d58 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5595872e7f68 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5595872e7ea0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5595872e8030 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5595872e80f0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5595872e81b0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5595872e8250 <col:49> "" ""
|-CXXMethodDecl 0x5595872e82e0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5595872e83a0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5595872e8490 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5595872e8558 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5595872e8618 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5595872e86d8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5595872e87d0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5595872e8898 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5595872e8960 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5595872e8b38 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5595872e8a18 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5595872e8a98 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5595872e8d60 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5595872e8c00 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5595872e8c80 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5595872e8e70 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5595872e8ed8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5595872e8f00 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5595872e9018 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5595872e90b8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5595872e9118 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5595872e9178 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5595872e9228 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5595872e9290 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5595872e94c8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5595872e9518 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5595872e94a8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5595872e93b8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5595872e9360 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5595872e93a0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5595872e9380 <col:32> 'int' 8
|-CXXRecordDecl 0x5595872e9530 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5595872e9648 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5595872e96f0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5595872e9758 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5595872e97e8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5595872ef880 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5595872efcb8 <col:12>
| |-CXXConstructorDecl 0x5595872ef988 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5595872efa98 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5595872e96f0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5595872f2240 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5595872f2210 <col:12> 'const char *const' lvalue .data 0x5595872e96f0
| | |     `-DeclRefExpr 0x5595872f21f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5595872efa98 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5595872e9758 'length' 'int'
| | | `-ImplicitCastExpr 0x5595872f22d0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5595872f22a0 <col:12> 'const int' lvalue .length 0x5595872e9758
| | |     `-DeclRefExpr 0x5595872f2280 <col:12> 'const String::rep_t' lvalue ParmVar 0x5595872efa98 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5595872e97e8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5595872f2360 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5595872f2330 <col:12> 'String::memo_t *const' lvalue .memo 0x5595872e97e8
| | |     `-DeclRefExpr 0x5595872f2310 <col:12> 'const String::rep_t' lvalue ParmVar 0x5595872efa98 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5595872f23b8 <col:12>
| |-CXXConstructorDecl 0x5595872efb38 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5595872efb38
| | `-ParmVarDecl 0x5595872efc48 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5595872f51a0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x559587300bb8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x559587300cc8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5595873011e0 <col:12>
| |   |-BinaryOperator 0x559587300ff8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x559587300fb0 <col:12> 'const char *' lvalue ->data 0x5595872e96f0
| |   | | `-CXXThisExpr 0x559587300fa0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x559587300fe0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x559587300f70 <col:12> 'const char *const' lvalue .data 0x5595872e96f0
| |   |     `-DeclRefExpr 0x559587300f50 <col:12> 'const String::rep_t' lvalue ParmVar 0x559587300cc8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5595873010c0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x559587301078 <col:12> 'int' lvalue ->length 0x5595872e9758
| |   | | `-CXXThisExpr 0x559587301068 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5595873010a8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x559587301038 <col:12> 'const int' lvalue .length 0x5595872e9758
| |   |     `-DeclRefExpr 0x559587301018 <col:12> 'const String::rep_t' lvalue ParmVar 0x559587300cc8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x559587301188 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x559587301140 <col:12> 'String::memo_t *' lvalue ->memo 0x5595872e97e8
| |   | | `-CXXThisExpr 0x559587301130 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x559587301170 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x559587301100 <col:12> 'String::memo_t *const' lvalue .memo 0x5595872e97e8
| |   |     `-DeclRefExpr 0x5595873010e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x559587300cc8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5595873011d0 <col:12>
| |     `-UnaryOperator 0x5595873011b8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5595873011a8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x559587300d38 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x559587300d38
|   `-ParmVarDecl 0x559587300e48 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5595872e9860 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5595872e9aa8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5595872e98c8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5595872e9948 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5595872e99c0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5595872ef840 <col:79, line:261:5>
|   |-BinaryOperator 0x5595872ef4b8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5595872ef450 <col:2, col:5> 'const char *' lvalue .data 0x5595872e96f0
|   | | `-MemberExpr 0x5595872ef420 <col:2> 'String::rep_t' lvalue ->_r 0x5595872e9860
|   | |   `-CXXThisExpr 0x5595872ef410 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5595872ef4a0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5595872ef480 <col:12> 'const char *' lvalue ParmVar 0x5595872e98c8 'data' 'const char *'
|   |-BinaryOperator 0x5595872ef580 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5595872ef518 <col:2, col:5> 'int' lvalue .length 0x5595872e9758
|   | | `-MemberExpr 0x5595872ef4e8 <col:2> 'String::rep_t' lvalue ->_r 0x5595872e9860
|   | |   `-CXXThisExpr 0x5595872ef4d8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5595872ef568 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5595872ef548 <col:14> 'int' lvalue ParmVar 0x5595872e9948 'length' 'int'
|   `-IfStmt 0x5595872ef828 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5595872ef6a0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5595872ef688 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5595872ef668 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5595872ef648 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5595872ef5e0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5595872e97e8
|     |       | `-MemberExpr 0x5595872ef5b0 <col:7> 'String::rep_t' lvalue ->_r 0x5595872e9860
|     |       |   `-CXXThisExpr 0x5595872ef5a0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5595872ef630 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5595872ef610 <col:17> 'String::memo_t *' lvalue ParmVar 0x5595872e99c0 'memo' 'String::memo_t *'
|     `-CallExpr 0x5595872ef800 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5595872ef7e8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5595872ef6f0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5595872d84d8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5595872ef758 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5595872e90b8
|         `-ImplicitCastExpr 0x5595872ef740 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5595872ef720 <col:27> 'String::memo_t *' lvalue ParmVar 0x5595872e99c0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5595872e9d58 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5595872e9b78 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5595872e9bf8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5595872e9c70 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5595872e9860 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5595872efcc8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5595872efe58 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5595872efdc0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5595872efd30 <col:2> '<bound member function type>' ->assign_memo 0x5595872e9aa8
|     | `-ImplicitCastExpr 0x5595872efdf8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5595872efd20 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5595872efe10 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5595872efd60 <col:14> 'const char *' lvalue ParmVar 0x5595872e9b78 'data' 'const char *'
|     |-ImplicitCastExpr 0x5595872efe28 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5595872efd80 <col:20> 'int' lvalue ParmVar 0x5595872e9bf8 'length' 'int'
|     `-ImplicitCastExpr 0x5595872efe40 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5595872efda0 <col:28> 'String::memo_t *' lvalue ParmVar 0x5595872e9c70 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5595872e9ee8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5595872e9e28 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5595872f00b0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5595872f0030 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5595872efe80 <col:2> '<bound member function type>' ->assign_memo 0x5595872e9aa8
|     | `-CXXThisExpr 0x5595872efe70 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5595872f0068 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5595872eff00 <col:14, col:19> 'const char *' lvalue .data 0x5595872e96f0
|     |   `-MemberExpr 0x5595872efed0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5595872e9860
|     |     `-DeclRefExpr 0x5595872efeb0 <col:14> 'const String' lvalue ParmVar 0x5595872e9e28 'x' 'const String &'
|     |-ImplicitCastExpr 0x5595872f0080 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5595872eff80 <col:25, col:30> 'int' lvalue .length 0x5595872e9758
|     |   `-MemberExpr 0x5595872eff50 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5595872e9860
|     |     `-DeclRefExpr 0x5595872eff30 <col:25> 'const String' lvalue ParmVar 0x5595872e9e28 'x' 'const String &'
|     `-ImplicitCastExpr 0x5595872f0098 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5595872f0000 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5595872e97e8
|         `-MemberExpr 0x5595872effd0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5595872e9860
|           `-DeclRefExpr 0x5595872effb0 <col:38> 'const String' lvalue ParmVar 0x5595872e9e28 'x' 'const String &'
|-CXXMethodDecl 0x5595872e9fb0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5595872f0a70 <col:31, line:278:5>
|   `-IfStmt 0x5595872f0a58 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5595872f0150 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5595872f0138 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5595872f0108 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5595872e97e8
|     |     `-MemberExpr 0x5595872f00d8 <col:6> 'String::rep_t' lvalue ->_r 0x5595872e9860
|     |       `-CXXThisExpr 0x5595872f00c8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5595872f0a30 <col:15, line:277:2>
|       |-ParenExpr 0x5595872f0600 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5595872f05d0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5595872f0260 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5595872f0248 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5595872f0230 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5595872f01f0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5595872e90b8
|       |   |       `-ImplicitCastExpr 0x5595872f01d8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5595872f01a8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5595872e97e8
|       |   |           `-MemberExpr 0x5595872f0178 <col:27> 'String::rep_t' lvalue ->_r 0x5595872e9860
|       |   |             `-CXXThisExpr 0x5595872f0168 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5595872f02c0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5595872f02a0 <col:54> 'int' 0
|       |   `-CallExpr 0x5595872f0530 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5595872f0518 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5595872f0498 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55958704f730 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5595872f0570 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5595872f03a8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5595872f0588 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5595872f03d8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5595872f05a0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5595872f0410 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5595872f05b8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5595872f0480 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5595872f0468 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5595872f0430 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5595872f0950 <line:274:6, line:275:22>
|       | |-CallExpr 0x5595872f0810 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5595872f07f8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5595872f0770 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5595872d9920 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5595872f0740 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5595872e90b8
|       | |   `-ImplicitCastExpr 0x5595872f0728 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5595872f06f8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5595872e97e8
|       | |       `-MemberExpr 0x5595872f06c8 <col:40> 'String::rep_t' lvalue ->_r 0x5595872e9860
|       | |         `-CXXThisExpr 0x5595872f06b8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5595872f0910 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5595872f08f8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5595872f0838 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5595872ee790 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5595872f0938 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5595872f0898 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5595872e97e8
|       |       `-MemberExpr 0x5595872f0868 <col:15> 'String::rep_t' lvalue ->_r 0x5595872e9860
|       |         `-CXXThisExpr 0x5595872f0858 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5595872f0a10 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5595872f09a8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5595872e97e8
|         | `-MemberExpr 0x5595872f0978 <col:6> 'String::rep_t' lvalue ->_r 0x5595872e9860
|         |   `-CXXThisExpr 0x5595872f0968 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5595872f09f8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5595872f09d8 <col:16> 'int' 0
|-CXXMethodDecl 0x5595872ea248 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5595872ea068 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5595872ea0e8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5595872ea160 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5595872ea320 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5595872ea570 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5595872ea3d8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5595872ea458 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5595872ea4d0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5595872ea758 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5595872ea640 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5595872ea6c0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5595872ea858 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5595872f0b48 <col:41, line:286:5>
|   `-ReturnStmt 0x5595872f0b38 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5595872f0b08 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5595872f0ad0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5595872f0ab8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5595872f0a98 <col:46> 'int' 1
|-CXXMethodDecl 0x5595872eaaf8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5595872ea910 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5595872ea990 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5595872eaa10 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5595872ee790 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5595872eabc0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5595872ee860 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5595872eea30 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5595872ee918 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5595872ee998 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5595872eeaf0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5595872eebb8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5595872eecb8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5595872eed30 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5595872eeda8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5595872eee10 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5595872eef10 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5595872eef60 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5595872eeef0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5595872eeed0 <col:22> 'int' 14
|-CXXMethodDecl 0x5595872ef178 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5595872eef90 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5595872ef010 <col:38> col:41 'int'
| `-ParmVarDecl 0x5595872ef090 <col:43> col:46 'int'
|-FriendDecl 0x5595872ef280 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5595872ef310 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5595873b1380 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5595873b1558 prev 0x5595873b1380 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5595873b15e8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5595873b1610 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x559586fb3370 'int'
|-TypedefDecl 0x5595873b2f70 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5595873b2f20 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5595873b2f00 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5595873b1828 'type'
|     `-SubstTemplateTypeParmType 0x5595873b17f0 'String' sugar
|       |-TemplateTypeParmType 0x5595872a3d10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5595872a3cc0 'T'
|       `-RecordType 0x5595872e0500 'String'
|         `-CXXRecord 0x5595872e0470 'String'
|-TypedefDecl 0x5595873b3028 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5595873b2ff0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5595873b2fd0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5595873b2f70 'type'
|     `-ElaboratedType 0x5595873b2f20 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5595873b2f00 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5595873b1828 'type'
|         `-SubstTemplateTypeParmType 0x5595873b17f0 'String' sugar
|           |-TemplateTypeParmType 0x5595872a3d10 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5595872a3cc0 'T'
|           `-RecordType 0x5595872e0500 'String'
|             `-CXXRecord 0x5595872e0470 'String'
|-CXXMethodDecl 0x5595873b31a8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5595873b30b8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5595873b3298 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5595873b3378 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5595873b3378
|-CXXMethodDecl 0x5595873b3648 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5595873b3550 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5595873b3888 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5595873b3700 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5595873b3778 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55958757f550 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55958757f440 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55958757f4b8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55958757f6a8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55958757f778 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55958757f9c8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55958757f838 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55958757f8b0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55958757fc28 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55958757fa98 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55958757fb10 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55958757fde8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55958757fcf8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55958757ffa8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55958757feb0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x559587580060 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x559587580110 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x559587580348 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5595875801c0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x559587580238 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5595875805e8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5595875804f0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5595875806b0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x559587580700 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x559587580750 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x559587517ca0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5595873b0028 prev 0x559587517ca0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5595873b12f0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5595873b12a0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5595873b1280 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5595873b1130 'type'
|     `-SubstTemplateTypeParmType 0x5595873b0fc0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x559587279ac0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x559587279a68 'F'
|       `-RecordType 0x5595873b0c20 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5595873b0b40 'typed_array_memory'
|-FieldDecl 0x5595875807a0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5595875807f0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x559587580828 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5595873b00c0 'String' sugar
|   |-TemplateTypeParmType 0x5595872b1030 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5595872b0fd8 'T'
|   `-RecordType 0x5595872e0500 'String'
|     `-CXXRecord 0x5595872e0470 'String'
|-TypedefDecl 0x5595875808b8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x559587580880 'String &'
|   `-SubstTemplateTypeParmType 0x5595873b00c0 'String' sugar
|     |-TemplateTypeParmType 0x5595872b1030 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5595872b0fd8 'T'
|     `-RecordType 0x5595872e0500 'String'
|       `-CXXRecord 0x5595872e0470 'String'
|-TypedefDecl 0x559587580948 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x559587580910 'const String &'
|   `-QualType 0x5595873b00c1 'const String' const
|     `-SubstTemplateTypeParmType 0x5595873b00c0 'String' sugar
|       |-TemplateTypeParmType 0x5595872b1030 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5595872b0fd8 'T'
|       `-RecordType 0x5595872e0500 'String'
|         `-CXXRecord 0x5595872e0470 'String'
|-TypedefDecl 0x5595875809d8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5595875809a0 'String *'
|   `-SubstTemplateTypeParmType 0x5595873b00c0 'String' sugar
|     |-TemplateTypeParmType 0x5595872b1030 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5595872b0fd8 'T'
|     `-RecordType 0x5595872e0500 'String'
|       `-CXXRecord 0x5595872e0470 'String'
|-TypedefDecl 0x559587580a68 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x559587580a30 'const String *'
|   `-QualType 0x5595873b00c1 'const String' const
|     `-SubstTemplateTypeParmType 0x5595873b00c0 'String' sugar
|       |-TemplateTypeParmType 0x5595872b1030 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5595872b0fd8 'T'
|       `-RecordType 0x5595872e0500 'String'
|         `-CXXRecord 0x5595872e0470 'String'
|-TypedefDecl 0x5595875816c0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x559587581670 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x559587581650 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x559587581588 'type'
|     `-LValueReferenceType 0x559587581550 'const String &'
|       `-QualType 0x5595875812f1 'const String' const
|         `-SubstTemplateTypeParmType 0x5595875812f0 'String' sugar
|           |-TemplateTypeParmType 0x559587283a10 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5595872839b8 'T'
|           `-RecordType 0x5595872e0500 'String'
|             `-CXXRecord 0x5595872e0470 'String'
|-TypedefDecl 0x559587581728 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x559587580910 'const String &'
|   `-QualType 0x5595873b00c1 'const String' const
|     `-SubstTemplateTypeParmType 0x5595873b00c0 'String' sugar
|       |-TemplateTypeParmType 0x5595872b1030 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5595872b0fd8 'T'
|       `-RecordType 0x5595872e0500 'String'
|         `-CXXRecord 0x5595872e0470 'String'
|-TypedefDecl 0x559587581780 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x559586fb3370 'int'
|-TypedefDecl 0x5595875817e8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5595875809a0 'String *'
|   `-SubstTemplateTypeParmType 0x5595873b00c0 'String' sugar
|     |-TemplateTypeParmType 0x5595872b1030 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5595872b0fd8 'T'
|     `-RecordType 0x5595872e0500 'String'
|       `-CXXRecord 0x5595872e0470 'String'
|-TypedefDecl 0x559587581850 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x559587580a30 'const String *'
|   `-QualType 0x5595873b00c1 'const String' const
|     `-SubstTemplateTypeParmType 0x5595873b00c0 'String' sugar
|       |-TemplateTypeParmType 0x5595872b1030 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5595872b0fd8 'T'
|       `-RecordType 0x5595872e0500 'String'
|         `-CXXRecord 0x5595872e0470 'String'
|-EnumDecl 0x5595875818a8 <line:134:5> col:5
| `-EnumConstantDecl 0x5595875819a0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x559587581980 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5595872b26b8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5595872b2690 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5595872b2670 <col:40> 'int' 1
|-CXXConstructorDecl 0x559587581a28 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x559587581cb8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x559587581ae0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x559587581b80 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x559587581f48 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x559587581e30 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x559587582208 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5595875820f0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x559587582520 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x559587582400 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x559587582830 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x559587582710 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x559587582b20 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x559587582968 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5595875829e0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x559587582c48 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x559587582cf8 <col:20> Inherited
| `-OptimizeNoneAttr 0x559587582d50 <col:30> Inherited
|-CXXMethodDecl 0x559587582d98 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x559587582e48 <col:20> Inherited
| `-OptimizeNoneAttr 0x559587582ea0 <col:30> Inherited
|-CXXMethodDecl 0x559587582f68 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x559587583018 <col:20> Inherited
| `-OptimizeNoneAttr 0x559587583070 <col:30> Inherited
|-CXXMethodDecl 0x5595875830b8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x559587583168 <col:20> Inherited
| `-OptimizeNoneAttr 0x5595875831c0 <col:30> Inherited
|-CXXMethodDecl 0x559587583208 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5595875832b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x559587583310 <col:30> Inherited
|-CXXMethodDecl 0x559587583358 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x559587583408 <col:20> Inherited
| `-OptimizeNoneAttr 0x559587583460 <col:30> Inherited
|-CXXMethodDecl 0x559587583488 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x559587583538 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5595875835e8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5595875837a8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x559587583698 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x559587583710 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5595875838f8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x559587583868 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x559587583aa8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5595875839b0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x559587583b60 <col:20>
| `-OptimizeNoneAttr 0x559587583bb8 <col:30>
|-CXXMethodDecl 0x559587583cd8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x559587583be0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x559587583d90 <col:20>
| `-OptimizeNoneAttr 0x559587583de8 <col:30>
|-CXXMethodDecl 0x559587583ea0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x559587583e10 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559587583fe8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x559587583f58 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559587584118 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x559587584218 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5595875842e8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5595875843b8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5595875844f8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x559587584468 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559587584640 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5595875845b0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559587584788 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5595875846f8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x559587584840 <col:48> Inherited "" ""
|-CXXMethodDecl 0x559587584940 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5595875848b0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5595875849f8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x559587584ab8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x559587584bb8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x559587584d38 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x559587584c78 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5595875854c8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x559587584df0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x559587585428 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x559587585328 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5595875855a8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5595875856f8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x559587585668 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5595875857b0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5595875859f8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x559587585870 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5595875858e8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x559587585b88 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x559587585ac8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x559587585d98 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x559587585c50 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x559587585cc8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x559587585e58 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5595875860b8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x559587585fc0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x559587586188 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x559587586188

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5595876026f8 prev 0x559587594888 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5595876027f0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x559587602880 <col:22, col:28> col:22 public
|-EnumDecl 0x5595876028a8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5595876029c8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5595876029a8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x559587602990 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x559587602970 <col:14> 'int' 999
| |-EnumConstantDecl 0x559587602a70 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x559587602a50 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x559587602a38 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x559587602a18 <col:14> 'int' 1
| |-EnumConstantDecl 0x559587602b00 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x559587602ae0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x559587602ac0 <col:17> 'int' 0
| |-EnumConstantDecl 0x559587602b90 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x559587602b70 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x559587602b50 <col:13> 'int' 1
| |-EnumConstantDecl 0x559587602c20 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x559587602c00 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x559587602be0 <col:16> 'int' 2
| |-EnumConstantDecl 0x559587602cb0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x559587602c90 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x559587602c70 <col:13> 'int' 3
| |-EnumConstantDecl 0x559587602d40 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x559587602d20 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x559587602d00 <col:15> 'int' 4
| |-EnumConstantDecl 0x559587602dd0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x559587602db0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x559587602d90 <col:14> 'int' 5
| |-EnumConstantDecl 0x559587602e60 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x559587602e40 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x559587602e20 <col:12> 'int' 6
| `-EnumConstantDecl 0x559587602ef0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x559587602ed0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x559587602eb0 <col:13> 'int' 7
|-VarDecl 0x559587602f60 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x559587602fe8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x559587603070 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5595876030f8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x559587603180 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x559587603208 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x559587603290 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x559587603318 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5595876033a0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x559587603428 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5595876034b0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5595876035b0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5595876088d8 '_nerrors' 'int'
| | `-IntegerLiteral 0x559587609068 <line:128:13> 'int' 0
| `-CompoundStmt 0x5595876090d8 <col:16, line:129:5>
|-CXXDestructorDecl 0x5595876036a0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5595876090e8 <col:29, line:132:5>
|-CXXMethodDecl 0x559587603858 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x559587603790 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x559587603920 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x559587603a08 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x559587609140 <col:44, line:161:5>
|   `-ReturnStmt 0x559587609130 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x559587609118 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5595876090f8 <col:9> 'ErrorHandler *' lvalue Var 0x559587608938 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x559587603b48 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x559587603ab8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x559587603c10 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5595876091a0 <col:43, line:173:5>
|   `-ReturnStmt 0x559587609190 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x559587609178 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x559587609158 <col:9> 'ErrorHandler *' lvalue Var 0x5595876089b0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x559587603cc8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x559587603d48 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x559587603e58 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x559587603dc8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x559587603fa8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x559587603f18 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x559587604100 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x559587604068 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x559587604258 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x5595876041c0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5595876043b0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x559587604318 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5595876045c0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x559587604468 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5595876044e8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x559587604798 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x559587604680 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x559587604700 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5595876049b8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x559587604858 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5595876048d8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x559587604b98 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x559587604a78 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x559587604af8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x559587604d78 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x559587604c58 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x559587604cd8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x559587604f00 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x559587604e38 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5595876050d0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x559587604fb8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x559587605030 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5595876093f8 <col:57, line:234:5>
|   `-ReturnStmt 0x5595876093e8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5595876093d0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x559587609378 <col:9, col:41> 'int'
|         |-MemberExpr 0x559587609348 <col:9> '<bound member function type>' ->xmessage 0x559587604f00
|         | `-CXXThisExpr 0x559587609338 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5595876093b8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5595876093a0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x559587609318 <col:18, col:40> 'String' (CXXTemporary 0x559587609318)
|               `-CallExpr 0x5595876092e0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5595876092c8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x559587609240 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5595876070c8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x559587609260 <col:31> 'const String' lvalue ParmVar 0x559587605030 'str' 'const String &'
|                 `-DeclRefExpr 0x559587609280 <col:36> 'const String' lvalue ParmVar 0x559587604fb8 'anno' 'const String &'
|-CXXMethodDecl 0x5595876053b0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x559587605190 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x559587605210 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x559587605288 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x559587609688 <col:68, line:243:5>
|   `-ReturnStmt 0x559587609678 <line:242:2, col:41>
|     `-ExprWithCleanups 0x559587609660 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x559587609600 <col:9, col:41> 'int'
|         |-MemberExpr 0x5595876095d0 <col:9> '<bound member function type>' ->xmessage 0x5595876050d0
|         | `-CXXThisExpr 0x5595876095c0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x559587609498 <col:18> 'const String' lvalue ParmVar 0x559587605190 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x559587609648 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x559587609630 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5595876095a0 <col:24, col:40> 'String' (CXXTemporary 0x5595876095a0)
|               `-CXXMemberCallExpr 0x559587609538 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5595876094c8 <col:24> '<bound member function type>' ->vformat 0x559587606590
|                 | `-CXXThisExpr 0x5595876094b8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x559587609568 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5595876094f8 <col:32> 'const char *' lvalue ParmVar 0x559587605210 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x559587609580 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x559587609518 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x559587605288 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x559587605650 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x559587605478 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5595876054f0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x559587605568 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5595876099c8 <col:23, line:254:5>
|   `-ReturnStmt 0x5595876099b8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5595876099a0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x559587609940 <col:9, col:71> 'int'
|         |-MemberExpr 0x559587609910 <col:9> '<bound member function type>' ->xmessage 0x5595876050d0
|         | `-CXXThisExpr 0x559587609900 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x559587609988 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x559587609970 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5595876098c0 <col:18, col:65> 'String' (CXXTemporary 0x5595876098c0)
|         |     `-CallExpr 0x559587609858 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x559587609840 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x559587609728 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5595876070c8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x559587609748 <col:31> 'const String' lvalue ParmVar 0x5595876054f0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5595876098a0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x559587609888 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x559587609820 <col:37, col:64> 'String' (CXXTemporary 0x559587609820)
|         |             `-CallExpr 0x5595876097f0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5595876097d8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x559587609768 <col:37> 'String (const String &)' lvalue CXXMethod 0x559587607718 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x559587609788 <col:56> 'const String' lvalue ParmVar 0x559587605478 'landmark' 'const String &'
|         `-DeclRefExpr 0x5595876098e0 <col:68> 'const String' lvalue ParmVar 0x559587605568 'str' 'const String &'
|-CXXMethodDecl 0x5595876059d0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x559587605718 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x559587605790 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x559587605810 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x559587605888 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x559587609c80 <col:34, line:267:5>
|   `-ReturnStmt 0x559587609c70 <line:266:2, col:51>
|     `-ExprWithCleanups 0x559587609c58 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x559587609bf0 <col:9, col:51> 'int'
|         |-MemberExpr 0x559587609bc0 <col:9> '<bound member function type>' ->xmessage 0x559587605650
|         | `-CXXThisExpr 0x559587609bb0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x559587609a68 <col:18> 'const String' lvalue ParmVar 0x559587605718 'landmark' 'const String &'
|         |-DeclRefExpr 0x559587609a88 <col:28> 'const String' lvalue ParmVar 0x559587605790 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x559587609c40 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x559587609c28 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x559587609b90 <col:34, col:50> 'String' (CXXTemporary 0x559587609b90)
|               `-CXXMemberCallExpr 0x559587609b28 <col:34, col:50> 'String'
|                 |-MemberExpr 0x559587609ab8 <col:34> '<bound member function type>' ->vformat 0x559587606590
|                 | `-CXXThisExpr 0x559587609aa8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x559587609b58 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x559587609ae8 <col:42> 'const char *' lvalue ParmVar 0x559587605810 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x559587609b70 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x559587609b08 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x559587605888 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x559587605ae0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x559587609d00 <col:25, line:288:5>
|   `-ReturnStmt 0x559587609cf0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x559587609cd8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x559587609ca8 <col:9> 'const int' lvalue ->_nerrors 0x5595876088d8
|         `-CXXThisExpr 0x559587609c98 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x559587605cf0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x559587605b98 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x559587605c18 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x559587605fd8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x559587605db8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x559587605e38 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x559587605eb0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x559587606170 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5595876060a8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5595876063b8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x559587606230 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5595876062a8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x559587609f60 <col:58, line:357:5>
|   `-ReturnStmt 0x559587609f50 <line:356:2, col:29>
|     `-ExprWithCleanups 0x559587609f38 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x559587609f08 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x559587609ef0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x559587609ed0 <col:9, col:29> 'String' (CXXTemporary 0x559587609ed0)
|             `-CallExpr 0x559587609e60 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x559587609e48 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x559587609dc8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x559587605fd8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x559587609d68 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x559587609e98 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x559587609d88 <col:21> 'const char *' lvalue ParmVar 0x559587606230 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x559587609eb0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x559587609da8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5595876062a8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x559587606590 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x559587606480 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5595876064f8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5595876066e8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x559587606658 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x559587606830 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5595876067a0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x559587606ad0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5595876068e8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x559587606968 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5595876069e0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x559587606c30 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x559587606ba0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55958760a078 <col:37, line:441:5>
|   `-IfStmt 0x55958760a060 <line:439:2, line:440:8>
|     |-BinaryOperator 0x559587609fe8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x559587609fb8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x559587609f78 <col:6> 'int' lvalue ParmVar 0x559587606ba0 'level' 'int'
|     | `-ImplicitCastExpr 0x559587609fd0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x559587609f98 <col:15> 'ErrorHandler::Level' EnumConstant 0x559587602cb0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55958760a048 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55958760a018 <col:8> 'int' lvalue ->_nerrors 0x5595876088d8
|         `-CXXThisExpr 0x55958760a008 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x559587606cf8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55958760a110 <col:26, line:448:5>
|   `-BinaryOperator 0x55958760a0f0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55958760a0a0 <col:2> 'int' lvalue ->_nerrors 0x5595876088d8
|     | `-CXXThisExpr 0x55958760a090 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55958760a0d0 <col:13> 'int' 0
|-CXXMethodDecl 0x559587606ec0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x559587606db0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x559587606e28 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5595876070c8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x559587606f80 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x559587606ff8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x559587607378 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x559587607188 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x559587607208 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x559587607288 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x559587607430 <col:59> 0 0
|-CXXMethodDecl 0x5595876075c8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5595876074a8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x559587607528 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55958760a780 <col:70, line:534:5>
|   |-DeclStmt 0x55958760a280 <line:528:2, col:20>
|   | |-VarDecl 0x55958760a138 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55958760a1a0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55958760a1d8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55958760a240 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55958760a350 <line:529:2, col:23>
|   | `-VarDecl 0x55958760a2b0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55958760a338 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55958760a318 <col:18> 'const char *' lvalue ParmVar 0x5595876074a8 'begin' 'const char *'
|   |-DoStmt 0x55958760a718 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55958760a648 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55958760a630 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55958760a610 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55958760a368 <col:6> 'const char *' lvalue Var 0x55958760a2b0 'x' 'const char *'
|   | |     `-CallExpr 0x55958760a560 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55958760a548 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55958760a500 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x559587608db0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55958760a5c8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55958760a5b0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55958760a420 <col:20, col:27> 'String' (CXXTemporary 0x55958760a420)
|   | |       |     `-CXXTemporaryObjectExpr 0x55958760a3e8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55958760a5e0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55958760a440 <col:30> 'const char *' lvalue Var 0x55958760a2b0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55958760a5f8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55958760a460 <col:33> 'const char *' lvalue ParmVar 0x559587607528 'end' 'const char *'
|   | |       |-UnaryOperator 0x55958760a4a0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55958760a480 <col:39> 'String' lvalue Var 0x55958760a138 'name' 'String'
|   | |       |-UnaryOperator 0x55958760a4d8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55958760a4b8 <col:46> 'String' lvalue Var 0x55958760a1d8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55958760a4f0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55958760a700 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55958760a6e8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55958760a6c8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55958760a698 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5595872e3c68
|   |         `-ImplicitCastExpr 0x55958760a680 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55958760a660 <col:11> 'String' lvalue Var 0x55958760a138 'name' 'String'
|   `-ReturnStmt 0x55958760a770 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55958760a758 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55958760a738 <col:9> 'const char *' lvalue Var 0x55958760a2b0 'x' 'const char *'
|-CXXMethodDecl 0x559587607718 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x559587607688 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55958760ad88 <col:55, line:550:5>
|   `-IfStmt 0x55958760ad60 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55958760a9c0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55958760a9a8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55958760a990 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55958760a970 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55958760a940 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5595872e3c68
|     | |       `-DeclRefExpr 0x55958760a7e0 <col:6> 'const String' lvalue ParmVar 0x559587607688 'x' 'const String &'
|     | `-BinaryOperator 0x55958760a920 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55958760a8f0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55958760a8a0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55958760a888 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55958760a840 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5595872fd4a0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55958760a800 <col:11> 'const String' lvalue ParmVar 0x559587607688 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55958760a820 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55958760a908 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55958760a8d8 <col:19> 'char' 123
|     |-ReturnStmt 0x55958760aa30 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55958760aa00 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55958760a9e0 <col:13> 'const String' lvalue ParmVar 0x559587607688 'x' 'const String &'
|     `-IfStmt 0x55958760ad38 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55958760aac8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55958760aab0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55958760aa90 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55958760aa60 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5595872e3c68
|       |       `-DeclRefExpr 0x55958760aa40 <col:11> 'const String' lvalue ParmVar 0x559587607688 'x' 'const String &'
|       |-ReturnStmt 0x55958760ac50 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55958760ac38 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55958760ac08 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55958760abf0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55958760abd0 <col:13, col:29> 'String' (CXXTemporary 0x55958760abd0)
|       |         `-CallExpr 0x55958760ab80 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55958760ab68 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55958760aae0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x559587606ec0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55958760abb0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55958760ab00 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55958760ab20 <col:28> 'const String' lvalue ParmVar 0x559587607688 'x' 'const String &'
|       `-ReturnStmt 0x55958760ad28 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55958760ad10 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55958760ace0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55958760acc8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55958760aca8 <col:13, col:20> 'String' (CXXTemporary 0x55958760aca8)
|                 `-CXXTemporaryObjectExpr 0x55958760ac70 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5595876078e0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5595876077d0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x559587607848 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x559587609058 <col:71> 'bool' false
|-CXXRecordDecl 0x559587607990 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x559587607c88 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x559587607c20 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x559587607bc0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x559587607b80 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5595872e0500 'String'
|       | `-CXXRecord 0x5595872e0470 'String'
|       |-BuiltinType 0x559586fb3370 'int'
|       `-DecayedType 0x5595875958d0 '__va_list_tag *' sugar
|         |-TypedefType 0x5595875958a0 'va_list' sugar
|         | |-Typedef 0x5595871d15b0 'va_list'
|         | `-TypedefType 0x5595871d1560 '__gnuc_va_list' sugar
|         |   |-Typedef 0x559587109188 '__gnuc_va_list'
|         |   `-TypedefType 0x5595871090f0 '__builtin_va_list' sugar
|         |     |-Typedef 0x559586ff4bd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x559586ff4b80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x559586fb40c0 '__va_list_tag'
|         |         `-CXXRecord 0x559586fb4028 '__va_list_tag'
|         `-PointerType 0x5595871d6e50 '__va_list_tag *'
|           `-RecordType 0x559586fb40c0 '__va_list_tag'
|             `-CXXRecord 0x559586fb4028 '__va_list_tag'
|-EnumDecl 0x559587607ce0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x559587607de0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559587608380 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559587607dc0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x559587607da0 <col:16> 'int' 1
| |-EnumConstantDecl 0x559587607e70 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559587608398 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559587607e50 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x559587607e30 <col:21> 'int' 2
| |-EnumConstantDecl 0x559587607f00 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5595876083b0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559587607ee0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x559587607ec0 <col:22> 'int' 4
| |-EnumConstantDecl 0x559587607fd0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5595876083c8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559587607f70 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x559587607f50 <col:17> 'int' 8
| |-EnumConstantDecl 0x559587608060 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5595876083e0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559587608040 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x559587608020 <col:22> 'int' 16
| |-EnumConstantDecl 0x5595876080f0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5595876083f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595876080d0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5595876080b0 <col:19> 'int' 32
| |-EnumConstantDecl 0x559587608180 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559587608410 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559587608160 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x559587608140 <col:17> 'int' 64
| |-EnumConstantDecl 0x559587608210 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559587608428 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595876081f0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5595876081d0 <col:14> 'int' 128
| |-EnumConstantDecl 0x5595876082a0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559587608440 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559587608280 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x559587608260 <col:16> 'int' 256
| `-EnumConstantDecl 0x559587608330 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x559587608458 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559587608310 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5595876082f0 <col:12> 'int' 1024
|-CXXMethodDecl 0x559587608668 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x559587608480 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x559587608520 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5595876087f0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x559587608728 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x559587608898 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5595876088d8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x559587608938 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5595876089b0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x559587608db0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x559587608a28 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x559587608aa8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x559587608b28 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x559587608ba0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x559587608c18 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x559587608c90 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x559587608ed8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x559587608ed8
| `-ParmVarDecl 0x559587608fe8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55958760b0e8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55958760b0e8
  `-ParmVarDecl 0x55958760b1f8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559587594918 prev 0x5595874da748 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559587594a10 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x559587594aa0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x559587594bd8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x559587594ad8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x559587596000 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x559587595fe0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x559587595b78 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x559587596090 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x559587596050 <col:17> 'ErrorHandler *' lvalue ParmVar 0x559587594ad8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x559587595be0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x559587596110 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5595875960d0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x559587595c40 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x559587596150 <col:54> 'bool' false
| `-CompoundStmt 0x559587596258 <col:61, line:38:5>
|   `-BinaryOperator 0x559587596238 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x5595875961d0 <col:9> 'const Element *' lvalue ->_context 0x559587595b18
|     | `-CXXThisExpr 0x5595875961c0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x559587596220 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x559587596200 <col:20> 'int' 0
|-CXXConstructorDecl 0x559587594de8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x559587594c98 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x559587594d10 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x559587596038 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x559587596018 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x559587595b18 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5595875962b0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x559587596270 <col:20> 'const Element *' lvalue ParmVar 0x559587594c98 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x559587595b78 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x559587596330 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5595875962f0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x559587594d10 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x559587595be0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5595875963b0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x559587596370 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x559587595c40 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5595875963f0 <col:73> 'bool' false
| `-CompoundStmt 0x559587596468 <col:80, line:46:5>
|-CXXMethodDecl 0x559587594f18 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5595875964e0 <col:36, line:51:5>
|   `-ReturnStmt 0x5595875964d0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5595875964b8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x559587596488 <col:16> 'const Element *const' lvalue ->_context 0x559587595b18
|         `-CXXThisExpr 0x559587596478 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x559587595008 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x559587596560 <col:32, line:57:5>
|   `-ReturnStmt 0x559587596550 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x559587596538 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x559587596508 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x559587595b78
|         `-CXXThisExpr 0x5595875964f8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5595875950c8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x559587595250 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x559587595180 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5595875953a0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x559587595310 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5595875954f0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x559587595460 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5595875956f8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5595875955a8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x559587595620 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x559587595a28 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5595875957b8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x559587595838 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x559587595900 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x559587595ae0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x559587595b18 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x559587595b78 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x559587595be0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x559587595c40 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x559587595c90 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x559587595c90
| `-ParmVarDecl 0x559587595da8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x559587595e48 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x559587595e48
| `-ParmVarDecl 0x559587595f58 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x559587614c08 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5595875bdfe0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5595875be1b8 prev 0x5595875bdfe0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5595875be248 <col:46, col:52> col:46 public
|-TypedefDecl 0x5595875be270 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x559586fb3370 'int'
|-TypedefDecl 0x5595875bfe40 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5595875bfdf0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5595875be720 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5595875be620 'type'
|     `-TemplateSpecializationType 0x5595875be5b0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5595875be490 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5595875be470 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5595875be450 <col:24> 'unsigned long' 4
|       `-RecordType 0x5595875be590 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5595875be4b0 'char_array'
|-TypedefDecl 0x5595875bfef8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5595875bfec0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5595875bfea0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5595875bfe40 'type'
|     `-ElaboratedType 0x5595875bfdf0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5595875be720 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5595875be620 'type'
|         `-TemplateSpecializationType 0x5595875be5b0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5595875be490 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5595875be470 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5595875be450 <col:24> 'unsigned long' 4
|           `-RecordType 0x5595875be590 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5595875be4b0 'char_array'
|-CXXMethodDecl 0x5595875c0078 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5595875bff88 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5595875c0168 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5595875c0248 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5595875c0518 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5595875c0420 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5595875c0758 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5595875c05d0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5595875c0648 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5595875c0928 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5595875c0818 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5595875c0890 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5595875c0a88 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5595875c0b58 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5595875c0da8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5595875c0c18 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5595875c0c90 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5595875c1008 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5595875c0e78 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5595875c0ef0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5595875c11c8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5595875c10d8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5595875c1388 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5595875c1290 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5595875c1440 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5595875c14f0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5595875c9a08 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5595875c9880 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5595875c98f8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5595875c9ca8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5595875c9bb0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5595875c9d70 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5595875c9dc0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5595875c9e10 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5595875bcbf8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5595875bce08 prev 0x5595875bcbf8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5595875bdf50 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5595875bdf00 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5595875bdee0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5595875bdd90 'type'
|     `-SubstTemplateTypeParmType 0x5595875bdbb0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x559587279340 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5595872792e8 'T'
|       `-RecordType 0x5595875bd700 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5595875bd618 'sized_array_memory'
|-FieldDecl 0x5595875c9e60 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5595875c9eb0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5595875c9ee8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5595875bcea0 'int' sugar
|   |-TemplateTypeParmType 0x5595872b1030 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5595872b0fd8 'T'
|   `-BuiltinType 0x559586fb3370 'int'
|-TypedefDecl 0x5595875c9f78 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5595875c9f40 'int &'
|   `-SubstTemplateTypeParmType 0x5595875bcea0 'int' sugar
|     |-TemplateTypeParmType 0x5595872b1030 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5595872b0fd8 'T'
|     `-BuiltinType 0x559586fb3370 'int'
|-TypedefDecl 0x5595875ca038 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5595875ca000 'const int &'
|   `-QualType 0x5595875bcea1 'const int' const
|     `-SubstTemplateTypeParmType 0x5595875bcea0 'int' sugar
|       |-TemplateTypeParmType 0x5595872b1030 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5595872b0fd8 'T'
|       `-BuiltinType 0x559586fb3370 'int'
|-TypedefDecl 0x5595875ca0c8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5595875ca090 'int *'
|   `-SubstTemplateTypeParmType 0x5595875bcea0 'int' sugar
|     |-TemplateTypeParmType 0x5595872b1030 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5595872b0fd8 'T'
|     `-BuiltinType 0x559586fb3370 'int'
|-TypedefDecl 0x5595875ca158 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5595875ca120 'const int *'
|   `-QualType 0x5595875bcea1 'const int' const
|     `-SubstTemplateTypeParmType 0x5595875bcea0 'int' sugar
|       |-TemplateTypeParmType 0x5595872b1030 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5595872b0fd8 'T'
|       `-BuiltinType 0x559586fb3370 'int'
|-TypedefDecl 0x5595875cad40 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5595875cacf0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5595875cacd0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5595875cac60 'type'
|     `-SubstTemplateTypeParmType 0x5595875caa20 'int' sugar
|       |-TemplateTypeParmType 0x559587284140 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5595872840f0 'T'
|       `-BuiltinType 0x559586fb3370 'int'
|-TypedefDecl 0x5595875cada8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5595875ca000 'const int &'
|   `-QualType 0x5595875bcea1 'const int' const
|     `-SubstTemplateTypeParmType 0x5595875bcea0 'int' sugar
|       |-TemplateTypeParmType 0x5595872b1030 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5595872b0fd8 'T'
|       `-BuiltinType 0x559586fb3370 'int'
|-TypedefDecl 0x5595875cae00 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x559586fb3370 'int'
|-TypedefDecl 0x5595875cae68 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5595875ca090 'int *'
|   `-SubstTemplateTypeParmType 0x5595875bcea0 'int' sugar
|     |-TemplateTypeParmType 0x5595872b1030 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5595872b0fd8 'T'
|     `-BuiltinType 0x559586fb3370 'int'
|-TypedefDecl 0x5595875caed0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5595875ca120 'const int *'
|   `-QualType 0x5595875bcea1 'const int' const
|     `-SubstTemplateTypeParmType 0x5595875bcea0 'int' sugar
|       |-TemplateTypeParmType 0x5595872b1030 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5595872b0fd8 'T'
|       `-BuiltinType 0x559586fb3370 'int'
|-EnumDecl 0x5595875caf28 <line:134:5> col:5
| `-EnumConstantDecl 0x5595875cb020 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5595875cb000 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5595872b26b8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5595872b2690 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5595872b2670 <col:40> 'int' 1
|-CXXConstructorDecl 0x5595875cb0a8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5595875cb2f8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5595875cb160 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5595875cb200 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5595875cb5b8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5595875cb4a0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5595875cb878 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5595875cb760 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5595875cbbc0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5595875cbaa0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5595875cbed0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5595875cbdb0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5595875cc1c0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5595875cc008 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5595875cc080 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5595875cc2e8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5595875cc3c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5595875cc420 <col:30> Inherited
|-CXXMethodDecl 0x5595875cc468 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5595875cc518 <col:20> Inherited
| `-OptimizeNoneAttr 0x5595875cc570 <col:30> Inherited
|-CXXMethodDecl 0x5595875cc638 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5595875cc6e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5595875cc740 <col:30> Inherited
|-CXXMethodDecl 0x5595875cc788 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5595875cc838 <col:20> Inherited
| `-OptimizeNoneAttr 0x5595875cc890 <col:30> Inherited
|-CXXMethodDecl 0x5595875cc8d8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5595875cc988 <col:20> Inherited
| `-OptimizeNoneAttr 0x5595875cc9e0 <col:30> Inherited
|-CXXMethodDecl 0x5595875cca28 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5595875ccad8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5595875ccb30 <col:30> Inherited
|-CXXMethodDecl 0x5595875ccb58 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5595875ccc08 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5595875cccb8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5595875cce78 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5595875ccd68 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5595875ccde0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5595875ccfc8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5595875ccf38 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5595875cd178 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5595875cd080 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5595875cd230 <col:20>
| `-OptimizeNoneAttr 0x5595875cd288 <col:30>
|-CXXMethodDecl 0x5595875cd3a8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5595875cd2b0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5595875cd460 <col:20>
| `-OptimizeNoneAttr 0x5595875cd4b8 <col:30>
|-CXXMethodDecl 0x5595875cd570 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5595875cd4e0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5595875cd6b8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5595875cd628 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5595875cd7e8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5595875cd918 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5595875cd9e8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5595875cdab8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x5595875cdbf8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5595875cdb68 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5595875cdd40 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5595875cdcb0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5595875cde88 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5595875cddf8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5595875cdf40 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5595875ce040 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5595875cdfb0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5595875ce0f8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5595875ce1b8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5595875ce2b8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5595875ce438 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5595875ce378 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5595875cebf8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5595875ce4f0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5595875ceb58 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5595875cea58 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5595875cecd8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5595875cee28 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5595875ced98 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5595875ceee0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5595875cf128 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5595875cefa0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5595875cf018 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5595875cf2e8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5595875cf1f8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5595875cf538 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5595875cf3b0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5595875cf428 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5595875cf5f8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5595875cf858 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5595875cf760 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5595875cf928 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5595875bad68 prev 0x55958759d858 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5595875bae60 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x5595875baf50 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5595875e2770 <col:16, line:828:9>
|-CXXDestructorDecl 0x5595875bb040 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5595875e2780 <col:25, line:830:9>
|-CXXMethodDecl 0x5595875bb140 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5595875bb1f0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5595875bb298 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5595875bb298
| `-ParmVarDecl 0x5595875bb3a8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5595875bbb68 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5595875bbb68
  `-ParmVarDecl 0x5595875bbc78 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55958759d668 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55958759d7c8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55958759d858 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55958759d910 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55958759da18 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55958759d948 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5595875d0ee8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5595875d0ec8 <col:31> 'int' 0
|-CXXConstructorDecl 0x55958759dd38 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55958759dbb0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55958759dc28 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5595875d0f20 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5595875d0f00 <col:59> 'int' 0
|-CXXConstructorDecl 0x55958759df10 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55958759de00 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55958759de78 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5595875d0f58 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5595875d0f38 <col:55> 'int' 0
|-CXXConstructorDecl 0x55958759e2c8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55958759e0b0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55958759e128 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55958759e1a0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5595875d0f90 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5595875d0f70 <col:31> 'int' 0
|-CXXConstructorDecl 0x55958759e488 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55958759e3c8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55958759e580 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55958759e768 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55958759e670 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55958759e858 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5595875d1340 <col:24, line:291:5>
|   `-ReturnStmt 0x5595875d1330 <line:290:9, col:79>
|     `-BinaryOperator 0x5595875d1310 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5595875d11e8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5595875d1140 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5595875d1120 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5595875d1018 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5595875d1000 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5595875d0fe8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5595875d0fb8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5595875bcb90
|       | |   |       `-CXXThisExpr 0x5595875d0fa8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5595875d1108 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5595875d10f0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5595875d10b8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5595875d1088 <col:28, col:35> '<bound member function type>' ->size 0x559587583488
|       | |           `-ImplicitCastExpr 0x5595875d10d8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5595875d1070 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5595875d1040 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5595875bcb90
|       | |                 `-CXXThisExpr 0x5595875d1030 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5595875d11d0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5595875d11b8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5595875d11a0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5595875d1170 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5595875cfa70
|       |         `-CXXThisExpr 0x5595875d1160 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5595875d12f0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5595875d12d8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5595875d12c0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5595875d1280 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5595875d1268 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5595875d1218 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5595875cfb20
|         |     |   `-CXXThisExpr 0x5595875d1208 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5595875d1248 <col:73> 'int' 0
|         `-IntegerLiteral 0x5595875d12a0 <col:79> 'int' 0
|-CXXMethodDecl 0x55958759e918 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5595875d1518 <col:32, line:296:5>
|   `-ReturnStmt 0x5595875d1508 <line:295:9, col:49>
|     `-BinaryOperator 0x5595875d14e8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5595875d13c8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5595875d13b0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5595875d1398 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5595875d1368 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5595875cfa70
|       |       `-CXXThisExpr 0x5595875d1358 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5595875d14c8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5595875d14b0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5595875d1498 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5595875d1458 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5595875d1440 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5595875d13f0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5595875cfb20
|         |     |   `-CXXThisExpr 0x5595875d13e0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5595875d1420 <col:43> 'int' 0
|         `-IntegerLiteral 0x5595875d1478 <col:49> 'int' 0
|-CXXMethodDecl 0x55958759ea08 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5595875d1728 <col:19, line:306:5>
|   |-IfStmt 0x5595875d1648 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5595875d1588 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5595875d1570 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5595875d1540 <col:13> 'Vector<String> *' lvalue ->_conf 0x5595875bcb90
|   | |     `-CXXThisExpr 0x5595875d1530 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5595875d1628 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5595875d15f8 <col:13, col:20> '<bound member function type>' ->clear 0x559587585e58
|   |     `-ImplicitCastExpr 0x5595875d15e0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5595875d15b0 <col:13> 'Vector<String> *' lvalue ->_conf 0x5595875bcb90
|   |         `-CXXThisExpr 0x5595875d15a0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5595875d16d0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5595875d16a0 <col:9, col:16> '<bound member function type>' .clear 0x5595875cf5f8
|   |   `-MemberExpr 0x5595875d1670 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5595875cfa10
|   |     `-CXXThisExpr 0x5595875d1660 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5595875d1718 <line:305:9, col:17>
|     `-UnaryOperator 0x5595875d1700 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5595875d16f0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55958759ec88 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55958759eb90 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55958759ee08 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55958759ed40 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55958759f188 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55958759eeb0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55958759f0e8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55958759ef58 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55958759efd0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5595875d43d0 <col:67, line:327:5>
|     |-WhileStmt 0x5595875d4380 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5595875d1810 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5595875d1790 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5595874d2c18 0x55958731c1f8 0x55958731bed0 0x55958730d6b0 0x55958730d360 0x55958730cc50 0x5595872df5c0 0x55958726ba80
|     | | |-DeclRefExpr 0x5595875d1750 <col:16> 'Iter' lvalue ParmVar 0x55958759ef58 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5595875d1770 <col:25> 'Iter' lvalue ParmVar 0x55958759efd0 'end' 'Iter'
|     | `-CompoundStmt 0x5595875d4360 <col:30, line:325:9>
|     |   |-CallExpr 0x5595875d4300 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5595875d41e0 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5595875d42d0 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5595875d4260 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5595874d7d98 0x5595874d79b8 0x5595874d75e8 0x5595874d7208 0x5595874d6e28 0x5595874d6a58
|     |   |   `-DeclRefExpr 0x5595875d4240 <col:24> 'Iter' lvalue ParmVar 0x55958759ef58 'begin' 'Iter'
|     |   `-UnaryOperator 0x5595875d4348 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5595875d4328 <col:15> 'Iter' lvalue ParmVar 0x55958759ef58 'begin' 'Iter'
|     `-ReturnStmt 0x5595875d43c0 <line:326:9, col:17>
|       `-UnaryOperator 0x5595875d43a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5595875d4398 <col:17> 'Args *' this
|-CXXMethodDecl 0x55958759f290 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55958759f200 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55958759f3d8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55958759f348 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55958759f4a0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5595875d44b0 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5595875d4450 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5595875d4400 <col:9> '<bound member function type>' ->reset_from 0x5595875cfe98
|   | | `-CXXThisExpr 0x5595875d43f0 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5595875d4430 <col:20> 'int' 0
|   `-ReturnStmt 0x5595875d44a0 <line:352:9, col:17>
|     `-UnaryOperator 0x5595875d4488 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5595875d4478 <col:17> 'Args *' this
|-VarDecl 0x55958759f558 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55958759f5c0 <col:38> 'int' 1
|-VarDecl 0x55958759f650 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55958759f6b8 <col:39> 'int' 2
|-VarDecl 0x55958759f748 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55958759f7b0 <col:39> 'int' 4
|-VarDecl 0x55958759f840 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55958759f8a8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55958759fc28 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55958759f920 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55958759fb88 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55958759f9d0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55958759fa78 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x5595875d4608 <col:43, line:371:5>
|     `-ReturnStmt 0x5595875d45f8 <line:370:9, col:34>
|       `-CallExpr 0x5595875d45c0 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d44e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d4560 <col:21> 'const char *' lvalue ParmVar 0x55958759f9d0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5595875d4580 <col:30> 'int' 0
|         `-DeclRefExpr 0x5595875d45a0 <col:33> 'T' lvalue ParmVar 0x55958759fa78 'x' 'T &'
|-FunctionTemplateDecl 0x55958759ff58 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55958759fc90 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55958759feb8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55958759fd40 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55958759fde8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5595875d4758 <col:45, line:375:5>
|     `-ReturnStmt 0x5595875d4748 <line:374:9, col:42>
|       `-CallExpr 0x5595875d4710 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d4630 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d46b0 <col:21> 'const char *' lvalue ParmVar 0x55958759fd40 'keyword' 'const char *'
|         |-DeclRefExpr 0x5595875d46d0 <col:30> 'const int' lvalue Var 0x55958759f558 'mandatory' 'const int'
|         `-DeclRefExpr 0x5595875d46f0 <col:41> 'T' lvalue ParmVar 0x55958759fde8 'x' 'T &'
|-FunctionTemplateDecl 0x5595875a0288 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55958759ffc0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5595875a01e8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5595875a0070 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5595875a0118 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x5595875d48a8 <col:45, line:379:5>
| |   `-ReturnStmt 0x5595875d4898 <line:378:9, col:43>
| |     `-CallExpr 0x5595875d4860 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5595875d4780 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5595875d4800 <col:21> 'const char *' lvalue ParmVar 0x5595875a0070 'keyword' 'const char *'
| |       |-DeclRefExpr 0x5595875d4820 <col:30> 'const int' lvalue Var 0x55958759f650 'positional' 'const int'
| |       `-DeclRefExpr 0x5595875d4840 <col:42> 'T' lvalue ParmVar 0x5595875a0118 'x' 'T &'
| `-CXXMethodDecl 0x559587615078 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x559587614e98 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x559587614f68 <col:39, col:42> col:42 x 'unsigned int &'
|-FunctionTemplateDecl 0x5595875a05b8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x5595875a02f0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5595875a0518 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5595875a03a0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875a0448 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x5595875d4aa8 <col:46, line:383:5>
|     `-ReturnStmt 0x5595875d4a98 <line:382:9, col:55>
|       `-CallExpr 0x5595875d4a60 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d48d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d4950 <col:21> 'const char *' lvalue ParmVar 0x5595875a03a0 'keyword' 'const char *'
|         |-BinaryOperator 0x5595875d4a20 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5595875d49d0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5595875d49b0 <col:30> 'const int' lvalue Var 0x55958759f558 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5595875d4a08 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5595875d49e8 <col:42> 'const int' lvalue Var 0x55958759f650 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5595875d4a40 <col:54> 'T' lvalue ParmVar 0x5595875a0448 'x' 'T &'
|-FunctionTemplateDecl 0x5595875a09b8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x5595875a0620 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5595875a0918 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x5595875a06d0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875a0750 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5595875a07f8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5595875d4be8 <col:54, line:388:5>
|     |-CallExpr 0x5595875d4b70 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5595875d4ac0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5595875d4b00 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5595875d4b10 <col:30> 'const char *' lvalue ParmVar 0x5595875a06d0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5595875d4b30 <col:39> 'int' lvalue ParmVar 0x5595875a0750 'flags' 'int'
|     | `-DeclRefExpr 0x5595875d4b50 <col:46> 'T' lvalue ParmVar 0x5595875a07f8 'x' 'T &'
|     `-ReturnStmt 0x5595875d4bd8 <line:387:9, col:17>
|       `-UnaryOperator 0x5595875d4bc0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5595875d4bb0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5595875a0e68 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x5595875a0a28 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5595875a0aa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5595875a0dc8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5595875a0b68 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875a0c08 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x5595875a0ca8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5595875d4d58 <col:74, line:403:5>
|     `-ReturnStmt 0x5595875d4d48 <line:402:9, col:56>
|       `-CallExpr 0x5595875d4d08 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d4c18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d4c88 <col:28> 'const char *' lvalue ParmVar 0x5595875a0b68 'keyword' 'const char *'
|         |-IntegerLiteral 0x5595875d4ca8 <col:37> 'int' 0
|         |-DeclRefExpr 0x5595875d4cc8 <col:40> 'T' lvalue ParmVar 0x5595875a0c08 'x' 'T &'
|         `-DeclRefExpr 0x5595875d4ce8 <col:43> 'const V' lvalue ParmVar 0x5595875a0ca8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5595875a12d8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5595875a0ed8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5595875a0f58 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5595875a1238 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5595875a1018 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875a10b8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x5595875a1158 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5595875d4ec0 <col:76, line:407:5>
|     `-ReturnStmt 0x5595875d4eb0 <line:406:9, col:65>
|       `-CallExpr 0x5595875d4e70 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d4d80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d4df0 <col:28> 'const char *' lvalue ParmVar 0x5595875a1018 'keyword' 'const char *'
|         |-DeclRefExpr 0x5595875d4e10 <col:37> 'const int' lvalue Var 0x55958759f650 'positional' 'const int'
|         |-DeclRefExpr 0x5595875d4e30 <col:49> 'T' lvalue ParmVar 0x5595875a10b8 'x' 'T &'
|         `-DeclRefExpr 0x5595875d4e50 <col:52> 'const V' lvalue ParmVar 0x5595875a1158 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5595875a1828 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x5595875a1348 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5595875a13c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5595875a1788 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5595875a1488 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875a1508 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5595875a15a8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x5595875a1648 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5595875d5028 <col:85, line:412:5>
|     |-CallExpr 0x5595875d4fa8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5595875d4ed8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5595875d4f18 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5595875d4f28 <col:37> 'const char *' lvalue ParmVar 0x5595875a1488 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5595875d4f48 <col:46> 'int' lvalue ParmVar 0x5595875a1508 'flags' 'int'
|     | |-DeclRefExpr 0x5595875d4f68 <col:53> 'T' lvalue ParmVar 0x5595875a15a8 'x' 'T &'
|     | `-DeclRefExpr 0x5595875d4f88 <col:56> 'const V' lvalue ParmVar 0x5595875a1648 'default_value' 'const V &'
|     `-ReturnStmt 0x5595875d5018 <line:411:9, col:17>
|       `-UnaryOperator 0x5595875d5000 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5595875d4ff0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5595875a1cb8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5595875a18a0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875a1918 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5595875a1c18 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5595875a19d8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875a1a50 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5595875a1af8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x5595875d51a8 <col:53, line:425:5>
|     `-ReturnStmt 0x5595875d5198 <line:424:9, col:42>
|       `-CallExpr 0x5595875d5158 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d5058 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d50d8 <col:21> 'const char *' lvalue ParmVar 0x5595875a19d8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5595875d50f8 <col:30> 'int' 0
|         |-DeclRefExpr 0x5595875d5118 <col:33> 'P' lvalue ParmVar 0x5595875a1a50 'parser' 'P'
|         `-DeclRefExpr 0x5595875d5138 <col:41> 'T' lvalue ParmVar 0x5595875a1af8 'x' 'T &'
|-FunctionTemplateDecl 0x5595875a2108 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x5595875a1d28 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875a1da8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5595875a2068 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5595875a1e68 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875a1ee0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5595875a1f88 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5595875d5320 <col:55, line:429:5>
|     `-ReturnStmt 0x5595875d5310 <line:428:9, col:50>
|       `-CallExpr 0x5595875d52d0 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d51d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d5250 <col:21> 'const char *' lvalue ParmVar 0x5595875a1e68 'keyword' 'const char *'
|         |-DeclRefExpr 0x5595875d5270 <col:30> 'const int' lvalue Var 0x55958759f558 'mandatory' 'const int'
|         |-DeclRefExpr 0x5595875d5290 <col:41> 'P' lvalue ParmVar 0x5595875a1ee0 'parser' 'P'
|         `-DeclRefExpr 0x5595875d52b0 <col:49> 'T' lvalue ParmVar 0x5595875a1f88 'x' 'T &'
|-FunctionTemplateDecl 0x5595875a2558 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x5595875a2178 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875a21f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5595875a24b8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5595875a22b8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875a2330 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5595875a23d8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5595875d5498 <col:55, line:433:5>
|     `-ReturnStmt 0x5595875d5488 <line:432:9, col:51>
|       `-CallExpr 0x5595875d5448 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d5348 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d53c8 <col:21> 'const char *' lvalue ParmVar 0x5595875a22b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5595875d53e8 <col:30> 'const int' lvalue Var 0x55958759f650 'positional' 'const int'
|         |-DeclRefExpr 0x5595875d5408 <col:42> 'P' lvalue ParmVar 0x5595875a2330 'parser' 'P'
|         `-DeclRefExpr 0x5595875d5428 <col:50> 'T' lvalue ParmVar 0x5595875a23d8 'x' 'T &'
|-FunctionTemplateDecl 0x5595875a29a8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x5595875a25c8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875a2648 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5595875a2908 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5595875a2708 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875a2780 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5595875a2828 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x5595875d56c0 <col:56, line:437:5>
|     `-ReturnStmt 0x5595875d56b0 <line:436:9, col:63>
|       `-CallExpr 0x5595875d5670 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d54c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d5540 <col:21> 'const char *' lvalue ParmVar 0x5595875a2708 'keyword' 'const char *'
|         |-BinaryOperator 0x5595875d5610 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5595875d55c0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5595875d55a0 <col:30> 'const int' lvalue Var 0x55958759f558 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5595875d55f8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5595875d55d8 <col:42> 'const int' lvalue Var 0x55958759f650 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5595875d5630 <col:54> 'P' lvalue ParmVar 0x5595875a2780 'parser' 'P'
|         `-DeclRefExpr 0x5595875d5650 <col:62> 'T' lvalue ParmVar 0x5595875a2828 'x' 'T &'
|-FunctionTemplateDecl 0x5595875a2ed8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x5595875a2a18 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875a2a98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5595875a2e38 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5595875a2b58 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875a2bd8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5595875a2c50 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5595875a2cf8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5595875d5828 <col:64, line:442:5>
|     |-CallExpr 0x5595875d57a8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5595875d56d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5595875d5718 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5595875d5728 <col:30> 'const char *' lvalue ParmVar 0x5595875a2b58 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5595875d5748 <col:39> 'int' lvalue ParmVar 0x5595875a2bd8 'flags' 'int'
|     | |-DeclRefExpr 0x5595875d5768 <col:46> 'P' lvalue ParmVar 0x5595875a2c50 'parser' 'P'
|     | `-DeclRefExpr 0x5595875d5788 <col:54> 'T' lvalue ParmVar 0x5595875a2cf8 'x' 'T &'
|     `-ReturnStmt 0x5595875d5818 <line:441:9, col:17>
|       `-UnaryOperator 0x5595875d5800 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5595875d57f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5595875a34d8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x5595875a2f50 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875a2fc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5595875a3048 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5595875a3438 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5595875a3110 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875a3188 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5595875a3228 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x5595875a32f8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5595875d59c0 <col:84, line:458:5>
|     `-ReturnStmt 0x5595875d59b0 <line:457:9, col:64>
|       `-CallExpr 0x5595875d5968 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d5858 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d58c8 <col:28> 'const char *' lvalue ParmVar 0x5595875a3110 'keyword' 'const char *'
|         |-IntegerLiteral 0x5595875d58e8 <col:37> 'int' 0
|         |-DeclRefExpr 0x5595875d5908 <col:40> 'P' lvalue ParmVar 0x5595875a3188 'parser' 'P'
|         |-DeclRefExpr 0x5595875d5928 <col:48> 'T' lvalue ParmVar 0x5595875a3228 'x' 'T &'
|         `-DeclRefExpr 0x5595875d5948 <col:51> 'const V' lvalue ParmVar 0x5595875a32f8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5595875a3a58 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5595875a3550 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875a35c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5595875a3648 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5595875a39b8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5595875a3710 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875a3788 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5595875a3828 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x5595875a38c8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5595875d5b50 <col:86, line:462:5>
|     `-ReturnStmt 0x5595875d5b40 <line:461:9, col:73>
|       `-CallExpr 0x5595875d5af8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d59e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d5a58 <col:28> 'const char *' lvalue ParmVar 0x5595875a3710 'keyword' 'const char *'
|         |-DeclRefExpr 0x5595875d5a78 <col:37> 'const int' lvalue Var 0x55958759f650 'positional' 'const int'
|         |-DeclRefExpr 0x5595875d5a98 <col:49> 'P' lvalue ParmVar 0x5595875a3788 'parser' 'P'
|         |-DeclRefExpr 0x5595875d5ab8 <col:57> 'T' lvalue ParmVar 0x5595875a3828 'x' 'T &'
|         `-DeclRefExpr 0x5595875d5ad8 <col:60> 'const V' lvalue ParmVar 0x5595875a38c8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5595875a40b8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x5595875a3ad0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875a3b48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5595875a3bc8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5595875a4018 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5595875a3c90 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875a3d10 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5595875a3d88 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x5595875a3e28 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x5595875a3ec8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5595875d5ce0 <col:95, line:467:5>
|     |-CallExpr 0x5595875d5c58 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5595875d5b68 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5595875d5ba8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5595875d5bb8 <col:37> 'const char *' lvalue ParmVar 0x5595875a3c90 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5595875d5bd8 <col:46> 'int' lvalue ParmVar 0x5595875a3d10 'flags' 'int'
|     | |-DeclRefExpr 0x5595875d5bf8 <col:53> 'P' lvalue ParmVar 0x5595875a3d88 'parser' 'P'
|     | |-DeclRefExpr 0x5595875d5c18 <col:61> 'T' lvalue ParmVar 0x5595875a3e28 'x' 'T &'
|     | `-DeclRefExpr 0x5595875d5c38 <col:64> 'const V' lvalue ParmVar 0x5595875a3ec8 'default_value' 'const V &'
|     `-ReturnStmt 0x5595875d5cd0 <line:466:9, col:17>
|       `-UnaryOperator 0x5595875d5cb8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5595875d5ca8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5595875a4698 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x5595875a4138 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875a41b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5595875a4238 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5595875a45f8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5595875a4300 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875a4378 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5595875a4418 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5595875a44b8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5595875d5e88 <col:63, line:481:5>
|     `-ReturnStmt 0x5595875d5e78 <line:480:9, col:47>
|       `-CallExpr 0x5595875d5e30 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d5d10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d5d90 <col:21> 'const char *' lvalue ParmVar 0x5595875a4300 'keyword' 'const char *'
|         |-IntegerLiteral 0x5595875d5db0 <col:30> 'int' 0
|         |-DeclRefExpr 0x5595875d5dd0 <col:33> 'P' lvalue ParmVar 0x5595875a4378 'parser' 'P'
|         |-DeclRefExpr 0x5595875d5df0 <col:41> 'T1' lvalue ParmVar 0x5595875a4418 'x1' 'T1 &'
|         `-DeclRefExpr 0x5595875d5e10 <col:45> 'T2' lvalue ParmVar 0x5595875a44b8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5595875a4c18 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x5595875a4710 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875a4788 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5595875a4808 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5595875a4b78 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5595875a48d0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875a4948 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5595875a49e8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5595875a4a88 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5595875d6028 <col:65, line:485:5>
|     `-ReturnStmt 0x5595875d6018 <line:484:9, col:55>
|       `-CallExpr 0x5595875d5fd0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d5eb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d5f30 <col:21> 'const char *' lvalue ParmVar 0x5595875a48d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5595875d5f50 <col:30> 'const int' lvalue Var 0x55958759f558 'mandatory' 'const int'
|         |-DeclRefExpr 0x5595875d5f70 <col:41> 'P' lvalue ParmVar 0x5595875a4948 'parser' 'P'
|         |-DeclRefExpr 0x5595875d5f90 <col:49> 'T1' lvalue ParmVar 0x5595875a49e8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5595875d5fb0 <col:53> 'T2' lvalue ParmVar 0x5595875a4a88 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5595875a5198 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x5595875a4c90 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875a4d08 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5595875a4d88 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5595875a50f8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5595875a4e50 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875a4ec8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5595875a4f68 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5595875a5008 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5595875d61c8 <col:65, line:489:5>
|     `-ReturnStmt 0x5595875d61b8 <line:488:9, col:56>
|       `-CallExpr 0x5595875d6170 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d6050 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d60d0 <col:21> 'const char *' lvalue ParmVar 0x5595875a4e50 'keyword' 'const char *'
|         |-DeclRefExpr 0x5595875d60f0 <col:30> 'const int' lvalue Var 0x55958759f650 'positional' 'const int'
|         |-DeclRefExpr 0x5595875d6110 <col:42> 'P' lvalue ParmVar 0x5595875a4ec8 'parser' 'P'
|         |-DeclRefExpr 0x5595875d6130 <col:50> 'T1' lvalue ParmVar 0x5595875a4f68 'x1' 'T1 &'
|         `-DeclRefExpr 0x5595875d6150 <col:54> 'T2' lvalue ParmVar 0x5595875a5008 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5595875a9d48 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x5595875a5210 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875a5288 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5595875a9940 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5595875a9ca8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5595875a9a00 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875a9a78 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5595875a9b18 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5595875a9bb8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5595875d6418 <col:66, line:493:5>
|     `-ReturnStmt 0x5595875d6408 <line:492:9, col:68>
|       `-CallExpr 0x5595875d63c0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d61f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d6270 <col:21> 'const char *' lvalue ParmVar 0x5595875a9a00 'keyword' 'const char *'
|         |-BinaryOperator 0x5595875d6340 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5595875d62f0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5595875d62d0 <col:30> 'const int' lvalue Var 0x55958759f558 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5595875d6328 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5595875d6308 <col:42> 'const int' lvalue Var 0x55958759f650 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5595875d6360 <col:54> 'P' lvalue ParmVar 0x5595875a9a78 'parser' 'P'
|         |-DeclRefExpr 0x5595875d6380 <col:62> 'T1' lvalue ParmVar 0x5595875a9b18 'x1' 'T1 &'
|         `-DeclRefExpr 0x5595875d63a0 <col:66> 'T2' lvalue ParmVar 0x5595875a9bb8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5595875aa3a8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x5595875a9dc0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875a9e38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5595875a9eb8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5595875aa308 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5595875a9f80 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875aa000 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5595875aa078 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5595875aa118 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5595875aa1b8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5595875d65a8 <col:74, line:498:5>
|     |-CallExpr 0x5595875d6520 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5595875d6430 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5595875d6470 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5595875d6480 <col:30> 'const char *' lvalue ParmVar 0x5595875a9f80 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5595875d64a0 <col:39> 'int' lvalue ParmVar 0x5595875aa000 'flags' 'int'
|     | |-DeclRefExpr 0x5595875d64c0 <col:46> 'P' lvalue ParmVar 0x5595875aa078 'parser' 'P'
|     | |-DeclRefExpr 0x5595875d64e0 <col:54> 'T1' lvalue ParmVar 0x5595875aa118 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5595875d6500 <col:58> 'T2' lvalue ParmVar 0x5595875aa1b8 'x2' 'T2 &'
|     `-ReturnStmt 0x5595875d6598 <line:497:9, col:17>
|       `-UnaryOperator 0x5595875d6580 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5595875d6570 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5595875aa708 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x5595875aa428 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5595875aa668 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5595875aa4e0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875aa558 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5595875d66f0 <col:52, line:509:5>
|     `-ReturnStmt 0x5595875d66e0 <line:508:9, col:44>
|       `-CallExpr 0x5595875d66a8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d65d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d6648 <col:26> 'const char *' lvalue ParmVar 0x5595875aa4e0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5595875d6668 <col:35> 'int' 0
|         `-DeclRefExpr 0x5595875d6688 <col:38> 'P' lvalue ParmVar 0x5595875aa558 'parser' 'P'
|-FunctionTemplateDecl 0x5595875aaa08 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x5595875aa770 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5595875aa968 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5595875aa820 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875aa898 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5595875d6830 <col:54, line:513:5>
|     `-ReturnStmt 0x5595875d6820 <line:512:9, col:52>
|       `-CallExpr 0x5595875d67e8 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d6718 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d6788 <col:26> 'const char *' lvalue ParmVar 0x5595875aa820 'keyword' 'const char *'
|         |-DeclRefExpr 0x5595875d67a8 <col:35> 'const int' lvalue Var 0x55958759f558 'mandatory' 'const int'
|         `-DeclRefExpr 0x5595875d67c8 <col:46> 'P' lvalue ParmVar 0x5595875aa898 'parser' 'P'
|-FunctionTemplateDecl 0x5595875aad08 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x5595875aaa70 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5595875aac68 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5595875aab20 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875aab98 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5595875d6970 <col:54, line:517:5>
|     `-ReturnStmt 0x5595875d6960 <line:516:9, col:53>
|       `-CallExpr 0x5595875d6928 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d6858 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d68c8 <col:26> 'const char *' lvalue ParmVar 0x5595875aab20 'keyword' 'const char *'
|         |-DeclRefExpr 0x5595875d68e8 <col:35> 'const int' lvalue Var 0x55958759f650 'positional' 'const int'
|         `-DeclRefExpr 0x5595875d6908 <col:47> 'P' lvalue ParmVar 0x5595875aab98 'parser' 'P'
|-FunctionTemplateDecl 0x5595875ab008 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x5595875aad70 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5595875aaf68 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5595875aae20 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875aae98 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5595875d6b60 <col:55, line:521:5>
|     `-ReturnStmt 0x5595875d6b50 <line:520:9, col:65>
|       `-CallExpr 0x5595875d6b18 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d6998 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d6a08 <col:26> 'const char *' lvalue ParmVar 0x5595875aae20 'keyword' 'const char *'
|         |-BinaryOperator 0x5595875d6ad8 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5595875d6a88 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5595875d6a68 <col:35> 'const int' lvalue Var 0x55958759f558 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5595875d6ac0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5595875d6aa0 <col:47> 'const int' lvalue Var 0x55958759f650 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5595875d6af8 <col:59> 'P' lvalue ParmVar 0x5595875aae98 'parser' 'P'
|-FunctionTemplateDecl 0x5595875ab3d8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x5595875ab070 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5595875ab338 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5595875ab120 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875ab1a0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5595875ab218 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5595875d6ca0 <col:63, line:526:5>
|     |-CallExpr 0x5595875d6c28 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5595875d6b78 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5595875d6bb8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5595875d6bc8 <col:35> 'const char *' lvalue ParmVar 0x5595875ab120 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5595875d6be8 <col:44> 'int' lvalue ParmVar 0x5595875ab1a0 'flags' 'int'
|     | `-DeclRefExpr 0x5595875d6c08 <col:51> 'P' lvalue ParmVar 0x5595875ab218 'parser' 'P'
|     `-ReturnStmt 0x5595875d6c90 <line:525:9, col:17>
|       `-UnaryOperator 0x5595875d6c78 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5595875d6c68 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5595875ab828 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x5595875ab448 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875ab4c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5595875ab788 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5595875ab588 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875ab600 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x5595875ab6a8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5595875d6df8 <col:58, line:541:5>
|     `-ReturnStmt 0x5595875d6de8 <line:540:9, col:39>
|       `-CallExpr 0x5595875d6db0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d6cd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d6d50 <col:21> 'const char *' lvalue ParmVar 0x5595875ab588 'keyword' 'const char *'
|         |-DeclRefExpr 0x5595875d6d70 <col:30> 'P' lvalue ParmVar 0x5595875ab600 'parser' 'P'
|         `-DeclRefExpr 0x5595875d6d90 <col:38> 'T' lvalue ParmVar 0x5595875ab6a8 'x' 'T &'
|-FunctionTemplateDecl 0x5595875abc78 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x5595875ab898 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875ab918 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5595875abbd8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5595875ab9d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875aba50 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5595875abaf8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5595875d6f30 <col:60, line:545:5>
|     `-ReturnStmt 0x5595875d6f20 <line:544:9, col:41>
|       `-CallExpr 0x5595875d6ee8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d6e20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d6e88 <col:23> 'const char *' lvalue ParmVar 0x5595875ab9d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5595875d6ea8 <col:32> 'P' lvalue ParmVar 0x5595875aba50 'parser' 'P'
|         `-DeclRefExpr 0x5595875d6ec8 <col:40> 'T' lvalue ParmVar 0x5595875abaf8 'x' 'T &'
|-FunctionTemplateDecl 0x5595875ac0c8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5595875abce8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875abd68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5595875ac028 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5595875abe28 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875abea0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5595875abf48 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5595875d7068 <col:60, line:549:5>
|     `-ReturnStmt 0x5595875d7058 <line:548:9, col:41>
|       `-CallExpr 0x5595875d7020 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d6f58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d6fc0 <col:23> 'const char *' lvalue ParmVar 0x5595875abe28 'keyword' 'const char *'
|         |-DeclRefExpr 0x5595875d6fe0 <col:32> 'P' lvalue ParmVar 0x5595875abea0 'parser' 'P'
|         `-DeclRefExpr 0x5595875d7000 <col:40> 'T' lvalue ParmVar 0x5595875abf48 'x' 'T &'
|-FunctionTemplateDecl 0x5595875ac518 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x5595875ac138 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875ac1b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5595875ac478 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5595875ac278 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875ac2f0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x5595875ac398 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5595875d71a0 <col:61, line:553:5>
|     `-ReturnStmt 0x5595875d7190 <line:552:9, col:42>
|       `-CallExpr 0x5595875d7158 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d7090 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d70f8 <col:24> 'const char *' lvalue ParmVar 0x5595875ac278 'keyword' 'const char *'
|         |-DeclRefExpr 0x5595875d7118 <col:33> 'P' lvalue ParmVar 0x5595875ac2f0 'parser' 'P'
|         `-DeclRefExpr 0x5595875d7138 <col:41> 'T' lvalue ParmVar 0x5595875ac398 'x' 'T &'
|-FunctionTemplateDecl 0x5595875ac9f8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x5595875ac588 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875ac608 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5595875ac958 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5595875ac6c8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875ac748 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5595875ac7c0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x5595875ac868 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5595875d7318 <col:69, line:557:5>
|     `-ReturnStmt 0x5595875d7308 <line:556:9, col:46>
|       `-CallExpr 0x5595875d72c8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d71c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d7248 <col:21> 'const char *' lvalue ParmVar 0x5595875ac6c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5595875d7268 <col:30> 'int' lvalue ParmVar 0x5595875ac748 'flags' 'int'
|         |-DeclRefExpr 0x5595875d7288 <col:37> 'P' lvalue ParmVar 0x5595875ac7c0 'parser' 'P'
|         `-DeclRefExpr 0x5595875d72a8 <col:45> 'T' lvalue ParmVar 0x5595875ac868 'x' 'T &'
|-FunctionTemplateDecl 0x5595875acd08 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x5595875aca70 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5595875acc68 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5595875acb20 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875acb98 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5595875d7458 <col:56, line:571:5>
|     `-ReturnStmt 0x5595875d7448 <line:570:9, col:48>
|       `-CallExpr 0x5595875d7410 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d7340 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d73b0 <col:30> 'const char *' lvalue ParmVar 0x5595875acb20 'keyword' 'const char *'
|         |-IntegerLiteral 0x5595875d73d0 <col:39> 'int' 0
|         `-DeclRefExpr 0x5595875d73f0 <col:42> 'P' lvalue ParmVar 0x5595875acb98 'parser' 'P'
|-FunctionTemplateDecl 0x5595875ad098 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x5595875acd70 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5595875acff8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5595875ace20 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875acea0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5595875acf18 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5595875d7628 <col:67, line:576:5>
|     |-CallExpr 0x5595875d75b0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5595875d7470 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5595875d74b0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5595875d74c0 <col:39> 'const char *' lvalue ParmVar 0x5595875ace20 'keyword' 'const char *'
|     | |-BinaryOperator 0x5595875d7570 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5595875d7520 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5595875d74e0 <col:48> 'int' lvalue ParmVar 0x5595875acea0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5595875d7558 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5595875d7538 <col:56> 'const int' lvalue Var 0x55958759f840 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5595875d7590 <col:68> 'P' lvalue ParmVar 0x5595875acf18 'parser' 'P'
|     `-ReturnStmt 0x5595875d7618 <line:575:9, col:17>
|       `-UnaryOperator 0x5595875d7600 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5595875d75f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5595875ad4e8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x5595875ad108 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875ad188 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5595875ad448 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5595875ad248 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875ad2c0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5595875ad368 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5595875d7798 <col:62, line:592:5>
|     `-ReturnStmt 0x5595875d7788 <line:591:9, col:51>
|       `-CallExpr 0x5595875d7748 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d7658 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d76c8 <col:30> 'const char *' lvalue ParmVar 0x5595875ad248 'keyword' 'const char *'
|         |-IntegerLiteral 0x5595875d76e8 <col:39> 'int' 0
|         |-DeclRefExpr 0x5595875d7708 <col:42> 'P' lvalue ParmVar 0x5595875ad2c0 'parser' 'P'
|         `-DeclRefExpr 0x5595875d7728 <col:50> 'T' lvalue ParmVar 0x5595875ad368 'x' 'T &'
|-FunctionTemplateDecl 0x5595875ad9c8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x5595875ad558 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875ad5d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5595875ad928 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5595875ad698 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875ad718 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5595875ad790 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x5595875ad838 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5595875d7990 <col:73, line:597:5>
|     |-CallExpr 0x5595875d7910 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5595875d77b0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5595875d77f0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5595875d7800 <col:39> 'const char *' lvalue ParmVar 0x5595875ad698 'keyword' 'const char *'
|     | |-BinaryOperator 0x5595875d78b0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5595875d7860 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5595875d7820 <col:48> 'int' lvalue ParmVar 0x5595875ad718 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5595875d7898 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5595875d7878 <col:56> 'const int' lvalue Var 0x55958759f840 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5595875d78d0 <col:68> 'P' lvalue ParmVar 0x5595875ad790 'parser' 'P'
|     | `-DeclRefExpr 0x5595875d78f0 <col:76> 'T' lvalue ParmVar 0x5595875ad838 'x' 'T &'
|     `-ReturnStmt 0x5595875d7980 <line:596:9, col:17>
|       `-UnaryOperator 0x5595875d7968 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5595875d7958 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5595875adf78 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x5595875ada40 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875adab8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5595875aded8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x5595875adb78 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875adbf0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x5595875addb0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5595875d7b00 <col:65, line:614:5>
|     `-ReturnStmt 0x5595875d7af0 <line:613:9, col:46>
|       `-CallExpr 0x5595875d7ab0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d79c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d7a30 <col:25> 'const char *' lvalue ParmVar 0x5595875adb78 'keyword' 'const char *'
|         |-IntegerLiteral 0x5595875d7a50 <col:34> 'int' 0
|         |-DeclRefExpr 0x5595875d7a70 <col:37> 'P' lvalue ParmVar 0x5595875adbf0 'parser' 'P'
|         `-DeclRefExpr 0x5595875d7a90 <col:45> 'Vector<T>' lvalue ParmVar 0x5595875addb0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5595875ae3a8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x5595875adfe8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5595875ae308 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x5595875ae0a0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875ae1f0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5595875d7d20 <col:55, line:618:5>
|     `-ReturnStmt 0x5595875d7d10 <line:617:9, col:55>
|       `-CallExpr 0x5595875d7cd0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d7b28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d7b98 <col:25> 'const char *' lvalue ParmVar 0x5595875ae0a0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5595875d7bb8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5595875d7c90 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5595875d7cb0 <col:54> 'Vector<T>' lvalue ParmVar 0x5595875ae1f0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5595875ae978 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x5595875ae410 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875ae488 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5595875ae8d8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5595875ae548 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875ae5c8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5595875ae640 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5595875ae790 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5595875d7f18 <col:76, line:623:5>
|     |-CallExpr 0x5595875d7e98 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5595875d7d38 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5595875d7d78 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5595875d7d88 <col:34> 'const char *' lvalue ParmVar 0x5595875ae548 'keyword' 'const char *'
|     | |-BinaryOperator 0x5595875d7e38 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5595875d7de8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5595875d7da8 <col:43> 'int' lvalue ParmVar 0x5595875ae5c8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5595875d7e20 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5595875d7e00 <col:51> 'const int' lvalue Var 0x55958759f840 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5595875d7e58 <col:63> 'P' lvalue ParmVar 0x5595875ae640 'parser' 'P'
|     | `-DeclRefExpr 0x5595875d7e78 <col:71> 'Vector<T>' lvalue ParmVar 0x5595875ae790 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5595875d7f08 <line:622:9, col:17>
|       `-UnaryOperator 0x5595875d7ef0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5595875d7ee0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5595875aeeb8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x5595875ae9f0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875aea68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5595875aee18 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x5595875aeb28 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875aeba8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5595875aecf0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5595875d8180 <col:66, line:627:5>
|     `-ReturnStmt 0x5595875d8170 <line:626:9, col:59>
|       `-CallExpr 0x5595875d8130 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5595875d7f48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5595875d7fb8 <col:25> 'const char *' lvalue ParmVar 0x5595875aeb28 'keyword' 'const char *'
|         |-DeclRefExpr 0x5595875d7fd8 <col:34> 'int' lvalue ParmVar 0x5595875aeba8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5595875d80f0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5595875d8110 <col:58> 'Vector<T>' lvalue ParmVar 0x5595875aecf0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x5595875aef48 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5595875d8200 <col:25, line:633:5>
|   `-ReturnStmt 0x5595875d81f0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5595875d81d8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5595875d81a8 <col:16> 'const bool' lvalue ->_status 0x5595875bc9f8
|         `-CXXThisExpr 0x5595875d8198 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5595875af0c8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x5595875af000 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5595875d82e8 <col:27, line:639:5>
|   |-BinaryOperator 0x5595875d8290 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5595875d8218 <col:9> 'bool' lvalue ParmVar 0x5595875af000 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5595875d8278 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5595875d8248 <col:13> 'bool' lvalue ->_status 0x5595875bc9f8
|   |     `-CXXThisExpr 0x5595875d8238 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5595875d82d8 <line:638:9, col:17>
|     `-UnaryOperator 0x5595875d82c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5595875d82b0 <col:17> 'Args *' this
|-CXXMethodDecl 0x5595875af248 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5595875af188 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5595875d83d8 <col:39, line:644:5>
|   |-BinaryOperator 0x5595875d8380 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5595875d8308 <col:9> 'bool' lvalue ParmVar 0x5595875af188 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5595875d8368 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5595875d8338 <col:13> 'const bool' lvalue ->_status 0x5595875bc9f8
|   |     `-CXXThisExpr 0x5595875d8328 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5595875d83c8 <line:643:9, col:17>
|     `-UnaryOperator 0x5595875d83b0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5595875d83a0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5595875af310 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5595875d8480 <col:30, line:651:5>
|   `-ReturnStmt 0x5595875d8470 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5595875d8458 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5595875d8428 <col:16> 'bool' lvalue ->_read_status 0x559587595c40
|         `-ImplicitCastExpr 0x5595875d8408 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5595875d83f8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5595875af458 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x5595875af3c8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5595875d8588 <col:32, line:658:5>
|   |-BinaryOperator 0x5595875d8530 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5595875d8498 <col:9> 'bool' lvalue ParmVar 0x5595875af3c8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5595875d8518 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5595875d84e8 <col:13> 'bool' lvalue ->_read_status 0x559587595c40
|   |     `-ImplicitCastExpr 0x5595875d84c8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5595875d84b8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5595875d8578 <line:657:9, col:17>
|     `-UnaryOperator 0x5595875d8560 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5595875d8550 <col:17> 'Args *' this
|-CXXMethodDecl 0x5595875af5a8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5595875af518 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5595875d8698 <col:44, line:663:5>
|   |-BinaryOperator 0x5595875d8640 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5595875d85a8 <col:9> 'bool' lvalue ParmVar 0x5595875af518 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5595875d8628 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5595875d85f8 <col:13> 'bool' lvalue ->_read_status 0x559587595c40
|   |     `-ImplicitCastExpr 0x5595875d85d8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5595875d85c8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5595875d8688 <line:662:9, col:17>
|     `-UnaryOperator 0x5595875d8670 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5595875d8660 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5595875af670 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x5595875af738 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x5595875af800 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x5595875af8c8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x5595875afbd8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5595875af968 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5595875afb38 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x5595875afa48 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5595875d8a50 <col:19, line:706:5>
|     `-IfStmt 0x5595875d8a28 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5595875d8798 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5595875d8958 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5595875d8928 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5595875d88e8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5595875d87f0 <col:42> '<bound member function type>' ->simple_slot 0x5595875d0b50
|       |     | `-CXXThisExpr 0x5595875d87e0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x5595875d8888 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5595875d8840 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x559587320c98
|       |     | `-DeclRefExpr 0x5595875d8820 <col:55> 'T' lvalue ParmVar 0x5595875afa48 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5595875d88c8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5595875d8a18 <line:705:13, col:34>
|         `-CallExpr 0x5595875d89f0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5595875d8978 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5595875d89d0 <col:33> 'T' lvalue ParmVar 0x5595875afa48 'x' 'T &'
|-FunctionTemplateDecl 0x5595875afea8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x5595875afc38 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5595875afe08 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x5595875afd18 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5595875d8e30 <col:31, line:717:5>
|     |-DeclStmt 0x5595875d8b90 <line:713:9, col:23>
|     | `-VarDecl 0x5595875d8a78 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5595875d8b68 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5595875d8af0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5595875d8b48 <col:21> 'T' lvalue ParmVar 0x5595875afd18 'x' 'T &'
|     |-IfStmt 0x5595875d8de0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5595875d8c88 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5595875d8dc0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5595875d8d60 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5595875d8cf0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5595874d7d98 0x5595874d79b8 0x5595874d75e8 0x5595874d7208 0x5595874d6e28 0x5595874d6a58
|     |   | `-DeclRefExpr 0x5595875d8cd0 <col:14> 'T *' lvalue Var 0x5595875d8a78 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5595875d8da0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5595875d8e18 <line:716:9, col:16>
|       `-DeclRefExpr 0x5595875d8df8 <col:16> 'T *' lvalue Var 0x5595875d8a78 's' 'T *'
|-FunctionTemplateDecl 0x5595875b02b8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x5595875aff08 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5595875aff88 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5595875b0218 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x5595875b0068 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x5595875b0108 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5595875d9140 <col:37, line:726:5>
|     |-IfStmt 0x5595875d90d0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5595875d90f0 <line:723:13, col:26>
|     | | `-VarDecl 0x5595875d8e98 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5595875d8f88 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5595875d8f10 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5595875d8f68 <col:25> 'T' lvalue ParmVar 0x5595875b0068 'x' 'T &'
|     | |-DeclRefExpr 0x5595875d8fb0 <col:16> 'T *' lvalue Var 0x5595875d8e98 's' 'T *'
|     | `-BinaryOperator 0x5595875d90b0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5595875d9060 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5595875d8ff0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5595874d7d98 0x5595874d79b8 0x5595874d75e8 0x5595874d7208 0x5595874d6e28 0x5595874d6a58
|     |   | `-DeclRefExpr 0x5595875d8fd0 <col:14> 'T *' lvalue Var 0x5595875d8e98 's' 'T *'
|     |   `-DeclRefExpr 0x5595875d9090 <col:18> 'const V' lvalue ParmVar 0x5595875b0108 'value' 'const V &'
|     `-ReturnStmt 0x5595875d9130 <line:725:9, col:17>
|       `-UnaryOperator 0x5595875d9118 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5595875d9108 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5595875b06b8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x5595875b0320 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5595875b0618 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x5595875b03d0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875b0450 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5595875b04f8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5595875d9f60 <col:65, line:737:5>
|     |-DeclStmt 0x5595875d91d8 <line:732:9, col:26>
|     | `-VarDecl 0x5595875d9170 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5595875d9f28 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5595875d9f48 <line:733:13, col:58>
|       | `-VarDecl 0x5595875d9200 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5595875d93e0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5595875d93b0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5595875d9398 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5595875d9378 <col:26, col:58> 'String' (CXXTemporary 0x5595875d9378)
|       |           `-CXXMemberCallExpr 0x5595875d9308 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5595875d9278 <col:26> '<bound member function type>' ->find 0x5595875d0168
|       |             | `-CXXThisExpr 0x5595875d9268 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5595875d9340 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5595875d92a8 <col:31> 'const char *' lvalue ParmVar 0x5595875b03d0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5595875d9358 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5595875d92c8 <col:40> 'int' lvalue ParmVar 0x5595875b0450 'flags' 'int'
|       |             `-DeclRefExpr 0x5595875d92e8 <col:47> 'Args::Slot *' lvalue Var 0x5595875d9170 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5595875d9498 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5595875d9480 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5595875d9460 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5595875d9430 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5595872e3c68
|       |       `-ImplicitCastExpr 0x5595875d9418 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5595875d93f8 <col:20> 'String' lvalue Var 0x5595875d9200 'str' 'String'
|       `-CompoundStmt 0x5595875d9f08 <col:61, line:736:9>
|         |-DeclStmt 0x5595875d9950 <line:734:13, col:76>
|         | `-VarDecl 0x5595875d94e8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5595875d9920 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5595875d9890 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5595875d98d8 <col:60> 'T' lvalue ParmVar 0x5595875b04f8 'variable' 'T &'
|         |     `-UnaryOperator 0x5595875d9908 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5595875d98f8 <col:71> 'Args *' this
|         `-CallExpr 0x5595875d9ed8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5595875d9978 <col:13> '<bound member function type>' ->postparse 0x5595875d0378
|           | `-CXXThisExpr 0x5595875d9968 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5595875d9e98 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5595875d99a8 <col:23> 'T *' lvalue Var 0x5595875d94e8 's' 'T *'
|           | `-CallExpr 0x5595875d9e58 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5595875d9c30 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5595875d9d30 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5595875d9d50 <col:86> 'String' lvalue Var 0x5595875d9200 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5595875d9e00 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5595875d9d90 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5595874d7d98 0x5595874d79b8 0x5595874d75e8 0x5595874d7208 0x5595874d6e28 0x5595874d6a58
|           |   | `-DeclRefExpr 0x5595875d9d70 <col:92> 'T *' lvalue Var 0x5595875d94e8 's' 'T *'
|           |   `-UnaryOperator 0x5595875d9e40 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5595875d9e30 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5595875d9eb8 <col:103> 'Args::Slot *' lvalue Var 0x5595875d9170 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5595875b0c08 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5595875b0728 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5595875b07a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5595875b0b68 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5595875b0868 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875b08e8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5595875b0988 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x5595875b0a28 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5595875dae00 <col:88, line:745:5>
|     |-DeclStmt 0x5595875d9ff8 <line:741:9, col:26>
|     | `-VarDecl 0x5595875d9f90 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5595875da218 <line:742:9, col:55>
|     | `-VarDecl 0x5595875da020 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5595875da200 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5595875da1d0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5595875da1b8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5595875da198 <col:22, col:54> 'String' (CXXTemporary 0x5595875da198)
|     |           `-CXXMemberCallExpr 0x5595875da128 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5595875da098 <col:22> '<bound member function type>' ->find 0x5595875d0168
|     |             | `-CXXThisExpr 0x5595875da088 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5595875da160 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5595875da0c8 <col:27> 'const char *' lvalue ParmVar 0x5595875b0868 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5595875da178 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5595875da0e8 <col:36> 'int' lvalue ParmVar 0x5595875b08e8 'flags' 'int'
|     |             `-DeclRefExpr 0x5595875da108 <col:43> 'Args::Slot *' lvalue Var 0x5595875d9f90 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5595875da5f0 <line:743:9, col:72>
|     | `-VarDecl 0x5595875da268 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5595875da5c0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5595875da530 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5595875da578 <col:56> 'T' lvalue ParmVar 0x5595875b0988 'variable' 'T &'
|     |     `-UnaryOperator 0x5595875da5a8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5595875da598 <col:67> 'Args *' this
|     `-CallExpr 0x5595875dadd0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5595875da618 <col:9> '<bound member function type>' ->postparse 0x5595875d0378
|       | `-CXXThisExpr 0x5595875da608 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5595875dad90 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5595875da648 <col:19> 'T *' lvalue Var 0x5595875da268 's' 'T *'
|       | `-ParenExpr 0x5595875dad70 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5595875dad40 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5595875dad28 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5595875dad10 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5595875dacf0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5595875dacc0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5595872e3c68
|       |     |       `-ImplicitCastExpr 0x5595875daca8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5595875da668 <col:25> 'String' lvalue Var 0x5595875da020 'str' 'String'
|       |     |-CallExpr 0x5595875dab18 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5595875da8f0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5595875da9f0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5595875daa10 <col:89> 'String' lvalue Var 0x5595875da020 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5595875daac0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5595875daa50 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5595874d7d98 0x5595874d79b8 0x5595874d75e8 0x5595874d7208 0x5595874d6e28 0x5595874d6a58
|       |     | | `-DeclRefExpr 0x5595875daa30 <col:95> 'T *' lvalue Var 0x5595875da268 's' 'T *'
|       |     | `-UnaryOperator 0x5595875dab00 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5595875daaf0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5595875dac88 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5595875dac68 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5595875dac38 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5595875dabe8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5595875dab78 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5595874d7d98 0x5595874d79b8 0x5595874d75e8 0x5595874d7208 0x5595874d6e28 0x5595874d6a58
|       |         | | `-DeclRefExpr 0x5595875dab58 <col:109> 'T *' lvalue Var 0x5595875da268 's' 'T *'
|       |         | `-DeclRefExpr 0x5595875dac18 <col:113> 'const V' lvalue ParmVar 0x5595875b0a28 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5595875dac58 <col:120> 'bool' true
|       `-DeclRefExpr 0x5595875dadb0 <col:128> 'Args::Slot *' lvalue Var 0x5595875d9f90 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5595875b1138 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x5595875b0c80 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875b0cf8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5595875b1098 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5595875b0db8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875b0e38 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5595875b0eb0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5595875b0f58 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5595875db9f8 <col:75, line:754:5>
|     |-DeclStmt 0x5595875daea8 <line:749:9, col:26>
|     | `-VarDecl 0x5595875dae40 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5595875db9c0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5595875db9e0 <line:750:13, col:58>
|       | `-VarDecl 0x5595875daed0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5595875db0b0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5595875db080 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5595875db068 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5595875db048 <col:26, col:58> 'String' (CXXTemporary 0x5595875db048)
|       |           `-CXXMemberCallExpr 0x5595875dafd8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5595875daf48 <col:26> '<bound member function type>' ->find 0x5595875d0168
|       |             | `-CXXThisExpr 0x5595875daf38 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5595875db010 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5595875daf78 <col:31> 'const char *' lvalue ParmVar 0x5595875b0db8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5595875db028 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5595875daf98 <col:40> 'int' lvalue ParmVar 0x5595875b0e38 'flags' 'int'
|       |             `-DeclRefExpr 0x5595875dafb8 <col:47> 'Args::Slot *' lvalue Var 0x5595875dae40 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5595875db168 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5595875db150 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5595875db130 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5595875db100 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5595872e3c68
|       |       `-ImplicitCastExpr 0x5595875db0e8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5595875db0c8 <col:20> 'String' lvalue Var 0x5595875daed0 'str' 'String'
|       `-CompoundStmt 0x5595875db9a0 <col:61, line:753:9>
|         |-DeclStmt 0x5595875db540 <line:751:13, col:63>
|         | `-VarDecl 0x5595875db1b8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5595875db510 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5595875db480 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5595875db4c8 <col:47> 'T' lvalue ParmVar 0x5595875b0f58 'variable' 'T &'
|         |     `-UnaryOperator 0x5595875db4f8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5595875db4e8 <col:58> 'Args *' this
|         `-CallExpr 0x5595875db970 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5595875db568 <col:13> '<bound member function type>' ->postparse 0x5595875d0378
|           | `-CXXThisExpr 0x5595875db558 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5595875db930 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5595875db598 <col:23> 'T *' lvalue Var 0x5595875db1b8 's' 'T *'
|           | `-CallExpr 0x5595875db8f0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5595875db780 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5595875db7c8 <col:56> 'P' lvalue ParmVar 0x5595875b0eb0 'parser' 'P'
|           |   |-DeclRefExpr 0x5595875db7e8 <col:64> 'String' lvalue Var 0x5595875daed0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5595875db898 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5595875db828 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5595874d7d98 0x5595874d79b8 0x5595874d75e8 0x5595874d7208 0x5595874d6e28 0x5595874d6a58
|           |   | `-DeclRefExpr 0x5595875db808 <col:70> 'T *' lvalue Var 0x5595875db1b8 's' 'T *'
|           |   `-UnaryOperator 0x5595875db8d8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5595875db8c8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5595875db950 <col:81> 'Args::Slot *' lvalue Var 0x5595875dae40 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5595875b1798 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5595875b11b0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5595875b1228 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x5595875b12a8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5595875b16f8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5595875b1370 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875b13f0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5595875b1468 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x5595875b1508 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5595875b15a8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5595875deb38 <col:98, line:762:5>
|     |-DeclStmt 0x5595875dba90 <line:758:9, col:26>
|     | `-VarDecl 0x5595875dba28 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5595875dbcb0 <line:759:9, col:55>
|     | `-VarDecl 0x5595875dbab8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5595875dbc98 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5595875dbc68 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5595875dbc50 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5595875dbc30 <col:22, col:54> 'String' (CXXTemporary 0x5595875dbc30)
|     |           `-CXXMemberCallExpr 0x5595875dbbc0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5595875dbb30 <col:22> '<bound member function type>' ->find 0x5595875d0168
|     |             | `-CXXThisExpr 0x5595875dbb20 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5595875dbbf8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5595875dbb60 <col:27> 'const char *' lvalue ParmVar 0x5595875b1370 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5595875dbc10 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5595875dbb80 <col:36> 'int' lvalue ParmVar 0x5595875b13f0 'flags' 'int'
|     |             `-DeclRefExpr 0x5595875dbba0 <col:43> 'Args::Slot *' lvalue Var 0x5595875dba28 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5595875dc0d0 <line:760:9, col:59>
|     | `-VarDecl 0x5595875dbd08 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5595875dc0a0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5595875dc010 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5595875dc058 <col:43> 'T' lvalue ParmVar 0x5595875b1508 'variable' 'T &'
|     |     `-UnaryOperator 0x5595875dc088 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5595875dc078 <col:54> 'Args *' this
|     `-CallExpr 0x5595875deb08 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5595875dc0f8 <col:9> '<bound member function type>' ->postparse 0x5595875d0378
|       | `-CXXThisExpr 0x5595875dc0e8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5595875deac8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5595875dc128 <col:19> 'T *' lvalue Var 0x5595875dbd08 's' 'T *'
|       | `-ParenExpr 0x5595875deaa8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5595875dea78 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5595875dea60 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5595875dea48 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5595875dea28 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5595875de9f8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5595872e3c68
|       |     |       `-ImplicitCastExpr 0x5595875de9e0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5595875dc148 <col:25> 'String' lvalue Var 0x5595875dbab8 'str' 'String'
|       |     |-CallExpr 0x5595875de850 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5595875de6e0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5595875de728 <col:59> 'P' lvalue ParmVar 0x5595875b1468 'parser' 'P'
|       |     | |-DeclRefExpr 0x5595875de748 <col:67> 'String' lvalue Var 0x5595875dbab8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5595875de7f8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5595875de788 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5595874d7d98 0x5595874d79b8 0x5595874d75e8 0x5595874d7208 0x5595874d6e28 0x5595874d6a58
|       |     | | `-DeclRefExpr 0x5595875de768 <col:73> 'T *' lvalue Var 0x5595875dbd08 's' 'T *'
|       |     | `-UnaryOperator 0x5595875de838 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5595875de828 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5595875de9c0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5595875de9a0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5595875de970 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5595875de920 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5595875de8b0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5595874d7d98 0x5595874d79b8 0x5595874d75e8 0x5595874d7208 0x5595874d6e28 0x5595874d6a58
|       |         | | `-DeclRefExpr 0x5595875de890 <col:87> 'T *' lvalue Var 0x5595875dbd08 's' 'T *'
|       |         | `-DeclRefExpr 0x5595875de950 <col:91> 'const V' lvalue ParmVar 0x5595875b15a8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5595875de990 <col:98> 'bool' true
|       `-DeclRefExpr 0x5595875deae8 <col:106> 'Args::Slot *' lvalue Var 0x5595875dba28 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5595875b9a78 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x5595875b1818 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875b1898 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5595875b9590 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5595875b99d8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5595875b9650 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875b96d0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5595875b9748 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x5595875b97e8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5595875b9888 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5595875dfb18 <col:60, line:773:5>
|     |-DeclStmt 0x5595875debe0 <line:767:9, col:26>
|     | `-VarDecl 0x5595875deb78 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5595875dfae0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5595875dfb00 <line:768:13, col:58>
|       | `-VarDecl 0x5595875dec08 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5595875dede8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5595875dedb8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5595875deda0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5595875ded80 <col:26, col:58> 'String' (CXXTemporary 0x5595875ded80)
|       |           `-CXXMemberCallExpr 0x5595875ded10 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5595875dec80 <col:26> '<bound member function type>' ->find 0x5595875d0168
|       |             | `-CXXThisExpr 0x5595875dec70 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5595875ded48 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5595875decb0 <col:31> 'const char *' lvalue ParmVar 0x5595875b9650 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5595875ded60 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5595875decd0 <col:40> 'int' lvalue ParmVar 0x5595875b96d0 'flags' 'int'
|       |             `-DeclRefExpr 0x5595875decf0 <col:47> 'Args::Slot *' lvalue Var 0x5595875deb78 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5595875deea0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5595875dee88 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5595875dee68 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5595875dee38 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5595872e3c68
|       |       `-ImplicitCastExpr 0x5595875dee20 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5595875dee00 <col:20> 'String' lvalue Var 0x5595875dec08 'str' 'String'
|       `-CompoundStmt 0x5595875dfab8 <col:61, line:772:9>
|         |-DeclStmt 0x5595875df1e0 <line:769:13, col:66>
|         | `-VarDecl 0x5595875deef8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5595875df1b0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5595875df120 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5595875df168 <col:49> 'T1' lvalue ParmVar 0x5595875b97e8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5595875df198 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5595875df188 <col:61> 'Args *' this
|         |-DeclStmt 0x5595875df550 <line:770:13, col:66>
|         | `-VarDecl 0x5595875df268 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5595875df520 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5595875df490 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5595875df4d8 <col:49> 'T2' lvalue ParmVar 0x5595875b9888 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5595875df508 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5595875df4f8 <col:61> 'Args *' this
|         `-CallExpr 0x5595875dfa88 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5595875df578 <col:13> '<bound member function type>' ->postparse 0x5595875d0378
|           | `-CXXThisExpr 0x5595875df568 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5595875dfa48 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5595875df5e8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5595875df5a8 <col:23> 'T1 *' lvalue Var 0x5595875deef8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5595875df5c8 <col:29> 'T2 *' lvalue Var 0x5595875df268 's2' 'T2 *'
|           | `-CallExpr 0x5595875dfa00 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5595875df7d0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5595875df818 <col:63> 'P' lvalue ParmVar 0x5595875b9748 'parser' 'P'
|           |   |-DeclRefExpr 0x5595875df838 <col:71> 'String' lvalue Var 0x5595875dec08 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5595875df8e8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5595875df878 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5595874d7d98 0x5595874d79b8 0x5595874d75e8 0x5595874d7208 0x5595874d6e28 0x5595874d6a58
|           |   | `-DeclRefExpr 0x5595875df858 <col:77> 'T1 *' lvalue Var 0x5595875deef8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5595875df9a8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5595875df938 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5595874d7d98 0x5595874d79b8 0x5595874d75e8 0x5595874d7208 0x5595874d6e28 0x5595874d6a58
|           |   | `-DeclRefExpr 0x5595875df918 <col:82> 'T2 *' lvalue Var 0x5595875df268 's2' 'T2 *'
|           |   `-UnaryOperator 0x5595875df9e8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5595875df9d8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5595875dfa68 <col:94> 'Args::Slot *' lvalue Var 0x5595875deb78 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5595875b9e68 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x5595875b9af8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5595875b9dc8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5595875b9bb0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875b9c30 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5595875b9ca8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5595875e0030 <col:67, line:780:5>
|     |-DeclStmt 0x5595875dfbb0 <line:777:9, col:26>
|     | `-VarDecl 0x5595875dfb48 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5595875dfff8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5595875e0018 <line:778:13, col:58>
|       | `-VarDecl 0x5595875dfbd8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5595875dfdb8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5595875dfd88 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5595875dfd70 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5595875dfd50 <col:26, col:58> 'String' (CXXTemporary 0x5595875dfd50)
|       |           `-CXXMemberCallExpr 0x5595875dfce0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5595875dfc50 <col:26> '<bound member function type>' ->find 0x5595875d0168
|       |             | `-CXXThisExpr 0x5595875dfc40 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5595875dfd18 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5595875dfc80 <col:31> 'const char *' lvalue ParmVar 0x5595875b9bb0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5595875dfd30 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5595875dfca0 <col:40> 'int' lvalue ParmVar 0x5595875b9c30 'flags' 'int'
|       |             `-DeclRefExpr 0x5595875dfcc0 <col:47> 'Args::Slot *' lvalue Var 0x5595875dfb48 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5595875dfe70 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5595875dfe58 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5595875dfe38 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5595875dfe08 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5595872e3c68
|       |       `-ImplicitCastExpr 0x5595875dfdf0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5595875dfdd0 <col:20> 'String' lvalue Var 0x5595875dfbd8 'str' 'String'
|       `-CallExpr 0x5595875dffc8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5595875dfe98 <col:13> '<bound member function type>' ->postparse 0x5595875d0378
|         | `-CXXThisExpr 0x5595875dfe88 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5595875dff78 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5595875dfee8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5595875dfec8 <col:23> 'P' lvalue ParmVar 0x5595875b9ca8 'parser' 'P'
|         | |-DeclRefExpr 0x5595875dff30 <col:36> 'String' lvalue Var 0x5595875dfbd8 'str' 'String'
|         | `-UnaryOperator 0x5595875dff60 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5595875dff50 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5595875dffa8 <col:49> 'Args::Slot *' lvalue Var 0x5595875dfb48 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5595875ba208 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5595875b9ed8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5595875ba168 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5595875b9f90 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875ba010 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5595875ba088 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5595875e09a0 <col:71, line:792:5>
|     |-DeclStmt 0x5595875e00c8 <line:784:9, col:26>
|     | `-VarDecl 0x5595875e0060 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5595875e0198 <line:785:9, col:29>
|     | `-VarDecl 0x5595875e00f8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5595875e0180 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5595875e0160 <col:28> 'int' 1
|     |-WhileStmt 0x5595875e0850 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5595875e0870 <line:786:16, col:61>
|     | | `-VarDecl 0x5595875e01c0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5595875e03a0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5595875e0370 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5595875e0358 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5595875e0338 <col:29, col:61> 'String' (CXXTemporary 0x5595875e0338)
|     | |           `-CXXMemberCallExpr 0x5595875e02c8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5595875e0238 <col:29> '<bound member function type>' ->find 0x5595875d0168
|     | |             | `-CXXThisExpr 0x5595875e0228 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5595875e0300 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5595875e0268 <col:34> 'const char *' lvalue ParmVar 0x5595875b9f90 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5595875e0318 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5595875e0288 <col:43> 'int' lvalue ParmVar 0x5595875ba010 'flags' 'int'
|     | |             `-DeclRefExpr 0x5595875e02a8 <col:50> 'Args::Slot *' lvalue Var 0x5595875e0060 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5595875e0458 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5595875e0440 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5595875e0420 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5595875e03f0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5595872e3c68
|     | |       `-ImplicitCastExpr 0x5595875e03d8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5595875e03b8 <col:23> 'String' lvalue Var 0x5595875e01c0 'str' 'String'
|     | `-CompoundStmt 0x5595875e0828 <col:64, line:790:9>
|     |   |-CallExpr 0x5595875e05b0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5595875e0480 <col:13> '<bound member function type>' ->postparse 0x5595875d0378
|     |   | | `-CXXThisExpr 0x5595875e0470 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5595875e0560 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5595875e04d0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5595875e04b0 <col:23> 'P' lvalue ParmVar 0x5595875ba088 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5595875e0518 <col:36> 'String' lvalue Var 0x5595875e01c0 'str' 'String'
|     |   | | `-UnaryOperator 0x5595875e0548 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5595875e0538 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5595875e0590 <col:49> 'Args::Slot *' lvalue Var 0x5595875e0060 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5595875e0748 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5595875e05e0 <col:13> 'int' lvalue Var 0x5595875e00f8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5595875e0730 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5595875e0710 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5595875e0678 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5595875e0658 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5595875e0640 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5595875e0600 <col:28> 'int' lvalue Var 0x5595875e00f8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5595875e0620 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5595875e06f8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5595875e06c8 <col:49> 'bool' lvalue ->_read_status 0x559587595c40
|     |   |         `-ImplicitCastExpr 0x5595875e06a8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5595875e0698 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5595875e07f8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5595875e0768 <col:13> 'int' lvalue ParmVar 0x5595875ba010 'flags' 'int'
|     |     `-UnaryOperator 0x5595875e07e0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5595875e07c8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5595875e07a8 <col:23> 'const int' lvalue Var 0x55958759f558 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5595875e0980 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5595875e08b8 <col:9> 'bool' lvalue ->_read_status 0x559587595c40
|       | `-ImplicitCastExpr 0x5595875e0898 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5595875e0888 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5595875e0960 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5595875e0940 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5595875e0928 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5595875e08e8 <col:25> 'int' lvalue Var 0x5595875e00f8 'read_status' 'int'
|           `-IntegerLiteral 0x5595875e0908 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5595875ba6e8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5595875ba278 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875ba2f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5595875ba648 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5595875ba3b8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875ba438 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5595875ba4b0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x5595875ba558 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5595875e1930 <col:84, line:805:5>
|     |-DeclStmt 0x5595875e0a48 <line:796:9, col:26>
|     | `-VarDecl 0x5595875e09e0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5595875e0b18 <line:797:9, col:29>
|     | `-VarDecl 0x5595875e0a78 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5595875e0b00 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5595875e0ae0 <col:28> 'int' 1
|     |-DeclStmt 0x5595875e0e50 <line:798:9, col:71>
|     | `-VarDecl 0x5595875e0b68 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5595875e0e20 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5595875e0d90 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5595875e0dd8 <col:55> 'T' lvalue ParmVar 0x5595875ba558 'variable' 'T &'
|     |     `-UnaryOperator 0x5595875e0e08 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5595875e0df8 <col:66> 'Args *' this
|     |-WhileStmt 0x5595875e17e0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5595875e1800 <line:799:16, col:61>
|     | | `-VarDecl 0x5595875e0e78 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5595875e1058 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5595875e1028 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5595875e1010 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5595875e0ff0 <col:29, col:61> 'String' (CXXTemporary 0x5595875e0ff0)
|     | |           `-CXXMemberCallExpr 0x5595875e0f80 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5595875e0ef0 <col:29> '<bound member function type>' ->find 0x5595875d0168
|     | |             | `-CXXThisExpr 0x5595875e0ee0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5595875e0fb8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5595875e0f20 <col:34> 'const char *' lvalue ParmVar 0x5595875ba3b8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5595875e0fd0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5595875e0f40 <col:43> 'int' lvalue ParmVar 0x5595875ba438 'flags' 'int'
|     | |             `-DeclRefExpr 0x5595875e0f60 <col:50> 'Args::Slot *' lvalue Var 0x5595875e09e0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5595875e1110 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5595875e10f8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5595875e10d8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5595875e10a8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5595872e3c68
|     | |       `-ImplicitCastExpr 0x5595875e1090 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5595875e1070 <col:23> 'String' lvalue Var 0x5595875e0e78 'str' 'String'
|     | `-CompoundStmt 0x5595875e17b8 <col:64, line:803:9>
|     |   |-CallExpr 0x5595875e1540 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5595875e1138 <col:13> '<bound member function type>' ->postparse 0x5595875d0378
|     |   | | `-CXXThisExpr 0x5595875e1128 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5595875e1500 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5595875e1168 <col:23> 'T *' lvalue Var 0x5595875e0b68 's' 'T *'
|     |   | | `-CallExpr 0x5595875e14c0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5595875e1350 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5595875e1398 <col:56> 'P' lvalue ParmVar 0x5595875ba4b0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5595875e13b8 <col:64> 'String' lvalue Var 0x5595875e0e78 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5595875e1468 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5595875e13f8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5595874d7d98 0x5595874d79b8 0x5595874d75e8 0x5595874d7208 0x5595874d6e28 0x5595874d6a58
|     |   | |   | `-DeclRefExpr 0x5595875e13d8 <col:70> 'T *' lvalue Var 0x5595875e0b68 's' 'T *'
|     |   | |   `-UnaryOperator 0x5595875e14a8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5595875e1498 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5595875e1520 <col:81> 'Args::Slot *' lvalue Var 0x5595875e09e0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5595875e16d8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5595875e1570 <col:13> 'int' lvalue Var 0x5595875e0a78 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5595875e16c0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5595875e16a0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5595875e1608 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5595875e15e8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5595875e15d0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5595875e1590 <col:28> 'int' lvalue Var 0x5595875e0a78 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5595875e15b0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5595875e1688 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5595875e1658 <col:49> 'bool' lvalue ->_read_status 0x559587595c40
|     |   |         `-ImplicitCastExpr 0x5595875e1638 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5595875e1628 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5595875e1788 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5595875e16f8 <col:13> 'int' lvalue ParmVar 0x5595875ba438 'flags' 'int'
|     |     `-UnaryOperator 0x5595875e1770 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5595875e1758 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5595875e1738 <col:23> 'const int' lvalue Var 0x55958759f558 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5595875e1910 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5595875e1848 <col:9> 'bool' lvalue ->_read_status 0x559587595c40
|       | `-ImplicitCastExpr 0x5595875e1828 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5595875e1818 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5595875e18f0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5595875e18d0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5595875e18b8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5595875e1878 <col:25> 'int' lvalue Var 0x5595875e0a78 'read_status' 'int'
|           `-IntegerLiteral 0x5595875e1898 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5595875bacc8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5595875ba760 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5595875ba7d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5595875bac28 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5595875ba898 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5595875ba918 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5595875ba990 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5595875baae0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5595875e2738 <col:87, line:821:5>
|     |-DeclStmt 0x5595875e19e0 <line:809:9, col:26>
|     | `-VarDecl 0x5595875e1978 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5595875e1ab0 <line:810:9, col:29>
|     | `-VarDecl 0x5595875e1a10 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5595875e1a98 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5595875e1a78 <col:28> 'int' 1
|     |-DeclStmt 0x5595875e1cf8 <line:811:9, col:38>
|     | `-VarDecl 0x5595875e1be0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5595875e1cd0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5595875e1c58 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5595875e1cb0 <col:29> 'Vector<T>' lvalue ParmVar 0x5595875baae0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5595875e25e8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5595875e2608 <line:812:16, col:61>
|     | | `-VarDecl 0x5595875e1d20 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5595875e1f00 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5595875e1ed0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5595875e1eb8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5595875e1e98 <col:29, col:61> 'String' (CXXTemporary 0x5595875e1e98)
|     | |           `-CXXMemberCallExpr 0x5595875e1e28 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5595875e1d98 <col:29> '<bound member function type>' ->find 0x5595875d0168
|     | |             | `-CXXThisExpr 0x5595875e1d88 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5595875e1e60 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5595875e1dc8 <col:34> 'const char *' lvalue ParmVar 0x5595875ba898 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5595875e1e78 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5595875e1de8 <col:43> 'int' lvalue ParmVar 0x5595875ba918 'flags' 'int'
|     | |             `-DeclRefExpr 0x5595875e1e08 <col:50> 'Args::Slot *' lvalue Var 0x5595875e1978 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5595875e1fb8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5595875e1fa0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5595875e1f80 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5595875e1f50 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5595872e3c68
|     | |       `-ImplicitCastExpr 0x5595875e1f38 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5595875e1f18 <col:23> 'String' lvalue Var 0x5595875e1d20 'str' 'String'
|     | `-CompoundStmt 0x5595875e25b0 <col:64, line:819:9>
|     |   |-DeclStmt 0x5595875e2078 <line:813:13, col:23>
|     |   | `-VarDecl 0x5595875e1fe0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5595875e2058 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5595875e21f8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5595875e20a0 <col:13> '<bound member function type>' ->postparse 0x5595875d0378
|     |   | | `-CXXThisExpr 0x5595875e2090 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5595875e21a0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5595875e20f0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5595875e20d0 <col:23> 'P' lvalue ParmVar 0x5595875ba990 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5595875e2138 <col:36> 'String' lvalue Var 0x5595875e1d20 'str' 'String'
|     |   | | |-DeclRefExpr 0x5595875e2158 <col:41> 'T' lvalue Var 0x5595875e1fe0 'sx' 'T'
|     |   | | `-UnaryOperator 0x5595875e2188 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5595875e2178 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5595875e21d8 <col:53> 'Args::Slot *' lvalue Var 0x5595875e1978 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5595875e2350 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5595875e2288 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5595875e2258 <col:17> 'bool' lvalue ->_read_status 0x559587595c40
|     |   | |   `-ImplicitCastExpr 0x5595875e2238 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5595875e2228 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5595875e2328 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5595875e22c0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5595875e22a0 <col:17> 'Vector<T> *' lvalue Var 0x5595875e1be0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5595875e2308 <col:30> 'T' lvalue Var 0x5595875e1fe0 'sx' 'T'
|     |   |-BinaryOperator 0x5595875e24d0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5595875e2368 <col:13> 'int' lvalue Var 0x5595875e1a10 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5595875e24b8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5595875e2498 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5595875e2400 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5595875e23e0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5595875e23c8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5595875e2388 <col:28> 'int' lvalue Var 0x5595875e1a10 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5595875e23a8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5595875e2480 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5595875e2450 <col:49> 'bool' lvalue ->_read_status 0x559587595c40
|     |   |         `-ImplicitCastExpr 0x5595875e2430 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5595875e2420 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5595875e2580 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5595875e24f0 <col:13> 'int' lvalue ParmVar 0x5595875ba918 'flags' 'int'
|     |     `-UnaryOperator 0x5595875e2568 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5595875e2550 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5595875e2530 <col:23> 'const int' lvalue Var 0x55958759f558 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5595875e2718 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5595875e2650 <col:9> 'bool' lvalue ->_read_status 0x559587595c40
|       | `-ImplicitCastExpr 0x5595875e2630 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5595875e2620 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5595875e26f8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5595875e26d8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5595875e26c0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5595875e2680 <col:25> 'int' lvalue Var 0x5595875e1a10 'read_status' 'int'
|           `-IntegerLiteral 0x5595875e26a0 <col:40> 'int' 1
|-AccessSpecDecl 0x5595875bad40 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5595875bad68 prev 0x55958759d858 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5595875bae60 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x5595875baf50 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5595875e2770 <col:16, line:828:9>
| |-CXXDestructorDecl 0x5595875bb040 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5595875e2780 <col:25, line:830:9>
| |-CXXMethodDecl 0x5595875bb140 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5595875bb1f0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5595875bb298 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5595875bb298
| | `-ParmVarDecl 0x5595875bb3a8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5595875bbb68 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5595875bbb68
|   `-ParmVarDecl 0x5595875bbc78 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5595875bb418 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5595875bb578 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5595875bb770 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x5595875bb620 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5595875bb698 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5595875e2960 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x5595875bba28 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5595875e27d0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5595875e2790 <col:20> 'void *' lvalue ParmVar 0x5595875bb620 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5595875bba90 '_slot' 'char *'
| | | `-CXXNewExpr 0x5595875e2858 <col:32, col:45> 'char *' array Function 0x5595871068d8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5595875e2840 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5595875e2810 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5595875bb698 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5595875bbaf0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5595875e2920 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5595875e28e0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5595875bb698 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5595875e29e0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5595875bb870 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x5595875bb040 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5595875e2a68 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5595875e2a48 <line:840:13, col:22> 'void' array Function 0x559587106c38 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5595875e2a30 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5595875e2a00 <col:22> 'char *' lvalue ->_slot 0x5595875bba90
| |         `-CXXThisExpr 0x5595875e29f0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5595875bb970 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x5595875bb140 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5595875e2c58 <col:22, line:844:9>
| |   `-CallExpr 0x5595875e2bc0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5595875e2ba8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5595875e2b88 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5595872126b8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5595875e2bf8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5595875e2ad8 <col:20> 'void *' lvalue ->_ptr 0x5595875bba28
| |     |   `-CXXThisExpr 0x5595875e2ac8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5595875e2c28 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5595875e2c10 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5595875e2b18 <col:26> 'char *' lvalue ->_slot 0x5595875bba90
| |     |     `-CXXThisExpr 0x5595875e2b08 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5595875e2c40 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5595875e2b58 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5595875bbaf0
| |         `-CXXThisExpr 0x5595875e2b48 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x5595875bba28 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5595875bba90 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5595875bbaf0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x5595875bbce8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5595875bbce8
| | `-ParmVarDecl 0x5595875bbdf8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5595875bbe98 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5595875bbe98
|   `-ParmVarDecl 0x5595875bbfa8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x5595875bc148 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x5595875bc018 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5595875bc0b8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5595875bc3e0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5595875bc5d8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5595875bc4a8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5595875bc758 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5595875e2c90 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5595875e2c70 <col:20> 'T *' lvalue ParmVar 0x5595875bc4a8 'ptr' 'T *'
|   | `-CompoundStmt 0x5595875e2ce0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5595875bc6a8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x5595875bb140 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5595875e2e90 <col:22, line:857:9>
|   |   `-CallExpr 0x5595875e2e60 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5595875e2cf0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5595872cade8 0x559587275118
|   |     |-CXXOperatorCallExpr 0x5595875e2df0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5595875e2d80 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5595874d7d98 0x5595874d79b8 0x5595874d75e8 0x5595874d7208 0x5595874d6e28 0x5595874d6a58
|   |     | `-MemberExpr 0x5595875e2d50 <col:29> 'T *' lvalue ->_ptr 0x5595875bc758
|   |     |   `-CXXThisExpr 0x5595875e2d40 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5595875e2e30 <col:35> 'T' lvalue ->_slot 0x5595875bc7b8
|   |       `-CXXThisExpr 0x5595875e2e20 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5595875bc758 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5595875bc7b8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5595875bc820 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5595875bc920 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5595875bc970 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5595875bc900 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5595875bc8e0 <col:31> 'int' 48
|-FieldDecl 0x5595875bc998 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5595875bc9f8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5595875bca58 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5595875bcb90 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5595875cfa10 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5595875cfa70 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5595875cfb20 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5595875cfd48 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5595875cfc50 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5595875cfe98 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5595875cfe08 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5595875d0168 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5595875cff58 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5595875cffd8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5595875d0080 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5595875d0378 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5595875d0230 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5595875d02a8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5595875d0448 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5595875d0598 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5595875d0500 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5595875d0928 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5595875d0658 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5595875d06d8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5595875d0780 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5595875d0838 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5595875d0b50 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5595875d0a00 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5595875d0a78 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5595875d0e68 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5595875d0c00 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5595875d0dc8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5595875d0cd8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5595875ecff0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5595875ed108 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x5595875ed198 <col:16, col:22> col:16 public
|-EnumDecl 0x5595875ed1c0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x5595875ed2c0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5595875ed510 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595875ed2a0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5595875ed280 <col:21> 'int' 0
| |-EnumConstantDecl 0x5595875ed350 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5595875ed528 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595875ed330 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x5595875ed310 <col:24> 'int' 22
| |-EnumConstantDecl 0x5595875ed3e0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5595875ed540 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595875ed3c0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x5595875ed3a0 <col:24> 'int' 34
| |-EnumConstantDecl 0x5595875ed470 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5595875ed558 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5595875ed450 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x5595875ed430 <col:25> 'int' 95
| `-EnumConstantDecl 0x5595875ed4c0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x5595875eeed0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5595875ef308 <col:7>
|-CXXConstructorDecl 0x5595875eefd8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x5595875eefd8
| `-ParmVarDecl 0x5595875ef0e8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x5595875ef188 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5595875ef298 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x559587681a80 <col:7>
`-CXXDestructorDecl 0x5595875f1448 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5595875ed588 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x5595875ed6e8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x5595875ed778 <col:32, col:38> col:32 public
|-TypedefDecl 0x5595875ed7b0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x559587108c30 'uint32_t' sugar
|   |-Typedef 0x55958701c408 'uint32_t'
|   `-TypedefType 0x559586ff5440 '__uint32_t' sugar
|     |-Typedef 0x559586ff5038 '__uint32_t'
|     `-BuiltinType 0x559586fb3410 'unsigned int'
|-CXXConstructorDecl 0x5595875ed8f8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x5595875ed820 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x5595875eedd8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5595875ef318 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5595875ee690 'base' 'int'
| | `-ImplicitCastExpr 0x5595875eee78 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5595875eee38 <col:16> 'int' lvalue ParmVar 0x5595875ed820 'b' 'int'
| `-CompoundStmt 0x5595875ef388 <col:19, line:1046:5>
|-CXXMethodDecl 0x5595875eddf0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x5595875ed9c0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x5595875eda40 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x5595875edab8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x5595875edb38 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x5595875edbf8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x5595875edc78 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x5595875ee248 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x5595875edec0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5595875ee1a8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5595875edf68 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x5595875ee008 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x5595875ee080 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5595875eedf8 <col:82> 'const ArgContext' lvalue Var 0x5595875e2eb8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5595875f02f8 <col:94, line:1067:5>
| |   |-DeclStmt 0x5595875ef518 <line:1054:9, col:64>
| |   | `-VarDecl 0x5595875ef3a8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x5595875ef4d0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x5595875ef738 <line:1055:9, col:91>
| |   | `-VarDecl 0x5595875ef548 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x5595875ef710 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x5595875ef6f0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x5595875ef6a0 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x5595875ef680 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x5595875ef628 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x5595875ef5d8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x5595875ef608 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x5595875ef668 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x5595875ef648 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x5595875ef6d0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x5595875ef898 <line:1056:9, col:27>
| |   | `-VarDecl 0x5595875ef830 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x5595875efce0 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x5595875efc10 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x5595875efb90 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5595874d2c18 0x55958731c1f8 0x55958731bed0 0x55958730d6b0 0x55958730d360 0x55958730cc50 0x5595872df5c0 0x55958726ba80
| |   | | |-CallExpr 0x5595875efad0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x5595875ef8c0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x5595875ef970 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5595875ef940 <col:19, col:23> '<bound member function type>' .begin 0x5595872fc8b8
| |   | | | |   `-DeclRefExpr 0x5595875ef920 <col:19> 'const String' lvalue ParmVar 0x5595875edf68 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x5595875ef9e0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5595875ef9b0 <col:32, col:36> '<bound member function type>' .end 0x5595872fcad0
| |   | | | |   `-DeclRefExpr 0x5595875ef990 <col:32> 'const String' lvalue ParmVar 0x5595875edf68 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x5595875efa00 <col:43> 'const bool' lvalue Var 0x5595875ef3a8 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x5595875efa68 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x5595875efa48 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x5595875efa90 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x5595875ef830 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x5595875efab0 <col:73> 'const int' lvalue Var 0x5595875ef548 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x5595875efb70 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x5595875efb40 <col:16, col:20> '<bound member function type>' .end 0x5595872fcad0
| |   | |     `-DeclRefExpr 0x5595875efb20 <col:16> 'const String' lvalue ParmVar 0x5595875edf68 'str' 'const String &'
| |   | `-BinaryOperator 0x5595875efcc0 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x5595875efc58 <col:13> 'int' lvalue ->status 0x5595875ee6f8
| |   |   | `-CXXThisExpr 0x5595875efc48 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x5595875efca8 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x5595875efc88 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5595875ed350 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x5595875eff30 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x5595875efe18 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x5595875efe00 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x5595875efde8 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x5595875efd08 <col:13> 'int' lvalue ->status 0x5595875ee6f8
| |   | | |     `-CXXThisExpr 0x5595875efcf8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x5595875efdc8 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x5595875efd98 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x5595875efd48 <col:23> 'int' lvalue ->status 0x5595875ee6f8
| |   | |   |   `-CXXThisExpr 0x5595875efd38 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x5595875efdb0 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x5595875efd78 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5595875ed3e0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x5595875eff10 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x5595875efeb0 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x5595875efe58 <col:13, col:18> '<bound member function type>' .error 0x559587595250
| |   |   | | `-DeclRefExpr 0x5595875efe38 <col:13> 'const ArgContext' lvalue ParmVar 0x5595875ee080 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x5595875efed8 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x5595875efe88 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x5595875eff00 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x5595875efef0 <col:20> 'bool' false
| |   |-DeclStmt 0x5595875f0148 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x5595875f00f0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x5595875f0080 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x5595875f02a8 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x5595875f0160 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55958729fa48
| |   | |-DeclRefExpr 0x5595875f01a8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x5595875ef830 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x5595875f0278 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x5595875f01f0 <col:64> 'V' lvalue ParmVar 0x5595875ee008 'result' 'V &'
| |   `-ReturnStmt 0x5595875f02e8 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x5595875f02d8 <col:16> 'bool' true
| `-CXXMethodDecl 0x559587687548 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x559587687320 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x5595876873f8 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x559587687460 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x5595876892e0 <col:94, line:1067:5>
|     |-DeclStmt 0x559587687d58 <line:1054:9, col:64>
|     | `-VarDecl 0x559587687b78 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x559587687ce8 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x559587687cb8 <col:36, col:55> 'const bool' lvalue Var 0x55958728ec60 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x559587687f38 <line:1055:9, col:91>
|     | `-VarDecl 0x559587687d70 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x559587687eb8 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x559587687ea0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x559587687e80 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x559587687e60 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x559587687e40 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x559587687e08 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x559587687de8 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x5595875ef608 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x559587687e28 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x5595875ef648 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x5595875ef6d0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x5595876880d0 <line:1056:9, col:27>
|     | `-VarDecl 0x559587688068 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x559587688558 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x559587688500 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x5595876883b8 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x559587688388 <col:13> '<bound member function type>' ->parse 0x5595875eddf0
|     | | | | `-CXXThisExpr 0x559587688378 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x559587688218 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5595876881e8 <col:19, col:23> '<bound member function type>' .begin 0x5595872fc8b8
|     | | | |   `-DeclRefExpr 0x5595876881c8 <col:19> 'const String' lvalue ParmVar 0x559587687320 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x559587688288 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x559587688258 <col:32, col:36> '<bound member function type>' .end 0x5595872fcad0
|     | | | |   `-DeclRefExpr 0x559587688238 <col:32> 'const String' lvalue ParmVar 0x559587687320 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x559587688428 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x559587688408 <col:43> 'const bool' lvalue Var 0x559587687b78 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x559587688310 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x5595876882f8 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x5595876882d8 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x559587688440 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x559587688338 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x559587688068 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x559587688478 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x559587688458 <col:73> 'const int' lvalue Var 0x559587687d70 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x5595876884e0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x5595876884b0 <col:16, col:20> '<bound member function type>' .end 0x5595872fcad0
|     | |     `-DeclRefExpr 0x559587688490 <col:16> 'const String' lvalue ParmVar 0x559587687320 'str' 'const String &'
|     | `-BinaryOperator 0x559587688538 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x5595875efc58 <col:13> 'int' lvalue ->status 0x5595875ee6f8
|     |   | `-CXXThisExpr 0x5595875efc48 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x559587688520 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x5595875efc88 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5595875ed350 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x5595876886d0 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x5595876885f0 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x5595876885d8 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x5595876885c0 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x5595875efd08 <col:13> 'int' lvalue ->status 0x5595875ee6f8
|     | | |     `-CXXThisExpr 0x5595875efcf8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x5595876885a0 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x559587688570 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x5595875efd48 <col:23> 'int' lvalue ->status 0x5595875ee6f8
|     | |   |   `-CXXThisExpr 0x5595875efd38 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x559587688588 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x5595875efd78 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5595875ed3e0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x5595876886b0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x559587688660 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x559587688630 <col:13, col:18> '<bound member function type>' .error 0x559587595250
|     |   | | `-DeclRefExpr 0x559587688610 <col:13> 'const ArgContext' lvalue ParmVar 0x559587687460 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x559587688688 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x5595875efe88 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x5595876886a0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x5595875efef0 <col:20> 'bool' false
|     |-DeclStmt 0x559587688c18 <line:1064:9, col:64>
|     | `-TypedefDecl 0x559587688bc0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x559587688b70 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x559587688b50 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x559587688ae0 'type'
|     |       `-ElaboratedType 0x559587688a90 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x559587688a70 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x55958728edb8 'unsigned_type'
|     |           `-BuiltinType 0x559586fb3410 'unsigned int'
|     |-CallExpr 0x559587689270 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x559587689258 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x5595876891d8 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x5595876890b8 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x55958729fa48 'extract_integer')
|     | |-ImplicitCastExpr 0x5595876892b8 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x5595876892a0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x559587688c78 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x559587688068 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x559587688d48 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x559587688cf8 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x5595876873f8 'result' 'unsigned int &'
|     `-ReturnStmt 0x5595876892d0 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x5595875f02d8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x5595875ee608 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x5595875ee2b8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5595875ee568 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5595875ee368 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x5595875ee408 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x5595875ee480 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5595875eee18 <col:71> 'const ArgContext' lvalue Var 0x5595875e2eb8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5595875f0a68 <col:83, line:1083:5>
| |   |-DeclStmt 0x5595875f03c0 <line:1071:9, col:12>
| |   | `-VarDecl 0x5595875f0358 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x5595875f0a40 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5595875f0650 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x5595875f04d8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x5595875f04a0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x5595875f03e8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x5595875f0440 <col:31> 'const String' lvalue ParmVar 0x5595875ee368 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5595875f0460 <col:36> 'V' lvalue Var 0x5595875f0358 'x' 'V'
| |     | |   `-DeclRefExpr 0x5595875f0480 <col:39> 'const ArgContext' lvalue ParmVar 0x5595875ee480 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5595875f0630 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5595875f0610 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5595875f05f8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5595875f05e0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5595875f0500 <col:17> 'int' lvalue ->status 0x5595875ee6f8
| |     |     |     `-CXXThisExpr 0x5595875f04f0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x5595875f05c0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5595875f0590 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5595875f0540 <col:27> 'int' lvalue ->status 0x5595875ee6f8
| |     |       |   `-CXXThisExpr 0x5595875f0530 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5595875f05a8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5595875f0570 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5595875ed3e0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5595875f0680 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5595875f0670 <col:20> 'bool' false
| |     `-IfStmt 0x5595875f0a18 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5595875f0720 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5595875f06f0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5595875f06a0 <col:18> 'int' lvalue ->status 0x5595875ee6f8
| |       | |   `-CXXThisExpr 0x5595875f0690 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5595875f0708 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x5595875f06d0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5595875ed3e0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5595875f0958 <col:42, line:1079:9>
| |       | |-CallExpr 0x5595875f0900 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x5595875f0750 <line:1076:13> '<bound member function type>' ->range_error 0x5595875eed08
| |       | | | `-CXXThisExpr 0x5595875f0740 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5595875f0780 <col:25> 'const ArgContext' lvalue ParmVar 0x5595875ee480 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x5595875f0860 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x5595875f08d8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x5595875f08b8 <col:43> 'V' lvalue Var 0x5595875f0358 'x' 'V'
| |       | `-ReturnStmt 0x5595875f0948 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5595875f0938 <col:20> 'bool' false
| |       `-CompoundStmt 0x5595875f09f8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x5595875f09b8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x5595875f0978 <col:13> 'V' lvalue ParmVar 0x5595875ee408 'result' 'V &'
| |         | `-DeclRefExpr 0x5595875f0998 <col:22> 'V' lvalue Var 0x5595875f0358 'x' 'V'
| |         `-ReturnStmt 0x5595875f09e8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x5595875f09d8 <col:20> 'bool' true
| `-CXXMethodDecl 0x559587686f08 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x559587686ce0 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x559587686db8 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x559587686e20 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x559587687b58 <col:83, line:1083:5>
|     |-DeclStmt 0x559587687190 <line:1071:9, col:12>
|     | `-VarDecl 0x559587687128 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x559587687b30 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x5595876877c0 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x5595876876e8 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x5595876876b0 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x559587687668 <col:14> '<bound member function type>' ->parse_saturating 0x559587687548
|       | |   | `-CXXThisExpr 0x559587687658 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x559587687200 <col:31> 'const String' lvalue ParmVar 0x559587686ce0 'str' 'const String &'
|       | |   |-DeclRefExpr 0x559587687220 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x559587687128 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x559587687240 <col:39> 'const ArgContext' lvalue ParmVar 0x559587686e20 'args' 'const ArgContext &'
|       | `-ParenExpr 0x5595876877a0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x559587687780 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x559587687768 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x559587687750 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x5595875f0500 <col:17> 'int' lvalue ->status 0x5595875ee6f8
|       |     |     `-CXXThisExpr 0x5595875f04f0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x559587687730 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x559587687700 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x5595875f0540 <col:27> 'int' lvalue ->status 0x5595875ee6f8
|       |       |   `-CXXThisExpr 0x5595875f0530 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x559587687718 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x5595875f0570 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5595875ed3e0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x5595876877e0 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x5595875f0670 <col:20> 'bool' false
|       `-IfStmt 0x559587687b08 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x559587687820 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x5595876877f0 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x5595875f06a0 <col:18> 'int' lvalue ->status 0x5595875ee6f8
|         | |   `-CXXThisExpr 0x5595875f0690 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x559587687808 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x5595875f06d0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5595875ed3e0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x559587687a40 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x5595876879b0 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x5595875f0750 <line:1076:13> '<bound member function type>' ->range_error 0x5595875eed08
|         | | | `-CXXThisExpr 0x5595875f0740 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x559587687840 <col:25> 'const ArgContext' lvalue ParmVar 0x559587686e20 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x559587687a18 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x5595876879e8 <col:31, col:50> 'const bool' lvalue Var 0x55958728ec60 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x559587687988 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x559587687970 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x559587687958 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x559587687938 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x559587687128 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x559587687a30 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x5595875f0938 <col:20> 'bool' false
|         `-CompoundStmt 0x559587687ae8 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x559587687ab8 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x559587687a60 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x559587686db8 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x559587687aa0 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x559587687a80 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x559587687128 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x559587687ad8 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x5595875f09d8 <col:20> 'bool' true
|-FieldDecl 0x5595875ee690 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x5595875ee6f8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x5595875ee748 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x5595875eea00 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x5595875ee788 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x5595875ee808 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x5595875ee880 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x5595875ee900 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x5595875eed08 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x5595875eead0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x5595875eeb48 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x5595875eebe0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x5595875f12c8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x5595875f12c8
| `-ParmVarDecl 0x5595875f13d8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x5595875f1558 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5595875f1668 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x559587681a90 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x559587681a60 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x559587681a30 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x559587681a00 <col:7> 'IntArg' lvalue ParmVar 0x5595875f1668 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5595875ee690 'base' 'int'
| | `-ImplicitCastExpr 0x559587681b88 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x559587681b58 <col:7> 'int' xvalue .base 0x5595875ee690
| |     `-CXXStaticCastExpr 0x559587681b28 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x559587681af8 <col:7> 'IntArg' lvalue ParmVar 0x5595875f1668 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5595875ee6f8 'status' 'int'
| | `-ImplicitCastExpr 0x559587681c58 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x559587681c28 <col:7> 'int' xvalue .status 0x5595875ee6f8
| |     `-CXXStaticCastExpr 0x559587681bf8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x559587681bc8 <col:7> 'IntArg' lvalue ParmVar 0x5595875f1668 '' 'IntArg &&'
| `-CompoundStmt 0x559587681cb0 <col:7>
`-CXXDestructorDecl 0x559587680bf0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5595875f5860 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x5595875f5ab8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x559587680b18 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x559587681090 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x559587681070 <<invalid sloc>> 'int'
| `-CompoundStmt 0x559587681100 <col:19>
|-CXXConstructorDecl 0x559587680cf8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x559587680cf8
| `-ParmVarDecl 0x559587680e08 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x559587680ea8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x559587680fb8 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x559587681cc0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5595876819e0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5595876819b0 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x559587681980 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x559587680fb8 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x559587681d30 <col:19>
`-CXXDestructorDecl 0x559587681140 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
