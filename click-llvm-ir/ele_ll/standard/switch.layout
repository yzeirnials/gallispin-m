
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d1d93ecbf8 prev 0x55d1d93e4398 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d1d93eccf0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55d1d93ecd80 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55d1d93ecdf8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55d1d93eceb8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55d1d93ecf80 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55d1d93ed0f8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55d1d93ed030 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55d1d93ed1a0 <col:24>
| `-OptimizeNoneAttr 0x55d1d93ed1f8 <col:34>
|-CXXMethodDecl 0x55d1d93ed240 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55d1d93ed4f8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55d1d93ed2f0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55d1d93ed368 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55d1d93ed3e8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55d1d93ed5b0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55d1d93ed5e8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55d1d93ed650 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55d1d93ed6d8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55d1d93ed9f8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55d1d93ed790 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55d1d93ed808 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55d1d93ed880 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55d1d93ed900 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55d1d93edb10 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55d1d93f5488 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55d1d93f5488
| `-ParmVarDecl 0x55d1d93f5598 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55d1d93f5638 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55d1d93f5638
| `-ParmVarDecl 0x55d1d93f5748 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55d1d94c3ea8 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d1d93dfc10 prev 0x55d1d93df990 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55d1d93dfd08 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55d1d93dfd98 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55d1d93dfdf8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55d1d93dfee8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55d1d93dffe8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55d1d93e01b8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55d1d93e0068 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55d1d93e00e0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55d1d93e0348 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55d1d93e0280 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55d1d93e03f0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55d1d93e0528 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55d1d93e0460 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55d1d93e06c8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55d1d93e0608 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55d1d93e0868 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55d1d93e07a8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55d1d93e0910 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55d1d93e0a10 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55d1d93e0af0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93e09f0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55d1d93e09d0 <col:26> 'int' 1
| `-EnumConstantDecl 0x55d1d93e0aa0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55d1d93e0b08 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d1d93e0a80 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55d1d93e0a60 <col:44> 'int' 2
|-CXXMethodDecl 0x55d1d93e0c50 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55d1d93e0b38 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55d1d93e0bb8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55d1d93e0da8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55d1d93e0d18 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55d1d93e0fe8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55d1d93e0e68 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55d1d93e0ee0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55d1d93e1098 <col:20>
| `-OptimizeNoneAttr 0x55d1d93e10f0 <col:30>
|-CXXMethodDecl 0x55d1d93e11f8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55d1d93e1130 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55d1d93e12a0 <col:20>
| `-OptimizeNoneAttr 0x55d1d93e12f8 <col:30>
|-CXXMethodDecl 0x55d1d93e1348 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55d1d93e1410 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55d1d93e1528 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55d1d93e15b0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55d1d93e1638 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55d1d93e16c0 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x55d1d93e1748 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55d1d93e17d8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55d1d93e1898 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55d1d93e1920 <line:63:5, col:28> col:23 used PUSH 'const char []' static
|-VarDecl 0x55d1d93e19a8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55d1d93e1a30 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55d1d93e1ab8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55d1d93e1b40 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55d1d93e1bd0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55d1d93e1c90 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55d1d93e1d20 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55d1d93e1e70 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55d1d93e1dd8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55d1d93e2000 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55d1d93e1f30 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55d1d93e22b0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55d1d93e20b8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55d1d93e2138 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55d1d93e21b8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55d1d93e2368 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55d1d93e2470 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55d1d93e2700 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93e2450 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55d1d93e2430 <col:33> 'int' 0
| |-EnumConstantDecl 0x55d1d93e2500 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55d1d93e2718 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93e24e0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55d1d93e24c0 <col:32> 'int' 20
| |-EnumConstantDecl 0x55d1d93e2590 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55d1d93e2730 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93e2570 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55d1d93e2550 <col:38> 'int' 90
| |-EnumConstantDecl 0x55d1d93e2620 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55d1d93e2748 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93e2600 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55d1d93e25e0 <col:35> 'int' 100
| `-EnumConstantDecl 0x55d1d93e26b0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55d1d93e2760 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d1d93e2690 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55d1d93e2670 <col:32> 'int' 2000
|-CXXMethodDecl 0x55d1d93e27a0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55d1d93e2be0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55d1d93e2a50 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55d1d93e2ac8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d1d93e2cb0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55d1d93e2e30 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55d1d93e2d60 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d1d93e3038 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55d1d93e2ee8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55d1d93e2f60 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d1d93e3138 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55d1d93e31d8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55d1d93e32a0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d1d93e3330 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55d1d93e3560 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93e3310 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55d1d93e32f0 <col:36> 'int' EnumConstant 0x55d1d93e32a0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d1d93e3380 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d1d93e33d0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d1d93e3420 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d1d93e3470 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d1d93e34c0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55d1d93e3510 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55d1d93e3648 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55d1d93e3588 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55d1d93e3710 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55d1d93e37d0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55d1d93e3890 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55d1d93e3950 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55d1d93e3a68 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55d1d93e3b30 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55d1d93e3cb0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55d1d93e3be0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55d1d93e3dd8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55d1d93e3fd8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55d1d93e3e88 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55d1d93e3f08 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55d1d93f1928 <col:54, line:127:5>
|   |-ParenExpr 0x55d1d93f17d8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55d1d93f17a8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55d1d93f1498 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55d1d93f1470 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55d1d93f1458 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55d1d93f1440 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55d1d93f1410 <col:31> 'Router *' lvalue ->_router 0x55d1d93ef2f0
|   |   |         `-CXXThisExpr 0x55d1d93f1400 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55d1d93f14f8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d1d93f14d8 <col:48> 'int' 0
|   |   `-CallExpr 0x55d1d93f1708 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55d1d93f16f0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d1d93f16d0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d1d8f1a2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d1d93f1748 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93f1568 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55d1d93f1760 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93f1588 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55d1d93f1778 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d1d93f15c0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55d1d93f1790 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d1d93f16b8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d1d93f16a0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d1d93f1658 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55d1d93f1870 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55d1d93f1808 <col:9> 'Router *' lvalue ->_router 0x55d1d93ef2f0
|   | | `-CXXThisExpr 0x55d1d93f17f8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55d1d93f1858 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55d1d93f1838 <col:19> 'Router *' lvalue ParmVar 0x55d1d93e3e88 'r' 'Router *'
|   `-BinaryOperator 0x55d1d93f1908 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55d1d93f18a0 <col:9> 'int' lvalue ->_eindex 0x55d1d93ef358
|     | `-CXXThisExpr 0x55d1d93f1890 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55d1d93f18f0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55d1d93f18d0 <col:19> 'int' lvalue ParmVar 0x55d1d93e3f08 'eindex' 'int'
|-CXXMethodDecl 0x55d1d93e4160 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55d1d93e4098 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55d1d93e4230 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55d1d93e42f8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55d1d93e4398 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55d1d93e45e8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55d1d93e4460 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55d1d93e44e0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55d1d93e4698 <col:20>
| `-OptimizeNoneAttr 0x55d1d93e46f0 <col:30>
|-CXXMethodDecl 0x55d1d93e47f8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55d1d93e4730 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55d1d93e48a0 <col:20>
| `-OptimizeNoneAttr 0x55d1d93e48f8 <col:30>
|-CXXMethodDecl 0x55d1d93e49c8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55d1d93e4938 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55d1d93e4a70 <col:20>
| `-OptimizeNoneAttr 0x55d1d93e4ac8 <col:30>
|-CXXMethodDecl 0x55d1d93e4c58 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55d1d93e4b00 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55d1d93e4b80 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55d1d93e4de8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55d1d93e4d20 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55d1d93e4f38 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55d1d93e4ea8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55d1d93e5088 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55d1d93e4ff8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55d1d93e51d8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55d1d93e5148 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55d1d93e5498 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55d1d93e5290 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55d1d93e5310 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55d1d93e53b8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55d1d93e5570 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55d1d93e5630 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55d1d93e5900 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55d1d93e57b0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55d1d93e5828 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55d1d93e5a28 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55d1d93e5c00 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55d1d93e5ae0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55d1d93e5b60 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55d1d93e5de8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55d1d93e5cc8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55d1d93e5d48 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55d1d93e6158 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55d1d93e5ea8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55d1d93e5f20 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55d1d93e5fa0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55d1d93f0f10 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55d1d93f0ef0 <col:106> 'int' 0
| `-ParmVarDecl 0x55d1d93e6018 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d1d93f0f48 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d1d93f0f28 <col:126> 'int' 0
|-CXXMethodDecl 0x55d1d93e64f8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55d1d93e6228 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55d1d93e62c0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55d1d93e6340 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55d1d93e63b8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d1d93f0f80 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d1d93f0f60 <col:114> 'int' 0
|-CXXMethodDecl 0x55d1d93e6888 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55d1d93e65d0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55d1d93e6648 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55d1d93e66c8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55d1d93f0f98 <col:96> 'int' 0
| `-ParmVarDecl 0x55d1d93e6740 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d1d93f0fd8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d1d93f0fb8 <col:116> 'int' 0
|-CXXMethodDecl 0x55d1d93e6c08 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55d1d93e6958 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55d1d93e69d0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55d1d93e6a50 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55d1d93f1010 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55d1d93f0ff0 <col:109> 'int' 0
| `-ParmVarDecl 0x55d1d93e6ac8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d1d93f1048 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d1d93f1028 <col:129> 'int' 0
|-CXXMethodDecl 0x55d1d93e6f88 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55d1d93e6cd8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55d1d93e6d50 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55d1d93e6dd0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55d1d93e6e48 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d1d93f1080 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d1d93f1060 <col:117> 'int' 0
|-CXXMethodDecl 0x55d1d93e7318 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55d1d93e7060 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d1d93e70d8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55d1d93e7158 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55d1d93f1098 <col:99> 'int' 0
| `-ParmVarDecl 0x55d1d93e71d0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d1d93f10d8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d1d93f10b8 <col:119> 'int' 0
|-CXXMethodDecl 0x55d1d93e7738 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55d1d93e73e8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55d1d93e7468 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55d1d93e74e0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55d1d93e7560 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55d1d93f1110 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55d1d93f10f0 <col:108> 'int' 0
| `-ParmVarDecl 0x55d1d93e75e0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55d1d93f1148 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55d1d93f1128 <col:141> 'int' 0
|-CXXMethodDecl 0x55d1d93e7b58 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55d1d93e7810 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55d1d93e7890 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55d1d93e7908 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55d1d93e7988 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55d1d93e7a08 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55d1d93f1160 <col:121> 'int' 0
|-CXXMethodDecl 0x55d1d93e7f88 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55d1d93e7c38 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55d1d93e7cb8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55d1d93e7d30 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55d1d93e7db0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55d1d93f1180 <col:98> 'int' 0
| `-ParmVarDecl 0x55d1d93e7e30 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55d1d93f11a0 <col:123> 'int' 0
|-CXXMethodDecl 0x55d1d93e8250 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55d1d93e8060 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55d1d93e80e0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55d1d93e8160 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55d1d93f11c0 <col:80> 'int' 0
|-EnumDecl 0x55d1d93e8308 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55d1d93e8410 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55d1d93e86a0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93e83f0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55d1d93e83d0 <col:42> 'int' 1
| |-EnumConstantDecl 0x55d1d93e84a0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55d1d93e86b8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93e8480 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55d1d93e8460 <col:40> 'int' 2
| |-EnumConstantDecl 0x55d1d93e8530 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55d1d93e86d0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93e8510 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55d1d93e84f0 <col:44> 'int' 4
| |-EnumConstantDecl 0x55d1d93e85c0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55d1d93e86e8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93e85a0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55d1d93e8580 <col:36> 'int' 7
| `-EnumConstantDecl 0x55d1d93e8650 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55d1d93e8700 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d1d93e8630 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55d1d93e8610 <col:34> 'int' 6
|-CXXMethodDecl 0x55d1d93e89b8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55d1d93e8728 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55d1d93e87c8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55d1d93e8848 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55d1d93e88c0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55d1d93f1278 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55d1d93f1260 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55d1d93f1248 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55d1d93f1228 <col:98, col:105> 'String' (CXXTemporary 0x55d1d93f1228)
|           `-CXXTemporaryObjectExpr 0x55d1d93f11f0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55d1d93e8c58 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55d1d93e8a88 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55d1d93e8b00 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55d1d93e8b78 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55d1d93f1328 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55d1d93f1310 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55d1d93f12f8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55d1d93f12d8 <col:94, col:101> 'String' (CXXTemporary 0x55d1d93f12d8)
| |         `-CXXTemporaryObjectExpr 0x55d1d93f12a0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55d1d93f1b10 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55d1d93f1a88 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55d1d93f1a58 <col:9> '<bound member function type>' ->add_task_handlers 0x55d1d93e89b8
|     | `-CXXThisExpr 0x55d1d93f1a48 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55d1d93f1ac8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55d1d93f19c8 <col:27> 'Task *' lvalue ParmVar 0x55d1d93e8a88 'task' 'Task *'
|     |-ImplicitCastExpr 0x55d1d93f1ae0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55d1d93f19e8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55d1d93e8b00 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55d1d93f1af8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55d1d93f1a08 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55d1d93e8650 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55d1d93f1a28 <col:62> 'const String' lvalue ParmVar 0x55d1d93e8b78 'prefix' 'const String &'
|-CXXMethodDecl 0x55d1d93e8e68 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55d1d93e8d20 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55d1d93e8d98 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55d1d93f13d8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55d1d93f13c0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55d1d93f13a8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55d1d93f1388 <col:70, col:77> 'String' (CXXTemporary 0x55d1d93f1388)
| |         `-CXXTemporaryObjectExpr 0x55d1d93f1350 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55d1d93f1ce8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55d1d93f1c60 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55d1d93f1c30 <col:9> '<bound member function type>' ->add_task_handlers 0x55d1d93e89b8
|     | `-CXXThisExpr 0x55d1d93f1c20 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55d1d93f1ca0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55d1d93f1ba0 <col:27> 'Task *' lvalue ParmVar 0x55d1d93e8d20 'task' 'Task *'
|     |-ImplicitCastExpr 0x55d1d93f1cb8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55d1d93f1bc0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55d1d93f1cd0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55d1d93f1be0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55d1d93e8650 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55d1d93f1c00 <col:57> 'const String' lvalue ParmVar 0x55d1d93e8d98 'prefix' 'const String &'
|-CXXMethodDecl 0x55d1d93e9148 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55d1d93e8f30 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d1d93e8fb0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d1d93e9028 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55d1d93e93f8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55d1d93e9218 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d1d93e9298 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d1d93e9318 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55d1d93e96e8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55d1d93e94c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d1d93e9548 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d1d93e95c0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55d1d93e9998 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55d1d93e97b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d1d93e9838 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d1d93e98b8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55d1d93e9c48 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55d1d93e9a68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d1d93e9ae8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d1d93e9b68 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55d1d93e9ef8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55d1d93e9d18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d1d93e9d98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d1d93e9e10 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55d1d93ea1a8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55d1d93e9fc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d1d93ea048 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d1d93ea0c8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55d1d93ea4b8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55d1d93ea2d0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d1d93ea350 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d1d93ea3d0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55d1d93ea798 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55d1d93ea588 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d1d93ea608 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d1d93ea6b0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55d1d93eaa78 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55d1d93ea868 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d1d93ea8e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d1d93ea990 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55d1d93eace0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55d1d93eab48 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55d1d93eabc8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55d1d93eac40 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55d1d93eaf88 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55d1d93eadb0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55d1d93eae30 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55d1d93eaea8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55d1d93eb238 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55d1d93eb058 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d1d93eb0d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d1d93eb158 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55d1d93eb4e8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55d1d93eb308 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d1d93eb388 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d1d93eb400 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55d1d93eb798 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55d1d93eb5b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d1d93eb638 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d1d93eb6b0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55d1d93eba68 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55d1d93eb868 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d1d93eb8e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d1d93eb988 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55d1d93ebd98 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55d1d93ebb38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d1d93ebbb8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55d1d93ebc30 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55d1d93ebca8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d1d93f13f0 <col:93> 'bool' false
|-CXXMethodDecl 0x55d1d93ebf80 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55d1d93ebe68 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55d1d93ebee8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55d1d93ec158 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55d1d93ec040 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55d1d93ec0c0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55d1d93ec438 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55d1d93ec218 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55d1d93ec290 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55d1d93ec310 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55d1d93ec388 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55d1d93ec728 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55d1d93ec508 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55d1d93ec580 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55d1d93ec600 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55d1d93ec678 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55d1d93ec960 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55d1d93ec800 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55d1d93ec880 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55d1d93ecb48 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55d1d93eca28 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55d1d93ecaa8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55d1d93ecbf8 prev 0x55d1d93e4398 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55d1d93eccf0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55d1d93ecd80 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55d1d93ecdf8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55d1d93eceb8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55d1d93ecf80 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55d1d93ed0f8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55d1d93ed030 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55d1d93ed1a0 <col:24>
| | `-OptimizeNoneAttr 0x55d1d93ed1f8 <col:34>
| |-CXXMethodDecl 0x55d1d93ed240 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55d1d93ed4f8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55d1d93ed2f0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55d1d93ed368 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55d1d93ed3e8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55d1d93ed5b0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55d1d93ed5e8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55d1d93ed650 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55d1d93ed6d8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55d1d93ed9f8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55d1d93ed790 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55d1d93ed808 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55d1d93ed880 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55d1d93ed900 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55d1d93edb10 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55d1d93f5488 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55d1d93f5488
| | `-ParmVarDecl 0x55d1d93f5598 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55d1d93f5638 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55d1d93f5638
| | `-ParmVarDecl 0x55d1d93f5748 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55d1d94c3ea8 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55d1d93edb88 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55d1d93edc28 <col:38> "" ""
|-CXXMethodDecl 0x55d1d93edcb8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55d1d93edd58 <col:44> "" ""
|-AccessSpecDecl 0x55d1d93eddc8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55d1d93eddf0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55d1d93edef0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55d1d93edf40 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d1d93eded0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55d1d93edeb0 <col:27> 'int' 4
|-FieldDecl 0x55d1d93edff8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55d1d93ee1a8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55d1d93ee260 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55d1d93ef2f0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55d1d93ef358 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55d1d93ef4a8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55d1d93ef3e8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55d1d93ef658 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55d1d93ef568 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55d1d93ef838 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55d1d93ef718 <col:20> col:23 'int'
| `-ParmVarDecl 0x55d1d93ef798 <col:25> col:28 'int'
|-CXXMethodDecl 0x55d1d93efae0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55d1d93ef900 <col:23> col:26 'int'
| |-ParmVarDecl 0x55d1d93ef980 <col:28> col:31 'int'
| `-ParmVarDecl 0x55d1d93ef9f8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55d1d93efb98 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55d1d93efc60 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55d1d93efcb0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55d1d93efd00 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55d1d93efee0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55d1d93efd90 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55d1d93efe08 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d1d93f0188 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55d1d93effa8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55d1d93f0028 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55d1d93f00a0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55d1d93f03a8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55d1d93f0258 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55d1d93f02d8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55d1d93f06e0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55d1d93f0468 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55d1d93f04e8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55d1d93f0560 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55d1d93f05e0 <col:57> col:60 'int'
|-CXXMethodDecl 0x55d1d93f08c8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55d1d93f07b0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55d1d93f0830 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55d1d93f0a18 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55d1d93f0988 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55d1d93f0d98 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55d1d93f0ad8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55d1d93f0b58 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55d1d93f0bd0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55d1d93f0c50 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55d1d93f0eb0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class Switch
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _output
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d1d93f85f8 <../elements/standard/switch.hh:38:1, line:61:1> line:38:7 class Switch definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55d1d93f8758 <col:1, col:7> col:7 implicit referenced class Switch
|-AccessSpecDecl 0x55d1d93f87e8 <col:33, col:39> col:33 public
|-CXXConstructorDecl 0x55d1d93f8870 <line:40:3, col:10> col:3 Switch 'void ()'
|-CXXMethodDecl 0x55d1d93f8970 <line:42:3, col:53> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55d1d93e1348 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55d1d93fa0e8 <col:34, col:53>
|   `-ReturnStmt 0x55d1d93fa0d8 <col:36, col:43>
|     `-ImplicitCastExpr 0x55d1d93fa0c0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55d1d93fa0a0 <col:43> 'const char [7]' lvalue "Switch"
|-CXXMethodDecl 0x55d1d93f8a38 <line:43:3, col:50> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55d1d93e1410 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55d1d93fa148 <col:34, col:50>
|   `-ReturnStmt 0x55d1d93fa138 <col:36, col:43>
|     `-ImplicitCastExpr 0x55d1d93fa120 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55d1d93fa100 <col:43> 'const char [4]' lvalue "1/-"
|-CXXMethodDecl 0x55d1d93f8b00 <line:44:3, col:49> col:15 processing 'const char *() const'
| |-Overrides: [ 0x55d1d93e17d8 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x55d1d93fa1a8 <col:34, col:49>
|   `-ReturnStmt 0x55d1d93fa198 <col:36, col:43>
|     `-ImplicitCastExpr 0x55d1d93fa180 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55d1d93fa160 <col:43> 'const char []' lvalue Var 0x55d1d93e1920 'PUSH' 'const char []'
|-CXXMethodDecl 0x55d1d93f8bc0 <line:45:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x55d1d93e2cb0 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x55d1d93f8e90 <line:47:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55d1d93e2be0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55d1d93f8d40 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x55d1d93f8db8 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x55d1d93f8f60 <line:48:3, col:52> col:8 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x55d1d93e5630 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x55d1d93fa1e0 <col:37, col:52>
|   `-ReturnStmt 0x55d1d93fa1d0 <col:39, col:46>
|     `-CXXBoolLiteralExpr 0x55d1d93fa1c0 <col:46> 'bool' true
|-CXXMethodDecl 0x55d1d93f9128 <line:50:3, col:26> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x55d1d93e01b8 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x55d1d93f9018 <col:13> col:16 'int'
| `-ParmVarDecl 0x55d1d93f9090 <col:18, col:25> col:26 'Packet *'
|-CXXMethodDecl 0x55d1d93f9310 <line:52:3, col:29> col:7 llrpc 'int (unsigned int, void *)'
| |-Overrides: [ 0x55d1d93ec960 Element::llrpc 'int (unsigned int, void *)' ]
| |-ParmVarDecl 0x55d1d93f91f0 <col:13> col:21 'unsigned int'
| `-ParmVarDecl 0x55d1d93f9270 <col:23, col:28> col:29 'void *'
|-AccessSpecDecl 0x55d1d93f93c0 <line:54:2, col:9> col:2 private
|-FieldDecl 0x55d1d93f9400 <line:56:3, col:7> col:7 _output 'int'
|-CXXMethodDecl 0x55d1d93f9578 <line:58:3, col:45> col:17 read_param 'String (Element *, void *)' static
| |-ParmVarDecl 0x55d1d93f9460 <col:28, col:36> col:37 'Element *'
| `-ParmVarDecl 0x55d1d93f94e0 <col:39, col:44> col:45 'void *'
|-CXXMethodDecl 0x55d1d93f9858 <line:59:3, col:75> col:14 write_param 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55d1d93f9638 <col:26, col:39> col:40 'const String &'
| |-ParmVarDecl 0x55d1d93f96b0 <col:42, col:50> col:51 'Element *'
| |-ParmVarDecl 0x55d1d93f9730 <col:53, col:58> col:59 'void *'
| `-ParmVarDecl 0x55d1d93f97a8 <col:61, col:74> col:75 'ErrorHandler *'
|-CXXConstructorDecl 0x55d1d93f9948 <line:38:7> col:7 implicit Switch 'void (const Switch &)' inline default_delete noexcept-unevaluated 0x55d1d93f9948
| `-ParmVarDecl 0x55d1d93f9a58 <col:7> col:7 'const Switch &'
|-CXXConstructorDecl 0x55d1d93f9af8 <col:7> col:7 implicit Switch 'void (Switch &&)' inline default_delete noexcept-unevaluated 0x55d1d93f9af8
| `-ParmVarDecl 0x55d1d93f9c08 <col:7> col:7 'Switch &&'
|-CXXMethodDecl 0x55d1d93f9ca8 <col:7> col:7 implicit operator= 'Switch &(const Switch &)' inline default_delete noexcept-unevaluated 0x55d1d93f9ca8
| `-ParmVarDecl 0x55d1d93f9db8 <col:7> col:7 'const Switch &'
|-CXXMethodDecl 0x55d1d93f9e28 <col:7> col:7 implicit operator= 'Switch &(Switch &&)' inline default_delete noexcept-unevaluated 0x55d1d93f9e28
| `-ParmVarDecl 0x55d1d93f9f38 <col:7> col:7 'Switch &&'
`-CXXDestructorDecl 0x55d1d93f9fc0 <col:7> col:7 implicit ~Switch 'void ()' inline default noexcept-unevaluated 0x55d1d93f9fc0
  `-Overrides: [ 0x55d1d93dfee8 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.Switch = type { %class.Element.base, i32 }
  NonVirtualBaseLLVMType:%class.Switch = type { %class.Element.base, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d1d91b2aa0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55d1d91b2bb8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55d1d91b2c58 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55d1d91b2cb8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55d1d91b2d18 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55d1d91b2dc8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d1d91b30d0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d1d91b31e8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55d1d91b3290 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55d1d91b32f8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55d1d91b3388 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55d1d91b9420 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55d1d91b9858 <col:12>
|-CXXConstructorDecl 0x55d1d91b9528 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d1d91b9638 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55d1d91b3290 'data' 'const char *'
| | `-ImplicitCastExpr 0x55d1d91bbde0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55d1d91bbdb0 <col:12> 'const char *const' lvalue .data 0x55d1d91b3290
| |     `-DeclRefExpr 0x55d1d91bbd90 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d1d91b9638 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55d1d91b32f8 'length' 'int'
| | `-ImplicitCastExpr 0x55d1d91bbe70 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55d1d91bbe40 <col:12> 'const int' lvalue .length 0x55d1d91b32f8
| |     `-DeclRefExpr 0x55d1d91bbe20 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d1d91b9638 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55d1d91b3388 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55d1d91bbf00 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55d1d91bbed0 <col:12> 'String::memo_t *const' lvalue .memo 0x55d1d91b3388
| |     `-DeclRefExpr 0x55d1d91bbeb0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d1d91b9638 '' 'const String::rep_t &'
| `-CompoundStmt 0x55d1d91bbf58 <col:12>
|-CXXConstructorDecl 0x55d1d91b96d8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55d1d91b96d8
| `-ParmVarDecl 0x55d1d91b97e8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55d1d91bed40 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55d1d91ca758 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d1d91ca868 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55d1d91cad80 <col:12>
|   |-BinaryOperator 0x55d1d91cab98 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55d1d91cab50 <col:12> 'const char *' lvalue ->data 0x55d1d91b3290
|   | | `-CXXThisExpr 0x55d1d91cab40 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55d1d91cab80 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55d1d91cab10 <col:12> 'const char *const' lvalue .data 0x55d1d91b3290
|   |     `-DeclRefExpr 0x55d1d91caaf0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d1d91ca868 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55d1d91cac60 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55d1d91cac18 <col:12> 'int' lvalue ->length 0x55d1d91b32f8
|   | | `-CXXThisExpr 0x55d1d91cac08 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55d1d91cac48 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55d1d91cabd8 <col:12> 'const int' lvalue .length 0x55d1d91b32f8
|   |     `-DeclRefExpr 0x55d1d91cabb8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d1d91ca868 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55d1d91cad28 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55d1d91cace0 <col:12> 'String::memo_t *' lvalue ->memo 0x55d1d91b3388
|   | | `-CXXThisExpr 0x55d1d91cacd0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55d1d91cad10 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55d1d91caca0 <col:12> 'String::memo_t *const' lvalue .memo 0x55d1d91b3388
|   |     `-DeclRefExpr 0x55d1d91cac80 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d1d91ca868 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55d1d91cad70 <col:12>
|     `-UnaryOperator 0x55d1d91cad58 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d1d91cad48 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55d1d91ca8d8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55d1d91ca8d8
  `-ParmVarDecl 0x55d1d91ca9e8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d1d91aa010 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55d1d91aa128 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55d1d91aa1b8 <col:16, col:22> col:16 public
|-TypedefDecl 0x55d1d91aa1f8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55d1d8e7efd0 'const char *'
|   `-QualType 0x55d1d8e7e521 'const char' const
|     `-BuiltinType 0x55d1d8e7e520 'char'
|-TypedefDecl 0x55d1d91aa280 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55d1d91aa250 'String::const_iterator' sugar
|   |-Typedef 0x55d1d91aa1f8 'const_iterator'
|   `-PointerType 0x55d1d8e7efd0 'const char *'
|     `-QualType 0x55d1d8e7e521 'const char' const
|       `-BuiltinType 0x55d1d8e7e520 'char'
|-TypedefDecl 0x55d1d91aa3f0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55d1d91aa360 'int (String::*)() const'
|   |-RecordType 0x55d1d91aa0a0 'String'
|   | `-CXXRecord 0x55d1d91aa010 'String'
|   `-ParenType 0x55d1d91aa300 'int () const' sugar
|     `-FunctionProtoType 0x55d1d917eea0 'int () const' const cdecl
|       `-BuiltinType 0x55d1d8e7e580 'int'
|-TypedefDecl 0x55d1d91aa458 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55d1d8fd3aa0 'int64_t' sugar
|   |-Typedef 0x55d1d8ee7390 'int64_t'
|   `-TypedefType 0x55d1d8ec0630 '__int64_t' sugar
|     |-Typedef 0x55d1d8ec0208 '__int64_t'
|     `-BuiltinType 0x55d1d8e7e5a0 'long'
|-TypedefDecl 0x55d1d91aa4c0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55d1d8fd39c0 'uint64_t' sugar
|   |-Typedef 0x55d1d8ee7530 'uint64_t'
|   `-TypedefType 0x55d1d8ec06c0 '__uint64_t' sugar
|     |-Typedef 0x55d1d8ec0278 '__uint64_t'
|     `-BuiltinType 0x55d1d8e7e640 'unsigned long'
|-TypedefDecl 0x55d1d91aa550 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55d1d91aa520 'String::intmax_t' sugar
|   |-Typedef 0x55d1d91aa458 'intmax_t'
|   `-TypedefType 0x55d1d8fd3aa0 'int64_t' sugar
|     |-Typedef 0x55d1d8ee7390 'int64_t'
|     `-TypedefType 0x55d1d8ec0630 '__int64_t' sugar
|       |-Typedef 0x55d1d8ec0208 '__int64_t'
|       `-BuiltinType 0x55d1d8e7e5a0 'long'
|-TypedefDecl 0x55d1d91aa5e0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55d1d91aa5b0 'String::uintmax_t' sugar
|   |-Typedef 0x55d1d91aa4c0 'uintmax_t'
|   `-TypedefType 0x55d1d8fd39c0 'uint64_t' sugar
|     |-Typedef 0x55d1d8ee7530 'uint64_t'
|     `-TypedefType 0x55d1d8ec06c0 '__uint64_t' sugar
|       |-Typedef 0x55d1d8ec0278 '__uint64_t'
|       `-BuiltinType 0x55d1d8e7e640 'unsigned long'
|-CXXConstructorDecl 0x55d1d91aa6a0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55d1d91aa848 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55d1d91aa788 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55d1d91aa9f8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55d1d91aa938 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55d1d91aab50 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55d1d91aaac0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55d1d91aad68 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55d1d91aac18 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55d1d91aac98 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55d1d91aaf88 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55d1d91aae38 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55d1d91aaeb8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55d1d91ab1a8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55d1d91ab058 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55d1d91ab0d8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55d1d91ab3c8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55d1d91ab278 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55d1d91ab2f8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55d1d91ab558 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55d1d91ab490 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55d1d91ab6d8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55d1d91ab618 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55d1d91ab868 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55d1d91ab7a0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55d1d91ab9c0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55d1d91ab930 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55d1d91abb18 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55d1d91aba88 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55d1d91abc70 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55d1d91abbe0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55d1d91abdf8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55d1d91abd38 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55d1d91abf88 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55d1d91abec0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55d1d91ac118 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55d1d91ac050 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55d1d91ac2a8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55d1d91ac1e0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55d1d91ac3a0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55d1d91ac4c8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55d1d91ac648 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55d1d91ac580 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55d1d91ac798 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55d1d91ac708 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55d1d91ac850 <col:63> "" ""
|-CXXMethodDecl 0x55d1d91ac998 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55d1d91ac8d8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55d1d91acba8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55d1d91aca58 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55d1d91acad8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55d1d91acdc8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55d1d91acc70 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55d1d91accf0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55d1d91ad0a8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55d1d91ace88 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55d1d91acf08 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55d1d91b8ef0 <col:55> 'int' 10
| `-ParmVarDecl 0x55d1d91acf80 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d1d91b8f10 <col:76> 'bool' true
|-CXXMethodDecl 0x55d1d91ad388 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55d1d91ad170 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55d1d91ad1f0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55d1d91b8f20 <col:56> 'int' 10
| `-ParmVarDecl 0x55d1d91ad268 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d1d91b8f40 <col:77> 'bool' true
|-CXXMethodDecl 0x55d1d91ad490 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55d1d91ad558 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55d1d91ad620 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55d1d91ad6c0 <col:20>
| `-OptimizeNoneAttr 0x55d1d91ad718 <col:30>
|-CXXConversionDecl 0x55d1d91ad808 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55d1d91ad8d8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55d1d91ad998 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55d1d91ada88 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55d1d91adb48 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55d1d91adcc8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55d1d91adc00 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55d1d91ade18 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55d1d91add88 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55d1d91adf08 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55d1d91adfc8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55d1d91ae218 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55d1d91ae080 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55d1d91ae100 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55d1d91ae478 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55d1d91ae2e0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55d1d91ae360 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55d1d91ae548 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55d1d91ae758 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55d1d91ae600 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55d1d91ae680 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55d1d91ae978 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55d1d91ae820 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55d1d91ae8a0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55d1d91aeb08 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55d1d91aea40 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55d1d91aebf8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55d1d91aed68 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55d1d91aeca8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55d1d91aef78 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55d1d91aee28 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55d1d91aeea8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55d1d91af190 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55d1d91af038 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55d1d91af0b0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55d1d91af320 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55d1d91af250 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55d1d91af540 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55d1d91af3e0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55d1d91af460 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55d1d91af690 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55d1d91af600 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55d1d91af868 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55d1d91af750 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55d1d91af7d0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55d1d91af9b8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55d1d91af928 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55d1d91afbd0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55d1d91afa70 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55d1d91afaf0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55d1d91b8f50 <col:39> 'int' 0
|-CXXMethodDecl 0x55d1d91afdf0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55d1d91afc90 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55d1d91afd10 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55d1d91b8f70 <col:48> 'int' 0
|-CXXMethodDecl 0x55d1d91affd0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55d1d91afeb0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55d1d91aff30 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55d1d91b8f90 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55d1d91b00a0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55d1d91b0160 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55d1d91b0220 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55d1d91b02e0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55d1d91b03a0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55d1d91b0548 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55d1d91b0450 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55d1d91b06c8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55d1d91b0600 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55d1d91b08a0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55d1d91b0788 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55d1d91b0a18 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55d1d91b0958 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55d1d91b0b60 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55d1d91b0ad0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55d1d91b0cb0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55d1d91b0c20 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55d1d91b0e88 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55d1d91b0d70 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55d1d91b0df0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55d1d91b1068 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55d1d91b0f50 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55d1d91b0fd0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55d1d91b11b8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55d1d91b1128 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55d1d91b13c8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55d1d91b1278 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55d1d91b12f8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55d1d91b1528 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55d1d91b1490 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55d1d91b1680 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55d1d91b15e8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55d1d91b1728 <col:57> "" ""
|-CXXMethodDecl 0x55d1d91b1838 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55d1d91b17a8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55d1d91b1988 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55d1d91b18f8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55d1d91b1b08 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55d1d91b1a40 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55d1d91b1bd0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55d1d91b1c90 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55d1d91b1d50 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55d1d91b1df0 <col:49> "" ""
|-CXXMethodDecl 0x55d1d91b1e80 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55d1d91b1f40 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55d1d91b2030 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55d1d91b20f8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55d1d91b21b8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55d1d91b2278 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55d1d91b2370 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55d1d91b2438 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55d1d91b2500 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55d1d91b26d8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55d1d91b25b8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55d1d91b2638 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55d1d91b2900 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55d1d91b27a0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55d1d91b2820 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55d1d91b2a10 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55d1d91b2a78 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55d1d91b2aa0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55d1d91b2bb8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55d1d91b2c58 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55d1d91b2cb8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55d1d91b2d18 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55d1d91b2dc8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55d1d91b2e30 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55d1d91b3068 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55d1d91b30b8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d1d91b3048 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55d1d91b2f58 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55d1d91b2f00 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55d1d91b2f40 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55d1d91b2f20 <col:32> 'int' 8
|-CXXRecordDecl 0x55d1d91b30d0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55d1d91b31e8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55d1d91b3290 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55d1d91b32f8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55d1d91b3388 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55d1d91b9420 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55d1d91b9858 <col:12>
| |-CXXConstructorDecl 0x55d1d91b9528 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55d1d91b9638 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55d1d91b3290 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55d1d91bbde0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55d1d91bbdb0 <col:12> 'const char *const' lvalue .data 0x55d1d91b3290
| | |     `-DeclRefExpr 0x55d1d91bbd90 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d1d91b9638 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55d1d91b32f8 'length' 'int'
| | | `-ImplicitCastExpr 0x55d1d91bbe70 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55d1d91bbe40 <col:12> 'const int' lvalue .length 0x55d1d91b32f8
| | |     `-DeclRefExpr 0x55d1d91bbe20 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d1d91b9638 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55d1d91b3388 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55d1d91bbf00 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55d1d91bbed0 <col:12> 'String::memo_t *const' lvalue .memo 0x55d1d91b3388
| | |     `-DeclRefExpr 0x55d1d91bbeb0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d1d91b9638 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55d1d91bbf58 <col:12>
| |-CXXConstructorDecl 0x55d1d91b96d8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55d1d91b96d8
| | `-ParmVarDecl 0x55d1d91b97e8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55d1d91bed40 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55d1d91ca758 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55d1d91ca868 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55d1d91cad80 <col:12>
| |   |-BinaryOperator 0x55d1d91cab98 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55d1d91cab50 <col:12> 'const char *' lvalue ->data 0x55d1d91b3290
| |   | | `-CXXThisExpr 0x55d1d91cab40 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55d1d91cab80 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55d1d91cab10 <col:12> 'const char *const' lvalue .data 0x55d1d91b3290
| |   |     `-DeclRefExpr 0x55d1d91caaf0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d1d91ca868 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55d1d91cac60 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55d1d91cac18 <col:12> 'int' lvalue ->length 0x55d1d91b32f8
| |   | | `-CXXThisExpr 0x55d1d91cac08 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55d1d91cac48 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55d1d91cabd8 <col:12> 'const int' lvalue .length 0x55d1d91b32f8
| |   |     `-DeclRefExpr 0x55d1d91cabb8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d1d91ca868 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55d1d91cad28 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55d1d91cace0 <col:12> 'String::memo_t *' lvalue ->memo 0x55d1d91b3388
| |   | | `-CXXThisExpr 0x55d1d91cacd0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55d1d91cad10 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55d1d91caca0 <col:12> 'String::memo_t *const' lvalue .memo 0x55d1d91b3388
| |   |     `-DeclRefExpr 0x55d1d91cac80 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d1d91ca868 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55d1d91cad70 <col:12>
| |     `-UnaryOperator 0x55d1d91cad58 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55d1d91cad48 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55d1d91ca8d8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55d1d91ca8d8
|   `-ParmVarDecl 0x55d1d91ca9e8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55d1d91b3400 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55d1d91b3648 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55d1d91b3468 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55d1d91b34e8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55d1d91b3560 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55d1d91b93e0 <col:79, line:261:5>
|   |-BinaryOperator 0x55d1d91b9058 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55d1d91b8ff0 <col:2, col:5> 'const char *' lvalue .data 0x55d1d91b3290
|   | | `-MemberExpr 0x55d1d91b8fc0 <col:2> 'String::rep_t' lvalue ->_r 0x55d1d91b3400
|   | |   `-CXXThisExpr 0x55d1d91b8fb0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55d1d91b9040 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55d1d91b9020 <col:12> 'const char *' lvalue ParmVar 0x55d1d91b3468 'data' 'const char *'
|   |-BinaryOperator 0x55d1d91b9120 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55d1d91b90b8 <col:2, col:5> 'int' lvalue .length 0x55d1d91b32f8
|   | | `-MemberExpr 0x55d1d91b9088 <col:2> 'String::rep_t' lvalue ->_r 0x55d1d91b3400
|   | |   `-CXXThisExpr 0x55d1d91b9078 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55d1d91b9108 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55d1d91b90e8 <col:14> 'int' lvalue ParmVar 0x55d1d91b34e8 'length' 'int'
|   `-IfStmt 0x55d1d91b93c8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55d1d91b9240 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55d1d91b9228 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55d1d91b9208 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55d1d91b91e8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55d1d91b9180 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55d1d91b3388
|     |       | `-MemberExpr 0x55d1d91b9150 <col:7> 'String::rep_t' lvalue ->_r 0x55d1d91b3400
|     |       |   `-CXXThisExpr 0x55d1d91b9140 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55d1d91b91d0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55d1d91b91b0 <col:17> 'String::memo_t *' lvalue ParmVar 0x55d1d91b3560 'memo' 'String::memo_t *'
|     `-CallExpr 0x55d1d91b93a0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55d1d91b9388 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55d1d91b9290 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55d1d91a2078 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55d1d91b92f8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55d1d91b2c58
|         `-ImplicitCastExpr 0x55d1d91b92e0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55d1d91b92c0 <col:27> 'String::memo_t *' lvalue ParmVar 0x55d1d91b3560 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55d1d91b38f8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55d1d91b3718 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55d1d91b3798 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55d1d91b3810 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55d1d91b3400 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55d1d91b9868 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55d1d91b99f8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55d1d91b9960 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55d1d91b98d0 <col:2> '<bound member function type>' ->assign_memo 0x55d1d91b3648
|     | `-ImplicitCastExpr 0x55d1d91b9998 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55d1d91b98c0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55d1d91b99b0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55d1d91b9900 <col:14> 'const char *' lvalue ParmVar 0x55d1d91b3718 'data' 'const char *'
|     |-ImplicitCastExpr 0x55d1d91b99c8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55d1d91b9920 <col:20> 'int' lvalue ParmVar 0x55d1d91b3798 'length' 'int'
|     `-ImplicitCastExpr 0x55d1d91b99e0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55d1d91b9940 <col:28> 'String::memo_t *' lvalue ParmVar 0x55d1d91b3810 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55d1d91b3a88 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55d1d91b39c8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55d1d91b9c50 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55d1d91b9bd0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55d1d91b9a20 <col:2> '<bound member function type>' ->assign_memo 0x55d1d91b3648
|     | `-CXXThisExpr 0x55d1d91b9a10 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55d1d91b9c08 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55d1d91b9aa0 <col:14, col:19> 'const char *' lvalue .data 0x55d1d91b3290
|     |   `-MemberExpr 0x55d1d91b9a70 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55d1d91b3400
|     |     `-DeclRefExpr 0x55d1d91b9a50 <col:14> 'const String' lvalue ParmVar 0x55d1d91b39c8 'x' 'const String &'
|     |-ImplicitCastExpr 0x55d1d91b9c20 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55d1d91b9b20 <col:25, col:30> 'int' lvalue .length 0x55d1d91b32f8
|     |   `-MemberExpr 0x55d1d91b9af0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55d1d91b3400
|     |     `-DeclRefExpr 0x55d1d91b9ad0 <col:25> 'const String' lvalue ParmVar 0x55d1d91b39c8 'x' 'const String &'
|     `-ImplicitCastExpr 0x55d1d91b9c38 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55d1d91b9ba0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55d1d91b3388
|         `-MemberExpr 0x55d1d91b9b70 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55d1d91b3400
|           `-DeclRefExpr 0x55d1d91b9b50 <col:38> 'const String' lvalue ParmVar 0x55d1d91b39c8 'x' 'const String &'
|-CXXMethodDecl 0x55d1d91b3b50 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55d1d91ba610 <col:31, line:278:5>
|   `-IfStmt 0x55d1d91ba5f8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55d1d91b9cf0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55d1d91b9cd8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55d1d91b9ca8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55d1d91b3388
|     |     `-MemberExpr 0x55d1d91b9c78 <col:6> 'String::rep_t' lvalue ->_r 0x55d1d91b3400
|     |       `-CXXThisExpr 0x55d1d91b9c68 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55d1d91ba5d0 <col:15, line:277:2>
|       |-ParenExpr 0x55d1d91ba1a0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55d1d91ba170 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55d1d91b9e00 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55d1d91b9de8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55d1d91b9dd0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55d1d91b9d90 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55d1d91b2c58
|       |   |       `-ImplicitCastExpr 0x55d1d91b9d78 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55d1d91b9d48 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55d1d91b3388
|       |   |           `-MemberExpr 0x55d1d91b9d18 <col:27> 'String::rep_t' lvalue ->_r 0x55d1d91b3400
|       |   |             `-CXXThisExpr 0x55d1d91b9d08 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55d1d91b9e60 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55d1d91b9e40 <col:54> 'int' 0
|       |   `-CallExpr 0x55d1d91ba0d0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55d1d91ba0b8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55d1d91ba038 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d1d8f1a2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55d1d91ba110 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55d1d91b9f48 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55d1d91ba128 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55d1d91b9f78 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55d1d91ba140 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55d1d91b9fb0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55d1d91ba158 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55d1d91ba020 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55d1d91ba008 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55d1d91b9fd0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55d1d91ba4f0 <line:274:6, line:275:22>
|       | |-CallExpr 0x55d1d91ba3b0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55d1d91ba398 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55d1d91ba310 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55d1d91a34c0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55d1d91ba2e0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55d1d91b2c58
|       | |   `-ImplicitCastExpr 0x55d1d91ba2c8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55d1d91ba298 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55d1d91b3388
|       | |       `-MemberExpr 0x55d1d91ba268 <col:40> 'String::rep_t' lvalue ->_r 0x55d1d91b3400
|       | |         `-CXXThisExpr 0x55d1d91ba258 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55d1d91ba4b0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55d1d91ba498 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55d1d91ba3d8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55d1d91b8330 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55d1d91ba4d8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55d1d91ba438 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55d1d91b3388
|       |       `-MemberExpr 0x55d1d91ba408 <col:15> 'String::rep_t' lvalue ->_r 0x55d1d91b3400
|       |         `-CXXThisExpr 0x55d1d91ba3f8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55d1d91ba5b0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55d1d91ba548 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55d1d91b3388
|         | `-MemberExpr 0x55d1d91ba518 <col:6> 'String::rep_t' lvalue ->_r 0x55d1d91b3400
|         |   `-CXXThisExpr 0x55d1d91ba508 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55d1d91ba598 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55d1d91ba578 <col:16> 'int' 0
|-CXXMethodDecl 0x55d1d91b3de8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55d1d91b3c08 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55d1d91b3c88 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55d1d91b3d00 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55d1d91b3ec0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55d1d91b4110 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55d1d91b3f78 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55d1d91b3ff8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55d1d91b4070 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55d1d91b42f8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55d1d91b41e0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55d1d91b4260 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55d1d91b43f8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55d1d91ba6e8 <col:41, line:286:5>
|   `-ReturnStmt 0x55d1d91ba6d8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55d1d91ba6a8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55d1d91ba670 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55d1d91ba658 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55d1d91ba638 <col:46> 'int' 1
|-CXXMethodDecl 0x55d1d91b4698 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55d1d91b44b0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55d1d91b4530 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55d1d91b45b0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55d1d91b8330 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55d1d91b4760 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55d1d91b8400 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55d1d91b85d0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55d1d91b84b8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55d1d91b8538 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55d1d91b8690 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55d1d91b8758 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55d1d91b8858 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55d1d91b88d0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55d1d91b8948 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55d1d91b89b0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55d1d91b8ab0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55d1d91b8b00 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d1d91b8a90 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55d1d91b8a70 <col:22> 'int' 14
|-CXXMethodDecl 0x55d1d91b8d18 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55d1d91b8b30 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55d1d91b8bb0 <col:38> col:41 'int'
| `-ParmVarDecl 0x55d1d91b8c30 <col:43> col:46 'int'
|-FriendDecl 0x55d1d91b8e20 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55d1d91b8eb0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d1d927c500 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55d1d927c6d8 prev 0x55d1d927c500 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55d1d927c768 <col:46, col:52> col:46 public
|-TypedefDecl 0x55d1d927c790 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55d1d8e7e580 'int'
|-TypedefDecl 0x55d1d927e0f0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55d1d927e0a0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55d1d927e080 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55d1d927c9a8 'type'
|     `-SubstTemplateTypeParmType 0x55d1d927c970 'String' sugar
|       |-TemplateTypeParmType 0x55d1d916e8c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d1d916e870 'T'
|       `-RecordType 0x55d1d91aa0a0 'String'
|         `-CXXRecord 0x55d1d91aa010 'String'
|-TypedefDecl 0x55d1d927e1a8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55d1d927e170 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55d1d927e150 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55d1d927e0f0 'type'
|     `-ElaboratedType 0x55d1d927e0a0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55d1d927e080 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55d1d927c9a8 'type'
|         `-SubstTemplateTypeParmType 0x55d1d927c970 'String' sugar
|           |-TemplateTypeParmType 0x55d1d916e8c0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55d1d916e870 'T'
|           `-RecordType 0x55d1d91aa0a0 'String'
|             `-CXXRecord 0x55d1d91aa010 'String'
|-CXXMethodDecl 0x55d1d927e328 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55d1d927e238 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55d1d927e418 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55d1d9428d48 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55d1d9428d48
|-CXXMethodDecl 0x55d1d9429018 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55d1d9428f20 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55d1d9429258 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55d1d94290d0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d1d9429148 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d1d9429428 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55d1d9429318 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d1d9429390 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d1d9429588 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55d1d9429658 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55d1d94298a8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55d1d9429718 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55d1d9429790 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d1d9429b08 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55d1d9429978 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55d1d94299f0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d1d9429cc8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55d1d9429bd8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d1d9429e88 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55d1d9429d90 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d1d9429f40 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55d1d9429ff0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55d1d942a228 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55d1d942a0a0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d1d942a118 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d1d942a4c8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55d1d942a3d0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55d1d942a590 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55d1d942a5e0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55d1d942a630 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d1d93e2850 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55d1d927af68 prev 0x55d1d93e2850 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55d1d927c470 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55d1d927c420 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55d1d927c400 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55d1d927c2b0 'type'
|     `-SubstTemplateTypeParmType 0x55d1d927c140 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55d1d9144670 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55d1d9144618 'F'
|       `-RecordType 0x55d1d927bda0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55d1d927bcc0 'typed_array_memory'
|-FieldDecl 0x55d1d942a680 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55d1d942a6d0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55d1d942a708 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55d1d927b000 'String' sugar
|   |-TemplateTypeParmType 0x55d1d917bbe0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55d1d917bb88 'T'
|   `-RecordType 0x55d1d91aa0a0 'String'
|     `-CXXRecord 0x55d1d91aa010 'String'
|-TypedefDecl 0x55d1d942a798 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55d1d942a760 'String &'
|   `-SubstTemplateTypeParmType 0x55d1d927b000 'String' sugar
|     |-TemplateTypeParmType 0x55d1d917bbe0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d1d917bb88 'T'
|     `-RecordType 0x55d1d91aa0a0 'String'
|       `-CXXRecord 0x55d1d91aa010 'String'
|-TypedefDecl 0x55d1d942a828 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55d1d942a7f0 'const String &'
|   `-QualType 0x55d1d927b001 'const String' const
|     `-SubstTemplateTypeParmType 0x55d1d927b000 'String' sugar
|       |-TemplateTypeParmType 0x55d1d917bbe0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d1d917bb88 'T'
|       `-RecordType 0x55d1d91aa0a0 'String'
|         `-CXXRecord 0x55d1d91aa010 'String'
|-TypedefDecl 0x55d1d942a8b8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55d1d942a880 'String *'
|   `-SubstTemplateTypeParmType 0x55d1d927b000 'String' sugar
|     |-TemplateTypeParmType 0x55d1d917bbe0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d1d917bb88 'T'
|     `-RecordType 0x55d1d91aa0a0 'String'
|       `-CXXRecord 0x55d1d91aa010 'String'
|-TypedefDecl 0x55d1d942a948 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55d1d942a910 'const String *'
|   `-QualType 0x55d1d927b001 'const String' const
|     `-SubstTemplateTypeParmType 0x55d1d927b000 'String' sugar
|       |-TemplateTypeParmType 0x55d1d917bbe0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d1d917bb88 'T'
|       `-RecordType 0x55d1d91aa0a0 'String'
|         `-CXXRecord 0x55d1d91aa010 'String'
|-TypedefDecl 0x55d1d942b5a0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55d1d942b550 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55d1d942b530 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55d1d942b468 'type'
|     `-LValueReferenceType 0x55d1d942b430 'const String &'
|       `-QualType 0x55d1d942b1d1 'const String' const
|         `-SubstTemplateTypeParmType 0x55d1d942b1d0 'String' sugar
|           |-TemplateTypeParmType 0x55d1d914e5c0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55d1d914e568 'T'
|           `-RecordType 0x55d1d91aa0a0 'String'
|             `-CXXRecord 0x55d1d91aa010 'String'
|-TypedefDecl 0x55d1d942b608 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55d1d942a7f0 'const String &'
|   `-QualType 0x55d1d927b001 'const String' const
|     `-SubstTemplateTypeParmType 0x55d1d927b000 'String' sugar
|       |-TemplateTypeParmType 0x55d1d917bbe0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d1d917bb88 'T'
|       `-RecordType 0x55d1d91aa0a0 'String'
|         `-CXXRecord 0x55d1d91aa010 'String'
|-TypedefDecl 0x55d1d942b660 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55d1d8e7e580 'int'
|-TypedefDecl 0x55d1d942b6c8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55d1d942a880 'String *'
|   `-SubstTemplateTypeParmType 0x55d1d927b000 'String' sugar
|     |-TemplateTypeParmType 0x55d1d917bbe0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d1d917bb88 'T'
|     `-RecordType 0x55d1d91aa0a0 'String'
|       `-CXXRecord 0x55d1d91aa010 'String'
|-TypedefDecl 0x55d1d942b730 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55d1d942a910 'const String *'
|   `-QualType 0x55d1d927b001 'const String' const
|     `-SubstTemplateTypeParmType 0x55d1d927b000 'String' sugar
|       |-TemplateTypeParmType 0x55d1d917bbe0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d1d917bb88 'T'
|       `-RecordType 0x55d1d91aa0a0 'String'
|         `-CXXRecord 0x55d1d91aa010 'String'
|-EnumDecl 0x55d1d942b788 <line:134:5> col:5
| `-EnumConstantDecl 0x55d1d942b880 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55d1d942b860 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55d1d917d268 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55d1d917d240 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55d1d917d220 <col:40> 'int' 1
|-CXXConstructorDecl 0x55d1d942b908 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55d1d942bb98 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55d1d942b9c0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d1d942ba60 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55d1d942be28 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55d1d942bd10 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55d1d942c0e8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55d1d942bfd0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55d1d942c400 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55d1d942c2e0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55d1d942c710 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55d1d942c5f0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55d1d942ca00 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55d1d942c848 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d1d942c8c0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55d1d942cb28 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55d1d942cbd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d1d942cc30 <col:30> Inherited
|-CXXMethodDecl 0x55d1d942cc78 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55d1d942cd28 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d1d942cd80 <col:30> Inherited
|-CXXMethodDecl 0x55d1d942ce48 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55d1d942cef8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d1d942cf50 <col:30> Inherited
|-CXXMethodDecl 0x55d1d942cf98 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55d1d942d048 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d1d942d0a0 <col:30> Inherited
|-CXXMethodDecl 0x55d1d942d0e8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55d1d942d198 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d1d942d1f0 <col:30> Inherited
|-CXXMethodDecl 0x55d1d942d238 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55d1d942d2e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d1d942d340 <col:30> Inherited
|-CXXMethodDecl 0x55d1d942d368 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55d1d942d418 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55d1d942d4c8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55d1d942d688 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55d1d942d578 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d1d942d5f0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55d1d942d7d8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55d1d942d748 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d1d942d988 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55d1d942d890 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55d1d942da40 <col:20>
| `-OptimizeNoneAttr 0x55d1d942da98 <col:30>
|-CXXMethodDecl 0x55d1d942dbb8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55d1d942dac0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55d1d942dc70 <col:20>
| `-OptimizeNoneAttr 0x55d1d942dcc8 <col:30>
|-CXXMethodDecl 0x55d1d942dd80 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55d1d942dcf0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d1d942dec8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55d1d942de38 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d1d942dff8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55d1d942e0f8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55d1d942e1c8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55d1d942e298 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55d1d942e3d8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55d1d942e348 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d1d942e520 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55d1d942e490 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d1d942e668 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55d1d942e5d8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55d1d942e720 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55d1d942e820 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55d1d942e790 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55d1d942e8d8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55d1d942e998 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55d1d942ea98 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55d1d942ec18 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55d1d942eb58 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55d1d942f3d8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55d1d942ecd0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55d1d942f338 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55d1d942f238 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55d1d942f4b8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55d1d942f608 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55d1d942f578 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55d1d942f6c0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55d1d942f908 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55d1d942f780 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55d1d942f7f8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55d1d942fa98 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55d1d942f9d8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55d1d942fca8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55d1d942fb60 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55d1d942fbd8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55d1d942fd68 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55d1d942ffc8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55d1d942fed0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55d1d9430098 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55d1d9430098

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d1d94b1fb8 prev 0x55d1d9360ca8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55d1d94b20b0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55d1d94b2140 <col:22, col:28> col:22 public
|-EnumDecl 0x55d1d94b2168 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55d1d94b2288 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d1d94b2268 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55d1d94b2250 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55d1d94b2230 <col:14> 'int' 999
| |-EnumConstantDecl 0x55d1d94b2330 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d1d94b2310 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55d1d94b22f8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55d1d94b22d8 <col:14> 'int' 1
| |-EnumConstantDecl 0x55d1d94b23c0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d1d94b23a0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55d1d94b2380 <col:17> 'int' 0
| |-EnumConstantDecl 0x55d1d94b2450 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d1d94b2430 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55d1d94b2410 <col:13> 'int' 1
| |-EnumConstantDecl 0x55d1d94b24e0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d1d94b24c0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55d1d94b24a0 <col:16> 'int' 2
| |-EnumConstantDecl 0x55d1d94b2570 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d1d94b2550 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55d1d94b2530 <col:13> 'int' 3
| |-EnumConstantDecl 0x55d1d94b2600 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d1d94b25e0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55d1d94b25c0 <col:15> 'int' 4
| |-EnumConstantDecl 0x55d1d94b2690 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d1d94b2670 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55d1d94b2650 <col:14> 'int' 5
| |-EnumConstantDecl 0x55d1d94b2720 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d1d94b2700 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55d1d94b26e0 <col:12> 'int' 6
| `-EnumConstantDecl 0x55d1d94b27b0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55d1d94b2790 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55d1d94b2770 <col:13> 'int' 7
|-VarDecl 0x55d1d94b2820 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55d1d94b28a8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55d1d94b2930 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55d1d94b29b8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55d1d94b2a40 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55d1d94b2ac8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55d1d94b2b50 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55d1d94b2bd8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55d1d94b2c60 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55d1d94b2ce8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55d1d94b2d70 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55d1d94b2e70 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55d1d94b8168 '_nerrors' 'int'
| | `-IntegerLiteral 0x55d1d94b88f8 <line:128:13> 'int' 0
| `-CompoundStmt 0x55d1d94b8968 <col:16, line:129:5>
|-CXXDestructorDecl 0x55d1d94b2f60 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55d1d94b8978 <col:29, line:132:5>
|-CXXMethodDecl 0x55d1d94b3118 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55d1d94b3050 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d1d94b31e0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55d1d94b32c8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55d1d94b89d0 <col:44, line:161:5>
|   `-ReturnStmt 0x55d1d94b89c0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55d1d94b89a8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55d1d94b8988 <col:9> 'ErrorHandler *' lvalue Var 0x55d1d94b81c8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55d1d94b3408 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55d1d94b3378 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d1d94b34d0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55d1d94b8a30 <col:43, line:173:5>
|   `-ReturnStmt 0x55d1d94b8a20 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55d1d94b8a08 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55d1d94b89e8 <col:9> 'ErrorHandler *' lvalue Var 0x55d1d94b8240 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55d1d94b3588 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55d1d94b3608 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55d1d94b3718 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55d1d94b3688 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55d1d94b3868 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55d1d94b37d8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55d1d94b39c0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55d1d94b3928 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55d1d94b3b18 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x55d1d94b3a80 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55d1d94b3c70 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55d1d94b3bd8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55d1d94b3e80 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55d1d94b3d28 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55d1d94b3da8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55d1d94b4058 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55d1d94b3f40 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55d1d94b3fc0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55d1d94b4278 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55d1d94b4118 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55d1d94b4198 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55d1d94b4458 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55d1d94b4338 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55d1d94b43b8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55d1d94b4638 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55d1d94b4518 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55d1d94b4598 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55d1d94b47c0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55d1d94b46f8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55d1d94b4990 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55d1d94b4878 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55d1d94b48f0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55d1d94b8c88 <col:57, line:234:5>
|   `-ReturnStmt 0x55d1d94b8c78 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55d1d94b8c60 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55d1d94b8c08 <col:9, col:41> 'int'
|         |-MemberExpr 0x55d1d94b8bd8 <col:9> '<bound member function type>' ->xmessage 0x55d1d94b47c0
|         | `-CXXThisExpr 0x55d1d94b8bc8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55d1d94b8c48 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55d1d94b8c30 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55d1d94b8ba8 <col:18, col:40> 'String' (CXXTemporary 0x55d1d94b8ba8)
|               `-CallExpr 0x55d1d94b8b70 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55d1d94b8b58 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55d1d94b8ad0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55d1d94b6988 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55d1d94b8af0 <col:31> 'const String' lvalue ParmVar 0x55d1d94b48f0 'str' 'const String &'
|                 `-DeclRefExpr 0x55d1d94b8b10 <col:36> 'const String' lvalue ParmVar 0x55d1d94b4878 'anno' 'const String &'
|-CXXMethodDecl 0x55d1d94b4c70 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55d1d94b4a50 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55d1d94b4ad0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55d1d94b4b48 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55d1d94b8f18 <col:68, line:243:5>
|   `-ReturnStmt 0x55d1d94b8f08 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55d1d94b8ef0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55d1d94b8e90 <col:9, col:41> 'int'
|         |-MemberExpr 0x55d1d94b8e60 <col:9> '<bound member function type>' ->xmessage 0x55d1d94b4990
|         | `-CXXThisExpr 0x55d1d94b8e50 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55d1d94b8d28 <col:18> 'const String' lvalue ParmVar 0x55d1d94b4a50 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55d1d94b8ed8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55d1d94b8ec0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55d1d94b8e30 <col:24, col:40> 'String' (CXXTemporary 0x55d1d94b8e30)
|               `-CXXMemberCallExpr 0x55d1d94b8dc8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55d1d94b8d58 <col:24> '<bound member function type>' ->vformat 0x55d1d94b5e50
|                 | `-CXXThisExpr 0x55d1d94b8d48 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55d1d94b8df8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55d1d94b8d88 <col:32> 'const char *' lvalue ParmVar 0x55d1d94b4ad0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55d1d94b8e10 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55d1d94b8da8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55d1d94b4b48 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55d1d94b4f10 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55d1d94b4d38 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55d1d94b4db0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55d1d94b4e28 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55d1d94b9258 <col:23, line:254:5>
|   `-ReturnStmt 0x55d1d94b9248 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55d1d94b9230 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55d1d94b91d0 <col:9, col:71> 'int'
|         |-MemberExpr 0x55d1d94b91a0 <col:9> '<bound member function type>' ->xmessage 0x55d1d94b4990
|         | `-CXXThisExpr 0x55d1d94b9190 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55d1d94b9218 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55d1d94b9200 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55d1d94b9150 <col:18, col:65> 'String' (CXXTemporary 0x55d1d94b9150)
|         |     `-CallExpr 0x55d1d94b90e8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55d1d94b90d0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55d1d94b8fb8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55d1d94b6988 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55d1d94b8fd8 <col:31> 'const String' lvalue ParmVar 0x55d1d94b4db0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55d1d94b9130 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55d1d94b9118 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55d1d94b90b0 <col:37, col:64> 'String' (CXXTemporary 0x55d1d94b90b0)
|         |             `-CallExpr 0x55d1d94b9080 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55d1d94b9068 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55d1d94b8ff8 <col:37> 'String (const String &)' lvalue CXXMethod 0x55d1d94b6fd8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55d1d94b9018 <col:56> 'const String' lvalue ParmVar 0x55d1d94b4d38 'landmark' 'const String &'
|         `-DeclRefExpr 0x55d1d94b9170 <col:68> 'const String' lvalue ParmVar 0x55d1d94b4e28 'str' 'const String &'
|-CXXMethodDecl 0x55d1d94b5290 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55d1d94b4fd8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55d1d94b5050 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55d1d94b50d0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55d1d94b5148 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55d1d94b9510 <col:34, line:267:5>
|   `-ReturnStmt 0x55d1d94b9500 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55d1d94b94e8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55d1d94b9480 <col:9, col:51> 'int'
|         |-MemberExpr 0x55d1d94b9450 <col:9> '<bound member function type>' ->xmessage 0x55d1d94b4f10
|         | `-CXXThisExpr 0x55d1d94b9440 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55d1d94b92f8 <col:18> 'const String' lvalue ParmVar 0x55d1d94b4fd8 'landmark' 'const String &'
|         |-DeclRefExpr 0x55d1d94b9318 <col:28> 'const String' lvalue ParmVar 0x55d1d94b5050 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55d1d94b94d0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55d1d94b94b8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55d1d94b9420 <col:34, col:50> 'String' (CXXTemporary 0x55d1d94b9420)
|               `-CXXMemberCallExpr 0x55d1d94b93b8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55d1d94b9348 <col:34> '<bound member function type>' ->vformat 0x55d1d94b5e50
|                 | `-CXXThisExpr 0x55d1d94b9338 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55d1d94b93e8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55d1d94b9378 <col:42> 'const char *' lvalue ParmVar 0x55d1d94b50d0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55d1d94b9400 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55d1d94b9398 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55d1d94b5148 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55d1d94b53a0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55d1d94b9590 <col:25, line:288:5>
|   `-ReturnStmt 0x55d1d94b9580 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55d1d94b9568 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55d1d94b9538 <col:9> 'const int' lvalue ->_nerrors 0x55d1d94b8168
|         `-CXXThisExpr 0x55d1d94b9528 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55d1d94b55b0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55d1d94b5458 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55d1d94b54d8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55d1d94b5898 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55d1d94b5678 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55d1d94b56f8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55d1d94b5770 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55d1d94b5a30 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55d1d94b5968 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55d1d94b5c78 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55d1d94b5af0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55d1d94b5b68 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55d1d94b97f0 <col:58, line:357:5>
|   `-ReturnStmt 0x55d1d94b97e0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55d1d94b97c8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55d1d94b9798 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55d1d94b9780 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55d1d94b9760 <col:9, col:29> 'String' (CXXTemporary 0x55d1d94b9760)
|             `-CallExpr 0x55d1d94b96f0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55d1d94b96d8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55d1d94b9658 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55d1d94b5898 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55d1d94b95f8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55d1d94b9728 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55d1d94b9618 <col:21> 'const char *' lvalue ParmVar 0x55d1d94b5af0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55d1d94b9740 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55d1d94b9638 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55d1d94b5b68 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55d1d94b5e50 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55d1d94b5d40 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55d1d94b5db8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55d1d94b5fa8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55d1d94b5f18 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55d1d94b60f0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55d1d94b6060 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55d1d94b6390 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55d1d94b61a8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55d1d94b6228 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55d1d94b62a0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55d1d94b64f0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55d1d94b6460 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55d1d94b9908 <col:37, line:441:5>
|   `-IfStmt 0x55d1d94b98f0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55d1d94b9878 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55d1d94b9848 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55d1d94b9808 <col:6> 'int' lvalue ParmVar 0x55d1d94b6460 'level' 'int'
|     | `-ImplicitCastExpr 0x55d1d94b9860 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55d1d94b9828 <col:15> 'ErrorHandler::Level' EnumConstant 0x55d1d94b2570 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55d1d94b98d8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55d1d94b98a8 <col:8> 'int' lvalue ->_nerrors 0x55d1d94b8168
|         `-CXXThisExpr 0x55d1d94b9898 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55d1d94b65b8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55d1d94b99a0 <col:26, line:448:5>
|   `-BinaryOperator 0x55d1d94b9980 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55d1d94b9930 <col:2> 'int' lvalue ->_nerrors 0x55d1d94b8168
|     | `-CXXThisExpr 0x55d1d94b9920 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55d1d94b9960 <col:13> 'int' 0
|-CXXMethodDecl 0x55d1d94b6780 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55d1d94b6670 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55d1d94b66e8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55d1d94b6988 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55d1d94b6840 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55d1d94b68b8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55d1d94b6c38 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55d1d94b6a48 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55d1d94b6ac8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55d1d94b6b48 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55d1d94b6cf0 <col:59> 0 0
|-CXXMethodDecl 0x55d1d94b6e88 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55d1d94b6d68 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55d1d94b6de8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55d1d94ba010 <col:70, line:534:5>
|   |-DeclStmt 0x55d1d94b9b10 <line:528:2, col:20>
|   | |-VarDecl 0x55d1d94b99c8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55d1d94b9a30 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55d1d94b9a68 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55d1d94b9ad0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55d1d94b9be0 <line:529:2, col:23>
|   | `-VarDecl 0x55d1d94b9b40 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55d1d94b9bc8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55d1d94b9ba8 <col:18> 'const char *' lvalue ParmVar 0x55d1d94b6d68 'begin' 'const char *'
|   |-DoStmt 0x55d1d94b9fa8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55d1d94b9ed8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55d1d94b9ec0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55d1d94b9ea0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55d1d94b9bf8 <col:6> 'const char *' lvalue Var 0x55d1d94b9b40 'x' 'const char *'
|   | |     `-CallExpr 0x55d1d94b9df0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55d1d94b9dd8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55d1d94b9d90 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55d1d94b8640 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55d1d94b9e58 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55d1d94b9e40 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55d1d94b9cb0 <col:20, col:27> 'String' (CXXTemporary 0x55d1d94b9cb0)
|   | |       |     `-CXXTemporaryObjectExpr 0x55d1d94b9c78 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55d1d94b9e70 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55d1d94b9cd0 <col:30> 'const char *' lvalue Var 0x55d1d94b9b40 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55d1d94b9e88 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55d1d94b9cf0 <col:33> 'const char *' lvalue ParmVar 0x55d1d94b6de8 'end' 'const char *'
|   | |       |-UnaryOperator 0x55d1d94b9d30 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55d1d94b9d10 <col:39> 'String' lvalue Var 0x55d1d94b99c8 'name' 'String'
|   | |       |-UnaryOperator 0x55d1d94b9d68 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55d1d94b9d48 <col:46> 'String' lvalue Var 0x55d1d94b9a68 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55d1d94b9d80 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55d1d94b9f90 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55d1d94b9f78 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55d1d94b9f58 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55d1d94b9f28 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55d1d91ad808
|   |         `-ImplicitCastExpr 0x55d1d94b9f10 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55d1d94b9ef0 <col:11> 'String' lvalue Var 0x55d1d94b99c8 'name' 'String'
|   `-ReturnStmt 0x55d1d94ba000 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55d1d94b9fe8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55d1d94b9fc8 <col:9> 'const char *' lvalue Var 0x55d1d94b9b40 'x' 'const char *'
|-CXXMethodDecl 0x55d1d94b6fd8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55d1d94b6f48 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55d1d94ba618 <col:55, line:550:5>
|   `-IfStmt 0x55d1d94ba5f0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55d1d94ba250 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55d1d94ba238 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55d1d94ba220 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55d1d94ba200 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55d1d94ba1d0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55d1d91ad808
|     | |       `-DeclRefExpr 0x55d1d94ba070 <col:6> 'const String' lvalue ParmVar 0x55d1d94b6f48 'x' 'const String &'
|     | `-BinaryOperator 0x55d1d94ba1b0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55d1d94ba180 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55d1d94ba130 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55d1d94ba118 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55d1d94ba0d0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55d1d91c7040 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55d1d94ba090 <col:11> 'const String' lvalue ParmVar 0x55d1d94b6f48 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55d1d94ba0b0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55d1d94ba198 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55d1d94ba168 <col:19> 'char' 123
|     |-ReturnStmt 0x55d1d94ba2c0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55d1d94ba290 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55d1d94ba270 <col:13> 'const String' lvalue ParmVar 0x55d1d94b6f48 'x' 'const String &'
|     `-IfStmt 0x55d1d94ba5c8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55d1d94ba358 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55d1d94ba340 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55d1d94ba320 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55d1d94ba2f0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55d1d91ad808
|       |       `-DeclRefExpr 0x55d1d94ba2d0 <col:11> 'const String' lvalue ParmVar 0x55d1d94b6f48 'x' 'const String &'
|       |-ReturnStmt 0x55d1d94ba4e0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55d1d94ba4c8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55d1d94ba498 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55d1d94ba480 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55d1d94ba460 <col:13, col:29> 'String' (CXXTemporary 0x55d1d94ba460)
|       |         `-CallExpr 0x55d1d94ba410 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55d1d94ba3f8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55d1d94ba370 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55d1d94b6780 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55d1d94ba440 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55d1d94ba390 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55d1d94ba3b0 <col:28> 'const String' lvalue ParmVar 0x55d1d94b6f48 'x' 'const String &'
|       `-ReturnStmt 0x55d1d94ba5b8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55d1d94ba5a0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55d1d94ba570 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55d1d94ba558 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55d1d94ba538 <col:13, col:20> 'String' (CXXTemporary 0x55d1d94ba538)
|                 `-CXXTemporaryObjectExpr 0x55d1d94ba500 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55d1d94b71b0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55d1d94b70a0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55d1d94b7118 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d1d94b88e8 <col:71> 'bool' false
|-CXXRecordDecl 0x55d1d94b7260 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55d1d94b7558 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55d1d94b74f0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55d1d94b7490 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55d1d94b7450 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55d1d91aa0a0 'String'
|       | `-CXXRecord 0x55d1d91aa010 'String'
|       |-BuiltinType 0x55d1d8e7e580 'int'
|       `-DecayedType 0x55d1d9361cf0 '__va_list_tag *' sugar
|         |-TypedefType 0x55d1d9361cc0 'va_list' sugar
|         | |-Typedef 0x55d1d909c160 'va_list'
|         | `-TypedefType 0x55d1d909c110 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55d1d8fd3d58 '__gnuc_va_list'
|         |   `-TypedefType 0x55d1d8fd3cc0 '__builtin_va_list' sugar
|         |     |-Typedef 0x55d1d8ebfd38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55d1d8ebfce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55d1d8e7f2d0 '__va_list_tag'
|         |         `-CXXRecord 0x55d1d8e7f238 '__va_list_tag'
|         `-PointerType 0x55d1d90a1a00 '__va_list_tag *'
|           `-RecordType 0x55d1d8e7f2d0 '__va_list_tag'
|             `-CXXRecord 0x55d1d8e7f238 '__va_list_tag'
|-EnumDecl 0x55d1d94b75b0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55d1d94b76b0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d1d94b7c10 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d94b7690 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55d1d94b7670 <col:16> 'int' 1
| |-EnumConstantDecl 0x55d1d94b7740 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d1d94b7c28 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d94b7720 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55d1d94b7700 <col:21> 'int' 2
| |-EnumConstantDecl 0x55d1d94b77d0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d1d94b7c40 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d94b77b0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55d1d94b7790 <col:22> 'int' 4
| |-EnumConstantDecl 0x55d1d94b7860 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d1d94b7c58 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d94b7840 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55d1d94b7820 <col:17> 'int' 8
| |-EnumConstantDecl 0x55d1d94b78f0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d1d94b7c70 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d94b78d0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55d1d94b78b0 <col:22> 'int' 16
| |-EnumConstantDecl 0x55d1d94b7980 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d1d94b7c88 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d94b7960 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55d1d94b7940 <col:19> 'int' 32
| |-EnumConstantDecl 0x55d1d94b7a10 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d1d94b7ca0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d94b79f0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55d1d94b79d0 <col:17> 'int' 64
| |-EnumConstantDecl 0x55d1d94b7aa0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d1d94b7cb8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d94b7a80 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55d1d94b7a60 <col:14> 'int' 128
| |-EnumConstantDecl 0x55d1d94b7b30 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d1d94b7cd0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d94b7b10 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55d1d94b7af0 <col:16> 'int' 256
| `-EnumConstantDecl 0x55d1d94b7bc0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55d1d94b7ce8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d1d94b7ba0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55d1d94b7b80 <col:12> 'int' 1024
|-CXXMethodDecl 0x55d1d94b7ef8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55d1d94b7d10 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55d1d94b7db0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55d1d94b8080 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55d1d94b7fb8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55d1d94b8128 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55d1d94b8168 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55d1d94b81c8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55d1d94b8240 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55d1d94b8640 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55d1d94b82b8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55d1d94b8338 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55d1d94b83b8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55d1d94b8430 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55d1d94b84a8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55d1d94b8520 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55d1d94b8768 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55d1d94b8768
| `-ParmVarDecl 0x55d1d94b8878 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55d1d94ba978 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55d1d94ba978
  `-ParmVarDecl 0x55d1d94baa88 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d1d9360d38 prev 0x55d1d93a52f8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d1d9360e30 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55d1d9360ec0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55d1d9360ff8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55d1d9360ef8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55d1d9362420 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55d1d9362400 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55d1d9361f98 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55d1d93624b0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55d1d9362470 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55d1d9360ef8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55d1d9362000 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55d1d9362530 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55d1d93624f0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55d1d9362060 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55d1d9362570 <col:54> 'bool' false
| `-CompoundStmt 0x55d1d9362678 <col:61, line:38:5>
|   `-BinaryOperator 0x55d1d9362658 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55d1d93625f0 <col:9> 'const Element *' lvalue ->_context 0x55d1d9361f38
|     | `-CXXThisExpr 0x55d1d93625e0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55d1d9362640 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55d1d9362620 <col:20> 'int' 0
|-CXXConstructorDecl 0x55d1d9361208 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55d1d93610b8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55d1d9361130 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55d1d9362458 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55d1d9362438 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55d1d9361f38 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55d1d93626d0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55d1d9362690 <col:20> 'const Element *' lvalue ParmVar 0x55d1d93610b8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55d1d9361f98 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55d1d9362750 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55d1d9362710 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55d1d9361130 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55d1d9362000 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55d1d93627d0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55d1d9362790 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55d1d9362060 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55d1d9362810 <col:73> 'bool' false
| `-CompoundStmt 0x55d1d9362888 <col:80, line:46:5>
|-CXXMethodDecl 0x55d1d9361338 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55d1d9362900 <col:36, line:51:5>
|   `-ReturnStmt 0x55d1d93628f0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55d1d93628d8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55d1d93628a8 <col:16> 'const Element *const' lvalue ->_context 0x55d1d9361f38
|         `-CXXThisExpr 0x55d1d9362898 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55d1d9361428 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55d1d9362980 <col:32, line:57:5>
|   `-ReturnStmt 0x55d1d9362970 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55d1d9362958 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55d1d9362928 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55d1d9361f98
|         `-CXXThisExpr 0x55d1d9362918 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55d1d93614e8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55d1d9361670 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55d1d93615a0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55d1d93617c0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55d1d9361730 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55d1d9361910 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55d1d9361880 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55d1d9361b18 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55d1d93619c8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55d1d9361a40 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55d1d9361e48 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55d1d9361bd8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55d1d9361c58 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55d1d9361d20 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55d1d9361f00 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55d1d9361f38 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55d1d9361f98 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55d1d9362000 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55d1d9362060 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55d1d93620b0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55d1d93620b0
| `-ParmVarDecl 0x55d1d93621c8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55d1d9362268 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55d1d9362268
| `-ParmVarDecl 0x55d1d9362378 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55d1d94c4700 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d1d946cfa0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55d1d946d178 prev 0x55d1d946cfa0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55d1d946d208 <col:46, col:52> col:46 public
|-TypedefDecl 0x55d1d946d230 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55d1d8e7e580 'int'
|-TypedefDecl 0x55d1d946ee00 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55d1d946edb0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55d1d946d6e0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55d1d946d5e0 'type'
|     `-TemplateSpecializationType 0x55d1d946d570 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55d1d946d450 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55d1d946d430 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55d1d946d410 <col:24> 'unsigned long' 4
|       `-RecordType 0x55d1d946d550 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55d1d946d470 'char_array'
|-TypedefDecl 0x55d1d946eeb8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55d1d946ee80 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55d1d946ee60 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55d1d946ee00 'type'
|     `-ElaboratedType 0x55d1d946edb0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55d1d946d6e0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55d1d946d5e0 'type'
|         `-TemplateSpecializationType 0x55d1d946d570 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55d1d946d450 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55d1d946d430 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55d1d946d410 <col:24> 'unsigned long' 4
|           `-RecordType 0x55d1d946d550 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55d1d946d470 'char_array'
|-CXXMethodDecl 0x55d1d946f038 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55d1d946ef48 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55d1d946f128 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55d1d946f208 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55d1d946f4d8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55d1d946f3e0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55d1d946f718 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55d1d946f590 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d1d946f608 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d1d946f8e8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55d1d946f7d8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d1d946f850 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d1d946fa48 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55d1d946fb18 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55d1d9478950 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55d1d946fbd8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55d1d946fc50 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d1d9478ba8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55d1d9478a20 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55d1d9478a98 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d1d9478d68 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55d1d9478c78 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d1d9478f28 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55d1d9478e30 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d1d9478fe0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55d1d9479090 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55d1d94792c8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55d1d9479140 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d1d94791b8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d1d9479568 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55d1d9479470 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55d1d9479630 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55d1d9479680 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55d1d94796d0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d1d946b9a8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55d1d946bbb8 prev 0x55d1d946b9a8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55d1d946cf10 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55d1d946cec0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55d1d946cea0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55d1d946cd50 'type'
|     `-SubstTemplateTypeParmType 0x55d1d946cb70 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55d1d9143ef0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d1d9143e98 'T'
|       `-RecordType 0x55d1d946c6c0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55d1d946c5d8 'sized_array_memory'
|-FieldDecl 0x55d1d9479720 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55d1d9479770 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55d1d94797a8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55d1d946bc50 'int' sugar
|   |-TemplateTypeParmType 0x55d1d917bbe0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55d1d917bb88 'T'
|   `-BuiltinType 0x55d1d8e7e580 'int'
|-TypedefDecl 0x55d1d9479838 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55d1d9479800 'int &'
|   `-SubstTemplateTypeParmType 0x55d1d946bc50 'int' sugar
|     |-TemplateTypeParmType 0x55d1d917bbe0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d1d917bb88 'T'
|     `-BuiltinType 0x55d1d8e7e580 'int'
|-TypedefDecl 0x55d1d94798f8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55d1d94798c0 'const int &'
|   `-QualType 0x55d1d946bc51 'const int' const
|     `-SubstTemplateTypeParmType 0x55d1d946bc50 'int' sugar
|       |-TemplateTypeParmType 0x55d1d917bbe0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d1d917bb88 'T'
|       `-BuiltinType 0x55d1d8e7e580 'int'
|-TypedefDecl 0x55d1d9479988 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55d1d9479950 'int *'
|   `-SubstTemplateTypeParmType 0x55d1d946bc50 'int' sugar
|     |-TemplateTypeParmType 0x55d1d917bbe0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d1d917bb88 'T'
|     `-BuiltinType 0x55d1d8e7e580 'int'
|-TypedefDecl 0x55d1d9479a18 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55d1d94799e0 'const int *'
|   `-QualType 0x55d1d946bc51 'const int' const
|     `-SubstTemplateTypeParmType 0x55d1d946bc50 'int' sugar
|       |-TemplateTypeParmType 0x55d1d917bbe0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d1d917bb88 'T'
|       `-BuiltinType 0x55d1d8e7e580 'int'
|-TypedefDecl 0x55d1d947a600 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55d1d947a5b0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55d1d947a590 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55d1d947a520 'type'
|     `-SubstTemplateTypeParmType 0x55d1d947a2e0 'int' sugar
|       |-TemplateTypeParmType 0x55d1d914ecf0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d1d914eca0 'T'
|       `-BuiltinType 0x55d1d8e7e580 'int'
|-TypedefDecl 0x55d1d947a668 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55d1d94798c0 'const int &'
|   `-QualType 0x55d1d946bc51 'const int' const
|     `-SubstTemplateTypeParmType 0x55d1d946bc50 'int' sugar
|       |-TemplateTypeParmType 0x55d1d917bbe0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d1d917bb88 'T'
|       `-BuiltinType 0x55d1d8e7e580 'int'
|-TypedefDecl 0x55d1d947a6c0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55d1d8e7e580 'int'
|-TypedefDecl 0x55d1d947a728 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55d1d9479950 'int *'
|   `-SubstTemplateTypeParmType 0x55d1d946bc50 'int' sugar
|     |-TemplateTypeParmType 0x55d1d917bbe0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d1d917bb88 'T'
|     `-BuiltinType 0x55d1d8e7e580 'int'
|-TypedefDecl 0x55d1d947a790 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55d1d94799e0 'const int *'
|   `-QualType 0x55d1d946bc51 'const int' const
|     `-SubstTemplateTypeParmType 0x55d1d946bc50 'int' sugar
|       |-TemplateTypeParmType 0x55d1d917bbe0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d1d917bb88 'T'
|       `-BuiltinType 0x55d1d8e7e580 'int'
|-EnumDecl 0x55d1d947a7e8 <line:134:5> col:5
| `-EnumConstantDecl 0x55d1d947a8e0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55d1d947a8c0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55d1d917d268 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55d1d917d240 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55d1d917d220 <col:40> 'int' 1
|-CXXConstructorDecl 0x55d1d947a968 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55d1d947abb8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55d1d947aa20 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d1d947aac0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55d1d947ae78 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55d1d947ad60 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55d1d947b138 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55d1d947b020 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55d1d947b480 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55d1d947b360 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55d1d947b790 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55d1d947b670 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55d1d947ba80 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55d1d947b8c8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d1d947b940 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55d1d947bba8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55d1d947bc88 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d1d947bce0 <col:30> Inherited
|-CXXMethodDecl 0x55d1d947bd28 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55d1d947bdd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d1d947be30 <col:30> Inherited
|-CXXMethodDecl 0x55d1d947bef8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55d1d947bfa8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d1d947c000 <col:30> Inherited
|-CXXMethodDecl 0x55d1d947c048 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55d1d947c0f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d1d947c150 <col:30> Inherited
|-CXXMethodDecl 0x55d1d947c198 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55d1d947c248 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d1d947c2a0 <col:30> Inherited
|-CXXMethodDecl 0x55d1d947c2e8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55d1d947c398 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d1d947c3f0 <col:30> Inherited
|-CXXMethodDecl 0x55d1d947c418 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55d1d947c4c8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55d1d947c578 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55d1d947c738 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55d1d947c628 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d1d947c6a0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55d1d947c888 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55d1d947c7f8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d1d947ca38 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55d1d947c940 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55d1d947caf0 <col:20>
| `-OptimizeNoneAttr 0x55d1d947cb48 <col:30>
|-CXXMethodDecl 0x55d1d947cc68 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55d1d947cb70 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55d1d947cd20 <col:20>
| `-OptimizeNoneAttr 0x55d1d947cd78 <col:30>
|-CXXMethodDecl 0x55d1d947ce30 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55d1d947cda0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d1d947cf78 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55d1d947cee8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d1d947d0a8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55d1d947d1d8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55d1d947d2a8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55d1d947d378 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55d1d947d4b8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55d1d947d428 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d1d947d600 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55d1d947d570 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d1d947d748 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55d1d947d6b8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55d1d947d800 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55d1d947d900 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55d1d947d870 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55d1d947d9b8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55d1d947da78 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55d1d947db78 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55d1d947dcf8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55d1d947dc38 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55d1d947e4b8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55d1d947ddb0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55d1d947e418 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55d1d947e318 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55d1d947e598 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55d1d947e6e8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55d1d947e658 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55d1d947e7a0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55d1d947e9e8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55d1d947e860 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55d1d947e8d8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55d1d947eba8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55d1d947eab8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55d1d947edf8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55d1d947ec70 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55d1d947ece8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55d1d947eeb8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55d1d947f118 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55d1d947f020 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55d1d947f1e8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d1d9469b18 prev 0x55d1d944be48 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55d1d9469c10 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55d1d9469d00 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55d1d9490ec0 <col:16, line:828:9>
|-CXXDestructorDecl 0x55d1d9469df0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55d1d9490ed0 <col:25, line:830:9>
|-CXXMethodDecl 0x55d1d9469ef0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55d1d9469fa0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55d1d946a048 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55d1d946a048
| `-ParmVarDecl 0x55d1d946a158 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55d1d946a918 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55d1d946a918
  `-ParmVarDecl 0x55d1d946aa28 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d1d944bc58 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55d1d944bdb8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55d1d944be48 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55d1d944bf00 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55d1d944c008 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55d1d944bf38 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55d1d94807a8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55d1d9480788 <col:31> 'int' 0
|-CXXConstructorDecl 0x55d1d944c328 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55d1d944c1a0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55d1d944c218 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55d1d94807e0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55d1d94807c0 <col:59> 'int' 0
|-CXXConstructorDecl 0x55d1d944c500 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55d1d944c3f0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55d1d944c468 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55d1d9480818 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55d1d94807f8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55d1d944c8b8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55d1d944c6a0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55d1d944c718 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55d1d944c790 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55d1d9480850 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55d1d9480830 <col:31> 'int' 0
|-CXXConstructorDecl 0x55d1d944ca78 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55d1d944c9b8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55d1d944cb70 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55d1d944cd58 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55d1d944cc60 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55d1d944ce48 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55d1d94824f8 <col:24, line:291:5>
|   `-ReturnStmt 0x55d1d94824e8 <line:290:9, col:79>
|     `-BinaryOperator 0x55d1d94824c8 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55d1d94823a0 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55d1d94822f8 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55d1d94822d8 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55d1d94808d8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55d1d94808c0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55d1d94808a8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55d1d9480878 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55d1d946b940
|       | |   |       `-CXXThisExpr 0x55d1d9480868 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55d1d94822c0 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55d1d94822a8 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55d1d9482270 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55d1d9482240 <col:28, col:35> '<bound member function type>' ->size 0x55d1d942d368
|       | |           `-ImplicitCastExpr 0x55d1d9482290 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55d1d9480930 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55d1d9480900 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55d1d946b940
|       | |                 `-CXXThisExpr 0x55d1d94808f0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55d1d9482388 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55d1d9482370 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55d1d9482358 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55d1d9482328 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55d1d947f330
|       |         `-CXXThisExpr 0x55d1d9482318 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55d1d94824a8 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55d1d9482490 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55d1d9482478 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55d1d9482438 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55d1d9482420 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55d1d94823d0 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55d1d947f3e0
|         |     |   `-CXXThisExpr 0x55d1d94823c0 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55d1d9482400 <col:73> 'int' 0
|         `-IntegerLiteral 0x55d1d9482458 <col:79> 'int' 0
|-CXXMethodDecl 0x55d1d944cf08 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55d1d94826d0 <col:32, line:296:5>
|   `-ReturnStmt 0x55d1d94826c0 <line:295:9, col:49>
|     `-BinaryOperator 0x55d1d94826a0 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55d1d9482580 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55d1d9482568 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55d1d9482550 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55d1d9482520 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55d1d947f330
|       |       `-CXXThisExpr 0x55d1d9482510 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55d1d9482680 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55d1d9482668 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55d1d9482650 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55d1d9482610 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55d1d94825f8 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55d1d94825a8 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55d1d947f3e0
|         |     |   `-CXXThisExpr 0x55d1d9482598 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55d1d94825d8 <col:43> 'int' 0
|         `-IntegerLiteral 0x55d1d9482630 <col:49> 'int' 0
|-CXXMethodDecl 0x55d1d944cff8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55d1d94828e0 <col:19, line:306:5>
|   |-IfStmt 0x55d1d9482800 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55d1d9482740 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55d1d9482728 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55d1d94826f8 <col:13> 'Vector<String> *' lvalue ->_conf 0x55d1d946b940
|   | |     `-CXXThisExpr 0x55d1d94826e8 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55d1d94827e0 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55d1d94827b0 <col:13, col:20> '<bound member function type>' ->clear 0x55d1d942fd68
|   |     `-ImplicitCastExpr 0x55d1d9482798 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55d1d9482768 <col:13> 'Vector<String> *' lvalue ->_conf 0x55d1d946b940
|   |         `-CXXThisExpr 0x55d1d9482758 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55d1d9482888 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55d1d9482858 <col:9, col:16> '<bound member function type>' .clear 0x55d1d947eeb8
|   |   `-MemberExpr 0x55d1d9482828 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55d1d947f2d0
|   |     `-CXXThisExpr 0x55d1d9482818 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55d1d94828d0 <line:305:9, col:17>
|     `-UnaryOperator 0x55d1d94828b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d1d94828a8 <col:17> 'Args *' this
|-CXXMethodDecl 0x55d1d944d278 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55d1d944d180 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55d1d944d3f8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55d1d944d330 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55d1d944d778 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55d1d944d4a0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55d1d944d6d8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55d1d944d548 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55d1d944d5c0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55d1d9482c00 <col:67, line:327:5>
|     |-WhileStmt 0x55d1d9482bb0 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55d1d94829c8 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55d1d9482948 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55d1d939d7c8 0x55d1d91e6da8 0x55d1d91e6a80 0x55d1d91d7250 0x55d1d91d6f00 0x55d1d91d67f0 0x55d1d91a9160 0x55d1d9136630
|     | | |-DeclRefExpr 0x55d1d9482908 <col:16> 'Iter' lvalue ParmVar 0x55d1d944d548 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55d1d9482928 <col:25> 'Iter' lvalue ParmVar 0x55d1d944d5c0 'end' 'Iter'
|     | `-CompoundStmt 0x55d1d9482b90 <col:30, line:325:9>
|     |   |-CallExpr 0x55d1d9482b30 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55d1d9482a10 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55d1d9482b00 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55d1d9482a90 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d1d93a2948 0x55d1d93a2568 0x55d1d93a2198 0x55d1d93a1db8 0x55d1d93a19d8 0x55d1d93a1608
|     |   |   `-DeclRefExpr 0x55d1d9482a70 <col:24> 'Iter' lvalue ParmVar 0x55d1d944d548 'begin' 'Iter'
|     |   `-UnaryOperator 0x55d1d9482b78 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55d1d9482b58 <col:15> 'Iter' lvalue ParmVar 0x55d1d944d548 'begin' 'Iter'
|     `-ReturnStmt 0x55d1d9482bf0 <line:326:9, col:17>
|       `-UnaryOperator 0x55d1d9482bd8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d1d9482bc8 <col:17> 'Args *' this
|-CXXMethodDecl 0x55d1d944d880 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55d1d944d7f0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55d1d944d9c8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55d1d944d938 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55d1d944da90 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55d1d9482ce0 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55d1d9482c80 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55d1d9482c30 <col:9> '<bound member function type>' ->reset_from 0x55d1d947f758
|   | | `-CXXThisExpr 0x55d1d9482c20 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55d1d9482c60 <col:20> 'int' 0
|   `-ReturnStmt 0x55d1d9482cd0 <line:352:9, col:17>
|     `-UnaryOperator 0x55d1d9482cb8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d1d9482ca8 <col:17> 'Args *' this
|-VarDecl 0x55d1d944db48 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55d1d944dbb0 <col:38> 'int' 1
|-VarDecl 0x55d1d944dc40 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55d1d944dca8 <col:39> 'int' 2
|-VarDecl 0x55d1d944dd38 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55d1d944dda0 <col:39> 'int' 4
|-VarDecl 0x55d1d944de30 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55d1d944de98 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55d1d944e218 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55d1d944df10 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d1d944e178 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55d1d944dfc0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d944e068 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55d1d9482e38 <col:43, line:371:5>
|     `-ReturnStmt 0x55d1d9482e28 <line:370:9, col:34>
|       `-CallExpr 0x55d1d9482df0 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d9482d10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d9482d90 <col:21> 'const char *' lvalue ParmVar 0x55d1d944dfc0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d1d9482db0 <col:30> 'int' 0
|         `-DeclRefExpr 0x55d1d9482dd0 <col:33> 'T' lvalue ParmVar 0x55d1d944e068 'x' 'T &'
|-FunctionTemplateDecl 0x55d1d944e548 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55d1d944e280 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d1d944e4a8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55d1d944e330 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d944e3d8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55d1d9482f88 <col:45, line:375:5>
|     `-ReturnStmt 0x55d1d9482f78 <line:374:9, col:42>
|       `-CallExpr 0x55d1d9482f40 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d9482e60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d9482ee0 <col:21> 'const char *' lvalue ParmVar 0x55d1d944e330 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d1d9482f00 <col:30> 'const int' lvalue Var 0x55d1d944db48 'mandatory' 'const int'
|         `-DeclRefExpr 0x55d1d9482f20 <col:41> 'T' lvalue ParmVar 0x55d1d944e3d8 'x' 'T &'
|-FunctionTemplateDecl 0x55d1d944e878 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55d1d944e5b0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55d1d944e7d8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55d1d944e660 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55d1d944e708 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x55d1d94830d8 <col:45, line:379:5>
| |   `-ReturnStmt 0x55d1d94830c8 <line:378:9, col:43>
| |     `-CallExpr 0x55d1d9483090 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55d1d9482fb0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55d1d9483030 <col:21> 'const char *' lvalue ParmVar 0x55d1d944e660 'keyword' 'const char *'
| |       |-DeclRefExpr 0x55d1d9483050 <col:30> 'const int' lvalue Var 0x55d1d944dc40 'positional' 'const int'
| |       `-DeclRefExpr 0x55d1d9483070 <col:42> 'T' lvalue ParmVar 0x55d1d944e708 'x' 'T &'
| `-CXXMethodDecl 0x55d1d94c4b68 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55d1d94c4988 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x55d1d94c4a58 <col:39, col:42> col:42 x 'int &'
|-FunctionTemplateDecl 0x55d1d944eba8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55d1d944e8e0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d1d944eb08 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55d1d944e990 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d944ea38 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x55d1d94832d8 <col:46, line:383:5>
|     `-ReturnStmt 0x55d1d94832c8 <line:382:9, col:55>
|       `-CallExpr 0x55d1d9483290 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d9483100 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d9483180 <col:21> 'const char *' lvalue ParmVar 0x55d1d944e990 'keyword' 'const char *'
|         |-BinaryOperator 0x55d1d9483250 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55d1d9483200 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55d1d94831e0 <col:30> 'const int' lvalue Var 0x55d1d944db48 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55d1d9483238 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55d1d9483218 <col:42> 'const int' lvalue Var 0x55d1d944dc40 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55d1d9483270 <col:54> 'T' lvalue ParmVar 0x55d1d944ea38 'x' 'T &'
|-FunctionTemplateDecl 0x55d1d944efa8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55d1d944ec10 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d1d944ef08 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55d1d944ecc0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d944ed40 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55d1d944ede8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55d1d9483418 <col:54, line:388:5>
|     |-CallExpr 0x55d1d94833a0 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d1d94832f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55d1d9483330 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55d1d9483340 <col:30> 'const char *' lvalue ParmVar 0x55d1d944ecc0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d1d9483360 <col:39> 'int' lvalue ParmVar 0x55d1d944ed40 'flags' 'int'
|     | `-DeclRefExpr 0x55d1d9483380 <col:46> 'T' lvalue ParmVar 0x55d1d944ede8 'x' 'T &'
|     `-ReturnStmt 0x55d1d9483408 <line:387:9, col:17>
|       `-UnaryOperator 0x55d1d94833f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d1d94833e0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d1d944f458 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55d1d944f018 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d1d944f098 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55d1d944f3b8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55d1d944f158 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d944f1f8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55d1d944f298 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d1d9483588 <col:74, line:403:5>
|     `-ReturnStmt 0x55d1d9483578 <line:402:9, col:56>
|       `-CallExpr 0x55d1d9483538 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d9483448 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d94834b8 <col:28> 'const char *' lvalue ParmVar 0x55d1d944f158 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d1d94834d8 <col:37> 'int' 0
|         |-DeclRefExpr 0x55d1d94834f8 <col:40> 'T' lvalue ParmVar 0x55d1d944f1f8 'x' 'T &'
|         `-DeclRefExpr 0x55d1d9483518 <col:43> 'const V' lvalue ParmVar 0x55d1d944f298 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55d1d944f8c8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55d1d944f4c8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d1d944f548 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55d1d944f828 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55d1d944f608 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d944f6a8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55d1d944f748 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d1d94836f0 <col:76, line:407:5>
|     `-ReturnStmt 0x55d1d94836e0 <line:406:9, col:65>
|       `-CallExpr 0x55d1d94836a0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d94835b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d9483620 <col:28> 'const char *' lvalue ParmVar 0x55d1d944f608 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d1d9483640 <col:37> 'const int' lvalue Var 0x55d1d944dc40 'positional' 'const int'
|         |-DeclRefExpr 0x55d1d9483660 <col:49> 'T' lvalue ParmVar 0x55d1d944f6a8 'x' 'T &'
|         `-DeclRefExpr 0x55d1d9483680 <col:52> 'const V' lvalue ParmVar 0x55d1d944f748 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55d1d944fe18 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55d1d944f938 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d1d944f9b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55d1d944fd78 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55d1d944fa78 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d944faf8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55d1d944fb98 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55d1d944fc38 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d1d9483858 <col:85, line:412:5>
|     |-CallExpr 0x55d1d94837d8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d1d9483708 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55d1d9483748 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55d1d9483758 <col:37> 'const char *' lvalue ParmVar 0x55d1d944fa78 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d1d9483778 <col:46> 'int' lvalue ParmVar 0x55d1d944faf8 'flags' 'int'
|     | |-DeclRefExpr 0x55d1d9483798 <col:53> 'T' lvalue ParmVar 0x55d1d944fb98 'x' 'T &'
|     | `-DeclRefExpr 0x55d1d94837b8 <col:56> 'const V' lvalue ParmVar 0x55d1d944fc38 'default_value' 'const V &'
|     `-ReturnStmt 0x55d1d9483848 <line:411:9, col:17>
|       `-UnaryOperator 0x55d1d9483830 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d1d9483820 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d1d94502a8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55d1d944fe90 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d944ff08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d1d9450208 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d1d944ffc8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d9450040 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d94500e8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55d1d94839d8 <col:53, line:425:5>
|     `-ReturnStmt 0x55d1d94839c8 <line:424:9, col:42>
|       `-CallExpr 0x55d1d9483988 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d9483888 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d9483908 <col:21> 'const char *' lvalue ParmVar 0x55d1d944ffc8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d1d9483928 <col:30> 'int' 0
|         |-DeclRefExpr 0x55d1d9483948 <col:33> 'P' lvalue ParmVar 0x55d1d9450040 'parser' 'P'
|         `-DeclRefExpr 0x55d1d9483968 <col:41> 'T' lvalue ParmVar 0x55d1d94500e8 'x' 'T &'
|-FunctionTemplateDecl 0x55d1d94506f8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55d1d9450318 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d9450398 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d1d9450658 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d1d9450458 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d94504d0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d9450578 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55d1d9483b50 <col:55, line:429:5>
|     `-ReturnStmt 0x55d1d9483b40 <line:428:9, col:50>
|       `-CallExpr 0x55d1d9483b00 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d9483a00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d9483a80 <col:21> 'const char *' lvalue ParmVar 0x55d1d9450458 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d1d9483aa0 <col:30> 'const int' lvalue Var 0x55d1d944db48 'mandatory' 'const int'
|         |-DeclRefExpr 0x55d1d9483ac0 <col:41> 'P' lvalue ParmVar 0x55d1d94504d0 'parser' 'P'
|         `-DeclRefExpr 0x55d1d9483ae0 <col:49> 'T' lvalue ParmVar 0x55d1d9450578 'x' 'T &'
|-FunctionTemplateDecl 0x55d1d9450b48 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55d1d9450768 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d94507e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d1d9450aa8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d1d94508a8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d9450920 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d94509c8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55d1d9483cc8 <col:55, line:433:5>
|     `-ReturnStmt 0x55d1d9483cb8 <line:432:9, col:51>
|       `-CallExpr 0x55d1d9483c78 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d9483b78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d9483bf8 <col:21> 'const char *' lvalue ParmVar 0x55d1d94508a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d1d9483c18 <col:30> 'const int' lvalue Var 0x55d1d944dc40 'positional' 'const int'
|         |-DeclRefExpr 0x55d1d9483c38 <col:42> 'P' lvalue ParmVar 0x55d1d9450920 'parser' 'P'
|         `-DeclRefExpr 0x55d1d9483c58 <col:50> 'T' lvalue ParmVar 0x55d1d94509c8 'x' 'T &'
|-FunctionTemplateDecl 0x55d1d9450f98 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55d1d9450bb8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d9450c38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d1d9450ef8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d1d9450cf8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d9450d70 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d9450e18 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55d1d9483ef0 <col:56, line:437:5>
|     `-ReturnStmt 0x55d1d9483ee0 <line:436:9, col:63>
|       `-CallExpr 0x55d1d9483ea0 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d9483cf0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d9483d70 <col:21> 'const char *' lvalue ParmVar 0x55d1d9450cf8 'keyword' 'const char *'
|         |-BinaryOperator 0x55d1d9483e40 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55d1d9483df0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55d1d9483dd0 <col:30> 'const int' lvalue Var 0x55d1d944db48 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55d1d9483e28 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55d1d9483e08 <col:42> 'const int' lvalue Var 0x55d1d944dc40 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55d1d9483e60 <col:54> 'P' lvalue ParmVar 0x55d1d9450d70 'parser' 'P'
|         `-DeclRefExpr 0x55d1d9483e80 <col:62> 'T' lvalue ParmVar 0x55d1d9450e18 'x' 'T &'
|-FunctionTemplateDecl 0x55d1d94514c8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55d1d9451008 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d9451088 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d1d9451428 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55d1d9451148 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d94511c8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55d1d9451240 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d94512e8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55d1d9484058 <col:64, line:442:5>
|     |-CallExpr 0x55d1d9483fd8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d1d9483f08 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55d1d9483f48 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55d1d9483f58 <col:30> 'const char *' lvalue ParmVar 0x55d1d9451148 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d1d9483f78 <col:39> 'int' lvalue ParmVar 0x55d1d94511c8 'flags' 'int'
|     | |-DeclRefExpr 0x55d1d9483f98 <col:46> 'P' lvalue ParmVar 0x55d1d9451240 'parser' 'P'
|     | `-DeclRefExpr 0x55d1d9483fb8 <col:54> 'T' lvalue ParmVar 0x55d1d94512e8 'x' 'T &'
|     `-ReturnStmt 0x55d1d9484048 <line:441:9, col:17>
|       `-UnaryOperator 0x55d1d9484030 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d1d9484020 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d1d9451ac8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55d1d9451540 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d94515b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55d1d9451638 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55d1d9451a28 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55d1d9451700 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d9451778 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d9451818 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55d1d94518e8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d1d94841f0 <col:84, line:458:5>
|     `-ReturnStmt 0x55d1d94841e0 <line:457:9, col:64>
|       `-CallExpr 0x55d1d9484198 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d9484088 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d94840f8 <col:28> 'const char *' lvalue ParmVar 0x55d1d9451700 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d1d9484118 <col:37> 'int' 0
|         |-DeclRefExpr 0x55d1d9484138 <col:40> 'P' lvalue ParmVar 0x55d1d9451778 'parser' 'P'
|         |-DeclRefExpr 0x55d1d9484158 <col:48> 'T' lvalue ParmVar 0x55d1d9451818 'x' 'T &'
|         `-DeclRefExpr 0x55d1d9484178 <col:51> 'const V' lvalue ParmVar 0x55d1d94518e8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55d1d9452048 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55d1d9451b40 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d9451bb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55d1d9451c38 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55d1d9451fa8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55d1d9451d00 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d9451d78 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d9451e18 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55d1d9451eb8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d1d9484380 <col:86, line:462:5>
|     `-ReturnStmt 0x55d1d9484370 <line:461:9, col:73>
|       `-CallExpr 0x55d1d9484328 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d9484218 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d9484288 <col:28> 'const char *' lvalue ParmVar 0x55d1d9451d00 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d1d94842a8 <col:37> 'const int' lvalue Var 0x55d1d944dc40 'positional' 'const int'
|         |-DeclRefExpr 0x55d1d94842c8 <col:49> 'P' lvalue ParmVar 0x55d1d9451d78 'parser' 'P'
|         |-DeclRefExpr 0x55d1d94842e8 <col:57> 'T' lvalue ParmVar 0x55d1d9451e18 'x' 'T &'
|         `-DeclRefExpr 0x55d1d9484308 <col:60> 'const V' lvalue ParmVar 0x55d1d9451eb8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55d1d94526a8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55d1d94520c0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d9452138 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55d1d94521b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55d1d9452608 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55d1d9452280 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d9452300 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55d1d9452378 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d9452418 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55d1d94524b8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d1d9484510 <col:95, line:467:5>
|     |-CallExpr 0x55d1d9484488 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d1d9484398 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55d1d94843d8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55d1d94843e8 <col:37> 'const char *' lvalue ParmVar 0x55d1d9452280 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d1d9484408 <col:46> 'int' lvalue ParmVar 0x55d1d9452300 'flags' 'int'
|     | |-DeclRefExpr 0x55d1d9484428 <col:53> 'P' lvalue ParmVar 0x55d1d9452378 'parser' 'P'
|     | |-DeclRefExpr 0x55d1d9484448 <col:61> 'T' lvalue ParmVar 0x55d1d9452418 'x' 'T &'
|     | `-DeclRefExpr 0x55d1d9484468 <col:64> 'const V' lvalue ParmVar 0x55d1d94524b8 'default_value' 'const V &'
|     `-ReturnStmt 0x55d1d9484500 <line:466:9, col:17>
|       `-UnaryOperator 0x55d1d94844e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d1d94844d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d1d9452c88 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55d1d9452728 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d94527a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d1d9452828 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d1d9452be8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d1d94528f0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d9452968 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d9452a08 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55d1d9452aa8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55d1d94846b8 <col:63, line:481:5>
|     `-ReturnStmt 0x55d1d94846a8 <line:480:9, col:47>
|       `-CallExpr 0x55d1d9484660 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d9484540 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d94845c0 <col:21> 'const char *' lvalue ParmVar 0x55d1d94528f0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d1d94845e0 <col:30> 'int' 0
|         |-DeclRefExpr 0x55d1d9484600 <col:33> 'P' lvalue ParmVar 0x55d1d9452968 'parser' 'P'
|         |-DeclRefExpr 0x55d1d9484620 <col:41> 'T1' lvalue ParmVar 0x55d1d9452a08 'x1' 'T1 &'
|         `-DeclRefExpr 0x55d1d9484640 <col:45> 'T2' lvalue ParmVar 0x55d1d9452aa8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55d1d9453208 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55d1d9452d00 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d9452d78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d1d9452df8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d1d9453168 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d1d9452ec0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d9452f38 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d9452fd8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55d1d9453078 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55d1d9484858 <col:65, line:485:5>
|     `-ReturnStmt 0x55d1d9484848 <line:484:9, col:55>
|       `-CallExpr 0x55d1d9484800 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d94846e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d9484760 <col:21> 'const char *' lvalue ParmVar 0x55d1d9452ec0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d1d9484780 <col:30> 'const int' lvalue Var 0x55d1d944db48 'mandatory' 'const int'
|         |-DeclRefExpr 0x55d1d94847a0 <col:41> 'P' lvalue ParmVar 0x55d1d9452f38 'parser' 'P'
|         |-DeclRefExpr 0x55d1d94847c0 <col:49> 'T1' lvalue ParmVar 0x55d1d9452fd8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55d1d94847e0 <col:53> 'T2' lvalue ParmVar 0x55d1d9453078 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55d1d9458b58 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55d1d9453280 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d94532f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d1d9458748 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d1d9458ab8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d1d9458810 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d9458888 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d9458928 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55d1d94589c8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55d1d94849f8 <col:65, line:489:5>
|     `-ReturnStmt 0x55d1d94849e8 <line:488:9, col:56>
|       `-CallExpr 0x55d1d94849a0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d9484880 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d9484900 <col:21> 'const char *' lvalue ParmVar 0x55d1d9458810 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d1d9484920 <col:30> 'const int' lvalue Var 0x55d1d944dc40 'positional' 'const int'
|         |-DeclRefExpr 0x55d1d9484940 <col:42> 'P' lvalue ParmVar 0x55d1d9458888 'parser' 'P'
|         |-DeclRefExpr 0x55d1d9484960 <col:50> 'T1' lvalue ParmVar 0x55d1d9458928 'x1' 'T1 &'
|         `-DeclRefExpr 0x55d1d9484980 <col:54> 'T2' lvalue ParmVar 0x55d1d94589c8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55d1d94590d8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55d1d9458bd0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d9458c48 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d1d9458cc8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d1d9459038 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d1d9458d90 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d9458e08 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d9458ea8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55d1d9458f48 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55d1d9484c48 <col:66, line:493:5>
|     `-ReturnStmt 0x55d1d9484c38 <line:492:9, col:68>
|       `-CallExpr 0x55d1d9484bf0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d9484a20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d9484aa0 <col:21> 'const char *' lvalue ParmVar 0x55d1d9458d90 'keyword' 'const char *'
|         |-BinaryOperator 0x55d1d9484b70 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55d1d9484b20 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55d1d9484b00 <col:30> 'const int' lvalue Var 0x55d1d944db48 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55d1d9484b58 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55d1d9484b38 <col:42> 'const int' lvalue Var 0x55d1d944dc40 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55d1d9484b90 <col:54> 'P' lvalue ParmVar 0x55d1d9458e08 'parser' 'P'
|         |-DeclRefExpr 0x55d1d9484bb0 <col:62> 'T1' lvalue ParmVar 0x55d1d9458ea8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55d1d9484bd0 <col:66> 'T2' lvalue ParmVar 0x55d1d9458f48 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55d1d9459738 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55d1d9459150 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d94591c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d1d9459248 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d1d9459698 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d1d9459310 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d9459390 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55d1d9459408 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d94594a8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55d1d9459548 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55d1d9484dd8 <col:74, line:498:5>
|     |-CallExpr 0x55d1d9484d50 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d1d9484c60 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55d1d9484ca0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55d1d9484cb0 <col:30> 'const char *' lvalue ParmVar 0x55d1d9459310 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d1d9484cd0 <col:39> 'int' lvalue ParmVar 0x55d1d9459390 'flags' 'int'
|     | |-DeclRefExpr 0x55d1d9484cf0 <col:46> 'P' lvalue ParmVar 0x55d1d9459408 'parser' 'P'
|     | |-DeclRefExpr 0x55d1d9484d10 <col:54> 'T1' lvalue ParmVar 0x55d1d94594a8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55d1d9484d30 <col:58> 'T2' lvalue ParmVar 0x55d1d9459548 'x2' 'T2 &'
|     `-ReturnStmt 0x55d1d9484dc8 <line:497:9, col:17>
|       `-UnaryOperator 0x55d1d9484db0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d1d9484da0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d1d9459a98 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55d1d94597b8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d1d94599f8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55d1d9459870 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d94598e8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55d1d9484f20 <col:52, line:509:5>
|     `-ReturnStmt 0x55d1d9484f10 <line:508:9, col:44>
|       `-CallExpr 0x55d1d9484ed8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d9484e08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d9484e78 <col:26> 'const char *' lvalue ParmVar 0x55d1d9459870 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d1d9484e98 <col:35> 'int' 0
|         `-DeclRefExpr 0x55d1d9484eb8 <col:38> 'P' lvalue ParmVar 0x55d1d94598e8 'parser' 'P'
|-FunctionTemplateDecl 0x55d1d9459d98 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55d1d9459b00 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d1d9459cf8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55d1d9459bb0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d9459c28 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55d1d9485060 <col:54, line:513:5>
|     `-ReturnStmt 0x55d1d9485050 <line:512:9, col:52>
|       `-CallExpr 0x55d1d9485018 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d9484f48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d9484fb8 <col:26> 'const char *' lvalue ParmVar 0x55d1d9459bb0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d1d9484fd8 <col:35> 'const int' lvalue Var 0x55d1d944db48 'mandatory' 'const int'
|         `-DeclRefExpr 0x55d1d9484ff8 <col:46> 'P' lvalue ParmVar 0x55d1d9459c28 'parser' 'P'
|-FunctionTemplateDecl 0x55d1d945a098 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55d1d9459e00 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d1d9459ff8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55d1d9459eb0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d9459f28 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55d1d94851a0 <col:54, line:517:5>
|     `-ReturnStmt 0x55d1d9485190 <line:516:9, col:53>
|       `-CallExpr 0x55d1d9485158 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d9485088 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d94850f8 <col:26> 'const char *' lvalue ParmVar 0x55d1d9459eb0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d1d9485118 <col:35> 'const int' lvalue Var 0x55d1d944dc40 'positional' 'const int'
|         `-DeclRefExpr 0x55d1d9485138 <col:47> 'P' lvalue ParmVar 0x55d1d9459f28 'parser' 'P'
|-FunctionTemplateDecl 0x55d1d945a398 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55d1d945a100 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d1d945a2f8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55d1d945a1b0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d945a228 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55d1d9485390 <col:55, line:521:5>
|     `-ReturnStmt 0x55d1d9485380 <line:520:9, col:65>
|       `-CallExpr 0x55d1d9485348 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d94851c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d9485238 <col:26> 'const char *' lvalue ParmVar 0x55d1d945a1b0 'keyword' 'const char *'
|         |-BinaryOperator 0x55d1d9485308 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55d1d94852b8 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55d1d9485298 <col:35> 'const int' lvalue Var 0x55d1d944db48 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55d1d94852f0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55d1d94852d0 <col:47> 'const int' lvalue Var 0x55d1d944dc40 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55d1d9485328 <col:59> 'P' lvalue ParmVar 0x55d1d945a228 'parser' 'P'
|-FunctionTemplateDecl 0x55d1d945a768 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55d1d945a400 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d1d945a6c8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55d1d945a4b0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d945a530 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55d1d945a5a8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55d1d94854d0 <col:63, line:526:5>
|     |-CallExpr 0x55d1d9485458 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d1d94853a8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55d1d94853e8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55d1d94853f8 <col:35> 'const char *' lvalue ParmVar 0x55d1d945a4b0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d1d9485418 <col:44> 'int' lvalue ParmVar 0x55d1d945a530 'flags' 'int'
|     | `-DeclRefExpr 0x55d1d9485438 <col:51> 'P' lvalue ParmVar 0x55d1d945a5a8 'parser' 'P'
|     `-ReturnStmt 0x55d1d94854c0 <line:525:9, col:17>
|       `-UnaryOperator 0x55d1d94854a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d1d9485498 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d1d945abb8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55d1d945a7d8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d945a858 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d1d945ab18 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d1d945a918 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d945a990 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d945aa38 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55d1d9485628 <col:58, line:541:5>
|     `-ReturnStmt 0x55d1d9485618 <line:540:9, col:39>
|       `-CallExpr 0x55d1d94855e0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d9485500 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d9485580 <col:21> 'const char *' lvalue ParmVar 0x55d1d945a918 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d1d94855a0 <col:30> 'P' lvalue ParmVar 0x55d1d945a990 'parser' 'P'
|         `-DeclRefExpr 0x55d1d94855c0 <col:38> 'T' lvalue ParmVar 0x55d1d945aa38 'x' 'T &'
|-FunctionTemplateDecl 0x55d1d945b008 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55d1d945ac28 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d945aca8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d1d945af68 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d1d945ad68 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d945ade0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d945ae88 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55d1d9485760 <col:60, line:545:5>
|     `-ReturnStmt 0x55d1d9485750 <line:544:9, col:41>
|       `-CallExpr 0x55d1d9485718 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d9485650 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d94856b8 <col:23> 'const char *' lvalue ParmVar 0x55d1d945ad68 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d1d94856d8 <col:32> 'P' lvalue ParmVar 0x55d1d945ade0 'parser' 'P'
|         `-DeclRefExpr 0x55d1d94856f8 <col:40> 'T' lvalue ParmVar 0x55d1d945ae88 'x' 'T &'
|-FunctionTemplateDecl 0x55d1d945b458 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55d1d945b078 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d945b0f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d1d945b3b8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d1d945b1b8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d945b230 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d945b2d8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55d1d9485898 <col:60, line:549:5>
|     `-ReturnStmt 0x55d1d9485888 <line:548:9, col:41>
|       `-CallExpr 0x55d1d9485850 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d9485788 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d94857f0 <col:23> 'const char *' lvalue ParmVar 0x55d1d945b1b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d1d9485810 <col:32> 'P' lvalue ParmVar 0x55d1d945b230 'parser' 'P'
|         `-DeclRefExpr 0x55d1d9485830 <col:40> 'T' lvalue ParmVar 0x55d1d945b2d8 'x' 'T &'
|-FunctionTemplateDecl 0x55d1d945b8a8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55d1d945b4c8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d945b548 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d1d945b808 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d1d945b608 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d945b680 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d945b728 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55d1d94859d0 <col:61, line:553:5>
|     `-ReturnStmt 0x55d1d94859c0 <line:552:9, col:42>
|       `-CallExpr 0x55d1d9485988 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d94858c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d9485928 <col:24> 'const char *' lvalue ParmVar 0x55d1d945b608 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d1d9485948 <col:33> 'P' lvalue ParmVar 0x55d1d945b680 'parser' 'P'
|         `-DeclRefExpr 0x55d1d9485968 <col:41> 'T' lvalue ParmVar 0x55d1d945b728 'x' 'T &'
|-FunctionTemplateDecl 0x55d1d945bd88 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55d1d945b918 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d945b998 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d1d945bce8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55d1d945ba58 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d945bad8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55d1d945bb50 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d945bbf8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55d1d9485b48 <col:69, line:557:5>
|     `-ReturnStmt 0x55d1d9485b38 <line:556:9, col:46>
|       `-CallExpr 0x55d1d9485af8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d94859f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d9485a78 <col:21> 'const char *' lvalue ParmVar 0x55d1d945ba58 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d1d9485a98 <col:30> 'int' lvalue ParmVar 0x55d1d945bad8 'flags' 'int'
|         |-DeclRefExpr 0x55d1d9485ab8 <col:37> 'P' lvalue ParmVar 0x55d1d945bb50 'parser' 'P'
|         `-DeclRefExpr 0x55d1d9485ad8 <col:45> 'T' lvalue ParmVar 0x55d1d945bbf8 'x' 'T &'
|-FunctionTemplateDecl 0x55d1d945c098 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55d1d945be00 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d1d945bff8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55d1d945beb0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d945bf28 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55d1d9485c88 <col:56, line:571:5>
|     `-ReturnStmt 0x55d1d9485c78 <line:570:9, col:48>
|       `-CallExpr 0x55d1d9485c40 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d9485b70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d9485be0 <col:30> 'const char *' lvalue ParmVar 0x55d1d945beb0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d1d9485c00 <col:39> 'int' 0
|         `-DeclRefExpr 0x55d1d9485c20 <col:42> 'P' lvalue ParmVar 0x55d1d945bf28 'parser' 'P'
|-FunctionTemplateDecl 0x55d1d945c428 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55d1d945c100 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d1d945c388 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55d1d945c1b0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d945c230 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55d1d945c2a8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55d1d9485e58 <col:67, line:576:5>
|     |-CallExpr 0x55d1d9485de0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d1d9485ca0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55d1d9485ce0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55d1d9485cf0 <col:39> 'const char *' lvalue ParmVar 0x55d1d945c1b0 'keyword' 'const char *'
|     | |-BinaryOperator 0x55d1d9485da0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55d1d9485d50 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55d1d9485d10 <col:48> 'int' lvalue ParmVar 0x55d1d945c230 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55d1d9485d88 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55d1d9485d68 <col:56> 'const int' lvalue Var 0x55d1d944de30 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55d1d9485dc0 <col:68> 'P' lvalue ParmVar 0x55d1d945c2a8 'parser' 'P'
|     `-ReturnStmt 0x55d1d9485e48 <line:575:9, col:17>
|       `-UnaryOperator 0x55d1d9485e30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d1d9485e20 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d1d945c878 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55d1d945c498 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d945c518 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d1d945c7d8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d1d945c5d8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d945c650 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d945c6f8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55d1d9485fc8 <col:62, line:592:5>
|     `-ReturnStmt 0x55d1d9485fb8 <line:591:9, col:51>
|       `-CallExpr 0x55d1d9485f78 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d9485e88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d9485ef8 <col:30> 'const char *' lvalue ParmVar 0x55d1d945c5d8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d1d9485f18 <col:39> 'int' 0
|         |-DeclRefExpr 0x55d1d9485f38 <col:42> 'P' lvalue ParmVar 0x55d1d945c650 'parser' 'P'
|         `-DeclRefExpr 0x55d1d9485f58 <col:50> 'T' lvalue ParmVar 0x55d1d945c6f8 'x' 'T &'
|-FunctionTemplateDecl 0x55d1d945cd58 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55d1d945c8e8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d945c968 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d1d945ccb8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55d1d945ca28 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d945caa8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55d1d945cb20 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d945cbc8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55d1d94861c0 <col:73, line:597:5>
|     |-CallExpr 0x55d1d9486140 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d1d9485fe0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55d1d9486020 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55d1d9486030 <col:39> 'const char *' lvalue ParmVar 0x55d1d945ca28 'keyword' 'const char *'
|     | |-BinaryOperator 0x55d1d94860e0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55d1d9486090 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55d1d9486050 <col:48> 'int' lvalue ParmVar 0x55d1d945caa8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55d1d94860c8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55d1d94860a8 <col:56> 'const int' lvalue Var 0x55d1d944de30 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55d1d9486100 <col:68> 'P' lvalue ParmVar 0x55d1d945cb20 'parser' 'P'
|     | `-DeclRefExpr 0x55d1d9486120 <col:76> 'T' lvalue ParmVar 0x55d1d945cbc8 'x' 'T &'
|     `-ReturnStmt 0x55d1d94861b0 <line:596:9, col:17>
|       `-UnaryOperator 0x55d1d9486198 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d1d9486188 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d1d945d308 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55d1d945cdd0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d945ce48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d1d945d268 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55d1d945cf08 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d945cf80 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d945d140 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55d1d9486330 <col:65, line:614:5>
|     `-ReturnStmt 0x55d1d9486320 <line:613:9, col:46>
|       `-CallExpr 0x55d1d94862e0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d94861f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d9486260 <col:25> 'const char *' lvalue ParmVar 0x55d1d945cf08 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d1d9486280 <col:34> 'int' 0
|         |-DeclRefExpr 0x55d1d94862a0 <col:37> 'P' lvalue ParmVar 0x55d1d945cf80 'parser' 'P'
|         `-DeclRefExpr 0x55d1d94862c0 <col:45> 'Vector<T>' lvalue ParmVar 0x55d1d945d140 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55d1d945d738 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55d1d945d378 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d1d945d698 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55d1d945d430 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d945d580 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55d1d9486550 <col:55, line:618:5>
|     `-ReturnStmt 0x55d1d9486540 <line:617:9, col:55>
|       `-CallExpr 0x55d1d9486500 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d9486358 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d94863c8 <col:25> 'const char *' lvalue ParmVar 0x55d1d945d430 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d1d94863e8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55d1d94864c0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55d1d94864e0 <col:54> 'Vector<T>' lvalue ParmVar 0x55d1d945d580 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55d1d945dd08 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55d1d945d7a0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d945d818 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d1d945dc68 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55d1d945d8d8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d945d958 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55d1d945d9d0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d945db20 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55d1d9486748 <col:76, line:623:5>
|     |-CallExpr 0x55d1d94866c8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d1d9486568 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55d1d94865a8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55d1d94865b8 <col:34> 'const char *' lvalue ParmVar 0x55d1d945d8d8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55d1d9486668 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55d1d9486618 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55d1d94865d8 <col:43> 'int' lvalue ParmVar 0x55d1d945d958 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55d1d9486650 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55d1d9486630 <col:51> 'const int' lvalue Var 0x55d1d944de30 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55d1d9486688 <col:63> 'P' lvalue ParmVar 0x55d1d945d9d0 'parser' 'P'
|     | `-DeclRefExpr 0x55d1d94866a8 <col:71> 'Vector<T>' lvalue ParmVar 0x55d1d945db20 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55d1d9486738 <line:622:9, col:17>
|       `-UnaryOperator 0x55d1d9486720 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d1d9486710 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d1d945e248 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55d1d945dd80 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d945ddf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d1d945e1a8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55d1d945deb8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d945df38 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55d1d945e080 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55d1d94869b0 <col:66, line:627:5>
|     `-ReturnStmt 0x55d1d94869a0 <line:626:9, col:59>
|       `-CallExpr 0x55d1d9486960 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d1d9486778 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d1d94867e8 <col:25> 'const char *' lvalue ParmVar 0x55d1d945deb8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d1d9486808 <col:34> 'int' lvalue ParmVar 0x55d1d945df38 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55d1d9486920 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55d1d9486940 <col:58> 'Vector<T>' lvalue ParmVar 0x55d1d945e080 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55d1d945e2d8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55d1d9486a30 <col:25, line:633:5>
|   `-ReturnStmt 0x55d1d9486a20 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55d1d9486a08 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55d1d94869d8 <col:16> 'const bool' lvalue ->_status 0x55d1d946b7a8
|         `-CXXThisExpr 0x55d1d94869c8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55d1d945e458 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55d1d945e390 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55d1d9486b18 <col:27, line:639:5>
|   |-BinaryOperator 0x55d1d9486ac0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55d1d9486a48 <col:9> 'bool' lvalue ParmVar 0x55d1d945e390 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55d1d9486aa8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55d1d9486a78 <col:13> 'bool' lvalue ->_status 0x55d1d946b7a8
|   |     `-CXXThisExpr 0x55d1d9486a68 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55d1d9486b08 <line:638:9, col:17>
|     `-UnaryOperator 0x55d1d9486af0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d1d9486ae0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55d1d945e5d8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55d1d945e518 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55d1d9486c08 <col:39, line:644:5>
|   |-BinaryOperator 0x55d1d9486bb0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55d1d9486b38 <col:9> 'bool' lvalue ParmVar 0x55d1d945e518 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55d1d9486b98 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55d1d9486b68 <col:13> 'const bool' lvalue ->_status 0x55d1d946b7a8
|   |     `-CXXThisExpr 0x55d1d9486b58 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55d1d9486bf8 <line:643:9, col:17>
|     `-UnaryOperator 0x55d1d9486be0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d1d9486bd0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55d1d945e6a0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55d1d9486cb0 <col:30, line:651:5>
|   `-ReturnStmt 0x55d1d9486ca0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55d1d9486c88 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55d1d9486c58 <col:16> 'bool' lvalue ->_read_status 0x55d1d9362060
|         `-ImplicitCastExpr 0x55d1d9486c38 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55d1d9486c28 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55d1d945e7e8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55d1d945e758 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55d1d9486db8 <col:32, line:658:5>
|   |-BinaryOperator 0x55d1d9486d60 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55d1d9486cc8 <col:9> 'bool' lvalue ParmVar 0x55d1d945e758 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55d1d9486d48 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55d1d9486d18 <col:13> 'bool' lvalue ->_read_status 0x55d1d9362060
|   |     `-ImplicitCastExpr 0x55d1d9486cf8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55d1d9486ce8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55d1d9486da8 <line:657:9, col:17>
|     `-UnaryOperator 0x55d1d9486d90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d1d9486d80 <col:17> 'Args *' this
|-CXXMethodDecl 0x55d1d945e938 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55d1d945e8a8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55d1d9486ec8 <col:44, line:663:5>
|   |-BinaryOperator 0x55d1d9486e70 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55d1d9486dd8 <col:9> 'bool' lvalue ParmVar 0x55d1d945e8a8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55d1d9486e58 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55d1d9486e28 <col:13> 'bool' lvalue ->_read_status 0x55d1d9362060
|   |     `-ImplicitCastExpr 0x55d1d9486e08 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55d1d9486df8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55d1d9486eb8 <line:662:9, col:17>
|     `-UnaryOperator 0x55d1d9486ea0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d1d9486e90 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55d1d945ea00 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55d1d945eac8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55d1d945eb90 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55d1d945ec58 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55d1d945ef68 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55d1d945ecf8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d1d945eec8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55d1d945edd8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55d1d9487280 <col:19, line:706:5>
|     `-IfStmt 0x55d1d9487258 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55d1d9486fc8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55d1d9487188 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55d1d9487158 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55d1d9487118 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55d1d9487020 <col:42> '<bound member function type>' ->simple_slot 0x55d1d9480410
|       |     | `-CXXThisExpr 0x55d1d9487010 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55d1d94870b8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55d1d9487070 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55d1d91eb848
|       |     | `-DeclRefExpr 0x55d1d9487050 <col:55> 'T' lvalue ParmVar 0x55d1d945edd8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55d1d94870f8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55d1d9487248 <line:705:13, col:34>
|         `-CallExpr 0x55d1d9487220 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55d1d94871a8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55d1d9487200 <col:33> 'T' lvalue ParmVar 0x55d1d945edd8 'x' 'T &'
|-FunctionTemplateDecl 0x55d1d945f238 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55d1d945efc8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d1d945f198 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55d1d945f0a8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55d1d9487660 <col:31, line:717:5>
|     |-DeclStmt 0x55d1d94873c0 <line:713:9, col:23>
|     | `-VarDecl 0x55d1d94872a8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55d1d9487398 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55d1d9487320 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55d1d9487378 <col:21> 'T' lvalue ParmVar 0x55d1d945f0a8 'x' 'T &'
|     |-IfStmt 0x55d1d9487610 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55d1d94874b8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55d1d94875f0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55d1d9487590 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55d1d9487520 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d1d93a2948 0x55d1d93a2568 0x55d1d93a2198 0x55d1d93a1db8 0x55d1d93a19d8 0x55d1d93a1608
|     |   | `-DeclRefExpr 0x55d1d9487500 <col:14> 'T *' lvalue Var 0x55d1d94872a8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55d1d94875d0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55d1d9487648 <line:716:9, col:16>
|       `-DeclRefExpr 0x55d1d9487628 <col:16> 'T *' lvalue Var 0x55d1d94872a8 's' 'T *'
|-FunctionTemplateDecl 0x55d1d945f648 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55d1d945f298 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d1d945f318 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55d1d945f5a8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55d1d945f3f8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55d1d945f498 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55d1d9487970 <col:37, line:726:5>
|     |-IfStmt 0x55d1d9487900 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55d1d9487920 <line:723:13, col:26>
|     | | `-VarDecl 0x55d1d94876c8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55d1d94877b8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55d1d9487740 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55d1d9487798 <col:25> 'T' lvalue ParmVar 0x55d1d945f3f8 'x' 'T &'
|     | |-DeclRefExpr 0x55d1d94877e0 <col:16> 'T *' lvalue Var 0x55d1d94876c8 's' 'T *'
|     | `-BinaryOperator 0x55d1d94878e0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55d1d9487890 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55d1d9487820 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d1d93a2948 0x55d1d93a2568 0x55d1d93a2198 0x55d1d93a1db8 0x55d1d93a19d8 0x55d1d93a1608
|     |   | `-DeclRefExpr 0x55d1d9487800 <col:14> 'T *' lvalue Var 0x55d1d94876c8 's' 'T *'
|     |   `-DeclRefExpr 0x55d1d94878c0 <col:18> 'const V' lvalue ParmVar 0x55d1d945f498 'value' 'const V &'
|     `-ReturnStmt 0x55d1d9487960 <line:725:9, col:17>
|       `-UnaryOperator 0x55d1d9487948 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d1d9487938 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d1d945fa48 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55d1d945f6b0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d1d945f9a8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55d1d945f760 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d945f7e0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55d1d945f888 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55d1d9488790 <col:65, line:737:5>
|     |-DeclStmt 0x55d1d9487a08 <line:732:9, col:26>
|     | `-VarDecl 0x55d1d94879a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55d1d9488758 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55d1d9488778 <line:733:13, col:58>
|       | `-VarDecl 0x55d1d9487a30 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55d1d9487c10 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55d1d9487be0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55d1d9487bc8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55d1d9487ba8 <col:26, col:58> 'String' (CXXTemporary 0x55d1d9487ba8)
|       |           `-CXXMemberCallExpr 0x55d1d9487b38 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55d1d9487aa8 <col:26> '<bound member function type>' ->find 0x55d1d947fa28
|       |             | `-CXXThisExpr 0x55d1d9487a98 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55d1d9487b70 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d1d9487ad8 <col:31> 'const char *' lvalue ParmVar 0x55d1d945f760 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55d1d9487b88 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d1d9487af8 <col:40> 'int' lvalue ParmVar 0x55d1d945f7e0 'flags' 'int'
|       |             `-DeclRefExpr 0x55d1d9487b18 <col:47> 'Args::Slot *' lvalue Var 0x55d1d94879a0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55d1d9487cc8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55d1d9487cb0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55d1d9487c90 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55d1d9487c60 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55d1d91ad808
|       |       `-ImplicitCastExpr 0x55d1d9487c48 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55d1d9487c28 <col:20> 'String' lvalue Var 0x55d1d9487a30 'str' 'String'
|       `-CompoundStmt 0x55d1d9488738 <col:61, line:736:9>
|         |-DeclStmt 0x55d1d9488180 <line:734:13, col:76>
|         | `-VarDecl 0x55d1d9487d18 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55d1d9488150 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55d1d94880c0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55d1d9488108 <col:60> 'T' lvalue ParmVar 0x55d1d945f888 'variable' 'T &'
|         |     `-UnaryOperator 0x55d1d9488138 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55d1d9488128 <col:71> 'Args *' this
|         `-CallExpr 0x55d1d9488708 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55d1d94881a8 <col:13> '<bound member function type>' ->postparse 0x55d1d947fc38
|           | `-CXXThisExpr 0x55d1d9488198 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55d1d94886c8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55d1d94881d8 <col:23> 'T *' lvalue Var 0x55d1d9487d18 's' 'T *'
|           | `-CallExpr 0x55d1d9488688 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55d1d9488460 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55d1d9488560 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55d1d9488580 <col:86> 'String' lvalue Var 0x55d1d9487a30 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55d1d9488630 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55d1d94885c0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d1d93a2948 0x55d1d93a2568 0x55d1d93a2198 0x55d1d93a1db8 0x55d1d93a19d8 0x55d1d93a1608
|           |   | `-DeclRefExpr 0x55d1d94885a0 <col:92> 'T *' lvalue Var 0x55d1d9487d18 's' 'T *'
|           |   `-UnaryOperator 0x55d1d9488670 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55d1d9488660 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55d1d94886e8 <col:103> 'Args::Slot *' lvalue Var 0x55d1d94879a0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d1d945ff98 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55d1d945fab8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d1d945fb38 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55d1d945fef8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55d1d945fbf8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d945fc78 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55d1d945fd18 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55d1d945fdb8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55d1d9489630 <col:88, line:745:5>
|     |-DeclStmt 0x55d1d9488828 <line:741:9, col:26>
|     | `-VarDecl 0x55d1d94887c0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55d1d9488a48 <line:742:9, col:55>
|     | `-VarDecl 0x55d1d9488850 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55d1d9488a30 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55d1d9488a00 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55d1d94889e8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55d1d94889c8 <col:22, col:54> 'String' (CXXTemporary 0x55d1d94889c8)
|     |           `-CXXMemberCallExpr 0x55d1d9488958 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55d1d94888c8 <col:22> '<bound member function type>' ->find 0x55d1d947fa28
|     |             | `-CXXThisExpr 0x55d1d94888b8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55d1d9488990 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55d1d94888f8 <col:27> 'const char *' lvalue ParmVar 0x55d1d945fbf8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55d1d94889a8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55d1d9488918 <col:36> 'int' lvalue ParmVar 0x55d1d945fc78 'flags' 'int'
|     |             `-DeclRefExpr 0x55d1d9488938 <col:43> 'Args::Slot *' lvalue Var 0x55d1d94887c0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55d1d9488e20 <line:743:9, col:72>
|     | `-VarDecl 0x55d1d9488a98 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55d1d9488df0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55d1d9488d60 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55d1d9488da8 <col:56> 'T' lvalue ParmVar 0x55d1d945fd18 'variable' 'T &'
|     |     `-UnaryOperator 0x55d1d9488dd8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55d1d9488dc8 <col:67> 'Args *' this
|     `-CallExpr 0x55d1d9489600 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55d1d9488e48 <col:9> '<bound member function type>' ->postparse 0x55d1d947fc38
|       | `-CXXThisExpr 0x55d1d9488e38 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55d1d94895c0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55d1d9488e78 <col:19> 'T *' lvalue Var 0x55d1d9488a98 's' 'T *'
|       | `-ParenExpr 0x55d1d94895a0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55d1d9489570 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55d1d9489558 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55d1d9489540 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55d1d9489520 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55d1d94894f0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55d1d91ad808
|       |     |       `-ImplicitCastExpr 0x55d1d94894d8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55d1d9488e98 <col:25> 'String' lvalue Var 0x55d1d9488850 'str' 'String'
|       |     |-CallExpr 0x55d1d9489348 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55d1d9489120 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55d1d9489220 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55d1d9489240 <col:89> 'String' lvalue Var 0x55d1d9488850 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55d1d94892f0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55d1d9489280 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d1d93a2948 0x55d1d93a2568 0x55d1d93a2198 0x55d1d93a1db8 0x55d1d93a19d8 0x55d1d93a1608
|       |     | | `-DeclRefExpr 0x55d1d9489260 <col:95> 'T *' lvalue Var 0x55d1d9488a98 's' 'T *'
|       |     | `-UnaryOperator 0x55d1d9489330 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55d1d9489320 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55d1d94894b8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55d1d9489498 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55d1d9489468 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55d1d9489418 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55d1d94893a8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d1d93a2948 0x55d1d93a2568 0x55d1d93a2198 0x55d1d93a1db8 0x55d1d93a19d8 0x55d1d93a1608
|       |         | | `-DeclRefExpr 0x55d1d9489388 <col:109> 'T *' lvalue Var 0x55d1d9488a98 's' 'T *'
|       |         | `-DeclRefExpr 0x55d1d9489448 <col:113> 'const V' lvalue ParmVar 0x55d1d945fdb8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55d1d9489488 <col:120> 'bool' true
|       `-DeclRefExpr 0x55d1d94895e0 <col:128> 'Args::Slot *' lvalue Var 0x55d1d94887c0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d1d94604c8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55d1d9460010 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d9460088 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d1d9460428 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55d1d9460148 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d94601c8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55d1d9460240 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d94602e8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55d1d948c500 <col:75, line:754:5>
|     |-DeclStmt 0x55d1d94896d8 <line:749:9, col:26>
|     | `-VarDecl 0x55d1d9489670 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55d1d948a1f0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55d1d948a210 <line:750:13, col:58>
|       | `-VarDecl 0x55d1d9489700 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55d1d94898e0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55d1d94898b0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55d1d9489898 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55d1d9489878 <col:26, col:58> 'String' (CXXTemporary 0x55d1d9489878)
|       |           `-CXXMemberCallExpr 0x55d1d9489808 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55d1d9489778 <col:26> '<bound member function type>' ->find 0x55d1d947fa28
|       |             | `-CXXThisExpr 0x55d1d9489768 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55d1d9489840 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d1d94897a8 <col:31> 'const char *' lvalue ParmVar 0x55d1d9460148 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55d1d9489858 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d1d94897c8 <col:40> 'int' lvalue ParmVar 0x55d1d94601c8 'flags' 'int'
|       |             `-DeclRefExpr 0x55d1d94897e8 <col:47> 'Args::Slot *' lvalue Var 0x55d1d9489670 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55d1d9489998 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55d1d9489980 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55d1d9489960 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55d1d9489930 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55d1d91ad808
|       |       `-ImplicitCastExpr 0x55d1d9489918 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55d1d94898f8 <col:20> 'String' lvalue Var 0x55d1d9489700 'str' 'String'
|       `-CompoundStmt 0x55d1d948a1d0 <col:61, line:753:9>
|         |-DeclStmt 0x55d1d9489d70 <line:751:13, col:63>
|         | `-VarDecl 0x55d1d94899e8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55d1d9489d40 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55d1d9489cb0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55d1d9489cf8 <col:47> 'T' lvalue ParmVar 0x55d1d94602e8 'variable' 'T &'
|         |     `-UnaryOperator 0x55d1d9489d28 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55d1d9489d18 <col:58> 'Args *' this
|         `-CallExpr 0x55d1d948a1a0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55d1d9489d98 <col:13> '<bound member function type>' ->postparse 0x55d1d947fc38
|           | `-CXXThisExpr 0x55d1d9489d88 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55d1d948a160 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55d1d9489dc8 <col:23> 'T *' lvalue Var 0x55d1d94899e8 's' 'T *'
|           | `-CallExpr 0x55d1d948a120 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55d1d9489fb0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55d1d9489ff8 <col:56> 'P' lvalue ParmVar 0x55d1d9460240 'parser' 'P'
|           |   |-DeclRefExpr 0x55d1d948a018 <col:64> 'String' lvalue Var 0x55d1d9489700 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55d1d948a0c8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55d1d948a058 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d1d93a2948 0x55d1d93a2568 0x55d1d93a2198 0x55d1d93a1db8 0x55d1d93a19d8 0x55d1d93a1608
|           |   | `-DeclRefExpr 0x55d1d948a038 <col:70> 'T *' lvalue Var 0x55d1d94899e8 's' 'T *'
|           |   `-UnaryOperator 0x55d1d948a108 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55d1d948a0f8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55d1d948a180 <col:81> 'Args::Slot *' lvalue Var 0x55d1d9489670 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d1d94681b8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55d1d9460540 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d1d94605b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55d1d9460638 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55d1d9468118 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55d1d9467d90 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d9467e10 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55d1d9467e88 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d9467f28 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55d1d9467fc8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55d1d948d288 <col:98, line:762:5>
|     |-DeclStmt 0x55d1d948c598 <line:758:9, col:26>
|     | `-VarDecl 0x55d1d948c530 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55d1d948c7b8 <line:759:9, col:55>
|     | `-VarDecl 0x55d1d948c5c0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55d1d948c7a0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55d1d948c770 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55d1d948c758 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55d1d948c738 <col:22, col:54> 'String' (CXXTemporary 0x55d1d948c738)
|     |           `-CXXMemberCallExpr 0x55d1d948c6c8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55d1d948c638 <col:22> '<bound member function type>' ->find 0x55d1d947fa28
|     |             | `-CXXThisExpr 0x55d1d948c628 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55d1d948c700 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55d1d948c668 <col:27> 'const char *' lvalue ParmVar 0x55d1d9467d90 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55d1d948c718 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55d1d948c688 <col:36> 'int' lvalue ParmVar 0x55d1d9467e10 'flags' 'int'
|     |             `-DeclRefExpr 0x55d1d948c6a8 <col:43> 'Args::Slot *' lvalue Var 0x55d1d948c530 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55d1d948cbd0 <line:760:9, col:59>
|     | `-VarDecl 0x55d1d948c808 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55d1d948cba0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55d1d948cb10 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55d1d948cb58 <col:43> 'T' lvalue ParmVar 0x55d1d9467f28 'variable' 'T &'
|     |     `-UnaryOperator 0x55d1d948cb88 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55d1d948cb78 <col:54> 'Args *' this
|     `-CallExpr 0x55d1d948d258 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55d1d948cbf8 <col:9> '<bound member function type>' ->postparse 0x55d1d947fc38
|       | `-CXXThisExpr 0x55d1d948cbe8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55d1d948d218 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55d1d948cc28 <col:19> 'T *' lvalue Var 0x55d1d948c808 's' 'T *'
|       | `-ParenExpr 0x55d1d948d1f8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55d1d948d1c8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55d1d948d1b0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55d1d948d198 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55d1d948d178 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55d1d948d148 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55d1d91ad808
|       |     |       `-ImplicitCastExpr 0x55d1d948d130 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55d1d948cc48 <col:25> 'String' lvalue Var 0x55d1d948c5c0 'str' 'String'
|       |     |-CallExpr 0x55d1d948cfa0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55d1d948ce30 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55d1d948ce78 <col:59> 'P' lvalue ParmVar 0x55d1d9467e88 'parser' 'P'
|       |     | |-DeclRefExpr 0x55d1d948ce98 <col:67> 'String' lvalue Var 0x55d1d948c5c0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55d1d948cf48 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55d1d948ced8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d1d93a2948 0x55d1d93a2568 0x55d1d93a2198 0x55d1d93a1db8 0x55d1d93a19d8 0x55d1d93a1608
|       |     | | `-DeclRefExpr 0x55d1d948ceb8 <col:73> 'T *' lvalue Var 0x55d1d948c808 's' 'T *'
|       |     | `-UnaryOperator 0x55d1d948cf88 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55d1d948cf78 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55d1d948d110 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55d1d948d0f0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55d1d948d0c0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55d1d948d070 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55d1d948d000 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d1d93a2948 0x55d1d93a2568 0x55d1d93a2198 0x55d1d93a1db8 0x55d1d93a19d8 0x55d1d93a1608
|       |         | | `-DeclRefExpr 0x55d1d948cfe0 <col:87> 'T *' lvalue Var 0x55d1d948c808 's' 'T *'
|       |         | `-DeclRefExpr 0x55d1d948d0a0 <col:91> 'const V' lvalue ParmVar 0x55d1d9467fc8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55d1d948d0e0 <col:98> 'bool' true
|       `-DeclRefExpr 0x55d1d948d238 <col:106> 'Args::Slot *' lvalue Var 0x55d1d948c530 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d1d9468828 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55d1d9468238 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d94682b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d1d9468338 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d1d9468788 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d1d9468400 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d9468480 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55d1d94684f8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d9468598 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55d1d9468638 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55d1d948e268 <col:60, line:773:5>
|     |-DeclStmt 0x55d1d948d330 <line:767:9, col:26>
|     | `-VarDecl 0x55d1d948d2c8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55d1d948e230 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55d1d948e250 <line:768:13, col:58>
|       | `-VarDecl 0x55d1d948d358 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55d1d948d538 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55d1d948d508 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55d1d948d4f0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55d1d948d4d0 <col:26, col:58> 'String' (CXXTemporary 0x55d1d948d4d0)
|       |           `-CXXMemberCallExpr 0x55d1d948d460 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55d1d948d3d0 <col:26> '<bound member function type>' ->find 0x55d1d947fa28
|       |             | `-CXXThisExpr 0x55d1d948d3c0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55d1d948d498 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d1d948d400 <col:31> 'const char *' lvalue ParmVar 0x55d1d9468400 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55d1d948d4b0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d1d948d420 <col:40> 'int' lvalue ParmVar 0x55d1d9468480 'flags' 'int'
|       |             `-DeclRefExpr 0x55d1d948d440 <col:47> 'Args::Slot *' lvalue Var 0x55d1d948d2c8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55d1d948d5f0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55d1d948d5d8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55d1d948d5b8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55d1d948d588 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55d1d91ad808
|       |       `-ImplicitCastExpr 0x55d1d948d570 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55d1d948d550 <col:20> 'String' lvalue Var 0x55d1d948d358 'str' 'String'
|       `-CompoundStmt 0x55d1d948e208 <col:61, line:772:9>
|         |-DeclStmt 0x55d1d948d930 <line:769:13, col:66>
|         | `-VarDecl 0x55d1d948d648 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55d1d948d900 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55d1d948d870 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55d1d948d8b8 <col:49> 'T1' lvalue ParmVar 0x55d1d9468598 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55d1d948d8e8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55d1d948d8d8 <col:61> 'Args *' this
|         |-DeclStmt 0x55d1d948dca0 <line:770:13, col:66>
|         | `-VarDecl 0x55d1d948d9b8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55d1d948dc70 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55d1d948dbe0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55d1d948dc28 <col:49> 'T2' lvalue ParmVar 0x55d1d9468638 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55d1d948dc58 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55d1d948dc48 <col:61> 'Args *' this
|         `-CallExpr 0x55d1d948e1d8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55d1d948dcc8 <col:13> '<bound member function type>' ->postparse 0x55d1d947fc38
|           | `-CXXThisExpr 0x55d1d948dcb8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55d1d948e198 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55d1d948dd38 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55d1d948dcf8 <col:23> 'T1 *' lvalue Var 0x55d1d948d648 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55d1d948dd18 <col:29> 'T2 *' lvalue Var 0x55d1d948d9b8 's2' 'T2 *'
|           | `-CallExpr 0x55d1d948e150 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55d1d948df20 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55d1d948df68 <col:63> 'P' lvalue ParmVar 0x55d1d94684f8 'parser' 'P'
|           |   |-DeclRefExpr 0x55d1d948df88 <col:71> 'String' lvalue Var 0x55d1d948d358 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55d1d948e038 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55d1d948dfc8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d1d93a2948 0x55d1d93a2568 0x55d1d93a2198 0x55d1d93a1db8 0x55d1d93a19d8 0x55d1d93a1608
|           |   | `-DeclRefExpr 0x55d1d948dfa8 <col:77> 'T1 *' lvalue Var 0x55d1d948d648 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55d1d948e0f8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55d1d948e088 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d1d93a2948 0x55d1d93a2568 0x55d1d93a2198 0x55d1d93a1db8 0x55d1d93a19d8 0x55d1d93a1608
|           |   | `-DeclRefExpr 0x55d1d948e068 <col:82> 'T2 *' lvalue Var 0x55d1d948d9b8 's2' 'T2 *'
|           |   `-UnaryOperator 0x55d1d948e138 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55d1d948e128 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55d1d948e1b8 <col:94> 'Args::Slot *' lvalue Var 0x55d1d948d2c8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d1d9468c18 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55d1d94688a8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d1d9468b78 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55d1d9468960 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d94689e0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55d1d9468a58 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55d1d948e780 <col:67, line:780:5>
|     |-DeclStmt 0x55d1d948e300 <line:777:9, col:26>
|     | `-VarDecl 0x55d1d948e298 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55d1d948e748 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55d1d948e768 <line:778:13, col:58>
|       | `-VarDecl 0x55d1d948e328 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55d1d948e508 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55d1d948e4d8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55d1d948e4c0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55d1d948e4a0 <col:26, col:58> 'String' (CXXTemporary 0x55d1d948e4a0)
|       |           `-CXXMemberCallExpr 0x55d1d948e430 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55d1d948e3a0 <col:26> '<bound member function type>' ->find 0x55d1d947fa28
|       |             | `-CXXThisExpr 0x55d1d948e390 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55d1d948e468 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d1d948e3d0 <col:31> 'const char *' lvalue ParmVar 0x55d1d9468960 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55d1d948e480 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d1d948e3f0 <col:40> 'int' lvalue ParmVar 0x55d1d94689e0 'flags' 'int'
|       |             `-DeclRefExpr 0x55d1d948e410 <col:47> 'Args::Slot *' lvalue Var 0x55d1d948e298 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55d1d948e5c0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55d1d948e5a8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55d1d948e588 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55d1d948e558 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55d1d91ad808
|       |       `-ImplicitCastExpr 0x55d1d948e540 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55d1d948e520 <col:20> 'String' lvalue Var 0x55d1d948e328 'str' 'String'
|       `-CallExpr 0x55d1d948e718 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55d1d948e5e8 <col:13> '<bound member function type>' ->postparse 0x55d1d947fc38
|         | `-CXXThisExpr 0x55d1d948e5d8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55d1d948e6c8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55d1d948e638 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55d1d948e618 <col:23> 'P' lvalue ParmVar 0x55d1d9468a58 'parser' 'P'
|         | |-DeclRefExpr 0x55d1d948e680 <col:36> 'String' lvalue Var 0x55d1d948e328 'str' 'String'
|         | `-UnaryOperator 0x55d1d948e6b0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55d1d948e6a0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55d1d948e6f8 <col:49> 'Args::Slot *' lvalue Var 0x55d1d948e298 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d1d9468fb8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55d1d9468c88 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d1d9468f18 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55d1d9468d40 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d9468dc0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55d1d9468e38 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55d1d948f0f0 <col:71, line:792:5>
|     |-DeclStmt 0x55d1d948e818 <line:784:9, col:26>
|     | `-VarDecl 0x55d1d948e7b0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55d1d948e8e8 <line:785:9, col:29>
|     | `-VarDecl 0x55d1d948e848 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55d1d948e8d0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55d1d948e8b0 <col:28> 'int' 1
|     |-WhileStmt 0x55d1d948efa0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55d1d948efc0 <line:786:16, col:61>
|     | | `-VarDecl 0x55d1d948e910 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55d1d948eaf0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55d1d948eac0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55d1d948eaa8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55d1d948ea88 <col:29, col:61> 'String' (CXXTemporary 0x55d1d948ea88)
|     | |           `-CXXMemberCallExpr 0x55d1d948ea18 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55d1d948e988 <col:29> '<bound member function type>' ->find 0x55d1d947fa28
|     | |             | `-CXXThisExpr 0x55d1d948e978 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55d1d948ea50 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d1d948e9b8 <col:34> 'const char *' lvalue ParmVar 0x55d1d9468d40 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55d1d948ea68 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d1d948e9d8 <col:43> 'int' lvalue ParmVar 0x55d1d9468dc0 'flags' 'int'
|     | |             `-DeclRefExpr 0x55d1d948e9f8 <col:50> 'Args::Slot *' lvalue Var 0x55d1d948e7b0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55d1d948eba8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55d1d948eb90 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55d1d948eb70 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55d1d948eb40 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55d1d91ad808
|     | |       `-ImplicitCastExpr 0x55d1d948eb28 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55d1d948eb08 <col:23> 'String' lvalue Var 0x55d1d948e910 'str' 'String'
|     | `-CompoundStmt 0x55d1d948ef78 <col:64, line:790:9>
|     |   |-CallExpr 0x55d1d948ed00 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55d1d948ebd0 <col:13> '<bound member function type>' ->postparse 0x55d1d947fc38
|     |   | | `-CXXThisExpr 0x55d1d948ebc0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55d1d948ecb0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55d1d948ec20 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55d1d948ec00 <col:23> 'P' lvalue ParmVar 0x55d1d9468e38 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55d1d948ec68 <col:36> 'String' lvalue Var 0x55d1d948e910 'str' 'String'
|     |   | | `-UnaryOperator 0x55d1d948ec98 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55d1d948ec88 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55d1d948ece0 <col:49> 'Args::Slot *' lvalue Var 0x55d1d948e7b0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55d1d948ee98 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55d1d948ed30 <col:13> 'int' lvalue Var 0x55d1d948e848 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55d1d948ee80 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55d1d948ee60 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55d1d948edc8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55d1d948eda8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55d1d948ed90 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55d1d948ed50 <col:28> 'int' lvalue Var 0x55d1d948e848 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55d1d948ed70 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55d1d948ee48 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55d1d948ee18 <col:49> 'bool' lvalue ->_read_status 0x55d1d9362060
|     |   |         `-ImplicitCastExpr 0x55d1d948edf8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55d1d948ede8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55d1d948ef48 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55d1d948eeb8 <col:13> 'int' lvalue ParmVar 0x55d1d9468dc0 'flags' 'int'
|     |     `-UnaryOperator 0x55d1d948ef30 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55d1d948ef18 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55d1d948eef8 <col:23> 'const int' lvalue Var 0x55d1d944db48 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55d1d948f0d0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55d1d948f008 <col:9> 'bool' lvalue ->_read_status 0x55d1d9362060
|       | `-ImplicitCastExpr 0x55d1d948efe8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55d1d948efd8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55d1d948f0b0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55d1d948f090 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55d1d948f078 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55d1d948f038 <col:25> 'int' lvalue Var 0x55d1d948e848 'read_status' 'int'
|           `-IntegerLiteral 0x55d1d948f058 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55d1d9469498 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55d1d9469028 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d94690a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d1d94693f8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55d1d9469168 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d94691e8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55d1d9469260 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d9469308 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55d1d9490080 <col:84, line:805:5>
|     |-DeclStmt 0x55d1d948f198 <line:796:9, col:26>
|     | `-VarDecl 0x55d1d948f130 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55d1d948f268 <line:797:9, col:29>
|     | `-VarDecl 0x55d1d948f1c8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55d1d948f250 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55d1d948f230 <col:28> 'int' 1
|     |-DeclStmt 0x55d1d948f5a0 <line:798:9, col:71>
|     | `-VarDecl 0x55d1d948f2b8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55d1d948f570 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55d1d948f4e0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55d1d948f528 <col:55> 'T' lvalue ParmVar 0x55d1d9469308 'variable' 'T &'
|     |     `-UnaryOperator 0x55d1d948f558 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55d1d948f548 <col:66> 'Args *' this
|     |-WhileStmt 0x55d1d948ff30 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55d1d948ff50 <line:799:16, col:61>
|     | | `-VarDecl 0x55d1d948f5c8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55d1d948f7a8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55d1d948f778 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55d1d948f760 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55d1d948f740 <col:29, col:61> 'String' (CXXTemporary 0x55d1d948f740)
|     | |           `-CXXMemberCallExpr 0x55d1d948f6d0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55d1d948f640 <col:29> '<bound member function type>' ->find 0x55d1d947fa28
|     | |             | `-CXXThisExpr 0x55d1d948f630 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55d1d948f708 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d1d948f670 <col:34> 'const char *' lvalue ParmVar 0x55d1d9469168 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55d1d948f720 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d1d948f690 <col:43> 'int' lvalue ParmVar 0x55d1d94691e8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55d1d948f6b0 <col:50> 'Args::Slot *' lvalue Var 0x55d1d948f130 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55d1d948f860 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55d1d948f848 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55d1d948f828 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55d1d948f7f8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55d1d91ad808
|     | |       `-ImplicitCastExpr 0x55d1d948f7e0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55d1d948f7c0 <col:23> 'String' lvalue Var 0x55d1d948f5c8 'str' 'String'
|     | `-CompoundStmt 0x55d1d948ff08 <col:64, line:803:9>
|     |   |-CallExpr 0x55d1d948fc90 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55d1d948f888 <col:13> '<bound member function type>' ->postparse 0x55d1d947fc38
|     |   | | `-CXXThisExpr 0x55d1d948f878 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55d1d948fc50 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55d1d948f8b8 <col:23> 'T *' lvalue Var 0x55d1d948f2b8 's' 'T *'
|     |   | | `-CallExpr 0x55d1d948fc10 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55d1d948faa0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55d1d948fae8 <col:56> 'P' lvalue ParmVar 0x55d1d9469260 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55d1d948fb08 <col:64> 'String' lvalue Var 0x55d1d948f5c8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55d1d948fbb8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55d1d948fb48 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d1d93a2948 0x55d1d93a2568 0x55d1d93a2198 0x55d1d93a1db8 0x55d1d93a19d8 0x55d1d93a1608
|     |   | |   | `-DeclRefExpr 0x55d1d948fb28 <col:70> 'T *' lvalue Var 0x55d1d948f2b8 's' 'T *'
|     |   | |   `-UnaryOperator 0x55d1d948fbf8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55d1d948fbe8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55d1d948fc70 <col:81> 'Args::Slot *' lvalue Var 0x55d1d948f130 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55d1d948fe28 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55d1d948fcc0 <col:13> 'int' lvalue Var 0x55d1d948f1c8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55d1d948fe10 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55d1d948fdf0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55d1d948fd58 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55d1d948fd38 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55d1d948fd20 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55d1d948fce0 <col:28> 'int' lvalue Var 0x55d1d948f1c8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55d1d948fd00 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55d1d948fdd8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55d1d948fda8 <col:49> 'bool' lvalue ->_read_status 0x55d1d9362060
|     |   |         `-ImplicitCastExpr 0x55d1d948fd88 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55d1d948fd78 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55d1d948fed8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55d1d948fe48 <col:13> 'int' lvalue ParmVar 0x55d1d94691e8 'flags' 'int'
|     |     `-UnaryOperator 0x55d1d948fec0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55d1d948fea8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55d1d948fe88 <col:23> 'const int' lvalue Var 0x55d1d944db48 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55d1d9490060 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55d1d948ff98 <col:9> 'bool' lvalue ->_read_status 0x55d1d9362060
|       | `-ImplicitCastExpr 0x55d1d948ff78 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55d1d948ff68 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55d1d9490040 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55d1d9490020 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55d1d9490008 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55d1d948ffc8 <col:25> 'int' lvalue Var 0x55d1d948f1c8 'read_status' 'int'
|           `-IntegerLiteral 0x55d1d948ffe8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55d1d9469a78 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55d1d9469510 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d1d9469588 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d1d94699d8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55d1d9469648 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d1d94696c8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55d1d9469740 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55d1d9469890 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55d1d9490e88 <col:87, line:821:5>
|     |-DeclStmt 0x55d1d9490130 <line:809:9, col:26>
|     | `-VarDecl 0x55d1d94900c8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55d1d9490200 <line:810:9, col:29>
|     | `-VarDecl 0x55d1d9490160 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55d1d94901e8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55d1d94901c8 <col:28> 'int' 1
|     |-DeclStmt 0x55d1d9490448 <line:811:9, col:38>
|     | `-VarDecl 0x55d1d9490330 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55d1d9490420 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55d1d94903a8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55d1d9490400 <col:29> 'Vector<T>' lvalue ParmVar 0x55d1d9469890 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55d1d9490d38 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55d1d9490d58 <line:812:16, col:61>
|     | | `-VarDecl 0x55d1d9490470 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55d1d9490650 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55d1d9490620 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55d1d9490608 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55d1d94905e8 <col:29, col:61> 'String' (CXXTemporary 0x55d1d94905e8)
|     | |           `-CXXMemberCallExpr 0x55d1d9490578 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55d1d94904e8 <col:29> '<bound member function type>' ->find 0x55d1d947fa28
|     | |             | `-CXXThisExpr 0x55d1d94904d8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55d1d94905b0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d1d9490518 <col:34> 'const char *' lvalue ParmVar 0x55d1d9469648 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55d1d94905c8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d1d9490538 <col:43> 'int' lvalue ParmVar 0x55d1d94696c8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55d1d9490558 <col:50> 'Args::Slot *' lvalue Var 0x55d1d94900c8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55d1d9490708 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55d1d94906f0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55d1d94906d0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55d1d94906a0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55d1d91ad808
|     | |       `-ImplicitCastExpr 0x55d1d9490688 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55d1d9490668 <col:23> 'String' lvalue Var 0x55d1d9490470 'str' 'String'
|     | `-CompoundStmt 0x55d1d9490d00 <col:64, line:819:9>
|     |   |-DeclStmt 0x55d1d94907c8 <line:813:13, col:23>
|     |   | `-VarDecl 0x55d1d9490730 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55d1d94907a8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55d1d9490948 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55d1d94907f0 <col:13> '<bound member function type>' ->postparse 0x55d1d947fc38
|     |   | | `-CXXThisExpr 0x55d1d94907e0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55d1d94908f0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55d1d9490840 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55d1d9490820 <col:23> 'P' lvalue ParmVar 0x55d1d9469740 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55d1d9490888 <col:36> 'String' lvalue Var 0x55d1d9490470 'str' 'String'
|     |   | | |-DeclRefExpr 0x55d1d94908a8 <col:41> 'T' lvalue Var 0x55d1d9490730 'sx' 'T'
|     |   | | `-UnaryOperator 0x55d1d94908d8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55d1d94908c8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55d1d9490928 <col:53> 'Args::Slot *' lvalue Var 0x55d1d94900c8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55d1d9490aa0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55d1d94909d8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55d1d94909a8 <col:17> 'bool' lvalue ->_read_status 0x55d1d9362060
|     |   | |   `-ImplicitCastExpr 0x55d1d9490988 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55d1d9490978 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55d1d9490a78 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55d1d9490a10 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55d1d94909f0 <col:17> 'Vector<T> *' lvalue Var 0x55d1d9490330 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55d1d9490a58 <col:30> 'T' lvalue Var 0x55d1d9490730 'sx' 'T'
|     |   |-BinaryOperator 0x55d1d9490c20 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55d1d9490ab8 <col:13> 'int' lvalue Var 0x55d1d9490160 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55d1d9490c08 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55d1d9490be8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55d1d9490b50 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55d1d9490b30 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55d1d9490b18 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55d1d9490ad8 <col:28> 'int' lvalue Var 0x55d1d9490160 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55d1d9490af8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55d1d9490bd0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55d1d9490ba0 <col:49> 'bool' lvalue ->_read_status 0x55d1d9362060
|     |   |         `-ImplicitCastExpr 0x55d1d9490b80 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55d1d9490b70 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55d1d9490cd0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55d1d9490c40 <col:13> 'int' lvalue ParmVar 0x55d1d94696c8 'flags' 'int'
|     |     `-UnaryOperator 0x55d1d9490cb8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55d1d9490ca0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55d1d9490c80 <col:23> 'const int' lvalue Var 0x55d1d944db48 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55d1d9490e68 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55d1d9490da0 <col:9> 'bool' lvalue ->_read_status 0x55d1d9362060
|       | `-ImplicitCastExpr 0x55d1d9490d80 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55d1d9490d70 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55d1d9490e48 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55d1d9490e28 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55d1d9490e10 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55d1d9490dd0 <col:25> 'int' lvalue Var 0x55d1d9490160 'read_status' 'int'
|           `-IntegerLiteral 0x55d1d9490df0 <col:40> 'int' 1
|-AccessSpecDecl 0x55d1d9469af0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55d1d9469b18 prev 0x55d1d944be48 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55d1d9469c10 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55d1d9469d00 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55d1d9490ec0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55d1d9469df0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55d1d9490ed0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55d1d9469ef0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55d1d9469fa0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55d1d946a048 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55d1d946a048
| | `-ParmVarDecl 0x55d1d946a158 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55d1d946a918 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55d1d946a918
|   `-ParmVarDecl 0x55d1d946aa28 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55d1d946a1c8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55d1d946a328 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55d1d946a520 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55d1d946a3d0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55d1d946a448 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55d1d94910b0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55d1d946a7d8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55d1d9490f20 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55d1d9490ee0 <col:20> 'void *' lvalue ParmVar 0x55d1d946a3d0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55d1d946a840 '_slot' 'char *'
| | | `-CXXNewExpr 0x55d1d9490fa8 <col:32, col:45> 'char *' array Function 0x55d1d8fd14a8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55d1d9490f90 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55d1d9490f60 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55d1d946a448 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55d1d946a8a0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55d1d9491070 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55d1d9491030 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55d1d946a448 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55d1d9491130 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55d1d946a620 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55d1d9469df0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55d1d94911b8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55d1d9491198 <line:840:13, col:22> 'void' array Function 0x55d1d8fd1808 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55d1d9491180 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55d1d9491150 <col:22> 'char *' lvalue ->_slot 0x55d1d946a840
| |         `-CXXThisExpr 0x55d1d9491140 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55d1d946a720 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55d1d9469ef0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55d1d94913a8 <col:22, line:844:9>
| |   `-CallExpr 0x55d1d9491310 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55d1d94912f8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55d1d94912d8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55d1d90dd268 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55d1d9491348 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55d1d9491228 <col:20> 'void *' lvalue ->_ptr 0x55d1d946a7d8
| |     |   `-CXXThisExpr 0x55d1d9491218 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55d1d9491378 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55d1d9491360 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55d1d9491268 <col:26> 'char *' lvalue ->_slot 0x55d1d946a840
| |     |     `-CXXThisExpr 0x55d1d9491258 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55d1d9491390 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55d1d94912a8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55d1d946a8a0
| |         `-CXXThisExpr 0x55d1d9491298 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55d1d946a7d8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55d1d946a840 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55d1d946a8a0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55d1d946aa98 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55d1d946aa98
| | `-ParmVarDecl 0x55d1d946aba8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55d1d946ac48 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55d1d946ac48
|   `-ParmVarDecl 0x55d1d946ad58 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55d1d946aef8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55d1d946adc8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55d1d946ae68 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55d1d946b190 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55d1d946b388 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55d1d946b258 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55d1d946b508 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55d1d94913e0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55d1d94913c0 <col:20> 'T *' lvalue ParmVar 0x55d1d946b258 'ptr' 'T *'
|   | `-CompoundStmt 0x55d1d9491430 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55d1d946b458 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55d1d9469ef0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55d1d94915e0 <col:22, line:857:9>
|   |   `-CallExpr 0x55d1d94915b0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55d1d9491440 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55d1d9195998 0x55d1d913fcc8
|   |     |-CXXOperatorCallExpr 0x55d1d9491540 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55d1d94914d0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d1d93a2948 0x55d1d93a2568 0x55d1d93a2198 0x55d1d93a1db8 0x55d1d93a19d8 0x55d1d93a1608
|   |     | `-MemberExpr 0x55d1d94914a0 <col:29> 'T *' lvalue ->_ptr 0x55d1d946b508
|   |     |   `-CXXThisExpr 0x55d1d9491490 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55d1d9491580 <col:35> 'T' lvalue ->_slot 0x55d1d946b568
|   |       `-CXXThisExpr 0x55d1d9491570 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55d1d946b508 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55d1d946b568 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55d1d946b5d0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55d1d946b6d0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55d1d946b720 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d1d946b6b0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55d1d946b690 <col:31> 'int' 48
|-FieldDecl 0x55d1d946b748 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55d1d946b7a8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55d1d946b808 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55d1d946b940 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55d1d947f2d0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55d1d947f330 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55d1d947f3e0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55d1d947f608 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55d1d947f510 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55d1d947f758 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55d1d947f6c8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55d1d947fa28 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55d1d947f818 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55d1d947f898 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55d1d947f940 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55d1d947fc38 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55d1d947faf0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55d1d947fb68 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55d1d947fd08 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55d1d947fe58 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55d1d947fdc0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55d1d94801e8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55d1d947ff18 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55d1d947ff98 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55d1d9480040 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55d1d94800f8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55d1d9480410 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55d1d94802c0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55d1d9480338 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55d1d9480728 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55d1d94804c0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55d1d9480688 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55d1d9480598 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d1d919e6c0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d1d919e7d8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55d1d919e868 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55d1d919e938 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55d1d919ea20 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55d1d919ec38 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55d1d919eae0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d1d919ede8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55d1d919ecf0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55d1d919ef30 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55d1d919eea0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55d1d919f078 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55d1d919efe8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d1d919f1c0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55d1d919f130 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d1d919f288 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55d1d919f3d0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55d1d919f340 <col:28> col:31 'int'
|-CXXMethodDecl 0x55d1d919f498 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55d1d919f5e0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55d1d919f550 <col:28> col:31 'int'
|-CXXMethodDecl 0x55d1d919f758 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55d1d919f698 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d1d919f8a0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55d1d919f810 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d1d919f968 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55d1d919fb28 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55d1d919fa18 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55d1d919fa90 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d1d919fd78 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55d1d919fbe8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d1d919fc60 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d1d919fe28 <col:86> "" ""
|-CXXMethodDecl 0x55d1d91a0098 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55d1d919ff08 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55d1d919ff80 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d1d91a0248 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55d1d91a0158 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55d1d91a03f8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55d1d91a0300 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55d1d91a06c8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55d1d91a04b0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55d1d91a0528 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55d1d91a05a0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d1d91a09a8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55d1d91a0790 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55d1d91a0808 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d1d91a0880 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d1d91a0a60 <col:115> "" ""
|-AccessSpecDecl 0x55d1d91a0ad0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55d1d91a0b08 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d1d91a1010 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55d1d91a1010
| `-ParmVarDecl 0x55d1d91a1118 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55d1d91a11b8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55d1d91a11b8
| `-ParmVarDecl 0x55d1d91a12c8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55d1d91d68f8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55d1d93c9700 <col:7>
|-CXXConstructorDecl 0x55d1d91d69d0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55d1d91d69d0
| `-ParmVarDecl 0x55d1d91d6ae8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55d1d91d6b58 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55d1d91d6b58
| `-ParmVarDecl 0x55d1d91d6c68 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55d1d93cc100 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d1d93b82a8 prev 0x55d1d93ad4b0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d1d93b83a0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55d1d93b8490 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55d1d93b85b8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55d1d93b8738 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55d1d93b88b8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55d1d93b8a38 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55d1d93c9868 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55d1d93ca0d8 <col:11>
|-CXXDestructorDecl 0x55d1d93c9940 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55d1d93c9a78 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55d1d93c9a78
| `-ParmVarDecl 0x55d1d93c9b88 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55d1d93c9c28 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55d1d93c9c28
| `-ParmVarDecl 0x55d1d93c9d38 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55d1d93ccaf8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d1d93ccc08 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55d1d93cce88 <col:11>
|   `-ReturnStmt 0x55d1d93cce78 <col:11>
|     `-UnaryOperator 0x55d1d93cce60 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d1d93cce50 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55d1d93ccc78 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55d1d93ccc78
  `-ParmVarDecl 0x55d1d93ccd88 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d1d93b8aa0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d1d93b8bb8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55d1d93b8c58 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55d1d93b8cc0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55d1d93b8d28 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55d1d93b8d90 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55d1d93b8df0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55d1d93b8eb0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55d1d93b8f10 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55d1d93b8f70 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55d1d93c9778 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55d1d93b8c58 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55d1d93ca0e8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55d1d93ca140 <col:12>
|-CXXConstructorDecl 0x55d1d93c9da8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55d1d93c9da8
| `-ParmVarDecl 0x55d1d93c9eb8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55d1d93c9f58 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55d1d93c9f58
| `-ParmVarDecl 0x55d1d93ca068 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55d1d93cc1e0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d1d93a6bc0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55d1d93a6cd8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55d1d93a6d68 <col:16, col:22> col:16 public
|-EnumDecl 0x55d1d93a6d90 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55d1d93a6e90 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55d1d93a6f70 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93a6e70 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55d1d93a6e50 <col:21> 'int' 28
| `-EnumConstantDecl 0x55d1d93a6f20 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55d1d93a6f88 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d1d93a6f00 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55d1d93a6ee0 <col:22> 'int' 64
|-CXXMethodDecl 0x55d1d93a72c8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55d1d93a6fb0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d1d93a7030 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55d1d93a70a8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d1d93a7120 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d1d93a7388 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55d1d93a7588 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55d1d93a7400 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55d1d93a7478 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d1d93a7638 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55d1d93a7798 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55d1d93a76a8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d1d93a7840 <col:72> warn_unused_result ""
|-TypedefDecl 0x55d1d93a7ba0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55d1d93a7b30 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55d1d93a7ad0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55d1d93a7a90 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55d1d8e7e4e0 'void'
|       |-PointerType 0x55d1d9126f60 'unsigned char *'
|       | `-BuiltinType 0x55d1d8e7e5e0 'unsigned char'
|       |-TypedefType 0x55d1d8f23550 'size_t' sugar
|       | |-Typedef 0x55d1d8eeebe0 'size_t'
|       | `-BuiltinType 0x55d1d8e7e640 'unsigned long'
|       `-PointerType 0x55d1d8e7ece0 'void *'
|         `-BuiltinType 0x55d1d8e7e4e0 'void'
|-CXXMethodDecl 0x55d1d93a8018 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55d1d93a7c10 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55d1d93a7c88 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d1d93a7d20 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55d1d93a7da0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55d1d93c2710 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55d1d93c26f8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55d1d93c26c0 <col:58> 'int' 0
| |-ParmVarDecl 0x55d1d93a7e20 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55d1d93c2738 <col:76> 'int' 0
| |-ParmVarDecl 0x55d1d93a7ea0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55d1d93c2758 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55d1d93a80e8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55d1d93a8168 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55d1d93a8228 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55d1d93a82c8 <col:20>
| `-OptimizeNoneAttr 0x55d1d93a8320 <col:30>
|-CXXMethodDecl 0x55d1d93a8398 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55d1d93a8438 <col:20>
| `-OptimizeNoneAttr 0x55d1d93a8490 <col:30>
|-CXXMethodDecl 0x55d1d93a8508 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55d1d93a85a8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55d1d93a8658 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55d1d93a86f8 <col:20>
| |-OptimizeNoneAttr 0x55d1d93a8750 <col:30>
| `-WarnUnusedResultAttr 0x55d1d93a8778 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55d1d93a87d0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55d1d93a8870 <col:20>
| `-OptimizeNoneAttr 0x55d1d93a88c8 <col:30>
|-CXXMethodDecl 0x55d1d93a8918 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55d1d93a89b8 <col:20>
| `-OptimizeNoneAttr 0x55d1d93a8a10 <col:30>
|-CXXMethodDecl 0x55d1d93a8a58 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55d1d93a8af8 <col:20>
| `-OptimizeNoneAttr 0x55d1d93a8b50 <col:30>
|-CXXMethodDecl 0x55d1d93a8b98 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55d1d93a8c58 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55d1d93a8d20 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55d1d93a8de8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55d1d93a8ea8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55d1d93a8fc8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55d1d93c2820 <col:54, line:99:5>
|   `-ReturnStmt 0x55d1d93c2810 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55d1d93c27f8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55d1d93c27c8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55d1d93b92a8
|         `-CXXThisExpr 0x55d1d93c27b8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55d1d93a9168 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55d1d93a9078 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55d1d93c28d0 <col:67, line:103:5>
|   `-BinaryOperator 0x55d1d93c28b0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55d1d93c2848 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55d1d93b92a8
|     | `-CXXThisExpr 0x55d1d93c2838 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55d1d93c2898 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55d1d93c2878 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55d1d93a9078 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55d1d93a9260 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55d1d93c2950 <col:33, line:107:5>
|   `-ReturnStmt 0x55d1d93c2940 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55d1d93c2928 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55d1d93c28f8 <col:16> 'void *' lvalue ->_destructor_argument 0x55d1d93b9310
|         `-CXXThisExpr 0x55d1d93c28e8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55d1d93a9320 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55d1d93c2f80 <col:25, line:113:5>
|   |-ParenExpr 0x55d1d93c2cc8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55d1d93c2c98 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55d1d93c2a08 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55d1d93c29e0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55d1d93c29a8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55d1d93c2978 <col:24> '<bound member function type>' ->shared 0x55d1d93a8398
|   |   |       `-ImplicitCastExpr 0x55d1d93c29c8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55d1d93c2968 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55d1d93c2a68 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d1d93c2a48 <col:42> 'int' 0
|   |   `-CallExpr 0x55d1d93c2bf8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55d1d93c2be0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d1d93c2bc0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d1d8f1a2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d1d93c2c38 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c2ad8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55d1d93c2c50 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c2b00 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d1d93c2c68 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d1d93c2b38 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55d1d93c2c80 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d1d93c2ba8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d1d93c2b90 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d1d93c2b58 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55d1d93c2ec8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55d1d93c2cf8 <col:2> 'unsigned char *' lvalue ->_head 0x55d1d93b90b0
|   | | `-CXXThisExpr 0x55d1d93c2ce8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55d1d93c2eb0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55d1d93c2e90 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55d1d93c2d38 <col:10> 'unsigned char *' lvalue ->_data 0x55d1d93b9118
|   |     | `-CXXThisExpr 0x55d1d93c2d28 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55d1d93c2e78 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55d1d93c2e58 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55d1d93c2d78 <col:18> 'unsigned char *' lvalue ->_tail 0x55d1d93b9180
|   |         | `-CXXThisExpr 0x55d1d93c2d68 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55d1d93c2e40 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55d1d93c2e20 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55d1d93c2db8 <col:26> 'unsigned char *' lvalue ->_end 0x55d1d93b91e8
|   |             | `-CXXThisExpr 0x55d1d93c2da8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55d1d93c2e08 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55d1d93c2de8 <col:33> 'int' 0
|   `-BinaryOperator 0x55d1d93c2f60 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55d1d93c2ef8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55d1d93b92a8
|     | `-CXXThisExpr 0x55d1d93c2ee8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55d1d93c2f48 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55d1d93c2f28 <col:16> 'int' 0
|-CXXMethodDecl 0x55d1d93a9460 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55d1d93a93d0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d1d93a9508 <col:20>
| |-OptimizeNoneAttr 0x55d1d93a9560 <col:30>
| `-WarnUnusedResultAttr 0x55d1d93a9588 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55d1d93a9658 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55d1d93a95c8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d1d93a9700 <col:20>
| |-OptimizeNoneAttr 0x55d1d93a9758 <col:30>
| `-WarnUnusedResultAttr 0x55d1d93a9780 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55d1d93a98b8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55d1d93a97c0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d1d93a9960 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55d1d93a9a60 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55d1d93a99d0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d1d93a9b08 <col:20>
| `-OptimizeNoneAttr 0x55d1d93a9b60 <col:30>
|-CXXMethodDecl 0x55d1d93a9c28 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55d1d93a9b98 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d1d93a9cd0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55d1d93a9dd0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55d1d93a9d40 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d1d93a9e78 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55d1d93a9f78 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55d1d93a9ee8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d1d93aa020 <col:20>
| `-OptimizeNoneAttr 0x55d1d93aa078 <col:30>
|-CXXMethodDecl 0x55d1d93aa208 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55d1d93aa0b8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55d1d93aa130 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55d1d93c2778 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55d1d93aa2b8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55d1d93aa4b8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55d1d93aa330 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55d1d93aa3a8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d1d93aa6c8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55d1d93aa578 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55d1d93aa5f0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d1d93aa8d8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55d1d93aa788 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55d1d93aa808 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55d1d93c2788 <col:39> 'int' 0
|-CXXMethodDecl 0x55d1d93aa9a8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55d1d93aaa70 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55d1d93aab38 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55d1d93aabf8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55d1d93aacc0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55d1d93aae08 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55d1d93aad78 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55d1d93aafd8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55d1d93aaec8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55d1d93aaf40 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d1d93ab0a8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55d1d93ab168 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55d1d93ab208 <col:20>
| `-OptimizeNoneAttr 0x55d1d93ab260 <col:30>
|-CXXMethodDecl 0x55d1d93ab2b0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55d1d93ab350 <col:20>
| `-OptimizeNoneAttr 0x55d1d93ab3a8 <col:30>
|-CXXMethodDecl 0x55d1d93ab3f8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55d1d93ab4b8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55d1d93ab580 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55d1d93ab620 <col:20>
| `-OptimizeNoneAttr 0x55d1d93ab678 <col:30>
|-CXXMethodDecl 0x55d1d93ab7c8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55d1d93ab6b8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55d1d93ab730 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d1d93ab918 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55d1d93ab888 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d1d93ab9f0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55d1d93abab0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55d1d93abb50 <col:20>
| `-OptimizeNoneAttr 0x55d1d93abba8 <col:30>
|-CXXMethodDecl 0x55d1d93abbf8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55d1d93abc98 <col:20>
| `-OptimizeNoneAttr 0x55d1d93abcf0 <col:30>
|-CXXMethodDecl 0x55d1d93abd40 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55d1d93abe08 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55d1d93abea8 <col:20>
| `-OptimizeNoneAttr 0x55d1d93abf00 <col:30>
|-CXXMethodDecl 0x55d1d93abf48 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55d1d93ac068 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55d1d93ac1d8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55d1d93ac118 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55d1d93ac2c8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55d1d93ac368 <col:20>
| `-OptimizeNoneAttr 0x55d1d93ac3c0 <col:30>
|-CXXMethodDecl 0x55d1d93ac410 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55d1d93ac4d0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55d1d93ac708 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55d1d93ac580 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55d1d93ac5f8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d1d93ac7b8 <col:20>
| `-OptimizeNoneAttr 0x55d1d93ac810 <col:30>
|-CXXMethodDecl 0x55d1d93ac8b8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55d1d93ac958 <col:20>
| `-OptimizeNoneAttr 0x55d1d93ac9b0 <col:30>
|-CXXMethodDecl 0x55d1d93aca00 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55d1d93acaa0 <col:20>
| `-OptimizeNoneAttr 0x55d1d93acaf8 <col:30>
|-CXXMethodDecl 0x55d1d93acb40 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55d1d93acbe0 <col:20>
| `-OptimizeNoneAttr 0x55d1d93acc38 <col:30>
|-CXXMethodDecl 0x55d1d93acd38 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55d1d93acc70 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55d1d93acde0 <col:20>
| `-OptimizeNoneAttr 0x55d1d93ace38 <col:30>
|-CXXMethodDecl 0x55d1d93acff8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55d1d93ace70 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55d1d93acee8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d1d93ad0a8 <col:20>
| `-OptimizeNoneAttr 0x55d1d93ad100 <col:30>
|-CXXMethodDecl 0x55d1d93ad1a8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55d1d93ad2c8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55d1d93ad3e8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55d1d93ad488 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55d1d93ad4b0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55d1d93ad5d8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55d1d93ad678 <col:20>
| `-OptimizeNoneAttr 0x55d1d93ad6d0 <col:30>
|-CXXMethodDecl 0x55d1d93ad778 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55d1d93ad818 <col:20>
| `-OptimizeNoneAttr 0x55d1d93ad870 <col:30>
|-AccessSpecDecl 0x55d1d93ad898 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55d1d93ad8c0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55d1d93ad9c0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55d1d93ada10 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d1d93ad9a0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55d1d93ad980 <col:14> 'int' 48
|-CXXMethodDecl 0x55d1d93ada78 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55d1d93adb18 <col:20>
| `-OptimizeNoneAttr 0x55d1d93adb70 <col:30>
|-CXXMethodDecl 0x55d1d93adbe8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55d1d93adc88 <col:20>
| `-OptimizeNoneAttr 0x55d1d93adce0 <col:30>
|-CXXMethodDecl 0x55d1d93adda8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55d1d93add18 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55d1d93adf48 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55d1d93ae0e8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55d1d93adff8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55d1d93ae190 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55d1d93ae290 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d1d93ae640 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93ae270 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55d1d93ae250 <col:9> 'int' 0
| |-EnumConstantDecl 0x55d1d93ae320 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d1d93ae658 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93ae300 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55d1d93ae2e0 <col:14> 'int' 1
| |-EnumConstantDecl 0x55d1d93ae3b0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d1d93ae670 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93ae390 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55d1d93ae370 <col:14> 'int' 2
| |-EnumConstantDecl 0x55d1d93ae440 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d1d93ae688 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93ae420 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55d1d93ae400 <col:14> 'int' 3
| |-EnumConstantDecl 0x55d1d93ae4d0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d1d93ae6a0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93ae4b0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55d1d93ae490 <col:13> 'int' 4
| |-EnumConstantDecl 0x55d1d93ae560 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d1d93ae6b8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93ae540 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55d1d93ae520 <col:13> 'int' 5
| `-EnumConstantDecl 0x55d1d93ae5f0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55d1d93ae6d0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d1d93ae5d0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55d1d93ae5b0 <col:14> 'int' 6
|-CXXMethodDecl 0x55d1d93ae738 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55d1d93ae7d8 <col:20>
| `-OptimizeNoneAttr 0x55d1d93ae830 <col:30>
|-CXXMethodDecl 0x55d1d93ae928 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55d1d93ae868 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55d1d93ae9d0 <col:20>
| `-OptimizeNoneAttr 0x55d1d93aea28 <col:30>
|-CXXMethodDecl 0x55d1d93aea98 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55d1d93aebc0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55d1d93aed38 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55d1d93aec70 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55d1d93aee00 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55d1d93aeec8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55d1d93af008 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55d1d93aef78 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55d1d93af0b0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55d1d93af1b0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55d1d93af3b0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93af190 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55d1d93af170 <col:23> 'int' 0
| |-EnumConstantDecl 0x55d1d93af240 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55d1d93af3c8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93af220 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55d1d93af200 <col:45> 'int' 4
| |-EnumConstantDecl 0x55d1d93af2d0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55d1d93af3e0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93af2b0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55d1d93af290 <col:24> 'int' 0
| `-EnumConstantDecl 0x55d1d93af360 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55d1d93af3f8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d1d93af340 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55d1d93af320 <col:47> 'int' 16
|-CXXMethodDecl 0x55d1d93af458 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55d1d93af5c8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55d1d93af508 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55d1d93af670 <col:20>
| `-OptimizeNoneAttr 0x55d1d93af6c8 <col:30>
|-CXXMethodDecl 0x55d1d93af718 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55d1d93c30a0 <col:18, col:36>
|   `-ReturnStmt 0x55d1d93c3090 <col:20, col:33>
|     `-ImplicitCastExpr 0x55d1d93c3078 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55d1d93c3058 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55d1d93c3028 <col:27> '<bound member function type>' ->xanno 0x55d1d93ad778
|           `-CXXThisExpr 0x55d1d93c3018 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55d1d93af810 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55d1d93c31b0 <col:30, col:48>
|   `-ReturnStmt 0x55d1d93c31a0 <col:32, col:45>
|     `-ImplicitCastExpr 0x55d1d93c3188 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55d1d93c3168 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55d1d93c3138 <col:39> '<bound member function type>' ->xanno 0x55d1d93ad5d8
|           `-CXXThisExpr 0x55d1d93c3128 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55d1d93af8f8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55d1d93c3348 <col:24, col:50>
|   `-ReturnStmt 0x55d1d93c3338 <col:26, col:47>
|     `-UnaryOperator 0x55d1d93c3320 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55d1d93c3300 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55d1d93c32e8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d1d93c3298 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55d1d93b85b8
|         |   `-CXXMemberCallExpr 0x55d1d93c3278 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55d1d93c3248 <col:34> '<bound member function type>' ->xanno 0x55d1d93ad778
|         |       `-CXXThisExpr 0x55d1d93c3238 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55d1d93c32c8 <col:46> 'int' 0
|-CXXMethodDecl 0x55d1d93afa00 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55d1d93c3518 <col:36, col:62>
|   `-ReturnStmt 0x55d1d93c3508 <col:38, col:59>
|     `-UnaryOperator 0x55d1d93c34f0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55d1d93c34d0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55d1d93c34b8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d1d93c3430 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55d1d93b85b8
|         |   `-CXXMemberCallExpr 0x55d1d93c3410 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55d1d93c33e0 <col:46> '<bound member function type>' ->xanno 0x55d1d93ad5d8
|         |       `-CXXThisExpr 0x55d1d93c33d0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55d1d93c3460 <col:58> 'int' 0
|-CXXMethodDecl 0x55d1d93afb18 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55d1d93c36b0 <col:26, col:53>
|   `-ReturnStmt 0x55d1d93c36a0 <col:28, col:50>
|     `-UnaryOperator 0x55d1d93c3688 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55d1d93c3668 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55d1d93c3650 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d1d93c3600 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55d1d93b88b8
|         |   `-CXXMemberCallExpr 0x55d1d93c35e0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55d1d93c35b0 <col:36> '<bound member function type>' ->xanno 0x55d1d93ad778
|         |       `-CXXThisExpr 0x55d1d93c35a0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55d1d93c3630 <col:49> 'int' 0
|-CXXMethodDecl 0x55d1d93afc38 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55d1d93c3888 <col:38, col:65>
|   `-ReturnStmt 0x55d1d93c3878 <col:40, col:62>
|     `-UnaryOperator 0x55d1d93c3860 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55d1d93c3840 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55d1d93c3828 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d1d93c3798 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55d1d93b88b8
|         |   `-CXXMemberCallExpr 0x55d1d93c3778 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55d1d93c3748 <col:48> '<bound member function type>' ->xanno 0x55d1d93ad5d8
|         |       `-CXXThisExpr 0x55d1d93c3738 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55d1d93c37c8 <col:61> 'int' 0
|-CXXMethodDecl 0x55d1d93afde8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55d1d93afcf0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55d1d93c3f58 <col:34, line:463:5>
|   |-ParenExpr 0x55d1d93c3da0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55d1d93c3d70 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55d1d93c39d8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d1d93c39a8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d1d93c38f8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d1d93c38e0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d1d93c38a0 <col:23> 'int' lvalue ParmVar 0x55d1d93afcf0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d1d93c38c0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d1d93c3988 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d1d93c3958 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d1d93c3918 <col:33> 'int' lvalue ParmVar 0x55d1d93afcf0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55d1d93c3970 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55d1d93c3938 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d1d93ad9c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55d1d93c3a38 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d1d93c3a18 <col:56> 'int' 0
|   |   `-CallExpr 0x55d1d93c3cd0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55d1d93c3cb8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d1d93c3c98 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d1d8f1a2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d1d93c3d10 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c3b28 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55d1d93c3d28 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c3b58 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d1d93c3d40 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d1d93c3b90 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55d1d93c3d58 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d1d93c3c80 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d1d93c3c68 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d1d93c3c28 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55d1d93c3f48 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55d1d93c3f30 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55d1d93c3f10 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55d1d93c3ee0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d1d93c3e90 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55d1d93b85b8
|         |   `-CXXMemberCallExpr 0x55d1d93c3e70 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55d1d93c3e40 <col:9> '<bound member function type>' ->xanno 0x55d1d93ad5d8
|         |       `-CXXThisExpr 0x55d1d93c3e30 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55d1d93c3ef8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55d1d93c3ec0 <col:21> 'int' lvalue ParmVar 0x55d1d93afcf0 'i' 'int'
|-CXXMethodDecl 0x55d1d93b0038 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55d1d93afea8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55d1d93aff20 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55d1d93c45e8 <col:40, line:472:5>
|   |-ParenExpr 0x55d1d93c4400 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55d1d93c43d0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55d1d93c40b0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d1d93c4080 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d1d93c3fd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d1d93c3fb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d1d93c3f78 <col:23> 'int' lvalue ParmVar 0x55d1d93afea8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d1d93c3f98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d1d93c4060 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d1d93c4030 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d1d93c3ff0 <col:33> 'int' lvalue ParmVar 0x55d1d93afea8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55d1d93c4048 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55d1d93c4010 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d1d93ad9c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55d1d93c4110 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d1d93c40f0 <col:56> 'int' 0
|   |   `-CallExpr 0x55d1d93c4330 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55d1d93c4318 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d1d93c42f8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d1d8f1a2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d1d93c4370 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c4180 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55d1d93c4388 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c41b0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d1d93c43a0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d1d93c41e8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55d1d93c43b8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d1d93c42e0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d1d93c42c8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d1d93c4288 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55d1d93c45c8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55d1d93c4570 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55d1d93c4540 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55d1d93c44f0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55d1d93b85b8
|     | |   `-CXXMemberCallExpr 0x55d1d93c44d0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55d1d93c44a0 <col:2> '<bound member function type>' ->xanno 0x55d1d93ad778
|     | |       `-CXXThisExpr 0x55d1d93c4490 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55d1d93c4558 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55d1d93c4520 <col:14> 'int' lvalue ParmVar 0x55d1d93afea8 'i' 'int'
|     `-ImplicitCastExpr 0x55d1d93c45b0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55d1d93c4590 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55d1d93aff20 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55d1d93b01f8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55d1d93b0100 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55d1d93c4d68 <col:36, line:485:5>
|   |-ParenExpr 0x55d1d93c4ad0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d1d93c4aa0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d1d93c4780 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d1d93c4750 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d1d93c4660 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d1d93c4648 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d1d93c4608 <col:23> 'int' lvalue ParmVar 0x55d1d93b0100 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d1d93c4628 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d1d93c4730 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d1d93c4718 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d1d93c4680 <col:33> 'int' lvalue ParmVar 0x55d1d93b0100 'i' 'int'
|   |   |     `-BinaryOperator 0x55d1d93c46f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d1d93c46e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d1d93c46a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d1d93ad9c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d1d93c46c0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55d1d93c47e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d1d93c47c0 <col:60> 'int' 0
|   |   `-CallExpr 0x55d1d93c4a00 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d1d93c49e8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d1d93c49c8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d1d8f1a2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d1d93c4a40 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c4850 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55d1d93c4a58 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c4888 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d1d93c4a70 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d1d93c48c0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55d1d93c4a88 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d1d93c49b0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d1d93c4998 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d1d93c4958 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55d1d93c4d58 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55d1d93c4d40 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55d1d93c4d28 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d1d93c4cf8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55d1d93c4c98 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d1d93c4c68 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d1d93c4be0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55d1d93b8490
|             |   `-CXXMemberCallExpr 0x55d1d93c4bc0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d1d93c4b90 <col:61> '<bound member function type>' ->xanno 0x55d1d93ad5d8
|             |       `-CXXThisExpr 0x55d1d93c4b80 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d1d93c4c80 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d1d93c4c10 <col:74> 'int' lvalue ParmVar 0x55d1d93b0100 'i' 'int'
|-CXXMethodDecl 0x55d1d93b0448 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55d1d93b02b8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55d1d93b0330 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55d1d93c54b8 <col:42, line:500:5>
|   |-ParenExpr 0x55d1d93c5250 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d1d93c5220 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d1d93c4f00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d1d93c4ed0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d1d93c4de0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d1d93c4dc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d1d93c4d88 <col:23> 'int' lvalue ParmVar 0x55d1d93b02b8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d1d93c4da8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d1d93c4eb0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d1d93c4e98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d1d93c4e00 <col:33> 'int' lvalue ParmVar 0x55d1d93b02b8 'i' 'int'
|   |   |     `-BinaryOperator 0x55d1d93c4e78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d1d93c4e60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d1d93c4e20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d1d93ad9c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d1d93c4e40 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55d1d93c4f60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d1d93c4f40 <col:60> 'int' 0
|   |   `-CallExpr 0x55d1d93c5180 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d1d93c5168 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d1d93c5148 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d1d8f1a2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d1d93c51c0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c4fd0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55d1d93c51d8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c5008 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d1d93c51f0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d1d93c5040 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55d1d93c5208 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d1d93c5130 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d1d93c5118 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d1d93c50d8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55d1d93c5498 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55d1d93c5448 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55d1d93c5418 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55d1d93c53c0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55d1d93c5390 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55d1d93c5340 <col:48, col:57> 'char [48]' lvalue ->c 0x55d1d93b8490
|     |     |   `-CXXMemberCallExpr 0x55d1d93c5320 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55d1d93c52f0 <col:48> '<bound member function type>' ->xanno 0x55d1d93ad778
|     |     |       `-CXXThisExpr 0x55d1d93c52e0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55d1d93c53a8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55d1d93c5370 <col:61> 'int' lvalue ParmVar 0x55d1d93b02b8 'i' 'int'
|     `-ImplicitCastExpr 0x55d1d93c5480 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55d1d93c5460 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55d1d93b0330 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55d1d93b0608 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55d1d93b0510 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55d1d93c5c18 <col:35, line:513:5>
|   |-ParenExpr 0x55d1d93c5928 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d1d93c58f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d1d93c5650 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d1d93c5620 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d1d93c5530 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d1d93c5518 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d1d93c54d8 <col:23> 'int' lvalue ParmVar 0x55d1d93b0510 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d1d93c54f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d1d93c5600 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d1d93c55e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d1d93c5550 <col:33> 'int' lvalue ParmVar 0x55d1d93b0510 'i' 'int'
|   |   |     `-BinaryOperator 0x55d1d93c55c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d1d93c55b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d1d93c5570 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d1d93ad9c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d1d93c5590 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55d1d93c56b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d1d93c5690 <col:60> 'int' 0
|   |   `-CallExpr 0x55d1d93c5858 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d1d93c5840 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d1d93c5820 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d1d8f1a2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d1d93c5898 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c5720 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55d1d93c58b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c5758 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d1d93c58c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d1d93c5790 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55d1d93c58e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d1d93c5808 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d1d93c57f0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d1d93c57b0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55d1d93c5c08 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55d1d93c5bf0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55d1d93c5bd8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d1d93c5ba8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55d1d93c5b20 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d1d93c5af0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d1d93c5aa0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55d1d93b8490
|             |   `-CXXMemberCallExpr 0x55d1d93c5a80 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d1d93c5a50 <col:60> '<bound member function type>' ->xanno 0x55d1d93ad5d8
|             |       `-CXXThisExpr 0x55d1d93c5a40 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d1d93c5b08 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d1d93c5ad0 <col:73> 'int' lvalue ParmVar 0x55d1d93b0510 'i' 'int'
|-CXXMethodDecl 0x55d1d93b0858 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55d1d93b06c8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55d1d93b0740 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55d1d93c6338 <col:41, line:528:5>
|   |-ParenExpr 0x55d1d93c60c0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d1d93c6090 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d1d93c5db0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d1d93c5d80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d1d93c5c90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d1d93c5c78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d1d93c5c38 <col:23> 'int' lvalue ParmVar 0x55d1d93b06c8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d1d93c5c58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d1d93c5d60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d1d93c5d48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d1d93c5cb0 <col:33> 'int' lvalue ParmVar 0x55d1d93b06c8 'i' 'int'
|   |   |     `-BinaryOperator 0x55d1d93c5d28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d1d93c5d10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d1d93c5cd0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d1d93ad9c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d1d93c5cf0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55d1d93c5e10 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d1d93c5df0 <col:60> 'int' 0
|   |   `-CallExpr 0x55d1d93c5ff0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d1d93c5fd8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d1d93c5fb8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d1d8f1a2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d1d93c6030 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c5e80 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55d1d93c6048 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c5eb8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d1d93c6060 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d1d93c5ef0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55d1d93c6078 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d1d93c5fa0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d1d93c5f88 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d1d93c5f48 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55d1d93c6318 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55d1d93c62c8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55d1d93c6298 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55d1d93c6240 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55d1d93c6200 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55d1d93c61b0 <col:47, col:56> 'char [48]' lvalue ->c 0x55d1d93b8490
|     |     |   `-CXXMemberCallExpr 0x55d1d93c6190 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55d1d93c6160 <col:47> '<bound member function type>' ->xanno 0x55d1d93ad778
|     |     |       `-CXXThisExpr 0x55d1d93c6150 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55d1d93c6218 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55d1d93c61e0 <col:60> 'int' lvalue ParmVar 0x55d1d93b06c8 'i' 'int'
|     `-ImplicitCastExpr 0x55d1d93c6300 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55d1d93c62e0 <col:65> 'int16_t':'short' lvalue ParmVar 0x55d1d93b0740 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55d1d93b0a18 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55d1d93b0920 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55d1d93c6a08 <col:36, line:541:5>
|   |-ParenExpr 0x55d1d93c67a8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d1d93c6778 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d1d93c64d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d1d93c64a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d1d93c63b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d1d93c6398 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d1d93c6358 <col:23> 'int' lvalue ParmVar 0x55d1d93b0920 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d1d93c6378 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d1d93c6480 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d1d93c6468 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d1d93c63d0 <col:33> 'int' lvalue ParmVar 0x55d1d93b0920 'i' 'int'
|   |   |     `-BinaryOperator 0x55d1d93c6448 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d1d93c6430 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d1d93c63f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d1d93ad9c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d1d93c6410 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55d1d93c6530 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d1d93c6510 <col:60> 'int' 0
|   |   `-CallExpr 0x55d1d93c66d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d1d93c66c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d1d93c66a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d1d8f1a2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d1d93c6718 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c65a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55d1d93c6730 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c65d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d1d93c6748 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d1d93c6610 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55d1d93c6760 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d1d93c6688 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d1d93c6670 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d1d93c6630 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55d1d93c69f8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55d1d93c69e0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55d1d93c69c8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d1d93c6998 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55d1d93c6940 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d1d93c6910 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d1d93c68c0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55d1d93b8490
|             |   `-CXXMemberCallExpr 0x55d1d93c68a0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d1d93c6870 <col:61> '<bound member function type>' ->xanno 0x55d1d93ad5d8
|             |       `-CXXThisExpr 0x55d1d93c6860 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d1d93c6928 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d1d93c68f0 <col:74> 'int' lvalue ParmVar 0x55d1d93b0920 'i' 'int'
|-CXXMethodDecl 0x55d1d93b0be8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55d1d93b0ad8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55d1d93b0b50 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d1d93b0c98 <col:20>
| `-OptimizeNoneAttr 0x55d1d93b0cf0 <col:30>
|-CXXMethodDecl 0x55d1d93b0e28 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55d1d93b0d30 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55d1d93c70d8 <col:35, line:562:5>
|   |-ParenExpr 0x55d1d93c6e78 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d1d93c6e48 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d1d93c6ba0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d1d93c6b70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d1d93c6a80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d1d93c6a68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d1d93c6a28 <col:23> 'int' lvalue ParmVar 0x55d1d93b0d30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d1d93c6a48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d1d93c6b50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d1d93c6b38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d1d93c6aa0 <col:33> 'int' lvalue ParmVar 0x55d1d93b0d30 'i' 'int'
|   |   |     `-BinaryOperator 0x55d1d93c6b18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d1d93c6b00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d1d93c6ac0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d1d93ad9c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d1d93c6ae0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55d1d93c6c00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d1d93c6be0 <col:60> 'int' 0
|   |   `-CallExpr 0x55d1d93c6da8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d1d93c6d90 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d1d93c6d70 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d1d8f1a2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d1d93c6de8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c6c70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55d1d93c6e00 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c6ca8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d1d93c6e18 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d1d93c6ce0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55d1d93c6e30 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d1d93c6d58 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d1d93c6d40 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d1d93c6d00 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55d1d93c70c8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55d1d93c70b0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55d1d93c7098 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d1d93c7068 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55d1d93c7010 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d1d93c6fe0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d1d93c6f90 <col:60, col:69> 'char const[48]' lvalue ->c 0x55d1d93b8490
|             |   `-CXXMemberCallExpr 0x55d1d93c6f70 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d1d93c6f40 <col:60> '<bound member function type>' ->xanno 0x55d1d93ad5d8
|             |       `-CXXThisExpr 0x55d1d93c6f30 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d1d93c6ff8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d1d93c6fc0 <col:73> 'int' lvalue ParmVar 0x55d1d93b0d30 'i' 'int'
|-CXXMethodDecl 0x55d1d93b1038 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55d1d93b0ee8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55d1d93b0f60 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55d1d93c77b8 <col:41, line:577:5>
|   |-ParenExpr 0x55d1d93c7548 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d1d93c7518 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d1d93c7270 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d1d93c7240 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d1d93c7150 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d1d93c7138 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d1d93c70f8 <col:23> 'int' lvalue ParmVar 0x55d1d93b0ee8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d1d93c7118 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d1d93c7220 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d1d93c7208 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d1d93c7170 <col:33> 'int' lvalue ParmVar 0x55d1d93b0ee8 'i' 'int'
|   |   |     `-BinaryOperator 0x55d1d93c71e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d1d93c71d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d1d93c7190 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d1d93ad9c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d1d93c71b0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55d1d93c72d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d1d93c72b0 <col:60> 'int' 0
|   |   `-CallExpr 0x55d1d93c7478 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d1d93c7460 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d1d93c7440 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d1d8f1a2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d1d93c74b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c7340 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55d1d93c74d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c7378 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d1d93c74e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d1d93c73b0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55d1d93c7500 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d1d93c7428 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d1d93c7410 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d1d93c73d0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55d1d93c7798 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55d1d93c7748 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55d1d93c7718 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55d1d93c76b8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55d1d93c7688 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55d1d93c7638 <col:47, col:56> 'char [48]' lvalue ->c 0x55d1d93b8490
|     |     |   `-CXXMemberCallExpr 0x55d1d93c7618 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55d1d93c75e8 <col:47> '<bound member function type>' ->xanno 0x55d1d93ad778
|     |     |       `-CXXThisExpr 0x55d1d93c75d8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55d1d93c76a0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55d1d93c7668 <col:60> 'int' lvalue ParmVar 0x55d1d93b0ee8 'i' 'int'
|     `-ImplicitCastExpr 0x55d1d93c7780 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55d1d93c7760 <col:65> 'int32_t':'int' lvalue ParmVar 0x55d1d93b0f60 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55d1d93b11f8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55d1d93b1100 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55d1d93c7ee8 <col:36, line:591:5>
|   |-ParenExpr 0x55d1d93c7c28 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d1d93c7bf8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d1d93c7950 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d1d93c7920 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d1d93c7830 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d1d93c7818 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d1d93c77d8 <col:23> 'int' lvalue ParmVar 0x55d1d93b1100 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d1d93c77f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d1d93c7900 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d1d93c78e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d1d93c7850 <col:33> 'int' lvalue ParmVar 0x55d1d93b1100 'i' 'int'
|   |   |     `-BinaryOperator 0x55d1d93c78c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d1d93c78b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d1d93c7870 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d1d93ad9c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d1d93c7890 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55d1d93c79b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d1d93c7990 <col:60> 'int' 0
|   |   `-CallExpr 0x55d1d93c7b58 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d1d93c7b40 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d1d93c7b20 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d1d8f1a2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d1d93c7b98 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c7a20 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55d1d93c7bb0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c7a58 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d1d93c7bc8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d1d93c7a90 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55d1d93c7be0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d1d93c7b08 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d1d93c7af0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d1d93c7ab0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55d1d93c7ed8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55d1d93c7ec0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55d1d93c7ea8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d1d93c7e78 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55d1d93c7df0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d1d93c7dc0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d1d93c7d70 <col:61, col:70> 'char const[48]' lvalue ->c 0x55d1d93b8490
|             |   `-CXXMemberCallExpr 0x55d1d93c7d50 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d1d93c7d20 <col:61> '<bound member function type>' ->xanno 0x55d1d93ad5d8
|             |       `-CXXThisExpr 0x55d1d93c7d10 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d1d93c7dd8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d1d93c7da0 <col:74> 'int' lvalue ParmVar 0x55d1d93b1100 'i' 'int'
|-CXXMethodDecl 0x55d1d93b1448 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55d1d93b12b8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55d1d93b1330 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55d1d93c85c8 <col:42, line:606:5>
|   |-ParenExpr 0x55d1d93c8358 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d1d93c8328 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d1d93c8080 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d1d93c8050 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d1d93c7f60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d1d93c7f48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d1d93c7f08 <col:23> 'int' lvalue ParmVar 0x55d1d93b12b8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d1d93c7f28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d1d93c8030 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d1d93c8018 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d1d93c7f80 <col:33> 'int' lvalue ParmVar 0x55d1d93b12b8 'i' 'int'
|   |   |     `-BinaryOperator 0x55d1d93c7ff8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d1d93c7fe0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d1d93c7fa0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d1d93ad9c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d1d93c7fc0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55d1d93c80e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d1d93c80c0 <col:60> 'int' 0
|   |   `-CallExpr 0x55d1d93c8288 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d1d93c8270 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d1d93c8250 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d1d8f1a2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d1d93c82c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c8150 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55d1d93c82e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c8188 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d1d93c82f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d1d93c81c0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55d1d93c8310 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d1d93c8238 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d1d93c8220 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d1d93c81e0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55d1d93c85a8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55d1d93c8558 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55d1d93c8528 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55d1d93c84c8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55d1d93c8498 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55d1d93c8448 <col:48, col:57> 'char [48]' lvalue ->c 0x55d1d93b8490
|     |     |   `-CXXMemberCallExpr 0x55d1d93c8428 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55d1d93c83f8 <col:48> '<bound member function type>' ->xanno 0x55d1d93ad778
|     |     |       `-CXXThisExpr 0x55d1d93c83e8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55d1d93c84b0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55d1d93c8478 <col:61> 'int' lvalue ParmVar 0x55d1d93b12b8 'i' 'int'
|     `-ImplicitCastExpr 0x55d1d93c8590 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55d1d93c8570 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55d1d93b1330 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55d1d93b15e0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55d1d93b1510 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55d1d93c8e38 <col:33, line:620:5>
|   |-ParenExpr 0x55d1d93c8bb0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55d1d93c8b80 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55d1d93c87d0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d1d93c87a0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d1d93c8640 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d1d93c8628 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d1d93c85e8 <col:23> 'int' lvalue ParmVar 0x55d1d93b1510 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d1d93c8608 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d1d93c8780 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55d1d93c8768 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d1d93c8660 <col:33> 'int' lvalue ParmVar 0x55d1d93b1510 'i' 'int'
|   |   |     `-BinaryOperator 0x55d1d93c8748 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d1d93c8730 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d1d93c8680 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d1d93ad9c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55d1d93c8708 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55d1d93c86f0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55d1d93c86b8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55d1d93c8830 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d1d93c8810 <col:79> 'int' 0
|   |   `-CallExpr 0x55d1d93c8ae0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55d1d93c8ac8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d1d93c8aa8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d1d8f1a2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d1d93c8b20 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c8918 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55d1d93c8b38 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c8960 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d1d93c8b50 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d1d93c8998 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55d1d93c8b68 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d1d93c8a90 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d1d93c8a78 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d1d93c8a38 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55d1d93c8e28 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55d1d93c8e10 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55d1d93c8df8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d1d93c8dc8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55d1d93c8d40 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d1d93c8d10 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d1d93c8cc0 <col:67, col:76> 'char const[48]' lvalue ->c 0x55d1d93b8490
|             |   `-CXXMemberCallExpr 0x55d1d93c8ca0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d1d93c8c70 <col:67> '<bound member function type>' ->xanno 0x55d1d93ad5d8
|             |       `-CXXThisExpr 0x55d1d93c8c60 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d1d93c8d28 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d1d93c8cf0 <col:80> 'int' lvalue ParmVar 0x55d1d93b1510 'i' 'int'
|-CXXMethodDecl 0x55d1d93b17f8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55d1d93b16a0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55d1d93b1720 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55d1d93c9660 <col:45, line:635:5>
|   |-ParenExpr 0x55d1d93c93a8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55d1d93c9378 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55d1d93c9040 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d1d93c9010 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d1d93c8eb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d1d93c8e98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d1d93c8e58 <col:23> 'int' lvalue ParmVar 0x55d1d93b16a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d1d93c8e78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d1d93c8ff0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55d1d93c8fd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d1d93c8ed0 <col:33> 'int' lvalue ParmVar 0x55d1d93b16a0 'i' 'int'
|   |   |     `-BinaryOperator 0x55d1d93c8fb8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d1d93c8fa0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d1d93c8ef0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d1d93ad9c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55d1d93c8f78 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55d1d93c8f60 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55d1d93c8f28 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55d1d93c90a0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d1d93c9080 <col:79> 'int' 0
|   |   `-CallExpr 0x55d1d93c92d8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55d1d93c92c0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d1d93c92a0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d1d8f1a2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d1d93c9318 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c9110 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55d1d93c9330 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d1d93c9158 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d1d93c9348 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d1d93c9190 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55d1d93c9360 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d1d93c9288 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d1d93c9270 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d1d93c9228 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55d1d93c9640 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55d1d93c95a8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55d1d93c9578 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55d1d93c9518 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55d1d93c94e8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55d1d93c9498 <col:54, col:63> 'char [48]' lvalue ->c 0x55d1d93b8490
|     |     |   `-CXXMemberCallExpr 0x55d1d93c9478 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55d1d93c9448 <col:54> '<bound member function type>' ->xanno 0x55d1d93ad778
|     |     |       `-CXXThisExpr 0x55d1d93c9438 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55d1d93c9500 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55d1d93c94c8 <col:67> 'int' lvalue ParmVar 0x55d1d93b16a0 'i' 'int'
|     `-CXXConstCastExpr 0x55d1d93c9610 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55d1d93c95f8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55d1d93c95c0 <col:91> 'const void *' lvalue ParmVar 0x55d1d93b1720 'x' 'const void *'
|-CXXMethodDecl 0x55d1d93b18c8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55d1d93c96e8 <col:34, line:640:5>
|   `-ReturnStmt 0x55d1d93c96d8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55d1d93c96c0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55d1d93c9690 <col:16> 'Packet *' lvalue ->_data_packet 0x55d1d93b9048
|         `-CXXThisExpr 0x55d1d93c9680 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55d1d93b1a08 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55d1d93b1978 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d1d93c27a8 <col:46> 'bool' true
|-CXXMethodDecl 0x55d1d93b1b88 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55d1d93b1ac0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55d1d93b1c30 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55d1d93b23e0 <line:660:22> "" ""
| |-EnumConstantDecl 0x55d1d93b1d30 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d1d93b2450 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93b1d10 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55d1d93b1cf0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55d1d93a6e90 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55d1d93b1dc0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d1d93b2468 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93b1da0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55d1d93b1d80 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55d1d93a6f20 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55d1d93b1e50 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d1d93b2480 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93b1e30 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55d1d93b1e10 <col:21> 'int' 0
| |-EnumConstantDecl 0x55d1d93b1ee0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d1d93b2498 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93b1ec0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55d1d93b1ea0 <col:19> 'int' 16
| |-EnumConstantDecl 0x55d1d93b1f70 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d1d93b24b0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93b1f50 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55d1d93b1f30 <col:21> 'int' 16
| |-EnumConstantDecl 0x55d1d93b2000 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d1d93b24c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93b1fe0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55d1d93b1fc0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55d1d93b2090 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d1d93b24e0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93b2070 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55d1d93b2050 <col:19> 'int' EnumConstant 0x55d1d93b1ee0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55d1d93b2120 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d1d93b24f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93b2100 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55d1d93b20e0 <col:19> 'int' EnumConstant 0x55d1d93b2000 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55d1d93b21f0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d1d93b2510 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93b21d0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55d1d93b21b0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55d1d93b2170 <col:23> 'int' EnumConstant 0x55d1d93b2120 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55d1d93b2190 <col:40> 'int' 2
| |-EnumConstantDecl 0x55d1d93b22c0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d1d93b2528 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d93b22a0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55d1d93b2280 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55d1d93b2240 <col:23> 'int' EnumConstant 0x55d1d93b2120 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55d1d93b2260 <col:40> 'int' 4
| `-EnumConstantDecl 0x55d1d93b2390 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55d1d93b2540 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d1d93b2370 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55d1d93b2350 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55d1d93b2310 <col:23> 'int' EnumConstant 0x55d1d93b2120 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55d1d93b2330 <col:40> 'int' 8
|-CXXMethodDecl 0x55d1d93b2580 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55d1d93b2620 <col:68> "" ""
|-CXXMethodDecl 0x55d1d93b26b8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55d1d93b2758 <col:45> "" ""
|-CXXMethodDecl 0x55d1d93b27f0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55d1d93b2890 <col:57> "" ""
|-CXXMethodDecl 0x55d1d93b2928 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55d1d93b29c8 <col:45> "" ""
|-CXXMethodDecl 0x55d1d93b2a60 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55d1d93b2b00 <col:57> "" ""
|-CXXMethodDecl 0x55d1d93b2b90 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55d1d93b2c30 <col:51> "" ""
|-CXXMethodDecl 0x55d1d93b2cc0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55d1d93b2d60 <col:63> "" ""
|-CXXMethodDecl 0x55d1d93b2df0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55d1d93b2e90 <col:53> "" ""
|-CXXMethodDecl 0x55d1d93b2f20 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55d1d93b2fc0 <col:65> "" ""
|-CXXMethodDecl 0x55d1d93b30d8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55d1d93b3048 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55d1d93b3180 <col:61> "" ""
|-CXXMethodDecl 0x55d1d93b3318 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55d1d93b3208 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55d1d93b3280 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55d1d93b33c8 <col:67> "" ""
|-CXXMethodDecl 0x55d1d93b34e0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55d1d93b3450 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55d1d93b3588 <col:63> "" ""
|-CXXMethodDecl 0x55d1d93b3720 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55d1d93b3610 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55d1d93b3688 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55d1d93b37d0 <col:69> "" ""
|-CXXMethodDecl 0x55d1d93b38e8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55d1d93b3858 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55d1d93b3990 <col:63> "" ""
|-CXXMethodDecl 0x55d1d93b6068 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55d1d93b5f58 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55d1d93b5fd0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d1d93b6118 <col:69> "" ""
|-CXXMethodDecl 0x55d1d93b6230 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55d1d93b61a0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55d1d93b62d8 <col:62> "" ""
|-CXXMethodDecl 0x55d1d93b6470 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55d1d93b6360 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55d1d93b63d8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55d1d93b6520 <col:68> "" ""
|-CXXMethodDecl 0x55d1d93b6638 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55d1d93b65a8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55d1d93b66e0 <col:63> "" ""
|-CXXMethodDecl 0x55d1d93b6878 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55d1d93b6768 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55d1d93b67e0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55d1d93b6928 <col:69> "" ""
|-CXXMethodDecl 0x55d1d93b69b8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55d1d93b6a58 <col:64> "" ""
|-CXXMethodDecl 0x55d1d93b6ae8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55d1d93b6b88 <col:52> "" ""
|-CXXMethodDecl 0x55d1d93b6c18 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55d1d93b6cb8 <col:67> "" ""
|-CXXMethodDecl 0x55d1d93b6d48 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55d1d93b6de8 <col:55> "" ""
|-CXXMethodDecl 0x55d1d93b6f00 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55d1d93b6e70 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55d1d93b6fa8 <col:58> "" ""
|-CXXMethodDecl 0x55d1d93b7140 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55d1d93b7030 <col:33> col:36 'int'
| |-ParmVarDecl 0x55d1d93b70a8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55d1d93b71f0 <col:62> "" ""
|-CXXMethodDecl 0x55d1d93b7308 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55d1d93b7278 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55d1d93b73b0 <col:58> "" ""
|-CXXMethodDecl 0x55d1d93b7548 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55d1d93b7438 <col:33> col:36 'int'
| |-ParmVarDecl 0x55d1d93b74b0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55d1d93b75f8 <col:62> "" ""
|-CXXMethodDecl 0x55d1d93b7710 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55d1d93b7680 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55d1d93b77b8 <col:60> "" ""
|-CXXMethodDecl 0x55d1d93b7950 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55d1d93b7840 <col:34> col:37 'int'
| |-ParmVarDecl 0x55d1d93b78b8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55d1d93b7a00 <col:64> "" ""
|-CXXMethodDecl 0x55d1d93b7b18 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55d1d93b7a88 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55d1d93b7bc0 <col:58> "" ""
|-CXXMethodDecl 0x55d1d93b7d58 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55d1d93b7c48 <col:33> col:36 'int'
| |-ParmVarDecl 0x55d1d93b7cc0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55d1d93b7e08 <col:62> "" ""
|-CXXMethodDecl 0x55d1d93b7f20 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55d1d93b7e90 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55d1d93b7fc8 <col:59> "" ""
|-CXXMethodDecl 0x55d1d93b8160 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55d1d93b8050 <col:33> col:36 'int'
| |-ParmVarDecl 0x55d1d93b80c8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d1d93b8210 <col:63> "" ""
|-AccessSpecDecl 0x55d1d93b8280 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55d1d93b82a8 prev 0x55d1d93ad4b0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55d1d93b83a0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55d1d93b8490 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55d1d93b85b8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55d1d93b8738 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55d1d93b88b8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55d1d93b8a38 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55d1d93c9868 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55d1d93ca0d8 <col:11>
| |-CXXDestructorDecl 0x55d1d93c9940 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55d1d93c9a78 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55d1d93c9a78
| | `-ParmVarDecl 0x55d1d93c9b88 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55d1d93c9c28 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55d1d93c9c28
| | `-ParmVarDecl 0x55d1d93c9d38 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55d1d93ccaf8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55d1d93ccc08 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55d1d93cce88 <col:11>
| |   `-ReturnStmt 0x55d1d93cce78 <col:11>
| |     `-UnaryOperator 0x55d1d93cce60 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55d1d93cce50 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55d1d93ccc78 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55d1d93ccc78
|   `-ParmVarDecl 0x55d1d93ccd88 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55d1d93b8aa0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55d1d93b8bb8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55d1d93b8c58 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55d1d93b8cc0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55d1d93b8d28 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55d1d93b8d90 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55d1d93b8df0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55d1d93b8eb0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55d1d93b8f10 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55d1d93b8f70 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55d1d93c9778 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55d1d93b8c58 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55d1d93ca0e8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55d1d93ca140 <col:12>
| |-CXXConstructorDecl 0x55d1d93c9da8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55d1d93c9da8
| | `-ParmVarDecl 0x55d1d93c9eb8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55d1d93c9f58 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55d1d93c9f58
| | `-ParmVarDecl 0x55d1d93ca068 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55d1d93cc1e0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55d1d93b8fe8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55d1d93b9048 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55d1d93b90b0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55d1d93b9118 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55d1d93b9180 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55d1d93b91e8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55d1d93b9248 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55d1d93b92a8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55d1d93b9310 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55d1d93b9398 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55d1d93b8fe8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55d1d93c9710 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55d1d93b9248 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55d1d93ca150 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55d1d93ca1b0 <col:21, line:755:5>
|-CXXConstructorDecl 0x55d1d93b9538 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55d1d93b9478 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55d1d93b9630 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55d1d93b9818 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55d1d93b9720 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55d1d93b9ae8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55d1d93b98d0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d1d93b9948 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55d1d93b99c0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d1d93b9d08 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55d1d93b9bb8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55d1d93b9c30 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55d1d93c22e8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55d1d93b9dc8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55d1d93b9e40 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55d1d93b9eb8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55d1d93c2440 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55d1d93c23b0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d1d93c2588 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55d1d93c24f8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55d1d93c2680 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d1d949c8a0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d1d949c9b8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55d1d949ca48 <col:16, col:22> col:16 public
|-EnumDecl 0x55d1d949ca70 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55d1d949cb70 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55d1d949cdc0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d949cb50 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55d1d949cb30 <col:21> 'int' 0
| |-EnumConstantDecl 0x55d1d949cc00 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55d1d949cdd8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d949cbe0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55d1d949cbc0 <col:24> 'int' 22
| |-EnumConstantDecl 0x55d1d949cc90 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55d1d949cdf0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d949cc70 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55d1d949cc50 <col:24> 'int' 34
| |-EnumConstantDecl 0x55d1d949cd20 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55d1d949ce08 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d1d949cd00 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55d1d949cce0 <col:25> 'int' 95
| `-EnumConstantDecl 0x55d1d949cd70 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55d1d949e780 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55d1d949ebb8 <col:7>
|-CXXConstructorDecl 0x55d1d949e888 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55d1d949e888
| `-ParmVarDecl 0x55d1d949e998 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55d1d949ea38 <col:7> col:7 implicit constexpr NumArg 'void (NumArg &&)' inline default trivial noexcept-unevaluated 0x55d1d949ea38
| `-ParmVarDecl 0x55d1d949eb48 <col:7> col:7 'NumArg &&'
`-CXXDestructorDecl 0x55d1d94a0cd8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d1d949ce38 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55d1d949cf98 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55d1d949d028 <col:32, col:38> col:32 public
|-TypedefDecl 0x55d1d949d060 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55d1d8fd3800 'uint32_t' sugar
|   |-Typedef 0x55d1d8ee74c8 'uint32_t'
|   `-TypedefType 0x55d1d8ec05a0 '__uint32_t' sugar
|     |-Typedef 0x55d1d8ec0198 '__uint32_t'
|     `-BuiltinType 0x55d1d8e7e620 'unsigned int'
|-CXXConstructorDecl 0x55d1d949d1a8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55d1d949d0d0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55d1d949e688 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55d1d949ebc8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55d1d949df40 'base' 'int'
| | `-ImplicitCastExpr 0x55d1d949e728 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55d1d949e6e8 <col:16> 'int' lvalue ParmVar 0x55d1d949d0d0 'b' 'int'
| `-CompoundStmt 0x55d1d949ec38 <col:19, line:1046:5>
|-CXXMethodDecl 0x55d1d949d6a0 <line:1048:5, line:1050:50> line:1048:17 parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55d1d949d270 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55d1d949d2f0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55d1d949d368 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55d1d949d3e8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55d1d949d4a8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55d1d949d528 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55d1d949daf8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55d1d949d770 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x55d1d949da58 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x55d1d949d818 <col:27, col:41> col:41 referenced str 'const String &'
|   |-ParmVarDecl 0x55d1d949d8b8 <col:46, col:49> col:49 referenced result 'V &'
|   |-ParmVarDecl 0x55d1d949d930 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x55d1d949e6a8 <col:82> 'const ArgContext' lvalue Var 0x55d1d9491608 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x55d1d949fb88 <col:94, line:1067:5>
|     |-DeclStmt 0x55d1d949edc8 <line:1054:9, col:64>
|     | `-VarDecl 0x55d1d949ec58 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-CXXDependentScopeMemberExpr 0x55d1d949ed80 <col:36, col:55> '<dependent type>' lvalue ->is_signed
|     |-DeclStmt 0x55d1d949efe8 <line:1055:9, col:91>
|     | `-VarDecl 0x55d1d949edf8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55d1d949efc0 <col:31, col:90> 'int' functional cast to int <Dependent>
|     |     `-BinaryOperator 0x55d1d949efa0 <col:35, col:89> 'unsigned long' '/'
|     |       |-ParenExpr 0x55d1d949ef50 <col:35, col:69> 'unsigned long'
|     |       | `-BinaryOperator 0x55d1d949ef30 <col:36, col:68> 'unsigned long' '-'
|     |       |   |-BinaryOperator 0x55d1d949eed8 <col:36, col:64> 'unsigned long' '+'
|     |       |   | |-UnaryExprOrTypeTraitExpr 0x55d1d949ee88 <col:36, col:44> 'unsigned long' sizeof 'V'
|     |       |   | `-UnaryExprOrTypeTraitExpr 0x55d1d949eeb8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |       |   `-ImplicitCastExpr 0x55d1d949ef18 <col:68> 'unsigned long' <IntegralCast>
|     |       |     `-IntegerLiteral 0x55d1d949eef8 <col:68> 'int' 1
|     |       `-UnaryExprOrTypeTraitExpr 0x55d1d949ef80 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55d1d949f168 <line:1056:9, col:27>
|     | `-VarDecl 0x55d1d949f100 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
|     |-IfStmt 0x55d1d949f5b0 <line:1057:9, line:1059:22>
|     | |-CXXOperatorCallExpr 0x55d1d949f4e0 <line:1057:13, line:1058:24> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55d1d949f460 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55d1d939d7c8 0x55d1d91e6da8 0x55d1d91e6a80 0x55d1d91d7250 0x55d1d91d6f00 0x55d1d91d67f0 0x55d1d91a9160 0x55d1d9136630
|     | | |-CallExpr 0x55d1d949f3a0 <line:1057:13, col:78> '<dependent type>'
|     | | | |-UnresolvedMemberExpr 0x55d1d949f190 <col:13> '<bound member function type>' lvalue
|     | | | |-CXXMemberCallExpr 0x55d1d949f240 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55d1d949f210 <col:19, col:23> '<bound member function type>' .begin 0x55d1d91c6458
|     | | | |   `-DeclRefExpr 0x55d1d949f1f0 <col:19> 'const String' lvalue ParmVar 0x55d1d949d818 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55d1d949f2b0 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55d1d949f280 <col:32, col:36> '<bound member function type>' .end 0x55d1d91c6670
|     | | | |   `-DeclRefExpr 0x55d1d949f260 <col:32> 'const String' lvalue ParmVar 0x55d1d949d818 'str' 'const String &'
|     | | | |-DeclRefExpr 0x55d1d949f2d0 <col:43> 'const bool' lvalue Var 0x55d1d949ec58 'is_signed' 'const bool'
|     | | | |-CXXFunctionalCastExpr 0x55d1d949f338 <col:54, col:67> 'int' functional cast to int <Dependent>
|     | | | | `-UnaryExprOrTypeTraitExpr 0x55d1d949f318 <col:58, col:66> 'unsigned long' sizeof 'V'
|     | | | |-DeclRefExpr 0x55d1d949f360 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55d1d949f100 'x' 'IntArg::limb_type [nlimb]'
|     | | | `-DeclRefExpr 0x55d1d949f380 <col:73> 'const int' lvalue Var 0x55d1d949edf8 'nlimb' 'const int'
|     | | `-CXXMemberCallExpr 0x55d1d949f440 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55d1d949f410 <col:16, col:20> '<bound member function type>' .end 0x55d1d91c6670
|     | |     `-DeclRefExpr 0x55d1d949f3f0 <col:16> 'const String' lvalue ParmVar 0x55d1d949d818 'str' 'const String &'
|     | `-BinaryOperator 0x55d1d949f590 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55d1d949f528 <col:13> 'int' lvalue ->status 0x55d1d949dfa8
|     |   | `-CXXThisExpr 0x55d1d949f518 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55d1d949f578 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55d1d949f558 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55d1d949cc00 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55d1d949f800 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55d1d949f6e8 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55d1d949f6d0 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55d1d949f6b8 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55d1d949f5d8 <col:13> 'int' lvalue ->status 0x55d1d949dfa8
|     | | |     `-CXXThisExpr 0x55d1d949f5c8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55d1d949f698 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55d1d949f668 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55d1d949f618 <col:23> 'int' lvalue ->status 0x55d1d949dfa8
|     | |   |   `-CXXThisExpr 0x55d1d949f608 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55d1d949f680 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55d1d949f648 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55d1d949cc90 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55d1d949f7e0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55d1d949f780 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55d1d949f728 <col:13, col:18> '<bound member function type>' .error 0x55d1d9361670
|     |   | | `-DeclRefExpr 0x55d1d949f708 <col:13> 'const ArgContext' lvalue ParmVar 0x55d1d949d930 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55d1d949f7a8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55d1d949f758 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55d1d949f7d0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55d1d949f7c0 <col:20> 'bool' false
|     |-DeclStmt 0x55d1d949f9d8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55d1d949f980 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
|     |   `-DependentNameType 0x55d1d949f910 'typename make_unsigned<V>::type' dependent
|     |-CallExpr 0x55d1d949fb38 <line:1065:9, col:71> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d1d949f9f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55d1d916a5f8
|     | |-DeclRefExpr 0x55d1d949fa38 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55d1d949f100 'x' 'IntArg::limb_type [nlimb]'
|     | `-CXXReinterpretCastExpr 0x55d1d949fb08 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
|     |   `-DeclRefExpr 0x55d1d949fa80 <col:64> 'V' lvalue ParmVar 0x55d1d949d8b8 'result' 'V &'
|     `-ReturnStmt 0x55d1d949fb78 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55d1d949fb68 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55d1d949deb8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55d1d949db68 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55d1d949de18 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55d1d949dc18 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55d1d949dcb8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55d1d949dd30 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55d1d949e6c8 <col:71> 'const ArgContext' lvalue Var 0x55d1d9491608 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55d1d94a02f8 <col:83, line:1083:5>
| |   |-DeclStmt 0x55d1d949fc50 <line:1071:9, col:12>
| |   | `-VarDecl 0x55d1d949fbe8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55d1d94a02d0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55d1d949fee0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55d1d949fd68 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55d1d949fd30 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55d1d949fc78 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55d1d949fcd0 <col:31> 'const String' lvalue ParmVar 0x55d1d949dc18 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55d1d949fcf0 <col:36> 'V' lvalue Var 0x55d1d949fbe8 'x' 'V'
| |     | |   `-DeclRefExpr 0x55d1d949fd10 <col:39> 'const ArgContext' lvalue ParmVar 0x55d1d949dd30 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55d1d949fec0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55d1d949fea0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55d1d949fe88 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55d1d949fe70 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55d1d949fd90 <col:17> 'int' lvalue ->status 0x55d1d949dfa8
| |     |     |     `-CXXThisExpr 0x55d1d949fd80 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55d1d949fe50 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55d1d949fe20 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55d1d949fdd0 <col:27> 'int' lvalue ->status 0x55d1d949dfa8
| |     |       |   `-CXXThisExpr 0x55d1d949fdc0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55d1d949fe38 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55d1d949fe00 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55d1d949cc90 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55d1d949ff10 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55d1d949ff00 <col:20> 'bool' false
| |     `-IfStmt 0x55d1d94a02a8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55d1d949ffb0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55d1d949ff80 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55d1d949ff30 <col:18> 'int' lvalue ->status 0x55d1d949dfa8
| |       | |   `-CXXThisExpr 0x55d1d949ff20 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55d1d949ff98 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55d1d949ff60 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55d1d949cc90 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55d1d94a01e8 <col:42, line:1079:9>
| |       | |-CallExpr 0x55d1d94a0190 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55d1d949ffe0 <line:1076:13> '<bound member function type>' ->range_error 0x55d1d949e5b8
| |       | | | `-CXXThisExpr 0x55d1d949ffd0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55d1d94a0010 <col:25> 'const ArgContext' lvalue ParmVar 0x55d1d949dd30 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55d1d94a00f0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55d1d94a0168 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55d1d94a0148 <col:43> 'V' lvalue Var 0x55d1d949fbe8 'x' 'V'
| |       | `-ReturnStmt 0x55d1d94a01d8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55d1d94a01c8 <col:20> 'bool' false
| |       `-CompoundStmt 0x55d1d94a0288 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55d1d94a0248 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55d1d94a0208 <col:13> 'V' lvalue ParmVar 0x55d1d949dcb8 'result' 'V &'
| |         | `-DeclRefExpr 0x55d1d94a0228 <col:22> 'V' lvalue Var 0x55d1d949fbe8 'x' 'V'
| |         `-ReturnStmt 0x55d1d94a0278 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55d1d94a0268 <col:20> 'bool' true
| `-CXXMethodDecl 0x55d1d94dd3a8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55d1d94dd188 <col:16, col:30> col:30 str 'const String &'
|   |-ParmVarDecl 0x55d1d94dd258 <col:35, col:38> col:38 result 'int &'
|   `-ParmVarDecl 0x55d1d94dd2c0 <col:46, col:71> col:64 args 'const ArgContext &' cinit
|     `-DeclRefExpr 0x55d1d949e6c8 <col:71> 'const ArgContext' lvalue Var 0x55d1d9491608 'blank_args' 'const ArgContext'
|-FieldDecl 0x55d1d949df40 <line:1085:5, col:9> col:9 base 'int'
|-FieldDecl 0x55d1d949dfa8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55d1d949dff8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55d1d949e2b0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55d1d949e038 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55d1d949e0b8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55d1d949e130 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55d1d949e1b0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55d1d949e5b8 <line:1092:5, line:1093:45> line:1092:10 referenced range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55d1d949e380 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55d1d949e3f8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55d1d949e490 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55d1d94a0b58 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55d1d94a0b58
| `-ParmVarDecl 0x55d1d94a0c68 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55d1d94a0de8 <col:7> col:7 implicit constexpr IntArg 'void (IntArg &&)' inline default trivial noexcept-unevaluated 0x55d1d94a0de8
| `-ParmVarDecl 0x55d1d94a0ef8 <col:7> col:7 'IntArg &&'
`-CXXDestructorDecl 0x55d1d94dcf28 <col:7> col:7 implicit referenced ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d1d94a5420 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55d1d94a5678 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55d1d9508dd0 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55d1d9509270 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55d1d9509250 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55d1d95092e0 <col:19>
|-CXXConstructorDecl 0x55d1d9508ed8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x55d1d9508ed8
| `-ParmVarDecl 0x55d1d9508fe8 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x55d1d9509088 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d1d9509198 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55d1d9509ea0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55d1d9509bc0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55d1d9509b90 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x55d1d9509b60 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x55d1d9509198 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x55d1d9509f10 <col:19>
`-CXXDestructorDecl 0x55d1d9509320 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
