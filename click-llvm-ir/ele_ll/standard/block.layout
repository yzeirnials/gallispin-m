
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b0838c9a78 prev 0x55b0838c1218 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b0838c9b70 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55b0838c9c00 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55b0838c9c78 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55b0838c9d38 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55b0838c9e00 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55b0838c9f78 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55b0838c9eb0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55b0838ca020 <col:24>
| `-OptimizeNoneAttr 0x55b0838ca078 <col:34>
|-CXXMethodDecl 0x55b0838ca0c0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55b0838ca378 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55b0838ca170 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55b0838ca1e8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55b0838ca268 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55b0838ca430 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55b0838ca468 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55b0838ca4d0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55b0838ca558 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55b0838ca878 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55b0838ca610 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55b0838ca688 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55b0838ca700 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55b0838ca780 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55b0838ca990 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55b0838d2308 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55b0838d2308
| `-ParmVarDecl 0x55b0838d2418 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55b0838d24b8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55b0838d24b8
| `-ParmVarDecl 0x55b0838d25c8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55b0839a44b0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b0838bca90 prev 0x55b0838bc810 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55b0838bcb88 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55b0838bcc18 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55b0838bcc78 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55b0838bcd68 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55b0838bce68 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55b0838bd038 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55b0838bcee8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55b0838bcf60 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55b0838bd1c8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55b0838bd100 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55b0838bd270 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55b0838bd3a8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55b0838bd2e0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55b0838bd548 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55b0838bd488 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55b0838bd6e8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55b0838bd628 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55b0838bd790 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55b0838bd890 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55b0838bd970 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b0838bd870 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55b0838bd850 <col:26> 'int' 1
| `-EnumConstantDecl 0x55b0838bd920 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55b0838bd988 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b0838bd900 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55b0838bd8e0 <col:44> 'int' 2
|-CXXMethodDecl 0x55b0838bdad0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55b0838bd9b8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55b0838bda38 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55b0838bdc28 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55b0838bdb98 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55b0838bde68 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55b0838bdce8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55b0838bdd60 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55b0838bdf18 <col:20>
| `-OptimizeNoneAttr 0x55b0838bdf70 <col:30>
|-CXXMethodDecl 0x55b0838be078 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55b0838bdfb0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55b0838be120 <col:20>
| `-OptimizeNoneAttr 0x55b0838be178 <col:30>
|-CXXMethodDecl 0x55b0838be1c8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55b0838be290 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55b0838be3a8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55b0838be430 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55b0838be4b8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55b0838be540 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x55b0838be5c8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55b0838be658 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55b0838be718 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55b0838be7a0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55b0838be828 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55b0838be8b0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55b0838be938 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55b0838be9c0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55b0838bea50 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55b0838beb10 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55b0838beba0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55b0838becf0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55b0838bec58 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55b0838bee80 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55b0838bedb0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55b0838bf130 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55b0838bef38 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55b0838befb8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55b0838bf038 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55b0838bf1e8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55b0838bf2f0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55b0838bf580 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b0838bf2d0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55b0838bf2b0 <col:33> 'int' 0
| |-EnumConstantDecl 0x55b0838bf380 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55b0838bf598 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b0838bf360 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55b0838bf340 <col:32> 'int' 20
| |-EnumConstantDecl 0x55b0838bf410 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55b0838bf5b0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b0838bf3f0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55b0838bf3d0 <col:38> 'int' 90
| |-EnumConstantDecl 0x55b0838bf4a0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55b0838bf5c8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b0838bf480 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55b0838bf460 <col:35> 'int' 100
| `-EnumConstantDecl 0x55b0838bf530 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55b0838bf5e0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b0838bf510 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55b0838bf4f0 <col:32> 'int' 2000
|-CXXMethodDecl 0x55b0838bf620 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55b0838bfa60 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55b0838bf8d0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55b0838bf948 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55b0838bfb30 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55b0838bfcb0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55b0838bfbe0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55b0838bfeb8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55b0838bfd68 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55b0838bfde0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55b0838bffb8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55b0838c0058 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55b0838c0120 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55b0838c01b0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55b0838c03e0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b0838c0190 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55b0838c0170 <col:36> 'int' EnumConstant 0x55b0838c0120 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55b0838c0200 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55b0838c0250 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55b0838c02a0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55b0838c02f0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55b0838c0340 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55b0838c0390 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55b0838c04c8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55b0838c0408 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55b0838c0590 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55b0838c0650 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55b0838c0710 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55b0838c07d0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55b0838c08e8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55b0838c09b0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55b0838c0b30 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55b0838c0a60 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55b0838c0c58 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55b0838c0e58 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55b0838c0d08 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55b0838c0d88 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55b0838ce7a8 <col:54, line:127:5>
|   |-ParenExpr 0x55b0838ce658 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55b0838ce628 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55b0838ce318 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55b0838ce2f0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55b0838ce2d8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55b0838ce2c0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55b0838ce290 <col:31> 'Router *' lvalue ->_router 0x55b0838cc170
|   |   |         `-CXXThisExpr 0x55b0838ce280 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55b0838ce378 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b0838ce358 <col:48> 'int' 0
|   |   `-CallExpr 0x55b0838ce588 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55b0838ce570 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b0838ce550 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b0833f7110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b0838ce5c8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838ce3e8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55b0838ce5e0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838ce408 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55b0838ce5f8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b0838ce440 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55b0838ce610 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b0838ce538 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b0838ce520 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b0838ce4d8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55b0838ce6f0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55b0838ce688 <col:9> 'Router *' lvalue ->_router 0x55b0838cc170
|   | | `-CXXThisExpr 0x55b0838ce678 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55b0838ce6d8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55b0838ce6b8 <col:19> 'Router *' lvalue ParmVar 0x55b0838c0d08 'r' 'Router *'
|   `-BinaryOperator 0x55b0838ce788 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55b0838ce720 <col:9> 'int' lvalue ->_eindex 0x55b0838cc1d8
|     | `-CXXThisExpr 0x55b0838ce710 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55b0838ce770 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55b0838ce750 <col:19> 'int' lvalue ParmVar 0x55b0838c0d88 'eindex' 'int'
|-CXXMethodDecl 0x55b0838c0fe0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55b0838c0f18 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55b0838c10b0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55b0838c1178 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55b0838c1218 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55b0838c1468 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55b0838c12e0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55b0838c1360 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55b0838c1518 <col:20>
| `-OptimizeNoneAttr 0x55b0838c1570 <col:30>
|-CXXMethodDecl 0x55b0838c1678 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55b0838c15b0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55b0838c1720 <col:20>
| `-OptimizeNoneAttr 0x55b0838c1778 <col:30>
|-CXXMethodDecl 0x55b0838c1848 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55b0838c17b8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55b0838c18f0 <col:20>
| `-OptimizeNoneAttr 0x55b0838c1948 <col:30>
|-CXXMethodDecl 0x55b0838c1ad8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55b0838c1980 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55b0838c1a00 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55b0838c1c68 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55b0838c1ba0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55b0838c1db8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55b0838c1d28 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55b0838c1f08 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55b0838c1e78 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55b0838c2058 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55b0838c1fc8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55b0838c2318 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55b0838c2110 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55b0838c2190 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55b0838c2238 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55b0838c23f0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55b0838c24b0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55b0838c2780 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55b0838c2630 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55b0838c26a8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55b0838c28a8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55b0838c2a80 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55b0838c2960 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55b0838c29e0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55b0838c2c68 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55b0838c2b48 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55b0838c2bc8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55b0838c2fd8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55b0838c2d28 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55b0838c2da0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55b0838c2e20 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55b0838cdd90 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55b0838cdd70 <col:106> 'int' 0
| `-ParmVarDecl 0x55b0838c2e98 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55b0838cddc8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55b0838cdda8 <col:126> 'int' 0
|-CXXMethodDecl 0x55b0838c3378 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55b0838c30a8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55b0838c3140 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55b0838c31c0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55b0838c3238 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55b0838cde00 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55b0838cdde0 <col:114> 'int' 0
|-CXXMethodDecl 0x55b0838c3708 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55b0838c3450 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55b0838c34c8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55b0838c3548 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55b0838cde18 <col:96> 'int' 0
| `-ParmVarDecl 0x55b0838c35c0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55b0838cde58 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55b0838cde38 <col:116> 'int' 0
|-CXXMethodDecl 0x55b0838c3a88 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55b0838c37d8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55b0838c3850 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55b0838c38d0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55b0838cde90 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55b0838cde70 <col:109> 'int' 0
| `-ParmVarDecl 0x55b0838c3948 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55b0838cdec8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55b0838cdea8 <col:129> 'int' 0
|-CXXMethodDecl 0x55b0838c3e08 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55b0838c3b58 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55b0838c3bd0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55b0838c3c50 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55b0838c3cc8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55b0838cdf00 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55b0838cdee0 <col:117> 'int' 0
|-CXXMethodDecl 0x55b0838c4198 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55b0838c3ee0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b0838c3f58 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55b0838c3fd8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55b0838cdf18 <col:99> 'int' 0
| `-ParmVarDecl 0x55b0838c4050 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55b0838cdf58 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55b0838cdf38 <col:119> 'int' 0
|-CXXMethodDecl 0x55b0838c45b8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55b0838c4268 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55b0838c42e8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55b0838c4360 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55b0838c43e0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55b0838cdf90 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55b0838cdf70 <col:108> 'int' 0
| `-ParmVarDecl 0x55b0838c4460 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55b0838cdfc8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55b0838cdfa8 <col:141> 'int' 0
|-CXXMethodDecl 0x55b0838c49d8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55b0838c4690 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55b0838c4710 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55b0838c4788 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55b0838c4808 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55b0838c4888 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55b0838cdfe0 <col:121> 'int' 0
|-CXXMethodDecl 0x55b0838c4e08 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55b0838c4ab8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55b0838c4b38 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55b0838c4bb0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55b0838c4c30 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55b0838ce000 <col:98> 'int' 0
| `-ParmVarDecl 0x55b0838c4cb0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55b0838ce020 <col:123> 'int' 0
|-CXXMethodDecl 0x55b0838c50d0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55b0838c4ee0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55b0838c4f60 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55b0838c4fe0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55b0838ce040 <col:80> 'int' 0
|-EnumDecl 0x55b0838c5188 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55b0838c5290 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55b0838c5520 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b0838c5270 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55b0838c5250 <col:42> 'int' 1
| |-EnumConstantDecl 0x55b0838c5320 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55b0838c5538 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b0838c5300 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55b0838c52e0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55b0838c53b0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55b0838c5550 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b0838c5390 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55b0838c5370 <col:44> 'int' 4
| |-EnumConstantDecl 0x55b0838c5440 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55b0838c5568 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b0838c5420 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55b0838c5400 <col:36> 'int' 7
| `-EnumConstantDecl 0x55b0838c54d0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55b0838c5580 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b0838c54b0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55b0838c5490 <col:34> 'int' 6
|-CXXMethodDecl 0x55b0838c5838 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55b0838c55a8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55b0838c5648 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55b0838c56c8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55b0838c5740 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55b0838ce0f8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55b0838ce0e0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55b0838ce0c8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55b0838ce0a8 <col:98, col:105> 'String' (CXXTemporary 0x55b0838ce0a8)
|           `-CXXTemporaryObjectExpr 0x55b0838ce070 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55b0838c5ad8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55b0838c5908 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55b0838c5980 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55b0838c59f8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55b0838ce1a8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55b0838ce190 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55b0838ce178 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55b0838ce158 <col:94, col:101> 'String' (CXXTemporary 0x55b0838ce158)
| |         `-CXXTemporaryObjectExpr 0x55b0838ce120 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55b0838ce990 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55b0838ce908 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55b0838ce8d8 <col:9> '<bound member function type>' ->add_task_handlers 0x55b0838c5838
|     | `-CXXThisExpr 0x55b0838ce8c8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55b0838ce948 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55b0838ce848 <col:27> 'Task *' lvalue ParmVar 0x55b0838c5908 'task' 'Task *'
|     |-ImplicitCastExpr 0x55b0838ce960 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55b0838ce868 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55b0838c5980 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55b0838ce978 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55b0838ce888 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55b0838c54d0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55b0838ce8a8 <col:62> 'const String' lvalue ParmVar 0x55b0838c59f8 'prefix' 'const String &'
|-CXXMethodDecl 0x55b0838c5ce8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55b0838c5ba0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55b0838c5c18 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55b0838ce258 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55b0838ce240 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55b0838ce228 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55b0838ce208 <col:70, col:77> 'String' (CXXTemporary 0x55b0838ce208)
| |         `-CXXTemporaryObjectExpr 0x55b0838ce1d0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55b0838ceb68 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55b0838ceae0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55b0838ceab0 <col:9> '<bound member function type>' ->add_task_handlers 0x55b0838c5838
|     | `-CXXThisExpr 0x55b0838ceaa0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55b0838ceb20 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55b0838cea20 <col:27> 'Task *' lvalue ParmVar 0x55b0838c5ba0 'task' 'Task *'
|     |-ImplicitCastExpr 0x55b0838ceb38 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55b0838cea40 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55b0838ceb50 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55b0838cea60 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55b0838c54d0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55b0838cea80 <col:57> 'const String' lvalue ParmVar 0x55b0838c5c18 'prefix' 'const String &'
|-CXXMethodDecl 0x55b0838c5fc8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55b0838c5db0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b0838c5e30 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b0838c5ea8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55b0838c6278 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55b0838c6098 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b0838c6118 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b0838c6198 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55b0838c6568 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55b0838c6348 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b0838c63c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b0838c6440 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55b0838c6818 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55b0838c6638 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b0838c66b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b0838c6738 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55b0838c6ac8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55b0838c68e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b0838c6968 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b0838c69e8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55b0838c6d78 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55b0838c6b98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b0838c6c18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b0838c6c90 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55b0838c7028 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55b0838c6e48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b0838c6ec8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b0838c6f48 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55b0838c7338 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55b0838c7150 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b0838c71d0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b0838c7250 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55b0838c7618 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55b0838c7408 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b0838c7488 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b0838c7530 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55b0838c78f8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55b0838c76e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b0838c7768 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b0838c7810 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55b0838c7b60 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55b0838c79c8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55b0838c7a48 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55b0838c7ac0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55b0838c7e08 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55b0838c7c30 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55b0838c7cb0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55b0838c7d28 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55b0838c80b8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55b0838c7ed8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b0838c7f58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b0838c7fd8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55b0838c8368 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55b0838c8188 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b0838c8208 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b0838c8280 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55b0838c8618 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55b0838c8438 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b0838c84b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b0838c8530 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55b0838c88e8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55b0838c86e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b0838c8768 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b0838c8808 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55b0838c8c18 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55b0838c89b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b0838c8a38 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55b0838c8ab0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55b0838c8b28 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55b0838ce270 <col:93> 'bool' false
|-CXXMethodDecl 0x55b0838c8e00 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55b0838c8ce8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55b0838c8d68 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55b0838c8fd8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55b0838c8ec0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55b0838c8f40 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55b0838c92b8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55b0838c9098 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55b0838c9110 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55b0838c9190 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55b0838c9208 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55b0838c95a8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55b0838c9388 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55b0838c9400 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55b0838c9480 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55b0838c94f8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55b0838c97e0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55b0838c9680 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55b0838c9700 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55b0838c99c8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55b0838c98a8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55b0838c9928 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55b0838c9a78 prev 0x55b0838c1218 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55b0838c9b70 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55b0838c9c00 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55b0838c9c78 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55b0838c9d38 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55b0838c9e00 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55b0838c9f78 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55b0838c9eb0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55b0838ca020 <col:24>
| | `-OptimizeNoneAttr 0x55b0838ca078 <col:34>
| |-CXXMethodDecl 0x55b0838ca0c0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55b0838ca378 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55b0838ca170 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55b0838ca1e8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55b0838ca268 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55b0838ca430 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55b0838ca468 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55b0838ca4d0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55b0838ca558 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55b0838ca878 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55b0838ca610 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55b0838ca688 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55b0838ca700 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55b0838ca780 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55b0838ca990 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55b0838d2308 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55b0838d2308
| | `-ParmVarDecl 0x55b0838d2418 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55b0838d24b8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55b0838d24b8
| | `-ParmVarDecl 0x55b0838d25c8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55b0839a44b0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55b0838caa08 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55b0838caaa8 <col:38> "" ""
|-CXXMethodDecl 0x55b0838cab38 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55b0838cabd8 <col:44> "" ""
|-AccessSpecDecl 0x55b0838cac48 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55b0838cac70 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55b0838cad70 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55b0838cadc0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b0838cad50 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55b0838cad30 <col:27> 'int' 4
|-FieldDecl 0x55b0838cae78 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55b0838cb028 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55b0838cb0e0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55b0838cc170 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55b0838cc1d8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55b0838cc328 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55b0838cc268 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55b0838cc4d8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55b0838cc3e8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55b0838cc6b8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55b0838cc598 <col:20> col:23 'int'
| `-ParmVarDecl 0x55b0838cc618 <col:25> col:28 'int'
|-CXXMethodDecl 0x55b0838cc960 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55b0838cc780 <col:23> col:26 'int'
| |-ParmVarDecl 0x55b0838cc800 <col:28> col:31 'int'
| `-ParmVarDecl 0x55b0838cc878 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55b0838cca18 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55b0838ccae0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55b0838ccb30 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55b0838ccb80 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55b0838ccd60 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55b0838ccc10 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55b0838ccc88 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55b0838cd008 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55b0838cce28 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55b0838ccea8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55b0838ccf20 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55b0838cd228 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55b0838cd0d8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55b0838cd158 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55b0838cd560 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55b0838cd2e8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55b0838cd368 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55b0838cd3e0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55b0838cd460 <col:57> col:60 'int'
|-CXXMethodDecl 0x55b0838cd748 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55b0838cd630 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55b0838cd6b0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55b0838cd898 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55b0838cd808 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55b0838cdc18 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55b0838cd958 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55b0838cd9d8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55b0838cda50 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55b0838cdad0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55b0838cdd30 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class Block
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _thresh
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b0838d5478 <../elements/standard/block.hh:35:1, line:58:1> line:35:7 class Block definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55b0838d55d8 <col:1, col:7> col:7 implicit referenced class Block
|-AccessSpecDecl 0x55b0838d5668 <line:37:2, col:8> col:2 public
|-CXXConstructorDecl 0x55b0838d56f0 <line:39:3, col:9> col:3 Block 'void ()'
|-CXXMethodDecl 0x55b0838d57f0 <line:41:3, col:52> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55b0838be1c8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55b0838d6bf8 <col:34, col:52>
|   `-ReturnStmt 0x55b0838d6be8 <col:36, col:43>
|     `-ImplicitCastExpr 0x55b0838d6bd0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55b0838d6bb0 <col:43> 'const char [6]' lvalue "Block"
|-CXXMethodDecl 0x55b0838d58b8 <line:42:3, col:50> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55b0838be290 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55b0838d6c58 <col:34, col:50>
|   `-ReturnStmt 0x55b0838d6c48 <col:36, col:43>
|     `-ImplicitCastExpr 0x55b0838d6c30 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55b0838d6c10 <col:43> 'const char [4]' lvalue "1/2"
|-CXXMethodDecl 0x55b0838d5978 <line:43:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x55b0838bfb30 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x55b0838d5c50 <line:45:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55b0838bfa60 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55b0838d5b00 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x55b0838d5b78 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x55b0838d5e28 <line:48:3, col:31> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x55b0838bd038 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x55b0838d5d18 <col:13, col:17> col:17 port 'int'
| `-ParmVarDecl 0x55b0838d5d90 <col:23, col:30> col:31 'Packet *'
|-AccessSpecDecl 0x55b0838d5ed8 <line:51:2, col:9> col:2 private
|-FieldDecl 0x55b0838d5f18 <line:53:3, col:7> col:7 _thresh 'int'
|-CXXMethodDecl 0x55b0838d6198 <line:55:3, col:93> col:14 thresh_write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55b0838d5f78 <col:35, col:49> col:49 conf 'const String &'
| |-ParmVarDecl 0x55b0838d5ff0 <col:55, col:64> col:64 e 'Element *'
| |-ParmVarDecl 0x55b0838d6070 <col:67, col:72> col:73 'void *'
| `-ParmVarDecl 0x55b0838d60e8 <col:75, col:89> col:89 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55b0838d6380 <line:56:3, col:55> col:17 thresh_read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55b0838d6268 <col:37, col:46> col:46 e 'Element *'
| `-ParmVarDecl 0x55b0838d62e8 <col:49, col:54> col:55 'void *'
|-CXXConstructorDecl 0x55b0838d6458 <line:35:7> col:7 implicit Block 'void (const Block &)' inline default_delete noexcept-unevaluated 0x55b0838d6458
| `-ParmVarDecl 0x55b0838d6568 <col:7> col:7 'const Block &'
|-CXXConstructorDecl 0x55b0838d6608 <col:7> col:7 implicit Block 'void (Block &&)' inline default_delete noexcept-unevaluated 0x55b0838d6608
| `-ParmVarDecl 0x55b0838d6718 <col:7> col:7 'Block &&'
|-CXXMethodDecl 0x55b0838d67b8 <col:7> col:7 implicit operator= 'Block &(const Block &)' inline default_delete noexcept-unevaluated 0x55b0838d67b8
| `-ParmVarDecl 0x55b0838d68c8 <col:7> col:7 'const Block &'
|-CXXMethodDecl 0x55b0838d6938 <col:7> col:7 implicit operator= 'Block &(Block &&)' inline default_delete noexcept-unevaluated 0x55b0838d6938
| `-ParmVarDecl 0x55b0838d6a48 <col:7> col:7 'Block &&'
`-CXXDestructorDecl 0x55b0838d6ad0 <col:7> col:7 implicit ~Block 'void ()' inline default noexcept-unevaluated 0x55b0838d6ad0
  `-Overrides: [ 0x55b0838bcd68 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.Block = type { %class.Element.base, i32 }
  NonVirtualBaseLLVMType:%class.Block = type { %class.Element.base, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b08368f920 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55b08368fa38 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55b08368fad8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55b08368fb38 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55b08368fb98 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55b08368fc48 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b08368ff50 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b083690068 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55b083690110 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55b083690178 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55b083690208 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55b0836962a0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55b0836966d8 <col:12>
|-CXXConstructorDecl 0x55b0836963a8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55b0836964b8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55b083690110 'data' 'const char *'
| | `-ImplicitCastExpr 0x55b083698c60 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55b083698c30 <col:12> 'const char *const' lvalue .data 0x55b083690110
| |     `-DeclRefExpr 0x55b083698c10 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b0836964b8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55b083690178 'length' 'int'
| | `-ImplicitCastExpr 0x55b083698cf0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55b083698cc0 <col:12> 'const int' lvalue .length 0x55b083690178
| |     `-DeclRefExpr 0x55b083698ca0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b0836964b8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55b083690208 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55b083698d80 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55b083698d50 <col:12> 'String::memo_t *const' lvalue .memo 0x55b083690208
| |     `-DeclRefExpr 0x55b083698d30 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b0836964b8 '' 'const String::rep_t &'
| `-CompoundStmt 0x55b083698dd8 <col:12>
|-CXXConstructorDecl 0x55b083696558 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55b083696558
| `-ParmVarDecl 0x55b083696668 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55b08369bbc0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55b0836a75d8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55b0836a76e8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55b0836a7c00 <col:12>
|   |-BinaryOperator 0x55b0836a7a18 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55b0836a79d0 <col:12> 'const char *' lvalue ->data 0x55b083690110
|   | | `-CXXThisExpr 0x55b0836a79c0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55b0836a7a00 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55b0836a7990 <col:12> 'const char *const' lvalue .data 0x55b083690110
|   |     `-DeclRefExpr 0x55b0836a7970 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b0836a76e8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55b0836a7ae0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55b0836a7a98 <col:12> 'int' lvalue ->length 0x55b083690178
|   | | `-CXXThisExpr 0x55b0836a7a88 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55b0836a7ac8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55b0836a7a58 <col:12> 'const int' lvalue .length 0x55b083690178
|   |     `-DeclRefExpr 0x55b0836a7a38 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b0836a76e8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55b0836a7ba8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55b0836a7b60 <col:12> 'String::memo_t *' lvalue ->memo 0x55b083690208
|   | | `-CXXThisExpr 0x55b0836a7b50 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55b0836a7b90 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55b0836a7b20 <col:12> 'String::memo_t *const' lvalue .memo 0x55b083690208
|   |     `-DeclRefExpr 0x55b0836a7b00 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b0836a76e8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55b0836a7bf0 <col:12>
|     `-UnaryOperator 0x55b0836a7bd8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55b0836a7bc8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55b0836a7758 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55b0836a7758
  `-ParmVarDecl 0x55b0836a7868 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b083686e90 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55b083686fa8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55b083687038 <col:16, col:22> col:16 public
|-TypedefDecl 0x55b083687078 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55b08335bfd0 'const char *'
|   `-QualType 0x55b08335b521 'const char' const
|     `-BuiltinType 0x55b08335b520 'char'
|-TypedefDecl 0x55b083687100 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55b0836870d0 'String::const_iterator' sugar
|   |-Typedef 0x55b083687078 'const_iterator'
|   `-PointerType 0x55b08335bfd0 'const char *'
|     `-QualType 0x55b08335b521 'const char' const
|       `-BuiltinType 0x55b08335b520 'char'
|-TypedefDecl 0x55b083687270 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55b0836871e0 'int (String::*)() const'
|   |-RecordType 0x55b083686f20 'String'
|   | `-CXXRecord 0x55b083686e90 'String'
|   `-ParenType 0x55b083687180 'int () const' sugar
|     `-FunctionProtoType 0x55b08365bd20 'int () const' const cdecl
|       `-BuiltinType 0x55b08335b580 'int'
|-TypedefDecl 0x55b0836872d8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55b0834b0900 'int64_t' sugar
|   |-Typedef 0x55b0833c4390 'int64_t'
|   `-TypedefType 0x55b08339d630 '__int64_t' sugar
|     |-Typedef 0x55b08339d208 '__int64_t'
|     `-BuiltinType 0x55b08335b5a0 'long'
|-TypedefDecl 0x55b083687340 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55b0834b0820 'uint64_t' sugar
|   |-Typedef 0x55b0833c4530 'uint64_t'
|   `-TypedefType 0x55b08339d6c0 '__uint64_t' sugar
|     |-Typedef 0x55b08339d278 '__uint64_t'
|     `-BuiltinType 0x55b08335b640 'unsigned long'
|-TypedefDecl 0x55b0836873d0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55b0836873a0 'String::intmax_t' sugar
|   |-Typedef 0x55b0836872d8 'intmax_t'
|   `-TypedefType 0x55b0834b0900 'int64_t' sugar
|     |-Typedef 0x55b0833c4390 'int64_t'
|     `-TypedefType 0x55b08339d630 '__int64_t' sugar
|       |-Typedef 0x55b08339d208 '__int64_t'
|       `-BuiltinType 0x55b08335b5a0 'long'
|-TypedefDecl 0x55b083687460 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55b083687430 'String::uintmax_t' sugar
|   |-Typedef 0x55b083687340 'uintmax_t'
|   `-TypedefType 0x55b0834b0820 'uint64_t' sugar
|     |-Typedef 0x55b0833c4530 'uint64_t'
|     `-TypedefType 0x55b08339d6c0 '__uint64_t' sugar
|       |-Typedef 0x55b08339d278 '__uint64_t'
|       `-BuiltinType 0x55b08335b640 'unsigned long'
|-CXXConstructorDecl 0x55b083687520 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55b0836876c8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55b083687608 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55b083687878 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55b0836877b8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55b0836879d0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55b083687940 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55b083687be8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55b083687a98 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55b083687b18 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55b083687e08 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55b083687cb8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55b083687d38 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55b083688028 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55b083687ed8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55b083687f58 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55b083688248 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55b0836880f8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55b083688178 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55b0836883d8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55b083688310 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55b083688558 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55b083688498 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55b0836886e8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55b083688620 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55b083688840 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55b0836887b0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55b083688998 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55b083688908 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55b083688af0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55b083688a60 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55b083688c78 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55b083688bb8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55b083688e08 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55b083688d40 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55b083688f98 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55b083688ed0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55b083689128 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55b083689060 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55b083689220 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55b083689348 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55b0836894c8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55b083689400 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55b083689618 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55b083689588 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55b0836896d0 <col:63> "" ""
|-CXXMethodDecl 0x55b083689818 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55b083689758 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55b083689a28 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55b0836898d8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55b083689958 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55b083689c48 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55b083689af0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55b083689b70 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55b083689f28 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55b083689d08 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55b083689d88 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55b083695d70 <col:55> 'int' 10
| `-ParmVarDecl 0x55b083689e00 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55b083695d90 <col:76> 'bool' true
|-CXXMethodDecl 0x55b08368a208 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55b083689ff0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55b08368a070 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55b083695da0 <col:56> 'int' 10
| `-ParmVarDecl 0x55b08368a0e8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55b083695dc0 <col:77> 'bool' true
|-CXXMethodDecl 0x55b08368a310 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55b08368a3d8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55b08368a4a0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55b08368a540 <col:20>
| `-OptimizeNoneAttr 0x55b08368a598 <col:30>
|-CXXConversionDecl 0x55b08368a688 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55b08368a758 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55b08368a818 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55b08368a908 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55b08368a9c8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55b08368ab48 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55b08368aa80 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55b08368ac98 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55b08368ac08 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55b08368ad88 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55b08368ae48 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55b08368b098 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55b08368af00 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55b08368af80 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55b08368b2f8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55b08368b160 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55b08368b1e0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55b08368b3c8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55b08368b5d8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55b08368b480 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55b08368b500 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55b08368b7f8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55b08368b6a0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55b08368b720 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55b08368b988 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55b08368b8c0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55b08368ba78 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55b08368bbe8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55b08368bb28 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55b08368bdf8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55b08368bca8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55b08368bd28 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55b08368c010 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55b08368beb8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55b08368bf30 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55b08368c1a0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55b08368c0d0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55b08368c3c0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55b08368c260 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55b08368c2e0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55b08368c510 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55b08368c480 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55b08368c6e8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55b08368c5d0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55b08368c650 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55b08368c838 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55b08368c7a8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55b08368ca50 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55b08368c8f0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55b08368c970 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55b083695dd0 <col:39> 'int' 0
|-CXXMethodDecl 0x55b08368cc70 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55b08368cb10 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55b08368cb90 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55b083695df0 <col:48> 'int' 0
|-CXXMethodDecl 0x55b08368ce50 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55b08368cd30 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55b08368cdb0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55b083695e10 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55b08368cf20 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55b08368cfe0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55b08368d0a0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55b08368d160 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55b08368d220 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55b08368d3c8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55b08368d2d0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55b08368d548 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55b08368d480 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55b08368d720 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55b08368d608 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55b08368d898 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55b08368d7d8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55b08368d9e0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55b08368d950 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55b08368db30 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55b08368daa0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55b08368dd08 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55b08368dbf0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55b08368dc70 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55b08368dee8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55b08368ddd0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55b08368de50 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55b08368e038 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55b08368dfa8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55b08368e248 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55b08368e0f8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55b08368e178 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55b08368e3a8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55b08368e310 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55b08368e500 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55b08368e468 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55b08368e5a8 <col:57> "" ""
|-CXXMethodDecl 0x55b08368e6b8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55b08368e628 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55b08368e808 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55b08368e778 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55b08368e988 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55b08368e8c0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55b08368ea50 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55b08368eb10 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55b08368ebd0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55b08368ec70 <col:49> "" ""
|-CXXMethodDecl 0x55b08368ed00 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55b08368edc0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55b08368eeb0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55b08368ef78 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55b08368f038 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55b08368f0f8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55b08368f1f0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55b08368f2b8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55b08368f380 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55b08368f558 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55b08368f438 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55b08368f4b8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55b08368f780 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55b08368f620 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55b08368f6a0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55b08368f890 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55b08368f8f8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55b08368f920 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55b08368fa38 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55b08368fad8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55b08368fb38 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55b08368fb98 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55b08368fc48 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55b08368fcb0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55b08368fee8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55b08368ff38 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b08368fec8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55b08368fdd8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55b08368fd80 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55b08368fdc0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55b08368fda0 <col:32> 'int' 8
|-CXXRecordDecl 0x55b08368ff50 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55b083690068 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55b083690110 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55b083690178 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55b083690208 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55b0836962a0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55b0836966d8 <col:12>
| |-CXXConstructorDecl 0x55b0836963a8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55b0836964b8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55b083690110 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55b083698c60 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55b083698c30 <col:12> 'const char *const' lvalue .data 0x55b083690110
| | |     `-DeclRefExpr 0x55b083698c10 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b0836964b8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55b083690178 'length' 'int'
| | | `-ImplicitCastExpr 0x55b083698cf0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55b083698cc0 <col:12> 'const int' lvalue .length 0x55b083690178
| | |     `-DeclRefExpr 0x55b083698ca0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b0836964b8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55b083690208 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55b083698d80 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55b083698d50 <col:12> 'String::memo_t *const' lvalue .memo 0x55b083690208
| | |     `-DeclRefExpr 0x55b083698d30 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b0836964b8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55b083698dd8 <col:12>
| |-CXXConstructorDecl 0x55b083696558 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55b083696558
| | `-ParmVarDecl 0x55b083696668 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55b08369bbc0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55b0836a75d8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55b0836a76e8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55b0836a7c00 <col:12>
| |   |-BinaryOperator 0x55b0836a7a18 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55b0836a79d0 <col:12> 'const char *' lvalue ->data 0x55b083690110
| |   | | `-CXXThisExpr 0x55b0836a79c0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55b0836a7a00 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55b0836a7990 <col:12> 'const char *const' lvalue .data 0x55b083690110
| |   |     `-DeclRefExpr 0x55b0836a7970 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b0836a76e8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55b0836a7ae0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55b0836a7a98 <col:12> 'int' lvalue ->length 0x55b083690178
| |   | | `-CXXThisExpr 0x55b0836a7a88 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55b0836a7ac8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55b0836a7a58 <col:12> 'const int' lvalue .length 0x55b083690178
| |   |     `-DeclRefExpr 0x55b0836a7a38 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b0836a76e8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55b0836a7ba8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55b0836a7b60 <col:12> 'String::memo_t *' lvalue ->memo 0x55b083690208
| |   | | `-CXXThisExpr 0x55b0836a7b50 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55b0836a7b90 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55b0836a7b20 <col:12> 'String::memo_t *const' lvalue .memo 0x55b083690208
| |   |     `-DeclRefExpr 0x55b0836a7b00 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b0836a76e8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55b0836a7bf0 <col:12>
| |     `-UnaryOperator 0x55b0836a7bd8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55b0836a7bc8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55b0836a7758 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55b0836a7758
|   `-ParmVarDecl 0x55b0836a7868 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55b083690280 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55b0836904c8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55b0836902e8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55b083690368 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55b0836903e0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55b083696260 <col:79, line:261:5>
|   |-BinaryOperator 0x55b083695ed8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55b083695e70 <col:2, col:5> 'const char *' lvalue .data 0x55b083690110
|   | | `-MemberExpr 0x55b083695e40 <col:2> 'String::rep_t' lvalue ->_r 0x55b083690280
|   | |   `-CXXThisExpr 0x55b083695e30 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55b083695ec0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55b083695ea0 <col:12> 'const char *' lvalue ParmVar 0x55b0836902e8 'data' 'const char *'
|   |-BinaryOperator 0x55b083695fa0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55b083695f38 <col:2, col:5> 'int' lvalue .length 0x55b083690178
|   | | `-MemberExpr 0x55b083695f08 <col:2> 'String::rep_t' lvalue ->_r 0x55b083690280
|   | |   `-CXXThisExpr 0x55b083695ef8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55b083695f88 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55b083695f68 <col:14> 'int' lvalue ParmVar 0x55b083690368 'length' 'int'
|   `-IfStmt 0x55b083696248 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55b0836960c0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55b0836960a8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55b083696088 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55b083696068 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55b083696000 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55b083690208
|     |       | `-MemberExpr 0x55b083695fd0 <col:7> 'String::rep_t' lvalue ->_r 0x55b083690280
|     |       |   `-CXXThisExpr 0x55b083695fc0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55b083696050 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55b083696030 <col:17> 'String::memo_t *' lvalue ParmVar 0x55b0836903e0 'memo' 'String::memo_t *'
|     `-CallExpr 0x55b083696220 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55b083696208 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b083696110 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55b08367eef8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55b083696178 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55b08368fad8
|         `-ImplicitCastExpr 0x55b083696160 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55b083696140 <col:27> 'String::memo_t *' lvalue ParmVar 0x55b0836903e0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55b083690778 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55b083690598 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55b083690618 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55b083690690 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55b083690280 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55b0836966e8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55b083696878 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55b0836967e0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55b083696750 <col:2> '<bound member function type>' ->assign_memo 0x55b0836904c8
|     | `-ImplicitCastExpr 0x55b083696818 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55b083696740 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55b083696830 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55b083696780 <col:14> 'const char *' lvalue ParmVar 0x55b083690598 'data' 'const char *'
|     |-ImplicitCastExpr 0x55b083696848 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55b0836967a0 <col:20> 'int' lvalue ParmVar 0x55b083690618 'length' 'int'
|     `-ImplicitCastExpr 0x55b083696860 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55b0836967c0 <col:28> 'String::memo_t *' lvalue ParmVar 0x55b083690690 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55b083690908 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55b083690848 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55b083696ad0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55b083696a50 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55b0836968a0 <col:2> '<bound member function type>' ->assign_memo 0x55b0836904c8
|     | `-CXXThisExpr 0x55b083696890 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55b083696a88 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55b083696920 <col:14, col:19> 'const char *' lvalue .data 0x55b083690110
|     |   `-MemberExpr 0x55b0836968f0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55b083690280
|     |     `-DeclRefExpr 0x55b0836968d0 <col:14> 'const String' lvalue ParmVar 0x55b083690848 'x' 'const String &'
|     |-ImplicitCastExpr 0x55b083696aa0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55b0836969a0 <col:25, col:30> 'int' lvalue .length 0x55b083690178
|     |   `-MemberExpr 0x55b083696970 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55b083690280
|     |     `-DeclRefExpr 0x55b083696950 <col:25> 'const String' lvalue ParmVar 0x55b083690848 'x' 'const String &'
|     `-ImplicitCastExpr 0x55b083696ab8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55b083696a20 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55b083690208
|         `-MemberExpr 0x55b0836969f0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55b083690280
|           `-DeclRefExpr 0x55b0836969d0 <col:38> 'const String' lvalue ParmVar 0x55b083690848 'x' 'const String &'
|-CXXMethodDecl 0x55b0836909d0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55b083697490 <col:31, line:278:5>
|   `-IfStmt 0x55b083697478 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55b083696b70 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55b083696b58 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55b083696b28 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55b083690208
|     |     `-MemberExpr 0x55b083696af8 <col:6> 'String::rep_t' lvalue ->_r 0x55b083690280
|     |       `-CXXThisExpr 0x55b083696ae8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55b083697450 <col:15, line:277:2>
|       |-ParenExpr 0x55b083697020 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55b083696ff0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55b083696c80 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55b083696c68 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55b083696c50 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55b083696c10 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55b08368fad8
|       |   |       `-ImplicitCastExpr 0x55b083696bf8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55b083696bc8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55b083690208
|       |   |           `-MemberExpr 0x55b083696b98 <col:27> 'String::rep_t' lvalue ->_r 0x55b083690280
|       |   |             `-CXXThisExpr 0x55b083696b88 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55b083696ce0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55b083696cc0 <col:54> 'int' 0
|       |   `-CallExpr 0x55b083696f50 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55b083696f38 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55b083696eb8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b0833f7110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55b083696f90 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55b083696dc8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55b083696fa8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55b083696df8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55b083696fc0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55b083696e30 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55b083696fd8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55b083696ea0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55b083696e88 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55b083696e50 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55b083697370 <line:274:6, line:275:22>
|       | |-CallExpr 0x55b083697230 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55b083697218 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55b083697190 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55b083680340 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55b083697160 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55b08368fad8
|       | |   `-ImplicitCastExpr 0x55b083697148 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55b083697118 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55b083690208
|       | |       `-MemberExpr 0x55b0836970e8 <col:40> 'String::rep_t' lvalue ->_r 0x55b083690280
|       | |         `-CXXThisExpr 0x55b0836970d8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55b083697330 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55b083697318 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55b083697258 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55b0836951b0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55b083697358 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55b0836972b8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55b083690208
|       |       `-MemberExpr 0x55b083697288 <col:15> 'String::rep_t' lvalue ->_r 0x55b083690280
|       |         `-CXXThisExpr 0x55b083697278 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55b083697430 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55b0836973c8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55b083690208
|         | `-MemberExpr 0x55b083697398 <col:6> 'String::rep_t' lvalue ->_r 0x55b083690280
|         |   `-CXXThisExpr 0x55b083697388 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55b083697418 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55b0836973f8 <col:16> 'int' 0
|-CXXMethodDecl 0x55b083690c68 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55b083690a88 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55b083690b08 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55b083690b80 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55b083690d40 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55b083690f90 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55b083690df8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55b083690e78 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55b083690ef0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55b083691178 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55b083691060 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55b0836910e0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55b083691278 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55b083697568 <col:41, line:286:5>
|   `-ReturnStmt 0x55b083697558 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55b083697528 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55b0836974f0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55b0836974d8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55b0836974b8 <col:46> 'int' 1
|-CXXMethodDecl 0x55b083691518 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55b083691330 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55b0836913b0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55b083691430 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55b0836951b0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55b0836915e0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55b083695280 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55b083695450 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55b083695338 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55b0836953b8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55b083695510 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55b0836955d8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55b0836956d8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55b083695750 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55b0836957c8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55b083695830 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55b083695930 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55b083695980 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b083695910 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55b0836958f0 <col:22> 'int' 14
|-CXXMethodDecl 0x55b083695b98 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55b0836959b0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55b083695a30 <col:38> col:41 'int'
| `-ParmVarDecl 0x55b083695ab0 <col:43> col:46 'int'
|-FriendDecl 0x55b083695ca0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55b083695d30 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55b083925050 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55b083925228 prev 0x55b083925050 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55b0839252b8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55b0839252e0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55b08335b580 'int'
|-TypedefDecl 0x55b083926ce0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55b083926c90 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55b083926c70 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55b0839254f8 'type'
|     `-SubstTemplateTypeParmType 0x55b0839254c0 'String' sugar
|       |-TemplateTypeParmType 0x55b08364b740 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b08364b6f0 'T'
|       `-RecordType 0x55b083686f20 'String'
|         `-CXXRecord 0x55b083686e90 'String'
|-TypedefDecl 0x55b083926d98 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55b083926d60 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55b083926d40 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55b083926ce0 'type'
|     `-ElaboratedType 0x55b083926c90 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55b083926c70 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55b0839254f8 'type'
|         `-SubstTemplateTypeParmType 0x55b0839254c0 'String' sugar
|           |-TemplateTypeParmType 0x55b08364b740 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55b08364b6f0 'T'
|           `-RecordType 0x55b083686f20 'String'
|             `-CXXRecord 0x55b083686e90 'String'
|-CXXMethodDecl 0x55b083926f18 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55b083926e28 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55b083927008 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55b0839270e8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55b0839270e8
|-CXXMethodDecl 0x55b0839273b8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55b0839272c0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55b0839275f8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55b083927470 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55b0839274e8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55b0839277c8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55b0839276b8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55b083927730 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55b083927928 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55b0839279f8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55b083927c48 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55b083927ab8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55b083927b30 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55b083927ea8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55b083927d18 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55b083927d90 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55b083928068 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55b083927f78 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55b083928228 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55b083928130 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55b0839282e0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55b083928390 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55b0839285c8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55b083928440 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55b0839284b8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55b083928868 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55b083928770 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55b083928930 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55b083928980 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55b0839289d0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55b0838bf6d0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55b083923ab8 prev 0x55b0838bf6d0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55b083924fc0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55b083924f70 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55b083924f50 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55b083924e00 'type'
|     `-SubstTemplateTypeParmType 0x55b083924c90 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55b0836214f0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55b083621498 'F'
|       `-RecordType 0x55b0839248f0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55b083924810 'typed_array_memory'
|-FieldDecl 0x55b083928a20 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55b083928a70 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55b083928aa8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55b083923b50 'String' sugar
|   |-TemplateTypeParmType 0x55b083658a60 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55b083658a08 'T'
|   `-RecordType 0x55b083686f20 'String'
|     `-CXXRecord 0x55b083686e90 'String'
|-TypedefDecl 0x55b083928b38 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55b083928b00 'String &'
|   `-SubstTemplateTypeParmType 0x55b083923b50 'String' sugar
|     |-TemplateTypeParmType 0x55b083658a60 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55b083658a08 'T'
|     `-RecordType 0x55b083686f20 'String'
|       `-CXXRecord 0x55b083686e90 'String'
|-TypedefDecl 0x55b083928bc8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55b083928b90 'const String &'
|   `-QualType 0x55b083923b51 'const String' const
|     `-SubstTemplateTypeParmType 0x55b083923b50 'String' sugar
|       |-TemplateTypeParmType 0x55b083658a60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b083658a08 'T'
|       `-RecordType 0x55b083686f20 'String'
|         `-CXXRecord 0x55b083686e90 'String'
|-TypedefDecl 0x55b083928c58 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55b083928c20 'String *'
|   `-SubstTemplateTypeParmType 0x55b083923b50 'String' sugar
|     |-TemplateTypeParmType 0x55b083658a60 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55b083658a08 'T'
|     `-RecordType 0x55b083686f20 'String'
|       `-CXXRecord 0x55b083686e90 'String'
|-TypedefDecl 0x55b083928ce8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55b083928cb0 'const String *'
|   `-QualType 0x55b083923b51 'const String' const
|     `-SubstTemplateTypeParmType 0x55b083923b50 'String' sugar
|       |-TemplateTypeParmType 0x55b083658a60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b083658a08 'T'
|       `-RecordType 0x55b083686f20 'String'
|         `-CXXRecord 0x55b083686e90 'String'
|-TypedefDecl 0x55b083929940 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55b0839298f0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55b0839298d0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55b083929808 'type'
|     `-LValueReferenceType 0x55b0839297d0 'const String &'
|       `-QualType 0x55b083929571 'const String' const
|         `-SubstTemplateTypeParmType 0x55b083929570 'String' sugar
|           |-TemplateTypeParmType 0x55b08362b440 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55b08362b3e8 'T'
|           `-RecordType 0x55b083686f20 'String'
|             `-CXXRecord 0x55b083686e90 'String'
|-TypedefDecl 0x55b0839299a8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55b083928b90 'const String &'
|   `-QualType 0x55b083923b51 'const String' const
|     `-SubstTemplateTypeParmType 0x55b083923b50 'String' sugar
|       |-TemplateTypeParmType 0x55b083658a60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b083658a08 'T'
|       `-RecordType 0x55b083686f20 'String'
|         `-CXXRecord 0x55b083686e90 'String'
|-TypedefDecl 0x55b083929a00 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55b08335b580 'int'
|-TypedefDecl 0x55b083929a68 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55b083928c20 'String *'
|   `-SubstTemplateTypeParmType 0x55b083923b50 'String' sugar
|     |-TemplateTypeParmType 0x55b083658a60 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55b083658a08 'T'
|     `-RecordType 0x55b083686f20 'String'
|       `-CXXRecord 0x55b083686e90 'String'
|-TypedefDecl 0x55b083929ad0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55b083928cb0 'const String *'
|   `-QualType 0x55b083923b51 'const String' const
|     `-SubstTemplateTypeParmType 0x55b083923b50 'String' sugar
|       |-TemplateTypeParmType 0x55b083658a60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b083658a08 'T'
|       `-RecordType 0x55b083686f20 'String'
|         `-CXXRecord 0x55b083686e90 'String'
|-EnumDecl 0x55b083929b28 <line:134:5> col:5
| `-EnumConstantDecl 0x55b083929c20 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55b083929c00 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55b08365a0e8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55b08365a0c0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55b08365a0a0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55b083929ca8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55b083929f38 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55b083929d60 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55b083929e00 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55b08392a1c8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55b08392a0b0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55b08392a488 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55b08392a370 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55b08392a7a0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55b08392a680 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55b08392aab0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55b08392a990 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55b08392ada0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55b08392abe8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55b08392ac60 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55b08392aec8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55b08392af78 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b08392afd0 <col:30> Inherited
|-CXXMethodDecl 0x55b08392b018 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55b08392b0c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b08392b120 <col:30> Inherited
|-CXXMethodDecl 0x55b08392b1e8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55b08392b298 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b08392b2f0 <col:30> Inherited
|-CXXMethodDecl 0x55b08392b338 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55b08392b3e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b08392b440 <col:30> Inherited
|-CXXMethodDecl 0x55b08392b488 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55b08392b538 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b08392b590 <col:30> Inherited
|-CXXMethodDecl 0x55b08392b5d8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55b08392b688 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b08392b6e0 <col:30> Inherited
|-CXXMethodDecl 0x55b08392b708 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55b08392b7b8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55b08392b868 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55b08392ba28 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55b08392b918 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55b08392b990 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55b08392bb78 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55b08392bae8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b08392bd28 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55b08392bc30 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55b08392bde0 <col:20>
| `-OptimizeNoneAttr 0x55b08392be38 <col:30>
|-CXXMethodDecl 0x55b08392bf58 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55b08392be60 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55b08392c010 <col:20>
| `-OptimizeNoneAttr 0x55b08392c068 <col:30>
|-CXXMethodDecl 0x55b08392c120 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55b08392c090 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b08392c268 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55b08392c1d8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b08392c398 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55b08392c498 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55b08392c568 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55b08392c638 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55b08392c778 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55b08392c6e8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b08392c8c0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55b08392c830 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b08392ca08 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55b08392c978 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55b08392cac0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55b08392cbc0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55b08392cb30 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55b08392cc78 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55b08392cd38 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55b08392ce38 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55b08392cfb8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55b08392cef8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55b08392d778 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55b08392d070 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55b08392d6d8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55b08392d5d8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55b08392d858 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55b08392d9a8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55b08392d918 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55b08392da60 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55b08392dca8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55b08392db20 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55b08392db98 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55b08392de38 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55b08392dd78 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55b08392e048 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55b08392df00 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55b08392df78 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55b08392e108 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55b08392e368 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55b08392e270 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55b08392e438 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55b08392e438

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b0838d6c70 prev 0x55b0838bc8a0 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55b0838d6d68 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55b0838d6df8 <col:22, col:28> col:22 public
|-EnumDecl 0x55b0838d6e20 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55b0838d6f38 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b0838d6f18 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55b0838d6f00 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55b0838d6ee0 <col:14> 'int' 999
| |-EnumConstantDecl 0x55b0838d6fe0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b0838d6fc0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55b0838d6fa8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55b0838d6f88 <col:14> 'int' 1
| |-EnumConstantDecl 0x55b0838d7070 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b0838d7050 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55b0838d7030 <col:17> 'int' 0
| |-EnumConstantDecl 0x55b0838d7100 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b0838d70e0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55b0838d70c0 <col:13> 'int' 1
| |-EnumConstantDecl 0x55b0838d7190 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b0838d7170 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55b0838d7150 <col:16> 'int' 2
| |-EnumConstantDecl 0x55b0838d7220 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b0838d7200 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55b0838d71e0 <col:13> 'int' 3
| |-EnumConstantDecl 0x55b0838d72b0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b0838d7290 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55b0838d7270 <col:15> 'int' 4
| |-EnumConstantDecl 0x55b0838d7340 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b0838d7320 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55b0838d7300 <col:14> 'int' 5
| |-EnumConstantDecl 0x55b0838d73d0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b0838d73b0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55b0838d7390 <col:12> 'int' 6
| `-EnumConstantDecl 0x55b0838d7460 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55b0838d7440 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55b0838d7420 <col:13> 'int' 7
|-VarDecl 0x55b0838d74d0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55b0838d7558 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55b0838d75e0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55b0838d7668 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55b0838d76f0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55b0838d7778 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55b0838d7800 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55b0838d7888 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55b0838d7910 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55b0838d7998 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55b0838d7a20 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55b0838d7b20 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55b0838dec58 '_nerrors' 'int'
| | `-IntegerLiteral 0x55b0838df3e8 <line:128:13> 'int' 0
| `-CompoundStmt 0x55b0838df458 <col:16, line:129:5>
|-CXXDestructorDecl 0x55b0838d7c10 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55b0838df468 <col:29, line:132:5>
|-CXXMethodDecl 0x55b0838d7dc8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55b0838d7d00 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55b0838d7e90 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55b0838d7f78 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55b0838df4c0 <col:44, line:161:5>
|   `-ReturnStmt 0x55b0838df4b0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55b0838df498 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55b0838df478 <col:9> 'ErrorHandler *' lvalue Var 0x55b0838decb8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55b0838d80e8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55b0838d8028 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55b0838d81b0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55b0838df520 <col:43, line:173:5>
|   `-ReturnStmt 0x55b0838df510 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55b0838df4f8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55b0838df4d8 <col:9> 'ErrorHandler *' lvalue Var 0x55b0838ded30 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55b0838d8268 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55b0838d82e8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55b0838d83f8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55b0838d8368 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55b0838d8548 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55b0838d84b8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55b0838d86a0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55b0838d8608 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55b0838d87f8 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55b0838d8760 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55b0838d8950 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55b0838d88b8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55b0838d8b60 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55b0838d8a08 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55b0838d8a88 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55b0838d8d38 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55b0838d8c20 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55b0838d8ca0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55b0838d8f58 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55b0838d8df8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55b0838d8e78 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55b0838d9138 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55b0838d9018 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55b0838d9098 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55b0838d9318 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55b0838d91f8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55b0838d9278 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55b0838d94a0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55b0838d93d8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55b0838d9670 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55b0838d9558 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55b0838d95d0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55b0838df778 <col:57, line:234:5>
|   `-ReturnStmt 0x55b0838df768 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55b0838df750 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55b0838df6f8 <col:9, col:41> 'int'
|         |-MemberExpr 0x55b0838df6c8 <col:9> '<bound member function type>' ->xmessage 0x55b0838d94a0
|         | `-CXXThisExpr 0x55b0838df6b8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55b0838df738 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55b0838df720 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55b0838df698 <col:18, col:40> 'String' (CXXTemporary 0x55b0838df698)
|               `-CallExpr 0x55b0838df660 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55b0838df648 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55b0838df5c0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55b0838db6f8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55b0838df5e0 <col:31> 'const String' lvalue ParmVar 0x55b0838d95d0 'str' 'const String &'
|                 `-DeclRefExpr 0x55b0838df600 <col:36> 'const String' lvalue ParmVar 0x55b0838d9558 'anno' 'const String &'
|-CXXMethodDecl 0x55b0838d99b0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55b0838d9730 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55b0838d97b0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55b0838d9880 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55b0838dfa08 <col:68, line:243:5>
|   `-ReturnStmt 0x55b0838df9f8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55b0838df9e0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55b0838df980 <col:9, col:41> 'int'
|         |-MemberExpr 0x55b0838df950 <col:9> '<bound member function type>' ->xmessage 0x55b0838d9670
|         | `-CXXThisExpr 0x55b0838df940 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55b0838df818 <col:18> 'const String' lvalue ParmVar 0x55b0838d9730 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55b0838df9c8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55b0838df9b0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55b0838df920 <col:24, col:40> 'String' (CXXTemporary 0x55b0838df920)
|               `-CXXMemberCallExpr 0x55b0838df8b8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55b0838df848 <col:24> '<bound member function type>' ->vformat 0x55b0838dab90
|                 | `-CXXThisExpr 0x55b0838df838 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55b0838df8e8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55b0838df878 <col:32> 'const char *' lvalue ParmVar 0x55b0838d97b0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55b0838df900 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55b0838df898 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55b0838d9880 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55b0838d9c50 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55b0838d9a78 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55b0838d9af0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55b0838d9b68 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55b0838dfd48 <col:23, line:254:5>
|   `-ReturnStmt 0x55b0838dfd38 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55b0838dfd20 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55b0838dfcc0 <col:9, col:71> 'int'
|         |-MemberExpr 0x55b0838dfc90 <col:9> '<bound member function type>' ->xmessage 0x55b0838d9670
|         | `-CXXThisExpr 0x55b0838dfc80 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55b0838dfd08 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55b0838dfcf0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55b0838dfc40 <col:18, col:65> 'String' (CXXTemporary 0x55b0838dfc40)
|         |     `-CallExpr 0x55b0838dfbd8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55b0838dfbc0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55b0838dfaa8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55b0838db6f8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55b0838dfac8 <col:31> 'const String' lvalue ParmVar 0x55b0838d9af0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55b0838dfc20 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55b0838dfc08 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55b0838dfba0 <col:37, col:64> 'String' (CXXTemporary 0x55b0838dfba0)
|         |             `-CallExpr 0x55b0838dfb70 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55b0838dfb58 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55b0838dfae8 <col:37> 'String (const String &)' lvalue CXXMethod 0x55b0838dbd48 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55b0838dfb08 <col:56> 'const String' lvalue ParmVar 0x55b0838d9a78 'landmark' 'const String &'
|         `-DeclRefExpr 0x55b0838dfc60 <col:68> 'const String' lvalue ParmVar 0x55b0838d9b68 'str' 'const String &'
|-CXXMethodDecl 0x55b0838d9fd0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55b0838d9d18 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55b0838d9d90 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55b0838d9e10 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55b0838d9e88 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55b0838e0000 <col:34, line:267:5>
|   `-ReturnStmt 0x55b0838dfff0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55b0838dffd8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55b0838dff70 <col:9, col:51> 'int'
|         |-MemberExpr 0x55b0838dff40 <col:9> '<bound member function type>' ->xmessage 0x55b0838d9c50
|         | `-CXXThisExpr 0x55b0838dff30 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55b0838dfde8 <col:18> 'const String' lvalue ParmVar 0x55b0838d9d18 'landmark' 'const String &'
|         |-DeclRefExpr 0x55b0838dfe08 <col:28> 'const String' lvalue ParmVar 0x55b0838d9d90 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55b0838dffc0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55b0838dffa8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55b0838dff10 <col:34, col:50> 'String' (CXXTemporary 0x55b0838dff10)
|               `-CXXMemberCallExpr 0x55b0838dfea8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55b0838dfe38 <col:34> '<bound member function type>' ->vformat 0x55b0838dab90
|                 | `-CXXThisExpr 0x55b0838dfe28 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55b0838dfed8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55b0838dfe68 <col:42> 'const char *' lvalue ParmVar 0x55b0838d9e10 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55b0838dfef0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55b0838dfe88 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55b0838d9e88 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55b0838da0e0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55b0838e0080 <col:25, line:288:5>
|   `-ReturnStmt 0x55b0838e0070 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55b0838e0058 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55b0838e0028 <col:9> 'const int' lvalue ->_nerrors 0x55b0838dec58
|         `-CXXThisExpr 0x55b0838e0018 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55b0838da2f0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55b0838da198 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55b0838da218 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55b0838da5d8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55b0838da3b8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55b0838da438 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55b0838da4b0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55b0838da770 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55b0838da6a8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55b0838da9b8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55b0838da830 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55b0838da8a8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55b0838e02e0 <col:58, line:357:5>
|   `-ReturnStmt 0x55b0838e02d0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55b0838e02b8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55b0838e0288 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55b0838e0270 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55b0838e0250 <col:9, col:29> 'String' (CXXTemporary 0x55b0838e0250)
|             `-CallExpr 0x55b0838e01e0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55b0838e01c8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55b0838e0148 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55b0838da5d8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55b0838e00e8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55b0838e0218 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55b0838e0108 <col:21> 'const char *' lvalue ParmVar 0x55b0838da830 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55b0838e0230 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55b0838e0128 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55b0838da8a8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55b0838dab90 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55b0838daa80 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55b0838daaf8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55b0838dace8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55b0838dac58 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55b0838dae68 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55b0838dada0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55b0838db100 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55b0838daf20 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55b0838dafa0 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55b0838db018 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55b0838db260 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55b0838db1d0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55b0838e03f8 <col:37, line:441:5>
|   `-IfStmt 0x55b0838e03e0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55b0838e0368 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55b0838e0338 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55b0838e02f8 <col:6> 'int' lvalue ParmVar 0x55b0838db1d0 'level' 'int'
|     | `-ImplicitCastExpr 0x55b0838e0350 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55b0838e0318 <col:15> 'ErrorHandler::Level' EnumConstant 0x55b0838d7220 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55b0838e03c8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55b0838e0398 <col:8> 'int' lvalue ->_nerrors 0x55b0838dec58
|         `-CXXThisExpr 0x55b0838e0388 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55b0838db328 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55b0838e0490 <col:26, line:448:5>
|   `-BinaryOperator 0x55b0838e0470 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55b0838e0420 <col:2> 'int' lvalue ->_nerrors 0x55b0838dec58
|     | `-CXXThisExpr 0x55b0838e0410 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55b0838e0450 <col:13> 'int' 0
|-CXXMethodDecl 0x55b0838db4f0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55b0838db3e0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55b0838db458 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55b0838db6f8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55b0838db5b0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55b0838db628 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55b0838db9a8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55b0838db7b8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55b0838db838 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55b0838db8b8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55b0838dba60 <col:59> 0 0
|-CXXMethodDecl 0x55b0838dbbf8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55b0838dbad8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55b0838dbb58 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55b0838e0b00 <col:70, line:534:5>
|   |-DeclStmt 0x55b0838e0600 <line:528:2, col:20>
|   | |-VarDecl 0x55b0838e04b8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55b0838e0520 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55b0838e0558 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55b0838e05c0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55b0838e06d0 <line:529:2, col:23>
|   | `-VarDecl 0x55b0838e0630 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55b0838e06b8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55b0838e0698 <col:18> 'const char *' lvalue ParmVar 0x55b0838dbad8 'begin' 'const char *'
|   |-DoStmt 0x55b0838e0a98 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55b0838e09c8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55b0838e09b0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55b0838e0990 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55b0838e06e8 <col:6> 'const char *' lvalue Var 0x55b0838e0630 'x' 'const char *'
|   | |     `-CallExpr 0x55b0838e08e0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55b0838e08c8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55b0838e0880 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55b0838df130 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55b0838e0948 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55b0838e0930 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55b0838e07a0 <col:20, col:27> 'String' (CXXTemporary 0x55b0838e07a0)
|   | |       |     `-CXXTemporaryObjectExpr 0x55b0838e0768 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55b0838e0960 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55b0838e07c0 <col:30> 'const char *' lvalue Var 0x55b0838e0630 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55b0838e0978 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55b0838e07e0 <col:33> 'const char *' lvalue ParmVar 0x55b0838dbb58 'end' 'const char *'
|   | |       |-UnaryOperator 0x55b0838e0820 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55b0838e0800 <col:39> 'String' lvalue Var 0x55b0838e04b8 'name' 'String'
|   | |       |-UnaryOperator 0x55b0838e0858 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55b0838e0838 <col:46> 'String' lvalue Var 0x55b0838e0558 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55b0838e0870 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55b0838e0a80 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55b0838e0a68 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55b0838e0a48 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55b0838e0a18 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55b08368a688
|   |         `-ImplicitCastExpr 0x55b0838e0a00 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55b0838e09e0 <col:11> 'String' lvalue Var 0x55b0838e04b8 'name' 'String'
|   `-ReturnStmt 0x55b0838e0af0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55b0838e0ad8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55b0838e0ab8 <col:9> 'const char *' lvalue Var 0x55b0838e0630 'x' 'const char *'
|-CXXMethodDecl 0x55b0838dbd48 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55b0838dbcb8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55b0838e1108 <col:55, line:550:5>
|   `-IfStmt 0x55b0838e10e0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55b0838e0d40 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55b0838e0d28 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55b0838e0d10 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55b0838e0cf0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55b0838e0cc0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55b08368a688
|     | |       `-DeclRefExpr 0x55b0838e0b60 <col:6> 'const String' lvalue ParmVar 0x55b0838dbcb8 'x' 'const String &'
|     | `-BinaryOperator 0x55b0838e0ca0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55b0838e0c70 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55b0838e0c20 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55b0838e0c08 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55b0838e0bc0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55b0836a3ec0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55b0838e0b80 <col:11> 'const String' lvalue ParmVar 0x55b0838dbcb8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55b0838e0ba0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55b0838e0c88 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55b0838e0c58 <col:19> 'char' 123
|     |-ReturnStmt 0x55b0838e0db0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55b0838e0d80 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55b0838e0d60 <col:13> 'const String' lvalue ParmVar 0x55b0838dbcb8 'x' 'const String &'
|     `-IfStmt 0x55b0838e10b8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55b0838e0e48 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55b0838e0e30 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55b0838e0e10 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55b0838e0de0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55b08368a688
|       |       `-DeclRefExpr 0x55b0838e0dc0 <col:11> 'const String' lvalue ParmVar 0x55b0838dbcb8 'x' 'const String &'
|       |-ReturnStmt 0x55b0838e0fd0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55b0838e0fb8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55b0838e0f88 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55b0838e0f70 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55b0838e0f50 <col:13, col:29> 'String' (CXXTemporary 0x55b0838e0f50)
|       |         `-CallExpr 0x55b0838e0f00 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55b0838e0ee8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55b0838e0e60 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55b0838db4f0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55b0838e0f30 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55b0838e0e80 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55b0838e0ea0 <col:28> 'const String' lvalue ParmVar 0x55b0838dbcb8 'x' 'const String &'
|       `-ReturnStmt 0x55b0838e10a8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55b0838e1090 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55b0838e1060 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55b0838e1048 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55b0838e1028 <col:13, col:20> 'String' (CXXTemporary 0x55b0838e1028)
|                 `-CXXTemporaryObjectExpr 0x55b0838e0ff0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55b0838dbf48 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55b0838dbe00 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55b0838dbe78 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55b0838df3d8 <col:71> 'bool' false
|-CXXRecordDecl 0x55b0838dbff8 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55b0838de048 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55b0838ddfe0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55b0838ddf80 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55b0838ddf40 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55b083686f20 'String'
|       | `-CXXRecord 0x55b083686e90 'String'
|       |-BuiltinType 0x55b08335b580 'int'
|       `-DecayedType 0x55b0838d9850 '__va_list_tag *' sugar
|         |-TypedefType 0x55b0838d9820 'va_list' sugar
|         | |-Typedef 0x55b083578fe0 'va_list'
|         | `-TypedefType 0x55b083578f90 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55b0834b0bb8 '__gnuc_va_list'
|         |   `-TypedefType 0x55b0834b0b20 '__builtin_va_list' sugar
|         |     |-Typedef 0x55b08339cd38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55b08339cce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55b08335c2d0 '__va_list_tag'
|         |         `-CXXRecord 0x55b08335c238 '__va_list_tag'
|         `-PointerType 0x55b08357e880 '__va_list_tag *'
|           `-RecordType 0x55b08335c2d0 '__va_list_tag'
|             `-CXXRecord 0x55b08335c238 '__va_list_tag'
|-EnumDecl 0x55b0838de0a0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55b0838de1a0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b0838de700 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b0838de180 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55b0838de160 <col:16> 'int' 1
| |-EnumConstantDecl 0x55b0838de230 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b0838de718 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b0838de210 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55b0838de1f0 <col:21> 'int' 2
| |-EnumConstantDecl 0x55b0838de2c0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b0838de730 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b0838de2a0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55b0838de280 <col:22> 'int' 4
| |-EnumConstantDecl 0x55b0838de350 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b0838de748 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b0838de330 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55b0838de310 <col:17> 'int' 8
| |-EnumConstantDecl 0x55b0838de3e0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b0838de760 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b0838de3c0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55b0838de3a0 <col:22> 'int' 16
| |-EnumConstantDecl 0x55b0838de470 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b0838de778 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b0838de450 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55b0838de430 <col:19> 'int' 32
| |-EnumConstantDecl 0x55b0838de500 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b0838de790 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b0838de4e0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55b0838de4c0 <col:17> 'int' 64
| |-EnumConstantDecl 0x55b0838de590 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b0838de7a8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b0838de570 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55b0838de550 <col:14> 'int' 128
| |-EnumConstantDecl 0x55b0838de620 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b0838de7c0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b0838de600 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55b0838de5e0 <col:16> 'int' 256
| `-EnumConstantDecl 0x55b0838de6b0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55b0838de7d8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b0838de690 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55b0838de670 <col:12> 'int' 1024
|-CXXMethodDecl 0x55b0838de9e8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55b0838de800 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55b0838de8a0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55b0838deb70 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55b0838deaa8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55b0838dec18 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55b0838dec58 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55b0838decb8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55b0838ded30 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55b0838df130 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55b0838deda8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55b0838dee28 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55b0838deea8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55b0838def20 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55b0838def98 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55b0838df010 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55b0838df258 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55b0838df258
| `-ParmVarDecl 0x55b0838df368 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55b0838e1468 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55b0838e1468
  `-ParmVarDecl 0x55b0838e1578 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b08393ca88 prev 0x55b083882178 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b08393cb80 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55b08393cc10 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55b08393cd18 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55b08393cc48 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55b08393e0f0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55b08393e0d0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55b08393dc68 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55b08393e180 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b08393e140 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55b08393cc48 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55b08393dcd0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55b08393e200 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55b08393e1c0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55b08393dd30 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55b08393e240 <col:54> 'bool' false
| `-CompoundStmt 0x55b08393e348 <col:61, line:38:5>
|   `-BinaryOperator 0x55b08393e328 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55b08393e2c0 <col:9> 'const Element *' lvalue ->_context 0x55b08393dc08
|     | `-CXXThisExpr 0x55b08393e2b0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55b08393e310 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55b08393e2f0 <col:20> 'int' 0
|-CXXConstructorDecl 0x55b08393cf28 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55b08393cdd8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55b08393ce50 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55b08393e128 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55b08393e108 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55b08393dc08 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55b08393e3a0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b08393e360 <col:20> 'const Element *' lvalue ParmVar 0x55b08393cdd8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55b08393dc68 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55b08393e420 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b08393e3e0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55b08393ce50 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55b08393dcd0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55b08393e4a0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55b08393e460 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55b08393dd30 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55b08393e4e0 <col:73> 'bool' false
| `-CompoundStmt 0x55b08393e558 <col:80, line:46:5>
|-CXXMethodDecl 0x55b08393d058 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55b08393e5d0 <col:36, line:51:5>
|   `-ReturnStmt 0x55b08393e5c0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55b08393e5a8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55b08393e578 <col:16> 'const Element *const' lvalue ->_context 0x55b08393dc08
|         `-CXXThisExpr 0x55b08393e568 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55b08393d148 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55b08393e650 <col:32, line:57:5>
|   `-ReturnStmt 0x55b08393e640 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55b08393e628 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55b08393e5f8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55b08393dc68
|         `-CXXThisExpr 0x55b08393e5e8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55b08393d208 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55b08393d390 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55b08393d2c0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55b08393d4e0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55b08393d450 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55b08393d630 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55b08393d5a0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55b08393d838 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55b08393d6e8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55b08393d760 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55b08393db18 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55b08393d8f8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55b08393d978 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55b08393d9f0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55b08393dbd0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55b08393dc08 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55b08393dc68 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55b08393dcd0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55b08393dd30 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55b08393dd80 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55b08393dd80
| `-ParmVarDecl 0x55b08393de98 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55b08393df38 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55b08393df38
| `-ParmVarDecl 0x55b08393e048 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55b0839a4c48 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55b08395ee10 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55b08395efe8 prev 0x55b08395ee10 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55b08395f078 <col:46, col:52> col:46 public
|-TypedefDecl 0x55b08395f0a0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55b08335b580 'int'
|-TypedefDecl 0x55b083960c70 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55b083960c20 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55b08395f550 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55b08395f450 'type'
|     `-TemplateSpecializationType 0x55b08395f3e0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55b08395f2c0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55b08395f2a0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55b08395f280 <col:24> 'unsigned long' 4
|       `-RecordType 0x55b08395f3c0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55b08395f2e0 'char_array'
|-TypedefDecl 0x55b083960d28 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55b083960cf0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55b083960cd0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55b083960c70 'type'
|     `-ElaboratedType 0x55b083960c20 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55b08395f550 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55b08395f450 'type'
|         `-TemplateSpecializationType 0x55b08395f3e0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55b08395f2c0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55b08395f2a0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55b08395f280 <col:24> 'unsigned long' 4
|           `-RecordType 0x55b08395f3c0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55b08395f2e0 'char_array'
|-CXXMethodDecl 0x55b083960ea8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55b083960db8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55b083960f98 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55b083961078 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55b08396b710 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55b083961250 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55b08396b958 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55b08396b7c8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55b08396b840 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55b08396bb28 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55b08396ba18 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55b08396ba90 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55b08396bc88 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55b08396bd58 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55b08396bfa8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55b08396be18 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55b08396be90 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55b08396c208 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55b08396c078 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55b08396c0f0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55b08396c3c8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55b08396c2d8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55b08396c588 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55b08396c490 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55b08396c640 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55b08396c6f0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55b08396c928 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55b08396c7a0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55b08396c818 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55b08396cbc8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55b08396cad0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55b08396cc90 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55b08396cce0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55b08396cd30 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55b08395d818 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55b08395da28 prev 0x55b08395d818 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55b08395ed80 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55b08395ed30 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55b08395ed10 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55b08395ebc0 'type'
|     `-SubstTemplateTypeParmType 0x55b08395e9e0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55b083620d70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b083620d18 'T'
|       `-RecordType 0x55b08395e530 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55b08395e448 'sized_array_memory'
|-FieldDecl 0x55b08396cd80 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55b08396cdd0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55b08396ce08 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55b08395dac0 'int' sugar
|   |-TemplateTypeParmType 0x55b083658a60 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55b083658a08 'T'
|   `-BuiltinType 0x55b08335b580 'int'
|-TypedefDecl 0x55b08396ce98 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55b08396ce60 'int &'
|   `-SubstTemplateTypeParmType 0x55b08395dac0 'int' sugar
|     |-TemplateTypeParmType 0x55b083658a60 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55b083658a08 'T'
|     `-BuiltinType 0x55b08335b580 'int'
|-TypedefDecl 0x55b08396cf58 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55b08396cf20 'const int &'
|   `-QualType 0x55b08395dac1 'const int' const
|     `-SubstTemplateTypeParmType 0x55b08395dac0 'int' sugar
|       |-TemplateTypeParmType 0x55b083658a60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b083658a08 'T'
|       `-BuiltinType 0x55b08335b580 'int'
|-TypedefDecl 0x55b08396cfe8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55b08396cfb0 'int *'
|   `-SubstTemplateTypeParmType 0x55b08395dac0 'int' sugar
|     |-TemplateTypeParmType 0x55b083658a60 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55b083658a08 'T'
|     `-BuiltinType 0x55b08335b580 'int'
|-TypedefDecl 0x55b08396d078 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55b08396d040 'const int *'
|   `-QualType 0x55b08395dac1 'const int' const
|     `-SubstTemplateTypeParmType 0x55b08395dac0 'int' sugar
|       |-TemplateTypeParmType 0x55b083658a60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b083658a08 'T'
|       `-BuiltinType 0x55b08335b580 'int'
|-TypedefDecl 0x55b08396dc60 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55b08396dc10 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55b08396dbf0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55b08396db80 'type'
|     `-SubstTemplateTypeParmType 0x55b08396d940 'int' sugar
|       |-TemplateTypeParmType 0x55b08362bb70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b08362bb20 'T'
|       `-BuiltinType 0x55b08335b580 'int'
|-TypedefDecl 0x55b08396dcc8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55b08396cf20 'const int &'
|   `-QualType 0x55b08395dac1 'const int' const
|     `-SubstTemplateTypeParmType 0x55b08395dac0 'int' sugar
|       |-TemplateTypeParmType 0x55b083658a60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b083658a08 'T'
|       `-BuiltinType 0x55b08335b580 'int'
|-TypedefDecl 0x55b08396dd20 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55b08335b580 'int'
|-TypedefDecl 0x55b08396dd88 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55b08396cfb0 'int *'
|   `-SubstTemplateTypeParmType 0x55b08395dac0 'int' sugar
|     |-TemplateTypeParmType 0x55b083658a60 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55b083658a08 'T'
|     `-BuiltinType 0x55b08335b580 'int'
|-TypedefDecl 0x55b08396ddf0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55b08396d040 'const int *'
|   `-QualType 0x55b08395dac1 'const int' const
|     `-SubstTemplateTypeParmType 0x55b08395dac0 'int' sugar
|       |-TemplateTypeParmType 0x55b083658a60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b083658a08 'T'
|       `-BuiltinType 0x55b08335b580 'int'
|-EnumDecl 0x55b08396de48 <line:134:5> col:5
| `-EnumConstantDecl 0x55b08396df40 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55b08396df20 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55b08365a0e8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55b08365a0c0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55b08365a0a0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55b08396dfc8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55b08396e218 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55b08396e080 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55b08396e120 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55b08396e4d8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55b08396e3c0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55b08396e798 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55b08396e680 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55b08396eae0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55b08396e9c0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55b08396edf0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55b08396ecd0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55b08396f0e0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55b08396ef28 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55b08396efa0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55b08396f208 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55b08396f2e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b08396f340 <col:30> Inherited
|-CXXMethodDecl 0x55b08396f388 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55b08396f438 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b08396f490 <col:30> Inherited
|-CXXMethodDecl 0x55b08396f558 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55b08396f608 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b08396f660 <col:30> Inherited
|-CXXMethodDecl 0x55b08396f6a8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55b08396f758 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b08396f7b0 <col:30> Inherited
|-CXXMethodDecl 0x55b08396f7f8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55b08396f8a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b08396f900 <col:30> Inherited
|-CXXMethodDecl 0x55b08396f948 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55b08396f9f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b08396fa50 <col:30> Inherited
|-CXXMethodDecl 0x55b08396fa78 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55b08396fb28 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55b08396fbd8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55b08396fd98 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55b08396fc88 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55b08396fd00 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55b08396fee8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55b08396fe58 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b083970098 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55b08396ffa0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55b083970150 <col:20>
| `-OptimizeNoneAttr 0x55b0839701a8 <col:30>
|-CXXMethodDecl 0x55b0839702c8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55b0839701d0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55b083970380 <col:20>
| `-OptimizeNoneAttr 0x55b0839703d8 <col:30>
|-CXXMethodDecl 0x55b083970490 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55b083970400 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b0839705d8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55b083970548 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b083970708 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55b083970838 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55b083970908 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55b0839709d8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55b083970b18 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55b083970a88 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b083970c60 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55b083970bd0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b083970da8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55b083970d18 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55b083970e60 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55b083970f60 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55b083970ed0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55b083971018 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55b0839710d8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55b0839711d8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55b083971358 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55b083971298 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55b083971b18 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55b083971410 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55b083971a78 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55b083971978 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55b083971bf8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55b083971d48 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55b083971cb8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55b083971e00 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55b083972048 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55b083971ec0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55b083971f38 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55b083972208 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55b083972118 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55b083972458 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55b0839722d0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55b083972348 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55b083972518 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55b083972778 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55b083972680 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55b083972848 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b08395b988 prev 0x55b083943588 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55b08395ba80 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55b08395bb70 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55b0839843a0 <col:16, line:828:9>
|-CXXDestructorDecl 0x55b08395bc60 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55b0839843b0 <col:25, line:830:9>
|-CXXMethodDecl 0x55b08395bd60 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55b08395be10 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55b08395beb8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55b08395beb8
| `-ParmVarDecl 0x55b08395bfc8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55b08395c788 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55b08395c788
  `-ParmVarDecl 0x55b08395c898 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b083943398 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55b0839434f8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55b083943588 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55b083943640 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55b083943748 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55b083943678 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55b0839756f8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55b0839756d8 <col:31> 'int' 0
|-CXXConstructorDecl 0x55b083943a68 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55b0839438e0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55b083943958 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55b083975730 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55b083975710 <col:59> 'int' 0
|-CXXConstructorDecl 0x55b083943c40 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55b083943b30 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55b083943ba8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55b083975768 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55b083975748 <col:55> 'int' 0
|-CXXConstructorDecl 0x55b083943ff8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55b083943de0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55b083943e58 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55b083943ed0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55b0839757a0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55b083975780 <col:31> 'int' 0
|-CXXConstructorDecl 0x55b0839441b8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55b0839440f8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55b0839442b0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55b083944498 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55b0839443a0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55b083944588 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55b083975b50 <col:24, line:291:5>
|   `-ReturnStmt 0x55b083975b40 <line:290:9, col:79>
|     `-BinaryOperator 0x55b083975b20 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55b0839759f8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55b083975950 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55b083975930 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55b083975828 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55b083975810 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55b0839757f8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55b0839757c8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55b08395d7b0
|       | |   |       `-CXXThisExpr 0x55b0839757b8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55b083975918 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55b083975900 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55b0839758c8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55b083975898 <col:28, col:35> '<bound member function type>' ->size 0x55b08392b708
|       | |           `-ImplicitCastExpr 0x55b0839758e8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55b083975880 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55b083975850 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55b08395d7b0
|       | |                 `-CXXThisExpr 0x55b083975840 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55b0839759e0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55b0839759c8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55b0839759b0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55b083975980 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55b083972990
|       |         `-CXXThisExpr 0x55b083975970 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55b083975b00 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55b083975ae8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55b083975ad0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55b083975a90 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55b083975a78 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55b083975a28 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55b083972a40
|         |     |   `-CXXThisExpr 0x55b083975a18 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55b083975a58 <col:73> 'int' 0
|         `-IntegerLiteral 0x55b083975ab0 <col:79> 'int' 0
|-CXXMethodDecl 0x55b083944648 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55b083975d28 <col:32, line:296:5>
|   `-ReturnStmt 0x55b083975d18 <line:295:9, col:49>
|     `-BinaryOperator 0x55b083975cf8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55b083975bd8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55b083975bc0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55b083975ba8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55b083975b78 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55b083972990
|       |       `-CXXThisExpr 0x55b083975b68 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55b083975cd8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55b083975cc0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55b083975ca8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55b083975c68 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55b083975c50 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55b083975c00 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55b083972a40
|         |     |   `-CXXThisExpr 0x55b083975bf0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55b083975c30 <col:43> 'int' 0
|         `-IntegerLiteral 0x55b083975c88 <col:49> 'int' 0
|-CXXMethodDecl 0x55b083944738 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55b083975f38 <col:19, line:306:5>
|   |-IfStmt 0x55b083975e58 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55b083975d98 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55b083975d80 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55b083975d50 <col:13> 'Vector<String> *' lvalue ->_conf 0x55b08395d7b0
|   | |     `-CXXThisExpr 0x55b083975d40 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55b083975e38 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55b083975e08 <col:13, col:20> '<bound member function type>' ->clear 0x55b08392e108
|   |     `-ImplicitCastExpr 0x55b083975df0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55b083975dc0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55b08395d7b0
|   |         `-CXXThisExpr 0x55b083975db0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55b083975ee0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55b083975eb0 <col:9, col:16> '<bound member function type>' .clear 0x55b083972518
|   |   `-MemberExpr 0x55b083975e80 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55b083972930
|   |     `-CXXThisExpr 0x55b083975e70 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55b083975f28 <line:305:9, col:17>
|     `-UnaryOperator 0x55b083975f10 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55b083975f00 <col:17> 'Args *' this
|-CXXMethodDecl 0x55b0839449b8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55b0839448c0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55b083944b38 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55b083944a70 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55b083944eb8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55b083944be0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55b083944e18 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55b083944c88 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55b083944d00 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55b083976258 <col:67, line:327:5>
|     |-WhileStmt 0x55b083976208 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55b083976020 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55b083975fa0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55b08387a648 0x55b0836c3c28 0x55b0836c3900 0x55b0836b40d0 0x55b0836b3d80 0x55b0836b3670 0x55b083685fe0 0x55b0836134b0
|     | | |-DeclRefExpr 0x55b083975f60 <col:16> 'Iter' lvalue ParmVar 0x55b083944c88 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55b083975f80 <col:25> 'Iter' lvalue ParmVar 0x55b083944d00 'end' 'Iter'
|     | `-CompoundStmt 0x55b0839761e8 <col:30, line:325:9>
|     |   |-CallExpr 0x55b083976188 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55b083976068 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55b083976158 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55b0839760e8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b08387f7c8 0x55b08387f3e8 0x55b08387f018 0x55b08387ec38 0x55b08387e858 0x55b08387e488
|     |   |   `-DeclRefExpr 0x55b0839760c8 <col:24> 'Iter' lvalue ParmVar 0x55b083944c88 'begin' 'Iter'
|     |   `-UnaryOperator 0x55b0839761d0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55b0839761b0 <col:15> 'Iter' lvalue ParmVar 0x55b083944c88 'begin' 'Iter'
|     `-ReturnStmt 0x55b083976248 <line:326:9, col:17>
|       `-UnaryOperator 0x55b083976230 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b083976220 <col:17> 'Args *' this
|-CXXMethodDecl 0x55b083944fc0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55b083944f30 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55b083945108 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55b083945078 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55b0839451d0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55b083976338 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55b0839762d8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55b083976288 <col:9> '<bound member function type>' ->reset_from 0x55b083972db8
|   | | `-CXXThisExpr 0x55b083976278 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55b0839762b8 <col:20> 'int' 0
|   `-ReturnStmt 0x55b083976328 <line:352:9, col:17>
|     `-UnaryOperator 0x55b083976310 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55b083976300 <col:17> 'Args *' this
|-VarDecl 0x55b083945288 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55b0839452f0 <col:38> 'int' 1
|-VarDecl 0x55b083945380 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55b0839453e8 <col:39> 'int' 2
|-VarDecl 0x55b083945478 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55b0839454e0 <col:39> 'int' 4
|-VarDecl 0x55b083945570 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55b0839455d8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55b083945958 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55b083945650 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55b0839458b8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55b083945700 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b0839457a8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55b083976490 <col:43, line:371:5>
|     `-ReturnStmt 0x55b083976480 <line:370:9, col:34>
|       `-CallExpr 0x55b083976448 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b083976368 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b0839763e8 <col:21> 'const char *' lvalue ParmVar 0x55b083945700 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b083976408 <col:30> 'int' 0
|         `-DeclRefExpr 0x55b083976428 <col:33> 'T' lvalue ParmVar 0x55b0839457a8 'x' 'T &'
|-FunctionTemplateDecl 0x55b083945c88 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55b0839459c0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55b083945be8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55b083945a70 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b083945b18 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55b0839765e0 <col:45, line:375:5>
|     `-ReturnStmt 0x55b0839765d0 <line:374:9, col:42>
|       `-CallExpr 0x55b083976598 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b0839764b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b083976538 <col:21> 'const char *' lvalue ParmVar 0x55b083945a70 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b083976558 <col:30> 'const int' lvalue Var 0x55b083945288 'mandatory' 'const int'
|         `-DeclRefExpr 0x55b083976578 <col:41> 'T' lvalue ParmVar 0x55b083945b18 'x' 'T &'
|-FunctionTemplateDecl 0x55b083945fb8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55b083945cf0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55b083945f18 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55b083945da0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b083945e48 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55b083976730 <col:45, line:379:5>
|     `-ReturnStmt 0x55b083976720 <line:378:9, col:43>
|       `-CallExpr 0x55b0839766e8 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b083976608 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b083976688 <col:21> 'const char *' lvalue ParmVar 0x55b083945da0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b0839766a8 <col:30> 'const int' lvalue Var 0x55b083945380 'positional' 'const int'
|         `-DeclRefExpr 0x55b0839766c8 <col:42> 'T' lvalue ParmVar 0x55b083945e48 'x' 'T &'
|-FunctionTemplateDecl 0x55b0839462e8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55b083946020 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55b083946248 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55b0839460d0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55b083946178 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55b083976930 <col:46, line:383:5>
| |   `-ReturnStmt 0x55b083976920 <line:382:9, col:55>
| |     `-CallExpr 0x55b0839768e8 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55b083976758 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55b0839767d8 <col:21> 'const char *' lvalue ParmVar 0x55b0839460d0 'keyword' 'const char *'
| |       |-BinaryOperator 0x55b0839768a8 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55b083976858 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55b083976838 <col:30> 'const int' lvalue Var 0x55b083945288 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55b083976890 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55b083976870 <col:42> 'const int' lvalue Var 0x55b083945380 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55b0839768c8 <col:54> 'T' lvalue ParmVar 0x55b083946178 'x' 'T &'
| `-CXXMethodDecl 0x55b0839a50d8 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55b0839a4ef8 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55b0839a4fc8 <col:40, col:43> col:43 x 'int &'
|-FunctionTemplateDecl 0x55b0839466e8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55b083946350 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55b083946648 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55b083946400 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b083946480 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55b083946528 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55b083976a70 <col:54, line:388:5>
|     |-CallExpr 0x55b0839769f8 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b083976948 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55b083976988 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55b083976998 <col:30> 'const char *' lvalue ParmVar 0x55b083946400 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55b0839769b8 <col:39> 'int' lvalue ParmVar 0x55b083946480 'flags' 'int'
|     | `-DeclRefExpr 0x55b0839769d8 <col:46> 'T' lvalue ParmVar 0x55b083946528 'x' 'T &'
|     `-ReturnStmt 0x55b083976a60 <line:387:9, col:17>
|       `-UnaryOperator 0x55b083976a48 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b083976a38 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b083946b98 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55b083946758 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55b0839467d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55b083946af8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55b083946898 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b083946938 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55b0839469d8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55b083976be0 <col:74, line:403:5>
|     `-ReturnStmt 0x55b083976bd0 <line:402:9, col:56>
|       `-CallExpr 0x55b083976b90 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b083976aa0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b083976b10 <col:28> 'const char *' lvalue ParmVar 0x55b083946898 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b083976b30 <col:37> 'int' 0
|         |-DeclRefExpr 0x55b083976b50 <col:40> 'T' lvalue ParmVar 0x55b083946938 'x' 'T &'
|         `-DeclRefExpr 0x55b083976b70 <col:43> 'const V' lvalue ParmVar 0x55b0839469d8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55b083947008 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55b083946c08 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55b083946c88 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55b083946f68 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55b083946d48 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b083946de8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55b083946e88 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55b083976d48 <col:76, line:407:5>
|     `-ReturnStmt 0x55b083976d38 <line:406:9, col:65>
|       `-CallExpr 0x55b083976cf8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b083976c08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b083976c78 <col:28> 'const char *' lvalue ParmVar 0x55b083946d48 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b083976c98 <col:37> 'const int' lvalue Var 0x55b083945380 'positional' 'const int'
|         |-DeclRefExpr 0x55b083976cb8 <col:49> 'T' lvalue ParmVar 0x55b083946de8 'x' 'T &'
|         `-DeclRefExpr 0x55b083976cd8 <col:52> 'const V' lvalue ParmVar 0x55b083946e88 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55b083947558 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55b083947078 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55b0839470f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55b0839474b8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55b0839471b8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b083947238 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55b0839472d8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55b083947378 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55b083976eb0 <col:85, line:412:5>
|     |-CallExpr 0x55b083976e30 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b083976d60 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55b083976da0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55b083976db0 <col:37> 'const char *' lvalue ParmVar 0x55b0839471b8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55b083976dd0 <col:46> 'int' lvalue ParmVar 0x55b083947238 'flags' 'int'
|     | |-DeclRefExpr 0x55b083976df0 <col:53> 'T' lvalue ParmVar 0x55b0839472d8 'x' 'T &'
|     | `-DeclRefExpr 0x55b083976e10 <col:56> 'const V' lvalue ParmVar 0x55b083947378 'default_value' 'const V &'
|     `-ReturnStmt 0x55b083976ea0 <line:411:9, col:17>
|       `-UnaryOperator 0x55b083976e88 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b083976e78 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b0839479e8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55b0839475d0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b083947648 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b083947948 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b083947708 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b083947780 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55b083947828 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55b083977030 <col:53, line:425:5>
|     `-ReturnStmt 0x55b083977020 <line:424:9, col:42>
|       `-CallExpr 0x55b083976fe0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b083976ee0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b083976f60 <col:21> 'const char *' lvalue ParmVar 0x55b083947708 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b083976f80 <col:30> 'int' 0
|         |-DeclRefExpr 0x55b083976fa0 <col:33> 'P' lvalue ParmVar 0x55b083947780 'parser' 'P'
|         `-DeclRefExpr 0x55b083976fc0 <col:41> 'T' lvalue ParmVar 0x55b083947828 'x' 'T &'
|-FunctionTemplateDecl 0x55b083947e38 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55b083947a58 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b083947ad8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b083947d98 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b083947b98 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b083947c10 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55b083947cb8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55b0839771a8 <col:55, line:429:5>
|     `-ReturnStmt 0x55b083977198 <line:428:9, col:50>
|       `-CallExpr 0x55b083977158 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b083977058 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b0839770d8 <col:21> 'const char *' lvalue ParmVar 0x55b083947b98 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b0839770f8 <col:30> 'const int' lvalue Var 0x55b083945288 'mandatory' 'const int'
|         |-DeclRefExpr 0x55b083977118 <col:41> 'P' lvalue ParmVar 0x55b083947c10 'parser' 'P'
|         `-DeclRefExpr 0x55b083977138 <col:49> 'T' lvalue ParmVar 0x55b083947cb8 'x' 'T &'
|-FunctionTemplateDecl 0x55b083948288 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55b083947ea8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b083947f28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b0839481e8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b083947fe8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b083948060 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55b083948108 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55b083977320 <col:55, line:433:5>
|     `-ReturnStmt 0x55b083977310 <line:432:9, col:51>
|       `-CallExpr 0x55b0839772d0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b0839771d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b083977250 <col:21> 'const char *' lvalue ParmVar 0x55b083947fe8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b083977270 <col:30> 'const int' lvalue Var 0x55b083945380 'positional' 'const int'
|         |-DeclRefExpr 0x55b083977290 <col:42> 'P' lvalue ParmVar 0x55b083948060 'parser' 'P'
|         `-DeclRefExpr 0x55b0839772b0 <col:50> 'T' lvalue ParmVar 0x55b083948108 'x' 'T &'
|-FunctionTemplateDecl 0x55b0839486d8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55b0839482f8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b083948378 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b083948638 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b083948438 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b0839484b0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55b083948558 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55b083977548 <col:56, line:437:5>
|     `-ReturnStmt 0x55b083977538 <line:436:9, col:63>
|       `-CallExpr 0x55b0839774f8 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b083977348 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b0839773c8 <col:21> 'const char *' lvalue ParmVar 0x55b083948438 'keyword' 'const char *'
|         |-BinaryOperator 0x55b083977498 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55b083977448 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55b083977428 <col:30> 'const int' lvalue Var 0x55b083945288 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55b083977480 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55b083977460 <col:42> 'const int' lvalue Var 0x55b083945380 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55b0839774b8 <col:54> 'P' lvalue ParmVar 0x55b0839484b0 'parser' 'P'
|         `-DeclRefExpr 0x55b0839774d8 <col:62> 'T' lvalue ParmVar 0x55b083948558 'x' 'T &'
|-FunctionTemplateDecl 0x55b083948c08 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55b083948748 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b0839487c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b083948b68 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55b083948888 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b083948908 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55b083948980 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55b083948a28 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55b0839776b0 <col:64, line:442:5>
|     |-CallExpr 0x55b083977630 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b083977560 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55b0839775a0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55b0839775b0 <col:30> 'const char *' lvalue ParmVar 0x55b083948888 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55b0839775d0 <col:39> 'int' lvalue ParmVar 0x55b083948908 'flags' 'int'
|     | |-DeclRefExpr 0x55b0839775f0 <col:46> 'P' lvalue ParmVar 0x55b083948980 'parser' 'P'
|     | `-DeclRefExpr 0x55b083977610 <col:54> 'T' lvalue ParmVar 0x55b083948a28 'x' 'T &'
|     `-ReturnStmt 0x55b0839776a0 <line:441:9, col:17>
|       `-UnaryOperator 0x55b083977688 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b083977678 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b083949208 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55b083948c80 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b083948cf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55b083948d78 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55b083949168 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55b083948e40 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b083948eb8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55b083948f58 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55b083949028 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55b083977848 <col:84, line:458:5>
|     `-ReturnStmt 0x55b083977838 <line:457:9, col:64>
|       `-CallExpr 0x55b0839777f0 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b0839776e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b083977750 <col:28> 'const char *' lvalue ParmVar 0x55b083948e40 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b083977770 <col:37> 'int' 0
|         |-DeclRefExpr 0x55b083977790 <col:40> 'P' lvalue ParmVar 0x55b083948eb8 'parser' 'P'
|         |-DeclRefExpr 0x55b0839777b0 <col:48> 'T' lvalue ParmVar 0x55b083948f58 'x' 'T &'
|         `-DeclRefExpr 0x55b0839777d0 <col:51> 'const V' lvalue ParmVar 0x55b083949028 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55b083949788 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55b083949280 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b0839492f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55b083949378 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55b0839496e8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55b083949440 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b0839494b8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55b083949558 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55b0839495f8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55b0839779d8 <col:86, line:462:5>
|     `-ReturnStmt 0x55b0839779c8 <line:461:9, col:73>
|       `-CallExpr 0x55b083977980 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b083977870 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b0839778e0 <col:28> 'const char *' lvalue ParmVar 0x55b083949440 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b083977900 <col:37> 'const int' lvalue Var 0x55b083945380 'positional' 'const int'
|         |-DeclRefExpr 0x55b083977920 <col:49> 'P' lvalue ParmVar 0x55b0839494b8 'parser' 'P'
|         |-DeclRefExpr 0x55b083977940 <col:57> 'T' lvalue ParmVar 0x55b083949558 'x' 'T &'
|         `-DeclRefExpr 0x55b083977960 <col:60> 'const V' lvalue ParmVar 0x55b0839495f8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55b083949de8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55b083949800 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b083949878 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55b0839498f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55b083949d48 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55b0839499c0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b083949a40 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55b083949ab8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55b083949b58 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55b083949bf8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55b083977b68 <col:95, line:467:5>
|     |-CallExpr 0x55b083977ae0 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b0839779f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55b083977a30 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55b083977a40 <col:37> 'const char *' lvalue ParmVar 0x55b0839499c0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55b083977a60 <col:46> 'int' lvalue ParmVar 0x55b083949a40 'flags' 'int'
|     | |-DeclRefExpr 0x55b083977a80 <col:53> 'P' lvalue ParmVar 0x55b083949ab8 'parser' 'P'
|     | |-DeclRefExpr 0x55b083977aa0 <col:61> 'T' lvalue ParmVar 0x55b083949b58 'x' 'T &'
|     | `-DeclRefExpr 0x55b083977ac0 <col:64> 'const V' lvalue ParmVar 0x55b083949bf8 'default_value' 'const V &'
|     `-ReturnStmt 0x55b083977b58 <line:466:9, col:17>
|       `-UnaryOperator 0x55b083977b40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b083977b30 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b08394b1e8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55b083949e68 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b083949ee8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55b083949f68 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55b08394b148 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55b08394a030 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b08394a0a8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55b08394a148 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55b08394b000 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55b083977d10 <col:63, line:481:5>
|     `-ReturnStmt 0x55b083977d00 <line:480:9, col:47>
|       `-CallExpr 0x55b083977cb8 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b083977b98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b083977c18 <col:21> 'const char *' lvalue ParmVar 0x55b08394a030 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b083977c38 <col:30> 'int' 0
|         |-DeclRefExpr 0x55b083977c58 <col:33> 'P' lvalue ParmVar 0x55b08394a0a8 'parser' 'P'
|         |-DeclRefExpr 0x55b083977c78 <col:41> 'T1' lvalue ParmVar 0x55b08394a148 'x1' 'T1 &'
|         `-DeclRefExpr 0x55b083977c98 <col:45> 'T2' lvalue ParmVar 0x55b08394b000 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55b08394b768 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55b08394b260 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b08394b2d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55b08394b358 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55b08394b6c8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55b08394b420 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b08394b498 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55b08394b538 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55b08394b5d8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55b083977eb0 <col:65, line:485:5>
|     `-ReturnStmt 0x55b083977ea0 <line:484:9, col:55>
|       `-CallExpr 0x55b083977e58 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b083977d38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b083977db8 <col:21> 'const char *' lvalue ParmVar 0x55b08394b420 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b083977dd8 <col:30> 'const int' lvalue Var 0x55b083945288 'mandatory' 'const int'
|         |-DeclRefExpr 0x55b083977df8 <col:41> 'P' lvalue ParmVar 0x55b08394b498 'parser' 'P'
|         |-DeclRefExpr 0x55b083977e18 <col:49> 'T1' lvalue ParmVar 0x55b08394b538 'x1' 'T1 &'
|         `-DeclRefExpr 0x55b083977e38 <col:53> 'T2' lvalue ParmVar 0x55b08394b5d8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55b08394bce8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55b08394b7e0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b08394b858 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55b08394b8d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55b08394bc48 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55b08394b9a0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b08394ba18 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55b08394bab8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55b08394bb58 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55b083978050 <col:65, line:489:5>
|     `-ReturnStmt 0x55b083978040 <line:488:9, col:56>
|       `-CallExpr 0x55b083977ff8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b083977ed8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b083977f58 <col:21> 'const char *' lvalue ParmVar 0x55b08394b9a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b083977f78 <col:30> 'const int' lvalue Var 0x55b083945380 'positional' 'const int'
|         |-DeclRefExpr 0x55b083977f98 <col:42> 'P' lvalue ParmVar 0x55b08394ba18 'parser' 'P'
|         |-DeclRefExpr 0x55b083977fb8 <col:50> 'T1' lvalue ParmVar 0x55b08394bab8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55b083977fd8 <col:54> 'T2' lvalue ParmVar 0x55b08394bb58 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55b08394c268 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55b08394bd60 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b08394bdd8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55b08394be58 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55b08394c1c8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55b08394bf20 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b08394bf98 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55b08394c038 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55b08394c0d8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55b0839782a0 <col:66, line:493:5>
|     `-ReturnStmt 0x55b083978290 <line:492:9, col:68>
|       `-CallExpr 0x55b083978248 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b083978078 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b0839780f8 <col:21> 'const char *' lvalue ParmVar 0x55b08394bf20 'keyword' 'const char *'
|         |-BinaryOperator 0x55b0839781c8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55b083978178 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55b083978158 <col:30> 'const int' lvalue Var 0x55b083945288 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55b0839781b0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55b083978190 <col:42> 'const int' lvalue Var 0x55b083945380 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55b0839781e8 <col:54> 'P' lvalue ParmVar 0x55b08394bf98 'parser' 'P'
|         |-DeclRefExpr 0x55b083978208 <col:62> 'T1' lvalue ParmVar 0x55b08394c038 'x1' 'T1 &'
|         `-DeclRefExpr 0x55b083978228 <col:66> 'T2' lvalue ParmVar 0x55b08394c0d8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55b08394c8c8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55b08394c2e0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b08394c358 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55b08394c3d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55b08394c828 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55b08394c4a0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b08394c520 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55b08394c598 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55b08394c638 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55b08394c6d8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55b083978430 <col:74, line:498:5>
|     |-CallExpr 0x55b0839783a8 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b0839782b8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55b0839782f8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55b083978308 <col:30> 'const char *' lvalue ParmVar 0x55b08394c4a0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55b083978328 <col:39> 'int' lvalue ParmVar 0x55b08394c520 'flags' 'int'
|     | |-DeclRefExpr 0x55b083978348 <col:46> 'P' lvalue ParmVar 0x55b08394c598 'parser' 'P'
|     | |-DeclRefExpr 0x55b083978368 <col:54> 'T1' lvalue ParmVar 0x55b08394c638 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55b083978388 <col:58> 'T2' lvalue ParmVar 0x55b08394c6d8 'x2' 'T2 &'
|     `-ReturnStmt 0x55b083978420 <line:497:9, col:17>
|       `-UnaryOperator 0x55b083978408 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b0839783f8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b08394cc28 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55b08394c948 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b08394cb88 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55b08394ca00 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b08394ca78 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55b083978578 <col:52, line:509:5>
|     `-ReturnStmt 0x55b083978568 <line:508:9, col:44>
|       `-CallExpr 0x55b083978530 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b083978460 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b0839784d0 <col:26> 'const char *' lvalue ParmVar 0x55b08394ca00 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b0839784f0 <col:35> 'int' 0
|         `-DeclRefExpr 0x55b083978510 <col:38> 'P' lvalue ParmVar 0x55b08394ca78 'parser' 'P'
|-FunctionTemplateDecl 0x55b08394cf28 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55b08394cc90 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b08394ce88 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55b08394cd40 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b08394cdb8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55b0839786b8 <col:54, line:513:5>
|     `-ReturnStmt 0x55b0839786a8 <line:512:9, col:52>
|       `-CallExpr 0x55b083978670 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b0839785a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b083978610 <col:26> 'const char *' lvalue ParmVar 0x55b08394cd40 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b083978630 <col:35> 'const int' lvalue Var 0x55b083945288 'mandatory' 'const int'
|         `-DeclRefExpr 0x55b083978650 <col:46> 'P' lvalue ParmVar 0x55b08394cdb8 'parser' 'P'
|-FunctionTemplateDecl 0x55b08394d228 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55b08394cf90 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b08394d188 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55b08394d040 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b08394d0b8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55b0839787f8 <col:54, line:517:5>
|     `-ReturnStmt 0x55b0839787e8 <line:516:9, col:53>
|       `-CallExpr 0x55b0839787b0 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b0839786e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b083978750 <col:26> 'const char *' lvalue ParmVar 0x55b08394d040 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b083978770 <col:35> 'const int' lvalue Var 0x55b083945380 'positional' 'const int'
|         `-DeclRefExpr 0x55b083978790 <col:47> 'P' lvalue ParmVar 0x55b08394d0b8 'parser' 'P'
|-FunctionTemplateDecl 0x55b08394d528 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55b08394d290 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b08394d488 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55b08394d340 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b08394d3b8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55b0839789e8 <col:55, line:521:5>
|     `-ReturnStmt 0x55b0839789d8 <line:520:9, col:65>
|       `-CallExpr 0x55b0839789a0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b083978820 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b083978890 <col:26> 'const char *' lvalue ParmVar 0x55b08394d340 'keyword' 'const char *'
|         |-BinaryOperator 0x55b083978960 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55b083978910 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55b0839788f0 <col:35> 'const int' lvalue Var 0x55b083945288 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55b083978948 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55b083978928 <col:47> 'const int' lvalue Var 0x55b083945380 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55b083978980 <col:59> 'P' lvalue ParmVar 0x55b08394d3b8 'parser' 'P'
|-FunctionTemplateDecl 0x55b08394d8f8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55b08394d590 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b08394d858 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55b08394d640 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b08394d6c0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55b08394d738 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55b083978b28 <col:63, line:526:5>
|     |-CallExpr 0x55b083978ab0 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b083978a00 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55b083978a40 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55b083978a50 <col:35> 'const char *' lvalue ParmVar 0x55b08394d640 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55b083978a70 <col:44> 'int' lvalue ParmVar 0x55b08394d6c0 'flags' 'int'
|     | `-DeclRefExpr 0x55b083978a90 <col:51> 'P' lvalue ParmVar 0x55b08394d738 'parser' 'P'
|     `-ReturnStmt 0x55b083978b18 <line:525:9, col:17>
|       `-UnaryOperator 0x55b083978b00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b083978af0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b08394dd48 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55b08394d968 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b08394d9e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b08394dca8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b08394daa8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b08394db20 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55b08394dbc8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55b083978c80 <col:58, line:541:5>
|     `-ReturnStmt 0x55b083978c70 <line:540:9, col:39>
|       `-CallExpr 0x55b083978c38 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b083978b58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b083978bd8 <col:21> 'const char *' lvalue ParmVar 0x55b08394daa8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b083978bf8 <col:30> 'P' lvalue ParmVar 0x55b08394db20 'parser' 'P'
|         `-DeclRefExpr 0x55b083978c18 <col:38> 'T' lvalue ParmVar 0x55b08394dbc8 'x' 'T &'
|-FunctionTemplateDecl 0x55b08394e198 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55b08394ddb8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b08394de38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b08394e0f8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b08394def8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b08394df70 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55b08394e018 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55b083978db8 <col:60, line:545:5>
|     `-ReturnStmt 0x55b083978da8 <line:544:9, col:41>
|       `-CallExpr 0x55b083978d70 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b083978ca8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b083978d10 <col:23> 'const char *' lvalue ParmVar 0x55b08394def8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b083978d30 <col:32> 'P' lvalue ParmVar 0x55b08394df70 'parser' 'P'
|         `-DeclRefExpr 0x55b083978d50 <col:40> 'T' lvalue ParmVar 0x55b08394e018 'x' 'T &'
|-FunctionTemplateDecl 0x55b08394e5e8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55b08394e208 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b08394e288 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b08394e548 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b08394e348 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b08394e3c0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55b08394e468 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55b083978ef0 <col:60, line:549:5>
|     `-ReturnStmt 0x55b083978ee0 <line:548:9, col:41>
|       `-CallExpr 0x55b083978ea8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b083978de0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b083978e48 <col:23> 'const char *' lvalue ParmVar 0x55b08394e348 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b083978e68 <col:32> 'P' lvalue ParmVar 0x55b08394e3c0 'parser' 'P'
|         `-DeclRefExpr 0x55b083978e88 <col:40> 'T' lvalue ParmVar 0x55b08394e468 'x' 'T &'
|-FunctionTemplateDecl 0x55b08394ea38 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55b08394e658 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b08394e6d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b08394e998 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b08394e798 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b08394e810 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55b08394e8b8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55b083979028 <col:61, line:553:5>
|     `-ReturnStmt 0x55b083979018 <line:552:9, col:42>
|       `-CallExpr 0x55b083978fe0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b083978f18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b083978f80 <col:24> 'const char *' lvalue ParmVar 0x55b08394e798 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b083978fa0 <col:33> 'P' lvalue ParmVar 0x55b08394e810 'parser' 'P'
|         `-DeclRefExpr 0x55b083978fc0 <col:41> 'T' lvalue ParmVar 0x55b08394e8b8 'x' 'T &'
|-FunctionTemplateDecl 0x55b08394ef18 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55b08394eaa8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b08394eb28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b08394ee78 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55b08394ebe8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b08394ec68 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55b08394ece0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55b08394ed88 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55b0839791a0 <col:69, line:557:5>
|     `-ReturnStmt 0x55b083979190 <line:556:9, col:46>
|       `-CallExpr 0x55b083979150 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b083979050 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b0839790d0 <col:21> 'const char *' lvalue ParmVar 0x55b08394ebe8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b0839790f0 <col:30> 'int' lvalue ParmVar 0x55b08394ec68 'flags' 'int'
|         |-DeclRefExpr 0x55b083979110 <col:37> 'P' lvalue ParmVar 0x55b08394ece0 'parser' 'P'
|         `-DeclRefExpr 0x55b083979130 <col:45> 'T' lvalue ParmVar 0x55b08394ed88 'x' 'T &'
|-FunctionTemplateDecl 0x55b08394f228 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55b08394ef90 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b08394f188 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55b08394f040 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b08394f0b8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55b0839792e0 <col:56, line:571:5>
|     `-ReturnStmt 0x55b0839792d0 <line:570:9, col:48>
|       `-CallExpr 0x55b083979298 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b0839791c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b083979238 <col:30> 'const char *' lvalue ParmVar 0x55b08394f040 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b083979258 <col:39> 'int' 0
|         `-DeclRefExpr 0x55b083979278 <col:42> 'P' lvalue ParmVar 0x55b08394f0b8 'parser' 'P'
|-FunctionTemplateDecl 0x55b08394f5b8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55b08394f290 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b08394f518 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55b08394f340 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b08394f3c0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55b08394f438 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55b0839794b0 <col:67, line:576:5>
|     |-CallExpr 0x55b083979438 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b0839792f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55b083979338 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55b083979348 <col:39> 'const char *' lvalue ParmVar 0x55b08394f340 'keyword' 'const char *'
|     | |-BinaryOperator 0x55b0839793f8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55b0839793a8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55b083979368 <col:48> 'int' lvalue ParmVar 0x55b08394f3c0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55b0839793e0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55b0839793c0 <col:56> 'const int' lvalue Var 0x55b083945570 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55b083979418 <col:68> 'P' lvalue ParmVar 0x55b08394f438 'parser' 'P'
|     `-ReturnStmt 0x55b0839794a0 <line:575:9, col:17>
|       `-UnaryOperator 0x55b083979488 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b083979478 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b08394fa08 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55b08394f628 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b08394f6a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b08394f968 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b08394f768 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b08394f7e0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55b08394f888 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55b083979620 <col:62, line:592:5>
|     `-ReturnStmt 0x55b083979610 <line:591:9, col:51>
|       `-CallExpr 0x55b0839795d0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b0839794e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b083979550 <col:30> 'const char *' lvalue ParmVar 0x55b08394f768 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b083979570 <col:39> 'int' 0
|         |-DeclRefExpr 0x55b083979590 <col:42> 'P' lvalue ParmVar 0x55b08394f7e0 'parser' 'P'
|         `-DeclRefExpr 0x55b0839795b0 <col:50> 'T' lvalue ParmVar 0x55b08394f888 'x' 'T &'
|-FunctionTemplateDecl 0x55b08394fee8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55b08394fa78 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b08394faf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b08394fe48 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55b08394fbb8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b08394fc38 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55b08394fcb0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55b08394fd58 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55b083979818 <col:73, line:597:5>
|     |-CallExpr 0x55b083979798 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b083979638 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55b083979678 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55b083979688 <col:39> 'const char *' lvalue ParmVar 0x55b08394fbb8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55b083979738 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55b0839796e8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55b0839796a8 <col:48> 'int' lvalue ParmVar 0x55b08394fc38 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55b083979720 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55b083979700 <col:56> 'const int' lvalue Var 0x55b083945570 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55b083979758 <col:68> 'P' lvalue ParmVar 0x55b08394fcb0 'parser' 'P'
|     | `-DeclRefExpr 0x55b083979778 <col:76> 'T' lvalue ParmVar 0x55b08394fd58 'x' 'T &'
|     `-ReturnStmt 0x55b083979808 <line:596:9, col:17>
|       `-UnaryOperator 0x55b0839797f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b0839797e0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b083950498 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55b08394ff60 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b08394ffd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b0839503f8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55b083950098 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b083950110 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55b0839502d0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55b083979988 <col:65, line:614:5>
|     `-ReturnStmt 0x55b083979978 <line:613:9, col:46>
|       `-CallExpr 0x55b083979938 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b083979848 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b0839798b8 <col:25> 'const char *' lvalue ParmVar 0x55b083950098 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b0839798d8 <col:34> 'int' 0
|         |-DeclRefExpr 0x55b0839798f8 <col:37> 'P' lvalue ParmVar 0x55b083950110 'parser' 'P'
|         `-DeclRefExpr 0x55b083979918 <col:45> 'Vector<T>' lvalue ParmVar 0x55b0839502d0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55b0839508c8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55b083950508 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55b083950828 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55b0839505c0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b083950710 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55b083979ba0 <col:55, line:618:5>
|     `-ReturnStmt 0x55b083979b90 <line:617:9, col:55>
|       `-CallExpr 0x55b083979b50 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b0839799b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b083979a20 <col:25> 'const char *' lvalue ParmVar 0x55b0839505c0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b083979a40 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55b083979b10 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55b083979b30 <col:54> 'Vector<T>' lvalue ParmVar 0x55b083950710 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55b083950e98 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55b083950930 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b0839509a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b083950df8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55b083950a68 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b083950ae8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55b083950b60 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55b083950cb0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55b083979d98 <col:76, line:623:5>
|     |-CallExpr 0x55b083979d18 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b083979bb8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55b083979bf8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55b083979c08 <col:34> 'const char *' lvalue ParmVar 0x55b083950a68 'keyword' 'const char *'
|     | |-BinaryOperator 0x55b083979cb8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55b083979c68 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55b083979c28 <col:43> 'int' lvalue ParmVar 0x55b083950ae8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55b083979ca0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55b083979c80 <col:51> 'const int' lvalue Var 0x55b083945570 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55b083979cd8 <col:63> 'P' lvalue ParmVar 0x55b083950b60 'parser' 'P'
|     | `-DeclRefExpr 0x55b083979cf8 <col:71> 'Vector<T>' lvalue ParmVar 0x55b083950cb0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55b083979d88 <line:622:9, col:17>
|       `-UnaryOperator 0x55b083979d70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b083979d60 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b0839513d8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55b083950f10 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b083950f88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b083951338 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55b083951048 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b0839510c8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55b083951210 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55b08397a000 <col:66, line:627:5>
|     `-ReturnStmt 0x55b083979ff0 <line:626:9, col:59>
|       `-CallExpr 0x55b083979fb0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b083979dc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b083979e38 <col:25> 'const char *' lvalue ParmVar 0x55b083951048 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b083979e58 <col:34> 'int' lvalue ParmVar 0x55b0839510c8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55b083979f70 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55b083979f90 <col:58> 'Vector<T>' lvalue ParmVar 0x55b083951210 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55b083951468 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55b08397a080 <col:25, line:633:5>
|   `-ReturnStmt 0x55b08397a070 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55b08397a058 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55b08397a028 <col:16> 'const bool' lvalue ->_status 0x55b08395d618
|         `-CXXThisExpr 0x55b08397a018 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55b0839515e8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55b083951520 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55b08397a168 <col:27, line:639:5>
|   |-BinaryOperator 0x55b08397a110 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55b08397a098 <col:9> 'bool' lvalue ParmVar 0x55b083951520 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55b08397a0f8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55b08397a0c8 <col:13> 'bool' lvalue ->_status 0x55b08395d618
|   |     `-CXXThisExpr 0x55b08397a0b8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55b08397a158 <line:638:9, col:17>
|     `-UnaryOperator 0x55b08397a140 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55b08397a130 <col:17> 'Args *' this
|-CXXMethodDecl 0x55b083951768 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55b0839516a8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55b08397a258 <col:39, line:644:5>
|   |-BinaryOperator 0x55b08397a200 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55b08397a188 <col:9> 'bool' lvalue ParmVar 0x55b0839516a8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55b08397a1e8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55b08397a1b8 <col:13> 'const bool' lvalue ->_status 0x55b08395d618
|   |     `-CXXThisExpr 0x55b08397a1a8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55b08397a248 <line:643:9, col:17>
|     `-UnaryOperator 0x55b08397a230 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55b08397a220 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55b083951830 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55b08397a300 <col:30, line:651:5>
|   `-ReturnStmt 0x55b08397a2f0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55b08397a2d8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55b08397a2a8 <col:16> 'bool' lvalue ->_read_status 0x55b08393dd30
|         `-ImplicitCastExpr 0x55b08397a288 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55b08397a278 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55b083951978 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55b0839518e8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55b08397a408 <col:32, line:658:5>
|   |-BinaryOperator 0x55b08397a3b0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55b08397a318 <col:9> 'bool' lvalue ParmVar 0x55b0839518e8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55b08397a398 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55b08397a368 <col:13> 'bool' lvalue ->_read_status 0x55b08393dd30
|   |     `-ImplicitCastExpr 0x55b08397a348 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55b08397a338 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55b08397a3f8 <line:657:9, col:17>
|     `-UnaryOperator 0x55b08397a3e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55b08397a3d0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55b083951ac8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55b083951a38 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55b08397a518 <col:44, line:663:5>
|   |-BinaryOperator 0x55b08397a4c0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55b08397a428 <col:9> 'bool' lvalue ParmVar 0x55b083951a38 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55b08397a4a8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55b08397a478 <col:13> 'bool' lvalue ->_read_status 0x55b08393dd30
|   |     `-ImplicitCastExpr 0x55b08397a458 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55b08397a448 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55b08397a508 <line:662:9, col:17>
|     `-UnaryOperator 0x55b08397a4f0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55b08397a4e0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55b083951b90 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55b083951c58 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55b083951d20 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55b083951de8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55b0839520f8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55b083951e88 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55b083952058 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55b083951f68 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55b08397a8d0 <col:19, line:706:5>
|     `-IfStmt 0x55b08397a8a8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55b08397a618 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55b08397a7d8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55b08397a7a8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55b08397a768 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55b08397a670 <col:42> '<bound member function type>' ->simple_slot 0x55b083975360
|       |     | `-CXXThisExpr 0x55b08397a660 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55b08397a708 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55b08397a6c0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55b0836c86c8
|       |     | `-DeclRefExpr 0x55b08397a6a0 <col:55> 'T' lvalue ParmVar 0x55b083951f68 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55b08397a748 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55b08397a898 <line:705:13, col:34>
|         `-CallExpr 0x55b08397a870 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55b08397a7f8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55b08397a850 <col:33> 'T' lvalue ParmVar 0x55b083951f68 'x' 'T &'
|-FunctionTemplateDecl 0x55b0839523c8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55b083952158 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55b083952328 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55b083952238 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55b08397acb0 <col:31, line:717:5>
|     |-DeclStmt 0x55b08397aa10 <line:713:9, col:23>
|     | `-VarDecl 0x55b08397a8f8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55b08397a9e8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55b08397a970 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55b08397a9c8 <col:21> 'T' lvalue ParmVar 0x55b083952238 'x' 'T &'
|     |-IfStmt 0x55b08397ac60 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55b08397ab08 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55b08397ac40 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55b08397abe0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55b08397ab70 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b08387f7c8 0x55b08387f3e8 0x55b08387f018 0x55b08387ec38 0x55b08387e858 0x55b08387e488
|     |   | `-DeclRefExpr 0x55b08397ab50 <col:14> 'T *' lvalue Var 0x55b08397a8f8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55b08397ac20 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55b08397ac98 <line:716:9, col:16>
|       `-DeclRefExpr 0x55b08397ac78 <col:16> 'T *' lvalue Var 0x55b08397a8f8 's' 'T *'
|-FunctionTemplateDecl 0x55b0839527d8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55b083952428 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55b0839524a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55b083952738 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55b083952588 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55b083952628 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55b08397afc0 <col:37, line:726:5>
|     |-IfStmt 0x55b08397af50 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55b08397af70 <line:723:13, col:26>
|     | | `-VarDecl 0x55b08397ad18 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55b08397ae08 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55b08397ad90 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55b08397ade8 <col:25> 'T' lvalue ParmVar 0x55b083952588 'x' 'T &'
|     | |-DeclRefExpr 0x55b08397ae30 <col:16> 'T *' lvalue Var 0x55b08397ad18 's' 'T *'
|     | `-BinaryOperator 0x55b08397af30 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55b08397aee0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55b08397ae70 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b08387f7c8 0x55b08387f3e8 0x55b08387f018 0x55b08387ec38 0x55b08387e858 0x55b08387e488
|     |   | `-DeclRefExpr 0x55b08397ae50 <col:14> 'T *' lvalue Var 0x55b08397ad18 's' 'T *'
|     |   `-DeclRefExpr 0x55b08397af10 <col:18> 'const V' lvalue ParmVar 0x55b083952628 'value' 'const V &'
|     `-ReturnStmt 0x55b08397afb0 <line:725:9, col:17>
|       `-UnaryOperator 0x55b08397af98 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b08397af88 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b083952bd8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55b083952840 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55b083952b38 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55b0839528f0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b083952970 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55b083952a18 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55b08397bde0 <col:65, line:737:5>
|     |-DeclStmt 0x55b08397b058 <line:732:9, col:26>
|     | `-VarDecl 0x55b08397aff0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55b08397bda8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55b08397bdc8 <line:733:13, col:58>
|       | `-VarDecl 0x55b08397b080 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55b08397b260 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55b08397b230 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55b08397b218 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55b08397b1f8 <col:26, col:58> 'String' (CXXTemporary 0x55b08397b1f8)
|       |           `-CXXMemberCallExpr 0x55b08397b188 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55b08397b0f8 <col:26> '<bound member function type>' ->find 0x55b083973088
|       |             | `-CXXThisExpr 0x55b08397b0e8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55b08397b1c0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55b08397b128 <col:31> 'const char *' lvalue ParmVar 0x55b0839528f0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55b08397b1d8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55b08397b148 <col:40> 'int' lvalue ParmVar 0x55b083952970 'flags' 'int'
|       |             `-DeclRefExpr 0x55b08397b168 <col:47> 'Args::Slot *' lvalue Var 0x55b08397aff0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55b08397b318 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55b08397b300 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55b08397b2e0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55b08397b2b0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55b08368a688
|       |       `-ImplicitCastExpr 0x55b08397b298 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55b08397b278 <col:20> 'String' lvalue Var 0x55b08397b080 'str' 'String'
|       `-CompoundStmt 0x55b08397bd88 <col:61, line:736:9>
|         |-DeclStmt 0x55b08397b7d0 <line:734:13, col:76>
|         | `-VarDecl 0x55b08397b368 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55b08397b7a0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55b08397b710 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55b08397b758 <col:60> 'T' lvalue ParmVar 0x55b083952a18 'variable' 'T &'
|         |     `-UnaryOperator 0x55b08397b788 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55b08397b778 <col:71> 'Args *' this
|         `-CallExpr 0x55b08397bd58 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55b08397b7f8 <col:13> '<bound member function type>' ->postparse 0x55b083973298
|           | `-CXXThisExpr 0x55b08397b7e8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55b08397bd18 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55b08397b828 <col:23> 'T *' lvalue Var 0x55b08397b368 's' 'T *'
|           | `-CallExpr 0x55b08397bcd8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55b08397bab0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55b08397bbb0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55b08397bbd0 <col:86> 'String' lvalue Var 0x55b08397b080 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55b08397bc80 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55b08397bc10 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b08387f7c8 0x55b08387f3e8 0x55b08387f018 0x55b08387ec38 0x55b08387e858 0x55b08387e488
|           |   | `-DeclRefExpr 0x55b08397bbf0 <col:92> 'T *' lvalue Var 0x55b08397b368 's' 'T *'
|           |   `-UnaryOperator 0x55b08397bcc0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55b08397bcb0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55b08397bd38 <col:103> 'Args::Slot *' lvalue Var 0x55b08397aff0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55b083959498 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55b083952c48 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55b083952cc8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55b0839593f8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55b083952d88 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b083952e08 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55b083952ea8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55b083952f48 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55b08397cc80 <col:88, line:745:5>
|     |-DeclStmt 0x55b08397be78 <line:741:9, col:26>
|     | `-VarDecl 0x55b08397be10 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55b08397c098 <line:742:9, col:55>
|     | `-VarDecl 0x55b08397bea0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55b08397c080 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55b08397c050 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55b08397c038 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55b08397c018 <col:22, col:54> 'String' (CXXTemporary 0x55b08397c018)
|     |           `-CXXMemberCallExpr 0x55b08397bfa8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55b08397bf18 <col:22> '<bound member function type>' ->find 0x55b083973088
|     |             | `-CXXThisExpr 0x55b08397bf08 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55b08397bfe0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55b08397bf48 <col:27> 'const char *' lvalue ParmVar 0x55b083952d88 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55b08397bff8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55b08397bf68 <col:36> 'int' lvalue ParmVar 0x55b083952e08 'flags' 'int'
|     |             `-DeclRefExpr 0x55b08397bf88 <col:43> 'Args::Slot *' lvalue Var 0x55b08397be10 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55b08397c470 <line:743:9, col:72>
|     | `-VarDecl 0x55b08397c0e8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55b08397c440 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55b08397c3b0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55b08397c3f8 <col:56> 'T' lvalue ParmVar 0x55b083952ea8 'variable' 'T &'
|     |     `-UnaryOperator 0x55b08397c428 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55b08397c418 <col:67> 'Args *' this
|     `-CallExpr 0x55b08397cc50 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55b08397c498 <col:9> '<bound member function type>' ->postparse 0x55b083973298
|       | `-CXXThisExpr 0x55b08397c488 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55b08397cc10 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55b08397c4c8 <col:19> 'T *' lvalue Var 0x55b08397c0e8 's' 'T *'
|       | `-ParenExpr 0x55b08397cbf0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55b08397cbc0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55b08397cba8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55b08397cb90 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55b08397cb70 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55b08397cb40 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55b08368a688
|       |     |       `-ImplicitCastExpr 0x55b08397cb28 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55b08397c4e8 <col:25> 'String' lvalue Var 0x55b08397bea0 'str' 'String'
|       |     |-CallExpr 0x55b08397c998 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55b08397c770 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55b08397c870 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55b08397c890 <col:89> 'String' lvalue Var 0x55b08397bea0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55b08397c940 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55b08397c8d0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b08387f7c8 0x55b08387f3e8 0x55b08387f018 0x55b08387ec38 0x55b08387e858 0x55b08387e488
|       |     | | `-DeclRefExpr 0x55b08397c8b0 <col:95> 'T *' lvalue Var 0x55b08397c0e8 's' 'T *'
|       |     | `-UnaryOperator 0x55b08397c980 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55b08397c970 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55b08397cb08 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55b08397cae8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55b08397cab8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55b08397ca68 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55b08397c9f8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b08387f7c8 0x55b08387f3e8 0x55b08387f018 0x55b08387ec38 0x55b08387e858 0x55b08387e488
|       |         | | `-DeclRefExpr 0x55b08397c9d8 <col:109> 'T *' lvalue Var 0x55b08397c0e8 's' 'T *'
|       |         | `-DeclRefExpr 0x55b08397ca98 <col:113> 'const V' lvalue ParmVar 0x55b083952f48 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55b08397cad8 <col:120> 'bool' true
|       `-DeclRefExpr 0x55b08397cc30 <col:128> 'Args::Slot *' lvalue Var 0x55b08397be10 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55b0839599c8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55b083959510 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b083959588 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b083959928 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55b083959648 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b0839596c8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55b083959740 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55b0839597e8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55b08397f9d8 <col:75, line:754:5>
|     |-DeclStmt 0x55b08397cd28 <line:749:9, col:26>
|     | `-VarDecl 0x55b08397ccc0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55b08397f9a0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55b08397f9c0 <line:750:13, col:58>
|       | `-VarDecl 0x55b08397cd50 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55b08397cf30 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55b08397cf00 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55b08397cee8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55b08397cec8 <col:26, col:58> 'String' (CXXTemporary 0x55b08397cec8)
|       |           `-CXXMemberCallExpr 0x55b08397ce58 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55b08397cdc8 <col:26> '<bound member function type>' ->find 0x55b083973088
|       |             | `-CXXThisExpr 0x55b08397cdb8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55b08397ce90 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55b08397cdf8 <col:31> 'const char *' lvalue ParmVar 0x55b083959648 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55b08397cea8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55b08397ce18 <col:40> 'int' lvalue ParmVar 0x55b0839596c8 'flags' 'int'
|       |             `-DeclRefExpr 0x55b08397ce38 <col:47> 'Args::Slot *' lvalue Var 0x55b08397ccc0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55b08397cfe8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55b08397cfd0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55b08397cfb0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55b08397cf80 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55b08368a688
|       |       `-ImplicitCastExpr 0x55b08397cf68 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55b08397cf48 <col:20> 'String' lvalue Var 0x55b08397cd50 'str' 'String'
|       `-CompoundStmt 0x55b08397f980 <col:61, line:753:9>
|         |-DeclStmt 0x55b08397f520 <line:751:13, col:63>
|         | `-VarDecl 0x55b08397f198 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55b08397f4f0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55b08397f460 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55b08397f4a8 <col:47> 'T' lvalue ParmVar 0x55b0839597e8 'variable' 'T &'
|         |     `-UnaryOperator 0x55b08397f4d8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55b08397f4c8 <col:58> 'Args *' this
|         `-CallExpr 0x55b08397f950 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55b08397f548 <col:13> '<bound member function type>' ->postparse 0x55b083973298
|           | `-CXXThisExpr 0x55b08397f538 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55b08397f910 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55b08397f578 <col:23> 'T *' lvalue Var 0x55b08397f198 's' 'T *'
|           | `-CallExpr 0x55b08397f8d0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55b08397f760 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55b08397f7a8 <col:56> 'P' lvalue ParmVar 0x55b083959740 'parser' 'P'
|           |   |-DeclRefExpr 0x55b08397f7c8 <col:64> 'String' lvalue Var 0x55b08397cd50 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55b08397f878 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55b08397f808 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b08387f7c8 0x55b08387f3e8 0x55b08387f018 0x55b08387ec38 0x55b08387e858 0x55b08387e488
|           |   | `-DeclRefExpr 0x55b08397f7e8 <col:70> 'T *' lvalue Var 0x55b08397f198 's' 'T *'
|           |   `-UnaryOperator 0x55b08397f8b8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55b08397f8a8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55b08397f930 <col:81> 'Args::Slot *' lvalue Var 0x55b08397ccc0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55b08395a028 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55b083959a40 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55b083959ab8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55b083959b38 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55b083959f88 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55b083959c00 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b083959c80 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55b083959cf8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55b083959d98 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55b083959e38 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55b083980768 <col:98, line:762:5>
|     |-DeclStmt 0x55b08397fa70 <line:758:9, col:26>
|     | `-VarDecl 0x55b08397fa08 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55b08397fc90 <line:759:9, col:55>
|     | `-VarDecl 0x55b08397fa98 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55b08397fc78 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55b08397fc48 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55b08397fc30 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55b08397fc10 <col:22, col:54> 'String' (CXXTemporary 0x55b08397fc10)
|     |           `-CXXMemberCallExpr 0x55b08397fba0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55b08397fb10 <col:22> '<bound member function type>' ->find 0x55b083973088
|     |             | `-CXXThisExpr 0x55b08397fb00 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55b08397fbd8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55b08397fb40 <col:27> 'const char *' lvalue ParmVar 0x55b083959c00 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55b08397fbf0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55b08397fb60 <col:36> 'int' lvalue ParmVar 0x55b083959c80 'flags' 'int'
|     |             `-DeclRefExpr 0x55b08397fb80 <col:43> 'Args::Slot *' lvalue Var 0x55b08397fa08 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55b0839800b0 <line:760:9, col:59>
|     | `-VarDecl 0x55b08397fce8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55b083980080 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55b08397fff0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55b083980038 <col:43> 'T' lvalue ParmVar 0x55b083959d98 'variable' 'T &'
|     |     `-UnaryOperator 0x55b083980068 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55b083980058 <col:54> 'Args *' this
|     `-CallExpr 0x55b083980738 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55b0839800d8 <col:9> '<bound member function type>' ->postparse 0x55b083973298
|       | `-CXXThisExpr 0x55b0839800c8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55b0839806f8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55b083980108 <col:19> 'T *' lvalue Var 0x55b08397fce8 's' 'T *'
|       | `-ParenExpr 0x55b0839806d8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55b0839806a8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55b083980690 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55b083980678 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55b083980658 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55b083980628 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55b08368a688
|       |     |       `-ImplicitCastExpr 0x55b083980610 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55b083980128 <col:25> 'String' lvalue Var 0x55b08397fa98 'str' 'String'
|       |     |-CallExpr 0x55b083980480 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55b083980310 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55b083980358 <col:59> 'P' lvalue ParmVar 0x55b083959cf8 'parser' 'P'
|       |     | |-DeclRefExpr 0x55b083980378 <col:67> 'String' lvalue Var 0x55b08397fa98 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55b083980428 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55b0839803b8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b08387f7c8 0x55b08387f3e8 0x55b08387f018 0x55b08387ec38 0x55b08387e858 0x55b08387e488
|       |     | | `-DeclRefExpr 0x55b083980398 <col:73> 'T *' lvalue Var 0x55b08397fce8 's' 'T *'
|       |     | `-UnaryOperator 0x55b083980468 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55b083980458 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55b0839805f0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55b0839805d0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55b0839805a0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55b083980550 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55b0839804e0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b08387f7c8 0x55b08387f3e8 0x55b08387f018 0x55b08387ec38 0x55b08387e858 0x55b08387e488
|       |         | | `-DeclRefExpr 0x55b0839804c0 <col:87> 'T *' lvalue Var 0x55b08397fce8 's' 'T *'
|       |         | `-DeclRefExpr 0x55b083980580 <col:91> 'const V' lvalue ParmVar 0x55b083959e38 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55b0839805c0 <col:98> 'bool' true
|       `-DeclRefExpr 0x55b083980718 <col:106> 'Args::Slot *' lvalue Var 0x55b08397fa08 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55b08395a698 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55b08395a0a8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b08395a128 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55b08395a1a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55b08395a5f8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55b08395a270 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b08395a2f0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55b08395a368 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55b08395a408 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55b08395a4a8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55b083981748 <col:60, line:773:5>
|     |-DeclStmt 0x55b083980810 <line:767:9, col:26>
|     | `-VarDecl 0x55b0839807a8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55b083981710 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55b083981730 <line:768:13, col:58>
|       | `-VarDecl 0x55b083980838 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55b083980a18 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55b0839809e8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55b0839809d0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55b0839809b0 <col:26, col:58> 'String' (CXXTemporary 0x55b0839809b0)
|       |           `-CXXMemberCallExpr 0x55b083980940 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55b0839808b0 <col:26> '<bound member function type>' ->find 0x55b083973088
|       |             | `-CXXThisExpr 0x55b0839808a0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55b083980978 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55b0839808e0 <col:31> 'const char *' lvalue ParmVar 0x55b08395a270 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55b083980990 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55b083980900 <col:40> 'int' lvalue ParmVar 0x55b08395a2f0 'flags' 'int'
|       |             `-DeclRefExpr 0x55b083980920 <col:47> 'Args::Slot *' lvalue Var 0x55b0839807a8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55b083980ad0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55b083980ab8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55b083980a98 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55b083980a68 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55b08368a688
|       |       `-ImplicitCastExpr 0x55b083980a50 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55b083980a30 <col:20> 'String' lvalue Var 0x55b083980838 'str' 'String'
|       `-CompoundStmt 0x55b0839816e8 <col:61, line:772:9>
|         |-DeclStmt 0x55b083980e10 <line:769:13, col:66>
|         | `-VarDecl 0x55b083980b28 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55b083980de0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55b083980d50 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55b083980d98 <col:49> 'T1' lvalue ParmVar 0x55b08395a408 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55b083980dc8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55b083980db8 <col:61> 'Args *' this
|         |-DeclStmt 0x55b083981180 <line:770:13, col:66>
|         | `-VarDecl 0x55b083980e98 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55b083981150 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55b0839810c0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55b083981108 <col:49> 'T2' lvalue ParmVar 0x55b08395a4a8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55b083981138 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55b083981128 <col:61> 'Args *' this
|         `-CallExpr 0x55b0839816b8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55b0839811a8 <col:13> '<bound member function type>' ->postparse 0x55b083973298
|           | `-CXXThisExpr 0x55b083981198 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55b083981678 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55b083981218 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55b0839811d8 <col:23> 'T1 *' lvalue Var 0x55b083980b28 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55b0839811f8 <col:29> 'T2 *' lvalue Var 0x55b083980e98 's2' 'T2 *'
|           | `-CallExpr 0x55b083981630 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55b083981400 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55b083981448 <col:63> 'P' lvalue ParmVar 0x55b08395a368 'parser' 'P'
|           |   |-DeclRefExpr 0x55b083981468 <col:71> 'String' lvalue Var 0x55b083980838 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55b083981518 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55b0839814a8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b08387f7c8 0x55b08387f3e8 0x55b08387f018 0x55b08387ec38 0x55b08387e858 0x55b08387e488
|           |   | `-DeclRefExpr 0x55b083981488 <col:77> 'T1 *' lvalue Var 0x55b083980b28 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55b0839815d8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55b083981568 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b08387f7c8 0x55b08387f3e8 0x55b08387f018 0x55b08387ec38 0x55b08387e858 0x55b08387e488
|           |   | `-DeclRefExpr 0x55b083981548 <col:82> 'T2 *' lvalue Var 0x55b083980e98 's2' 'T2 *'
|           |   `-UnaryOperator 0x55b083981618 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55b083981608 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55b083981698 <col:94> 'Args::Slot *' lvalue Var 0x55b0839807a8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55b08395aa88 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55b08395a718 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b08395a9e8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55b08395a7d0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b08395a850 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55b08395a8c8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55b083981c60 <col:67, line:780:5>
|     |-DeclStmt 0x55b0839817e0 <line:777:9, col:26>
|     | `-VarDecl 0x55b083981778 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55b083981c28 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55b083981c48 <line:778:13, col:58>
|       | `-VarDecl 0x55b083981808 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55b0839819e8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55b0839819b8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55b0839819a0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55b083981980 <col:26, col:58> 'String' (CXXTemporary 0x55b083981980)
|       |           `-CXXMemberCallExpr 0x55b083981910 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55b083981880 <col:26> '<bound member function type>' ->find 0x55b083973088
|       |             | `-CXXThisExpr 0x55b083981870 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55b083981948 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55b0839818b0 <col:31> 'const char *' lvalue ParmVar 0x55b08395a7d0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55b083981960 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55b0839818d0 <col:40> 'int' lvalue ParmVar 0x55b08395a850 'flags' 'int'
|       |             `-DeclRefExpr 0x55b0839818f0 <col:47> 'Args::Slot *' lvalue Var 0x55b083981778 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55b083981aa0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55b083981a88 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55b083981a68 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55b083981a38 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55b08368a688
|       |       `-ImplicitCastExpr 0x55b083981a20 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55b083981a00 <col:20> 'String' lvalue Var 0x55b083981808 'str' 'String'
|       `-CallExpr 0x55b083981bf8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55b083981ac8 <col:13> '<bound member function type>' ->postparse 0x55b083973298
|         | `-CXXThisExpr 0x55b083981ab8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55b083981ba8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55b083981b18 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55b083981af8 <col:23> 'P' lvalue ParmVar 0x55b08395a8c8 'parser' 'P'
|         | |-DeclRefExpr 0x55b083981b60 <col:36> 'String' lvalue Var 0x55b083981808 'str' 'String'
|         | `-UnaryOperator 0x55b083981b90 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55b083981b80 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55b083981bd8 <col:49> 'Args::Slot *' lvalue Var 0x55b083981778 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55b08395ae28 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55b08395aaf8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b08395ad88 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55b08395abb0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b08395ac30 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55b08395aca8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55b0839825d0 <col:71, line:792:5>
|     |-DeclStmt 0x55b083981cf8 <line:784:9, col:26>
|     | `-VarDecl 0x55b083981c90 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55b083981dc8 <line:785:9, col:29>
|     | `-VarDecl 0x55b083981d28 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55b083981db0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55b083981d90 <col:28> 'int' 1
|     |-WhileStmt 0x55b083982480 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55b0839824a0 <line:786:16, col:61>
|     | | `-VarDecl 0x55b083981df0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55b083981fd0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55b083981fa0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55b083981f88 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55b083981f68 <col:29, col:61> 'String' (CXXTemporary 0x55b083981f68)
|     | |           `-CXXMemberCallExpr 0x55b083981ef8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55b083981e68 <col:29> '<bound member function type>' ->find 0x55b083973088
|     | |             | `-CXXThisExpr 0x55b083981e58 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55b083981f30 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55b083981e98 <col:34> 'const char *' lvalue ParmVar 0x55b08395abb0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55b083981f48 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55b083981eb8 <col:43> 'int' lvalue ParmVar 0x55b08395ac30 'flags' 'int'
|     | |             `-DeclRefExpr 0x55b083981ed8 <col:50> 'Args::Slot *' lvalue Var 0x55b083981c90 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55b083982088 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55b083982070 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55b083982050 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55b083982020 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55b08368a688
|     | |       `-ImplicitCastExpr 0x55b083982008 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55b083981fe8 <col:23> 'String' lvalue Var 0x55b083981df0 'str' 'String'
|     | `-CompoundStmt 0x55b083982458 <col:64, line:790:9>
|     |   |-CallExpr 0x55b0839821e0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55b0839820b0 <col:13> '<bound member function type>' ->postparse 0x55b083973298
|     |   | | `-CXXThisExpr 0x55b0839820a0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55b083982190 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55b083982100 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55b0839820e0 <col:23> 'P' lvalue ParmVar 0x55b08395aca8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55b083982148 <col:36> 'String' lvalue Var 0x55b083981df0 'str' 'String'
|     |   | | `-UnaryOperator 0x55b083982178 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55b083982168 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55b0839821c0 <col:49> 'Args::Slot *' lvalue Var 0x55b083981c90 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55b083982378 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55b083982210 <col:13> 'int' lvalue Var 0x55b083981d28 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55b083982360 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55b083982340 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55b0839822a8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55b083982288 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55b083982270 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55b083982230 <col:28> 'int' lvalue Var 0x55b083981d28 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55b083982250 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55b083982328 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55b0839822f8 <col:49> 'bool' lvalue ->_read_status 0x55b08393dd30
|     |   |         `-ImplicitCastExpr 0x55b0839822d8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55b0839822c8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55b083982428 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55b083982398 <col:13> 'int' lvalue ParmVar 0x55b08395ac30 'flags' 'int'
|     |     `-UnaryOperator 0x55b083982410 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55b0839823f8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55b0839823d8 <col:23> 'const int' lvalue Var 0x55b083945288 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55b0839825b0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55b0839824e8 <col:9> 'bool' lvalue ->_read_status 0x55b08393dd30
|       | `-ImplicitCastExpr 0x55b0839824c8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55b0839824b8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55b083982590 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55b083982570 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55b083982558 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55b083982518 <col:25> 'int' lvalue Var 0x55b083981d28 'read_status' 'int'
|           `-IntegerLiteral 0x55b083982538 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55b08395b308 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55b08395ae98 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b08395af18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b08395b268 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55b08395afd8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b08395b058 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55b08395b0d0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55b08395b178 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55b083983560 <col:84, line:805:5>
|     |-DeclStmt 0x55b083982678 <line:796:9, col:26>
|     | `-VarDecl 0x55b083982610 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55b083982748 <line:797:9, col:29>
|     | `-VarDecl 0x55b0839826a8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55b083982730 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55b083982710 <col:28> 'int' 1
|     |-DeclStmt 0x55b083982a80 <line:798:9, col:71>
|     | `-VarDecl 0x55b083982798 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55b083982a50 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55b0839829c0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55b083982a08 <col:55> 'T' lvalue ParmVar 0x55b08395b178 'variable' 'T &'
|     |     `-UnaryOperator 0x55b083982a38 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55b083982a28 <col:66> 'Args *' this
|     |-WhileStmt 0x55b083983410 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55b083983430 <line:799:16, col:61>
|     | | `-VarDecl 0x55b083982aa8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55b083982c88 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55b083982c58 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55b083982c40 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55b083982c20 <col:29, col:61> 'String' (CXXTemporary 0x55b083982c20)
|     | |           `-CXXMemberCallExpr 0x55b083982bb0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55b083982b20 <col:29> '<bound member function type>' ->find 0x55b083973088
|     | |             | `-CXXThisExpr 0x55b083982b10 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55b083982be8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55b083982b50 <col:34> 'const char *' lvalue ParmVar 0x55b08395afd8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55b083982c00 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55b083982b70 <col:43> 'int' lvalue ParmVar 0x55b08395b058 'flags' 'int'
|     | |             `-DeclRefExpr 0x55b083982b90 <col:50> 'Args::Slot *' lvalue Var 0x55b083982610 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55b083982d40 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55b083982d28 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55b083982d08 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55b083982cd8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55b08368a688
|     | |       `-ImplicitCastExpr 0x55b083982cc0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55b083982ca0 <col:23> 'String' lvalue Var 0x55b083982aa8 'str' 'String'
|     | `-CompoundStmt 0x55b0839833e8 <col:64, line:803:9>
|     |   |-CallExpr 0x55b083983170 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55b083982d68 <col:13> '<bound member function type>' ->postparse 0x55b083973298
|     |   | | `-CXXThisExpr 0x55b083982d58 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55b083983130 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55b083982d98 <col:23> 'T *' lvalue Var 0x55b083982798 's' 'T *'
|     |   | | `-CallExpr 0x55b0839830f0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55b083982f80 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55b083982fc8 <col:56> 'P' lvalue ParmVar 0x55b08395b0d0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55b083982fe8 <col:64> 'String' lvalue Var 0x55b083982aa8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55b083983098 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55b083983028 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b08387f7c8 0x55b08387f3e8 0x55b08387f018 0x55b08387ec38 0x55b08387e858 0x55b08387e488
|     |   | |   | `-DeclRefExpr 0x55b083983008 <col:70> 'T *' lvalue Var 0x55b083982798 's' 'T *'
|     |   | |   `-UnaryOperator 0x55b0839830d8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55b0839830c8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55b083983150 <col:81> 'Args::Slot *' lvalue Var 0x55b083982610 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55b083983308 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55b0839831a0 <col:13> 'int' lvalue Var 0x55b0839826a8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55b0839832f0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55b0839832d0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55b083983238 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55b083983218 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55b083983200 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55b0839831c0 <col:28> 'int' lvalue Var 0x55b0839826a8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55b0839831e0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55b0839832b8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55b083983288 <col:49> 'bool' lvalue ->_read_status 0x55b08393dd30
|     |   |         `-ImplicitCastExpr 0x55b083983268 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55b083983258 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55b0839833b8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55b083983328 <col:13> 'int' lvalue ParmVar 0x55b08395b058 'flags' 'int'
|     |     `-UnaryOperator 0x55b0839833a0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55b083983388 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55b083983368 <col:23> 'const int' lvalue Var 0x55b083945288 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55b083983540 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55b083983478 <col:9> 'bool' lvalue ->_read_status 0x55b08393dd30
|       | `-ImplicitCastExpr 0x55b083983458 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55b083983448 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55b083983520 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55b083983500 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55b0839834e8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55b0839834a8 <col:25> 'int' lvalue Var 0x55b0839826a8 'read_status' 'int'
|           `-IntegerLiteral 0x55b0839834c8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55b08395b8e8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55b08395b380 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b08395b3f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b08395b848 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55b08395b4b8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b08395b538 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55b08395b5b0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55b08395b700 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55b083984368 <col:87, line:821:5>
|     |-DeclStmt 0x55b083983610 <line:809:9, col:26>
|     | `-VarDecl 0x55b0839835a8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55b0839836e0 <line:810:9, col:29>
|     | `-VarDecl 0x55b083983640 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55b0839836c8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55b0839836a8 <col:28> 'int' 1
|     |-DeclStmt 0x55b083983928 <line:811:9, col:38>
|     | `-VarDecl 0x55b083983810 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55b083983900 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55b083983888 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55b0839838e0 <col:29> 'Vector<T>' lvalue ParmVar 0x55b08395b700 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55b083984218 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55b083984238 <line:812:16, col:61>
|     | | `-VarDecl 0x55b083983950 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55b083983b30 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55b083983b00 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55b083983ae8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55b083983ac8 <col:29, col:61> 'String' (CXXTemporary 0x55b083983ac8)
|     | |           `-CXXMemberCallExpr 0x55b083983a58 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55b0839839c8 <col:29> '<bound member function type>' ->find 0x55b083973088
|     | |             | `-CXXThisExpr 0x55b0839839b8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55b083983a90 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55b0839839f8 <col:34> 'const char *' lvalue ParmVar 0x55b08395b4b8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55b083983aa8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55b083983a18 <col:43> 'int' lvalue ParmVar 0x55b08395b538 'flags' 'int'
|     | |             `-DeclRefExpr 0x55b083983a38 <col:50> 'Args::Slot *' lvalue Var 0x55b0839835a8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55b083983be8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55b083983bd0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55b083983bb0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55b083983b80 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55b08368a688
|     | |       `-ImplicitCastExpr 0x55b083983b68 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55b083983b48 <col:23> 'String' lvalue Var 0x55b083983950 'str' 'String'
|     | `-CompoundStmt 0x55b0839841e0 <col:64, line:819:9>
|     |   |-DeclStmt 0x55b083983ca8 <line:813:13, col:23>
|     |   | `-VarDecl 0x55b083983c10 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55b083983c88 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55b083983e28 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55b083983cd0 <col:13> '<bound member function type>' ->postparse 0x55b083973298
|     |   | | `-CXXThisExpr 0x55b083983cc0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55b083983dd0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55b083983d20 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55b083983d00 <col:23> 'P' lvalue ParmVar 0x55b08395b5b0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55b083983d68 <col:36> 'String' lvalue Var 0x55b083983950 'str' 'String'
|     |   | | |-DeclRefExpr 0x55b083983d88 <col:41> 'T' lvalue Var 0x55b083983c10 'sx' 'T'
|     |   | | `-UnaryOperator 0x55b083983db8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55b083983da8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55b083983e08 <col:53> 'Args::Slot *' lvalue Var 0x55b0839835a8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55b083983f80 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55b083983eb8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55b083983e88 <col:17> 'bool' lvalue ->_read_status 0x55b08393dd30
|     |   | |   `-ImplicitCastExpr 0x55b083983e68 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55b083983e58 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55b083983f58 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55b083983ef0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55b083983ed0 <col:17> 'Vector<T> *' lvalue Var 0x55b083983810 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55b083983f38 <col:30> 'T' lvalue Var 0x55b083983c10 'sx' 'T'
|     |   |-BinaryOperator 0x55b083984100 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55b083983f98 <col:13> 'int' lvalue Var 0x55b083983640 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55b0839840e8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55b0839840c8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55b083984030 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55b083984010 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55b083983ff8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55b083983fb8 <col:28> 'int' lvalue Var 0x55b083983640 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55b083983fd8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55b0839840b0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55b083984080 <col:49> 'bool' lvalue ->_read_status 0x55b08393dd30
|     |   |         `-ImplicitCastExpr 0x55b083984060 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55b083984050 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55b0839841b0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55b083984120 <col:13> 'int' lvalue ParmVar 0x55b08395b538 'flags' 'int'
|     |     `-UnaryOperator 0x55b083984198 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55b083984180 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55b083984160 <col:23> 'const int' lvalue Var 0x55b083945288 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55b083984348 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55b083984280 <col:9> 'bool' lvalue ->_read_status 0x55b08393dd30
|       | `-ImplicitCastExpr 0x55b083984260 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55b083984250 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55b083984328 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55b083984308 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55b0839842f0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55b0839842b0 <col:25> 'int' lvalue Var 0x55b083983640 'read_status' 'int'
|           `-IntegerLiteral 0x55b0839842d0 <col:40> 'int' 1
|-AccessSpecDecl 0x55b08395b960 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55b08395b988 prev 0x55b083943588 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55b08395ba80 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55b08395bb70 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55b0839843a0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55b08395bc60 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55b0839843b0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55b08395bd60 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55b08395be10 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55b08395beb8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55b08395beb8
| | `-ParmVarDecl 0x55b08395bfc8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55b08395c788 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55b08395c788
|   `-ParmVarDecl 0x55b08395c898 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55b08395c038 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55b08395c198 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55b08395c390 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55b08395c240 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55b08395c2b8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55b083984590 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55b08395c648 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55b083984400 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55b0839843c0 <col:20> 'void *' lvalue ParmVar 0x55b08395c240 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55b08395c6b0 '_slot' 'char *'
| | | `-CXXNewExpr 0x55b083984488 <col:32, col:45> 'char *' array Function 0x55b0834ae308 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55b083984470 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55b083984440 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55b08395c2b8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55b08395c710 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55b083984550 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55b083984510 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55b08395c2b8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55b083984610 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55b08395c490 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55b08395bc60 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55b083984698 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55b083984678 <line:840:13, col:22> 'void' array Function 0x55b0834ae668 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55b083984660 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55b083984630 <col:22> 'char *' lvalue ->_slot 0x55b08395c6b0
| |         `-CXXThisExpr 0x55b083984620 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55b08395c590 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55b08395bd60 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55b083984888 <col:22, line:844:9>
| |   `-CallExpr 0x55b0839847f0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55b0839847d8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b0839847b8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55b0835ba0e8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55b083984828 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55b083984708 <col:20> 'void *' lvalue ->_ptr 0x55b08395c648
| |     |   `-CXXThisExpr 0x55b0839846f8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55b083984858 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55b083984840 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55b083984748 <col:26> 'char *' lvalue ->_slot 0x55b08395c6b0
| |     |     `-CXXThisExpr 0x55b083984738 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55b083984870 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55b083984788 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55b08395c710
| |         `-CXXThisExpr 0x55b083984778 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55b08395c648 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55b08395c6b0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55b08395c710 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55b08395c908 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55b08395c908
| | `-ParmVarDecl 0x55b08395ca18 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55b08395cab8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55b08395cab8
|   `-ParmVarDecl 0x55b08395cbc8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55b08395cd68 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55b08395cc38 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55b08395ccd8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55b08395d000 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55b08395d1f8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55b08395d0c8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55b08395d378 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55b0839848c0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55b0839848a0 <col:20> 'T *' lvalue ParmVar 0x55b08395d0c8 'ptr' 'T *'
|   | `-CompoundStmt 0x55b083984910 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55b08395d2c8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55b08395bd60 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55b083984ac0 <col:22, line:857:9>
|   |   `-CallExpr 0x55b083984a90 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55b083984920 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55b083672818 0x55b08361cb48
|   |     |-CXXOperatorCallExpr 0x55b083984a20 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55b0839849b0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b08387f7c8 0x55b08387f3e8 0x55b08387f018 0x55b08387ec38 0x55b08387e858 0x55b08387e488
|   |     | `-MemberExpr 0x55b083984980 <col:29> 'T *' lvalue ->_ptr 0x55b08395d378
|   |     |   `-CXXThisExpr 0x55b083984970 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55b083984a60 <col:35> 'T' lvalue ->_slot 0x55b08395d3d8
|   |       `-CXXThisExpr 0x55b083984a50 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55b08395d378 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55b08395d3d8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55b08395d440 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55b08395d540 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55b08395d590 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b08395d520 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55b08395d500 <col:31> 'int' 48
|-FieldDecl 0x55b08395d5b8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55b08395d618 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55b08395d678 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55b08395d7b0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55b083972930 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55b083972990 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55b083972a40 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55b083972c68 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55b083972b70 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55b083972db8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55b083972d28 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55b083973088 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55b083972e78 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55b083972ef8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55b083972fa0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55b083973298 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55b083973150 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55b0839731c8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55b083973368 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55b0839734b8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55b083973420 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55b083975138 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55b083973578 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55b0839735f8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55b0839736a0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55b083975048 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55b083975360 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55b083975210 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55b083975288 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55b083975678 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55b083975410 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55b0839755d8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55b0839754e8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b08367b540 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b08367b658 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55b08367b6e8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55b08367b7b8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55b08367b8a0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55b08367bab8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55b08367b960 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b08367bc68 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55b08367bb70 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55b08367bdb0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55b08367bd20 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55b08367bef8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55b08367be68 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b08367c040 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55b08367bfb0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b08367c108 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55b08367c250 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55b08367c1c0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55b08367c318 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55b08367c460 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55b08367c3d0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55b08367c5d8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55b08367c518 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b08367c720 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55b08367c690 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b08367c7e8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55b08367c9a8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55b08367c898 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55b08367c910 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b08367cbf8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55b08367ca68 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55b08367cae0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55b08367cca8 <col:86> "" ""
|-CXXMethodDecl 0x55b08367cf18 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55b08367cd88 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55b08367ce00 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b08367d0c8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55b08367cfd8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55b08367d278 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55b08367d180 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55b08367d548 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55b08367d330 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55b08367d3a8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55b08367d420 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b08367d828 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55b08367d610 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55b08367d688 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55b08367d700 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55b08367d8e0 <col:115> "" ""
|-AccessSpecDecl 0x55b08367d950 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55b08367d988 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b08367de90 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55b08367de90
| `-ParmVarDecl 0x55b08367df98 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55b08367e038 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55b08367e038
| `-ParmVarDecl 0x55b08367e148 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55b0836b3778 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55b0838a6580 <col:7>
|-CXXConstructorDecl 0x55b0836b3850 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55b0836b3850
| `-ParmVarDecl 0x55b0836b3968 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55b0836b39d8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55b0836b39d8
| `-ParmVarDecl 0x55b0836b3ae8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55b0838a8f80 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b083895128 prev 0x55b08388a330 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b083895220 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55b083895310 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55b083895438 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55b0838955b8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55b083895738 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55b0838958b8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55b0838a66e8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55b0838a6f58 <col:11>
|-CXXDestructorDecl 0x55b0838a67c0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55b0838a68f8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55b0838a68f8
| `-ParmVarDecl 0x55b0838a6a08 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55b0838a6aa8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55b0838a6aa8
| `-ParmVarDecl 0x55b0838a6bb8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55b0838a9978 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55b0838a9a88 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55b0838a9d08 <col:11>
|   `-ReturnStmt 0x55b0838a9cf8 <col:11>
|     `-UnaryOperator 0x55b0838a9ce0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55b0838a9cd0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55b0838a9af8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55b0838a9af8
  `-ParmVarDecl 0x55b0838a9c08 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b083895920 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b083895a38 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55b083895ad8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55b083895b40 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55b083895ba8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55b083895c10 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55b083895c70 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55b083895d30 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55b083895d90 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55b083895df0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55b0838a65f8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55b083895ad8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55b0838a6f68 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55b0838a6fc0 <col:12>
|-CXXConstructorDecl 0x55b0838a6c28 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55b0838a6c28
| `-ParmVarDecl 0x55b0838a6d38 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55b0838a6dd8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55b0838a6dd8
| `-ParmVarDecl 0x55b0838a6ee8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55b0838a9060 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b083883a40 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55b083883b58 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55b083883be8 <col:16, col:22> col:16 public
|-EnumDecl 0x55b083883c10 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55b083883d10 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55b083883df0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b083883cf0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55b083883cd0 <col:21> 'int' 28
| `-EnumConstantDecl 0x55b083883da0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55b083883e08 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b083883d80 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55b083883d60 <col:22> 'int' 64
|-CXXMethodDecl 0x55b083884148 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55b083883e30 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55b083883eb0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55b083883f28 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55b083883fa0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55b083884208 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55b083884408 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55b083884280 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55b0838842f8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55b0838844b8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55b083884618 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55b083884528 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55b0838846c0 <col:72> warn_unused_result ""
|-TypedefDecl 0x55b083884a20 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55b0838849b0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55b083884950 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55b083884910 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55b08335b4e0 'void'
|       |-PointerType 0x55b083603de0 'unsigned char *'
|       | `-BuiltinType 0x55b08335b5e0 'unsigned char'
|       |-TypedefType 0x55b0834003b0 'size_t' sugar
|       | |-Typedef 0x55b0833cbbe0 'size_t'
|       | `-BuiltinType 0x55b08335b640 'unsigned long'
|       `-PointerType 0x55b08335bce0 'void *'
|         `-BuiltinType 0x55b08335b4e0 'void'
|-CXXMethodDecl 0x55b083884e98 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55b083884a90 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55b083884b08 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55b083884ba0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55b083884c20 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55b08389f590 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55b08389f578 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55b08389f540 <col:58> 'int' 0
| |-ParmVarDecl 0x55b083884ca0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55b08389f5b8 <col:76> 'int' 0
| |-ParmVarDecl 0x55b083884d20 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55b08389f5d8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55b083884f68 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55b083884fe8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55b0838850a8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55b083885148 <col:20>
| `-OptimizeNoneAttr 0x55b0838851a0 <col:30>
|-CXXMethodDecl 0x55b083885218 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55b0838852b8 <col:20>
| `-OptimizeNoneAttr 0x55b083885310 <col:30>
|-CXXMethodDecl 0x55b083885388 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55b083885428 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55b0838854d8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55b083885578 <col:20>
| |-OptimizeNoneAttr 0x55b0838855d0 <col:30>
| `-WarnUnusedResultAttr 0x55b0838855f8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55b083885650 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55b0838856f0 <col:20>
| `-OptimizeNoneAttr 0x55b083885748 <col:30>
|-CXXMethodDecl 0x55b083885798 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55b083885838 <col:20>
| `-OptimizeNoneAttr 0x55b083885890 <col:30>
|-CXXMethodDecl 0x55b0838858d8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55b083885978 <col:20>
| `-OptimizeNoneAttr 0x55b0838859d0 <col:30>
|-CXXMethodDecl 0x55b083885a18 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55b083885ad8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55b083885ba0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55b083885c68 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55b083885d28 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55b083885e48 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55b08389f6a0 <col:54, line:99:5>
|   `-ReturnStmt 0x55b08389f690 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55b08389f678 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55b08389f648 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55b083896128
|         `-CXXThisExpr 0x55b08389f638 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55b083885fe8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55b083885ef8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55b08389f750 <col:67, line:103:5>
|   `-BinaryOperator 0x55b08389f730 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55b08389f6c8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55b083896128
|     | `-CXXThisExpr 0x55b08389f6b8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55b08389f718 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55b08389f6f8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55b083885ef8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55b0838860e0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55b08389f7d0 <col:33, line:107:5>
|   `-ReturnStmt 0x55b08389f7c0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55b08389f7a8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55b08389f778 <col:16> 'void *' lvalue ->_destructor_argument 0x55b083896190
|         `-CXXThisExpr 0x55b08389f768 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55b0838861a0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55b08389fe00 <col:25, line:113:5>
|   |-ParenExpr 0x55b08389fb48 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55b08389fb18 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55b08389f888 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55b08389f860 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55b08389f828 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55b08389f7f8 <col:24> '<bound member function type>' ->shared 0x55b083885218
|   |   |       `-ImplicitCastExpr 0x55b08389f848 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55b08389f7e8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55b08389f8e8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b08389f8c8 <col:42> 'int' 0
|   |   `-CallExpr 0x55b08389fa78 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55b08389fa60 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b08389fa40 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b0833f7110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b08389fab8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b08389f958 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55b08389fad0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b08389f980 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b08389fae8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b08389f9b8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55b08389fb00 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b08389fa28 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b08389fa10 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b08389f9d8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55b08389fd48 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55b08389fb78 <col:2> 'unsigned char *' lvalue ->_head 0x55b083895f30
|   | | `-CXXThisExpr 0x55b08389fb68 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55b08389fd30 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55b08389fd10 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55b08389fbb8 <col:10> 'unsigned char *' lvalue ->_data 0x55b083895f98
|   |     | `-CXXThisExpr 0x55b08389fba8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55b08389fcf8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55b08389fcd8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55b08389fbf8 <col:18> 'unsigned char *' lvalue ->_tail 0x55b083896000
|   |         | `-CXXThisExpr 0x55b08389fbe8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55b08389fcc0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55b08389fca0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55b08389fc38 <col:26> 'unsigned char *' lvalue ->_end 0x55b083896068
|   |             | `-CXXThisExpr 0x55b08389fc28 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55b08389fc88 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55b08389fc68 <col:33> 'int' 0
|   `-BinaryOperator 0x55b08389fde0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55b08389fd78 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55b083896128
|     | `-CXXThisExpr 0x55b08389fd68 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55b08389fdc8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55b08389fda8 <col:16> 'int' 0
|-CXXMethodDecl 0x55b0838862e0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55b083886250 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55b083886388 <col:20>
| |-OptimizeNoneAttr 0x55b0838863e0 <col:30>
| `-WarnUnusedResultAttr 0x55b083886408 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55b0838864d8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55b083886448 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55b083886580 <col:20>
| |-OptimizeNoneAttr 0x55b0838865d8 <col:30>
| `-WarnUnusedResultAttr 0x55b083886600 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55b083886738 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55b083886640 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55b0838867e0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55b0838868e0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55b083886850 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55b083886988 <col:20>
| `-OptimizeNoneAttr 0x55b0838869e0 <col:30>
|-CXXMethodDecl 0x55b083886aa8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55b083886a18 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55b083886b50 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55b083886c50 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55b083886bc0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55b083886cf8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55b083886df8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55b083886d68 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55b083886ea0 <col:20>
| `-OptimizeNoneAttr 0x55b083886ef8 <col:30>
|-CXXMethodDecl 0x55b083887088 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55b083886f38 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55b083886fb0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55b08389f5f8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55b083887138 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55b083887338 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55b0838871b0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55b083887228 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b083887548 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55b0838873f8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55b083887470 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b083887758 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55b083887608 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55b083887688 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55b08389f608 <col:39> 'int' 0
|-CXXMethodDecl 0x55b083887828 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55b0838878f0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55b0838879b8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55b083887a78 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55b083887b40 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55b083887c88 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55b083887bf8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55b083887e58 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55b083887d48 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55b083887dc0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b083887f28 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55b083887fe8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55b083888088 <col:20>
| `-OptimizeNoneAttr 0x55b0838880e0 <col:30>
|-CXXMethodDecl 0x55b083888130 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55b0838881d0 <col:20>
| `-OptimizeNoneAttr 0x55b083888228 <col:30>
|-CXXMethodDecl 0x55b083888278 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55b083888338 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55b083888400 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55b0838884a0 <col:20>
| `-OptimizeNoneAttr 0x55b0838884f8 <col:30>
|-CXXMethodDecl 0x55b083888648 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55b083888538 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55b0838885b0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b083888798 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55b083888708 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b083888870 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55b083888930 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55b0838889d0 <col:20>
| `-OptimizeNoneAttr 0x55b083888a28 <col:30>
|-CXXMethodDecl 0x55b083888a78 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55b083888b18 <col:20>
| `-OptimizeNoneAttr 0x55b083888b70 <col:30>
|-CXXMethodDecl 0x55b083888bc0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55b083888c88 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55b083888d28 <col:20>
| `-OptimizeNoneAttr 0x55b083888d80 <col:30>
|-CXXMethodDecl 0x55b083888dc8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55b083888ee8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55b083889058 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55b083888f98 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55b083889148 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55b0838891e8 <col:20>
| `-OptimizeNoneAttr 0x55b083889240 <col:30>
|-CXXMethodDecl 0x55b083889290 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55b083889350 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55b083889588 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55b083889400 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55b083889478 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55b083889638 <col:20>
| `-OptimizeNoneAttr 0x55b083889690 <col:30>
|-CXXMethodDecl 0x55b083889738 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55b0838897d8 <col:20>
| `-OptimizeNoneAttr 0x55b083889830 <col:30>
|-CXXMethodDecl 0x55b083889880 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55b083889920 <col:20>
| `-OptimizeNoneAttr 0x55b083889978 <col:30>
|-CXXMethodDecl 0x55b0838899c0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55b083889a60 <col:20>
| `-OptimizeNoneAttr 0x55b083889ab8 <col:30>
|-CXXMethodDecl 0x55b083889bb8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55b083889af0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55b083889c60 <col:20>
| `-OptimizeNoneAttr 0x55b083889cb8 <col:30>
|-CXXMethodDecl 0x55b083889e78 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55b083889cf0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55b083889d68 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55b083889f28 <col:20>
| `-OptimizeNoneAttr 0x55b083889f80 <col:30>
|-CXXMethodDecl 0x55b08388a028 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55b08388a148 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55b08388a268 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55b08388a308 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55b08388a330 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55b08388a458 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55b08388a4f8 <col:20>
| `-OptimizeNoneAttr 0x55b08388a550 <col:30>
|-CXXMethodDecl 0x55b08388a5f8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55b08388a698 <col:20>
| `-OptimizeNoneAttr 0x55b08388a6f0 <col:30>
|-AccessSpecDecl 0x55b08388a718 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55b08388a740 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55b08388a840 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55b08388a890 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b08388a820 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55b08388a800 <col:14> 'int' 48
|-CXXMethodDecl 0x55b08388a8f8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55b08388a998 <col:20>
| `-OptimizeNoneAttr 0x55b08388a9f0 <col:30>
|-CXXMethodDecl 0x55b08388aa68 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55b08388ab08 <col:20>
| `-OptimizeNoneAttr 0x55b08388ab60 <col:30>
|-CXXMethodDecl 0x55b08388ac28 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55b08388ab98 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55b08388adc8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55b08388af68 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55b08388ae78 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55b08388b010 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55b08388b110 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55b08388b4c0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b08388b0f0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55b08388b0d0 <col:9> 'int' 0
| |-EnumConstantDecl 0x55b08388b1a0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55b08388b4d8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b08388b180 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55b08388b160 <col:14> 'int' 1
| |-EnumConstantDecl 0x55b08388b230 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55b08388b4f0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b08388b210 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55b08388b1f0 <col:14> 'int' 2
| |-EnumConstantDecl 0x55b08388b2c0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55b08388b508 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b08388b2a0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55b08388b280 <col:14> 'int' 3
| |-EnumConstantDecl 0x55b08388b350 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55b08388b520 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b08388b330 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55b08388b310 <col:13> 'int' 4
| |-EnumConstantDecl 0x55b08388b3e0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55b08388b538 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b08388b3c0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55b08388b3a0 <col:13> 'int' 5
| `-EnumConstantDecl 0x55b08388b470 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55b08388b550 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b08388b450 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55b08388b430 <col:14> 'int' 6
|-CXXMethodDecl 0x55b08388b5b8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55b08388b658 <col:20>
| `-OptimizeNoneAttr 0x55b08388b6b0 <col:30>
|-CXXMethodDecl 0x55b08388b7a8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55b08388b6e8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55b08388b850 <col:20>
| `-OptimizeNoneAttr 0x55b08388b8a8 <col:30>
|-CXXMethodDecl 0x55b08388b918 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55b08388ba40 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55b08388bbb8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55b08388baf0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55b08388bc80 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55b08388bd48 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55b08388be88 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55b08388bdf8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55b08388bf30 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55b08388c030 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55b08388c230 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b08388c010 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55b08388bff0 <col:23> 'int' 0
| |-EnumConstantDecl 0x55b08388c0c0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55b08388c248 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b08388c0a0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55b08388c080 <col:45> 'int' 4
| |-EnumConstantDecl 0x55b08388c150 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55b08388c260 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b08388c130 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55b08388c110 <col:24> 'int' 0
| `-EnumConstantDecl 0x55b08388c1e0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55b08388c278 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b08388c1c0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55b08388c1a0 <col:47> 'int' 16
|-CXXMethodDecl 0x55b08388c2d8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55b08388c448 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55b08388c388 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55b08388c4f0 <col:20>
| `-OptimizeNoneAttr 0x55b08388c548 <col:30>
|-CXXMethodDecl 0x55b08388c598 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55b08389ff20 <col:18, col:36>
|   `-ReturnStmt 0x55b08389ff10 <col:20, col:33>
|     `-ImplicitCastExpr 0x55b08389fef8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55b08389fed8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55b08389fea8 <col:27> '<bound member function type>' ->xanno 0x55b08388a5f8
|           `-CXXThisExpr 0x55b08389fe98 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55b08388c690 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55b0838a0030 <col:30, col:48>
|   `-ReturnStmt 0x55b0838a0020 <col:32, col:45>
|     `-ImplicitCastExpr 0x55b0838a0008 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55b08389ffe8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55b08389ffb8 <col:39> '<bound member function type>' ->xanno 0x55b08388a458
|           `-CXXThisExpr 0x55b08389ffa8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55b08388c778 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55b0838a01c8 <col:24, col:50>
|   `-ReturnStmt 0x55b0838a01b8 <col:26, col:47>
|     `-UnaryOperator 0x55b0838a01a0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55b0838a0180 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55b0838a0168 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55b0838a0118 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55b083895438
|         |   `-CXXMemberCallExpr 0x55b0838a00f8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55b0838a00c8 <col:34> '<bound member function type>' ->xanno 0x55b08388a5f8
|         |       `-CXXThisExpr 0x55b0838a00b8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55b0838a0148 <col:46> 'int' 0
|-CXXMethodDecl 0x55b08388c880 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55b0838a0398 <col:36, col:62>
|   `-ReturnStmt 0x55b0838a0388 <col:38, col:59>
|     `-UnaryOperator 0x55b0838a0370 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55b0838a0350 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55b0838a0338 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55b0838a02b0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55b083895438
|         |   `-CXXMemberCallExpr 0x55b0838a0290 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55b0838a0260 <col:46> '<bound member function type>' ->xanno 0x55b08388a458
|         |       `-CXXThisExpr 0x55b0838a0250 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55b0838a02e0 <col:58> 'int' 0
|-CXXMethodDecl 0x55b08388c998 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55b0838a0530 <col:26, col:53>
|   `-ReturnStmt 0x55b0838a0520 <col:28, col:50>
|     `-UnaryOperator 0x55b0838a0508 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55b0838a04e8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55b0838a04d0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55b0838a0480 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55b083895738
|         |   `-CXXMemberCallExpr 0x55b0838a0460 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55b0838a0430 <col:36> '<bound member function type>' ->xanno 0x55b08388a5f8
|         |       `-CXXThisExpr 0x55b0838a0420 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55b0838a04b0 <col:49> 'int' 0
|-CXXMethodDecl 0x55b08388cab8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55b0838a0708 <col:38, col:65>
|   `-ReturnStmt 0x55b0838a06f8 <col:40, col:62>
|     `-UnaryOperator 0x55b0838a06e0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55b0838a06c0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55b0838a06a8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55b0838a0618 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55b083895738
|         |   `-CXXMemberCallExpr 0x55b0838a05f8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55b0838a05c8 <col:48> '<bound member function type>' ->xanno 0x55b08388a458
|         |       `-CXXThisExpr 0x55b0838a05b8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55b0838a0648 <col:61> 'int' 0
|-CXXMethodDecl 0x55b08388cc68 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55b08388cb70 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55b0838a0dd8 <col:34, line:463:5>
|   |-ParenExpr 0x55b0838a0c20 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55b0838a0bf0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55b0838a0858 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b0838a0828 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b0838a0778 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b0838a0760 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b0838a0720 <col:23> 'int' lvalue ParmVar 0x55b08388cb70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b0838a0740 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b0838a0808 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b0838a07d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b0838a0798 <col:33> 'int' lvalue ParmVar 0x55b08388cb70 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55b0838a07f0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55b0838a07b8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b08388a840 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55b0838a08b8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b0838a0898 <col:56> 'int' 0
|   |   `-CallExpr 0x55b0838a0b50 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55b0838a0b38 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b0838a0b18 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b0833f7110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b0838a0b90 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838a09a8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55b0838a0ba8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838a09d8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b0838a0bc0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b0838a0a10 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55b0838a0bd8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b0838a0b00 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b0838a0ae8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b0838a0aa8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55b0838a0dc8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55b0838a0db0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55b0838a0d90 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55b0838a0d60 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55b0838a0d10 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55b083895438
|         |   `-CXXMemberCallExpr 0x55b0838a0cf0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55b0838a0cc0 <col:9> '<bound member function type>' ->xanno 0x55b08388a458
|         |       `-CXXThisExpr 0x55b0838a0cb0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55b0838a0d78 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55b0838a0d40 <col:21> 'int' lvalue ParmVar 0x55b08388cb70 'i' 'int'
|-CXXMethodDecl 0x55b08388ceb8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55b08388cd28 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55b08388cda0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55b0838a1468 <col:40, line:472:5>
|   |-ParenExpr 0x55b0838a1280 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55b0838a1250 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55b0838a0f30 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b0838a0f00 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b0838a0e50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b0838a0e38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b0838a0df8 <col:23> 'int' lvalue ParmVar 0x55b08388cd28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b0838a0e18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b0838a0ee0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b0838a0eb0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b0838a0e70 <col:33> 'int' lvalue ParmVar 0x55b08388cd28 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55b0838a0ec8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55b0838a0e90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b08388a840 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55b0838a0f90 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b0838a0f70 <col:56> 'int' 0
|   |   `-CallExpr 0x55b0838a11b0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55b0838a1198 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b0838a1178 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b0833f7110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b0838a11f0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838a1000 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55b0838a1208 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838a1030 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b0838a1220 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b0838a1068 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55b0838a1238 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b0838a1160 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b0838a1148 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b0838a1108 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55b0838a1448 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55b0838a13f0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55b0838a13c0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55b0838a1370 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55b083895438
|     | |   `-CXXMemberCallExpr 0x55b0838a1350 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55b0838a1320 <col:2> '<bound member function type>' ->xanno 0x55b08388a5f8
|     | |       `-CXXThisExpr 0x55b0838a1310 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55b0838a13d8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b0838a13a0 <col:14> 'int' lvalue ParmVar 0x55b08388cd28 'i' 'int'
|     `-ImplicitCastExpr 0x55b0838a1430 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55b0838a1410 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55b08388cda0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55b08388d078 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55b08388cf80 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55b0838a1be8 <col:36, line:485:5>
|   |-ParenExpr 0x55b0838a1950 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b0838a1920 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b0838a1600 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b0838a15d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b0838a14e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b0838a14c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b0838a1488 <col:23> 'int' lvalue ParmVar 0x55b08388cf80 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b0838a14a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b0838a15b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b0838a1598 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b0838a1500 <col:33> 'int' lvalue ParmVar 0x55b08388cf80 'i' 'int'
|   |   |     `-BinaryOperator 0x55b0838a1578 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b0838a1560 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b0838a1520 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b08388a840 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b0838a1540 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55b0838a1660 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b0838a1640 <col:60> 'int' 0
|   |   `-CallExpr 0x55b0838a1880 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b0838a1868 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b0838a1848 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b0833f7110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b0838a18c0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838a16d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55b0838a18d8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838a1708 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b0838a18f0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b0838a1740 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55b0838a1908 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b0838a1830 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b0838a1818 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b0838a17d8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55b0838a1bd8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55b0838a1bc0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55b0838a1ba8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55b0838a1b78 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55b0838a1b18 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55b0838a1ae8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55b0838a1a60 <col:61, col:70> 'char const[48]' lvalue ->c 0x55b083895310
|             |   `-CXXMemberCallExpr 0x55b0838a1a40 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55b0838a1a10 <col:61> '<bound member function type>' ->xanno 0x55b08388a458
|             |       `-CXXThisExpr 0x55b0838a1a00 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55b0838a1b00 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55b0838a1a90 <col:74> 'int' lvalue ParmVar 0x55b08388cf80 'i' 'int'
|-CXXMethodDecl 0x55b08388d2c8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55b08388d138 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55b08388d1b0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55b0838a2338 <col:42, line:500:5>
|   |-ParenExpr 0x55b0838a20d0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b0838a20a0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b0838a1d80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b0838a1d50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b0838a1c60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b0838a1c48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b0838a1c08 <col:23> 'int' lvalue ParmVar 0x55b08388d138 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b0838a1c28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b0838a1d30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b0838a1d18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b0838a1c80 <col:33> 'int' lvalue ParmVar 0x55b08388d138 'i' 'int'
|   |   |     `-BinaryOperator 0x55b0838a1cf8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b0838a1ce0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b0838a1ca0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b08388a840 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b0838a1cc0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55b0838a1de0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b0838a1dc0 <col:60> 'int' 0
|   |   `-CallExpr 0x55b0838a2000 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b0838a1fe8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b0838a1fc8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b0833f7110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b0838a2040 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838a1e50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55b0838a2058 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838a1e88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b0838a2070 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b0838a1ec0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55b0838a2088 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b0838a1fb0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b0838a1f98 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b0838a1f58 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55b0838a2318 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55b0838a22c8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55b0838a2298 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55b0838a2240 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55b0838a2210 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55b0838a21c0 <col:48, col:57> 'char [48]' lvalue ->c 0x55b083895310
|     |     |   `-CXXMemberCallExpr 0x55b0838a21a0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55b0838a2170 <col:48> '<bound member function type>' ->xanno 0x55b08388a5f8
|     |     |       `-CXXThisExpr 0x55b0838a2160 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55b0838a2228 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55b0838a21f0 <col:61> 'int' lvalue ParmVar 0x55b08388d138 'i' 'int'
|     `-ImplicitCastExpr 0x55b0838a2300 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55b0838a22e0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55b08388d1b0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55b08388d488 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55b08388d390 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55b0838a2a98 <col:35, line:513:5>
|   |-ParenExpr 0x55b0838a27a8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b0838a2778 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b0838a24d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b0838a24a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b0838a23b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b0838a2398 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b0838a2358 <col:23> 'int' lvalue ParmVar 0x55b08388d390 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b0838a2378 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b0838a2480 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b0838a2468 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b0838a23d0 <col:33> 'int' lvalue ParmVar 0x55b08388d390 'i' 'int'
|   |   |     `-BinaryOperator 0x55b0838a2448 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b0838a2430 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b0838a23f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b08388a840 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b0838a2410 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55b0838a2530 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b0838a2510 <col:60> 'int' 0
|   |   `-CallExpr 0x55b0838a26d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b0838a26c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b0838a26a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b0833f7110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b0838a2718 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838a25a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55b0838a2730 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838a25d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b0838a2748 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b0838a2610 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55b0838a2760 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b0838a2688 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b0838a2670 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b0838a2630 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55b0838a2a88 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55b0838a2a70 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55b0838a2a58 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55b0838a2a28 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55b0838a29a0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55b0838a2970 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55b0838a2920 <col:60, col:69> 'char const[48]' lvalue ->c 0x55b083895310
|             |   `-CXXMemberCallExpr 0x55b0838a2900 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55b0838a28d0 <col:60> '<bound member function type>' ->xanno 0x55b08388a458
|             |       `-CXXThisExpr 0x55b0838a28c0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55b0838a2988 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55b0838a2950 <col:73> 'int' lvalue ParmVar 0x55b08388d390 'i' 'int'
|-CXXMethodDecl 0x55b08388d6d8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55b08388d548 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55b08388d5c0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55b0838a31b8 <col:41, line:528:5>
|   |-ParenExpr 0x55b0838a2f40 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b0838a2f10 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b0838a2c30 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b0838a2c00 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b0838a2b10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b0838a2af8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b0838a2ab8 <col:23> 'int' lvalue ParmVar 0x55b08388d548 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b0838a2ad8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b0838a2be0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b0838a2bc8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b0838a2b30 <col:33> 'int' lvalue ParmVar 0x55b08388d548 'i' 'int'
|   |   |     `-BinaryOperator 0x55b0838a2ba8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b0838a2b90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b0838a2b50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b08388a840 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b0838a2b70 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55b0838a2c90 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b0838a2c70 <col:60> 'int' 0
|   |   `-CallExpr 0x55b0838a2e70 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b0838a2e58 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b0838a2e38 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b0833f7110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b0838a2eb0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838a2d00 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55b0838a2ec8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838a2d38 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b0838a2ee0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b0838a2d70 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55b0838a2ef8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b0838a2e20 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b0838a2e08 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b0838a2dc8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55b0838a3198 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55b0838a3148 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55b0838a3118 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55b0838a30c0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55b0838a3080 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55b0838a3030 <col:47, col:56> 'char [48]' lvalue ->c 0x55b083895310
|     |     |   `-CXXMemberCallExpr 0x55b0838a3010 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55b0838a2fe0 <col:47> '<bound member function type>' ->xanno 0x55b08388a5f8
|     |     |       `-CXXThisExpr 0x55b0838a2fd0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55b0838a3098 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55b0838a3060 <col:60> 'int' lvalue ParmVar 0x55b08388d548 'i' 'int'
|     `-ImplicitCastExpr 0x55b0838a3180 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55b0838a3160 <col:65> 'int16_t':'short' lvalue ParmVar 0x55b08388d5c0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55b08388d898 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55b08388d7a0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55b0838a3888 <col:36, line:541:5>
|   |-ParenExpr 0x55b0838a3628 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b0838a35f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b0838a3350 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b0838a3320 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b0838a3230 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b0838a3218 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b0838a31d8 <col:23> 'int' lvalue ParmVar 0x55b08388d7a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b0838a31f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b0838a3300 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b0838a32e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b0838a3250 <col:33> 'int' lvalue ParmVar 0x55b08388d7a0 'i' 'int'
|   |   |     `-BinaryOperator 0x55b0838a32c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b0838a32b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b0838a3270 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b08388a840 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b0838a3290 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55b0838a33b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b0838a3390 <col:60> 'int' 0
|   |   `-CallExpr 0x55b0838a3558 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b0838a3540 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b0838a3520 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b0833f7110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b0838a3598 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838a3420 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55b0838a35b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838a3458 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b0838a35c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b0838a3490 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55b0838a35e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b0838a3508 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b0838a34f0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b0838a34b0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55b0838a3878 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55b0838a3860 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55b0838a3848 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55b0838a3818 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55b0838a37c0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55b0838a3790 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55b0838a3740 <col:61, col:70> 'char const[48]' lvalue ->c 0x55b083895310
|             |   `-CXXMemberCallExpr 0x55b0838a3720 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55b0838a36f0 <col:61> '<bound member function type>' ->xanno 0x55b08388a458
|             |       `-CXXThisExpr 0x55b0838a36e0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55b0838a37a8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55b0838a3770 <col:74> 'int' lvalue ParmVar 0x55b08388d7a0 'i' 'int'
|-CXXMethodDecl 0x55b08388da68 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55b08388d958 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55b08388d9d0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55b08388db18 <col:20>
| `-OptimizeNoneAttr 0x55b08388db70 <col:30>
|-CXXMethodDecl 0x55b08388dca8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55b08388dbb0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55b0838a3f58 <col:35, line:562:5>
|   |-ParenExpr 0x55b0838a3cf8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b0838a3cc8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b0838a3a20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b0838a39f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b0838a3900 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b0838a38e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b0838a38a8 <col:23> 'int' lvalue ParmVar 0x55b08388dbb0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b0838a38c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b0838a39d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b0838a39b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b0838a3920 <col:33> 'int' lvalue ParmVar 0x55b08388dbb0 'i' 'int'
|   |   |     `-BinaryOperator 0x55b0838a3998 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b0838a3980 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b0838a3940 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b08388a840 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b0838a3960 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55b0838a3a80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b0838a3a60 <col:60> 'int' 0
|   |   `-CallExpr 0x55b0838a3c28 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b0838a3c10 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b0838a3bf0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b0833f7110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b0838a3c68 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838a3af0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55b0838a3c80 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838a3b28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b0838a3c98 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b0838a3b60 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55b0838a3cb0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b0838a3bd8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b0838a3bc0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b0838a3b80 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55b0838a3f48 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55b0838a3f30 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55b0838a3f18 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55b0838a3ee8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55b0838a3e90 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55b0838a3e60 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55b0838a3e10 <col:60, col:69> 'char const[48]' lvalue ->c 0x55b083895310
|             |   `-CXXMemberCallExpr 0x55b0838a3df0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55b0838a3dc0 <col:60> '<bound member function type>' ->xanno 0x55b08388a458
|             |       `-CXXThisExpr 0x55b0838a3db0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55b0838a3e78 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55b0838a3e40 <col:73> 'int' lvalue ParmVar 0x55b08388dbb0 'i' 'int'
|-CXXMethodDecl 0x55b08388deb8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55b08388dd68 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55b08388dde0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55b0838a4638 <col:41, line:577:5>
|   |-ParenExpr 0x55b0838a43c8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b0838a4398 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b0838a40f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b0838a40c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b0838a3fd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b0838a3fb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b0838a3f78 <col:23> 'int' lvalue ParmVar 0x55b08388dd68 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b0838a3f98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b0838a40a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b0838a4088 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b0838a3ff0 <col:33> 'int' lvalue ParmVar 0x55b08388dd68 'i' 'int'
|   |   |     `-BinaryOperator 0x55b0838a4068 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b0838a4050 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b0838a4010 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b08388a840 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b0838a4030 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55b0838a4150 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b0838a4130 <col:60> 'int' 0
|   |   `-CallExpr 0x55b0838a42f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b0838a42e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b0838a42c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b0833f7110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b0838a4338 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838a41c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55b0838a4350 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838a41f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b0838a4368 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b0838a4230 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55b0838a4380 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b0838a42a8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b0838a4290 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b0838a4250 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55b0838a4618 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55b0838a45c8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55b0838a4598 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55b0838a4538 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55b0838a4508 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55b0838a44b8 <col:47, col:56> 'char [48]' lvalue ->c 0x55b083895310
|     |     |   `-CXXMemberCallExpr 0x55b0838a4498 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55b0838a4468 <col:47> '<bound member function type>' ->xanno 0x55b08388a5f8
|     |     |       `-CXXThisExpr 0x55b0838a4458 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55b0838a4520 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55b0838a44e8 <col:60> 'int' lvalue ParmVar 0x55b08388dd68 'i' 'int'
|     `-ImplicitCastExpr 0x55b0838a4600 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55b0838a45e0 <col:65> 'int32_t':'int' lvalue ParmVar 0x55b08388dde0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55b08388e078 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55b08388df80 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55b0838a4d68 <col:36, line:591:5>
|   |-ParenExpr 0x55b0838a4aa8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b0838a4a78 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b0838a47d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b0838a47a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b0838a46b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b0838a4698 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b0838a4658 <col:23> 'int' lvalue ParmVar 0x55b08388df80 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b0838a4678 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b0838a4780 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b0838a4768 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b0838a46d0 <col:33> 'int' lvalue ParmVar 0x55b08388df80 'i' 'int'
|   |   |     `-BinaryOperator 0x55b0838a4748 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b0838a4730 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b0838a46f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b08388a840 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b0838a4710 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55b0838a4830 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b0838a4810 <col:60> 'int' 0
|   |   `-CallExpr 0x55b0838a49d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b0838a49c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b0838a49a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b0833f7110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b0838a4a18 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838a48a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55b0838a4a30 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838a48d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b0838a4a48 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b0838a4910 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55b0838a4a60 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b0838a4988 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b0838a4970 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b0838a4930 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55b0838a4d58 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55b0838a4d40 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55b0838a4d28 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55b0838a4cf8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55b0838a4c70 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55b0838a4c40 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55b0838a4bf0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55b083895310
|             |   `-CXXMemberCallExpr 0x55b0838a4bd0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55b0838a4ba0 <col:61> '<bound member function type>' ->xanno 0x55b08388a458
|             |       `-CXXThisExpr 0x55b0838a4b90 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55b0838a4c58 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55b0838a4c20 <col:74> 'int' lvalue ParmVar 0x55b08388df80 'i' 'int'
|-CXXMethodDecl 0x55b08388e2c8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55b08388e138 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55b08388e1b0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55b0838a5448 <col:42, line:606:5>
|   |-ParenExpr 0x55b0838a51d8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b0838a51a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b0838a4f00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b0838a4ed0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b0838a4de0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b0838a4dc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b0838a4d88 <col:23> 'int' lvalue ParmVar 0x55b08388e138 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b0838a4da8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b0838a4eb0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b0838a4e98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b0838a4e00 <col:33> 'int' lvalue ParmVar 0x55b08388e138 'i' 'int'
|   |   |     `-BinaryOperator 0x55b0838a4e78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b0838a4e60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b0838a4e20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b08388a840 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b0838a4e40 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55b0838a4f60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b0838a4f40 <col:60> 'int' 0
|   |   `-CallExpr 0x55b0838a5108 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b0838a50f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b0838a50d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b0833f7110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b0838a5148 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838a4fd0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55b0838a5160 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838a5008 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b0838a5178 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b0838a5040 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55b0838a5190 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b0838a50b8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b0838a50a0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b0838a5060 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55b0838a5428 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55b0838a53d8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55b0838a53a8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55b0838a5348 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55b0838a5318 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55b0838a52c8 <col:48, col:57> 'char [48]' lvalue ->c 0x55b083895310
|     |     |   `-CXXMemberCallExpr 0x55b0838a52a8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55b0838a5278 <col:48> '<bound member function type>' ->xanno 0x55b08388a5f8
|     |     |       `-CXXThisExpr 0x55b0838a5268 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55b0838a5330 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55b0838a52f8 <col:61> 'int' lvalue ParmVar 0x55b08388e138 'i' 'int'
|     `-ImplicitCastExpr 0x55b0838a5410 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55b0838a53f0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55b08388e1b0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55b08388e460 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55b08388e390 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55b0838a5cb8 <col:33, line:620:5>
|   |-ParenExpr 0x55b0838a5a30 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55b0838a5a00 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55b0838a5650 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b0838a5620 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b0838a54c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b0838a54a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b0838a5468 <col:23> 'int' lvalue ParmVar 0x55b08388e390 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b0838a5488 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b0838a5600 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55b0838a55e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b0838a54e0 <col:33> 'int' lvalue ParmVar 0x55b08388e390 'i' 'int'
|   |   |     `-BinaryOperator 0x55b0838a55c8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b0838a55b0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b0838a5500 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b08388a840 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55b0838a5588 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55b0838a5570 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55b0838a5538 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55b0838a56b0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b0838a5690 <col:79> 'int' 0
|   |   `-CallExpr 0x55b0838a5960 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55b0838a5948 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b0838a5928 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b0833f7110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b0838a59a0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838a5798 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55b0838a59b8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838a57e0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b0838a59d0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b0838a5818 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55b0838a59e8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b0838a5910 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b0838a58f8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b0838a58b8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55b0838a5ca8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55b0838a5c90 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55b0838a5c78 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55b0838a5c48 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55b0838a5bc0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55b0838a5b90 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55b0838a5b40 <col:67, col:76> 'char const[48]' lvalue ->c 0x55b083895310
|             |   `-CXXMemberCallExpr 0x55b0838a5b20 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55b0838a5af0 <col:67> '<bound member function type>' ->xanno 0x55b08388a458
|             |       `-CXXThisExpr 0x55b0838a5ae0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55b0838a5ba8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55b0838a5b70 <col:80> 'int' lvalue ParmVar 0x55b08388e390 'i' 'int'
|-CXXMethodDecl 0x55b08388e678 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55b08388e520 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55b08388e5a0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55b0838a64e0 <col:45, line:635:5>
|   |-ParenExpr 0x55b0838a6228 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55b0838a61f8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55b0838a5ec0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b0838a5e90 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b0838a5d30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b0838a5d18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b0838a5cd8 <col:23> 'int' lvalue ParmVar 0x55b08388e520 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b0838a5cf8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b0838a5e70 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55b0838a5e58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b0838a5d50 <col:33> 'int' lvalue ParmVar 0x55b08388e520 'i' 'int'
|   |   |     `-BinaryOperator 0x55b0838a5e38 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b0838a5e20 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b0838a5d70 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b08388a840 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55b0838a5df8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55b0838a5de0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55b0838a5da8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55b0838a5f20 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b0838a5f00 <col:79> 'int' 0
|   |   `-CallExpr 0x55b0838a6158 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55b0838a6140 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b0838a6120 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b0833f7110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b0838a6198 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838a5f90 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55b0838a61b0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b0838a5fd8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b0838a61c8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b0838a6010 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55b0838a61e0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b0838a6108 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b0838a60f0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b0838a60a8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55b0838a64c0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55b0838a6428 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55b0838a63f8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55b0838a6398 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55b0838a6368 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55b0838a6318 <col:54, col:63> 'char [48]' lvalue ->c 0x55b083895310
|     |     |   `-CXXMemberCallExpr 0x55b0838a62f8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55b0838a62c8 <col:54> '<bound member function type>' ->xanno 0x55b08388a5f8
|     |     |       `-CXXThisExpr 0x55b0838a62b8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55b0838a6380 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55b0838a6348 <col:67> 'int' lvalue ParmVar 0x55b08388e520 'i' 'int'
|     `-CXXConstCastExpr 0x55b0838a6490 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55b0838a6478 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55b0838a6440 <col:91> 'const void *' lvalue ParmVar 0x55b08388e5a0 'x' 'const void *'
|-CXXMethodDecl 0x55b08388e748 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55b0838a6568 <col:34, line:640:5>
|   `-ReturnStmt 0x55b0838a6558 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55b0838a6540 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55b0838a6510 <col:16> 'Packet *' lvalue ->_data_packet 0x55b083895ec8
|         `-CXXThisExpr 0x55b0838a6500 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55b08388e888 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55b08388e7f8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55b08389f628 <col:46> 'bool' true
|-CXXMethodDecl 0x55b08388ea08 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55b08388e940 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55b08388eab0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55b08388f260 <line:660:22> "" ""
| |-EnumConstantDecl 0x55b08388ebb0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b08388f2d0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b08388eb90 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55b08388eb70 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55b083883d10 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55b08388ec40 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b08388f2e8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b08388ec20 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55b08388ec00 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55b083883da0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55b08388ecd0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b08388f300 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b08388ecb0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55b08388ec90 <col:21> 'int' 0
| |-EnumConstantDecl 0x55b08388ed60 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b08388f318 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b08388ed40 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55b08388ed20 <col:19> 'int' 16
| |-EnumConstantDecl 0x55b08388edf0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b08388f330 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b08388edd0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55b08388edb0 <col:21> 'int' 16
| |-EnumConstantDecl 0x55b08388ee80 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b08388f348 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b08388ee60 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55b08388ee40 <col:19> 'int' 32
| |-EnumConstantDecl 0x55b08388ef10 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b08388f360 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b08388eef0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55b08388eed0 <col:19> 'int' EnumConstant 0x55b08388ed60 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55b08388efa0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b08388f378 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b08388ef80 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55b08388ef60 <col:19> 'int' EnumConstant 0x55b08388ee80 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55b08388f070 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b08388f390 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b08388f050 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55b08388f030 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55b08388eff0 <col:23> 'int' EnumConstant 0x55b08388efa0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55b08388f010 <col:40> 'int' 2
| |-EnumConstantDecl 0x55b08388f140 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b08388f3a8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b08388f120 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55b08388f100 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55b08388f0c0 <col:23> 'int' EnumConstant 0x55b08388efa0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55b08388f0e0 <col:40> 'int' 4
| `-EnumConstantDecl 0x55b08388f210 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55b08388f3c0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b08388f1f0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55b08388f1d0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55b08388f190 <col:23> 'int' EnumConstant 0x55b08388efa0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55b08388f1b0 <col:40> 'int' 8
|-CXXMethodDecl 0x55b08388f400 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55b08388f4a0 <col:68> "" ""
|-CXXMethodDecl 0x55b08388f538 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55b08388f5d8 <col:45> "" ""
|-CXXMethodDecl 0x55b08388f670 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55b08388f710 <col:57> "" ""
|-CXXMethodDecl 0x55b08388f7a8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55b08388f848 <col:45> "" ""
|-CXXMethodDecl 0x55b08388f8e0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55b08388f980 <col:57> "" ""
|-CXXMethodDecl 0x55b08388fa10 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55b08388fab0 <col:51> "" ""
|-CXXMethodDecl 0x55b08388fb40 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55b08388fbe0 <col:63> "" ""
|-CXXMethodDecl 0x55b08388fc70 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55b08388fd10 <col:53> "" ""
|-CXXMethodDecl 0x55b08388fda0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55b08388fe40 <col:65> "" ""
|-CXXMethodDecl 0x55b08388ff58 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55b08388fec8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55b083890000 <col:61> "" ""
|-CXXMethodDecl 0x55b083890198 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55b083890088 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55b083890100 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55b083890248 <col:67> "" ""
|-CXXMethodDecl 0x55b083890360 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55b0838902d0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55b083890408 <col:63> "" ""
|-CXXMethodDecl 0x55b0838905a0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55b083890490 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55b083890508 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55b083890650 <col:69> "" ""
|-CXXMethodDecl 0x55b083890768 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55b0838906d8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55b083890810 <col:63> "" ""
|-CXXMethodDecl 0x55b083892ee8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55b083892dd8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55b083892e50 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55b083892f98 <col:69> "" ""
|-CXXMethodDecl 0x55b0838930b0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55b083893020 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55b083893158 <col:62> "" ""
|-CXXMethodDecl 0x55b0838932f0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55b0838931e0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55b083893258 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55b0838933a0 <col:68> "" ""
|-CXXMethodDecl 0x55b0838934b8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55b083893428 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55b083893560 <col:63> "" ""
|-CXXMethodDecl 0x55b0838936f8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55b0838935e8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55b083893660 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55b0838937a8 <col:69> "" ""
|-CXXMethodDecl 0x55b083893838 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55b0838938d8 <col:64> "" ""
|-CXXMethodDecl 0x55b083893968 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55b083893a08 <col:52> "" ""
|-CXXMethodDecl 0x55b083893a98 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55b083893b38 <col:67> "" ""
|-CXXMethodDecl 0x55b083893bc8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55b083893c68 <col:55> "" ""
|-CXXMethodDecl 0x55b083893d80 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55b083893cf0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55b083893e28 <col:58> "" ""
|-CXXMethodDecl 0x55b083893fc0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55b083893eb0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55b083893f28 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55b083894070 <col:62> "" ""
|-CXXMethodDecl 0x55b083894188 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55b0838940f8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55b083894230 <col:58> "" ""
|-CXXMethodDecl 0x55b0838943c8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55b0838942b8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55b083894330 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55b083894478 <col:62> "" ""
|-CXXMethodDecl 0x55b083894590 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55b083894500 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55b083894638 <col:60> "" ""
|-CXXMethodDecl 0x55b0838947d0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55b0838946c0 <col:34> col:37 'int'
| |-ParmVarDecl 0x55b083894738 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55b083894880 <col:64> "" ""
|-CXXMethodDecl 0x55b083894998 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55b083894908 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55b083894a40 <col:58> "" ""
|-CXXMethodDecl 0x55b083894bd8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55b083894ac8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55b083894b40 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55b083894c88 <col:62> "" ""
|-CXXMethodDecl 0x55b083894da0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55b083894d10 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55b083894e48 <col:59> "" ""
|-CXXMethodDecl 0x55b083894fe0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55b083894ed0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55b083894f48 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55b083895090 <col:63> "" ""
|-AccessSpecDecl 0x55b083895100 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55b083895128 prev 0x55b08388a330 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55b083895220 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55b083895310 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55b083895438 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55b0838955b8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55b083895738 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55b0838958b8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55b0838a66e8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55b0838a6f58 <col:11>
| |-CXXDestructorDecl 0x55b0838a67c0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55b0838a68f8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55b0838a68f8
| | `-ParmVarDecl 0x55b0838a6a08 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55b0838a6aa8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55b0838a6aa8
| | `-ParmVarDecl 0x55b0838a6bb8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55b0838a9978 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55b0838a9a88 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55b0838a9d08 <col:11>
| |   `-ReturnStmt 0x55b0838a9cf8 <col:11>
| |     `-UnaryOperator 0x55b0838a9ce0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55b0838a9cd0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55b0838a9af8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55b0838a9af8
|   `-ParmVarDecl 0x55b0838a9c08 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55b083895920 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55b083895a38 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55b083895ad8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55b083895b40 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55b083895ba8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55b083895c10 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55b083895c70 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55b083895d30 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55b083895d90 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55b083895df0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55b0838a65f8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55b083895ad8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55b0838a6f68 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55b0838a6fc0 <col:12>
| |-CXXConstructorDecl 0x55b0838a6c28 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55b0838a6c28
| | `-ParmVarDecl 0x55b0838a6d38 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55b0838a6dd8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55b0838a6dd8
| | `-ParmVarDecl 0x55b0838a6ee8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55b0838a9060 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55b083895e68 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55b083895ec8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55b083895f30 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55b083895f98 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55b083896000 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55b083896068 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55b0838960c8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55b083896128 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55b083896190 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55b083896218 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55b083895e68 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55b0838a6590 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55b0838960c8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55b0838a6fd0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55b0838a7030 <col:21, line:755:5>
|-CXXConstructorDecl 0x55b0838963b8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55b0838962f8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55b0838964b0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55b083896698 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55b0838965a0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55b083896968 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55b083896750 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55b0838967c8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55b083896840 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b083896b88 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55b083896a38 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55b083896ab0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55b08389f168 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55b083896c48 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55b083896cc0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55b083896d38 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55b08389f2c0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55b08389f230 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b08389f408 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55b08389f378 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55b08389f500 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b08398ee70 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b08398ef88 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55b08398f018 <col:16, col:22> col:16 public
|-EnumDecl 0x55b08398f040 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55b08398f140 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55b08398f390 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b08398f120 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55b08398f100 <col:21> 'int' 0
| |-EnumConstantDecl 0x55b08398f1d0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55b08398f3a8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b08398f1b0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55b08398f190 <col:24> 'int' 22
| |-EnumConstantDecl 0x55b08398f260 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55b08398f3c0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b08398f240 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55b08398f220 <col:24> 'int' 34
| |-EnumConstantDecl 0x55b08398f2f0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55b08398f3d8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b08398f2d0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55b08398f2b0 <col:25> 'int' 95
| `-EnumConstantDecl 0x55b08398f340 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55b083990de0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55b083991218 <col:7>
|-CXXConstructorDecl 0x55b083990ee8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55b083990ee8
| `-ParmVarDecl 0x55b083990ff8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55b083991098 <col:7> col:7 implicit constexpr NumArg 'void (NumArg &&)' inline default trivial noexcept-unevaluated 0x55b083991098
| `-ParmVarDecl 0x55b0839911a8 <col:7> col:7 'NumArg &&'
`-CXXDestructorDecl 0x55b083993318 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b08398f408 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55b08398f568 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55b08398f5f8 <col:32, col:38> col:32 public
|-TypedefDecl 0x55b08398f630 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55b0834b0660 'uint32_t' sugar
|   |-Typedef 0x55b0833c44c8 'uint32_t'
|   `-TypedefType 0x55b08339d5a0 '__uint32_t' sugar
|     |-Typedef 0x55b08339d198 '__uint32_t'
|     `-BuiltinType 0x55b08335b620 'unsigned int'
|-CXXConstructorDecl 0x55b08398f778 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55b08398f6a0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55b083990c58 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55b083991228 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55b083990510 'base' 'int'
| | `-ImplicitCastExpr 0x55b083990cf8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55b083990cb8 <col:16> 'int' lvalue ParmVar 0x55b08398f6a0 'b' 'int'
| `-CompoundStmt 0x55b083991298 <col:19, line:1046:5>
|-CXXMethodDecl 0x55b08398fc70 <line:1048:5, line:1050:50> line:1048:17 parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55b08398f840 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55b08398f8c0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55b08398f938 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55b08398f9b8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55b08398fa78 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55b08398faf8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55b0839900c8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55b08398fd40 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x55b083990028 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x55b08398fde8 <col:27, col:41> col:41 referenced str 'const String &'
|   |-ParmVarDecl 0x55b08398fe88 <col:46, col:49> col:49 referenced result 'V &'
|   |-ParmVarDecl 0x55b08398ff00 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x55b083990c78 <col:82> 'const ArgContext' lvalue Var 0x55b083984ae8 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x55b0839921c8 <col:94, line:1067:5>
|     |-DeclStmt 0x55b083991428 <line:1054:9, col:64>
|     | `-VarDecl 0x55b0839912b8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-CXXDependentScopeMemberExpr 0x55b0839913e0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
|     |-DeclStmt 0x55b083991648 <line:1055:9, col:91>
|     | `-VarDecl 0x55b083991458 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55b083991620 <col:31, col:90> 'int' functional cast to int <Dependent>
|     |     `-BinaryOperator 0x55b083991600 <col:35, col:89> 'unsigned long' '/'
|     |       |-ParenExpr 0x55b0839915b0 <col:35, col:69> 'unsigned long'
|     |       | `-BinaryOperator 0x55b083991590 <col:36, col:68> 'unsigned long' '-'
|     |       |   |-BinaryOperator 0x55b083991538 <col:36, col:64> 'unsigned long' '+'
|     |       |   | |-UnaryExprOrTypeTraitExpr 0x55b0839914e8 <col:36, col:44> 'unsigned long' sizeof 'V'
|     |       |   | `-UnaryExprOrTypeTraitExpr 0x55b083991518 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |       |   `-ImplicitCastExpr 0x55b083991578 <col:68> 'unsigned long' <IntegralCast>
|     |       |     `-IntegerLiteral 0x55b083991558 <col:68> 'int' 1
|     |       `-UnaryExprOrTypeTraitExpr 0x55b0839915e0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55b0839917a8 <line:1056:9, col:27>
|     | `-VarDecl 0x55b083991740 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
|     |-IfStmt 0x55b083991bf0 <line:1057:9, line:1059:22>
|     | |-CXXOperatorCallExpr 0x55b083991b20 <line:1057:13, line:1058:24> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55b083991aa0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55b08387a648 0x55b0836c3c28 0x55b0836c3900 0x55b0836b40d0 0x55b0836b3d80 0x55b0836b3670 0x55b083685fe0 0x55b0836134b0
|     | | |-CallExpr 0x55b0839919e0 <line:1057:13, col:78> '<dependent type>'
|     | | | |-UnresolvedMemberExpr 0x55b0839917d0 <col:13> '<bound member function type>' lvalue
|     | | | |-CXXMemberCallExpr 0x55b083991880 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55b083991850 <col:19, col:23> '<bound member function type>' .begin 0x55b0836a32d8
|     | | | |   `-DeclRefExpr 0x55b083991830 <col:19> 'const String' lvalue ParmVar 0x55b08398fde8 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55b0839918f0 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55b0839918c0 <col:32, col:36> '<bound member function type>' .end 0x55b0836a34f0
|     | | | |   `-DeclRefExpr 0x55b0839918a0 <col:32> 'const String' lvalue ParmVar 0x55b08398fde8 'str' 'const String &'
|     | | | |-DeclRefExpr 0x55b083991910 <col:43> 'const bool' lvalue Var 0x55b0839912b8 'is_signed' 'const bool'
|     | | | |-CXXFunctionalCastExpr 0x55b083991978 <col:54, col:67> 'int' functional cast to int <Dependent>
|     | | | | `-UnaryExprOrTypeTraitExpr 0x55b083991958 <col:58, col:66> 'unsigned long' sizeof 'V'
|     | | | |-DeclRefExpr 0x55b0839919a0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55b083991740 'x' 'IntArg::limb_type [nlimb]'
|     | | | `-DeclRefExpr 0x55b0839919c0 <col:73> 'const int' lvalue Var 0x55b083991458 'nlimb' 'const int'
|     | | `-CXXMemberCallExpr 0x55b083991a80 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55b083991a50 <col:16, col:20> '<bound member function type>' .end 0x55b0836a34f0
|     | |     `-DeclRefExpr 0x55b083991a30 <col:16> 'const String' lvalue ParmVar 0x55b08398fde8 'str' 'const String &'
|     | `-BinaryOperator 0x55b083991bd0 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55b083991b68 <col:13> 'int' lvalue ->status 0x55b083990578
|     |   | `-CXXThisExpr 0x55b083991b58 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55b083991bb8 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55b083991b98 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55b08398f1d0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55b083991e40 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55b083991d28 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55b083991d10 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55b083991cf8 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55b083991c18 <col:13> 'int' lvalue ->status 0x55b083990578
|     | | |     `-CXXThisExpr 0x55b083991c08 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55b083991cd8 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55b083991ca8 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55b083991c58 <col:23> 'int' lvalue ->status 0x55b083990578
|     | |   |   `-CXXThisExpr 0x55b083991c48 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55b083991cc0 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55b083991c88 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55b08398f260 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55b083991e20 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55b083991dc0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55b083991d68 <col:13, col:18> '<bound member function type>' .error 0x55b08393d390
|     |   | | `-DeclRefExpr 0x55b083991d48 <col:13> 'const ArgContext' lvalue ParmVar 0x55b08398ff00 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55b083991de8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55b083991d98 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55b083991e10 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55b083991e00 <col:20> 'bool' false
|     |-DeclStmt 0x55b083992018 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55b083991fc0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
|     |   `-DependentNameType 0x55b083991f50 'typename make_unsigned<V>::type' dependent
|     |-CallExpr 0x55b083992178 <line:1065:9, col:71> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b083992030 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55b083647478
|     | |-DeclRefExpr 0x55b083992078 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55b083991740 'x' 'IntArg::limb_type [nlimb]'
|     | `-CXXReinterpretCastExpr 0x55b083992148 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
|     |   `-DeclRefExpr 0x55b0839920c0 <col:64> 'V' lvalue ParmVar 0x55b08398fe88 'result' 'V &'
|     `-ReturnStmt 0x55b0839921b8 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55b0839921a8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55b083990488 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55b083990138 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55b0839903e8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55b0839901e8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55b083990288 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55b083990300 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55b083990c98 <col:71> 'const ArgContext' lvalue Var 0x55b083984ae8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55b083992938 <col:83, line:1083:5>
| |   |-DeclStmt 0x55b083992290 <line:1071:9, col:12>
| |   | `-VarDecl 0x55b083992228 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55b083992910 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55b083992520 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55b0839923a8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55b083992370 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55b0839922b8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55b083992310 <col:31> 'const String' lvalue ParmVar 0x55b0839901e8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55b083992330 <col:36> 'V' lvalue Var 0x55b083992228 'x' 'V'
| |     | |   `-DeclRefExpr 0x55b083992350 <col:39> 'const ArgContext' lvalue ParmVar 0x55b083990300 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55b083992500 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55b0839924e0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55b0839924c8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55b0839924b0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55b0839923d0 <col:17> 'int' lvalue ->status 0x55b083990578
| |     |     |     `-CXXThisExpr 0x55b0839923c0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55b083992490 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55b083992460 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55b083992410 <col:27> 'int' lvalue ->status 0x55b083990578
| |     |       |   `-CXXThisExpr 0x55b083992400 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55b083992478 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55b083992440 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55b08398f260 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55b083992550 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55b083992540 <col:20> 'bool' false
| |     `-IfStmt 0x55b0839928e8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55b0839925f0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55b0839925c0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55b083992570 <col:18> 'int' lvalue ->status 0x55b083990578
| |       | |   `-CXXThisExpr 0x55b083992560 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55b0839925d8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55b0839925a0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55b08398f260 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55b083992828 <col:42, line:1079:9>
| |       | |-CallExpr 0x55b0839927d0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55b083992620 <line:1076:13> '<bound member function type>' ->range_error 0x55b083990b88
| |       | | | `-CXXThisExpr 0x55b083992610 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55b083992650 <col:25> 'const ArgContext' lvalue ParmVar 0x55b083990300 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55b083992730 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55b0839927a8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55b083992788 <col:43> 'V' lvalue Var 0x55b083992228 'x' 'V'
| |       | `-ReturnStmt 0x55b083992818 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55b083992808 <col:20> 'bool' false
| |       `-CompoundStmt 0x55b0839928c8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55b083992888 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55b083992848 <col:13> 'V' lvalue ParmVar 0x55b083990288 'result' 'V &'
| |         | `-DeclRefExpr 0x55b083992868 <col:22> 'V' lvalue Var 0x55b083992228 'x' 'V'
| |         `-ReturnStmt 0x55b0839928b8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55b0839928a8 <col:20> 'bool' true
| `-CXXMethodDecl 0x55b0839bded8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55b0839a8c38 <col:16, col:30> col:30 str 'const String &'
|   |-ParmVarDecl 0x55b0839a8d08 <col:35, col:38> col:38 result 'int &'
|   `-ParmVarDecl 0x55b0839a8d70 <col:46, col:71> col:64 args 'const ArgContext &' cinit
|     `-DeclRefExpr 0x55b083990c98 <col:71> 'const ArgContext' lvalue Var 0x55b083984ae8 'blank_args' 'const ArgContext'
|-FieldDecl 0x55b083990510 <line:1085:5, col:9> col:9 base 'int'
|-FieldDecl 0x55b083990578 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55b0839905c8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55b083990880 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55b083990608 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55b083990688 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55b083990700 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55b083990780 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55b083990b88 <line:1092:5, line:1093:45> line:1092:10 referenced range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55b083990950 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55b0839909c8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55b083990a60 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55b083993198 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55b083993198
| `-ParmVarDecl 0x55b0839932a8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55b083993428 <col:7> col:7 implicit constexpr IntArg 'void (IntArg &&)' inline default trivial noexcept-unevaluated 0x55b083993428
| `-ParmVarDecl 0x55b083993538 <col:7> col:7 'IntArg &&'
`-CXXDestructorDecl 0x55b0839a88e8 <col:7> col:7 implicit referenced ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55b083997a60 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55b083997cb8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55b0839dc0a8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55b0839dc540 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55b0839dc520 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55b0839dc5b0 <col:19>
|-CXXConstructorDecl 0x55b0839dc1a8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x55b0839dc1a8
| `-ParmVarDecl 0x55b0839dc2b8 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x55b0839dc358 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55b0839dc468 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55b0839dd170 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55b0839dce90 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55b0839dce60 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x55b0839dce30 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x55b0839dc468 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x55b0839dd1e0 <col:19>
`-CXXDestructorDecl 0x55b0839dc5f0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
