
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Range
         0 |   uint32_t offset
         4 |   uint32_t length
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55af6a1b89e8 prev 0x55af6a1b0188 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55af6a1b8ae0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55af6a1b8b70 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55af6a1b8be8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55af6a1b8ca8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55af6a1b8d70 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55af6a1b8ee8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55af6a1b8e20 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55af6a1b8f90 <col:24>
| `-OptimizeNoneAttr 0x55af6a1b8fe8 <col:34>
|-CXXMethodDecl 0x55af6a1b9030 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55af6a1b92e8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55af6a1b90e0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55af6a1b9158 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55af6a1b91d8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55af6a1b93a0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55af6a1b93d8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55af6a1b9440 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55af6a1b94c8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55af6a1b97e8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55af6a1b9580 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55af6a1b95f8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55af6a1b9670 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55af6a1b96f0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55af6a1b9900 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55af6a1c1278 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55af6a1c1278
| `-ParmVarDecl 0x55af6a1c1388 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55af6a1c1428 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55af6a1c1428
| `-ParmVarDecl 0x55af6a1c1538 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55af6a2a8410 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55af6a1aba00 prev 0x55af6a1ab780 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55af6a1abaf8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55af6a1abb88 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55af6a1abbe8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55af6a1abcd8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55af6a1abdd8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55af6a1abfa8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55af6a1abe58 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55af6a1abed0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55af6a1ac138 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55af6a1ac070 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55af6a1ac1e0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55af6a1ac318 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55af6a1ac250 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55af6a1ac4b8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55af6a1ac3f8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55af6a1ac658 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55af6a1ac598 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55af6a1ac700 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55af6a1ac800 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55af6a1ac8e0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a1ac7e0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55af6a1ac7c0 <col:26> 'int' 1
| `-EnumConstantDecl 0x55af6a1ac890 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55af6a1ac8f8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55af6a1ac870 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55af6a1ac850 <col:44> 'int' 2
|-CXXMethodDecl 0x55af6a1aca40 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55af6a1ac928 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55af6a1ac9a8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55af6a1acb98 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55af6a1acb08 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55af6a1acdd8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55af6a1acc58 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55af6a1accd0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55af6a1ace88 <col:20>
| `-OptimizeNoneAttr 0x55af6a1acee0 <col:30>
|-CXXMethodDecl 0x55af6a1acfe8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55af6a1acf20 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55af6a1ad090 <col:20>
| `-OptimizeNoneAttr 0x55af6a1ad0e8 <col:30>
|-CXXMethodDecl 0x55af6a1ad138 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55af6a1ad200 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55af6a1ad318 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55af6a1ad3a0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55af6a1ad428 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55af6a1ad4b0 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x55af6a1ad538 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55af6a1ad5c8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55af6a1ad688 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55af6a1ad710 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55af6a1ad798 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55af6a1ad820 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55af6a1ad8a8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55af6a1ad930 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55af6a1ad9c0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55af6a1ada80 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55af6a1adb10 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55af6a1adc60 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55af6a1adbc8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55af6a1addf0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55af6a1add20 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55af6a1ae0a0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55af6a1adea8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55af6a1adf28 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55af6a1adfa8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55af6a1ae158 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55af6a1ae260 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55af6a1ae4f0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a1ae240 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55af6a1ae220 <col:33> 'int' 0
| |-EnumConstantDecl 0x55af6a1ae2f0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55af6a1ae508 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a1ae2d0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55af6a1ae2b0 <col:32> 'int' 20
| |-EnumConstantDecl 0x55af6a1ae380 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55af6a1ae520 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a1ae360 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55af6a1ae340 <col:38> 'int' 90
| |-EnumConstantDecl 0x55af6a1ae410 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55af6a1ae538 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a1ae3f0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55af6a1ae3d0 <col:35> 'int' 100
| `-EnumConstantDecl 0x55af6a1ae4a0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55af6a1ae550 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55af6a1ae480 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55af6a1ae460 <col:32> 'int' 2000
|-CXXMethodDecl 0x55af6a1ae590 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55af6a1ae9d0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55af6a1ae840 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55af6a1ae8b8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55af6a1aeaa0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55af6a1aec20 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55af6a1aeb50 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55af6a1aee28 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55af6a1aecd8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55af6a1aed50 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55af6a1aef28 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55af6a1aefc8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55af6a1af090 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55af6a1af120 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55af6a1af350 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a1af100 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55af6a1af0e0 <col:36> 'int' EnumConstant 0x55af6a1af090 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55af6a1af170 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55af6a1af1c0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55af6a1af210 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55af6a1af260 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55af6a1af2b0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55af6a1af300 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55af6a1af438 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55af6a1af378 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55af6a1af500 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55af6a1af5c0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55af6a1af680 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55af6a1af740 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55af6a1af858 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55af6a1af920 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55af6a1afaa0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55af6a1af9d0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55af6a1afbc8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55af6a1afdc8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55af6a1afc78 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55af6a1afcf8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55af6a1bd718 <col:54, line:127:5>
|   |-ParenExpr 0x55af6a1bd5c8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55af6a1bd598 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55af6a1bd288 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55af6a1bd260 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55af6a1bd248 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55af6a1bd230 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55af6a1bd200 <col:31> 'Router *' lvalue ->_router 0x55af6a1bb0e0
|   |   |         `-CXXThisExpr 0x55af6a1bd1f0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55af6a1bd2e8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55af6a1bd2c8 <col:48> 'int' 0
|   |   `-CallExpr 0x55af6a1bd4f8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55af6a1bd4e0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55af6a1bd4c0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55af69ce60d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55af6a1bd538 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a1bd358 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55af6a1bd550 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a1bd378 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55af6a1bd568 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55af6a1bd3b0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55af6a1bd580 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55af6a1bd4a8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55af6a1bd490 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55af6a1bd448 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55af6a1bd660 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55af6a1bd5f8 <col:9> 'Router *' lvalue ->_router 0x55af6a1bb0e0
|   | | `-CXXThisExpr 0x55af6a1bd5e8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55af6a1bd648 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55af6a1bd628 <col:19> 'Router *' lvalue ParmVar 0x55af6a1afc78 'r' 'Router *'
|   `-BinaryOperator 0x55af6a1bd6f8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55af6a1bd690 <col:9> 'int' lvalue ->_eindex 0x55af6a1bb148
|     | `-CXXThisExpr 0x55af6a1bd680 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55af6a1bd6e0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55af6a1bd6c0 <col:19> 'int' lvalue ParmVar 0x55af6a1afcf8 'eindex' 'int'
|-CXXMethodDecl 0x55af6a1aff50 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55af6a1afe88 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55af6a1b0020 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55af6a1b00e8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55af6a1b0188 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55af6a1b03d8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55af6a1b0250 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55af6a1b02d0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55af6a1b0488 <col:20>
| `-OptimizeNoneAttr 0x55af6a1b04e0 <col:30>
|-CXXMethodDecl 0x55af6a1b05e8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55af6a1b0520 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55af6a1b0690 <col:20>
| `-OptimizeNoneAttr 0x55af6a1b06e8 <col:30>
|-CXXMethodDecl 0x55af6a1b07b8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55af6a1b0728 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55af6a1b0860 <col:20>
| `-OptimizeNoneAttr 0x55af6a1b08b8 <col:30>
|-CXXMethodDecl 0x55af6a1b0a48 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55af6a1b08f0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55af6a1b0970 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55af6a1b0bd8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55af6a1b0b10 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55af6a1b0d28 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55af6a1b0c98 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55af6a1b0e78 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55af6a1b0de8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55af6a1b0fc8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55af6a1b0f38 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55af6a1b1288 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55af6a1b1080 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55af6a1b1100 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55af6a1b11a8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55af6a1b1360 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55af6a1b1420 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55af6a1b16f0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55af6a1b15a0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55af6a1b1618 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55af6a1b1818 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55af6a1b19f0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55af6a1b18d0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55af6a1b1950 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55af6a1b1bd8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55af6a1b1ab8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55af6a1b1b38 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55af6a1b1f48 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55af6a1b1c98 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55af6a1b1d10 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55af6a1b1d90 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55af6a1bcd00 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55af6a1bcce0 <col:106> 'int' 0
| `-ParmVarDecl 0x55af6a1b1e08 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55af6a1bcd38 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55af6a1bcd18 <col:126> 'int' 0
|-CXXMethodDecl 0x55af6a1b22e8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55af6a1b2018 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55af6a1b20b0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55af6a1b2130 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55af6a1b21a8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55af6a1bcd70 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55af6a1bcd50 <col:114> 'int' 0
|-CXXMethodDecl 0x55af6a1b2678 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55af6a1b23c0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55af6a1b2438 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55af6a1b24b8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55af6a1bcd88 <col:96> 'int' 0
| `-ParmVarDecl 0x55af6a1b2530 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55af6a1bcdc8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55af6a1bcda8 <col:116> 'int' 0
|-CXXMethodDecl 0x55af6a1b29f8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55af6a1b2748 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55af6a1b27c0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55af6a1b2840 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55af6a1bce00 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55af6a1bcde0 <col:109> 'int' 0
| `-ParmVarDecl 0x55af6a1b28b8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55af6a1bce38 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55af6a1bce18 <col:129> 'int' 0
|-CXXMethodDecl 0x55af6a1b2d78 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55af6a1b2ac8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55af6a1b2b40 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55af6a1b2bc0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55af6a1b2c38 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55af6a1bce70 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55af6a1bce50 <col:117> 'int' 0
|-CXXMethodDecl 0x55af6a1b3108 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55af6a1b2e50 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55af6a1b2ec8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55af6a1b2f48 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55af6a1bce88 <col:99> 'int' 0
| `-ParmVarDecl 0x55af6a1b2fc0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55af6a1bcec8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55af6a1bcea8 <col:119> 'int' 0
|-CXXMethodDecl 0x55af6a1b3528 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55af6a1b31d8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55af6a1b3258 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55af6a1b32d0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55af6a1b3350 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55af6a1bcf00 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55af6a1bcee0 <col:108> 'int' 0
| `-ParmVarDecl 0x55af6a1b33d0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55af6a1bcf38 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55af6a1bcf18 <col:141> 'int' 0
|-CXXMethodDecl 0x55af6a1b3948 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55af6a1b3600 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55af6a1b3680 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55af6a1b36f8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55af6a1b3778 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55af6a1b37f8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55af6a1bcf50 <col:121> 'int' 0
|-CXXMethodDecl 0x55af6a1b3d78 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55af6a1b3a28 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55af6a1b3aa8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55af6a1b3b20 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55af6a1b3ba0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55af6a1bcf70 <col:98> 'int' 0
| `-ParmVarDecl 0x55af6a1b3c20 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55af6a1bcf90 <col:123> 'int' 0
|-CXXMethodDecl 0x55af6a1b4040 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55af6a1b3e50 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55af6a1b3ed0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55af6a1b3f50 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55af6a1bcfb0 <col:80> 'int' 0
|-EnumDecl 0x55af6a1b40f8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55af6a1b4200 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55af6a1b4490 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a1b41e0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55af6a1b41c0 <col:42> 'int' 1
| |-EnumConstantDecl 0x55af6a1b4290 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55af6a1b44a8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a1b4270 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55af6a1b4250 <col:40> 'int' 2
| |-EnumConstantDecl 0x55af6a1b4320 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55af6a1b44c0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a1b4300 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55af6a1b42e0 <col:44> 'int' 4
| |-EnumConstantDecl 0x55af6a1b43b0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55af6a1b44d8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a1b4390 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55af6a1b4370 <col:36> 'int' 7
| `-EnumConstantDecl 0x55af6a1b4440 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55af6a1b44f0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55af6a1b4420 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55af6a1b4400 <col:34> 'int' 6
|-CXXMethodDecl 0x55af6a1b47a8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55af6a1b4518 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55af6a1b45b8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55af6a1b4638 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55af6a1b46b0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55af6a1bd068 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55af6a1bd050 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55af6a1bd038 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55af6a1bd018 <col:98, col:105> 'String' (CXXTemporary 0x55af6a1bd018)
|           `-CXXTemporaryObjectExpr 0x55af6a1bcfe0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55af6a1b4a48 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55af6a1b4878 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55af6a1b48f0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55af6a1b4968 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55af6a1bd118 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55af6a1bd100 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55af6a1bd0e8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55af6a1bd0c8 <col:94, col:101> 'String' (CXXTemporary 0x55af6a1bd0c8)
| |         `-CXXTemporaryObjectExpr 0x55af6a1bd090 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55af6a1bd900 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55af6a1bd878 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55af6a1bd848 <col:9> '<bound member function type>' ->add_task_handlers 0x55af6a1b47a8
|     | `-CXXThisExpr 0x55af6a1bd838 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55af6a1bd8b8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55af6a1bd7b8 <col:27> 'Task *' lvalue ParmVar 0x55af6a1b4878 'task' 'Task *'
|     |-ImplicitCastExpr 0x55af6a1bd8d0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55af6a1bd7d8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55af6a1b48f0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55af6a1bd8e8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55af6a1bd7f8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55af6a1b4440 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55af6a1bd818 <col:62> 'const String' lvalue ParmVar 0x55af6a1b4968 'prefix' 'const String &'
|-CXXMethodDecl 0x55af6a1b4c58 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55af6a1b4b10 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55af6a1b4b88 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55af6a1bd1c8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55af6a1bd1b0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55af6a1bd198 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55af6a1bd178 <col:70, col:77> 'String' (CXXTemporary 0x55af6a1bd178)
| |         `-CXXTemporaryObjectExpr 0x55af6a1bd140 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55af6a1bdad8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55af6a1bda50 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55af6a1bda20 <col:9> '<bound member function type>' ->add_task_handlers 0x55af6a1b47a8
|     | `-CXXThisExpr 0x55af6a1bda10 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55af6a1bda90 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55af6a1bd990 <col:27> 'Task *' lvalue ParmVar 0x55af6a1b4b10 'task' 'Task *'
|     |-ImplicitCastExpr 0x55af6a1bdaa8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55af6a1bd9b0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55af6a1bdac0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55af6a1bd9d0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55af6a1b4440 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55af6a1bd9f0 <col:57> 'const String' lvalue ParmVar 0x55af6a1b4b88 'prefix' 'const String &'
|-CXXMethodDecl 0x55af6a1b4f38 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55af6a1b4d20 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55af6a1b4da0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55af6a1b4e18 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55af6a1b51e8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55af6a1b5008 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55af6a1b5088 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55af6a1b5108 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55af6a1b54d8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55af6a1b52b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55af6a1b5338 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55af6a1b53b0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55af6a1b5788 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55af6a1b55a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55af6a1b5628 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55af6a1b56a8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55af6a1b5a38 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55af6a1b5858 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55af6a1b58d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55af6a1b5958 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55af6a1b5ce8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55af6a1b5b08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55af6a1b5b88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55af6a1b5c00 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55af6a1b5f98 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55af6a1b5db8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55af6a1b5e38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55af6a1b5eb8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55af6a1b62a8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55af6a1b60c0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55af6a1b6140 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55af6a1b61c0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55af6a1b6588 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55af6a1b6378 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55af6a1b63f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55af6a1b64a0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55af6a1b6868 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55af6a1b6658 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55af6a1b66d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55af6a1b6780 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55af6a1b6ad0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55af6a1b6938 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55af6a1b69b8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55af6a1b6a30 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55af6a1b6d78 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55af6a1b6ba0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55af6a1b6c20 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55af6a1b6c98 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55af6a1b7028 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55af6a1b6e48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55af6a1b6ec8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55af6a1b6f48 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55af6a1b72d8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55af6a1b70f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55af6a1b7178 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55af6a1b71f0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55af6a1b7588 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55af6a1b73a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55af6a1b7428 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55af6a1b74a0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55af6a1b7858 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55af6a1b7658 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55af6a1b76d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55af6a1b7778 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55af6a1b7b88 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55af6a1b7928 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55af6a1b79a8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55af6a1b7a20 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55af6a1b7a98 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55af6a1bd1e0 <col:93> 'bool' false
|-CXXMethodDecl 0x55af6a1b7d70 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55af6a1b7c58 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55af6a1b7cd8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55af6a1b7f48 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55af6a1b7e30 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55af6a1b7eb0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55af6a1b8228 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55af6a1b8008 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55af6a1b8080 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55af6a1b8100 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55af6a1b8178 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55af6a1b8518 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55af6a1b82f8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55af6a1b8370 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55af6a1b83f0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55af6a1b8468 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55af6a1b8750 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55af6a1b85f0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55af6a1b8670 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55af6a1b8938 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55af6a1b8818 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55af6a1b8898 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55af6a1b89e8 prev 0x55af6a1b0188 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55af6a1b8ae0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55af6a1b8b70 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55af6a1b8be8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55af6a1b8ca8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55af6a1b8d70 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55af6a1b8ee8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55af6a1b8e20 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55af6a1b8f90 <col:24>
| | `-OptimizeNoneAttr 0x55af6a1b8fe8 <col:34>
| |-CXXMethodDecl 0x55af6a1b9030 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55af6a1b92e8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55af6a1b90e0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55af6a1b9158 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55af6a1b91d8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55af6a1b93a0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55af6a1b93d8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55af6a1b9440 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55af6a1b94c8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55af6a1b97e8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55af6a1b9580 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55af6a1b95f8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55af6a1b9670 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55af6a1b96f0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55af6a1b9900 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55af6a1c1278 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55af6a1c1278
| | `-ParmVarDecl 0x55af6a1c1388 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55af6a1c1428 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55af6a1c1428
| | `-ParmVarDecl 0x55af6a1c1538 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55af6a2a8410 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55af6a1b9978 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55af6a1b9a18 <col:38> "" ""
|-CXXMethodDecl 0x55af6a1b9aa8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55af6a1b9b48 <col:44> "" ""
|-AccessSpecDecl 0x55af6a1b9bb8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55af6a1b9be0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55af6a1b9ce0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55af6a1b9d30 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55af6a1b9cc0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55af6a1b9ca0 <col:27> 'int' 4
|-FieldDecl 0x55af6a1b9de8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55af6a1b9f98 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55af6a1ba050 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55af6a1bb0e0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55af6a1bb148 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55af6a1bb298 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55af6a1bb1d8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55af6a1bb448 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55af6a1bb358 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55af6a1bb628 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55af6a1bb508 <col:20> col:23 'int'
| `-ParmVarDecl 0x55af6a1bb588 <col:25> col:28 'int'
|-CXXMethodDecl 0x55af6a1bb8d0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55af6a1bb6f0 <col:23> col:26 'int'
| |-ParmVarDecl 0x55af6a1bb770 <col:28> col:31 'int'
| `-ParmVarDecl 0x55af6a1bb7e8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55af6a1bb988 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55af6a1bba50 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55af6a1bbaa0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55af6a1bbaf0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55af6a1bbcd0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55af6a1bbb80 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55af6a1bbbf8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55af6a1bbf78 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55af6a1bbd98 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55af6a1bbe18 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55af6a1bbe90 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55af6a1bc198 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55af6a1bc048 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55af6a1bc0c8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55af6a1bc4d0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55af6a1bc258 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55af6a1bc2d8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55af6a1bc350 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55af6a1bc3d0 <col:57> col:60 'int'
|-CXXMethodDecl 0x55af6a1bc6b8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55af6a1bc5a0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55af6a1bc620 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55af6a1bc808 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55af6a1bc778 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55af6a1bcb88 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55af6a1bc8c8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55af6a1bc948 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55af6a1bc9c0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55af6a1bca40 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55af6a1bcca0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<1> >
         0 |   vector_memory<class sized_array_memory<1> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<unsigned char>
         0 |   class vector_memory<class sized_array_memory<1> > vm_
         0 |     vector_memory<class sized_array_memory<1> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<8> >
         0 |   vector_memory<class sized_array_memory<8> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct Range>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Clipboard
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class Vector<unsigned char> _clipboard
       112 |     class vector_memory<class sized_array_memory<1> > vm_
       112 |       vector_memory<class sized_array_memory<1> >::type * l_
       120 |       vector_memory::size_type n_
       124 |       vector_memory::size_type capacity_
       128 |   class Vector<struct Range> _ranges
       128 |     class vector_memory<class sized_array_memory<8> > vm_
       128 |       vector_memory<class sized_array_memory<8> >::type * l_
       136 |       vector_memory::size_type n_
       140 |       vector_memory::size_type capacity_
       144 |   uint32_t _minPacketLength
           | [sizeof=152, dsize=148, align=8,
           |  nvsize=148, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55af6a1c6a10 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<1>'
|-CXXRecordDecl 0x55af6a1c6be8 prev 0x55af6a1c6a10 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55af6a1c6c78 <col:46, col:52> col:46 public
|-TypedefDecl 0x55af6a1c6ca0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55af69c4a370 'int'
|-TypedefDecl 0x55af6a1c8870 <line:13:5, col:31> col:31 type 'typename sized_array_memory<1>::type':'char_array<1>'
| `-ElaboratedType 0x55af6a1c8820 'typename sized_array_memory<1>::type' sugar
|   `-TypedefType 0x55af6a1c7150 'sized_array_memory<1>::type' sugar
|     |-Typedef 0x55af6a1c7050 'type'
|     `-TemplateSpecializationType 0x55af6a1c6fe0 'char_array<1UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55af6a1c6ec0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 1
|       |   `-SubstNonTypeTemplateParmExpr 0x55af6a1c6ea0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55af6a1c6e80 <col:24> 'unsigned long' 1
|       `-RecordType 0x55af6a1c6fc0 'char_array<1>'
|         `-ClassTemplateSpecialization 0x55af6a1c6ee0 'char_array'
|-TypedefDecl 0x55af6a1c8928 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<1> >::type *'
| `-PointerType 0x55af6a1c88f0 'vector_memory<sized_array_memory<1> >::type *'
|   `-TypedefType 0x55af6a1c88d0 'vector_memory<sized_array_memory<1> >::type' sugar
|     |-Typedef 0x55af6a1c8870 'type'
|     `-ElaboratedType 0x55af6a1c8820 'typename sized_array_memory<1>::type' sugar
|       `-TypedefType 0x55af6a1c7150 'sized_array_memory<1>::type' sugar
|         |-Typedef 0x55af6a1c7050 'type'
|         `-TemplateSpecializationType 0x55af6a1c6fe0 'char_array<1UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55af6a1c6ec0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 1
|           |   `-SubstNonTypeTemplateParmExpr 0x55af6a1c6ea0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55af6a1c6e80 <col:24> 'unsigned long' 1
|           `-RecordType 0x55af6a1c6fc0 'char_array<1>'
|             `-ClassTemplateSpecialization 0x55af6a1c6ee0 'char_array'
|-CXXMethodDecl 0x55af6a1c8aa8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<1> >::type *) const' inline
| `-ParmVarDecl 0x55af6a1c89b8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<1> >::type *'
|-CXXConstructorDecl 0x55af6a1c8b98 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55af6a1c8c78 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55af6a1c8f48 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<1> > &)'
| `-ParmVarDecl 0x55af6a1c8e50 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<1> > &'
|-CXXMethodDecl 0x55af6a1c9188 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<1> >::type *)'
| |-ParmVarDecl 0x55af6a1c9000 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55af6a1c9078 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<1> >::type *'
|-CXXMethodDecl 0x55af6a1c9358 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<1> >::type *)'
| |-ParmVarDecl 0x55af6a1c9248 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55af6a1c92c0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<1> >::type *'
|-CXXMethodDecl 0x55af6a1c94b8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<1> >::iterator ()'
|-CXXMethodDecl 0x55af6a1c9588 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<1> >::iterator ()'
|-CXXMethodDecl 0x55af6a1c97d8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<1> >::iterator (vector_memory<sized_array_memory<1> >::iterator, const vector_memory<sized_array_memory<1> >::type *)'
| |-ParmVarDecl 0x55af6a1c9648 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<1> >::iterator':'vector_memory<sized_array_memory<1> >::type *'
| `-ParmVarDecl 0x55af6a1c96c0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<1> >::type *'
|-CXXMethodDecl 0x55af6a1c9a38 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<1> >::iterator (vector_memory<sized_array_memory<1> >::iterator, vector_memory<sized_array_memory<1> >::iterator)'
| |-ParmVarDecl 0x55af6a1c98a8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<1> >::iterator':'vector_memory<sized_array_memory<1> >::type *'
| `-ParmVarDecl 0x55af6a1c9920 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<1> >::iterator':'vector_memory<sized_array_memory<1> >::type *'
|-CXXMethodDecl 0x55af6a1c9bf8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<1> >::type *)' inline
| `-ParmVarDecl 0x55af6a1c9b08 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<1> >::type *'
|-CXXMethodDecl 0x55af6a1c9db8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<1> >::type *)' inline
| `-ParmVarDecl 0x55af6a1c9cc0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<1> >::type *'
|-CXXMethodDecl 0x55af6a1c9e70 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55af6a1c9f20 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55af6a1ca158 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<1> >::type *)'
| |-ParmVarDecl 0x55af6a1c9fd0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55af6a1ca048 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<1> >::type *'
|-CXXMethodDecl 0x55af6a1ca3f8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<1> > &)'
| `-ParmVarDecl 0x55af6a1ca300 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<1> > &'
|-FieldDecl 0x55af6a1ca4c0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<1> >::type *'
|-FieldDecl 0x55af6a1ca510 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55af6a1ca560 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55af6a1c53e8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'unsigned char'
|-CXXRecordDecl 0x55af6a1c55f8 prev 0x55af6a1c53e8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55af6a1c6980 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<unsigned char>::type':'sized_array_memory<1>'
| `-ElaboratedType 0x55af6a1c6930 'typename array_memory<unsigned char>::type' sugar
|   `-TypedefType 0x55af6a1c6910 'conditional<true, sized_array_memory<1>, typed_array_memory<unsigned char> >::type' sugar
|     |-Typedef 0x55af6a1c67c0 'type'
|     `-SubstTemplateTypeParmType 0x55af6a1c65e0 'sized_array_memory<1>' sugar
|       |-TemplateTypeParmType 0x55af69f0fce0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55af69f0fc88 'T'
|       `-RecordType 0x55af6a1c6130 'sized_array_memory<1>'
|         `-ClassTemplateSpecialization 0x55af6a1c6048 'sized_array_memory'
|-FieldDecl 0x55af6a1ca5b0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<unsigned char>::array_memory_type>':'vector_memory<sized_array_memory<1> >' mutable
|-AccessSpecDecl 0x55af6a1ca600 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55af6a1ca638 <line:118:5, col:15> col:15 value_type 'unsigned char':'unsigned char'
| `-SubstTemplateTypeParmType 0x55af6a1c5690 'unsigned char' sugar
|   |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55af69f47978 'T'
|   `-BuiltinType 0x55af69c4a3d0 'unsigned char'
|-TypedefDecl 0x55af6a1ca6c8 <line:119:5, col:16> col:16 reference 'unsigned char &'
| `-LValueReferenceType 0x55af6a1ca690 'unsigned char &'
|   `-SubstTemplateTypeParmType 0x55af6a1c5690 'unsigned char' sugar
|     |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55af69f47978 'T'
|     `-BuiltinType 0x55af69c4a3d0 'unsigned char'
|-TypedefDecl 0x55af6a1ca788 <line:120:5, col:22> col:22 const_reference 'const unsigned char &'
| `-LValueReferenceType 0x55af6a1ca750 'const unsigned char &'
|   `-QualType 0x55af6a1c5691 'const unsigned char' const
|     `-SubstTemplateTypeParmType 0x55af6a1c5690 'unsigned char' sugar
|       |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55af69f47978 'T'
|       `-BuiltinType 0x55af69c4a3d0 'unsigned char'
|-TypedefDecl 0x55af6a1ca818 <line:121:5, col:16> col:16 pointer 'unsigned char *'
| `-PointerType 0x55af6a1ca7e0 'unsigned char *'
|   `-SubstTemplateTypeParmType 0x55af6a1c5690 'unsigned char' sugar
|     |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55af69f47978 'T'
|     `-BuiltinType 0x55af69c4a3d0 'unsigned char'
|-TypedefDecl 0x55af6a1ca8a8 <line:122:5, col:22> col:22 const_pointer 'const unsigned char *'
| `-PointerType 0x55af6a1ca870 'const unsigned char *'
|   `-QualType 0x55af6a1c5691 'const unsigned char' const
|     `-SubstTemplateTypeParmType 0x55af6a1c5690 'unsigned char' sugar
|       |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55af69f47978 'T'
|       `-BuiltinType 0x55af69c4a3d0 'unsigned char'
|-TypedefDecl 0x55af6a1cb6c0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<unsigned char>::type':'unsigned char'
| `-ElaboratedType 0x55af6a1cb670 'typename fast_argument<unsigned char>::type' sugar
|   `-TypedefType 0x55af6a1cb650 'fast_argument<unsigned char, false>::type' sugar
|     |-Typedef 0x55af6a1cb5e0 'type'
|     `-SubstTemplateTypeParmType 0x55af6a1cb3a0 'unsigned char' sugar
|       |-TemplateTypeParmType 0x55af69f1aae0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55af69f1aa90 'T'
|       `-BuiltinType 0x55af69c4a3d0 'unsigned char'
|-TypedefDecl 0x55af6a1cb728 <line:126:5, col:22> col:22 const_access_type 'const unsigned char &'
| `-LValueReferenceType 0x55af6a1ca750 'const unsigned char &'
|   `-QualType 0x55af6a1c5691 'const unsigned char' const
|     `-SubstTemplateTypeParmType 0x55af6a1c5690 'unsigned char' sugar
|       |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55af69f47978 'T'
|       `-BuiltinType 0x55af69c4a3d0 'unsigned char'
|-TypedefDecl 0x55af6a1cb780 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55af69c4a370 'int'
|-TypedefDecl 0x55af6a1cb7e8 <line:130:5, col:16> col:16 iterator 'unsigned char *'
| `-PointerType 0x55af6a1ca7e0 'unsigned char *'
|   `-SubstTemplateTypeParmType 0x55af6a1c5690 'unsigned char' sugar
|     |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55af69f47978 'T'
|     `-BuiltinType 0x55af69c4a3d0 'unsigned char'
|-TypedefDecl 0x55af6a1cb850 <line:131:5, col:22> col:22 const_iterator 'const unsigned char *'
| `-PointerType 0x55af6a1ca870 'const unsigned char *'
|   `-QualType 0x55af6a1c5691 'const unsigned char' const
|     `-SubstTemplateTypeParmType 0x55af6a1c5690 'unsigned char' sugar
|       |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55af69f47978 'T'
|       `-BuiltinType 0x55af69c4a3d0 'unsigned char'
|-EnumDecl 0x55af6a1cb8a8 <line:134:5> col:5
| `-EnumConstantDecl 0x55af6a1cb9a0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<unsigned char>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55af6a1cb980 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55af69f49058 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55af69f49030 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55af69f49010 <col:40> 'int' 1
|-CXXConstructorDecl 0x55af6a1cba28 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x55af6a1cbc78 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<unsigned char>::value_argument_type)' inline
| |-ParmVarDecl 0x55af6a1cbae0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55af6a1cbb80 <col:41, col:61> col:61 v 'Vector<unsigned char>::value_argument_type':'unsigned char'
|-CXXConstructorDecl 0x55af6a1cbf38 <line:139:5, col:37> col:12 Vector 'void (const Vector<unsigned char> &)' inline
| `-ParmVarDecl 0x55af6a1cbe20 <col:19, col:36> col:36 x 'const Vector<unsigned char> &'
|-CXXConstructorDecl 0x55af6a1cc1f8 <line:141:5, col:32> col:12 Vector 'void (Vector<unsigned char> &&)' inline
| `-ParmVarDecl 0x55af6a1cc0e0 <col:19, col:31> col:31 x 'Vector<unsigned char> &&'
|-CXXMethodDecl 0x55af6a1cc540 <line:144:5, col:51> col:23 operator= 'Vector<unsigned char> &(const Vector<unsigned char> &)' inline
| `-ParmVarDecl 0x55af6a1cc420 <col:33, col:50> col:50 x 'const Vector<unsigned char> &'
|-CXXMethodDecl 0x55af6a1cc850 <line:146:5, col:46> col:23 operator= 'Vector<unsigned char> &(Vector<unsigned char> &&)' inline
| `-ParmVarDecl 0x55af6a1cc730 <col:33, col:45> col:45 x 'Vector<unsigned char> &&'
|-CXXMethodDecl 0x55af6a1ccb40 <line:148:5, col:70> col:23 assign 'Vector<unsigned char> &(Vector::size_type, Vector<unsigned char>::value_argument_type)' inline
| |-ParmVarDecl 0x55af6a1cc988 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55af6a1cca00 <col:43, col:69> col:63 v 'Vector<unsigned char>::value_argument_type':'unsigned char'
|-CXXMethodDecl 0x55af6a1ccc68 <line:150:5, col:55> col:49 begin 'Vector<unsigned char>::iterator ()'
| |-NoInlineAttr 0x55af6a1ccd48 <col:20> Inherited
| `-OptimizeNoneAttr 0x55af6a1ccda0 <col:30> Inherited
|-CXXMethodDecl 0x55af6a1ccde8 <line:151:5, col:53> col:49 end 'Vector<unsigned char>::iterator ()'
| |-NoInlineAttr 0x55af6a1cce98 <col:20> Inherited
| `-OptimizeNoneAttr 0x55af6a1ccef0 <col:30> Inherited
|-CXXMethodDecl 0x55af6a1ccf88 <line:152:5, col:63> col:55 begin 'Vector<unsigned char>::const_iterator () const'
| |-NoInlineAttr 0x55af6a1cd038 <col:20> Inherited
| `-OptimizeNoneAttr 0x55af6a1cd090 <col:30> Inherited
|-CXXMethodDecl 0x55af6a1cd0d8 <line:153:5, col:61> col:55 end 'Vector<unsigned char>::const_iterator () const'
| |-NoInlineAttr 0x55af6a1cd188 <col:20> Inherited
| `-OptimizeNoneAttr 0x55af6a1cd1e0 <col:30> Inherited
|-CXXMethodDecl 0x55af6a1cd228 <line:154:5, col:64> col:55 cbegin 'Vector<unsigned char>::const_iterator () const'
| |-NoInlineAttr 0x55af6a1cd2d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55af6a1cd330 <col:30> Inherited
|-CXXMethodDecl 0x55af6a1cd378 <line:155:5, col:62> col:55 cend 'Vector<unsigned char>::const_iterator () const'
| |-NoInlineAttr 0x55af6a1cd428 <col:20> Inherited
| `-OptimizeNoneAttr 0x55af6a1cd480 <col:30> Inherited
|-CXXMethodDecl 0x55af6a1cd4a8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55af6a1cd558 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55af6a1cd608 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55af6a1cd7c8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<unsigned char>::value_argument_type)' inline
| |-ParmVarDecl 0x55af6a1cd6b8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55af6a1cd730 <col:37, col:63> col:57 v 'Vector<unsigned char>::value_argument_type':'unsigned char'
|-CXXMethodDecl 0x55af6a1cd918 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55af6a1cd888 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55af6a1cdac8 <line:163:5, col:65> col:43 operator[] 'unsigned char &(Vector::size_type)'
| |-ParmVarDecl 0x55af6a1cd9d0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55af6a1cdb80 <col:20>
| `-OptimizeNoneAttr 0x55af6a1cdbd8 <col:30>
|-CXXMethodDecl 0x55af6a1cdcf8 <line:164:5, col:73> col:49 operator[] 'const unsigned char &(Vector::size_type) const'
| |-ParmVarDecl 0x55af6a1cdc00 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55af6a1cddb0 <col:20>
| `-OptimizeNoneAttr 0x55af6a1cde08 <col:30>
|-CXXMethodDecl 0x55af6a1cdec0 <line:165:5, col:29> col:15 at 'unsigned char &(Vector::size_type)' inline
| `-ParmVarDecl 0x55af6a1cde30 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55af6a1ce008 <line:166:5, col:37> col:21 at 'const unsigned char &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55af6a1cdf78 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55af6a1ce138 <line:167:5, col:21> col:15 front 'unsigned char &()' inline
|-CXXMethodDecl 0x55af6a1ce268 <line:168:5, col:29> col:21 front 'const unsigned char &() const' inline
|-CXXMethodDecl 0x55af6a1ce338 <line:169:5, col:20> col:15 back 'unsigned char &()' inline
|-CXXMethodDecl 0x55af6a1ce408 <line:170:5, col:28> col:21 back 'const unsigned char &() const' inline
|-CXXMethodDecl 0x55af6a1ce548 <line:172:5, col:39> col:15 unchecked_at 'unsigned char &(Vector::size_type)' inline
| `-ParmVarDecl 0x55af6a1ce4b8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55af6a1ce690 <line:173:5, col:47> col:21 unchecked_at 'const unsigned char &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55af6a1ce600 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55af6a1ce7d8 <line:174:5, col:59> col:15 at_u 'unsigned char &(Vector::size_type)' inline
| |-ParmVarDecl 0x55af6a1ce748 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55af6a1ce890 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55af6a1ce990 <line:175:5, col:71> col:21 at_u 'const unsigned char &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55af6a1ce900 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55af6a1cea48 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55af6a1ceb08 <line:177:5, col:20> col:15 data 'unsigned char *()' inline
|-CXXMethodDecl 0x55af6a1cec08 <line:178:5, col:28> col:21 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55af6a1ced88 <line:180:5, col:48> col:17 push_back 'void (Vector<unsigned char>::value_argument_type)' inline
| `-ParmVarDecl 0x55af6a1cecc8 <col:27, col:47> col:47 v 'Vector<unsigned char>::value_argument_type':'unsigned char'
|-FunctionTemplateDecl 0x55af6a1cf578 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55af6a1cee40 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<unsigned char>':'fast_argument<unsigned char, false>'
| `-CXXMethodDecl 0x55af6a1cf4d8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (unsigned char &&)' inline
|   `-ParmVarDecl 0x55af6a1cf3d8 <col:58, col:62> col:62 v 'unsigned char &&'
|-CXXMethodDecl 0x55af6a1cf658 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55af6a1cf7a8 <line:186:5, col:49> col:17 push_front 'void (Vector<unsigned char>::value_argument_type)' inline
| `-ParmVarDecl 0x55af6a1cf718 <col:28, col:48> col:48 v 'Vector<unsigned char>::value_argument_type':'unsigned char'
|-CXXMethodDecl 0x55af6a1cf860 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55af6a1cfaa8 <line:189:5, col:62> col:21 insert 'Vector<unsigned char>::iterator (Vector<unsigned char>::iterator, Vector<unsigned char>::value_argument_type)' inline
| |-ParmVarDecl 0x55af6a1cf920 <col:28, col:37> col:37 it 'Vector<unsigned char>::iterator':'unsigned char *'
| `-ParmVarDecl 0x55af6a1cf998 <col:41, col:61> col:61 v 'Vector<unsigned char>::value_argument_type':'unsigned char'
|-CXXMethodDecl 0x55af6a1cfc68 <line:190:5, col:38> col:21 erase 'Vector<unsigned char>::iterator (Vector<unsigned char>::iterator)' inline
| `-ParmVarDecl 0x55af6a1cfb78 <col:27, col:36> col:36 it 'Vector<unsigned char>::iterator':'unsigned char *'
|-CXXMethodDecl 0x55af6a1cfeb8 <line:191:5, col:49> col:21 erase 'Vector<unsigned char>::iterator (Vector<unsigned char>::iterator, Vector<unsigned char>::iterator)' inline
| |-ParmVarDecl 0x55af6a1cfd30 <col:27, col:36> col:36 a 'Vector<unsigned char>::iterator':'unsigned char *'
| `-ParmVarDecl 0x55af6a1cfda8 <col:39, col:48> col:48 b 'Vector<unsigned char>::iterator':'unsigned char *'
|-CXXMethodDecl 0x55af6a1cff78 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x55af6a1d01d8 <line:195:5, col:34> col:17 swap 'void (Vector<unsigned char> &)' inline
| `-ParmVarDecl 0x55af6a1d00e0 <col:22, col:33> col:33 x 'Vector<unsigned char> &'
`-CXXDestructorDecl 0x55af6a1d02a8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x55af6a2a83f0 <col:29>

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55af6a1d1890 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<8>'
|-CXXRecordDecl 0x55af6a1d1a68 prev 0x55af6a1d1890 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55af6a1d1af8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55af6a1d1b20 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55af69c4a370 'int'
|-TypedefDecl 0x55af6a1d3fc0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<8>::type':'char_array<8>'
| `-ElaboratedType 0x55af6a1d3f70 'typename sized_array_memory<8>::type' sugar
|   `-TypedefType 0x55af6a1d1fd0 'sized_array_memory<8>::type' sugar
|     |-Typedef 0x55af6a1d1ed0 'type'
|     `-TemplateSpecializationType 0x55af6a1d1e60 'char_array<8UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55af6a1d1d40 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|       |   `-SubstNonTypeTemplateParmExpr 0x55af6a1d1d20 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55af6a1d1d00 <col:24> 'unsigned long' 8
|       `-RecordType 0x55af6a1d1e40 'char_array<8>'
|         `-ClassTemplateSpecialization 0x55af6a1d1d60 'char_array'
|-TypedefDecl 0x55af6a1d4078 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<8> >::type *'
| `-PointerType 0x55af6a1d4040 'vector_memory<sized_array_memory<8> >::type *'
|   `-TypedefType 0x55af6a1d4020 'vector_memory<sized_array_memory<8> >::type' sugar
|     |-Typedef 0x55af6a1d3fc0 'type'
|     `-ElaboratedType 0x55af6a1d3f70 'typename sized_array_memory<8>::type' sugar
|       `-TypedefType 0x55af6a1d1fd0 'sized_array_memory<8>::type' sugar
|         |-Typedef 0x55af6a1d1ed0 'type'
|         `-TemplateSpecializationType 0x55af6a1d1e60 'char_array<8UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55af6a1d1d40 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|           |   `-SubstNonTypeTemplateParmExpr 0x55af6a1d1d20 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55af6a1d1d00 <col:24> 'unsigned long' 8
|           `-RecordType 0x55af6a1d1e40 'char_array<8>'
|             `-ClassTemplateSpecialization 0x55af6a1d1d60 'char_array'
|-CXXMethodDecl 0x55af6a1d41f8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<8> >::type *) const' inline
| `-ParmVarDecl 0x55af6a1d4108 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXConstructorDecl 0x55af6a1d42e8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55af6a1d43c8 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55af6a1d4698 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x55af6a1d45a0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<8> > &'
|-CXXMethodDecl 0x55af6a1d48d8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x55af6a1d4750 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55af6a1d47c8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55af6a1d4aa8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x55af6a1d4998 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55af6a1d4a10 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55af6a1d4c08 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x55af6a1d4cd8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x55af6a1d4f28 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x55af6a1d4d98 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x55af6a1d4e10 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55af6a1d5188 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, vector_memory<sized_array_memory<8> >::iterator)'
| |-ParmVarDecl 0x55af6a1d4ff8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x55af6a1d5070 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55af6a1d5348 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x55af6a1d5258 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55af6a1d5508 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x55af6a1d5410 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55af6a1d55c0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55af6a1d5670 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55af6a1d58a8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x55af6a1d5720 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55af6a1d5798 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55af6a1d5b48 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x55af6a1d5a50 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<8> > &'
|-FieldDecl 0x55af6a1d5c10 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<8> >::type *'
|-FieldDecl 0x55af6a1d5c60 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55af6a1d5cb0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array.2*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array.2*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55af6a1d03f0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Range'
|-CXXRecordDecl 0x55af6a1d05f8 prev 0x55af6a1d03f0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55af6a1d1800 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<Range>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x55af6a1d17b0 'typename array_memory<Range>::type' sugar
|   `-TypedefType 0x55af6a1d1790 'conditional<true, sized_array_memory<8>, typed_array_memory<Range> >::type' sugar
|     |-Typedef 0x55af6a1d1640 'type'
|     `-SubstTemplateTypeParmType 0x55af6a1d1460 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x55af69f0fce0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55af69f0fc88 'T'
|       `-RecordType 0x55af6a1d0fb0 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x55af6a1d0ec8 'sized_array_memory'
|-FieldDecl 0x55af6a1d5d00 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Range>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x55af6a1d5d50 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55af6a1d5d88 <line:118:5, col:15> col:15 value_type 'Range':'Range'
| `-SubstTemplateTypeParmType 0x55af6a1d0690 'Range' sugar
|   |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55af69f47978 'T'
|   `-RecordType 0x55af6a1c4480 'Range'
|     `-CXXRecord 0x55af6a1c43e8 'Range'
|-TypedefDecl 0x55af6a1d5e48 <line:119:5, col:16> col:16 reference 'Range &'
| `-LValueReferenceType 0x55af6a1d5e10 'Range &'
|   `-SubstTemplateTypeParmType 0x55af6a1d0690 'Range' sugar
|     |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55af69f47978 'T'
|     `-RecordType 0x55af6a1c4480 'Range'
|       `-CXXRecord 0x55af6a1c43e8 'Range'
|-TypedefDecl 0x55af6a1d5f08 <line:120:5, col:22> col:22 const_reference 'const Range &'
| `-LValueReferenceType 0x55af6a1d5ed0 'const Range &'
|   `-QualType 0x55af6a1d0691 'const Range' const
|     `-SubstTemplateTypeParmType 0x55af6a1d0690 'Range' sugar
|       |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55af69f47978 'T'
|       `-RecordType 0x55af6a1c4480 'Range'
|         `-CXXRecord 0x55af6a1c43e8 'Range'
|-TypedefDecl 0x55af6a1d5fc8 <line:121:5, col:16> col:16 pointer 'Range *'
| `-PointerType 0x55af6a1d5f90 'Range *'
|   `-SubstTemplateTypeParmType 0x55af6a1d0690 'Range' sugar
|     |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55af69f47978 'T'
|     `-RecordType 0x55af6a1c4480 'Range'
|       `-CXXRecord 0x55af6a1c43e8 'Range'
|-TypedefDecl 0x55af6a1d6088 <line:122:5, col:22> col:22 const_pointer 'const Range *'
| `-PointerType 0x55af6a1d6050 'const Range *'
|   `-QualType 0x55af6a1d0691 'const Range' const
|     `-SubstTemplateTypeParmType 0x55af6a1d0690 'Range' sugar
|       |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55af69f47978 'T'
|       `-RecordType 0x55af6a1c4480 'Range'
|         `-CXXRecord 0x55af6a1c43e8 'Range'
|-TypedefDecl 0x55af6a1d6c60 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<Range>::type':'Range'
| `-ElaboratedType 0x55af6a1d6c10 'typename fast_argument<Range>::type' sugar
|   `-TypedefType 0x55af6a1d6bf0 'fast_argument<Range, false>::type' sugar
|     |-Typedef 0x55af6a1d6b80 'type'
|     `-SubstTemplateTypeParmType 0x55af6a1d6940 'Range' sugar
|       |-TemplateTypeParmType 0x55af69f1aae0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55af69f1aa90 'T'
|       `-RecordType 0x55af6a1c4480 'Range'
|         `-CXXRecord 0x55af6a1c43e8 'Range'
|-TypedefDecl 0x55af6a1d6cc8 <line:126:5, col:22> col:22 const_access_type 'const Range &'
| `-LValueReferenceType 0x55af6a1d5ed0 'const Range &'
|   `-QualType 0x55af6a1d0691 'const Range' const
|     `-SubstTemplateTypeParmType 0x55af6a1d0690 'Range' sugar
|       |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55af69f47978 'T'
|       `-RecordType 0x55af6a1c4480 'Range'
|         `-CXXRecord 0x55af6a1c43e8 'Range'
|-TypedefDecl 0x55af6a1d6d20 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55af69c4a370 'int'
|-TypedefDecl 0x55af6a1d6d88 <line:130:5, col:16> col:16 iterator 'Range *'
| `-PointerType 0x55af6a1d5f90 'Range *'
|   `-SubstTemplateTypeParmType 0x55af6a1d0690 'Range' sugar
|     |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55af69f47978 'T'
|     `-RecordType 0x55af6a1c4480 'Range'
|       `-CXXRecord 0x55af6a1c43e8 'Range'
|-TypedefDecl 0x55af6a1d6df0 <line:131:5, col:22> col:22 const_iterator 'const Range *'
| `-PointerType 0x55af6a1d6050 'const Range *'
|   `-QualType 0x55af6a1d0691 'const Range' const
|     `-SubstTemplateTypeParmType 0x55af6a1d0690 'Range' sugar
|       |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55af69f47978 'T'
|       `-RecordType 0x55af6a1c4480 'Range'
|         `-CXXRecord 0x55af6a1c43e8 'Range'
|-EnumDecl 0x55af6a1d6e48 <line:134:5> col:5
| `-EnumConstantDecl 0x55af6a1d6f40 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Range>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55af6a1d6f20 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55af69f49058 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55af69f49030 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55af69f49010 <col:40> 'int' 1
|-CXXConstructorDecl 0x55af6a1d6fc8 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x55af6a1d7258 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Range>::value_argument_type)' inline
| |-ParmVarDecl 0x55af6a1d7080 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55af6a1d7120 <col:41, col:61> col:61 v 'Vector<Range>::value_argument_type':'Range'
|-CXXConstructorDecl 0x55af6a1d7518 <line:139:5, col:37> col:12 Vector 'void (const Vector<Range> &)' inline
| `-ParmVarDecl 0x55af6a1d7400 <col:19, col:36> col:36 x 'const Vector<Range> &'
|-CXXConstructorDecl 0x55af6a1d77d8 <line:141:5, col:32> col:12 Vector 'void (Vector<Range> &&)' inline
| `-ParmVarDecl 0x55af6a1d76c0 <col:19, col:31> col:31 x 'Vector<Range> &&'
|-CXXMethodDecl 0x55af6a1d7b20 <line:144:5, col:51> col:23 operator= 'Vector<Range> &(const Vector<Range> &)' inline
| `-ParmVarDecl 0x55af6a1d7a00 <col:33, col:50> col:50 x 'const Vector<Range> &'
|-CXXMethodDecl 0x55af6a1d7e30 <line:146:5, col:46> col:23 operator= 'Vector<Range> &(Vector<Range> &&)' inline
| `-ParmVarDecl 0x55af6a1d7d10 <col:33, col:45> col:45 x 'Vector<Range> &&'
|-CXXMethodDecl 0x55af6a1d8120 <line:148:5, col:70> col:23 assign 'Vector<Range> &(Vector::size_type, Vector<Range>::value_argument_type)' inline
| |-ParmVarDecl 0x55af6a1d7f68 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55af6a1d7fe0 <col:43, col:69> col:63 v 'Vector<Range>::value_argument_type':'Range'
|-CXXMethodDecl 0x55af6a1d8278 <line:150:5, col:55> col:49 begin 'Vector<Range>::iterator ()'
| |-NoInlineAttr 0x55af6a1d8358 <col:20> Inherited
| `-OptimizeNoneAttr 0x55af6a1d83b0 <col:30> Inherited
|-CXXMethodDecl 0x55af6a1d83f8 <line:151:5, col:53> col:49 end 'Vector<Range>::iterator ()'
| |-NoInlineAttr 0x55af6a1d84a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55af6a1d8500 <col:30> Inherited
|-CXXMethodDecl 0x55af6a1d85c8 <line:152:5, col:63> col:55 begin 'Vector<Range>::const_iterator () const'
| |-NoInlineAttr 0x55af6a1d8678 <col:20> Inherited
| `-OptimizeNoneAttr 0x55af6a1d86d0 <col:30> Inherited
|-CXXMethodDecl 0x55af6a1d8718 <line:153:5, col:61> col:55 end 'Vector<Range>::const_iterator () const'
| |-NoInlineAttr 0x55af6a1d87c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55af6a1d8820 <col:30> Inherited
|-CXXMethodDecl 0x55af6a1d8868 <line:154:5, col:64> col:55 cbegin 'Vector<Range>::const_iterator () const'
| |-NoInlineAttr 0x55af6a1d8918 <col:20> Inherited
| `-OptimizeNoneAttr 0x55af6a1d8970 <col:30> Inherited
|-CXXMethodDecl 0x55af6a1d89b8 <line:155:5, col:62> col:55 cend 'Vector<Range>::const_iterator () const'
| |-NoInlineAttr 0x55af6a1d8a68 <col:20> Inherited
| `-OptimizeNoneAttr 0x55af6a1d8ac0 <col:30> Inherited
|-CXXMethodDecl 0x55af6a1d8ae8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55af6a1d8b98 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55af6a1d8c48 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55af6a1d8e08 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Range>::value_argument_type)' inline
| |-ParmVarDecl 0x55af6a1d8cf8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55af6a1d8d70 <col:37, col:63> col:57 v 'Vector<Range>::value_argument_type':'Range'
|-CXXMethodDecl 0x55af6a1d8f58 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55af6a1d8ec8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55af6a1d9108 <line:163:5, col:65> col:43 operator[] 'Range &(Vector::size_type)'
| |-ParmVarDecl 0x55af6a1d9010 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55af6a1d91c0 <col:20>
| `-OptimizeNoneAttr 0x55af6a1d9218 <col:30>
|-CXXMethodDecl 0x55af6a1d9338 <line:164:5, col:73> col:49 operator[] 'const Range &(Vector::size_type) const'
| |-ParmVarDecl 0x55af6a1d9240 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55af6a1d93f0 <col:20>
| `-OptimizeNoneAttr 0x55af6a1d9448 <col:30>
|-CXXMethodDecl 0x55af6a1d9500 <line:165:5, col:29> col:15 at 'Range &(Vector::size_type)' inline
| `-ParmVarDecl 0x55af6a1d9470 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55af6a1d9648 <line:166:5, col:37> col:21 at 'const Range &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55af6a1d95b8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55af6a1d9778 <line:167:5, col:21> col:15 front 'Range &()' inline
|-CXXMethodDecl 0x55af6a1d98a8 <line:168:5, col:29> col:21 front 'const Range &() const' inline
|-CXXMethodDecl 0x55af6a1d9978 <line:169:5, col:20> col:15 back 'Range &()' inline
|-CXXMethodDecl 0x55af6a1d9a48 <line:170:5, col:28> col:21 back 'const Range &() const' inline
|-CXXMethodDecl 0x55af6a1d9b88 <line:172:5, col:39> col:15 unchecked_at 'Range &(Vector::size_type)' inline
| `-ParmVarDecl 0x55af6a1d9af8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55af6a1d9cd0 <line:173:5, col:47> col:21 unchecked_at 'const Range &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55af6a1d9c40 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55af6a1d9e18 <line:174:5, col:59> col:15 at_u 'Range &(Vector::size_type)' inline
| |-ParmVarDecl 0x55af6a1d9d88 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55af6a1d9ed0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55af6a1d9fd0 <line:175:5, col:71> col:21 at_u 'const Range &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55af6a1d9f40 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55af6a1da088 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55af6a1da148 <line:177:5, col:20> col:15 data 'Range *()' inline
|-CXXMethodDecl 0x55af6a1da248 <line:178:5, col:28> col:21 data 'const Range *() const' inline
|-CXXMethodDecl 0x55af6a1da3f8 <line:180:5, col:48> col:17 push_back 'void (Vector<Range>::value_argument_type)' inline
| `-ParmVarDecl 0x55af6a1da308 <col:27, col:47> col:47 v 'Vector<Range>::value_argument_type':'Range'
|-FunctionTemplateDecl 0x55af6a1dabb8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55af6a1da4b0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Range>':'fast_argument<Range, false>'
| `-CXXMethodDecl 0x55af6a1dab18 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Range &&)' inline
|   `-ParmVarDecl 0x55af6a1daa18 <col:58, col:62> col:62 v 'Range &&'
|-CXXMethodDecl 0x55af6a1dac98 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55af6a1dade8 <line:186:5, col:49> col:17 push_front 'void (Vector<Range>::value_argument_type)' inline
| `-ParmVarDecl 0x55af6a1dad58 <col:28, col:48> col:48 v 'Vector<Range>::value_argument_type':'Range'
|-CXXMethodDecl 0x55af6a1daea0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55af6a1db0e8 <line:189:5, col:62> col:21 insert 'Vector<Range>::iterator (Vector<Range>::iterator, Vector<Range>::value_argument_type)' inline
| |-ParmVarDecl 0x55af6a1daf60 <col:28, col:37> col:37 it 'Vector<Range>::iterator':'Range *'
| `-ParmVarDecl 0x55af6a1dafd8 <col:41, col:61> col:61 v 'Vector<Range>::value_argument_type':'Range'
|-CXXMethodDecl 0x55af6a1db2a8 <line:190:5, col:38> col:21 erase 'Vector<Range>::iterator (Vector<Range>::iterator)' inline
| `-ParmVarDecl 0x55af6a1db1b8 <col:27, col:36> col:36 it 'Vector<Range>::iterator':'Range *'
|-CXXMethodDecl 0x55af6a1db4f8 <line:191:5, col:49> col:21 erase 'Vector<Range>::iterator (Vector<Range>::iterator, Vector<Range>::iterator)' inline
| |-ParmVarDecl 0x55af6a1db370 <col:27, col:36> col:36 a 'Vector<Range>::iterator':'Range *'
| `-ParmVarDecl 0x55af6a1db3e8 <col:39, col:48> col:48 b 'Vector<Range>::iterator':'Range *'
|-CXXMethodDecl 0x55af6a1db5b8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x55af6a1db818 <line:195:5, col:34> col:17 swap 'void (Vector<Range> &)' inline
| `-ParmVarDecl 0x55af6a1db720 <col:22, col:33> col:33 x 'Vector<Range> &'
`-CXXDestructorDecl 0x55af6a1dc890 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x55af6a2a8400 <col:29>

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55af6a1c4670 <../elements/standard/clipboard.hh:46:1, line:68:1> line:46:7 class Clipboard definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55af6a1c47c8 <col:1, col:7> col:7 implicit referenced class Clipboard
|-AccessSpecDecl 0x55af6a1c4858 <line:47:1, col:7> col:1 public
|-CXXConstructorDecl 0x55af6a1c48e0 <line:48:5, col:15> col:5 Clipboard 'void ()'
|-CXXMethodDecl 0x55af6a1c49e0 <line:50:5, col:58> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x55af6a1ad138 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55af6a1dd480 <col:36, col:58>
|   `-ReturnStmt 0x55af6a1dd470 <col:38, col:45>
|     `-ImplicitCastExpr 0x55af6a1dd458 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55af6a1dd430 <col:45> 'const char [10]' lvalue "Clipboard"
|-CXXMethodDecl 0x55af6a1c4aa8 <line:51:5, col:46> col:17 flags 'const char *() const'
| |-Overrides: [ 0x55af6a1adb10 Element::flags 'const char *() const' ]
| `-CompoundStmt 0x55af6a1dd4e0 <col:31, col:46>
|   `-ReturnStmt 0x55af6a1dd4d0 <col:33, col:40>
|     `-ImplicitCastExpr 0x55af6a1dd4b8 <col:40> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55af6a1dd498 <col:40> 'const char [3]' lvalue "S0"
|-CXXMethodDecl 0x55af6a1c4b70 <line:52:5, col:51> col:17 flow_code 'const char *() const'
| |-Overrides: [ 0x55af6a1ad9c0 Element::flow_code 'const char *() const' ]
| `-CompoundStmt 0x55af6a1dd540 <col:35, col:51>
|   `-ReturnStmt 0x55af6a1dd530 <col:37, col:44>
|     `-ImplicitCastExpr 0x55af6a1dd518 <col:44> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55af6a1dd4f8 <col:44> 'const char [4]' lvalue "#/#"
|-CXXMethodDecl 0x55af6a1c4c38 <line:53:5, col:52> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x55af6a1ad200 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55af6a1dd5a0 <col:36, col:52>
|   `-ReturnStmt 0x55af6a1dd590 <col:38, col:45>
|     `-ImplicitCastExpr 0x55af6a1dd578 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55af6a1dd558 <col:45> 'const char [4]' lvalue "2/2"
|-CXXMethodDecl 0x55af6a1c4f10 <line:55:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55af6a1ae9d0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55af6a1c4dc0 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x55af6a1c4e38 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x55af6a1c4fe0 <line:56:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x55af6a1b1420 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x55af6a1dd5d8 <col:39, col:54>
|   `-ReturnStmt 0x55af6a1dd5c8 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x55af6a1dd5b8 <col:48> 'bool' true
|-CXXMethodDecl 0x55af6a1c5128 <line:58:5, col:26> col:13 pull 'Packet *(int)'
| |-Overrides: [ 0x55af6a1ac138 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x55af6a1c5098 <col:18, col:22> col:22 port 'int'
|-CXXMethodDecl 0x55af6a1c52f8 <line:59:5, col:34> col:10 push 'void (int, Packet *)'
| |-Overrides: [ 0x55af6a1abfa8 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x55af6a1c51e8 <col:15, col:19> col:19 port 'int'
| `-ParmVarDecl 0x55af6a1c5260 <col:25, col:33> col:33 p 'Packet *'
|-AccessSpecDecl 0x55af6a1c53a8 <line:61:1, col:8> col:1 private
|-FieldDecl 0x55af6a1d0390 <line:62:5, col:27> col:27 _clipboard 'Vector<unsigned char>':'Vector<unsigned char>'
|-FieldDecl 0x55af6a1dc970 <line:63:5, col:19> col:19 _ranges 'Vector<Range>':'Vector<Range>'
|-FieldDecl 0x55af6a1dc9d0 <line:64:5, col:14> col:14 _minPacketLength 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55af6a1dcac0 <line:66:5, col:24> col:10 copy 'void (Packet *)'
| `-ParmVarDecl 0x55af6a1dca30 <col:15, col:23> col:23 p 'Packet *'
|-CXXMethodDecl 0x55af6a1dcc08 <line:67:5, col:28> col:13 paste 'Packet *(Packet *)'
| `-ParmVarDecl 0x55af6a1dcb78 <col:19, col:27> col:27 p 'Packet *'
|-CXXConstructorDecl 0x55af6a1dccd8 <line:46:7> col:7 implicit Clipboard 'void (const Clipboard &)' inline default_delete noexcept-unevaluated 0x55af6a1dccd8
| `-ParmVarDecl 0x55af6a1dcde8 <col:7> col:7 'const Clipboard &'
|-CXXConstructorDecl 0x55af6a1dce88 <col:7> col:7 implicit Clipboard 'void (Clipboard &&)' inline default_delete noexcept-unevaluated 0x55af6a1dce88
| `-ParmVarDecl 0x55af6a1dcf98 <col:7> col:7 'Clipboard &&'
|-CXXMethodDecl 0x55af6a1dd038 <col:7> col:7 implicit operator= 'Clipboard &(const Clipboard &)' inline default_delete noexcept-unevaluated 0x55af6a1dd038
| `-ParmVarDecl 0x55af6a1dd148 <col:7> col:7 'const Clipboard &'
|-CXXMethodDecl 0x55af6a1dd1b8 <col:7> col:7 implicit operator= 'Clipboard &(Clipboard &&)' inline default_delete noexcept-unevaluated 0x55af6a1dd1b8
| `-ParmVarDecl 0x55af6a1dd2c8 <col:7> col:7 'Clipboard &&'
`-CXXDestructorDecl 0x55af6a1dd350 <col:7> col:7 implicit ~Clipboard 'void ()' inline default noexcept-unevaluated 0x55af6a1dd350
  `-Overrides: [ 0x55af6a1abcd8 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.Clipboard = type <{ %class.Element.base, [4 x i8], %class.Vector, %class.Vector.0, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Clipboard.base = type <{ %class.Element.base, [4 x i8], %class.Vector, %class.Vector.0, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55af69f7f8a0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55af69f7f9b8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55af69f7fa58 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55af69f7fab8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55af69f7fb18 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55af69f7fbc8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55af69f7fed0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55af69f7ffe8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55af69f80090 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55af69f800f8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55af69f80188 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55af69f86220 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55af69f86658 <col:12>
|-CXXConstructorDecl 0x55af69f86328 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55af69f86438 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55af69f80090 'data' 'const char *'
| | `-ImplicitCastExpr 0x55af69f88be0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55af69f88bb0 <col:12> 'const char *const' lvalue .data 0x55af69f80090
| |     `-DeclRefExpr 0x55af69f88b90 <col:12> 'const String::rep_t' lvalue ParmVar 0x55af69f86438 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55af69f800f8 'length' 'int'
| | `-ImplicitCastExpr 0x55af69f88c70 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55af69f88c40 <col:12> 'const int' lvalue .length 0x55af69f800f8
| |     `-DeclRefExpr 0x55af69f88c20 <col:12> 'const String::rep_t' lvalue ParmVar 0x55af69f86438 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55af69f80188 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55af69f88d00 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55af69f88cd0 <col:12> 'String::memo_t *const' lvalue .memo 0x55af69f80188
| |     `-DeclRefExpr 0x55af69f88cb0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55af69f86438 '' 'const String::rep_t &'
| `-CompoundStmt 0x55af69f88d58 <col:12>
|-CXXConstructorDecl 0x55af69f864d8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55af69f864d8
| `-ParmVarDecl 0x55af69f865e8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55af69f8bb40 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55af69f97558 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55af69f97668 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55af69f97b80 <col:12>
|   |-BinaryOperator 0x55af69f97998 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55af69f97950 <col:12> 'const char *' lvalue ->data 0x55af69f80090
|   | | `-CXXThisExpr 0x55af69f97940 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55af69f97980 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55af69f97910 <col:12> 'const char *const' lvalue .data 0x55af69f80090
|   |     `-DeclRefExpr 0x55af69f978f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55af69f97668 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55af69f97a60 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55af69f97a18 <col:12> 'int' lvalue ->length 0x55af69f800f8
|   | | `-CXXThisExpr 0x55af69f97a08 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55af69f97a48 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55af69f979d8 <col:12> 'const int' lvalue .length 0x55af69f800f8
|   |     `-DeclRefExpr 0x55af69f979b8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55af69f97668 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55af69f97b28 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55af69f97ae0 <col:12> 'String::memo_t *' lvalue ->memo 0x55af69f80188
|   | | `-CXXThisExpr 0x55af69f97ad0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55af69f97b10 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55af69f97aa0 <col:12> 'String::memo_t *const' lvalue .memo 0x55af69f80188
|   |     `-DeclRefExpr 0x55af69f97a80 <col:12> 'const String::rep_t' lvalue ParmVar 0x55af69f97668 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55af69f97b70 <col:12>
|     `-UnaryOperator 0x55af69f97b58 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55af69f97b48 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55af69f976d8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55af69f976d8
  `-ParmVarDecl 0x55af69f977e8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55af69f76e10 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55af69f76f28 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55af69f76fb8 <col:16, col:22> col:16 public
|-TypedefDecl 0x55af69f76ff8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55af69c4adc0 'const char *'
|   `-QualType 0x55af69c4a311 'const char' const
|     `-BuiltinType 0x55af69c4a310 'char'
|-TypedefDecl 0x55af69f77080 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55af69f77050 'String::const_iterator' sugar
|   |-Typedef 0x55af69f76ff8 'const_iterator'
|   `-PointerType 0x55af69c4adc0 'const char *'
|     `-QualType 0x55af69c4a311 'const char' const
|       `-BuiltinType 0x55af69c4a310 'char'
|-TypedefDecl 0x55af69f771f0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55af69f77160 'int (String::*)() const'
|   |-RecordType 0x55af69f76ea0 'String'
|   | `-CXXRecord 0x55af69f76e10 'String'
|   `-ParenType 0x55af69f77100 'int () const' sugar
|     `-FunctionProtoType 0x55af69f4ac90 'int () const' const cdecl
|       `-BuiltinType 0x55af69c4a370 'int'
|-TypedefDecl 0x55af69f77258 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55af69d9f870 'int64_t' sugar
|   |-Typedef 0x55af69cb32d0 'int64_t'
|   `-TypedefType 0x55af69c8c4d0 '__int64_t' sugar
|     |-Typedef 0x55af69c8c0a8 '__int64_t'
|     `-BuiltinType 0x55af69c4a390 'long'
|-TypedefDecl 0x55af69f772c0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55af69d9f790 'uint64_t' sugar
|   |-Typedef 0x55af69cb3470 'uint64_t'
|   `-TypedefType 0x55af69c8c560 '__uint64_t' sugar
|     |-Typedef 0x55af69c8c118 '__uint64_t'
|     `-BuiltinType 0x55af69c4a430 'unsigned long'
|-TypedefDecl 0x55af69f77350 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55af69f77320 'String::intmax_t' sugar
|   |-Typedef 0x55af69f77258 'intmax_t'
|   `-TypedefType 0x55af69d9f870 'int64_t' sugar
|     |-Typedef 0x55af69cb32d0 'int64_t'
|     `-TypedefType 0x55af69c8c4d0 '__int64_t' sugar
|       |-Typedef 0x55af69c8c0a8 '__int64_t'
|       `-BuiltinType 0x55af69c4a390 'long'
|-TypedefDecl 0x55af69f773e0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55af69f773b0 'String::uintmax_t' sugar
|   |-Typedef 0x55af69f772c0 'uintmax_t'
|   `-TypedefType 0x55af69d9f790 'uint64_t' sugar
|     |-Typedef 0x55af69cb3470 'uint64_t'
|     `-TypedefType 0x55af69c8c560 '__uint64_t' sugar
|       |-Typedef 0x55af69c8c118 '__uint64_t'
|       `-BuiltinType 0x55af69c4a430 'unsigned long'
|-CXXConstructorDecl 0x55af69f774a0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55af69f77648 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55af69f77588 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55af69f777f8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55af69f77738 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55af69f77950 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55af69f778c0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55af69f77b68 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55af69f77a18 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55af69f77a98 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55af69f77d88 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55af69f77c38 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55af69f77cb8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55af69f77fa8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55af69f77e58 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55af69f77ed8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55af69f781c8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55af69f78078 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55af69f780f8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55af69f78358 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55af69f78290 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55af69f784d8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55af69f78418 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55af69f78668 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55af69f785a0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55af69f787c0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55af69f78730 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55af69f78918 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55af69f78888 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55af69f78a70 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55af69f789e0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55af69f78bf8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55af69f78b38 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55af69f78d88 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55af69f78cc0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55af69f78f18 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55af69f78e50 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55af69f790a8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55af69f78fe0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55af69f791a0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55af69f792c8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55af69f79448 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55af69f79380 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55af69f79598 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55af69f79508 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55af69f79650 <col:63> "" ""
|-CXXMethodDecl 0x55af69f79798 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55af69f796d8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55af69f799a8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55af69f79858 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55af69f798d8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55af69f79bc8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55af69f79a70 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55af69f79af0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55af69f79ea8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55af69f79c88 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55af69f79d08 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55af69f85cf0 <col:55> 'int' 10
| `-ParmVarDecl 0x55af69f79d80 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55af69f85d10 <col:76> 'bool' true
|-CXXMethodDecl 0x55af69f7a188 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55af69f79f70 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55af69f79ff0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55af69f85d20 <col:56> 'int' 10
| `-ParmVarDecl 0x55af69f7a068 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55af69f85d40 <col:77> 'bool' true
|-CXXMethodDecl 0x55af69f7a290 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55af69f7a358 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55af69f7a420 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55af69f7a4c0 <col:20>
| `-OptimizeNoneAttr 0x55af69f7a518 <col:30>
|-CXXConversionDecl 0x55af69f7a608 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55af69f7a6d8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55af69f7a798 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55af69f7a888 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55af69f7a948 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55af69f7aac8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55af69f7aa00 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55af69f7ac18 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55af69f7ab88 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55af69f7ad08 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55af69f7adc8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55af69f7b018 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55af69f7ae80 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55af69f7af00 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55af69f7b278 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55af69f7b0e0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55af69f7b160 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55af69f7b348 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55af69f7b558 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55af69f7b400 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55af69f7b480 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55af69f7b778 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55af69f7b620 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55af69f7b6a0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55af69f7b908 <line:102:5, col:38> col:19 used substring 'String (int) const' inline
| `-ParmVarDecl 0x55af69f7b840 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55af69f7b9f8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55af69f7bb68 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55af69f7baa8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55af69f7bd78 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55af69f7bc28 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55af69f7bca8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55af69f7bf90 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55af69f7be38 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55af69f7beb0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55af69f7c120 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55af69f7c050 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55af69f7c340 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55af69f7c1e0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55af69f7c260 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55af69f7c490 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55af69f7c400 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55af69f7c668 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55af69f7c550 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55af69f7c5d0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55af69f7c7b8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55af69f7c728 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55af69f7c9d0 <line:125:5, col:42> col:9 used find_left 'int (char, int) const'
| |-ParmVarDecl 0x55af69f7c870 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55af69f7c8f0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55af69f85d50 <col:39> 'int' 0
|-CXXMethodDecl 0x55af69f7cbf0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55af69f7ca90 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55af69f7cb10 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55af69f85d70 <col:48> 'int' 0
|-CXXMethodDecl 0x55af69f7cdd0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55af69f7ccb0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55af69f7cd30 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55af69f85d90 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55af69f7cea0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55af69f7cf60 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55af69f7d020 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55af69f7d0e0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55af69f7d1a0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55af69f7d348 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55af69f7d250 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55af69f7d4c8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55af69f7d400 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55af69f7d6a0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55af69f7d588 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55af69f7d818 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55af69f7d758 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55af69f7d960 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55af69f7d8d0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55af69f7dab0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55af69f7da20 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55af69f7dc88 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55af69f7db70 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55af69f7dbf0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55af69f7de68 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55af69f7dd50 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55af69f7ddd0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55af69f7dfb8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55af69f7df28 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55af69f7e1c8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55af69f7e078 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55af69f7e0f8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55af69f7e328 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55af69f7e290 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55af69f7e480 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55af69f7e3e8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55af69f7e528 <col:57> "" ""
|-CXXMethodDecl 0x55af69f7e638 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55af69f7e5a8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55af69f7e788 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55af69f7e6f8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55af69f7e908 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55af69f7e840 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55af69f7e9d0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55af69f7ea90 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55af69f7eb50 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55af69f7ebf0 <col:49> "" ""
|-CXXMethodDecl 0x55af69f7ec80 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55af69f7ed40 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55af69f7ee30 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55af69f7eef8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55af69f7efb8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55af69f7f078 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55af69f7f170 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55af69f7f238 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55af69f7f300 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55af69f7f4d8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55af69f7f3b8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55af69f7f438 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55af69f7f700 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55af69f7f5a0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55af69f7f620 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55af69f7f810 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55af69f7f878 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55af69f7f8a0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55af69f7f9b8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55af69f7fa58 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55af69f7fab8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55af69f7fb18 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55af69f7fbc8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55af69f7fc30 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55af69f7fe68 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55af69f7feb8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55af69f7fe48 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55af69f7fd58 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55af69f7fd00 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55af69f7fd40 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55af69f7fd20 <col:32> 'int' 8
|-CXXRecordDecl 0x55af69f7fed0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55af69f7ffe8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55af69f80090 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55af69f800f8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55af69f80188 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55af69f86220 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55af69f86658 <col:12>
| |-CXXConstructorDecl 0x55af69f86328 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55af69f86438 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55af69f80090 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55af69f88be0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55af69f88bb0 <col:12> 'const char *const' lvalue .data 0x55af69f80090
| | |     `-DeclRefExpr 0x55af69f88b90 <col:12> 'const String::rep_t' lvalue ParmVar 0x55af69f86438 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55af69f800f8 'length' 'int'
| | | `-ImplicitCastExpr 0x55af69f88c70 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55af69f88c40 <col:12> 'const int' lvalue .length 0x55af69f800f8
| | |     `-DeclRefExpr 0x55af69f88c20 <col:12> 'const String::rep_t' lvalue ParmVar 0x55af69f86438 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55af69f80188 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55af69f88d00 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55af69f88cd0 <col:12> 'String::memo_t *const' lvalue .memo 0x55af69f80188
| | |     `-DeclRefExpr 0x55af69f88cb0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55af69f86438 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55af69f88d58 <col:12>
| |-CXXConstructorDecl 0x55af69f864d8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55af69f864d8
| | `-ParmVarDecl 0x55af69f865e8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55af69f8bb40 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55af69f97558 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55af69f97668 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55af69f97b80 <col:12>
| |   |-BinaryOperator 0x55af69f97998 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55af69f97950 <col:12> 'const char *' lvalue ->data 0x55af69f80090
| |   | | `-CXXThisExpr 0x55af69f97940 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55af69f97980 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55af69f97910 <col:12> 'const char *const' lvalue .data 0x55af69f80090
| |   |     `-DeclRefExpr 0x55af69f978f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55af69f97668 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55af69f97a60 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55af69f97a18 <col:12> 'int' lvalue ->length 0x55af69f800f8
| |   | | `-CXXThisExpr 0x55af69f97a08 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55af69f97a48 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55af69f979d8 <col:12> 'const int' lvalue .length 0x55af69f800f8
| |   |     `-DeclRefExpr 0x55af69f979b8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55af69f97668 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55af69f97b28 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55af69f97ae0 <col:12> 'String::memo_t *' lvalue ->memo 0x55af69f80188
| |   | | `-CXXThisExpr 0x55af69f97ad0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55af69f97b10 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55af69f97aa0 <col:12> 'String::memo_t *const' lvalue .memo 0x55af69f80188
| |   |     `-DeclRefExpr 0x55af69f97a80 <col:12> 'const String::rep_t' lvalue ParmVar 0x55af69f97668 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55af69f97b70 <col:12>
| |     `-UnaryOperator 0x55af69f97b58 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55af69f97b48 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55af69f976d8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55af69f976d8
|   `-ParmVarDecl 0x55af69f977e8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55af69f80200 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55af69f80448 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55af69f80268 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55af69f802e8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55af69f80360 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55af69f861e0 <col:79, line:261:5>
|   |-BinaryOperator 0x55af69f85e58 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55af69f85df0 <col:2, col:5> 'const char *' lvalue .data 0x55af69f80090
|   | | `-MemberExpr 0x55af69f85dc0 <col:2> 'String::rep_t' lvalue ->_r 0x55af69f80200
|   | |   `-CXXThisExpr 0x55af69f85db0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55af69f85e40 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55af69f85e20 <col:12> 'const char *' lvalue ParmVar 0x55af69f80268 'data' 'const char *'
|   |-BinaryOperator 0x55af69f85f20 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55af69f85eb8 <col:2, col:5> 'int' lvalue .length 0x55af69f800f8
|   | | `-MemberExpr 0x55af69f85e88 <col:2> 'String::rep_t' lvalue ->_r 0x55af69f80200
|   | |   `-CXXThisExpr 0x55af69f85e78 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55af69f85f08 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55af69f85ee8 <col:14> 'int' lvalue ParmVar 0x55af69f802e8 'length' 'int'
|   `-IfStmt 0x55af69f861c8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55af69f86040 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55af69f86028 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55af69f86008 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55af69f85fe8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55af69f85f80 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55af69f80188
|     |       | `-MemberExpr 0x55af69f85f50 <col:7> 'String::rep_t' lvalue ->_r 0x55af69f80200
|     |       |   `-CXXThisExpr 0x55af69f85f40 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55af69f85fd0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55af69f85fb0 <col:17> 'String::memo_t *' lvalue ParmVar 0x55af69f80360 'memo' 'String::memo_t *'
|     `-CallExpr 0x55af69f861a0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55af69f86188 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55af69f86090 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55af69f6ee78 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55af69f860f8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55af69f7fa58
|         `-ImplicitCastExpr 0x55af69f860e0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55af69f860c0 <col:27> 'String::memo_t *' lvalue ParmVar 0x55af69f80360 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55af69f806f8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55af69f80518 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55af69f80598 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55af69f80610 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55af69f80200 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55af69f86668 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55af69f867f8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55af69f86760 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55af69f866d0 <col:2> '<bound member function type>' ->assign_memo 0x55af69f80448
|     | `-ImplicitCastExpr 0x55af69f86798 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55af69f866c0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55af69f867b0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55af69f86700 <col:14> 'const char *' lvalue ParmVar 0x55af69f80518 'data' 'const char *'
|     |-ImplicitCastExpr 0x55af69f867c8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55af69f86720 <col:20> 'int' lvalue ParmVar 0x55af69f80598 'length' 'int'
|     `-ImplicitCastExpr 0x55af69f867e0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55af69f86740 <col:28> 'String::memo_t *' lvalue ParmVar 0x55af69f80610 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55af69f80888 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55af69f807c8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55af69f86a50 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55af69f869d0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55af69f86820 <col:2> '<bound member function type>' ->assign_memo 0x55af69f80448
|     | `-CXXThisExpr 0x55af69f86810 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55af69f86a08 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55af69f868a0 <col:14, col:19> 'const char *' lvalue .data 0x55af69f80090
|     |   `-MemberExpr 0x55af69f86870 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55af69f80200
|     |     `-DeclRefExpr 0x55af69f86850 <col:14> 'const String' lvalue ParmVar 0x55af69f807c8 'x' 'const String &'
|     |-ImplicitCastExpr 0x55af69f86a20 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55af69f86920 <col:25, col:30> 'int' lvalue .length 0x55af69f800f8
|     |   `-MemberExpr 0x55af69f868f0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55af69f80200
|     |     `-DeclRefExpr 0x55af69f868d0 <col:25> 'const String' lvalue ParmVar 0x55af69f807c8 'x' 'const String &'
|     `-ImplicitCastExpr 0x55af69f86a38 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55af69f869a0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55af69f80188
|         `-MemberExpr 0x55af69f86970 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55af69f80200
|           `-DeclRefExpr 0x55af69f86950 <col:38> 'const String' lvalue ParmVar 0x55af69f807c8 'x' 'const String &'
|-CXXMethodDecl 0x55af69f80950 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55af69f87410 <col:31, line:278:5>
|   `-IfStmt 0x55af69f873f8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55af69f86af0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55af69f86ad8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55af69f86aa8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55af69f80188
|     |     `-MemberExpr 0x55af69f86a78 <col:6> 'String::rep_t' lvalue ->_r 0x55af69f80200
|     |       `-CXXThisExpr 0x55af69f86a68 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55af69f873d0 <col:15, line:277:2>
|       |-ParenExpr 0x55af69f86fa0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55af69f86f70 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55af69f86c00 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55af69f86be8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55af69f86bd0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55af69f86b90 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55af69f7fa58
|       |   |       `-ImplicitCastExpr 0x55af69f86b78 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55af69f86b48 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55af69f80188
|       |   |           `-MemberExpr 0x55af69f86b18 <col:27> 'String::rep_t' lvalue ->_r 0x55af69f80200
|       |   |             `-CXXThisExpr 0x55af69f86b08 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55af69f86c60 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55af69f86c40 <col:54> 'int' 0
|       |   `-CallExpr 0x55af69f86ed0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55af69f86eb8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55af69f86e38 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55af69ce60d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55af69f86f10 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55af69f86d48 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55af69f86f28 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55af69f86d78 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55af69f86f40 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55af69f86db0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55af69f86f58 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55af69f86e20 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55af69f86e08 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55af69f86dd0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55af69f872f0 <line:274:6, line:275:22>
|       | |-CallExpr 0x55af69f871b0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55af69f87198 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55af69f87110 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55af69f702c0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55af69f870e0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55af69f7fa58
|       | |   `-ImplicitCastExpr 0x55af69f870c8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55af69f87098 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55af69f80188
|       | |       `-MemberExpr 0x55af69f87068 <col:40> 'String::rep_t' lvalue ->_r 0x55af69f80200
|       | |         `-CXXThisExpr 0x55af69f87058 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55af69f872b0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55af69f87298 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55af69f871d8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55af69f85130 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55af69f872d8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55af69f87238 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55af69f80188
|       |       `-MemberExpr 0x55af69f87208 <col:15> 'String::rep_t' lvalue ->_r 0x55af69f80200
|       |         `-CXXThisExpr 0x55af69f871f8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55af69f873b0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55af69f87348 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55af69f80188
|         | `-MemberExpr 0x55af69f87318 <col:6> 'String::rep_t' lvalue ->_r 0x55af69f80200
|         |   `-CXXThisExpr 0x55af69f87308 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55af69f87398 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55af69f87378 <col:16> 'int' 0
|-CXXMethodDecl 0x55af69f80be8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55af69f80a08 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55af69f80a88 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55af69f80b00 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55af69f80cc0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55af69f80f10 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55af69f80d78 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55af69f80df8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55af69f80e70 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55af69f810f8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55af69f80fe0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55af69f81060 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55af69f811f8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55af69f874e8 <col:41, line:286:5>
|   `-ReturnStmt 0x55af69f874d8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55af69f874a8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55af69f87470 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55af69f87458 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55af69f87438 <col:46> 'int' 1
|-CXXMethodDecl 0x55af69f81498 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55af69f812b0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55af69f81330 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55af69f813b0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55af69f85130 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55af69f81560 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55af69f85200 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55af69f853d0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55af69f852b8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55af69f85338 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55af69f85490 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55af69f85558 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55af69f85658 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55af69f856d0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55af69f85748 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55af69f857b0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55af69f858b0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55af69f85900 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55af69f85890 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55af69f85870 <col:22> 'int' 14
|-CXXMethodDecl 0x55af69f85b18 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55af69f85930 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55af69f859b0 <col:38> col:41 'int'
| `-ParmVarDecl 0x55af69f85a30 <col:43> col:46 'int'
|-FriendDecl 0x55af69f85c20 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55af69f85cb0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55af6a045f60 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55af6a046138 prev 0x55af6a045f60 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55af6a0461c8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55af6a0461f0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55af69c4a370 'int'
|-TypedefDecl 0x55af6a047b50 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55af6a047b00 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55af6a047ae0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55af6a046408 'type'
|     `-SubstTemplateTypeParmType 0x55af6a0463d0 'String' sugar
|       |-TemplateTypeParmType 0x55af69f3a6b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55af69f3a660 'T'
|       `-RecordType 0x55af69f76ea0 'String'
|         `-CXXRecord 0x55af69f76e10 'String'
|-TypedefDecl 0x55af6a047c08 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55af6a047bd0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55af6a047bb0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55af6a047b50 'type'
|     `-ElaboratedType 0x55af6a047b00 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55af6a047ae0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55af6a046408 'type'
|         `-SubstTemplateTypeParmType 0x55af6a0463d0 'String' sugar
|           |-TemplateTypeParmType 0x55af69f3a6b0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55af69f3a660 'T'
|           `-RecordType 0x55af69f76ea0 'String'
|             `-CXXRecord 0x55af69f76e10 'String'
|-CXXMethodDecl 0x55af6a047d88 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55af6a047c98 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55af6a047e78 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55af6a047f58 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55af6a047f58
|-CXXMethodDecl 0x55af6a048228 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55af6a048130 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55af6a048468 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55af6a0482e0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55af6a048358 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55af6a048638 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55af6a048528 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55af6a0485a0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55af6a048798 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55af6a048868 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55af6a048ab8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55af6a048928 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55af6a0489a0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55af6a048d18 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55af6a048b88 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55af6a048c00 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55af6a048ed8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55af6a048de8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55af6a049098 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55af6a048fa0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55af6a049150 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55af6a049200 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55af6a049438 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55af6a0492b0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55af6a049328 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55af6a0496d8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55af6a0495e0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55af6a0497a0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55af6a0497f0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55af6a049840 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.4 = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.4 = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55af6a1ae640 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55af6a044c08 prev 0x55af6a1ae640 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55af6a045ed0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55af6a045e80 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55af6a045e60 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55af6a045d10 'type'
|     `-SubstTemplateTypeParmType 0x55af6a045ba0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55af69f10460 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55af69f10408 'F'
|       `-RecordType 0x55af6a045800 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55af6a045720 'typed_array_memory'
|-FieldDecl 0x55af6a049890 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55af6a0498e0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55af6a049918 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55af6a044ca0 'String' sugar
|   |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55af69f47978 'T'
|   `-RecordType 0x55af69f76ea0 'String'
|     `-CXXRecord 0x55af69f76e10 'String'
|-TypedefDecl 0x55af6a0499a8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55af6a049970 'String &'
|   `-SubstTemplateTypeParmType 0x55af6a044ca0 'String' sugar
|     |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55af69f47978 'T'
|     `-RecordType 0x55af69f76ea0 'String'
|       `-CXXRecord 0x55af69f76e10 'String'
|-TypedefDecl 0x55af6a049a38 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55af6a049a00 'const String &'
|   `-QualType 0x55af6a044ca1 'const String' const
|     `-SubstTemplateTypeParmType 0x55af6a044ca0 'String' sugar
|       |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55af69f47978 'T'
|       `-RecordType 0x55af69f76ea0 'String'
|         `-CXXRecord 0x55af69f76e10 'String'
|-TypedefDecl 0x55af6a049ac8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55af6a049a90 'String *'
|   `-SubstTemplateTypeParmType 0x55af6a044ca0 'String' sugar
|     |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55af69f47978 'T'
|     `-RecordType 0x55af69f76ea0 'String'
|       `-CXXRecord 0x55af69f76e10 'String'
|-TypedefDecl 0x55af6a049b58 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55af6a049b20 'const String *'
|   `-QualType 0x55af6a044ca1 'const String' const
|     `-SubstTemplateTypeParmType 0x55af6a044ca0 'String' sugar
|       |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55af69f47978 'T'
|       `-RecordType 0x55af69f76ea0 'String'
|         `-CXXRecord 0x55af69f76e10 'String'
|-TypedefDecl 0x55af6a20f360 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55af6a20f310 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55af6a20f2f0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55af6a20f228 'type'
|     `-LValueReferenceType 0x55af6a20f1f0 'const String &'
|       `-QualType 0x55af6a20ef91 'const String' const
|         `-SubstTemplateTypeParmType 0x55af6a20ef90 'String' sugar
|           |-TemplateTypeParmType 0x55af69f1a3b0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55af69f1a358 'T'
|           `-RecordType 0x55af69f76ea0 'String'
|             `-CXXRecord 0x55af69f76e10 'String'
|-TypedefDecl 0x55af6a20f3c8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55af6a049a00 'const String &'
|   `-QualType 0x55af6a044ca1 'const String' const
|     `-SubstTemplateTypeParmType 0x55af6a044ca0 'String' sugar
|       |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55af69f47978 'T'
|       `-RecordType 0x55af69f76ea0 'String'
|         `-CXXRecord 0x55af69f76e10 'String'
|-TypedefDecl 0x55af6a20f420 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55af69c4a370 'int'
|-TypedefDecl 0x55af6a20f488 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55af6a049a90 'String *'
|   `-SubstTemplateTypeParmType 0x55af6a044ca0 'String' sugar
|     |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55af69f47978 'T'
|     `-RecordType 0x55af69f76ea0 'String'
|       `-CXXRecord 0x55af69f76e10 'String'
|-TypedefDecl 0x55af6a20f4f0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55af6a049b20 'const String *'
|   `-QualType 0x55af6a044ca1 'const String' const
|     `-SubstTemplateTypeParmType 0x55af6a044ca0 'String' sugar
|       |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55af69f47978 'T'
|       `-RecordType 0x55af69f76ea0 'String'
|         `-CXXRecord 0x55af69f76e10 'String'
|-EnumDecl 0x55af6a20f548 <line:134:5> col:5
| `-EnumConstantDecl 0x55af6a20f640 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55af6a20f620 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55af69f49058 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55af69f49030 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55af69f49010 <col:40> 'int' 1
|-CXXConstructorDecl 0x55af6a20f6c8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55af6a20f958 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55af6a20f780 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55af6a20f820 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55af6a20fbe8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55af6a20fad0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55af6a20fea8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55af6a20fd90 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55af6a2101c0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55af6a2100a0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55af6a2104d0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55af6a2103b0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55af6a2107c0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55af6a210608 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55af6a210680 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55af6a2108e8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55af6a210998 <col:20> Inherited
| `-OptimizeNoneAttr 0x55af6a2109f0 <col:30> Inherited
|-CXXMethodDecl 0x55af6a210a38 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55af6a210ae8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55af6a210b40 <col:30> Inherited
|-CXXMethodDecl 0x55af6a210c08 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55af6a210cb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55af6a210d10 <col:30> Inherited
|-CXXMethodDecl 0x55af6a210d58 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55af6a210e08 <col:20> Inherited
| `-OptimizeNoneAttr 0x55af6a210e60 <col:30> Inherited
|-CXXMethodDecl 0x55af6a210ea8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55af6a210f58 <col:20> Inherited
| `-OptimizeNoneAttr 0x55af6a210fb0 <col:30> Inherited
|-CXXMethodDecl 0x55af6a210ff8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55af6a2110a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55af6a211100 <col:30> Inherited
|-CXXMethodDecl 0x55af6a211128 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55af6a2111d8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55af6a211288 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55af6a211448 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55af6a211338 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55af6a2113b0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55af6a211598 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55af6a211508 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55af6a211748 <line:163:5, col:65> col:43 used operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55af6a211650 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55af6a211800 <col:20>
| `-OptimizeNoneAttr 0x55af6a211858 <col:30>
|-CXXMethodDecl 0x55af6a211978 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55af6a211880 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55af6a211a30 <col:20>
| `-OptimizeNoneAttr 0x55af6a211a88 <col:30>
|-CXXMethodDecl 0x55af6a211b40 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55af6a211ab0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55af6a211c88 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55af6a211bf8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55af6a211db8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55af6a211eb8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55af6a211f88 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55af6a212058 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55af6a212198 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55af6a212108 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55af6a2122e0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55af6a212250 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55af6a212428 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55af6a212398 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55af6a2124e0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55af6a2125e0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55af6a212550 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55af6a212698 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55af6a212758 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55af6a212858 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55af6a2129d8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55af6a212918 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55af6a213168 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55af6a212a90 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55af6a2130c8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55af6a212fc8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55af6a213248 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55af6a213398 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55af6a213308 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55af6a213450 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55af6a213698 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55af6a213510 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55af6a213588 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55af6a213828 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55af6a213768 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55af6a213a38 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55af6a2138f0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55af6a213968 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55af6a213af8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55af6a213d58 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55af6a213c60 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55af6a213e28 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55af6a213e28

Layout: <CGRecordLayout
  LLVMType:%class.Vector.3 = type { %class.vector_memory.4 }
  NonVirtualBaseLLVMType:%class.Vector.3 = type { %class.vector_memory.4 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55af6a297908 prev 0x55af6a132bb8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55af6a297a00 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55af6a297a90 <col:22, col:28> col:22 public
|-EnumDecl 0x55af6a297ab8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55af6a297bd8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55af6a297bb8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55af6a297ba0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55af6a297b80 <col:14> 'int' 999
| |-EnumConstantDecl 0x55af6a297c80 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55af6a297c60 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55af6a297c48 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55af6a297c28 <col:14> 'int' 1
| |-EnumConstantDecl 0x55af6a297d10 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55af6a297cf0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55af6a297cd0 <col:17> 'int' 0
| |-EnumConstantDecl 0x55af6a297da0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55af6a297d80 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55af6a297d60 <col:13> 'int' 1
| |-EnumConstantDecl 0x55af6a297e30 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55af6a297e10 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55af6a297df0 <col:16> 'int' 2
| |-EnumConstantDecl 0x55af6a297ec0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55af6a297ea0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55af6a297e80 <col:13> 'int' 3
| |-EnumConstantDecl 0x55af6a297f50 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55af6a297f30 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55af6a297f10 <col:15> 'int' 4
| |-EnumConstantDecl 0x55af6a297fe0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55af6a297fc0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55af6a297fa0 <col:14> 'int' 5
| |-EnumConstantDecl 0x55af6a298070 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55af6a298050 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55af6a298030 <col:12> 'int' 6
| `-EnumConstantDecl 0x55af6a298100 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55af6a2980e0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55af6a2980c0 <col:13> 'int' 7
|-VarDecl 0x55af6a298170 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55af6a2981f8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55af6a298280 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55af6a298308 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55af6a298390 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55af6a298418 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55af6a2984a0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55af6a298528 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55af6a2985b0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55af6a298638 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55af6a2986c0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55af6a2987c0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55af6a29daa8 '_nerrors' 'int'
| | `-IntegerLiteral 0x55af6a29e238 <line:128:13> 'int' 0
| `-CompoundStmt 0x55af6a29e2a8 <col:16, line:129:5>
|-CXXDestructorDecl 0x55af6a2988b0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55af6a29e2b8 <col:29, line:132:5>
|-CXXMethodDecl 0x55af6a298a68 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55af6a2989a0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55af6a298b30 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55af6a298c18 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55af6a29e310 <col:44, line:161:5>
|   `-ReturnStmt 0x55af6a29e300 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55af6a29e2e8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55af6a29e2c8 <col:9> 'ErrorHandler *' lvalue Var 0x55af6a29db08 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55af6a298d58 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55af6a298cc8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55af6a298e20 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55af6a29e370 <col:43, line:173:5>
|   `-ReturnStmt 0x55af6a29e360 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55af6a29e348 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55af6a29e328 <col:9> 'ErrorHandler *' lvalue Var 0x55af6a29db80 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55af6a298ed8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55af6a298f58 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55af6a299068 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55af6a298fd8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55af6a2991b8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55af6a299128 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55af6a299310 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55af6a299278 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55af6a299468 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x55af6a2993d0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55af6a2995c0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55af6a299528 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55af6a2997d0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55af6a299678 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55af6a2996f8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55af6a2999a8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55af6a299890 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55af6a299910 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55af6a299bc8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55af6a299a68 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55af6a299ae8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55af6a299da8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55af6a299c88 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55af6a299d08 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55af6a299f88 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55af6a299e68 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55af6a299ee8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55af6a29a110 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55af6a29a048 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55af6a29a2e0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55af6a29a1c8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55af6a29a240 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55af6a29e5c8 <col:57, line:234:5>
|   `-ReturnStmt 0x55af6a29e5b8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55af6a29e5a0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55af6a29e548 <col:9, col:41> 'int'
|         |-MemberExpr 0x55af6a29e518 <col:9> '<bound member function type>' ->xmessage 0x55af6a29a110
|         | `-CXXThisExpr 0x55af6a29e508 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55af6a29e588 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55af6a29e570 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55af6a29e4e8 <col:18, col:40> 'String' (CXXTemporary 0x55af6a29e4e8)
|               `-CallExpr 0x55af6a29e4b0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55af6a29e498 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55af6a29e410 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55af6a29c2d8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55af6a29e430 <col:31> 'const String' lvalue ParmVar 0x55af6a29a240 'str' 'const String &'
|                 `-DeclRefExpr 0x55af6a29e450 <col:36> 'const String' lvalue ParmVar 0x55af6a29a1c8 'anno' 'const String &'
|-CXXMethodDecl 0x55af6a29a5c0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55af6a29a3a0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55af6a29a420 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55af6a29a498 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55af6a29e858 <col:68, line:243:5>
|   `-ReturnStmt 0x55af6a29e848 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55af6a29e830 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55af6a29e7d0 <col:9, col:41> 'int'
|         |-MemberExpr 0x55af6a29e7a0 <col:9> '<bound member function type>' ->xmessage 0x55af6a29a2e0
|         | `-CXXThisExpr 0x55af6a29e790 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55af6a29e668 <col:18> 'const String' lvalue ParmVar 0x55af6a29a3a0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55af6a29e818 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55af6a29e800 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55af6a29e770 <col:24, col:40> 'String' (CXXTemporary 0x55af6a29e770)
|               `-CXXMemberCallExpr 0x55af6a29e708 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55af6a29e698 <col:24> '<bound member function type>' ->vformat 0x55af6a29b7a0
|                 | `-CXXThisExpr 0x55af6a29e688 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55af6a29e738 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55af6a29e6c8 <col:32> 'const char *' lvalue ParmVar 0x55af6a29a420 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55af6a29e750 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55af6a29e6e8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55af6a29a498 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55af6a29a860 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55af6a29a688 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55af6a29a700 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55af6a29a778 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55af6a29eb98 <col:23, line:254:5>
|   `-ReturnStmt 0x55af6a29eb88 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55af6a29eb70 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55af6a29eb10 <col:9, col:71> 'int'
|         |-MemberExpr 0x55af6a29eae0 <col:9> '<bound member function type>' ->xmessage 0x55af6a29a2e0
|         | `-CXXThisExpr 0x55af6a29ead0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55af6a29eb58 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55af6a29eb40 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55af6a29ea90 <col:18, col:65> 'String' (CXXTemporary 0x55af6a29ea90)
|         |     `-CallExpr 0x55af6a29ea28 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55af6a29ea10 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55af6a29e8f8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55af6a29c2d8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55af6a29e918 <col:31> 'const String' lvalue ParmVar 0x55af6a29a700 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55af6a29ea70 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55af6a29ea58 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55af6a29e9f0 <col:37, col:64> 'String' (CXXTemporary 0x55af6a29e9f0)
|         |             `-CallExpr 0x55af6a29e9c0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55af6a29e9a8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55af6a29e938 <col:37> 'String (const String &)' lvalue CXXMethod 0x55af6a29c928 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55af6a29e958 <col:56> 'const String' lvalue ParmVar 0x55af6a29a688 'landmark' 'const String &'
|         `-DeclRefExpr 0x55af6a29eab0 <col:68> 'const String' lvalue ParmVar 0x55af6a29a778 'str' 'const String &'
|-CXXMethodDecl 0x55af6a29abe0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55af6a29a928 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55af6a29a9a0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55af6a29aa20 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55af6a29aa98 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55af6a29ee60 <col:34, line:267:5>
|   `-ReturnStmt 0x55af6a29ee40 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55af6a29ee28 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55af6a29edc0 <col:9, col:51> 'int'
|         |-MemberExpr 0x55af6a29ed90 <col:9> '<bound member function type>' ->xmessage 0x55af6a29a860
|         | `-CXXThisExpr 0x55af6a29ed80 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55af6a29ec38 <col:18> 'const String' lvalue ParmVar 0x55af6a29a928 'landmark' 'const String &'
|         |-DeclRefExpr 0x55af6a29ec58 <col:28> 'const String' lvalue ParmVar 0x55af6a29a9a0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55af6a29ee10 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55af6a29edf8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55af6a29ed60 <col:34, col:50> 'String' (CXXTemporary 0x55af6a29ed60)
|               `-CXXMemberCallExpr 0x55af6a29ecf8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55af6a29ec88 <col:34> '<bound member function type>' ->vformat 0x55af6a29b7a0
|                 | `-CXXThisExpr 0x55af6a29ec78 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55af6a29ed28 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55af6a29ecb8 <col:42> 'const char *' lvalue ParmVar 0x55af6a29aa20 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55af6a29ed40 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55af6a29ecd8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55af6a29aa98 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55af6a29acf0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55af6a29eee0 <col:25, line:288:5>
|   `-ReturnStmt 0x55af6a29eed0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55af6a29eeb8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55af6a29ee88 <col:9> 'const int' lvalue ->_nerrors 0x55af6a29daa8
|         `-CXXThisExpr 0x55af6a29ee78 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55af6a29af00 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55af6a29ada8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55af6a29ae28 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55af6a29b1e8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55af6a29afc8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55af6a29b048 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55af6a29b0c0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55af6a29b380 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55af6a29b2b8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55af6a29b5c8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55af6a29b440 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55af6a29b4b8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55af6a29f140 <col:58, line:357:5>
|   `-ReturnStmt 0x55af6a29f130 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55af6a29f118 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55af6a29f0e8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55af6a29f0d0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55af6a29f0b0 <col:9, col:29> 'String' (CXXTemporary 0x55af6a29f0b0)
|             `-CallExpr 0x55af6a29f040 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55af6a29f028 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55af6a29efa8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55af6a29b1e8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55af6a29ef48 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55af6a29f078 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55af6a29ef68 <col:21> 'const char *' lvalue ParmVar 0x55af6a29b440 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55af6a29f090 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55af6a29ef88 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55af6a29b4b8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55af6a29b7a0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55af6a29b690 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55af6a29b708 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55af6a29b8f8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55af6a29b868 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55af6a29ba40 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55af6a29b9b0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55af6a29bce0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55af6a29baf8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55af6a29bb78 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55af6a29bbf0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55af6a29be40 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55af6a29bdb0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55af6a29f258 <col:37, line:441:5>
|   `-IfStmt 0x55af6a29f240 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55af6a29f1c8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55af6a29f198 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55af6a29f158 <col:6> 'int' lvalue ParmVar 0x55af6a29bdb0 'level' 'int'
|     | `-ImplicitCastExpr 0x55af6a29f1b0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55af6a29f178 <col:15> 'ErrorHandler::Level' EnumConstant 0x55af6a297ec0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55af6a29f228 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55af6a29f1f8 <col:8> 'int' lvalue ->_nerrors 0x55af6a29daa8
|         `-CXXThisExpr 0x55af6a29f1e8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55af6a29bf08 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55af6a29f2f0 <col:26, line:448:5>
|   `-BinaryOperator 0x55af6a29f2d0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55af6a29f280 <col:2> 'int' lvalue ->_nerrors 0x55af6a29daa8
|     | `-CXXThisExpr 0x55af6a29f270 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55af6a29f2b0 <col:13> 'int' 0
|-CXXMethodDecl 0x55af6a29c0d0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55af6a29bfc0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55af6a29c038 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55af6a29c2d8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55af6a29c190 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55af6a29c208 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55af6a29c588 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55af6a29c398 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55af6a29c418 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55af6a29c498 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55af6a29c640 <col:59> 0 0
|-CXXMethodDecl 0x55af6a29c7d8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55af6a29c6b8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55af6a29c738 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55af6a29f960 <col:70, line:534:5>
|   |-DeclStmt 0x55af6a29f460 <line:528:2, col:20>
|   | |-VarDecl 0x55af6a29f318 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55af6a29f380 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55af6a29f3b8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55af6a29f420 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55af6a29f530 <line:529:2, col:23>
|   | `-VarDecl 0x55af6a29f490 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55af6a29f518 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55af6a29f4f8 <col:18> 'const char *' lvalue ParmVar 0x55af6a29c6b8 'begin' 'const char *'
|   |-DoStmt 0x55af6a29f8f8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55af6a29f828 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55af6a29f810 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55af6a29f7f0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55af6a29f548 <col:6> 'const char *' lvalue Var 0x55af6a29f490 'x' 'const char *'
|   | |     `-CallExpr 0x55af6a29f740 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55af6a29f728 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55af6a29f6e0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55af6a29df80 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55af6a29f7a8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55af6a29f790 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55af6a29f600 <col:20, col:27> 'String' (CXXTemporary 0x55af6a29f600)
|   | |       |     `-CXXTemporaryObjectExpr 0x55af6a29f5c8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55af6a29f7c0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55af6a29f620 <col:30> 'const char *' lvalue Var 0x55af6a29f490 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55af6a29f7d8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55af6a29f640 <col:33> 'const char *' lvalue ParmVar 0x55af6a29c738 'end' 'const char *'
|   | |       |-UnaryOperator 0x55af6a29f680 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55af6a29f660 <col:39> 'String' lvalue Var 0x55af6a29f318 'name' 'String'
|   | |       |-UnaryOperator 0x55af6a29f6b8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55af6a29f698 <col:46> 'String' lvalue Var 0x55af6a29f3b8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55af6a29f6d0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55af6a29f8e0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55af6a29f8c8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55af6a29f8a8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55af6a29f878 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55af69f7a608
|   |         `-ImplicitCastExpr 0x55af6a29f860 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55af6a29f840 <col:11> 'String' lvalue Var 0x55af6a29f318 'name' 'String'
|   `-ReturnStmt 0x55af6a29f950 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55af6a29f938 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55af6a29f918 <col:9> 'const char *' lvalue Var 0x55af6a29f490 'x' 'const char *'
|-CXXMethodDecl 0x55af6a29c928 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55af6a29c898 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55af6a29ff68 <col:55, line:550:5>
|   `-IfStmt 0x55af6a29ff40 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55af6a29fba0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55af6a29fb88 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55af6a29fb70 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55af6a29fb50 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55af6a29fb20 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55af69f7a608
|     | |       `-DeclRefExpr 0x55af6a29f9c0 <col:6> 'const String' lvalue ParmVar 0x55af6a29c898 'x' 'const String &'
|     | `-BinaryOperator 0x55af6a29fb00 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55af6a29fad0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55af6a29fa80 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55af6a29fa68 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55af6a29fa20 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55af69f93e40 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55af6a29f9e0 <col:11> 'const String' lvalue ParmVar 0x55af6a29c898 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55af6a29fa00 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55af6a29fae8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55af6a29fab8 <col:19> 'char' 123
|     |-ReturnStmt 0x55af6a29fc10 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55af6a29fbe0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55af6a29fbc0 <col:13> 'const String' lvalue ParmVar 0x55af6a29c898 'x' 'const String &'
|     `-IfStmt 0x55af6a29ff18 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55af6a29fca8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55af6a29fc90 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55af6a29fc70 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55af6a29fc40 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55af69f7a608
|       |       `-DeclRefExpr 0x55af6a29fc20 <col:11> 'const String' lvalue ParmVar 0x55af6a29c898 'x' 'const String &'
|       |-ReturnStmt 0x55af6a29fe30 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55af6a29fe18 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55af6a29fde8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55af6a29fdd0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55af6a29fdb0 <col:13, col:29> 'String' (CXXTemporary 0x55af6a29fdb0)
|       |         `-CallExpr 0x55af6a29fd60 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55af6a29fd48 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55af6a29fcc0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55af6a29c0d0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55af6a29fd90 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55af6a29fce0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55af6a29fd00 <col:28> 'const String' lvalue ParmVar 0x55af6a29c898 'x' 'const String &'
|       `-ReturnStmt 0x55af6a29ff08 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55af6a29fef0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55af6a29fec0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55af6a29fea8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55af6a29fe88 <col:13, col:20> 'String' (CXXTemporary 0x55af6a29fe88)
|                 `-CXXTemporaryObjectExpr 0x55af6a29fe50 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55af6a29caf0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55af6a29c9e0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55af6a29ca58 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55af6a29e228 <col:71> 'bool' false
|-CXXRecordDecl 0x55af6a29cba0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55af6a29ce98 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55af6a29ce30 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55af6a29cdd0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55af6a29cd90 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55af69f76ea0 'String'
|       | `-CXXRecord 0x55af69f76e10 'String'
|       |-BuiltinType 0x55af69c4a370 'int'
|       `-DecayedType 0x55af6a22a2f0 '__va_list_tag *' sugar
|         |-TypedefType 0x55af6a22a2c0 'va_list' sugar
|         | |-Typedef 0x55af69e67f50 'va_list'
|         | `-TypedefType 0x55af69e67f00 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55af69d9fb28 '__gnuc_va_list'
|         |   `-TypedefType 0x55af69d9fa90 '__builtin_va_list' sugar
|         |     |-Typedef 0x55af69c8bbd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55af69c8bb80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55af69c4b0c0 '__va_list_tag'
|         |         `-CXXRecord 0x55af69c4b028 '__va_list_tag'
|         `-PointerType 0x55af69e6d7f0 '__va_list_tag *'
|           `-RecordType 0x55af69c4b0c0 '__va_list_tag'
|             `-CXXRecord 0x55af69c4b028 '__va_list_tag'
|-EnumDecl 0x55af6a29cef0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55af6a29cff0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55af6a29d550 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a29cfd0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55af6a29cfb0 <col:16> 'int' 1
| |-EnumConstantDecl 0x55af6a29d080 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55af6a29d568 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a29d060 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55af6a29d040 <col:21> 'int' 2
| |-EnumConstantDecl 0x55af6a29d110 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55af6a29d580 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a29d0f0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55af6a29d0d0 <col:22> 'int' 4
| |-EnumConstantDecl 0x55af6a29d1a0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55af6a29d598 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a29d180 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55af6a29d160 <col:17> 'int' 8
| |-EnumConstantDecl 0x55af6a29d230 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55af6a29d5b0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a29d210 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55af6a29d1f0 <col:22> 'int' 16
| |-EnumConstantDecl 0x55af6a29d2c0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55af6a29d5c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a29d2a0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55af6a29d280 <col:19> 'int' 32
| |-EnumConstantDecl 0x55af6a29d350 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55af6a29d5e0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a29d330 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55af6a29d310 <col:17> 'int' 64
| |-EnumConstantDecl 0x55af6a29d3e0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55af6a29d5f8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a29d3c0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55af6a29d3a0 <col:14> 'int' 128
| |-EnumConstantDecl 0x55af6a29d470 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55af6a29d610 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a29d450 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55af6a29d430 <col:16> 'int' 256
| `-EnumConstantDecl 0x55af6a29d500 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55af6a29d628 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55af6a29d4e0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55af6a29d4c0 <col:12> 'int' 1024
|-CXXMethodDecl 0x55af6a29d838 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55af6a29d650 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55af6a29d6f0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55af6a29d9c0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55af6a29d8f8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55af6a29da68 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55af6a29daa8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55af6a29db08 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55af6a29db80 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55af6a29df80 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55af6a29dbf8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55af6a29dc78 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55af6a29dcf8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55af6a29dd70 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55af6a29dde8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55af6a29de60 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55af6a29e0a8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55af6a29e0a8
| `-ParmVarDecl 0x55af6a29e1b8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55af6a2a02c8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55af6a2a02c8
  `-ParmVarDecl 0x55af6a2a03d8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55af6a1c43e8 <../elements/standard/clipboard.hh:40:1, line:43:1> line:40:8 referenced struct Range definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55af6a1c4508 <col:1, col:8> col:8 implicit struct Range
|-FieldDecl 0x55af6a1c45a8 <line:41:5, col:14> col:14 referenced offset 'uint32_t':'unsigned int'
|-FieldDecl 0x55af6a1c4608 <line:42:5, col:14> col:14 referenced length 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55af6a2a90f0 <line:40:8> col:8 implicit used Range 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55af6a2a94d8 <col:8>
|-CXXConstructorDecl 0x55af6a2a91d0 <col:8> col:8 implicit used constexpr Range 'void (const Range &) noexcept' inline default trivial
| |-ParmVarDecl 0x55af6a2a92e8 <col:8> col:8 used 'const Range &'
| |-CXXCtorInitializer Field 0x55af6a1c45a8 'offset' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55af6a2ab0e0 <col:8> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55af6a2ab0b0 <col:8> 'const uint32_t':'const unsigned int' lvalue .offset 0x55af6a1c45a8
| |     `-DeclRefExpr 0x55af6a2ab090 <col:8> 'const Range' lvalue ParmVar 0x55af6a2a92e8 '' 'const Range &'
| |-CXXCtorInitializer Field 0x55af6a1c4608 'length' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55af6a2ab170 <col:8> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55af6a2ab140 <col:8> 'const uint32_t':'const unsigned int' lvalue .length 0x55af6a1c4608
| |     `-DeclRefExpr 0x55af6a2ab120 <col:8> 'const Range' lvalue ParmVar 0x55af6a2a92e8 '' 'const Range &'
| `-CompoundStmt 0x55af6a2ab1c0 <col:8>
|-CXXConstructorDecl 0x55af6a2a9358 <col:8> col:8 implicit constexpr Range 'void (Range &&)' inline default trivial noexcept-unevaluated 0x55af6a2a9358
| `-ParmVarDecl 0x55af6a2a9468 <col:8> col:8 'Range &&'
`-CXXDestructorDecl 0x55af6a2ab200 <col:8> col:8 implicit referenced ~Range 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.Range = type { i32, i32 }
  NonVirtualBaseLLVMType:%struct.Range = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55af6a132c48 prev 0x55af6a1710e8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55af6a132d40 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55af6a132dd0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55af6a132f08 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55af6a132e08 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55af6a22aa20 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55af6a22aa00 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55af6a22a598 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55af6a22aab0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55af6a22aa70 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55af6a132e08 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55af6a22a600 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55af6a22ab30 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55af6a22aaf0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55af6a22a660 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55af6a22ab70 <col:54> 'bool' false
| `-CompoundStmt 0x55af6a22ac78 <col:61, line:38:5>
|   `-BinaryOperator 0x55af6a22ac58 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55af6a22abf0 <col:9> 'const Element *' lvalue ->_context 0x55af6a22a538
|     | `-CXXThisExpr 0x55af6a22abe0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55af6a22ac40 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55af6a22ac20 <col:20> 'int' 0
|-CXXConstructorDecl 0x55af6a229808 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55af6a2296c0 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55af6a229738 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55af6a22aa58 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55af6a22aa38 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55af6a22a538 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55af6a22acd0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55af6a22ac90 <col:20> 'const Element *' lvalue ParmVar 0x55af6a2296c0 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55af6a22a598 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55af6a22ad50 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55af6a22ad10 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55af6a229738 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55af6a22a600 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55af6a22add0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55af6a22ad90 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55af6a22a660 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55af6a22ae10 <col:73> 'bool' false
| `-CompoundStmt 0x55af6a22ae88 <col:80, line:46:5>
|-CXXMethodDecl 0x55af6a229938 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55af6a22af00 <col:36, line:51:5>
|   `-ReturnStmt 0x55af6a22aef0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55af6a22aed8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55af6a22aea8 <col:16> 'const Element *const' lvalue ->_context 0x55af6a22a538
|         `-CXXThisExpr 0x55af6a22ae98 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55af6a229a28 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55af6a22af80 <col:32, line:57:5>
|   `-ReturnStmt 0x55af6a22af70 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55af6a22af58 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55af6a22af28 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55af6a22a598
|         `-CXXThisExpr 0x55af6a22af18 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55af6a229ae8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55af6a229c70 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55af6a229ba0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55af6a229dc0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55af6a229d30 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55af6a229f10 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55af6a229e80 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55af6a22a118 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55af6a229fc8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55af6a22a040 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55af6a22a448 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55af6a22a1d8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55af6a22a258 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55af6a22a320 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55af6a22a500 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55af6a22a538 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55af6a22a598 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55af6a22a600 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55af6a22a660 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55af6a22a6b0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55af6a22a6b0
| `-ParmVarDecl 0x55af6a22a7c8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55af6a22a868 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55af6a22a868
| `-ParmVarDecl 0x55af6a22a978 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55af6a2aa030 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55af6a258280 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55af6a258458 prev 0x55af6a258280 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55af6a2584e8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55af6a258510 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55af69c4a370 'int'
|-TypedefDecl 0x55af6a25a0e0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55af6a25a090 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55af6a2589c0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55af6a2588c0 'type'
|     `-TemplateSpecializationType 0x55af6a258850 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55af6a258730 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55af6a258710 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55af6a2586f0 <col:24> 'unsigned long' 4
|       `-RecordType 0x55af6a258830 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55af6a258750 'char_array'
|-TypedefDecl 0x55af6a25a198 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55af6a25a160 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55af6a25a140 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55af6a25a0e0 'type'
|     `-ElaboratedType 0x55af6a25a090 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55af6a2589c0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55af6a2588c0 'type'
|         `-TemplateSpecializationType 0x55af6a258850 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55af6a258730 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55af6a258710 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55af6a2586f0 <col:24> 'unsigned long' 4
|           `-RecordType 0x55af6a258830 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55af6a258750 'char_array'
|-CXXMethodDecl 0x55af6a25a318 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55af6a25a228 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55af6a25a408 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55af6a25a4e8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55af6a25a7b8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55af6a25a6c0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55af6a25a9f8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55af6a25a870 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55af6a25a8e8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55af6a25abc8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55af6a25aab8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55af6a25ab30 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55af6a25ad28 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55af6a25adf8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55af6a25b048 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55af6a25aeb8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55af6a25af30 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55af6a25b2a8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55af6a25b118 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55af6a25b190 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55af6a25b468 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55af6a25b378 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55af6a25b628 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55af6a25b530 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55af6a25b6e0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55af6a25b790 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55af6a25b9c8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55af6a25b840 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55af6a25b8b8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55af6a25bc68 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55af6a25bb70 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55af6a25bd30 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55af6a25bd80 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55af6a25bdd0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.6 = type { %struct.char_array.7*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.6 = type { %struct.char_array.7*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55af6a256e98 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55af6a2570a8 prev 0x55af6a256e98 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55af6a2581f0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55af6a2581a0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55af6a258180 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55af6a258030 'type'
|     `-SubstTemplateTypeParmType 0x55af6a257e50 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55af69f0fce0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55af69f0fc88 'T'
|       `-RecordType 0x55af6a2579a0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55af6a2578b8 'sized_array_memory'
|-FieldDecl 0x55af6a25be20 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55af6a25be70 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55af6a25bea8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55af6a257140 'int' sugar
|   |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55af69f47978 'T'
|   `-BuiltinType 0x55af69c4a370 'int'
|-TypedefDecl 0x55af6a25bf38 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55af6a25bf00 'int &'
|   `-SubstTemplateTypeParmType 0x55af6a257140 'int' sugar
|     |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55af69f47978 'T'
|     `-BuiltinType 0x55af69c4a370 'int'
|-TypedefDecl 0x55af6a25bff8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55af6a25bfc0 'const int &'
|   `-QualType 0x55af6a257141 'const int' const
|     `-SubstTemplateTypeParmType 0x55af6a257140 'int' sugar
|       |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55af69f47978 'T'
|       `-BuiltinType 0x55af69c4a370 'int'
|-TypedefDecl 0x55af6a25c088 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55af6a25c050 'int *'
|   `-SubstTemplateTypeParmType 0x55af6a257140 'int' sugar
|     |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55af69f47978 'T'
|     `-BuiltinType 0x55af69c4a370 'int'
|-TypedefDecl 0x55af6a25c118 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55af6a25c0e0 'const int *'
|   `-QualType 0x55af6a257141 'const int' const
|     `-SubstTemplateTypeParmType 0x55af6a257140 'int' sugar
|       |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55af69f47978 'T'
|       `-BuiltinType 0x55af69c4a370 'int'
|-TypedefDecl 0x55af6a25cd00 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55af6a25ccb0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55af6a25cc90 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55af6a25cc20 'type'
|     `-SubstTemplateTypeParmType 0x55af6a25c9e0 'int' sugar
|       |-TemplateTypeParmType 0x55af69f1aae0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55af69f1aa90 'T'
|       `-BuiltinType 0x55af69c4a370 'int'
|-TypedefDecl 0x55af6a25cd68 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55af6a25bfc0 'const int &'
|   `-QualType 0x55af6a257141 'const int' const
|     `-SubstTemplateTypeParmType 0x55af6a257140 'int' sugar
|       |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55af69f47978 'T'
|       `-BuiltinType 0x55af69c4a370 'int'
|-TypedefDecl 0x55af6a25cdc0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55af69c4a370 'int'
|-TypedefDecl 0x55af6a25ce28 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55af6a25c050 'int *'
|   `-SubstTemplateTypeParmType 0x55af6a257140 'int' sugar
|     |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55af69f47978 'T'
|     `-BuiltinType 0x55af69c4a370 'int'
|-TypedefDecl 0x55af6a25ce90 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55af6a25c0e0 'const int *'
|   `-QualType 0x55af6a257141 'const int' const
|     `-SubstTemplateTypeParmType 0x55af6a257140 'int' sugar
|       |-TemplateTypeParmType 0x55af69f479d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55af69f47978 'T'
|       `-BuiltinType 0x55af69c4a370 'int'
|-EnumDecl 0x55af6a25cee8 <line:134:5> col:5
| `-EnumConstantDecl 0x55af6a25cfe0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55af6a25cfc0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55af69f49058 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55af69f49030 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55af69f49010 <col:40> 'int' 1
|-CXXConstructorDecl 0x55af6a25d068 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55af6a25d2b8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55af6a25d120 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55af6a25d1c0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55af6a2610f8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55af6a25d460 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55af6a2613b8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55af6a2612a0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55af6a261700 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55af6a2615e0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55af6a261a10 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55af6a2618f0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55af6a261d00 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55af6a261b48 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55af6a261bc0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55af6a261e28 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55af6a261f08 <col:20> Inherited
| `-OptimizeNoneAttr 0x55af6a261f60 <col:30> Inherited
|-CXXMethodDecl 0x55af6a261fa8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55af6a262058 <col:20> Inherited
| `-OptimizeNoneAttr 0x55af6a2620b0 <col:30> Inherited
|-CXXMethodDecl 0x55af6a262178 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55af6a262228 <col:20> Inherited
| `-OptimizeNoneAttr 0x55af6a262280 <col:30> Inherited
|-CXXMethodDecl 0x55af6a2622c8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55af6a262378 <col:20> Inherited
| `-OptimizeNoneAttr 0x55af6a2623d0 <col:30> Inherited
|-CXXMethodDecl 0x55af6a262418 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55af6a2624c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55af6a262520 <col:30> Inherited
|-CXXMethodDecl 0x55af6a262568 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55af6a262618 <col:20> Inherited
| `-OptimizeNoneAttr 0x55af6a262670 <col:30> Inherited
|-CXXMethodDecl 0x55af6a262698 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55af6a262748 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55af6a2627f8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55af6a2629b8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55af6a2628a8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55af6a262920 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55af6a262b08 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55af6a262a78 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55af6a262cb8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55af6a262bc0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55af6a262d70 <col:20>
| `-OptimizeNoneAttr 0x55af6a262dc8 <col:30>
|-CXXMethodDecl 0x55af6a262ee8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55af6a262df0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55af6a262fa0 <col:20>
| `-OptimizeNoneAttr 0x55af6a262ff8 <col:30>
|-CXXMethodDecl 0x55af6a2630b0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55af6a263020 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55af6a2631f8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55af6a263168 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55af6a263328 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55af6a263458 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55af6a263528 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55af6a2635f8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55af6a263738 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55af6a2636a8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55af6a263880 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55af6a2637f0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55af6a2639c8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55af6a263938 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55af6a263a80 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55af6a263b80 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55af6a263af0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55af6a263c38 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55af6a263cf8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55af6a263df8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55af6a263f78 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55af6a263eb8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55af6a264738 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55af6a264030 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55af6a264698 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55af6a264598 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55af6a264818 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55af6a264968 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55af6a2648d8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55af6a264a20 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55af6a264c68 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55af6a264ae0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55af6a264b58 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55af6a264e28 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55af6a264d38 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55af6a265078 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55af6a264ef0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55af6a264f68 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55af6a265138 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55af6a265398 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55af6a2652a0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55af6a265468 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.5 = type { %class.vector_memory.6 }
  NonVirtualBaseLLVMType:%class.Vector.5 = type { %class.vector_memory.6 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55af6a24a598 prev 0x55af6a22fe98 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55af6a24a690 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55af6a24a780 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55af6a279350 <col:16, line:828:9>
|-CXXDestructorDecl 0x55af6a24a870 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55af6a279360 <col:25, line:830:9>
|-CXXMethodDecl 0x55af6a24a970 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55af6a24aa20 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55af6a255540 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55af6a255540
| `-ParmVarDecl 0x55af6a255648 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55af6a255e08 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55af6a255e08
  `-ParmVarDecl 0x55af6a255f18 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55af6a22fca8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55af6a22fe08 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55af6a22fe98 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55af6a22ff50 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55af6a230058 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55af6a22ff88 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55af6a266a28 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55af6a266a08 <col:31> 'int' 0
|-CXXConstructorDecl 0x55af6a230378 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55af6a2301f0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55af6a230268 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55af6a266a60 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55af6a266a40 <col:59> 'int' 0
|-CXXConstructorDecl 0x55af6a230550 <line:265:5, col:56> col:5 used Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55af6a230440 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55af6a2304b8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55af6a266a98 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55af6a266a78 <col:55> 'int' 0
|-CXXConstructorDecl 0x55af6a230908 <line:271:5, line:272:32> line:271:5 Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55af6a2306f0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55af6a230768 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55af6a2307e0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55af6a266ad0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55af6a266ab0 <col:31> 'int' 0
|-CXXConstructorDecl 0x55af6a230ac8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55af6a230a08 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55af6a230bc0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55af6a230da8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55af6a230cb0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55af6a230e98 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55af6a266e80 <col:24, line:291:5>
|   `-ReturnStmt 0x55af6a266e70 <line:290:9, col:79>
|     `-BinaryOperator 0x55af6a266e50 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55af6a266d28 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55af6a266c80 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55af6a266c60 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55af6a266b58 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55af6a266b40 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55af6a266b28 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55af6a266af8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55af6a256e30
|       | |   |       `-CXXThisExpr 0x55af6a266ae8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55af6a266c48 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55af6a266c30 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55af6a266bf8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55af6a266bc8 <col:28, col:35> '<bound member function type>' ->size 0x55af6a211128
|       | |           `-ImplicitCastExpr 0x55af6a266c18 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55af6a266bb0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55af6a266b80 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55af6a256e30
|       | |                 `-CXXThisExpr 0x55af6a266b70 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55af6a266d10 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55af6a266cf8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55af6a266ce0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55af6a266cb0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55af6a2655b0
|       |         `-CXXThisExpr 0x55af6a266ca0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55af6a266e30 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55af6a266e18 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55af6a266e00 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55af6a266dc0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55af6a266da8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55af6a266d58 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55af6a265660
|         |     |   `-CXXThisExpr 0x55af6a266d48 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55af6a266d88 <col:73> 'int' 0
|         `-IntegerLiteral 0x55af6a266de0 <col:79> 'int' 0
|-CXXMethodDecl 0x55af6a230f58 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55af6a267058 <col:32, line:296:5>
|   `-ReturnStmt 0x55af6a267048 <line:295:9, col:49>
|     `-BinaryOperator 0x55af6a267028 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55af6a266f08 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55af6a266ef0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55af6a266ed8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55af6a266ea8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55af6a2655b0
|       |       `-CXXThisExpr 0x55af6a266e98 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55af6a267008 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55af6a266ff0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55af6a266fd8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55af6a266f98 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55af6a266f80 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55af6a266f30 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55af6a265660
|         |     |   `-CXXThisExpr 0x55af6a266f20 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55af6a266f60 <col:43> 'int' 0
|         `-IntegerLiteral 0x55af6a266fb8 <col:49> 'int' 0
|-CXXMethodDecl 0x55af6a231048 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55af6a267268 <col:19, line:306:5>
|   |-IfStmt 0x55af6a267188 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55af6a2670c8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55af6a2670b0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55af6a267080 <col:13> 'Vector<String> *' lvalue ->_conf 0x55af6a256e30
|   | |     `-CXXThisExpr 0x55af6a267070 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55af6a267168 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55af6a267138 <col:13, col:20> '<bound member function type>' ->clear 0x55af6a213af8
|   |     `-ImplicitCastExpr 0x55af6a267120 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55af6a2670f0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55af6a256e30
|   |         `-CXXThisExpr 0x55af6a2670e0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55af6a267210 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55af6a2671e0 <col:9, col:16> '<bound member function type>' .clear 0x55af6a265138
|   |   `-MemberExpr 0x55af6a2671b0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55af6a265550
|   |     `-CXXThisExpr 0x55af6a2671a0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55af6a267258 <line:305:9, col:17>
|     `-UnaryOperator 0x55af6a267240 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55af6a267230 <col:17> 'Args *' this
|-CXXMethodDecl 0x55af6a2312c8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55af6a2311d0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55af6a231448 <line:317:5, col:38> col:11 used push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55af6a231380 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55af6a234d38 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55af6a2314f0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55af6a234c98 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55af6a231598 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55af6a231610 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55af6a267588 <col:67, line:327:5>
|     |-WhileStmt 0x55af6a267538 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55af6a267350 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55af6a2672d0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55af6a1695b8 0x55af69fb2b98 0x55af69fb2870 0x55af69fa4050 0x55af69fa3d00 0x55af69fa35f0 0x55af69f75f60 0x55af69f02420
|     | | |-DeclRefExpr 0x55af6a267290 <col:16> 'Iter' lvalue ParmVar 0x55af6a231598 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55af6a2672b0 <col:25> 'Iter' lvalue ParmVar 0x55af6a231610 'end' 'Iter'
|     | `-CompoundStmt 0x55af6a267518 <col:30, line:325:9>
|     |   |-CallExpr 0x55af6a2674b8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55af6a267398 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55af6a267488 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55af6a267418 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55af6a16e738 0x55af6a16e358 0x55af6a16df88 0x55af6a16dba8 0x55af6a16d7c8 0x55af6a16d3f8
|     |   |   `-DeclRefExpr 0x55af6a2673f8 <col:24> 'Iter' lvalue ParmVar 0x55af6a231598 'begin' 'Iter'
|     |   `-UnaryOperator 0x55af6a267500 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55af6a2674e0 <col:15> 'Iter' lvalue ParmVar 0x55af6a231598 'begin' 'Iter'
|     `-ReturnStmt 0x55af6a267578 <line:326:9, col:17>
|       `-UnaryOperator 0x55af6a267560 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55af6a267550 <col:17> 'Args *' this
|-CXXMethodDecl 0x55af6a234e40 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55af6a234db0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55af6a234f88 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55af6a234ef8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55af6a235050 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55af6a267668 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55af6a267608 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55af6a2675b8 <col:9> '<bound member function type>' ->reset_from 0x55af6a2659d8
|   | | `-CXXThisExpr 0x55af6a2675a8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55af6a2675e8 <col:20> 'int' 0
|   `-ReturnStmt 0x55af6a267658 <line:352:9, col:17>
|     `-UnaryOperator 0x55af6a267640 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55af6a267630 <col:17> 'Args *' this
|-VarDecl 0x55af6a235108 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55af6a235170 <col:38> 'int' 1
|-VarDecl 0x55af6a235200 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55af6a235268 <col:39> 'int' 2
|-VarDecl 0x55af6a2352f8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55af6a235360 <col:39> 'int' 4
|-VarDecl 0x55af6a2353f0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55af6a235458 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55af6a2357d8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55af6a2354d0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55af6a235738 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55af6a235580 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a235628 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55af6a2677c0 <col:43, line:371:5>
|     `-ReturnStmt 0x55af6a2677b0 <line:370:9, col:34>
|       `-CallExpr 0x55af6a267778 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a267698 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a267718 <col:21> 'const char *' lvalue ParmVar 0x55af6a235580 'keyword' 'const char *'
|         |-IntegerLiteral 0x55af6a267738 <col:30> 'int' 0
|         `-DeclRefExpr 0x55af6a267758 <col:33> 'T' lvalue ParmVar 0x55af6a235628 'x' 'T &'
|-FunctionTemplateDecl 0x55af6a235b08 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55af6a235840 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55af6a235a68 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55af6a2358f0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a235998 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55af6a267910 <col:45, line:375:5>
|     `-ReturnStmt 0x55af6a267900 <line:374:9, col:42>
|       `-CallExpr 0x55af6a2678c8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a2677e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a267868 <col:21> 'const char *' lvalue ParmVar 0x55af6a2358f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55af6a267888 <col:30> 'const int' lvalue Var 0x55af6a235108 'mandatory' 'const int'
|         `-DeclRefExpr 0x55af6a2678a8 <col:41> 'T' lvalue ParmVar 0x55af6a235998 'x' 'T &'
|-FunctionTemplateDecl 0x55af6a235e38 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55af6a235b70 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55af6a235d98 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55af6a235c20 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a235cc8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55af6a267a60 <col:45, line:379:5>
|     `-ReturnStmt 0x55af6a267a50 <line:378:9, col:43>
|       `-CallExpr 0x55af6a267a18 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a267938 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a2679b8 <col:21> 'const char *' lvalue ParmVar 0x55af6a235c20 'keyword' 'const char *'
|         |-DeclRefExpr 0x55af6a2679d8 <col:30> 'const int' lvalue Var 0x55af6a235200 'positional' 'const int'
|         `-DeclRefExpr 0x55af6a2679f8 <col:42> 'T' lvalue ParmVar 0x55af6a235cc8 'x' 'T &'
|-FunctionTemplateDecl 0x55af6a236168 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55af6a235ea0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55af6a2360c8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55af6a235f50 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55af6a235ff8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55af6a267c60 <col:46, line:383:5>
| |   `-ReturnStmt 0x55af6a267c50 <line:382:9, col:55>
| |     `-CallExpr 0x55af6a267c18 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55af6a267a88 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55af6a267b08 <col:21> 'const char *' lvalue ParmVar 0x55af6a235f50 'keyword' 'const char *'
| |       |-BinaryOperator 0x55af6a267bd8 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55af6a267b88 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55af6a267b68 <col:30> 'const int' lvalue Var 0x55af6a235108 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55af6a267bc0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55af6a267ba0 <col:42> 'const int' lvalue Var 0x55af6a235200 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55af6a267bf8 <col:54> 'T' lvalue ParmVar 0x55af6a235ff8 'x' 'T &'
| `-CXXMethodDecl 0x55af6a2aa9b8 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55af6a2aa7d0 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55af6a2aa8a8 <col:40, col:43> col:43 x 'unsigned int &'
|-FunctionTemplateDecl 0x55af6a236568 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55af6a2361d0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55af6a2364c8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55af6a236280 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a236300 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55af6a2363a8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55af6a267da0 <col:54, line:388:5>
|     |-CallExpr 0x55af6a267d28 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55af6a267c78 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55af6a267cb8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55af6a267cc8 <col:30> 'const char *' lvalue ParmVar 0x55af6a236280 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55af6a267ce8 <col:39> 'int' lvalue ParmVar 0x55af6a236300 'flags' 'int'
|     | `-DeclRefExpr 0x55af6a267d08 <col:46> 'T' lvalue ParmVar 0x55af6a2363a8 'x' 'T &'
|     `-ReturnStmt 0x55af6a267d90 <line:387:9, col:17>
|       `-UnaryOperator 0x55af6a267d78 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55af6a267d68 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55af6a236a18 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55af6a2365d8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55af6a236658 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55af6a236978 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55af6a236718 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a2367b8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55af6a236858 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55af6a267f10 <col:74, line:403:5>
|     `-ReturnStmt 0x55af6a267f00 <line:402:9, col:56>
|       `-CallExpr 0x55af6a267ec0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a267dd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a267e40 <col:28> 'const char *' lvalue ParmVar 0x55af6a236718 'keyword' 'const char *'
|         |-IntegerLiteral 0x55af6a267e60 <col:37> 'int' 0
|         |-DeclRefExpr 0x55af6a267e80 <col:40> 'T' lvalue ParmVar 0x55af6a2367b8 'x' 'T &'
|         `-DeclRefExpr 0x55af6a267ea0 <col:43> 'const V' lvalue ParmVar 0x55af6a236858 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55af6a236e88 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55af6a236a88 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55af6a236b08 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55af6a236de8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55af6a236bc8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a236c68 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55af6a236d08 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55af6a268078 <col:76, line:407:5>
|     `-ReturnStmt 0x55af6a268068 <line:406:9, col:65>
|       `-CallExpr 0x55af6a268028 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a267f38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a267fa8 <col:28> 'const char *' lvalue ParmVar 0x55af6a236bc8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55af6a267fc8 <col:37> 'const int' lvalue Var 0x55af6a235200 'positional' 'const int'
|         |-DeclRefExpr 0x55af6a267fe8 <col:49> 'T' lvalue ParmVar 0x55af6a236c68 'x' 'T &'
|         `-DeclRefExpr 0x55af6a268008 <col:52> 'const V' lvalue ParmVar 0x55af6a236d08 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55af6a2373d8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55af6a236ef8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55af6a236f78 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55af6a237338 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55af6a237038 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a2370b8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55af6a237158 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55af6a2371f8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55af6a2681e0 <col:85, line:412:5>
|     |-CallExpr 0x55af6a268160 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55af6a268090 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55af6a2680d0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55af6a2680e0 <col:37> 'const char *' lvalue ParmVar 0x55af6a237038 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55af6a268100 <col:46> 'int' lvalue ParmVar 0x55af6a2370b8 'flags' 'int'
|     | |-DeclRefExpr 0x55af6a268120 <col:53> 'T' lvalue ParmVar 0x55af6a237158 'x' 'T &'
|     | `-DeclRefExpr 0x55af6a268140 <col:56> 'const V' lvalue ParmVar 0x55af6a2371f8 'default_value' 'const V &'
|     `-ReturnStmt 0x55af6a2681d0 <line:411:9, col:17>
|       `-UnaryOperator 0x55af6a2681b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55af6a2681a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55af6a237868 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55af6a237450 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a2374c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55af6a2377c8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55af6a237588 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a237600 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a2376a8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55af6a268360 <col:53, line:425:5>
|     `-ReturnStmt 0x55af6a268350 <line:424:9, col:42>
|       `-CallExpr 0x55af6a268310 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a268210 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a268290 <col:21> 'const char *' lvalue ParmVar 0x55af6a237588 'keyword' 'const char *'
|         |-IntegerLiteral 0x55af6a2682b0 <col:30> 'int' 0
|         |-DeclRefExpr 0x55af6a2682d0 <col:33> 'P' lvalue ParmVar 0x55af6a237600 'parser' 'P'
|         `-DeclRefExpr 0x55af6a2682f0 <col:41> 'T' lvalue ParmVar 0x55af6a2376a8 'x' 'T &'
|-FunctionTemplateDecl 0x55af6a237cb8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55af6a2378d8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a237958 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55af6a237c18 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55af6a237a18 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a237a90 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a237b38 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55af6a2684d8 <col:55, line:429:5>
|     `-ReturnStmt 0x55af6a2684c8 <line:428:9, col:50>
|       `-CallExpr 0x55af6a268488 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a268388 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a268408 <col:21> 'const char *' lvalue ParmVar 0x55af6a237a18 'keyword' 'const char *'
|         |-DeclRefExpr 0x55af6a268428 <col:30> 'const int' lvalue Var 0x55af6a235108 'mandatory' 'const int'
|         |-DeclRefExpr 0x55af6a268448 <col:41> 'P' lvalue ParmVar 0x55af6a237a90 'parser' 'P'
|         `-DeclRefExpr 0x55af6a268468 <col:49> 'T' lvalue ParmVar 0x55af6a237b38 'x' 'T &'
|-FunctionTemplateDecl 0x55af6a238108 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55af6a237d28 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a237da8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55af6a238068 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55af6a237e68 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a237ee0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a237f88 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55af6a268650 <col:55, line:433:5>
|     `-ReturnStmt 0x55af6a268640 <line:432:9, col:51>
|       `-CallExpr 0x55af6a268600 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a268500 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a268580 <col:21> 'const char *' lvalue ParmVar 0x55af6a237e68 'keyword' 'const char *'
|         |-DeclRefExpr 0x55af6a2685a0 <col:30> 'const int' lvalue Var 0x55af6a235200 'positional' 'const int'
|         |-DeclRefExpr 0x55af6a2685c0 <col:42> 'P' lvalue ParmVar 0x55af6a237ee0 'parser' 'P'
|         `-DeclRefExpr 0x55af6a2685e0 <col:50> 'T' lvalue ParmVar 0x55af6a237f88 'x' 'T &'
|-FunctionTemplateDecl 0x55af6a238558 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55af6a238178 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a2381f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55af6a2384b8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55af6a2382b8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a238330 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a2383d8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55af6a268878 <col:56, line:437:5>
|     `-ReturnStmt 0x55af6a268868 <line:436:9, col:63>
|       `-CallExpr 0x55af6a268828 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a268678 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a2686f8 <col:21> 'const char *' lvalue ParmVar 0x55af6a2382b8 'keyword' 'const char *'
|         |-BinaryOperator 0x55af6a2687c8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55af6a268778 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55af6a268758 <col:30> 'const int' lvalue Var 0x55af6a235108 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55af6a2687b0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55af6a268790 <col:42> 'const int' lvalue Var 0x55af6a235200 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55af6a2687e8 <col:54> 'P' lvalue ParmVar 0x55af6a238330 'parser' 'P'
|         `-DeclRefExpr 0x55af6a268808 <col:62> 'T' lvalue ParmVar 0x55af6a2383d8 'x' 'T &'
|-FunctionTemplateDecl 0x55af6a238a88 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55af6a2385c8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a238648 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55af6a2389e8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55af6a238708 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a238788 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55af6a238800 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a2388a8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55af6a2689e0 <col:64, line:442:5>
|     |-CallExpr 0x55af6a268960 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55af6a268890 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55af6a2688d0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55af6a2688e0 <col:30> 'const char *' lvalue ParmVar 0x55af6a238708 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55af6a268900 <col:39> 'int' lvalue ParmVar 0x55af6a238788 'flags' 'int'
|     | |-DeclRefExpr 0x55af6a268920 <col:46> 'P' lvalue ParmVar 0x55af6a238800 'parser' 'P'
|     | `-DeclRefExpr 0x55af6a268940 <col:54> 'T' lvalue ParmVar 0x55af6a2388a8 'x' 'T &'
|     `-ReturnStmt 0x55af6a2689d0 <line:441:9, col:17>
|       `-UnaryOperator 0x55af6a2689b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55af6a2689a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55af6a239088 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55af6a238b00 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a238b78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55af6a238bf8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55af6a238fe8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55af6a238cc0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a238d38 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a238dd8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55af6a238ea8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55af6a268b78 <col:84, line:458:5>
|     `-ReturnStmt 0x55af6a268b68 <line:457:9, col:64>
|       `-CallExpr 0x55af6a268b20 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a268a10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a268a80 <col:28> 'const char *' lvalue ParmVar 0x55af6a238cc0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55af6a268aa0 <col:37> 'int' 0
|         |-DeclRefExpr 0x55af6a268ac0 <col:40> 'P' lvalue ParmVar 0x55af6a238d38 'parser' 'P'
|         |-DeclRefExpr 0x55af6a268ae0 <col:48> 'T' lvalue ParmVar 0x55af6a238dd8 'x' 'T &'
|         `-DeclRefExpr 0x55af6a268b00 <col:51> 'const V' lvalue ParmVar 0x55af6a238ea8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55af6a239608 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55af6a239100 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a239178 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55af6a2391f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55af6a239568 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55af6a2392c0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a239338 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a2393d8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55af6a239478 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55af6a268d08 <col:86, line:462:5>
|     `-ReturnStmt 0x55af6a268cf8 <line:461:9, col:73>
|       `-CallExpr 0x55af6a268cb0 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a268ba0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a268c10 <col:28> 'const char *' lvalue ParmVar 0x55af6a2392c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55af6a268c30 <col:37> 'const int' lvalue Var 0x55af6a235200 'positional' 'const int'
|         |-DeclRefExpr 0x55af6a268c50 <col:49> 'P' lvalue ParmVar 0x55af6a239338 'parser' 'P'
|         |-DeclRefExpr 0x55af6a268c70 <col:57> 'T' lvalue ParmVar 0x55af6a2393d8 'x' 'T &'
|         `-DeclRefExpr 0x55af6a268c90 <col:60> 'const V' lvalue ParmVar 0x55af6a239478 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55af6a239c68 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55af6a239680 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a2396f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55af6a239778 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55af6a239bc8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55af6a239840 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a2398c0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55af6a239938 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a2399d8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55af6a239a78 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55af6a268e98 <col:95, line:467:5>
|     |-CallExpr 0x55af6a268e10 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55af6a268d20 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55af6a268d60 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55af6a268d70 <col:37> 'const char *' lvalue ParmVar 0x55af6a239840 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55af6a268d90 <col:46> 'int' lvalue ParmVar 0x55af6a2398c0 'flags' 'int'
|     | |-DeclRefExpr 0x55af6a268db0 <col:53> 'P' lvalue ParmVar 0x55af6a239938 'parser' 'P'
|     | |-DeclRefExpr 0x55af6a268dd0 <col:61> 'T' lvalue ParmVar 0x55af6a2399d8 'x' 'T &'
|     | `-DeclRefExpr 0x55af6a268df0 <col:64> 'const V' lvalue ParmVar 0x55af6a239a78 'default_value' 'const V &'
|     `-ReturnStmt 0x55af6a268e88 <line:466:9, col:17>
|       `-UnaryOperator 0x55af6a268e70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55af6a268e60 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55af6a23a248 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55af6a239ce8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a239d68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55af6a239de8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55af6a23a1a8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55af6a239eb0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a239f28 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a239fc8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55af6a23a068 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55af6a269040 <col:63, line:481:5>
|     `-ReturnStmt 0x55af6a269030 <line:480:9, col:47>
|       `-CallExpr 0x55af6a268fe8 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a268ec8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a268f48 <col:21> 'const char *' lvalue ParmVar 0x55af6a239eb0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55af6a268f68 <col:30> 'int' 0
|         |-DeclRefExpr 0x55af6a268f88 <col:33> 'P' lvalue ParmVar 0x55af6a239f28 'parser' 'P'
|         |-DeclRefExpr 0x55af6a268fa8 <col:41> 'T1' lvalue ParmVar 0x55af6a239fc8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55af6a268fc8 <col:45> 'T2' lvalue ParmVar 0x55af6a23a068 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55af6a23a7c8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55af6a23a2c0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a23a338 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55af6a23a3b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55af6a23a728 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55af6a23a480 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a23a4f8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a23a598 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55af6a23a638 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55af6a26aac8 <col:65, line:485:5>
|     `-ReturnStmt 0x55af6a26aab8 <line:484:9, col:55>
|       `-CallExpr 0x55af6a26aa70 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a26a950 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a26a9d0 <col:21> 'const char *' lvalue ParmVar 0x55af6a23a480 'keyword' 'const char *'
|         |-DeclRefExpr 0x55af6a26a9f0 <col:30> 'const int' lvalue Var 0x55af6a235108 'mandatory' 'const int'
|         |-DeclRefExpr 0x55af6a26aa10 <col:41> 'P' lvalue ParmVar 0x55af6a23a4f8 'parser' 'P'
|         |-DeclRefExpr 0x55af6a26aa30 <col:49> 'T1' lvalue ParmVar 0x55af6a23a598 'x1' 'T1 &'
|         `-DeclRefExpr 0x55af6a26aa50 <col:53> 'T2' lvalue ParmVar 0x55af6a23a638 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55af6a23ad48 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55af6a23a840 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a23a8b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55af6a23a938 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55af6a23aca8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55af6a23aa00 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a23aa78 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a23ab18 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55af6a23abb8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55af6a26ac68 <col:65, line:489:5>
|     `-ReturnStmt 0x55af6a26ac58 <line:488:9, col:56>
|       `-CallExpr 0x55af6a26ac10 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a26aaf0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a26ab70 <col:21> 'const char *' lvalue ParmVar 0x55af6a23aa00 'keyword' 'const char *'
|         |-DeclRefExpr 0x55af6a26ab90 <col:30> 'const int' lvalue Var 0x55af6a235200 'positional' 'const int'
|         |-DeclRefExpr 0x55af6a26abb0 <col:42> 'P' lvalue ParmVar 0x55af6a23aa78 'parser' 'P'
|         |-DeclRefExpr 0x55af6a26abd0 <col:50> 'T1' lvalue ParmVar 0x55af6a23ab18 'x1' 'T1 &'
|         `-DeclRefExpr 0x55af6a26abf0 <col:54> 'T2' lvalue ParmVar 0x55af6a23abb8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55af6a23b2c8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55af6a23adc0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a23ae38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55af6a23aeb8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55af6a23b228 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55af6a23af80 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a23aff8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a23b098 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55af6a23b138 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55af6a26aeb8 <col:66, line:493:5>
|     `-ReturnStmt 0x55af6a26aea8 <line:492:9, col:68>
|       `-CallExpr 0x55af6a26ae60 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a26ac90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a26ad10 <col:21> 'const char *' lvalue ParmVar 0x55af6a23af80 'keyword' 'const char *'
|         |-BinaryOperator 0x55af6a26ade0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55af6a26ad90 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55af6a26ad70 <col:30> 'const int' lvalue Var 0x55af6a235108 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55af6a26adc8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55af6a26ada8 <col:42> 'const int' lvalue Var 0x55af6a235200 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55af6a26ae00 <col:54> 'P' lvalue ParmVar 0x55af6a23aff8 'parser' 'P'
|         |-DeclRefExpr 0x55af6a26ae20 <col:62> 'T1' lvalue ParmVar 0x55af6a23b098 'x1' 'T1 &'
|         `-DeclRefExpr 0x55af6a26ae40 <col:66> 'T2' lvalue ParmVar 0x55af6a23b138 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55af6a23b928 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55af6a23b340 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a23b3b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55af6a23b438 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55af6a23b888 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55af6a23b500 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a23b580 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55af6a23b5f8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a23b698 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55af6a23b738 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55af6a26b048 <col:74, line:498:5>
|     |-CallExpr 0x55af6a26afc0 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55af6a26aed0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55af6a26af10 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55af6a26af20 <col:30> 'const char *' lvalue ParmVar 0x55af6a23b500 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55af6a26af40 <col:39> 'int' lvalue ParmVar 0x55af6a23b580 'flags' 'int'
|     | |-DeclRefExpr 0x55af6a26af60 <col:46> 'P' lvalue ParmVar 0x55af6a23b5f8 'parser' 'P'
|     | |-DeclRefExpr 0x55af6a26af80 <col:54> 'T1' lvalue ParmVar 0x55af6a23b698 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55af6a26afa0 <col:58> 'T2' lvalue ParmVar 0x55af6a23b738 'x2' 'T2 &'
|     `-ReturnStmt 0x55af6a26b038 <line:497:9, col:17>
|       `-UnaryOperator 0x55af6a26b020 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55af6a26b010 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55af6a23bc88 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55af6a23b9a8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55af6a23bbe8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55af6a23ba60 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a23bad8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55af6a26b190 <col:52, line:509:5>
|     `-ReturnStmt 0x55af6a26b180 <line:508:9, col:44>
|       `-CallExpr 0x55af6a26b148 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a26b078 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a26b0e8 <col:26> 'const char *' lvalue ParmVar 0x55af6a23ba60 'keyword' 'const char *'
|         |-IntegerLiteral 0x55af6a26b108 <col:35> 'int' 0
|         `-DeclRefExpr 0x55af6a26b128 <col:38> 'P' lvalue ParmVar 0x55af6a23bad8 'parser' 'P'
|-FunctionTemplateDecl 0x55af6a23bf88 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55af6a23bcf0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55af6a23bee8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55af6a23bda0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a23be18 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55af6a26b2d0 <col:54, line:513:5>
|     `-ReturnStmt 0x55af6a26b2c0 <line:512:9, col:52>
|       `-CallExpr 0x55af6a26b288 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a26b1b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a26b228 <col:26> 'const char *' lvalue ParmVar 0x55af6a23bda0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55af6a26b248 <col:35> 'const int' lvalue Var 0x55af6a235108 'mandatory' 'const int'
|         `-DeclRefExpr 0x55af6a26b268 <col:46> 'P' lvalue ParmVar 0x55af6a23be18 'parser' 'P'
|-FunctionTemplateDecl 0x55af6a23c288 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55af6a23bff0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55af6a23c1e8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55af6a23c0a0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a23c118 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55af6a26b410 <col:54, line:517:5>
|     `-ReturnStmt 0x55af6a26b400 <line:516:9, col:53>
|       `-CallExpr 0x55af6a26b3c8 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a26b2f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a26b368 <col:26> 'const char *' lvalue ParmVar 0x55af6a23c0a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55af6a26b388 <col:35> 'const int' lvalue Var 0x55af6a235200 'positional' 'const int'
|         `-DeclRefExpr 0x55af6a26b3a8 <col:47> 'P' lvalue ParmVar 0x55af6a23c118 'parser' 'P'
|-FunctionTemplateDecl 0x55af6a23c588 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55af6a23c2f0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55af6a23c4e8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55af6a23c3a0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a23c418 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55af6a26b600 <col:55, line:521:5>
|     `-ReturnStmt 0x55af6a26b5f0 <line:520:9, col:65>
|       `-CallExpr 0x55af6a26b5b8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a26b438 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a26b4a8 <col:26> 'const char *' lvalue ParmVar 0x55af6a23c3a0 'keyword' 'const char *'
|         |-BinaryOperator 0x55af6a26b578 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55af6a26b528 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55af6a26b508 <col:35> 'const int' lvalue Var 0x55af6a235108 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55af6a26b560 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55af6a26b540 <col:47> 'const int' lvalue Var 0x55af6a235200 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55af6a26b598 <col:59> 'P' lvalue ParmVar 0x55af6a23c418 'parser' 'P'
|-FunctionTemplateDecl 0x55af6a23c958 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55af6a23c5f0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55af6a23c8b8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55af6a23c6a0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a23c720 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55af6a23c798 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55af6a26b740 <col:63, line:526:5>
|     |-CallExpr 0x55af6a26b6c8 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55af6a26b618 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55af6a26b658 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55af6a26b668 <col:35> 'const char *' lvalue ParmVar 0x55af6a23c6a0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55af6a26b688 <col:44> 'int' lvalue ParmVar 0x55af6a23c720 'flags' 'int'
|     | `-DeclRefExpr 0x55af6a26b6a8 <col:51> 'P' lvalue ParmVar 0x55af6a23c798 'parser' 'P'
|     `-ReturnStmt 0x55af6a26b730 <line:525:9, col:17>
|       `-UnaryOperator 0x55af6a26b718 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55af6a26b708 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55af6a242cc8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55af6a23c9c8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a23ca48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55af6a242c28 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55af6a23cb08 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a23cb80 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a242b40 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55af6a26b898 <col:58, line:541:5>
|     `-ReturnStmt 0x55af6a26b888 <line:540:9, col:39>
|       `-CallExpr 0x55af6a26b850 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a26b770 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a26b7f0 <col:21> 'const char *' lvalue ParmVar 0x55af6a23cb08 'keyword' 'const char *'
|         |-DeclRefExpr 0x55af6a26b810 <col:30> 'P' lvalue ParmVar 0x55af6a23cb80 'parser' 'P'
|         `-DeclRefExpr 0x55af6a26b830 <col:38> 'T' lvalue ParmVar 0x55af6a242b40 'x' 'T &'
|-FunctionTemplateDecl 0x55af6a243118 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55af6a242d38 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a242db8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55af6a243078 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55af6a242e78 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a242ef0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a242f98 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55af6a26b9d0 <col:60, line:545:5>
|     `-ReturnStmt 0x55af6a26b9c0 <line:544:9, col:41>
|       `-CallExpr 0x55af6a26b988 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a26b8c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a26b928 <col:23> 'const char *' lvalue ParmVar 0x55af6a242e78 'keyword' 'const char *'
|         |-DeclRefExpr 0x55af6a26b948 <col:32> 'P' lvalue ParmVar 0x55af6a242ef0 'parser' 'P'
|         `-DeclRefExpr 0x55af6a26b968 <col:40> 'T' lvalue ParmVar 0x55af6a242f98 'x' 'T &'
|-FunctionTemplateDecl 0x55af6a243568 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55af6a243188 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a243208 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55af6a2434c8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55af6a2432c8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a243340 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a2433e8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55af6a26bb08 <col:60, line:549:5>
|     `-ReturnStmt 0x55af6a26baf8 <line:548:9, col:41>
|       `-CallExpr 0x55af6a26bac0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a26b9f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a26ba60 <col:23> 'const char *' lvalue ParmVar 0x55af6a2432c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55af6a26ba80 <col:32> 'P' lvalue ParmVar 0x55af6a243340 'parser' 'P'
|         `-DeclRefExpr 0x55af6a26baa0 <col:40> 'T' lvalue ParmVar 0x55af6a2433e8 'x' 'T &'
|-FunctionTemplateDecl 0x55af6a2439b8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55af6a2435d8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a243658 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55af6a243918 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55af6a243718 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a243790 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a243838 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55af6a26bc40 <col:61, line:553:5>
|     `-ReturnStmt 0x55af6a26bc30 <line:552:9, col:42>
|       `-CallExpr 0x55af6a26bbf8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a26bb30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a26bb98 <col:24> 'const char *' lvalue ParmVar 0x55af6a243718 'keyword' 'const char *'
|         |-DeclRefExpr 0x55af6a26bbb8 <col:33> 'P' lvalue ParmVar 0x55af6a243790 'parser' 'P'
|         `-DeclRefExpr 0x55af6a26bbd8 <col:41> 'T' lvalue ParmVar 0x55af6a243838 'x' 'T &'
|-FunctionTemplateDecl 0x55af6a243e98 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55af6a243a28 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a243aa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55af6a243df8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55af6a243b68 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a243be8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55af6a243c60 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a243d08 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55af6a26bdb8 <col:69, line:557:5>
|     `-ReturnStmt 0x55af6a26bda8 <line:556:9, col:46>
|       `-CallExpr 0x55af6a26bd68 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a26bc68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a26bce8 <col:21> 'const char *' lvalue ParmVar 0x55af6a243b68 'keyword' 'const char *'
|         |-DeclRefExpr 0x55af6a26bd08 <col:30> 'int' lvalue ParmVar 0x55af6a243be8 'flags' 'int'
|         |-DeclRefExpr 0x55af6a26bd28 <col:37> 'P' lvalue ParmVar 0x55af6a243c60 'parser' 'P'
|         `-DeclRefExpr 0x55af6a26bd48 <col:45> 'T' lvalue ParmVar 0x55af6a243d08 'x' 'T &'
|-FunctionTemplateDecl 0x55af6a2441a8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55af6a243f10 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55af6a244108 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55af6a243fc0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a244038 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55af6a26bef8 <col:56, line:571:5>
|     `-ReturnStmt 0x55af6a26bee8 <line:570:9, col:48>
|       `-CallExpr 0x55af6a26beb0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a26bde0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a26be50 <col:30> 'const char *' lvalue ParmVar 0x55af6a243fc0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55af6a26be70 <col:39> 'int' 0
|         `-DeclRefExpr 0x55af6a26be90 <col:42> 'P' lvalue ParmVar 0x55af6a244038 'parser' 'P'
|-FunctionTemplateDecl 0x55af6a244538 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55af6a244210 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55af6a244498 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55af6a2442c0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a244340 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55af6a2443b8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55af6a26c0c8 <col:67, line:576:5>
|     |-CallExpr 0x55af6a26c050 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55af6a26bf10 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55af6a26bf50 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55af6a26bf60 <col:39> 'const char *' lvalue ParmVar 0x55af6a2442c0 'keyword' 'const char *'
|     | |-BinaryOperator 0x55af6a26c010 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55af6a26bfc0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55af6a26bf80 <col:48> 'int' lvalue ParmVar 0x55af6a244340 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55af6a26bff8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55af6a26bfd8 <col:56> 'const int' lvalue Var 0x55af6a2353f0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55af6a26c030 <col:68> 'P' lvalue ParmVar 0x55af6a2443b8 'parser' 'P'
|     `-ReturnStmt 0x55af6a26c0b8 <line:575:9, col:17>
|       `-UnaryOperator 0x55af6a26c0a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55af6a26c090 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55af6a244988 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55af6a2445a8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a244628 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55af6a2448e8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55af6a2446e8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a244760 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a244808 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55af6a26c238 <col:62, line:592:5>
|     `-ReturnStmt 0x55af6a26c228 <line:591:9, col:51>
|       `-CallExpr 0x55af6a26c1e8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a26c0f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a26c168 <col:30> 'const char *' lvalue ParmVar 0x55af6a2446e8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55af6a26c188 <col:39> 'int' 0
|         |-DeclRefExpr 0x55af6a26c1a8 <col:42> 'P' lvalue ParmVar 0x55af6a244760 'parser' 'P'
|         `-DeclRefExpr 0x55af6a26c1c8 <col:50> 'T' lvalue ParmVar 0x55af6a244808 'x' 'T &'
|-FunctionTemplateDecl 0x55af6a244e68 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55af6a2449f8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a244a78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55af6a244dc8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55af6a244b38 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a244bb8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55af6a244c30 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a244cd8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55af6a26c430 <col:73, line:597:5>
|     |-CallExpr 0x55af6a26c3b0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55af6a26c250 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55af6a26c290 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55af6a26c2a0 <col:39> 'const char *' lvalue ParmVar 0x55af6a244b38 'keyword' 'const char *'
|     | |-BinaryOperator 0x55af6a26c350 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55af6a26c300 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55af6a26c2c0 <col:48> 'int' lvalue ParmVar 0x55af6a244bb8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55af6a26c338 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55af6a26c318 <col:56> 'const int' lvalue Var 0x55af6a2353f0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55af6a26c370 <col:68> 'P' lvalue ParmVar 0x55af6a244c30 'parser' 'P'
|     | `-DeclRefExpr 0x55af6a26c390 <col:76> 'T' lvalue ParmVar 0x55af6a244cd8 'x' 'T &'
|     `-ReturnStmt 0x55af6a26c420 <line:596:9, col:17>
|       `-UnaryOperator 0x55af6a26c408 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55af6a26c3f8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55af6a245418 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55af6a244ee0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a244f58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55af6a245378 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55af6a245018 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a245090 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a245250 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55af6a26c5a0 <col:65, line:614:5>
|     `-ReturnStmt 0x55af6a26c590 <line:613:9, col:46>
|       `-CallExpr 0x55af6a26c550 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a26c460 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a26c4d0 <col:25> 'const char *' lvalue ParmVar 0x55af6a245018 'keyword' 'const char *'
|         |-IntegerLiteral 0x55af6a26c4f0 <col:34> 'int' 0
|         |-DeclRefExpr 0x55af6a26c510 <col:37> 'P' lvalue ParmVar 0x55af6a245090 'parser' 'P'
|         `-DeclRefExpr 0x55af6a26c530 <col:45> 'Vector<T>' lvalue ParmVar 0x55af6a245250 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55af6a245848 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55af6a245488 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55af6a2457a8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55af6a245540 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a245690 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55af6a26c7c0 <col:55, line:618:5>
|     `-ReturnStmt 0x55af6a26c7b0 <line:617:9, col:55>
|       `-CallExpr 0x55af6a26c770 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a26c5c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a26c638 <col:25> 'const char *' lvalue ParmVar 0x55af6a245540 'keyword' 'const char *'
|         |-IntegerLiteral 0x55af6a26c658 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55af6a26c730 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55af6a26c750 <col:54> 'Vector<T>' lvalue ParmVar 0x55af6a245690 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55af6a245e18 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55af6a2458b0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a245928 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55af6a245d78 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55af6a2459e8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a245a68 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55af6a245ae0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a245c30 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55af6a26c9b8 <col:76, line:623:5>
|     |-CallExpr 0x55af6a26c938 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55af6a26c7d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55af6a26c818 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55af6a26c828 <col:34> 'const char *' lvalue ParmVar 0x55af6a2459e8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55af6a26c8d8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55af6a26c888 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55af6a26c848 <col:43> 'int' lvalue ParmVar 0x55af6a245a68 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55af6a26c8c0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55af6a26c8a0 <col:51> 'const int' lvalue Var 0x55af6a2353f0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55af6a26c8f8 <col:63> 'P' lvalue ParmVar 0x55af6a245ae0 'parser' 'P'
|     | `-DeclRefExpr 0x55af6a26c918 <col:71> 'Vector<T>' lvalue ParmVar 0x55af6a245c30 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55af6a26c9a8 <line:622:9, col:17>
|       `-UnaryOperator 0x55af6a26c990 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55af6a26c980 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55af6a246358 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55af6a245e90 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a245f08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55af6a2462b8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55af6a245fc8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a246048 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55af6a246190 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55af6a26cc20 <col:66, line:627:5>
|     `-ReturnStmt 0x55af6a26cc10 <line:626:9, col:59>
|       `-CallExpr 0x55af6a26cbd0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55af6a26c9e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55af6a26ca58 <col:25> 'const char *' lvalue ParmVar 0x55af6a245fc8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55af6a26ca78 <col:34> 'int' lvalue ParmVar 0x55af6a246048 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55af6a26cb90 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55af6a26cbb0 <col:58> 'Vector<T>' lvalue ParmVar 0x55af6a246190 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55af6a2463e8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55af6a26cca0 <col:25, line:633:5>
|   `-ReturnStmt 0x55af6a26cc90 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55af6a26cc78 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55af6a26cc48 <col:16> 'const bool' lvalue ->_status 0x55af6a256c98
|         `-CXXThisExpr 0x55af6a26cc38 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55af6a246568 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55af6a2464a0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55af6a26cd88 <col:27, line:639:5>
|   |-BinaryOperator 0x55af6a26cd30 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55af6a26ccb8 <col:9> 'bool' lvalue ParmVar 0x55af6a2464a0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55af6a26cd18 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55af6a26cce8 <col:13> 'bool' lvalue ->_status 0x55af6a256c98
|   |     `-CXXThisExpr 0x55af6a26ccd8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55af6a26cd78 <line:638:9, col:17>
|     `-UnaryOperator 0x55af6a26cd60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55af6a26cd50 <col:17> 'Args *' this
|-CXXMethodDecl 0x55af6a2466e8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55af6a246628 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55af6a26ce78 <col:39, line:644:5>
|   |-BinaryOperator 0x55af6a26ce20 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55af6a26cda8 <col:9> 'bool' lvalue ParmVar 0x55af6a246628 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55af6a26ce08 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55af6a26cdd8 <col:13> 'const bool' lvalue ->_status 0x55af6a256c98
|   |     `-CXXThisExpr 0x55af6a26cdc8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55af6a26ce68 <line:643:9, col:17>
|     `-UnaryOperator 0x55af6a26ce50 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55af6a26ce40 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55af6a2467b0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55af6a26cf20 <col:30, line:651:5>
|   `-ReturnStmt 0x55af6a26cf10 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55af6a26cef8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55af6a26cec8 <col:16> 'bool' lvalue ->_read_status 0x55af6a22a660
|         `-ImplicitCastExpr 0x55af6a26cea8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55af6a26ce98 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55af6a2468f8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55af6a246868 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55af6a26d028 <col:32, line:658:5>
|   |-BinaryOperator 0x55af6a26cfd0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55af6a26cf38 <col:9> 'bool' lvalue ParmVar 0x55af6a246868 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55af6a26cfb8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55af6a26cf88 <col:13> 'bool' lvalue ->_read_status 0x55af6a22a660
|   |     `-ImplicitCastExpr 0x55af6a26cf68 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55af6a26cf58 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55af6a26d018 <line:657:9, col:17>
|     `-UnaryOperator 0x55af6a26d000 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55af6a26cff0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55af6a246a48 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55af6a2469b8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55af6a26d138 <col:44, line:663:5>
|   |-BinaryOperator 0x55af6a26d0e0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55af6a26d048 <col:9> 'bool' lvalue ParmVar 0x55af6a2469b8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55af6a26d0c8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55af6a26d098 <col:13> 'bool' lvalue ->_read_status 0x55af6a22a660
|   |     `-ImplicitCastExpr 0x55af6a26d078 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55af6a26d068 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55af6a26d128 <line:662:9, col:17>
|     `-UnaryOperator 0x55af6a26d110 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55af6a26d100 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55af6a246b10 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55af6a246bd8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55af6a246ca0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55af6a246d68 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55af6a247078 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55af6a246e08 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55af6a246fd8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55af6a246ee8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55af6a26d4f0 <col:19, line:706:5>
|     `-IfStmt 0x55af6a26d4c8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55af6a26d238 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55af6a26d3f8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55af6a26d3c8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55af6a26d388 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55af6a26d290 <col:42> '<bound member function type>' ->simple_slot 0x55af6a266690
|       |     | `-CXXThisExpr 0x55af6a26d280 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55af6a26d328 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55af6a26d2e0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55af69fb7638
|       |     | `-DeclRefExpr 0x55af6a26d2c0 <col:55> 'T' lvalue ParmVar 0x55af6a246ee8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55af6a26d368 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55af6a26d4b8 <line:705:13, col:34>
|         `-CallExpr 0x55af6a26d490 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55af6a26d418 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55af6a26d470 <col:33> 'T' lvalue ParmVar 0x55af6a246ee8 'x' 'T &'
|-FunctionTemplateDecl 0x55af6a247348 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55af6a2470d8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55af6a2472a8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55af6a2471b8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55af6a26d8d0 <col:31, line:717:5>
|     |-DeclStmt 0x55af6a26d630 <line:713:9, col:23>
|     | `-VarDecl 0x55af6a26d518 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55af6a26d608 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55af6a26d590 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55af6a26d5e8 <col:21> 'T' lvalue ParmVar 0x55af6a2471b8 'x' 'T &'
|     |-IfStmt 0x55af6a26d880 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55af6a26d728 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55af6a26d860 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55af6a26d800 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55af6a26d790 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55af6a16e738 0x55af6a16e358 0x55af6a16df88 0x55af6a16dba8 0x55af6a16d7c8 0x55af6a16d3f8
|     |   | `-DeclRefExpr 0x55af6a26d770 <col:14> 'T *' lvalue Var 0x55af6a26d518 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55af6a26d840 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55af6a26d8b8 <line:716:9, col:16>
|       `-DeclRefExpr 0x55af6a26d898 <col:16> 'T *' lvalue Var 0x55af6a26d518 's' 'T *'
|-FunctionTemplateDecl 0x55af6a247758 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55af6a2473a8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55af6a247428 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55af6a2476b8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55af6a247508 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55af6a2475a8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55af6a26dbe0 <col:37, line:726:5>
|     |-IfStmt 0x55af6a26db70 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55af6a26db90 <line:723:13, col:26>
|     | | `-VarDecl 0x55af6a26d938 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55af6a26da28 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55af6a26d9b0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55af6a26da08 <col:25> 'T' lvalue ParmVar 0x55af6a247508 'x' 'T &'
|     | |-DeclRefExpr 0x55af6a26da50 <col:16> 'T *' lvalue Var 0x55af6a26d938 's' 'T *'
|     | `-BinaryOperator 0x55af6a26db50 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55af6a26db00 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55af6a26da90 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55af6a16e738 0x55af6a16e358 0x55af6a16df88 0x55af6a16dba8 0x55af6a16d7c8 0x55af6a16d3f8
|     |   | `-DeclRefExpr 0x55af6a26da70 <col:14> 'T *' lvalue Var 0x55af6a26d938 's' 'T *'
|     |   `-DeclRefExpr 0x55af6a26db30 <col:18> 'const V' lvalue ParmVar 0x55af6a2475a8 'value' 'const V &'
|     `-ReturnStmt 0x55af6a26dbd0 <line:725:9, col:17>
|       `-UnaryOperator 0x55af6a26dbb8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55af6a26dba8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55af6a247b58 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55af6a2477c0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55af6a247ab8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55af6a247870 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a2478f0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55af6a247998 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55af6a26ea00 <col:65, line:737:5>
|     |-DeclStmt 0x55af6a26dc78 <line:732:9, col:26>
|     | `-VarDecl 0x55af6a26dc10 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55af6a26e9c8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55af6a26e9e8 <line:733:13, col:58>
|       | `-VarDecl 0x55af6a26dca0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55af6a26de80 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55af6a26de50 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55af6a26de38 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55af6a26de18 <col:26, col:58> 'String' (CXXTemporary 0x55af6a26de18)
|       |           `-CXXMemberCallExpr 0x55af6a26dda8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55af6a26dd18 <col:26> '<bound member function type>' ->find 0x55af6a265ca8
|       |             | `-CXXThisExpr 0x55af6a26dd08 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55af6a26dde0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55af6a26dd48 <col:31> 'const char *' lvalue ParmVar 0x55af6a247870 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55af6a26ddf8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55af6a26dd68 <col:40> 'int' lvalue ParmVar 0x55af6a2478f0 'flags' 'int'
|       |             `-DeclRefExpr 0x55af6a26dd88 <col:47> 'Args::Slot *' lvalue Var 0x55af6a26dc10 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55af6a26df38 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55af6a26df20 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55af6a26df00 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55af6a26ded0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55af69f7a608
|       |       `-ImplicitCastExpr 0x55af6a26deb8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55af6a26de98 <col:20> 'String' lvalue Var 0x55af6a26dca0 'str' 'String'
|       `-CompoundStmt 0x55af6a26e9a8 <col:61, line:736:9>
|         |-DeclStmt 0x55af6a26e3f0 <line:734:13, col:76>
|         | `-VarDecl 0x55af6a26df88 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55af6a26e3c0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55af6a26e330 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55af6a26e378 <col:60> 'T' lvalue ParmVar 0x55af6a247998 'variable' 'T &'
|         |     `-UnaryOperator 0x55af6a26e3a8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55af6a26e398 <col:71> 'Args *' this
|         `-CallExpr 0x55af6a26e978 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55af6a26e418 <col:13> '<bound member function type>' ->postparse 0x55af6a265eb8
|           | `-CXXThisExpr 0x55af6a26e408 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55af6a26e938 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55af6a26e448 <col:23> 'T *' lvalue Var 0x55af6a26df88 's' 'T *'
|           | `-CallExpr 0x55af6a26e8f8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55af6a26e6d0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55af6a26e7d0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55af6a26e7f0 <col:86> 'String' lvalue Var 0x55af6a26dca0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55af6a26e8a0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55af6a26e830 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55af6a16e738 0x55af6a16e358 0x55af6a16df88 0x55af6a16dba8 0x55af6a16d7c8 0x55af6a16d3f8
|           |   | `-DeclRefExpr 0x55af6a26e810 <col:92> 'T *' lvalue Var 0x55af6a26df88 's' 'T *'
|           |   `-UnaryOperator 0x55af6a26e8e0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55af6a26e8d0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55af6a26e958 <col:103> 'Args::Slot *' lvalue Var 0x55af6a26dc10 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55af6a2480a8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55af6a247bc8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55af6a247c48 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55af6a248008 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55af6a247d08 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a247d88 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55af6a247e28 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55af6a247ec8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55af6a26f8a0 <col:88, line:745:5>
|     |-DeclStmt 0x55af6a26ea98 <line:741:9, col:26>
|     | `-VarDecl 0x55af6a26ea30 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55af6a26ecb8 <line:742:9, col:55>
|     | `-VarDecl 0x55af6a26eac0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55af6a26eca0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55af6a26ec70 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55af6a26ec58 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55af6a26ec38 <col:22, col:54> 'String' (CXXTemporary 0x55af6a26ec38)
|     |           `-CXXMemberCallExpr 0x55af6a26ebc8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55af6a26eb38 <col:22> '<bound member function type>' ->find 0x55af6a265ca8
|     |             | `-CXXThisExpr 0x55af6a26eb28 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55af6a26ec00 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55af6a26eb68 <col:27> 'const char *' lvalue ParmVar 0x55af6a247d08 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55af6a26ec18 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55af6a26eb88 <col:36> 'int' lvalue ParmVar 0x55af6a247d88 'flags' 'int'
|     |             `-DeclRefExpr 0x55af6a26eba8 <col:43> 'Args::Slot *' lvalue Var 0x55af6a26ea30 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55af6a26f090 <line:743:9, col:72>
|     | `-VarDecl 0x55af6a26ed08 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55af6a26f060 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55af6a26efd0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55af6a26f018 <col:56> 'T' lvalue ParmVar 0x55af6a247e28 'variable' 'T &'
|     |     `-UnaryOperator 0x55af6a26f048 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55af6a26f038 <col:67> 'Args *' this
|     `-CallExpr 0x55af6a26f870 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55af6a26f0b8 <col:9> '<bound member function type>' ->postparse 0x55af6a265eb8
|       | `-CXXThisExpr 0x55af6a26f0a8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55af6a26f830 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55af6a26f0e8 <col:19> 'T *' lvalue Var 0x55af6a26ed08 's' 'T *'
|       | `-ParenExpr 0x55af6a26f810 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55af6a26f7e0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55af6a26f7c8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55af6a26f7b0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55af6a26f790 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55af6a26f760 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55af69f7a608
|       |     |       `-ImplicitCastExpr 0x55af6a26f748 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55af6a26f108 <col:25> 'String' lvalue Var 0x55af6a26eac0 'str' 'String'
|       |     |-CallExpr 0x55af6a26f5b8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55af6a26f390 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55af6a26f490 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55af6a26f4b0 <col:89> 'String' lvalue Var 0x55af6a26eac0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55af6a26f560 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55af6a26f4f0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55af6a16e738 0x55af6a16e358 0x55af6a16df88 0x55af6a16dba8 0x55af6a16d7c8 0x55af6a16d3f8
|       |     | | `-DeclRefExpr 0x55af6a26f4d0 <col:95> 'T *' lvalue Var 0x55af6a26ed08 's' 'T *'
|       |     | `-UnaryOperator 0x55af6a26f5a0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55af6a26f590 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55af6a26f728 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55af6a26f708 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55af6a26f6d8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55af6a26f688 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55af6a26f618 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55af6a16e738 0x55af6a16e358 0x55af6a16df88 0x55af6a16dba8 0x55af6a16d7c8 0x55af6a16d3f8
|       |         | | `-DeclRefExpr 0x55af6a26f5f8 <col:109> 'T *' lvalue Var 0x55af6a26ed08 's' 'T *'
|       |         | `-DeclRefExpr 0x55af6a26f6b8 <col:113> 'const V' lvalue ParmVar 0x55af6a247ec8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55af6a26f6f8 <col:120> 'bool' true
|       `-DeclRefExpr 0x55af6a26f850 <col:128> 'Args::Slot *' lvalue Var 0x55af6a26ea30 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55af6a2485d8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55af6a248120 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a248198 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55af6a248538 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55af6a248258 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a2482d8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55af6a248350 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a2483f8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55af6a270498 <col:75, line:754:5>
|     |-DeclStmt 0x55af6a26f948 <line:749:9, col:26>
|     | `-VarDecl 0x55af6a26f8e0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55af6a270460 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55af6a270480 <line:750:13, col:58>
|       | `-VarDecl 0x55af6a26f970 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55af6a26fb50 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55af6a26fb20 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55af6a26fb08 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55af6a26fae8 <col:26, col:58> 'String' (CXXTemporary 0x55af6a26fae8)
|       |           `-CXXMemberCallExpr 0x55af6a26fa78 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55af6a26f9e8 <col:26> '<bound member function type>' ->find 0x55af6a265ca8
|       |             | `-CXXThisExpr 0x55af6a26f9d8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55af6a26fab0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55af6a26fa18 <col:31> 'const char *' lvalue ParmVar 0x55af6a248258 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55af6a26fac8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55af6a26fa38 <col:40> 'int' lvalue ParmVar 0x55af6a2482d8 'flags' 'int'
|       |             `-DeclRefExpr 0x55af6a26fa58 <col:47> 'Args::Slot *' lvalue Var 0x55af6a26f8e0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55af6a26fc08 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55af6a26fbf0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55af6a26fbd0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55af6a26fba0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55af69f7a608
|       |       `-ImplicitCastExpr 0x55af6a26fb88 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55af6a26fb68 <col:20> 'String' lvalue Var 0x55af6a26f970 'str' 'String'
|       `-CompoundStmt 0x55af6a270440 <col:61, line:753:9>
|         |-DeclStmt 0x55af6a26ffe0 <line:751:13, col:63>
|         | `-VarDecl 0x55af6a26fc58 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55af6a26ffb0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55af6a26ff20 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55af6a26ff68 <col:47> 'T' lvalue ParmVar 0x55af6a2483f8 'variable' 'T &'
|         |     `-UnaryOperator 0x55af6a26ff98 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55af6a26ff88 <col:58> 'Args *' this
|         `-CallExpr 0x55af6a270410 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55af6a270008 <col:13> '<bound member function type>' ->postparse 0x55af6a265eb8
|           | `-CXXThisExpr 0x55af6a26fff8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55af6a2703d0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55af6a270038 <col:23> 'T *' lvalue Var 0x55af6a26fc58 's' 'T *'
|           | `-CallExpr 0x55af6a270390 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55af6a270220 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55af6a270268 <col:56> 'P' lvalue ParmVar 0x55af6a248350 'parser' 'P'
|           |   |-DeclRefExpr 0x55af6a270288 <col:64> 'String' lvalue Var 0x55af6a26f970 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55af6a270338 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55af6a2702c8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55af6a16e738 0x55af6a16e358 0x55af6a16df88 0x55af6a16dba8 0x55af6a16d7c8 0x55af6a16d3f8
|           |   | `-DeclRefExpr 0x55af6a2702a8 <col:70> 'T *' lvalue Var 0x55af6a26fc58 's' 'T *'
|           |   `-UnaryOperator 0x55af6a270378 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55af6a270368 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55af6a2703f0 <col:81> 'Args::Slot *' lvalue Var 0x55af6a26f8e0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55af6a248c38 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55af6a248650 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55af6a2486c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55af6a248748 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55af6a248b98 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55af6a248810 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a248890 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55af6a248908 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a2489a8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55af6a248a48 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55af6a271228 <col:98, line:762:5>
|     |-DeclStmt 0x55af6a270530 <line:758:9, col:26>
|     | `-VarDecl 0x55af6a2704c8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55af6a270750 <line:759:9, col:55>
|     | `-VarDecl 0x55af6a270558 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55af6a270738 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55af6a270708 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55af6a2706f0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55af6a2706d0 <col:22, col:54> 'String' (CXXTemporary 0x55af6a2706d0)
|     |           `-CXXMemberCallExpr 0x55af6a270660 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55af6a2705d0 <col:22> '<bound member function type>' ->find 0x55af6a265ca8
|     |             | `-CXXThisExpr 0x55af6a2705c0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55af6a270698 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55af6a270600 <col:27> 'const char *' lvalue ParmVar 0x55af6a248810 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55af6a2706b0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55af6a270620 <col:36> 'int' lvalue ParmVar 0x55af6a248890 'flags' 'int'
|     |             `-DeclRefExpr 0x55af6a270640 <col:43> 'Args::Slot *' lvalue Var 0x55af6a2704c8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55af6a270b70 <line:760:9, col:59>
|     | `-VarDecl 0x55af6a2707a8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55af6a270b40 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55af6a270ab0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55af6a270af8 <col:43> 'T' lvalue ParmVar 0x55af6a2489a8 'variable' 'T &'
|     |     `-UnaryOperator 0x55af6a270b28 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55af6a270b18 <col:54> 'Args *' this
|     `-CallExpr 0x55af6a2711f8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55af6a270b98 <col:9> '<bound member function type>' ->postparse 0x55af6a265eb8
|       | `-CXXThisExpr 0x55af6a270b88 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55af6a2711b8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55af6a270bc8 <col:19> 'T *' lvalue Var 0x55af6a2707a8 's' 'T *'
|       | `-ParenExpr 0x55af6a271198 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55af6a271168 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55af6a271150 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55af6a271138 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55af6a271118 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55af6a2710e8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55af69f7a608
|       |     |       `-ImplicitCastExpr 0x55af6a2710d0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55af6a270be8 <col:25> 'String' lvalue Var 0x55af6a270558 'str' 'String'
|       |     |-CallExpr 0x55af6a270f40 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55af6a270dd0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55af6a270e18 <col:59> 'P' lvalue ParmVar 0x55af6a248908 'parser' 'P'
|       |     | |-DeclRefExpr 0x55af6a270e38 <col:67> 'String' lvalue Var 0x55af6a270558 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55af6a270ee8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55af6a270e78 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55af6a16e738 0x55af6a16e358 0x55af6a16df88 0x55af6a16dba8 0x55af6a16d7c8 0x55af6a16d3f8
|       |     | | `-DeclRefExpr 0x55af6a270e58 <col:73> 'T *' lvalue Var 0x55af6a2707a8 's' 'T *'
|       |     | `-UnaryOperator 0x55af6a270f28 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55af6a270f18 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55af6a2710b0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55af6a271090 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55af6a271060 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55af6a271010 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55af6a270fa0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55af6a16e738 0x55af6a16e358 0x55af6a16df88 0x55af6a16dba8 0x55af6a16d7c8 0x55af6a16d3f8
|       |         | | `-DeclRefExpr 0x55af6a270f80 <col:87> 'T *' lvalue Var 0x55af6a2707a8 's' 'T *'
|       |         | `-DeclRefExpr 0x55af6a271040 <col:91> 'const V' lvalue ParmVar 0x55af6a248a48 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55af6a271080 <col:98> 'bool' true
|       `-DeclRefExpr 0x55af6a2711d8 <col:106> 'Args::Slot *' lvalue Var 0x55af6a2704c8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55af6a2492a8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55af6a248cb8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a248d38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55af6a248db8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55af6a249208 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55af6a248e80 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a248f00 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55af6a248f78 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a249018 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55af6a2490b8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55af6a272208 <col:60, line:773:5>
|     |-DeclStmt 0x55af6a2712d0 <line:767:9, col:26>
|     | `-VarDecl 0x55af6a271268 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55af6a2721d0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55af6a2721f0 <line:768:13, col:58>
|       | `-VarDecl 0x55af6a2712f8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55af6a2714d8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55af6a2714a8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55af6a271490 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55af6a271470 <col:26, col:58> 'String' (CXXTemporary 0x55af6a271470)
|       |           `-CXXMemberCallExpr 0x55af6a271400 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55af6a271370 <col:26> '<bound member function type>' ->find 0x55af6a265ca8
|       |             | `-CXXThisExpr 0x55af6a271360 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55af6a271438 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55af6a2713a0 <col:31> 'const char *' lvalue ParmVar 0x55af6a248e80 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55af6a271450 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55af6a2713c0 <col:40> 'int' lvalue ParmVar 0x55af6a248f00 'flags' 'int'
|       |             `-DeclRefExpr 0x55af6a2713e0 <col:47> 'Args::Slot *' lvalue Var 0x55af6a271268 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55af6a271590 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55af6a271578 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55af6a271558 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55af6a271528 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55af69f7a608
|       |       `-ImplicitCastExpr 0x55af6a271510 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55af6a2714f0 <col:20> 'String' lvalue Var 0x55af6a2712f8 'str' 'String'
|       `-CompoundStmt 0x55af6a2721a8 <col:61, line:772:9>
|         |-DeclStmt 0x55af6a2718d0 <line:769:13, col:66>
|         | `-VarDecl 0x55af6a2715e8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55af6a2718a0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55af6a271810 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55af6a271858 <col:49> 'T1' lvalue ParmVar 0x55af6a249018 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55af6a271888 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55af6a271878 <col:61> 'Args *' this
|         |-DeclStmt 0x55af6a271c40 <line:770:13, col:66>
|         | `-VarDecl 0x55af6a271958 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55af6a271c10 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55af6a271b80 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55af6a271bc8 <col:49> 'T2' lvalue ParmVar 0x55af6a2490b8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55af6a271bf8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55af6a271be8 <col:61> 'Args *' this
|         `-CallExpr 0x55af6a272178 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55af6a271c68 <col:13> '<bound member function type>' ->postparse 0x55af6a265eb8
|           | `-CXXThisExpr 0x55af6a271c58 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55af6a272138 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55af6a271cd8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55af6a271c98 <col:23> 'T1 *' lvalue Var 0x55af6a2715e8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55af6a271cb8 <col:29> 'T2 *' lvalue Var 0x55af6a271958 's2' 'T2 *'
|           | `-CallExpr 0x55af6a2720f0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55af6a271ec0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55af6a271f08 <col:63> 'P' lvalue ParmVar 0x55af6a248f78 'parser' 'P'
|           |   |-DeclRefExpr 0x55af6a271f28 <col:71> 'String' lvalue Var 0x55af6a2712f8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55af6a271fd8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55af6a271f68 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55af6a16e738 0x55af6a16e358 0x55af6a16df88 0x55af6a16dba8 0x55af6a16d7c8 0x55af6a16d3f8
|           |   | `-DeclRefExpr 0x55af6a271f48 <col:77> 'T1 *' lvalue Var 0x55af6a2715e8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55af6a272098 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55af6a272028 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55af6a16e738 0x55af6a16e358 0x55af6a16df88 0x55af6a16dba8 0x55af6a16d7c8 0x55af6a16d3f8
|           |   | `-DeclRefExpr 0x55af6a272008 <col:82> 'T2 *' lvalue Var 0x55af6a271958 's2' 'T2 *'
|           |   `-UnaryOperator 0x55af6a2720d8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55af6a2720c8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55af6a272158 <col:94> 'Args::Slot *' lvalue Var 0x55af6a271268 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55af6a249698 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55af6a249328 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55af6a2495f8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55af6a2493e0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a249460 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55af6a2494d8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55af6a272720 <col:67, line:780:5>
|     |-DeclStmt 0x55af6a2722a0 <line:777:9, col:26>
|     | `-VarDecl 0x55af6a272238 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55af6a2726e8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55af6a272708 <line:778:13, col:58>
|       | `-VarDecl 0x55af6a2722c8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55af6a2724a8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55af6a272478 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55af6a272460 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55af6a272440 <col:26, col:58> 'String' (CXXTemporary 0x55af6a272440)
|       |           `-CXXMemberCallExpr 0x55af6a2723d0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55af6a272340 <col:26> '<bound member function type>' ->find 0x55af6a265ca8
|       |             | `-CXXThisExpr 0x55af6a272330 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55af6a272408 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55af6a272370 <col:31> 'const char *' lvalue ParmVar 0x55af6a2493e0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55af6a272420 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55af6a272390 <col:40> 'int' lvalue ParmVar 0x55af6a249460 'flags' 'int'
|       |             `-DeclRefExpr 0x55af6a2723b0 <col:47> 'Args::Slot *' lvalue Var 0x55af6a272238 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55af6a272560 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55af6a272548 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55af6a272528 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55af6a2724f8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55af69f7a608
|       |       `-ImplicitCastExpr 0x55af6a2724e0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55af6a2724c0 <col:20> 'String' lvalue Var 0x55af6a2722c8 'str' 'String'
|       `-CallExpr 0x55af6a2726b8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55af6a272588 <col:13> '<bound member function type>' ->postparse 0x55af6a265eb8
|         | `-CXXThisExpr 0x55af6a272578 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55af6a272668 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55af6a2725d8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55af6a2725b8 <col:23> 'P' lvalue ParmVar 0x55af6a2494d8 'parser' 'P'
|         | |-DeclRefExpr 0x55af6a272620 <col:36> 'String' lvalue Var 0x55af6a2722c8 'str' 'String'
|         | `-UnaryOperator 0x55af6a272650 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55af6a272640 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55af6a272698 <col:49> 'Args::Slot *' lvalue Var 0x55af6a272238 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55af6a249a38 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55af6a249708 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55af6a249998 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55af6a2497c0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a249840 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55af6a2498b8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55af6a277578 <col:71, line:792:5>
|     |-DeclStmt 0x55af6a2727b8 <line:784:9, col:26>
|     | `-VarDecl 0x55af6a272750 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55af6a272888 <line:785:9, col:29>
|     | `-VarDecl 0x55af6a2727e8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55af6a272870 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55af6a272850 <col:28> 'int' 1
|     |-WhileStmt 0x55af6a277428 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55af6a277448 <line:786:16, col:61>
|     | | `-VarDecl 0x55af6a2728b0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55af6a276f78 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55af6a276f48 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55af6a276f30 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55af6a276f10 <col:29, col:61> 'String' (CXXTemporary 0x55af6a276f10)
|     | |           `-CXXMemberCallExpr 0x55af6a276ea0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55af6a276e10 <col:29> '<bound member function type>' ->find 0x55af6a265ca8
|     | |             | `-CXXThisExpr 0x55af6a272918 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55af6a276ed8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55af6a276e40 <col:34> 'const char *' lvalue ParmVar 0x55af6a2497c0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55af6a276ef0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55af6a276e60 <col:43> 'int' lvalue ParmVar 0x55af6a249840 'flags' 'int'
|     | |             `-DeclRefExpr 0x55af6a276e80 <col:50> 'Args::Slot *' lvalue Var 0x55af6a272750 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55af6a277030 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55af6a277018 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55af6a276ff8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55af6a276fc8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55af69f7a608
|     | |       `-ImplicitCastExpr 0x55af6a276fb0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55af6a276f90 <col:23> 'String' lvalue Var 0x55af6a2728b0 'str' 'String'
|     | `-CompoundStmt 0x55af6a277400 <col:64, line:790:9>
|     |   |-CallExpr 0x55af6a277188 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55af6a277058 <col:13> '<bound member function type>' ->postparse 0x55af6a265eb8
|     |   | | `-CXXThisExpr 0x55af6a277048 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55af6a277138 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55af6a2770a8 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55af6a277088 <col:23> 'P' lvalue ParmVar 0x55af6a2498b8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55af6a2770f0 <col:36> 'String' lvalue Var 0x55af6a2728b0 'str' 'String'
|     |   | | `-UnaryOperator 0x55af6a277120 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55af6a277110 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55af6a277168 <col:49> 'Args::Slot *' lvalue Var 0x55af6a272750 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55af6a277320 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55af6a2771b8 <col:13> 'int' lvalue Var 0x55af6a2727e8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55af6a277308 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55af6a2772e8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55af6a277250 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55af6a277230 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55af6a277218 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55af6a2771d8 <col:28> 'int' lvalue Var 0x55af6a2727e8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55af6a2771f8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55af6a2772d0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55af6a2772a0 <col:49> 'bool' lvalue ->_read_status 0x55af6a22a660
|     |   |         `-ImplicitCastExpr 0x55af6a277280 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55af6a277270 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55af6a2773d0 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55af6a277340 <col:13> 'int' lvalue ParmVar 0x55af6a249840 'flags' 'int'
|     |     `-UnaryOperator 0x55af6a2773b8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55af6a2773a0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55af6a277380 <col:23> 'const int' lvalue Var 0x55af6a235108 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55af6a277558 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55af6a277490 <col:9> 'bool' lvalue ->_read_status 0x55af6a22a660
|       | `-ImplicitCastExpr 0x55af6a277470 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55af6a277460 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55af6a277538 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55af6a277518 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55af6a277500 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55af6a2774c0 <col:25> 'int' lvalue Var 0x55af6a2727e8 'read_status' 'int'
|           `-IntegerLiteral 0x55af6a2774e0 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55af6a249f18 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55af6a249aa8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a249b28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55af6a249e78 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55af6a249be8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a249c68 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55af6a249ce0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a249d88 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55af6a278510 <col:84, line:805:5>
|     |-DeclStmt 0x55af6a277620 <line:796:9, col:26>
|     | `-VarDecl 0x55af6a2775b8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55af6a2776f0 <line:797:9, col:29>
|     | `-VarDecl 0x55af6a277650 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55af6a2776d8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55af6a2776b8 <col:28> 'int' 1
|     |-DeclStmt 0x55af6a277a30 <line:798:9, col:71>
|     | `-VarDecl 0x55af6a277748 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55af6a277a00 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55af6a277970 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55af6a2779b8 <col:55> 'T' lvalue ParmVar 0x55af6a249d88 'variable' 'T &'
|     |     `-UnaryOperator 0x55af6a2779e8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55af6a2779d8 <col:66> 'Args *' this
|     |-WhileStmt 0x55af6a2783c0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55af6a2783e0 <line:799:16, col:61>
|     | | `-VarDecl 0x55af6a277a58 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55af6a277c38 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55af6a277c08 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55af6a277bf0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55af6a277bd0 <col:29, col:61> 'String' (CXXTemporary 0x55af6a277bd0)
|     | |           `-CXXMemberCallExpr 0x55af6a277b60 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55af6a277ad0 <col:29> '<bound member function type>' ->find 0x55af6a265ca8
|     | |             | `-CXXThisExpr 0x55af6a277ac0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55af6a277b98 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55af6a277b00 <col:34> 'const char *' lvalue ParmVar 0x55af6a249be8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55af6a277bb0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55af6a277b20 <col:43> 'int' lvalue ParmVar 0x55af6a249c68 'flags' 'int'
|     | |             `-DeclRefExpr 0x55af6a277b40 <col:50> 'Args::Slot *' lvalue Var 0x55af6a2775b8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55af6a277cf0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55af6a277cd8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55af6a277cb8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55af6a277c88 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55af69f7a608
|     | |       `-ImplicitCastExpr 0x55af6a277c70 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55af6a277c50 <col:23> 'String' lvalue Var 0x55af6a277a58 'str' 'String'
|     | `-CompoundStmt 0x55af6a278398 <col:64, line:803:9>
|     |   |-CallExpr 0x55af6a278120 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55af6a277d18 <col:13> '<bound member function type>' ->postparse 0x55af6a265eb8
|     |   | | `-CXXThisExpr 0x55af6a277d08 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55af6a2780e0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55af6a277d48 <col:23> 'T *' lvalue Var 0x55af6a277748 's' 'T *'
|     |   | | `-CallExpr 0x55af6a2780a0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55af6a277f30 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55af6a277f78 <col:56> 'P' lvalue ParmVar 0x55af6a249ce0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55af6a277f98 <col:64> 'String' lvalue Var 0x55af6a277a58 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55af6a278048 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55af6a277fd8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55af6a16e738 0x55af6a16e358 0x55af6a16df88 0x55af6a16dba8 0x55af6a16d7c8 0x55af6a16d3f8
|     |   | |   | `-DeclRefExpr 0x55af6a277fb8 <col:70> 'T *' lvalue Var 0x55af6a277748 's' 'T *'
|     |   | |   `-UnaryOperator 0x55af6a278088 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55af6a278078 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55af6a278100 <col:81> 'Args::Slot *' lvalue Var 0x55af6a2775b8 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55af6a2782b8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55af6a278150 <col:13> 'int' lvalue Var 0x55af6a277650 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55af6a2782a0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55af6a278280 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55af6a2781e8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55af6a2781c8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55af6a2781b0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55af6a278170 <col:28> 'int' lvalue Var 0x55af6a277650 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55af6a278190 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55af6a278268 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55af6a278238 <col:49> 'bool' lvalue ->_read_status 0x55af6a22a660
|     |   |         `-ImplicitCastExpr 0x55af6a278218 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55af6a278208 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55af6a278368 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55af6a2782d8 <col:13> 'int' lvalue ParmVar 0x55af6a249c68 'flags' 'int'
|     |     `-UnaryOperator 0x55af6a278350 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55af6a278338 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55af6a278318 <col:23> 'const int' lvalue Var 0x55af6a235108 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55af6a2784f0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55af6a278428 <col:9> 'bool' lvalue ->_read_status 0x55af6a22a660
|       | `-ImplicitCastExpr 0x55af6a278408 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55af6a2783f8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55af6a2784d0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55af6a2784b0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55af6a278498 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55af6a278458 <col:25> 'int' lvalue Var 0x55af6a277650 'read_status' 'int'
|           `-IntegerLiteral 0x55af6a278478 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55af6a24a4f8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55af6a249f90 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55af6a24a008 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55af6a24a458 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55af6a24a0c8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55af6a24a148 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55af6a24a1c0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55af6a24a310 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55af6a279318 <col:87, line:821:5>
|     |-DeclStmt 0x55af6a2785c0 <line:809:9, col:26>
|     | `-VarDecl 0x55af6a278558 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55af6a278690 <line:810:9, col:29>
|     | `-VarDecl 0x55af6a2785f0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55af6a278678 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55af6a278658 <col:28> 'int' 1
|     |-DeclStmt 0x55af6a2788d8 <line:811:9, col:38>
|     | `-VarDecl 0x55af6a2787c0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55af6a2788b0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55af6a278838 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55af6a278890 <col:29> 'Vector<T>' lvalue ParmVar 0x55af6a24a310 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55af6a2791c8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55af6a2791e8 <line:812:16, col:61>
|     | | `-VarDecl 0x55af6a278900 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55af6a278ae0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55af6a278ab0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55af6a278a98 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55af6a278a78 <col:29, col:61> 'String' (CXXTemporary 0x55af6a278a78)
|     | |           `-CXXMemberCallExpr 0x55af6a278a08 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55af6a278978 <col:29> '<bound member function type>' ->find 0x55af6a265ca8
|     | |             | `-CXXThisExpr 0x55af6a278968 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55af6a278a40 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55af6a2789a8 <col:34> 'const char *' lvalue ParmVar 0x55af6a24a0c8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55af6a278a58 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55af6a2789c8 <col:43> 'int' lvalue ParmVar 0x55af6a24a148 'flags' 'int'
|     | |             `-DeclRefExpr 0x55af6a2789e8 <col:50> 'Args::Slot *' lvalue Var 0x55af6a278558 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55af6a278b98 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55af6a278b80 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55af6a278b60 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55af6a278b30 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55af69f7a608
|     | |       `-ImplicitCastExpr 0x55af6a278b18 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55af6a278af8 <col:23> 'String' lvalue Var 0x55af6a278900 'str' 'String'
|     | `-CompoundStmt 0x55af6a279190 <col:64, line:819:9>
|     |   |-DeclStmt 0x55af6a278c58 <line:813:13, col:23>
|     |   | `-VarDecl 0x55af6a278bc0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55af6a278c38 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55af6a278dd8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55af6a278c80 <col:13> '<bound member function type>' ->postparse 0x55af6a265eb8
|     |   | | `-CXXThisExpr 0x55af6a278c70 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55af6a278d80 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55af6a278cd0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55af6a278cb0 <col:23> 'P' lvalue ParmVar 0x55af6a24a1c0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55af6a278d18 <col:36> 'String' lvalue Var 0x55af6a278900 'str' 'String'
|     |   | | |-DeclRefExpr 0x55af6a278d38 <col:41> 'T' lvalue Var 0x55af6a278bc0 'sx' 'T'
|     |   | | `-UnaryOperator 0x55af6a278d68 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55af6a278d58 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55af6a278db8 <col:53> 'Args::Slot *' lvalue Var 0x55af6a278558 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55af6a278f30 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55af6a278e68 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55af6a278e38 <col:17> 'bool' lvalue ->_read_status 0x55af6a22a660
|     |   | |   `-ImplicitCastExpr 0x55af6a278e18 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55af6a278e08 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55af6a278f08 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55af6a278ea0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55af6a278e80 <col:17> 'Vector<T> *' lvalue Var 0x55af6a2787c0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55af6a278ee8 <col:30> 'T' lvalue Var 0x55af6a278bc0 'sx' 'T'
|     |   |-BinaryOperator 0x55af6a2790b0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55af6a278f48 <col:13> 'int' lvalue Var 0x55af6a2785f0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55af6a279098 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55af6a279078 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55af6a278fe0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55af6a278fc0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55af6a278fa8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55af6a278f68 <col:28> 'int' lvalue Var 0x55af6a2785f0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55af6a278f88 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55af6a279060 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55af6a279030 <col:49> 'bool' lvalue ->_read_status 0x55af6a22a660
|     |   |         `-ImplicitCastExpr 0x55af6a279010 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55af6a279000 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55af6a279160 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55af6a2790d0 <col:13> 'int' lvalue ParmVar 0x55af6a24a148 'flags' 'int'
|     |     `-UnaryOperator 0x55af6a279148 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55af6a279130 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55af6a279110 <col:23> 'const int' lvalue Var 0x55af6a235108 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55af6a2792f8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55af6a279230 <col:9> 'bool' lvalue ->_read_status 0x55af6a22a660
|       | `-ImplicitCastExpr 0x55af6a279210 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55af6a279200 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55af6a2792d8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55af6a2792b8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55af6a2792a0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55af6a279260 <col:25> 'int' lvalue Var 0x55af6a2785f0 'read_status' 'int'
|           `-IntegerLiteral 0x55af6a279280 <col:40> 'int' 1
|-AccessSpecDecl 0x55af6a24a570 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55af6a24a598 prev 0x55af6a22fe98 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55af6a24a690 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55af6a24a780 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55af6a279350 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55af6a24a870 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55af6a279360 <col:25, line:830:9>
| |-CXXMethodDecl 0x55af6a24a970 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55af6a24aa20 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55af6a255540 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55af6a255540
| | `-ParmVarDecl 0x55af6a255648 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55af6a255e08 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55af6a255e08
|   `-ParmVarDecl 0x55af6a255f18 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55af6a2556b8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55af6a255818 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55af6a255a10 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55af6a2558c0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55af6a255938 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55af6a279540 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55af6a255cc8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55af6a2793b0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55af6a279370 <col:20> 'void *' lvalue ParmVar 0x55af6a2558c0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55af6a255d30 '_slot' 'char *'
| | | `-CXXNewExpr 0x55af6a279438 <col:32, col:45> 'char *' array Function 0x55af69d9d278 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55af6a279420 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55af6a2793f0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55af6a255938 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55af6a255d90 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55af6a279500 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55af6a2794c0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55af6a255938 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55af6a2795c0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55af6a255b10 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55af6a24a870 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55af6a279648 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55af6a279628 <line:840:13, col:22> 'void' array Function 0x55af69d9d5d8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55af6a279610 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55af6a2795e0 <col:22> 'char *' lvalue ->_slot 0x55af6a255d30
| |         `-CXXThisExpr 0x55af6a2795d0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55af6a255c10 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55af6a24a970 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55af6a279838 <col:22, line:844:9>
| |   `-CallExpr 0x55af6a2797a0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55af6a279788 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55af6a279768 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55af69ea9058 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55af6a2797d8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55af6a2796b8 <col:20> 'void *' lvalue ->_ptr 0x55af6a255cc8
| |     |   `-CXXThisExpr 0x55af6a2796a8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55af6a279808 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55af6a2797f0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55af6a2796f8 <col:26> 'char *' lvalue ->_slot 0x55af6a255d30
| |     |     `-CXXThisExpr 0x55af6a2796e8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55af6a279820 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55af6a279738 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55af6a255d90
| |         `-CXXThisExpr 0x55af6a279728 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55af6a255cc8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55af6a255d30 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55af6a255d90 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55af6a255f88 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55af6a255f88
| | `-ParmVarDecl 0x55af6a256098 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55af6a256138 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55af6a256138
|   `-ParmVarDecl 0x55af6a256248 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55af6a2563e8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55af6a2562b8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55af6a256358 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55af6a256680 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55af6a256878 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55af6a256748 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55af6a2569f8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55af6a279870 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55af6a279850 <col:20> 'T *' lvalue ParmVar 0x55af6a256748 'ptr' 'T *'
|   | `-CompoundStmt 0x55af6a2798c0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55af6a256948 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55af6a24a970 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55af6a279a70 <col:22, line:857:9>
|   |   `-CallExpr 0x55af6a279a40 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55af6a2798d0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55af69f61788 0x55af69f0bab8
|   |     |-CXXOperatorCallExpr 0x55af6a2799d0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55af6a279960 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55af6a16e738 0x55af6a16e358 0x55af6a16df88 0x55af6a16dba8 0x55af6a16d7c8 0x55af6a16d3f8
|   |     | `-MemberExpr 0x55af6a279930 <col:29> 'T *' lvalue ->_ptr 0x55af6a2569f8
|   |     |   `-CXXThisExpr 0x55af6a279920 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55af6a279a10 <col:35> 'T' lvalue ->_slot 0x55af6a256a58
|   |       `-CXXThisExpr 0x55af6a279a00 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55af6a2569f8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55af6a256a58 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55af6a256ac0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55af6a256bc0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55af6a256c10 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55af6a256ba0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55af6a256b80 <col:31> 'int' 48
|-FieldDecl 0x55af6a256c38 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55af6a256c98 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55af6a256cf8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55af6a256e30 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55af6a265550 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55af6a2655b0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55af6a265660 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55af6a265888 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55af6a265790 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55af6a2659d8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55af6a265948 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55af6a265ca8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55af6a265a98 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55af6a265b18 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55af6a265bc0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55af6a265eb8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55af6a265d70 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55af6a265de8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55af6a265f88 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55af6a2660d8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55af6a266040 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55af6a266468 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55af6a266198 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55af6a266218 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55af6a2662c0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55af6a266378 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55af6a266690 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55af6a266540 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55af6a2665b8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55af6a2669a8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55af6a266740 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55af6a266908 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55af6a266818 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.3*, %class.Vector.5, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.3*, %class.Vector.5, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55af69f6a4b0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55af69f6a5c8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55af69f6a658 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55af69f6a728 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55af69f6a810 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55af69f6aa28 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55af69f6a8d0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55af69f6abd8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55af69f6aae0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55af69f6ad20 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55af69f6ac90 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55af69f6ae68 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55af69f6add8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55af69f6afb0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55af69f6af20 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55af69f6b078 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55af69f6b1c0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55af69f6b130 <col:28> col:31 'int'
|-CXXMethodDecl 0x55af69f6b288 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55af69f6b3d0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55af69f6b340 <col:28> col:31 'int'
|-CXXMethodDecl 0x55af69f6b548 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55af69f6b488 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55af69f6b690 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55af69f6b600 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55af69f6b758 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55af69f6b918 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55af69f6b808 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55af69f6b880 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55af69f6bb68 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55af69f6b9d8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55af69f6ba50 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55af69f6bc18 <col:86> "" ""
|-CXXMethodDecl 0x55af69f6be88 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55af69f6bcf8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55af69f6bd70 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55af69f6c038 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55af69f6bf48 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55af69f6c1e8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55af69f6c0f0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55af69f6c4b8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55af69f6c2a0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55af69f6c318 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55af69f6c390 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55af69f6c798 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55af69f6c580 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55af69f6c5f8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55af69f6c670 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55af69f6c850 <col:115> "" ""
|-AccessSpecDecl 0x55af69f6c8c0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55af69f6c8f8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55af69f6de10 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55af69f6de10
| `-ParmVarDecl 0x55af69f6df18 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55af69f6dfb8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55af69f6dfb8
| `-ParmVarDecl 0x55af69f6e0c8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55af69fa36f8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55af6a1954f0 <col:7>
|-CXXConstructorDecl 0x55af69fa37d0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55af69fa37d0
| `-ParmVarDecl 0x55af69fa38e8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55af69fa3958 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55af69fa3958
| `-ParmVarDecl 0x55af69fa3a68 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55af6a197ef0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55af6a184098 prev 0x55af6a1792a0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55af6a184190 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55af6a184280 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55af6a1843a8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55af6a184528 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55af6a1846a8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55af6a184828 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55af6a195658 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55af6a195ec8 <col:11>
|-CXXDestructorDecl 0x55af6a195730 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55af6a195868 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55af6a195868
| `-ParmVarDecl 0x55af6a195978 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55af6a195a18 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55af6a195a18
| `-ParmVarDecl 0x55af6a195b28 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55af6a1988e8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55af6a1989f8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55af6a198c78 <col:11>
|   `-ReturnStmt 0x55af6a198c68 <col:11>
|     `-UnaryOperator 0x55af6a198c50 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55af6a198c40 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55af6a198a68 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55af6a198a68
  `-ParmVarDecl 0x55af6a198b78 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55af6a184890 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55af6a1849a8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55af6a184a48 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55af6a184ab0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55af6a184b18 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55af6a184b80 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55af6a184be0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55af6a184ca0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55af6a184d00 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55af6a184d60 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55af6a195568 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55af6a184a48 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55af6a195ed8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55af6a195f30 <col:12>
|-CXXConstructorDecl 0x55af6a195b98 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55af6a195b98
| `-ParmVarDecl 0x55af6a195ca8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55af6a195d48 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55af6a195d48
| `-ParmVarDecl 0x55af6a195e58 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55af6a197fd0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55af6a1729b0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55af6a172ac8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55af6a172b58 <col:16, col:22> col:16 public
|-EnumDecl 0x55af6a172b80 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55af6a172c80 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55af6a172d60 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a172c60 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55af6a172c40 <col:21> 'int' 28
| `-EnumConstantDecl 0x55af6a172d10 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55af6a172d78 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55af6a172cf0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55af6a172cd0 <col:22> 'int' 64
|-CXXMethodDecl 0x55af6a1730b8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55af6a172da0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55af6a172e20 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55af6a172e98 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55af6a172f10 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55af6a173178 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55af6a173378 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55af6a1731f0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55af6a173268 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55af6a173428 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55af6a173588 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55af6a173498 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55af6a173630 <col:72> warn_unused_result ""
|-TypedefDecl 0x55af6a173990 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55af6a173920 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55af6a1738c0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55af6a173880 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55af69c4a2d0 'void'
|       |-PointerType 0x55af69ef2d50 'unsigned char *'
|       | `-BuiltinType 0x55af69c4a3d0 'unsigned char'
|       |-TypedefType 0x55af69cef2c0 'size_t' sugar
|       | |-Typedef 0x55af69cbab20 'size_t'
|       | `-BuiltinType 0x55af69c4a430 'unsigned long'
|       `-PointerType 0x55af69c4aad0 'void *'
|         `-BuiltinType 0x55af69c4a2d0 'void'
|-CXXMethodDecl 0x55af6a173e08 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55af6a173a00 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55af6a173a78 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55af6a173b10 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55af6a173b90 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55af6a18e500 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55af6a18e4e8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55af6a18e4b0 <col:58> 'int' 0
| |-ParmVarDecl 0x55af6a173c10 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55af6a18e528 <col:76> 'int' 0
| |-ParmVarDecl 0x55af6a173c90 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55af6a18e548 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55af6a173ed8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55af6a173f58 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55af6a174018 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55af6a1740b8 <col:20>
| `-OptimizeNoneAttr 0x55af6a174110 <col:30>
|-CXXMethodDecl 0x55af6a174188 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55af6a174228 <col:20>
| `-OptimizeNoneAttr 0x55af6a174280 <col:30>
|-CXXMethodDecl 0x55af6a1742f8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55af6a174398 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55af6a174448 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55af6a1744e8 <col:20>
| |-OptimizeNoneAttr 0x55af6a174540 <col:30>
| `-WarnUnusedResultAttr 0x55af6a174568 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55af6a1745c0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55af6a174660 <col:20>
| `-OptimizeNoneAttr 0x55af6a1746b8 <col:30>
|-CXXMethodDecl 0x55af6a174708 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55af6a1747a8 <col:20>
| `-OptimizeNoneAttr 0x55af6a174800 <col:30>
|-CXXMethodDecl 0x55af6a174848 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55af6a1748e8 <col:20>
| `-OptimizeNoneAttr 0x55af6a174940 <col:30>
|-CXXMethodDecl 0x55af6a174988 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55af6a174a48 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55af6a174b10 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55af6a174bd8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55af6a174c98 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55af6a174db8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55af6a18e610 <col:54, line:99:5>
|   `-ReturnStmt 0x55af6a18e600 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55af6a18e5e8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55af6a18e5b8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55af6a185098
|         `-CXXThisExpr 0x55af6a18e5a8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55af6a174f58 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55af6a174e68 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55af6a18e6c0 <col:67, line:103:5>
|   `-BinaryOperator 0x55af6a18e6a0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55af6a18e638 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55af6a185098
|     | `-CXXThisExpr 0x55af6a18e628 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55af6a18e688 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55af6a18e668 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55af6a174e68 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55af6a175050 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55af6a18e740 <col:33, line:107:5>
|   `-ReturnStmt 0x55af6a18e730 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55af6a18e718 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55af6a18e6e8 <col:16> 'void *' lvalue ->_destructor_argument 0x55af6a185100
|         `-CXXThisExpr 0x55af6a18e6d8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55af6a175110 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55af6a18ed70 <col:25, line:113:5>
|   |-ParenExpr 0x55af6a18eab8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55af6a18ea88 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55af6a18e7f8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55af6a18e7d0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55af6a18e798 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55af6a18e768 <col:24> '<bound member function type>' ->shared 0x55af6a174188
|   |   |       `-ImplicitCastExpr 0x55af6a18e7b8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55af6a18e758 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55af6a18e858 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55af6a18e838 <col:42> 'int' 0
|   |   `-CallExpr 0x55af6a18e9e8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55af6a18e9d0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55af6a18e9b0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55af69ce60d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55af6a18ea28 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a18e8c8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55af6a18ea40 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a18e8f0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55af6a18ea58 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55af6a18e928 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55af6a18ea70 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55af6a18e998 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55af6a18e980 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55af6a18e948 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55af6a18ecb8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55af6a18eae8 <col:2> 'unsigned char *' lvalue ->_head 0x55af6a184ea0
|   | | `-CXXThisExpr 0x55af6a18ead8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55af6a18eca0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55af6a18ec80 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55af6a18eb28 <col:10> 'unsigned char *' lvalue ->_data 0x55af6a184f08
|   |     | `-CXXThisExpr 0x55af6a18eb18 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55af6a18ec68 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55af6a18ec48 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55af6a18eb68 <col:18> 'unsigned char *' lvalue ->_tail 0x55af6a184f70
|   |         | `-CXXThisExpr 0x55af6a18eb58 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55af6a18ec30 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55af6a18ec10 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55af6a18eba8 <col:26> 'unsigned char *' lvalue ->_end 0x55af6a184fd8
|   |             | `-CXXThisExpr 0x55af6a18eb98 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55af6a18ebf8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55af6a18ebd8 <col:33> 'int' 0
|   `-BinaryOperator 0x55af6a18ed50 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55af6a18ece8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55af6a185098
|     | `-CXXThisExpr 0x55af6a18ecd8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55af6a18ed38 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55af6a18ed18 <col:16> 'int' 0
|-CXXMethodDecl 0x55af6a175250 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55af6a1751c0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55af6a1752f8 <col:20>
| |-OptimizeNoneAttr 0x55af6a175350 <col:30>
| `-WarnUnusedResultAttr 0x55af6a175378 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55af6a175448 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55af6a1753b8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55af6a1754f0 <col:20>
| |-OptimizeNoneAttr 0x55af6a175548 <col:30>
| `-WarnUnusedResultAttr 0x55af6a175570 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55af6a1756a8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55af6a1755b0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55af6a175750 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55af6a175850 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55af6a1757c0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55af6a1758f8 <col:20>
| `-OptimizeNoneAttr 0x55af6a175950 <col:30>
|-CXXMethodDecl 0x55af6a175a18 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55af6a175988 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55af6a175ac0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55af6a175bc0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55af6a175b30 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55af6a175c68 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55af6a175d68 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55af6a175cd8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55af6a175e10 <col:20>
| `-OptimizeNoneAttr 0x55af6a175e68 <col:30>
|-CXXMethodDecl 0x55af6a175ff8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55af6a175ea8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55af6a175f20 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55af6a18e568 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55af6a1760a8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55af6a1762a8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55af6a176120 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55af6a176198 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55af6a1764b8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55af6a176368 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55af6a1763e0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55af6a1766c8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55af6a176578 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55af6a1765f8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55af6a18e578 <col:39> 'int' 0
|-CXXMethodDecl 0x55af6a176798 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55af6a176860 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55af6a176928 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55af6a1769e8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55af6a176ab0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55af6a176bf8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55af6a176b68 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55af6a176dc8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55af6a176cb8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55af6a176d30 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55af6a176e98 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55af6a176f58 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55af6a176ff8 <col:20>
| `-OptimizeNoneAttr 0x55af6a177050 <col:30>
|-CXXMethodDecl 0x55af6a1770a0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55af6a177140 <col:20>
| `-OptimizeNoneAttr 0x55af6a177198 <col:30>
|-CXXMethodDecl 0x55af6a1771e8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55af6a1772a8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55af6a177370 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55af6a177410 <col:20>
| `-OptimizeNoneAttr 0x55af6a177468 <col:30>
|-CXXMethodDecl 0x55af6a1775b8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55af6a1774a8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55af6a177520 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55af6a177708 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55af6a177678 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55af6a1777e0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55af6a1778a0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55af6a177940 <col:20>
| `-OptimizeNoneAttr 0x55af6a177998 <col:30>
|-CXXMethodDecl 0x55af6a1779e8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55af6a177a88 <col:20>
| `-OptimizeNoneAttr 0x55af6a177ae0 <col:30>
|-CXXMethodDecl 0x55af6a177b30 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55af6a177bf8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55af6a177c98 <col:20>
| `-OptimizeNoneAttr 0x55af6a177cf0 <col:30>
|-CXXMethodDecl 0x55af6a177d38 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55af6a177e58 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55af6a177fc8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55af6a177f08 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55af6a1780b8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55af6a178158 <col:20>
| `-OptimizeNoneAttr 0x55af6a1781b0 <col:30>
|-CXXMethodDecl 0x55af6a178200 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55af6a1782c0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55af6a1784f8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55af6a178370 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55af6a1783e8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55af6a1785a8 <col:20>
| `-OptimizeNoneAttr 0x55af6a178600 <col:30>
|-CXXMethodDecl 0x55af6a1786a8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55af6a178748 <col:20>
| `-OptimizeNoneAttr 0x55af6a1787a0 <col:30>
|-CXXMethodDecl 0x55af6a1787f0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55af6a178890 <col:20>
| `-OptimizeNoneAttr 0x55af6a1788e8 <col:30>
|-CXXMethodDecl 0x55af6a178930 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55af6a1789d0 <col:20>
| `-OptimizeNoneAttr 0x55af6a178a28 <col:30>
|-CXXMethodDecl 0x55af6a178b28 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55af6a178a60 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55af6a178bd0 <col:20>
| `-OptimizeNoneAttr 0x55af6a178c28 <col:30>
|-CXXMethodDecl 0x55af6a178de8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55af6a178c60 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55af6a178cd8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55af6a178e98 <col:20>
| `-OptimizeNoneAttr 0x55af6a178ef0 <col:30>
|-CXXMethodDecl 0x55af6a178f98 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55af6a1790b8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55af6a1791d8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55af6a179278 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55af6a1792a0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55af6a1793c8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55af6a179468 <col:20>
| `-OptimizeNoneAttr 0x55af6a1794c0 <col:30>
|-CXXMethodDecl 0x55af6a179568 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55af6a179608 <col:20>
| `-OptimizeNoneAttr 0x55af6a179660 <col:30>
|-AccessSpecDecl 0x55af6a179688 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55af6a1796b0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55af6a1797b0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55af6a179800 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55af6a179790 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55af6a179770 <col:14> 'int' 48
|-CXXMethodDecl 0x55af6a179868 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55af6a179908 <col:20>
| `-OptimizeNoneAttr 0x55af6a179960 <col:30>
|-CXXMethodDecl 0x55af6a1799d8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55af6a179a78 <col:20>
| `-OptimizeNoneAttr 0x55af6a179ad0 <col:30>
|-CXXMethodDecl 0x55af6a179b98 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55af6a179b08 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55af6a179d38 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55af6a179ed8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55af6a179de8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55af6a179f80 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55af6a17a080 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55af6a17a430 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a17a060 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55af6a17a040 <col:9> 'int' 0
| |-EnumConstantDecl 0x55af6a17a110 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55af6a17a448 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a17a0f0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55af6a17a0d0 <col:14> 'int' 1
| |-EnumConstantDecl 0x55af6a17a1a0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55af6a17a460 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a17a180 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55af6a17a160 <col:14> 'int' 2
| |-EnumConstantDecl 0x55af6a17a230 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55af6a17a478 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a17a210 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55af6a17a1f0 <col:14> 'int' 3
| |-EnumConstantDecl 0x55af6a17a2c0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55af6a17a490 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a17a2a0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55af6a17a280 <col:13> 'int' 4
| |-EnumConstantDecl 0x55af6a17a350 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55af6a17a4a8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a17a330 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55af6a17a310 <col:13> 'int' 5
| `-EnumConstantDecl 0x55af6a17a3e0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55af6a17a4c0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55af6a17a3c0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55af6a17a3a0 <col:14> 'int' 6
|-CXXMethodDecl 0x55af6a17a528 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55af6a17a5c8 <col:20>
| `-OptimizeNoneAttr 0x55af6a17a620 <col:30>
|-CXXMethodDecl 0x55af6a17a718 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55af6a17a658 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55af6a17a7c0 <col:20>
| `-OptimizeNoneAttr 0x55af6a17a818 <col:30>
|-CXXMethodDecl 0x55af6a17a888 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55af6a17a9b0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55af6a17ab28 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55af6a17aa60 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55af6a17abf0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55af6a17acb8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55af6a17adf8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55af6a17ad68 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55af6a17aea0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55af6a17afa0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55af6a17b1a0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a17af80 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55af6a17af60 <col:23> 'int' 0
| |-EnumConstantDecl 0x55af6a17b030 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55af6a17b1b8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a17b010 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55af6a17aff0 <col:45> 'int' 4
| |-EnumConstantDecl 0x55af6a17b0c0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55af6a17b1d0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a17b0a0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55af6a17b080 <col:24> 'int' 0
| `-EnumConstantDecl 0x55af6a17b150 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55af6a17b1e8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55af6a17b130 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55af6a17b110 <col:47> 'int' 16
|-CXXMethodDecl 0x55af6a17b248 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55af6a17b3b8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55af6a17b2f8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55af6a17b460 <col:20>
| `-OptimizeNoneAttr 0x55af6a17b4b8 <col:30>
|-CXXMethodDecl 0x55af6a17b508 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55af6a18ee90 <col:18, col:36>
|   `-ReturnStmt 0x55af6a18ee80 <col:20, col:33>
|     `-ImplicitCastExpr 0x55af6a18ee68 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55af6a18ee48 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55af6a18ee18 <col:27> '<bound member function type>' ->xanno 0x55af6a179568
|           `-CXXThisExpr 0x55af6a18ee08 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55af6a17b600 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55af6a18efa0 <col:30, col:48>
|   `-ReturnStmt 0x55af6a18ef90 <col:32, col:45>
|     `-ImplicitCastExpr 0x55af6a18ef78 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55af6a18ef58 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55af6a18ef28 <col:39> '<bound member function type>' ->xanno 0x55af6a1793c8
|           `-CXXThisExpr 0x55af6a18ef18 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55af6a17b6e8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55af6a18f138 <col:24, col:50>
|   `-ReturnStmt 0x55af6a18f128 <col:26, col:47>
|     `-UnaryOperator 0x55af6a18f110 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55af6a18f0f0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55af6a18f0d8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55af6a18f088 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55af6a1843a8
|         |   `-CXXMemberCallExpr 0x55af6a18f068 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55af6a18f038 <col:34> '<bound member function type>' ->xanno 0x55af6a179568
|         |       `-CXXThisExpr 0x55af6a18f028 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55af6a18f0b8 <col:46> 'int' 0
|-CXXMethodDecl 0x55af6a17b7f0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55af6a18f308 <col:36, col:62>
|   `-ReturnStmt 0x55af6a18f2f8 <col:38, col:59>
|     `-UnaryOperator 0x55af6a18f2e0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55af6a18f2c0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55af6a18f2a8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55af6a18f220 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55af6a1843a8
|         |   `-CXXMemberCallExpr 0x55af6a18f200 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55af6a18f1d0 <col:46> '<bound member function type>' ->xanno 0x55af6a1793c8
|         |       `-CXXThisExpr 0x55af6a18f1c0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55af6a18f250 <col:58> 'int' 0
|-CXXMethodDecl 0x55af6a17b908 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55af6a18f4a0 <col:26, col:53>
|   `-ReturnStmt 0x55af6a18f490 <col:28, col:50>
|     `-UnaryOperator 0x55af6a18f478 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55af6a18f458 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55af6a18f440 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55af6a18f3f0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55af6a1846a8
|         |   `-CXXMemberCallExpr 0x55af6a18f3d0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55af6a18f3a0 <col:36> '<bound member function type>' ->xanno 0x55af6a179568
|         |       `-CXXThisExpr 0x55af6a18f390 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55af6a18f420 <col:49> 'int' 0
|-CXXMethodDecl 0x55af6a17ba28 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55af6a18f678 <col:38, col:65>
|   `-ReturnStmt 0x55af6a18f668 <col:40, col:62>
|     `-UnaryOperator 0x55af6a18f650 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55af6a18f630 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55af6a18f618 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55af6a18f588 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55af6a1846a8
|         |   `-CXXMemberCallExpr 0x55af6a18f568 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55af6a18f538 <col:48> '<bound member function type>' ->xanno 0x55af6a1793c8
|         |       `-CXXThisExpr 0x55af6a18f528 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55af6a18f5b8 <col:61> 'int' 0
|-CXXMethodDecl 0x55af6a17bbd8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55af6a17bae0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55af6a18fd48 <col:34, line:463:5>
|   |-ParenExpr 0x55af6a18fb90 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55af6a18fb60 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55af6a18f7c8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55af6a18f798 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55af6a18f6e8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55af6a18f6d0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55af6a18f690 <col:23> 'int' lvalue ParmVar 0x55af6a17bae0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55af6a18f6b0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55af6a18f778 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55af6a18f748 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55af6a18f708 <col:33> 'int' lvalue ParmVar 0x55af6a17bae0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55af6a18f760 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55af6a18f728 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55af6a1797b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55af6a18f828 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55af6a18f808 <col:56> 'int' 0
|   |   `-CallExpr 0x55af6a18fac0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55af6a18faa8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55af6a18fa88 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55af69ce60d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55af6a18fb00 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a18f918 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55af6a18fb18 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a18f948 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55af6a18fb30 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55af6a18f980 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55af6a18fb48 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55af6a18fa70 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55af6a18fa58 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55af6a18fa18 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55af6a18fd38 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55af6a18fd20 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55af6a18fd00 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55af6a18fcd0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55af6a18fc80 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55af6a1843a8
|         |   `-CXXMemberCallExpr 0x55af6a18fc60 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55af6a18fc30 <col:9> '<bound member function type>' ->xanno 0x55af6a1793c8
|         |       `-CXXThisExpr 0x55af6a18fc20 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55af6a18fce8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55af6a18fcb0 <col:21> 'int' lvalue ParmVar 0x55af6a17bae0 'i' 'int'
|-CXXMethodDecl 0x55af6a17be28 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55af6a17bc98 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55af6a17bd10 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55af6a1903d8 <col:40, line:472:5>
|   |-ParenExpr 0x55af6a1901f0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55af6a1901c0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55af6a18fea0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55af6a18fe70 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55af6a18fdc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55af6a18fda8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55af6a18fd68 <col:23> 'int' lvalue ParmVar 0x55af6a17bc98 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55af6a18fd88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55af6a18fe50 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55af6a18fe20 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55af6a18fde0 <col:33> 'int' lvalue ParmVar 0x55af6a17bc98 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55af6a18fe38 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55af6a18fe00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55af6a1797b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55af6a18ff00 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55af6a18fee0 <col:56> 'int' 0
|   |   `-CallExpr 0x55af6a190120 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55af6a190108 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55af6a1900e8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55af69ce60d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55af6a190160 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a18ff70 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55af6a190178 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a18ffa0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55af6a190190 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55af6a18ffd8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55af6a1901a8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55af6a1900d0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55af6a1900b8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55af6a190078 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55af6a1903b8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55af6a190360 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55af6a190330 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55af6a1902e0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55af6a1843a8
|     | |   `-CXXMemberCallExpr 0x55af6a1902c0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55af6a190290 <col:2> '<bound member function type>' ->xanno 0x55af6a179568
|     | |       `-CXXThisExpr 0x55af6a190280 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55af6a190348 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55af6a190310 <col:14> 'int' lvalue ParmVar 0x55af6a17bc98 'i' 'int'
|     `-ImplicitCastExpr 0x55af6a1903a0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55af6a190380 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55af6a17bd10 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55af6a17bfe8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55af6a17bef0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55af6a190b58 <col:36, line:485:5>
|   |-ParenExpr 0x55af6a1908c0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55af6a190890 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55af6a190570 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55af6a190540 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55af6a190450 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55af6a190438 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55af6a1903f8 <col:23> 'int' lvalue ParmVar 0x55af6a17bef0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55af6a190418 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55af6a190520 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55af6a190508 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55af6a190470 <col:33> 'int' lvalue ParmVar 0x55af6a17bef0 'i' 'int'
|   |   |     `-BinaryOperator 0x55af6a1904e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55af6a1904d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55af6a190490 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55af6a1797b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55af6a1904b0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55af6a1905d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55af6a1905b0 <col:60> 'int' 0
|   |   `-CallExpr 0x55af6a1907f0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55af6a1907d8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55af6a1907b8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55af69ce60d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55af6a190830 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a190640 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55af6a190848 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a190678 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55af6a190860 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55af6a1906b0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55af6a190878 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55af6a1907a0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55af6a190788 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55af6a190748 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55af6a190b48 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55af6a190b30 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55af6a190b18 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55af6a190ae8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55af6a190a88 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55af6a190a58 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55af6a1909d0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55af6a184280
|             |   `-CXXMemberCallExpr 0x55af6a1909b0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55af6a190980 <col:61> '<bound member function type>' ->xanno 0x55af6a1793c8
|             |       `-CXXThisExpr 0x55af6a190970 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55af6a190a70 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55af6a190a00 <col:74> 'int' lvalue ParmVar 0x55af6a17bef0 'i' 'int'
|-CXXMethodDecl 0x55af6a17c238 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55af6a17c0a8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55af6a17c120 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55af6a1912a8 <col:42, line:500:5>
|   |-ParenExpr 0x55af6a191040 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55af6a191010 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55af6a190cf0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55af6a190cc0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55af6a190bd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55af6a190bb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55af6a190b78 <col:23> 'int' lvalue ParmVar 0x55af6a17c0a8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55af6a190b98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55af6a190ca0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55af6a190c88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55af6a190bf0 <col:33> 'int' lvalue ParmVar 0x55af6a17c0a8 'i' 'int'
|   |   |     `-BinaryOperator 0x55af6a190c68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55af6a190c50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55af6a190c10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55af6a1797b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55af6a190c30 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55af6a190d50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55af6a190d30 <col:60> 'int' 0
|   |   `-CallExpr 0x55af6a190f70 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55af6a190f58 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55af6a190f38 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55af69ce60d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55af6a190fb0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a190dc0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55af6a190fc8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a190df8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55af6a190fe0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55af6a190e30 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55af6a190ff8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55af6a190f20 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55af6a190f08 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55af6a190ec8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55af6a191288 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55af6a191238 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55af6a191208 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55af6a1911b0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55af6a191180 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55af6a191130 <col:48, col:57> 'char [48]' lvalue ->c 0x55af6a184280
|     |     |   `-CXXMemberCallExpr 0x55af6a191110 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55af6a1910e0 <col:48> '<bound member function type>' ->xanno 0x55af6a179568
|     |     |       `-CXXThisExpr 0x55af6a1910d0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55af6a191198 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55af6a191160 <col:61> 'int' lvalue ParmVar 0x55af6a17c0a8 'i' 'int'
|     `-ImplicitCastExpr 0x55af6a191270 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55af6a191250 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55af6a17c120 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55af6a17c3f8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55af6a17c300 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55af6a191a08 <col:35, line:513:5>
|   |-ParenExpr 0x55af6a191718 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55af6a1916e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55af6a191440 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55af6a191410 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55af6a191320 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55af6a191308 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55af6a1912c8 <col:23> 'int' lvalue ParmVar 0x55af6a17c300 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55af6a1912e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55af6a1913f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55af6a1913d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55af6a191340 <col:33> 'int' lvalue ParmVar 0x55af6a17c300 'i' 'int'
|   |   |     `-BinaryOperator 0x55af6a1913b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55af6a1913a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55af6a191360 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55af6a1797b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55af6a191380 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55af6a1914a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55af6a191480 <col:60> 'int' 0
|   |   `-CallExpr 0x55af6a191648 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55af6a191630 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55af6a191610 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55af69ce60d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55af6a191688 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a191510 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55af6a1916a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a191548 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55af6a1916b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55af6a191580 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55af6a1916d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55af6a1915f8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55af6a1915e0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55af6a1915a0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55af6a1919f8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55af6a1919e0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55af6a1919c8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55af6a191998 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55af6a191910 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55af6a1918e0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55af6a191890 <col:60, col:69> 'char const[48]' lvalue ->c 0x55af6a184280
|             |   `-CXXMemberCallExpr 0x55af6a191870 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55af6a191840 <col:60> '<bound member function type>' ->xanno 0x55af6a1793c8
|             |       `-CXXThisExpr 0x55af6a191830 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55af6a1918f8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55af6a1918c0 <col:73> 'int' lvalue ParmVar 0x55af6a17c300 'i' 'int'
|-CXXMethodDecl 0x55af6a17c648 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55af6a17c4b8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55af6a17c530 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55af6a192128 <col:41, line:528:5>
|   |-ParenExpr 0x55af6a191eb0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55af6a191e80 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55af6a191ba0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55af6a191b70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55af6a191a80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55af6a191a68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55af6a191a28 <col:23> 'int' lvalue ParmVar 0x55af6a17c4b8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55af6a191a48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55af6a191b50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55af6a191b38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55af6a191aa0 <col:33> 'int' lvalue ParmVar 0x55af6a17c4b8 'i' 'int'
|   |   |     `-BinaryOperator 0x55af6a191b18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55af6a191b00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55af6a191ac0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55af6a1797b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55af6a191ae0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55af6a191c00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55af6a191be0 <col:60> 'int' 0
|   |   `-CallExpr 0x55af6a191de0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55af6a191dc8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55af6a191da8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55af69ce60d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55af6a191e20 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a191c70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55af6a191e38 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a191ca8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55af6a191e50 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55af6a191ce0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55af6a191e68 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55af6a191d90 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55af6a191d78 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55af6a191d38 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55af6a192108 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55af6a1920b8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55af6a192088 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55af6a192030 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55af6a191ff0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55af6a191fa0 <col:47, col:56> 'char [48]' lvalue ->c 0x55af6a184280
|     |     |   `-CXXMemberCallExpr 0x55af6a191f80 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55af6a191f50 <col:47> '<bound member function type>' ->xanno 0x55af6a179568
|     |     |       `-CXXThisExpr 0x55af6a191f40 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55af6a192008 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55af6a191fd0 <col:60> 'int' lvalue ParmVar 0x55af6a17c4b8 'i' 'int'
|     `-ImplicitCastExpr 0x55af6a1920f0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55af6a1920d0 <col:65> 'int16_t':'short' lvalue ParmVar 0x55af6a17c530 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55af6a17c808 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55af6a17c710 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55af6a1927f8 <col:36, line:541:5>
|   |-ParenExpr 0x55af6a192598 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55af6a192568 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55af6a1922c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55af6a192290 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55af6a1921a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55af6a192188 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55af6a192148 <col:23> 'int' lvalue ParmVar 0x55af6a17c710 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55af6a192168 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55af6a192270 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55af6a192258 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55af6a1921c0 <col:33> 'int' lvalue ParmVar 0x55af6a17c710 'i' 'int'
|   |   |     `-BinaryOperator 0x55af6a192238 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55af6a192220 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55af6a1921e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55af6a1797b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55af6a192200 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55af6a192320 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55af6a192300 <col:60> 'int' 0
|   |   `-CallExpr 0x55af6a1924c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55af6a1924b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55af6a192490 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55af69ce60d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55af6a192508 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a192390 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55af6a192520 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a1923c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55af6a192538 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55af6a192400 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55af6a192550 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55af6a192478 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55af6a192460 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55af6a192420 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55af6a1927e8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55af6a1927d0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55af6a1927b8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55af6a192788 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55af6a192730 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55af6a192700 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55af6a1926b0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55af6a184280
|             |   `-CXXMemberCallExpr 0x55af6a192690 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55af6a192660 <col:61> '<bound member function type>' ->xanno 0x55af6a1793c8
|             |       `-CXXThisExpr 0x55af6a192650 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55af6a192718 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55af6a1926e0 <col:74> 'int' lvalue ParmVar 0x55af6a17c710 'i' 'int'
|-CXXMethodDecl 0x55af6a17c9d8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55af6a17c8c8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55af6a17c940 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55af6a17ca88 <col:20>
| `-OptimizeNoneAttr 0x55af6a17cae0 <col:30>
|-CXXMethodDecl 0x55af6a17cc18 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55af6a17cb20 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55af6a192ec8 <col:35, line:562:5>
|   |-ParenExpr 0x55af6a192c68 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55af6a192c38 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55af6a192990 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55af6a192960 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55af6a192870 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55af6a192858 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55af6a192818 <col:23> 'int' lvalue ParmVar 0x55af6a17cb20 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55af6a192838 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55af6a192940 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55af6a192928 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55af6a192890 <col:33> 'int' lvalue ParmVar 0x55af6a17cb20 'i' 'int'
|   |   |     `-BinaryOperator 0x55af6a192908 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55af6a1928f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55af6a1928b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55af6a1797b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55af6a1928d0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55af6a1929f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55af6a1929d0 <col:60> 'int' 0
|   |   `-CallExpr 0x55af6a192b98 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55af6a192b80 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55af6a192b60 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55af69ce60d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55af6a192bd8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a192a60 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55af6a192bf0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a192a98 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55af6a192c08 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55af6a192ad0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55af6a192c20 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55af6a192b48 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55af6a192b30 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55af6a192af0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55af6a192eb8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55af6a192ea0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55af6a192e88 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55af6a192e58 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55af6a192e00 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55af6a192dd0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55af6a192d80 <col:60, col:69> 'char const[48]' lvalue ->c 0x55af6a184280
|             |   `-CXXMemberCallExpr 0x55af6a192d60 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55af6a192d30 <col:60> '<bound member function type>' ->xanno 0x55af6a1793c8
|             |       `-CXXThisExpr 0x55af6a192d20 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55af6a192de8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55af6a192db0 <col:73> 'int' lvalue ParmVar 0x55af6a17cb20 'i' 'int'
|-CXXMethodDecl 0x55af6a17ce28 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55af6a17ccd8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55af6a17cd50 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55af6a1935a8 <col:41, line:577:5>
|   |-ParenExpr 0x55af6a193338 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55af6a193308 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55af6a193060 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55af6a193030 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55af6a192f40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55af6a192f28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55af6a192ee8 <col:23> 'int' lvalue ParmVar 0x55af6a17ccd8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55af6a192f08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55af6a193010 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55af6a192ff8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55af6a192f60 <col:33> 'int' lvalue ParmVar 0x55af6a17ccd8 'i' 'int'
|   |   |     `-BinaryOperator 0x55af6a192fd8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55af6a192fc0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55af6a192f80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55af6a1797b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55af6a192fa0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55af6a1930c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55af6a1930a0 <col:60> 'int' 0
|   |   `-CallExpr 0x55af6a193268 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55af6a193250 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55af6a193230 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55af69ce60d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55af6a1932a8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a193130 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55af6a1932c0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a193168 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55af6a1932d8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55af6a1931a0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55af6a1932f0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55af6a193218 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55af6a193200 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55af6a1931c0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55af6a193588 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55af6a193538 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55af6a193508 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55af6a1934a8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55af6a193478 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55af6a193428 <col:47, col:56> 'char [48]' lvalue ->c 0x55af6a184280
|     |     |   `-CXXMemberCallExpr 0x55af6a193408 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55af6a1933d8 <col:47> '<bound member function type>' ->xanno 0x55af6a179568
|     |     |       `-CXXThisExpr 0x55af6a1933c8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55af6a193490 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55af6a193458 <col:60> 'int' lvalue ParmVar 0x55af6a17ccd8 'i' 'int'
|     `-ImplicitCastExpr 0x55af6a193570 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55af6a193550 <col:65> 'int32_t':'int' lvalue ParmVar 0x55af6a17cd50 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55af6a17cfe8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55af6a17cef0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55af6a193cd8 <col:36, line:591:5>
|   |-ParenExpr 0x55af6a193a18 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55af6a1939e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55af6a193740 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55af6a193710 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55af6a193620 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55af6a193608 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55af6a1935c8 <col:23> 'int' lvalue ParmVar 0x55af6a17cef0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55af6a1935e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55af6a1936f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55af6a1936d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55af6a193640 <col:33> 'int' lvalue ParmVar 0x55af6a17cef0 'i' 'int'
|   |   |     `-BinaryOperator 0x55af6a1936b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55af6a1936a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55af6a193660 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55af6a1797b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55af6a193680 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55af6a1937a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55af6a193780 <col:60> 'int' 0
|   |   `-CallExpr 0x55af6a193948 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55af6a193930 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55af6a193910 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55af69ce60d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55af6a193988 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a193810 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55af6a1939a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a193848 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55af6a1939b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55af6a193880 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55af6a1939d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55af6a1938f8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55af6a1938e0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55af6a1938a0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55af6a193cc8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55af6a193cb0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55af6a193c98 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55af6a193c68 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55af6a193be0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55af6a193bb0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55af6a193b60 <col:61, col:70> 'char const[48]' lvalue ->c 0x55af6a184280
|             |   `-CXXMemberCallExpr 0x55af6a193b40 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55af6a193b10 <col:61> '<bound member function type>' ->xanno 0x55af6a1793c8
|             |       `-CXXThisExpr 0x55af6a193b00 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55af6a193bc8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55af6a193b90 <col:74> 'int' lvalue ParmVar 0x55af6a17cef0 'i' 'int'
|-CXXMethodDecl 0x55af6a17d238 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55af6a17d0a8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55af6a17d120 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55af6a1943b8 <col:42, line:606:5>
|   |-ParenExpr 0x55af6a194148 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55af6a194118 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55af6a193e70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55af6a193e40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55af6a193d50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55af6a193d38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55af6a193cf8 <col:23> 'int' lvalue ParmVar 0x55af6a17d0a8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55af6a193d18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55af6a193e20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55af6a193e08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55af6a193d70 <col:33> 'int' lvalue ParmVar 0x55af6a17d0a8 'i' 'int'
|   |   |     `-BinaryOperator 0x55af6a193de8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55af6a193dd0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55af6a193d90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55af6a1797b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55af6a193db0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55af6a193ed0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55af6a193eb0 <col:60> 'int' 0
|   |   `-CallExpr 0x55af6a194078 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55af6a194060 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55af6a194040 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55af69ce60d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55af6a1940b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a193f40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55af6a1940d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a193f78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55af6a1940e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55af6a193fb0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55af6a194100 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55af6a194028 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55af6a194010 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55af6a193fd0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55af6a194398 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55af6a194348 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55af6a194318 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55af6a1942b8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55af6a194288 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55af6a194238 <col:48, col:57> 'char [48]' lvalue ->c 0x55af6a184280
|     |     |   `-CXXMemberCallExpr 0x55af6a194218 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55af6a1941e8 <col:48> '<bound member function type>' ->xanno 0x55af6a179568
|     |     |       `-CXXThisExpr 0x55af6a1941d8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55af6a1942a0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55af6a194268 <col:61> 'int' lvalue ParmVar 0x55af6a17d0a8 'i' 'int'
|     `-ImplicitCastExpr 0x55af6a194380 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55af6a194360 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55af6a17d120 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55af6a17d3d0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55af6a17d300 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55af6a194c28 <col:33, line:620:5>
|   |-ParenExpr 0x55af6a1949a0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55af6a194970 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55af6a1945c0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55af6a194590 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55af6a194430 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55af6a194418 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55af6a1943d8 <col:23> 'int' lvalue ParmVar 0x55af6a17d300 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55af6a1943f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55af6a194570 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55af6a194558 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55af6a194450 <col:33> 'int' lvalue ParmVar 0x55af6a17d300 'i' 'int'
|   |   |     `-BinaryOperator 0x55af6a194538 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55af6a194520 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55af6a194470 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55af6a1797b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55af6a1944f8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55af6a1944e0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55af6a1944a8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55af6a194620 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55af6a194600 <col:79> 'int' 0
|   |   `-CallExpr 0x55af6a1948d0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55af6a1948b8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55af6a194898 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55af69ce60d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55af6a194910 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a194708 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55af6a194928 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a194750 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55af6a194940 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55af6a194788 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55af6a194958 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55af6a194880 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55af6a194868 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55af6a194828 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55af6a194c18 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55af6a194c00 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55af6a194be8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55af6a194bb8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55af6a194b30 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55af6a194b00 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55af6a194ab0 <col:67, col:76> 'char const[48]' lvalue ->c 0x55af6a184280
|             |   `-CXXMemberCallExpr 0x55af6a194a90 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55af6a194a60 <col:67> '<bound member function type>' ->xanno 0x55af6a1793c8
|             |       `-CXXThisExpr 0x55af6a194a50 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55af6a194b18 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55af6a194ae0 <col:80> 'int' lvalue ParmVar 0x55af6a17d300 'i' 'int'
|-CXXMethodDecl 0x55af6a17d5e8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55af6a17d490 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55af6a17d510 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55af6a195450 <col:45, line:635:5>
|   |-ParenExpr 0x55af6a195198 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55af6a195168 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55af6a194e30 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55af6a194e00 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55af6a194ca0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55af6a194c88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55af6a194c48 <col:23> 'int' lvalue ParmVar 0x55af6a17d490 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55af6a194c68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55af6a194de0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55af6a194dc8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55af6a194cc0 <col:33> 'int' lvalue ParmVar 0x55af6a17d490 'i' 'int'
|   |   |     `-BinaryOperator 0x55af6a194da8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55af6a194d90 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55af6a194ce0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55af6a1797b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55af6a194d68 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55af6a194d50 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55af6a194d18 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55af6a194e90 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55af6a194e70 <col:79> 'int' 0
|   |   `-CallExpr 0x55af6a1950c8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55af6a1950b0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55af6a195090 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55af69ce60d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55af6a195108 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a194f00 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55af6a195120 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55af6a194f48 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55af6a195138 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55af6a194f80 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55af6a195150 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55af6a195078 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55af6a195060 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55af6a195018 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55af6a195430 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55af6a195398 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55af6a195368 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55af6a195308 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55af6a1952d8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55af6a195288 <col:54, col:63> 'char [48]' lvalue ->c 0x55af6a184280
|     |     |   `-CXXMemberCallExpr 0x55af6a195268 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55af6a195238 <col:54> '<bound member function type>' ->xanno 0x55af6a179568
|     |     |       `-CXXThisExpr 0x55af6a195228 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55af6a1952f0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55af6a1952b8 <col:67> 'int' lvalue ParmVar 0x55af6a17d490 'i' 'int'
|     `-CXXConstCastExpr 0x55af6a195400 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55af6a1953e8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55af6a1953b0 <col:91> 'const void *' lvalue ParmVar 0x55af6a17d510 'x' 'const void *'
|-CXXMethodDecl 0x55af6a17d6b8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55af6a1954d8 <col:34, line:640:5>
|   `-ReturnStmt 0x55af6a1954c8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55af6a1954b0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55af6a195480 <col:16> 'Packet *' lvalue ->_data_packet 0x55af6a184e38
|         `-CXXThisExpr 0x55af6a195470 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55af6a17d7f8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55af6a17d768 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55af6a18e598 <col:46> 'bool' true
|-CXXMethodDecl 0x55af6a17d978 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55af6a17d8b0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55af6a17da20 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55af6a17e1d0 <line:660:22> "" ""
| |-EnumConstantDecl 0x55af6a17db20 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55af6a17e240 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a17db00 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55af6a17dae0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55af6a172c80 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55af6a17dbb0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55af6a17e258 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a17db90 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55af6a17db70 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55af6a172d10 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55af6a17dc40 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55af6a17e270 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a17dc20 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55af6a17dc00 <col:21> 'int' 0
| |-EnumConstantDecl 0x55af6a17dcd0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55af6a17e288 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a17dcb0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55af6a17dc90 <col:19> 'int' 16
| |-EnumConstantDecl 0x55af6a17dd60 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55af6a17e2a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a17dd40 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55af6a17dd20 <col:21> 'int' 16
| |-EnumConstantDecl 0x55af6a17ddf0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55af6a17e2b8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a17ddd0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55af6a17ddb0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55af6a17de80 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55af6a17e2d0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a17de60 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55af6a17de40 <col:19> 'int' EnumConstant 0x55af6a17dcd0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55af6a17df10 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55af6a17e2e8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a17def0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55af6a17ded0 <col:19> 'int' EnumConstant 0x55af6a17ddf0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55af6a17dfe0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55af6a17e300 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a17dfc0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55af6a17dfa0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55af6a17df60 <col:23> 'int' EnumConstant 0x55af6a17df10 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55af6a17df80 <col:40> 'int' 2
| |-EnumConstantDecl 0x55af6a17e0b0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55af6a17e318 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a17e090 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55af6a17e070 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55af6a17e030 <col:23> 'int' EnumConstant 0x55af6a17df10 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55af6a17e050 <col:40> 'int' 4
| `-EnumConstantDecl 0x55af6a17e180 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55af6a17e330 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55af6a17e160 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55af6a17e140 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55af6a17e100 <col:23> 'int' EnumConstant 0x55af6a17df10 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55af6a17e120 <col:40> 'int' 8
|-CXXMethodDecl 0x55af6a17e370 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55af6a17e410 <col:68> "" ""
|-CXXMethodDecl 0x55af6a17e4a8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55af6a17e548 <col:45> "" ""
|-CXXMethodDecl 0x55af6a17e5e0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55af6a17e680 <col:57> "" ""
|-CXXMethodDecl 0x55af6a17e718 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55af6a17e7b8 <col:45> "" ""
|-CXXMethodDecl 0x55af6a17e850 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55af6a17e8f0 <col:57> "" ""
|-CXXMethodDecl 0x55af6a17e980 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55af6a17ea20 <col:51> "" ""
|-CXXMethodDecl 0x55af6a17eab0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55af6a17eb50 <col:63> "" ""
|-CXXMethodDecl 0x55af6a17ebe0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55af6a17ec80 <col:53> "" ""
|-CXXMethodDecl 0x55af6a17ed10 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55af6a17edb0 <col:65> "" ""
|-CXXMethodDecl 0x55af6a17eec8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55af6a17ee38 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55af6a17ef70 <col:61> "" ""
|-CXXMethodDecl 0x55af6a17f108 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55af6a17eff8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55af6a17f070 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55af6a17f1b8 <col:67> "" ""
|-CXXMethodDecl 0x55af6a17f2d0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55af6a17f240 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55af6a17f378 <col:63> "" ""
|-CXXMethodDecl 0x55af6a17f510 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55af6a17f400 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55af6a17f478 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55af6a17f5c0 <col:69> "" ""
|-CXXMethodDecl 0x55af6a17f6d8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55af6a17f648 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55af6a17f780 <col:63> "" ""
|-CXXMethodDecl 0x55af6a181e58 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55af6a181d48 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55af6a181dc0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55af6a181f08 <col:69> "" ""
|-CXXMethodDecl 0x55af6a182020 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55af6a181f90 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55af6a1820c8 <col:62> "" ""
|-CXXMethodDecl 0x55af6a182260 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55af6a182150 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55af6a1821c8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55af6a182310 <col:68> "" ""
|-CXXMethodDecl 0x55af6a182428 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55af6a182398 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55af6a1824d0 <col:63> "" ""
|-CXXMethodDecl 0x55af6a182668 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55af6a182558 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55af6a1825d0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55af6a182718 <col:69> "" ""
|-CXXMethodDecl 0x55af6a1827a8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55af6a182848 <col:64> "" ""
|-CXXMethodDecl 0x55af6a1828d8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55af6a182978 <col:52> "" ""
|-CXXMethodDecl 0x55af6a182a08 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55af6a182aa8 <col:67> "" ""
|-CXXMethodDecl 0x55af6a182b38 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55af6a182bd8 <col:55> "" ""
|-CXXMethodDecl 0x55af6a182cf0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55af6a182c60 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55af6a182d98 <col:58> "" ""
|-CXXMethodDecl 0x55af6a182f30 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55af6a182e20 <col:33> col:36 'int'
| |-ParmVarDecl 0x55af6a182e98 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55af6a182fe0 <col:62> "" ""
|-CXXMethodDecl 0x55af6a1830f8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55af6a183068 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55af6a1831a0 <col:58> "" ""
|-CXXMethodDecl 0x55af6a183338 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55af6a183228 <col:33> col:36 'int'
| |-ParmVarDecl 0x55af6a1832a0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55af6a1833e8 <col:62> "" ""
|-CXXMethodDecl 0x55af6a183500 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55af6a183470 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55af6a1835a8 <col:60> "" ""
|-CXXMethodDecl 0x55af6a183740 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55af6a183630 <col:34> col:37 'int'
| |-ParmVarDecl 0x55af6a1836a8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55af6a1837f0 <col:64> "" ""
|-CXXMethodDecl 0x55af6a183908 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55af6a183878 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55af6a1839b0 <col:58> "" ""
|-CXXMethodDecl 0x55af6a183b48 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55af6a183a38 <col:33> col:36 'int'
| |-ParmVarDecl 0x55af6a183ab0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55af6a183bf8 <col:62> "" ""
|-CXXMethodDecl 0x55af6a183d10 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55af6a183c80 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55af6a183db8 <col:59> "" ""
|-CXXMethodDecl 0x55af6a183f50 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55af6a183e40 <col:33> col:36 'int'
| |-ParmVarDecl 0x55af6a183eb8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55af6a184000 <col:63> "" ""
|-AccessSpecDecl 0x55af6a184070 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55af6a184098 prev 0x55af6a1792a0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55af6a184190 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55af6a184280 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55af6a1843a8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55af6a184528 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55af6a1846a8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55af6a184828 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55af6a195658 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55af6a195ec8 <col:11>
| |-CXXDestructorDecl 0x55af6a195730 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55af6a195868 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55af6a195868
| | `-ParmVarDecl 0x55af6a195978 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55af6a195a18 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55af6a195a18
| | `-ParmVarDecl 0x55af6a195b28 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55af6a1988e8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55af6a1989f8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55af6a198c78 <col:11>
| |   `-ReturnStmt 0x55af6a198c68 <col:11>
| |     `-UnaryOperator 0x55af6a198c50 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55af6a198c40 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55af6a198a68 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55af6a198a68
|   `-ParmVarDecl 0x55af6a198b78 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55af6a184890 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55af6a1849a8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55af6a184a48 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55af6a184ab0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55af6a184b18 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55af6a184b80 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55af6a184be0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55af6a184ca0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55af6a184d00 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55af6a184d60 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55af6a195568 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55af6a184a48 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55af6a195ed8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55af6a195f30 <col:12>
| |-CXXConstructorDecl 0x55af6a195b98 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55af6a195b98
| | `-ParmVarDecl 0x55af6a195ca8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55af6a195d48 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55af6a195d48
| | `-ParmVarDecl 0x55af6a195e58 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55af6a197fd0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55af6a184dd8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55af6a184e38 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55af6a184ea0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55af6a184f08 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55af6a184f70 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55af6a184fd8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55af6a185038 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55af6a185098 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55af6a185100 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55af6a185188 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55af6a184dd8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55af6a195500 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55af6a185038 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55af6a195f40 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55af6a195fa0 <col:21, line:755:5>
|-CXXConstructorDecl 0x55af6a185328 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55af6a185268 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55af6a185420 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55af6a185608 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55af6a185510 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55af6a1858d8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55af6a1856c0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55af6a185738 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55af6a1857b0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55af6a185af8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55af6a1859a8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55af6a185a20 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55af6a18e0d8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55af6a185bb8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55af6a185c30 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55af6a185ca8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55af6a18e230 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55af6a18e1a0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55af6a18e378 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55af6a18e2e8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55af6a18e470 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55af6a196040 prev 0x55af6a172900 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x55af6a196178 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x55af6a196208 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x55af6a1962b0 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x55af6a196350 <col:20>
| `-OptimizeNoneAttr 0x55af6a1963a8 <col:30>
|-CXXMethodDecl 0x55af6a1963f8 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x55af6a196498 <col:20>
| `-OptimizeNoneAttr 0x55af6a1964f0 <col:30>
|-CXXMethodDecl 0x55af6a196540 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55af6a196608 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55af6a1966d0 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55af6a1967e8 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x55af6a1968b0 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x55af6a196950 <col:20>
| `-OptimizeNoneAttr 0x55af6a1969a8 <col:30>
|-CXXMethodDecl 0x55af6a196a18 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x55af6a196ab8 <col:20>
| `-OptimizeNoneAttr 0x55af6a196b10 <col:30>
|-CXXMethodDecl 0x55af6a196bb8 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x55af6a196c58 <col:20>
| `-OptimizeNoneAttr 0x55af6a196cb0 <col:30>
|-CXXMethodDecl 0x55af6a196d00 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55af6a196e18 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x55af6a196f38 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x55af6a197058 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x55af6a197120 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x55af6a1971c0 <col:62> "" ""
|-AccessSpecDecl 0x55af6a197230 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x55af6a197290 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x55af6a197e88 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x55af6a1980b0 <col:29, col:31>
|-CXXMethodDecl 0x55af6a197358 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x55af6a197498 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x55af6a197408 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x55af6a197590 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x55af6a1980c0 <col:23, col:25>
|-CXXMethodDecl 0x55af6a197748 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x55af6a197680 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x55af6a197a18 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55af6a197800 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55af6a197878 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55af6a1978f0 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55af6a197ba8 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x55af6a197ae0 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x55af6a197ca0 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x55af6a197d08 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x55af6a197d08
  `-ParmVarDecl 0x55af6a197e18 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<1>
         0 |   char [1] x
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55af6a1c6ee0 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 1
|-PackedAttr 0x55af6a2f96f8 <line:167:18>
|-CXXRecordDecl 0x55af6a2f97b8 prev 0x55af6a1c6ee0 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x55af6a2f98c8 <line:166:5, col:13> col:10 x 'char [1]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array = type { [1 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array = type { [1 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<8>
         0 |   char [8] x
           | [sizeof=8, dsize=8, align=1,
           |  nvsize=8, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55af6a1d1d60 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 8
|-PackedAttr 0x55af6a2f9fc8 <line:167:18>
|-CXXRecordDecl 0x55af6a2fa088 prev 0x55af6a1d1d60 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x55af6a2fa198 <line:166:5, col:13> col:10 x 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array.2 = type { [8 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array.2 = type { [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55af6a2821d0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55af6a2822e8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55af6a282378 <col:16, col:22> col:16 public
|-EnumDecl 0x55af6a2823a0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55af6a2824a0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55af6a2826f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a282480 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55af6a282460 <col:21> 'int' 0
| |-EnumConstantDecl 0x55af6a282530 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55af6a282708 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a282510 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55af6a2824f0 <col:24> 'int' 22
| |-EnumConstantDecl 0x55af6a2825c0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55af6a282720 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a2825a0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55af6a282580 <col:24> 'int' 34
| |-EnumConstantDecl 0x55af6a282650 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55af6a282738 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55af6a282630 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55af6a282610 <col:25> 'int' 95
| `-EnumConstantDecl 0x55af6a2826a0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55af6a2840b0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55af6a2844e8 <col:7>
|-CXXConstructorDecl 0x55af6a2841b8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55af6a2841b8
| `-ParmVarDecl 0x55af6a2842c8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55af6a284368 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55af6a284478 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55af6a300db0 <col:7>
`-CXXDestructorDecl 0x55af6a2865e8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55af6a282768 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55af6a2828c8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55af6a282958 <col:32, col:38> col:32 public
|-TypedefDecl 0x55af6a282990 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55af69d9f5d0 'uint32_t' sugar
|   |-Typedef 0x55af69cb3408 'uint32_t'
|   `-TypedefType 0x55af69c8c440 '__uint32_t' sugar
|     |-Typedef 0x55af69c8c038 '__uint32_t'
|     `-BuiltinType 0x55af69c4a410 'unsigned int'
|-CXXConstructorDecl 0x55af6a282ad8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55af6a282a00 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55af6a283fb8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55af6a2844f8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55af6a283870 'base' 'int'
| | `-ImplicitCastExpr 0x55af6a284058 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55af6a284018 <col:16> 'int' lvalue ParmVar 0x55af6a282a00 'b' 'int'
| `-CompoundStmt 0x55af6a284568 <col:19, line:1046:5>
|-CXXMethodDecl 0x55af6a282fd0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55af6a282ba0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55af6a282c20 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55af6a282c98 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55af6a282d18 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55af6a282dd8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55af6a282e58 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55af6a283428 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55af6a2830a0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55af6a283388 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55af6a283148 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55af6a2831e8 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55af6a283260 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55af6a283fd8 <col:82> 'const ArgContext' lvalue Var 0x55af6a279a98 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55af6a285498 <col:94, line:1067:5>
| |   |-DeclStmt 0x55af6a2846f8 <line:1054:9, col:64>
| |   | `-VarDecl 0x55af6a284588 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x55af6a2846b0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x55af6a284918 <line:1055:9, col:91>
| |   | `-VarDecl 0x55af6a284728 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55af6a2848f0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x55af6a2848d0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x55af6a284880 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x55af6a284860 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x55af6a284808 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x55af6a2847b8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x55af6a2847e8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x55af6a284848 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x55af6a284828 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x55af6a2848b0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55af6a284a78 <line:1056:9, col:27>
| |   | `-VarDecl 0x55af6a284a10 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x55af6a284ec0 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x55af6a284df0 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x55af6a284d70 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55af6a1695b8 0x55af69fb2b98 0x55af69fb2870 0x55af69fa4050 0x55af69fa3d00 0x55af69fa35f0 0x55af69f75f60 0x55af69f02420
| |   | | |-CallExpr 0x55af6a284cb0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x55af6a284aa0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x55af6a284b50 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55af6a284b20 <col:19, col:23> '<bound member function type>' .begin 0x55af69f93258
| |   | | | |   `-DeclRefExpr 0x55af6a284b00 <col:19> 'const String' lvalue ParmVar 0x55af6a283148 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55af6a284bc0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55af6a284b90 <col:32, col:36> '<bound member function type>' .end 0x55af69f93470
| |   | | | |   `-DeclRefExpr 0x55af6a284b70 <col:32> 'const String' lvalue ParmVar 0x55af6a283148 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x55af6a284be0 <col:43> 'const bool' lvalue Var 0x55af6a284588 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x55af6a284c48 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x55af6a284c28 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x55af6a284c70 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55af6a284a10 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x55af6a284c90 <col:73> 'const int' lvalue Var 0x55af6a284728 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x55af6a284d50 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55af6a284d20 <col:16, col:20> '<bound member function type>' .end 0x55af69f93470
| |   | |     `-DeclRefExpr 0x55af6a284d00 <col:16> 'const String' lvalue ParmVar 0x55af6a283148 'str' 'const String &'
| |   | `-BinaryOperator 0x55af6a284ea0 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55af6a284e38 <col:13> 'int' lvalue ->status 0x55af6a2838d8
| |   |   | `-CXXThisExpr 0x55af6a284e28 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55af6a284e88 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55af6a284e68 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55af6a282530 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55af6a285110 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55af6a284ff8 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55af6a284fe0 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55af6a284fc8 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55af6a284ee8 <col:13> 'int' lvalue ->status 0x55af6a2838d8
| |   | | |     `-CXXThisExpr 0x55af6a284ed8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55af6a284fa8 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55af6a284f78 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55af6a284f28 <col:23> 'int' lvalue ->status 0x55af6a2838d8
| |   | |   |   `-CXXThisExpr 0x55af6a284f18 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55af6a284f90 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55af6a284f58 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55af6a2825c0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55af6a2850f0 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55af6a285090 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55af6a285038 <col:13, col:18> '<bound member function type>' .error 0x55af6a229c70
| |   |   | | `-DeclRefExpr 0x55af6a285018 <col:13> 'const ArgContext' lvalue ParmVar 0x55af6a283260 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55af6a2850b8 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55af6a285068 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55af6a2850e0 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55af6a2850d0 <col:20> 'bool' false
| |   |-DeclStmt 0x55af6a2852e8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55af6a285290 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x55af6a285220 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x55af6a285448 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x55af6a285300 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55af69f363e8
| |   | |-DeclRefExpr 0x55af6a285348 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55af6a284a10 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x55af6a285418 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x55af6a285390 <col:64> 'V' lvalue ParmVar 0x55af6a2831e8 'result' 'V &'
| |   `-ReturnStmt 0x55af6a285488 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55af6a285478 <col:16> 'bool' true
| `-CXXMethodDecl 0x55af6a304918 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55af6a3046f0 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55af6a3047c8 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x55af6a304830 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55af6a3066b0 <col:94, line:1067:5>
|     |-DeclStmt 0x55af6a305128 <line:1054:9, col:64>
|     | `-VarDecl 0x55af6a304f48 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55af6a3050b8 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55af6a305088 <col:36, col:55> 'const bool' lvalue Var 0x55af69f25600 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55af6a305308 <line:1055:9, col:91>
|     | `-VarDecl 0x55af6a305140 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55af6a305288 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55af6a305270 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55af6a305250 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55af6a305230 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55af6a305210 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55af6a3051d8 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55af6a3051b8 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x55af6a2847e8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55af6a3051f8 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x55af6a284828 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x55af6a2848b0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55af6a3054a0 <line:1056:9, col:27>
|     | `-VarDecl 0x55af6a305438 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55af6a305928 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55af6a3058d0 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55af6a305788 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55af6a305758 <col:13> '<bound member function type>' ->parse 0x55af6a282fd0
|     | | | | `-CXXThisExpr 0x55af6a305748 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55af6a3055e8 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55af6a3055b8 <col:19, col:23> '<bound member function type>' .begin 0x55af69f93258
|     | | | |   `-DeclRefExpr 0x55af6a305598 <col:19> 'const String' lvalue ParmVar 0x55af6a3046f0 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55af6a305658 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55af6a305628 <col:32, col:36> '<bound member function type>' .end 0x55af69f93470
|     | | | |   `-DeclRefExpr 0x55af6a305608 <col:32> 'const String' lvalue ParmVar 0x55af6a3046f0 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55af6a3057f8 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55af6a3057d8 <col:43> 'const bool' lvalue Var 0x55af6a304f48 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55af6a3056e0 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55af6a3056c8 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55af6a3056a8 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x55af6a305810 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55af6a305708 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55af6a305438 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55af6a305848 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55af6a305828 <col:73> 'const int' lvalue Var 0x55af6a305140 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55af6a3058b0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55af6a305880 <col:16, col:20> '<bound member function type>' .end 0x55af69f93470
|     | |     `-DeclRefExpr 0x55af6a305860 <col:16> 'const String' lvalue ParmVar 0x55af6a3046f0 'str' 'const String &'
|     | `-BinaryOperator 0x55af6a305908 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55af6a284e38 <col:13> 'int' lvalue ->status 0x55af6a2838d8
|     |   | `-CXXThisExpr 0x55af6a284e28 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55af6a3058f0 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55af6a284e68 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55af6a282530 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55af6a305aa0 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55af6a3059c0 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55af6a3059a8 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55af6a305990 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55af6a284ee8 <col:13> 'int' lvalue ->status 0x55af6a2838d8
|     | | |     `-CXXThisExpr 0x55af6a284ed8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55af6a305970 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55af6a305940 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55af6a284f28 <col:23> 'int' lvalue ->status 0x55af6a2838d8
|     | |   |   `-CXXThisExpr 0x55af6a284f18 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55af6a305958 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55af6a284f58 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55af6a2825c0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55af6a305a80 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55af6a305a30 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55af6a305a00 <col:13, col:18> '<bound member function type>' .error 0x55af6a229c70
|     |   | | `-DeclRefExpr 0x55af6a3059e0 <col:13> 'const ArgContext' lvalue ParmVar 0x55af6a304830 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55af6a305a58 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55af6a285068 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55af6a305a70 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55af6a2850d0 <col:20> 'bool' false
|     |-DeclStmt 0x55af6a305fe8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55af6a305f90 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x55af6a305f40 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x55af6a305f20 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x55af6a305eb0 'type'
|     |       `-ElaboratedType 0x55af6a305e60 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x55af6a305e40 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x55af69f25758 'unsigned_type'
|     |           `-BuiltinType 0x55af69c4a410 'unsigned int'
|     |-CallExpr 0x55af6a306640 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55af6a306628 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55af6a3065a8 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55af6a306488 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x55af69f363e8 'extract_integer')
|     | |-ImplicitCastExpr 0x55af6a306688 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55af6a306670 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55af6a306048 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55af6a305438 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55af6a306118 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x55af6a3060c8 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x55af6a3047c8 'result' 'unsigned int &'
|     `-ReturnStmt 0x55af6a3066a0 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55af6a285478 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55af6a2837e8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55af6a283498 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55af6a283748 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55af6a283548 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55af6a2835e8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55af6a283660 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55af6a283ff8 <col:71> 'const ArgContext' lvalue Var 0x55af6a279a98 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55af6a285c08 <col:83, line:1083:5>
| |   |-DeclStmt 0x55af6a285560 <line:1071:9, col:12>
| |   | `-VarDecl 0x55af6a2854f8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55af6a285be0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55af6a2857f0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55af6a285678 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55af6a285640 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55af6a285588 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55af6a2855e0 <col:31> 'const String' lvalue ParmVar 0x55af6a283548 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55af6a285600 <col:36> 'V' lvalue Var 0x55af6a2854f8 'x' 'V'
| |     | |   `-DeclRefExpr 0x55af6a285620 <col:39> 'const ArgContext' lvalue ParmVar 0x55af6a283660 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55af6a2857d0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55af6a2857b0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55af6a285798 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55af6a285780 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55af6a2856a0 <col:17> 'int' lvalue ->status 0x55af6a2838d8
| |     |     |     `-CXXThisExpr 0x55af6a285690 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55af6a285760 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55af6a285730 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55af6a2856e0 <col:27> 'int' lvalue ->status 0x55af6a2838d8
| |     |       |   `-CXXThisExpr 0x55af6a2856d0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55af6a285748 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55af6a285710 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55af6a2825c0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55af6a285820 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55af6a285810 <col:20> 'bool' false
| |     `-IfStmt 0x55af6a285bb8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55af6a2858c0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55af6a285890 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55af6a285840 <col:18> 'int' lvalue ->status 0x55af6a2838d8
| |       | |   `-CXXThisExpr 0x55af6a285830 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55af6a2858a8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55af6a285870 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55af6a2825c0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55af6a285af8 <col:42, line:1079:9>
| |       | |-CallExpr 0x55af6a285aa0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55af6a2858f0 <line:1076:13> '<bound member function type>' ->range_error 0x55af6a283ee8
| |       | | | `-CXXThisExpr 0x55af6a2858e0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55af6a285920 <col:25> 'const ArgContext' lvalue ParmVar 0x55af6a283660 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55af6a285a00 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55af6a285a78 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55af6a285a58 <col:43> 'V' lvalue Var 0x55af6a2854f8 'x' 'V'
| |       | `-ReturnStmt 0x55af6a285ae8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55af6a285ad8 <col:20> 'bool' false
| |       `-CompoundStmt 0x55af6a285b98 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55af6a285b58 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55af6a285b18 <col:13> 'V' lvalue ParmVar 0x55af6a2835e8 'result' 'V &'
| |         | `-DeclRefExpr 0x55af6a285b38 <col:22> 'V' lvalue Var 0x55af6a2854f8 'x' 'V'
| |         `-ReturnStmt 0x55af6a285b88 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55af6a285b78 <col:20> 'bool' true
| `-CXXMethodDecl 0x55af6a3042d8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55af6a3040b0 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55af6a304188 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x55af6a3041f0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x55af6a304f28 <col:83, line:1083:5>
|     |-DeclStmt 0x55af6a304560 <line:1071:9, col:12>
|     | `-VarDecl 0x55af6a3044f8 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x55af6a304f00 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55af6a304b90 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55af6a304ab8 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55af6a304a80 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55af6a304a38 <col:14> '<bound member function type>' ->parse_saturating 0x55af6a304918
|       | |   | `-CXXThisExpr 0x55af6a304a28 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55af6a3045d0 <col:31> 'const String' lvalue ParmVar 0x55af6a3040b0 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55af6a3045f0 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x55af6a3044f8 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x55af6a304610 <col:39> 'const ArgContext' lvalue ParmVar 0x55af6a3041f0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55af6a304b70 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55af6a304b50 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55af6a304b38 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55af6a304b20 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x55af6a2856a0 <col:17> 'int' lvalue ->status 0x55af6a2838d8
|       |     |     `-CXXThisExpr 0x55af6a285690 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55af6a304b00 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55af6a304ad0 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x55af6a2856e0 <col:27> 'int' lvalue ->status 0x55af6a2838d8
|       |       |   `-CXXThisExpr 0x55af6a2856d0 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55af6a304ae8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x55af6a285710 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55af6a2825c0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55af6a304bb0 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55af6a285810 <col:20> 'bool' false
|       `-IfStmt 0x55af6a304ed8 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55af6a304bf0 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55af6a304bc0 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x55af6a285840 <col:18> 'int' lvalue ->status 0x55af6a2838d8
|         | |   `-CXXThisExpr 0x55af6a285830 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55af6a304bd8 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55af6a285870 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55af6a2825c0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55af6a304e10 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55af6a304d80 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x55af6a2858f0 <line:1076:13> '<bound member function type>' ->range_error 0x55af6a283ee8
|         | | | `-CXXThisExpr 0x55af6a2858e0 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55af6a304c10 <col:25> 'const ArgContext' lvalue ParmVar 0x55af6a3041f0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55af6a304de8 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55af6a304db8 <col:31, col:50> 'const bool' lvalue Var 0x55af69f25600 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55af6a304d58 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55af6a304d40 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55af6a304d28 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55af6a304d08 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x55af6a3044f8 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x55af6a304e00 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55af6a285ad8 <col:20> 'bool' false
|         `-CompoundStmt 0x55af6a304eb8 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55af6a304e88 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x55af6a304e30 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x55af6a304188 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x55af6a304e70 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x55af6a304e50 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x55af6a3044f8 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x55af6a304ea8 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x55af6a285b78 <col:20> 'bool' true
|-FieldDecl 0x55af6a283870 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55af6a2838d8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55af6a283928 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55af6a283be0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55af6a283968 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55af6a2839e8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55af6a283a60 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55af6a283ae0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55af6a283ee8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55af6a283cb0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55af6a283d28 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55af6a283dc0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55af6a286468 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55af6a286468
| `-ParmVarDecl 0x55af6a286578 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55af6a2866f8 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55af6a286808 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55af6a300dc0 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55af6a300d90 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55af6a300d60 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55af6a300d30 <col:7> 'IntArg' lvalue ParmVar 0x55af6a286808 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55af6a283870 'base' 'int'
| | `-ImplicitCastExpr 0x55af6a300eb8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55af6a300e88 <col:7> 'int' xvalue .base 0x55af6a283870
| |     `-CXXStaticCastExpr 0x55af6a300e58 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55af6a300e28 <col:7> 'IntArg' lvalue ParmVar 0x55af6a286808 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55af6a2838d8 'status' 'int'
| | `-ImplicitCastExpr 0x55af6a300f88 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55af6a300f58 <col:7> 'int' xvalue .status 0x55af6a2838d8
| |     `-CXXStaticCastExpr 0x55af6a300f28 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55af6a300ef8 <col:7> 'IntArg' lvalue ParmVar 0x55af6a286808 '' 'IntArg &&'
| `-CompoundStmt 0x55af6a300fe0 <col:7>
`-CXXDestructorDecl 0x55af6a2fff20 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55af6a28aa50 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x55af6a28aca8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55af6a2ffe48 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55af6a3003c0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55af6a3003a0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55af6a300430 <col:19>
|-CXXConstructorDecl 0x55af6a300028 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x55af6a300028
| `-ParmVarDecl 0x55af6a300138 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x55af6a3001d8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55af6a3002e8 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55af6a300ff0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55af6a300d10 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55af6a300ce0 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x55af6a300cb0 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x55af6a3002e8 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x55af6a301060 <col:19>
`-CXXDestructorDecl 0x55af6a300470 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
