
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605d961ba98 prev 0x5605d9613238 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5605d961bb90 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5605d961bc20 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5605d961bc98 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5605d961bd58 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5605d961be20 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5605d961bf98 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5605d961bed0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5605d961c040 <col:24>
| `-OptimizeNoneAttr 0x5605d961c098 <col:34>
|-CXXMethodDecl 0x5605d961c0e0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5605d961c398 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5605d961c190 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5605d961c208 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5605d961c288 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5605d961c450 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5605d961c488 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5605d961c4f0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5605d961c578 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5605d961c898 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5605d961c630 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5605d961c6a8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5605d961c720 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5605d961c7a0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5605d961c9b0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5605d9624328 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5605d9624328
| `-ParmVarDecl 0x5605d9624438 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5605d96244d8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5605d96244d8
| `-ParmVarDecl 0x5605d96245e8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5605d96f2bc0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605d960eab0 prev 0x5605d960e830 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5605d960eba8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5605d960ec38 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5605d960ec98 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5605d960ed88 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5605d960ee88 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5605d960f058 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5605d960ef08 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5605d960ef80 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5605d960f1e8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5605d960f120 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5605d960f290 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5605d960f3c8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5605d960f300 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5605d960f568 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5605d960f4a8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5605d960f708 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5605d960f648 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5605d960f7b0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5605d960f8b0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5605d960f990 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d960f890 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5605d960f870 <col:26> 'int' 1
| `-EnumConstantDecl 0x5605d960f940 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5605d960f9a8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5605d960f920 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5605d960f900 <col:44> 'int' 2
|-CXXMethodDecl 0x5605d960faf0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5605d960f9d8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5605d960fa58 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5605d960fc48 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5605d960fbb8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5605d960fe88 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5605d960fd08 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5605d960fd80 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5605d960ff38 <col:20>
| `-OptimizeNoneAttr 0x5605d960ff90 <col:30>
|-CXXMethodDecl 0x5605d9610098 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5605d960ffd0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5605d9610140 <col:20>
| `-OptimizeNoneAttr 0x5605d9610198 <col:30>
|-CXXMethodDecl 0x5605d96101e8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5605d96102b0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5605d96103c8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5605d9610450 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5605d96104d8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5605d9610560 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x5605d96105e8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5605d9610678 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5605d9610738 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5605d96107c0 <line:63:5, col:28> col:23 used PUSH 'const char []' static
|-VarDecl 0x5605d9610848 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5605d96108d0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5605d9610958 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5605d96109e0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5605d9610a70 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5605d9610b30 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5605d9610bc0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5605d9610d10 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5605d9610c78 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5605d9610ea0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5605d9610dd0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5605d9611150 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5605d9610f58 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5605d9610fd8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5605d9611058 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5605d9611208 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5605d9611310 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5605d96115a0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d96112f0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5605d96112d0 <col:33> 'int' 0
| |-EnumConstantDecl 0x5605d96113a0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5605d96115b8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d9611380 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5605d9611360 <col:32> 'int' 20
| |-EnumConstantDecl 0x5605d9611430 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5605d96115d0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d9611410 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5605d96113f0 <col:38> 'int' 90
| |-EnumConstantDecl 0x5605d96114c0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5605d96115e8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d96114a0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5605d9611480 <col:35> 'int' 100
| `-EnumConstantDecl 0x5605d9611550 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5605d9611600 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5605d9611530 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5605d9611510 <col:32> 'int' 2000
|-CXXMethodDecl 0x5605d9611640 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5605d9611a80 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5605d96118f0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5605d9611968 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5605d9611b50 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5605d9611cd0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5605d9611c00 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5605d9611ed8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5605d9611d88 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5605d9611e00 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5605d9611fd8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5605d9612078 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5605d9612140 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5605d96121d0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5605d9612400 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d96121b0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5605d9612190 <col:36> 'int' EnumConstant 0x5605d9612140 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5605d9612220 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5605d9612270 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5605d96122c0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5605d9612310 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5605d9612360 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5605d96123b0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5605d96124e8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5605d9612428 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5605d96125b0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5605d9612670 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5605d9612730 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5605d96127f0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5605d9612908 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5605d96129d0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5605d9612b50 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5605d9612a80 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5605d9612c78 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5605d9612e78 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5605d9612d28 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5605d9612da8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5605d96207c8 <col:54, line:127:5>
|   |-ParenExpr 0x5605d9620678 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5605d9620648 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5605d9620338 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5605d9620310 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5605d96202f8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5605d96202e0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5605d96202b0 <col:31> 'Router *' lvalue ->_router 0x5605d961e190
|   |   |         `-CXXThisExpr 0x5605d96202a0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5605d9620398 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5605d9620378 <col:48> 'int' 0
|   |   `-CallExpr 0x5605d96205a8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5605d9620590 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5605d9620570 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605d9149130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5605d96205e8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d9620408 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5605d9620600 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d9620428 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5605d9620618 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5605d9620460 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5605d9620630 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5605d9620558 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5605d9620540 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5605d96204f8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5605d9620710 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5605d96206a8 <col:9> 'Router *' lvalue ->_router 0x5605d961e190
|   | | `-CXXThisExpr 0x5605d9620698 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5605d96206f8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5605d96206d8 <col:19> 'Router *' lvalue ParmVar 0x5605d9612d28 'r' 'Router *'
|   `-BinaryOperator 0x5605d96207a8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5605d9620740 <col:9> 'int' lvalue ->_eindex 0x5605d961e1f8
|     | `-CXXThisExpr 0x5605d9620730 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5605d9620790 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5605d9620770 <col:19> 'int' lvalue ParmVar 0x5605d9612da8 'eindex' 'int'
|-CXXMethodDecl 0x5605d9613000 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5605d9612f38 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5605d96130d0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5605d9613198 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5605d9613238 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5605d9613488 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5605d9613300 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5605d9613380 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5605d9613538 <col:20>
| `-OptimizeNoneAttr 0x5605d9613590 <col:30>
|-CXXMethodDecl 0x5605d9613698 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5605d96135d0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5605d9613740 <col:20>
| `-OptimizeNoneAttr 0x5605d9613798 <col:30>
|-CXXMethodDecl 0x5605d9613868 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5605d96137d8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5605d9613910 <col:20>
| `-OptimizeNoneAttr 0x5605d9613968 <col:30>
|-CXXMethodDecl 0x5605d9613af8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5605d96139a0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5605d9613a20 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5605d9613c88 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5605d9613bc0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5605d9613dd8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5605d9613d48 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5605d9613f28 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5605d9613e98 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5605d9614078 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5605d9613fe8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5605d9614338 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5605d9614130 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5605d96141b0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5605d9614258 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5605d9614410 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5605d96144d0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5605d96147a0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5605d9614650 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5605d96146c8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5605d96148c8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5605d9614aa0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5605d9614980 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5605d9614a00 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5605d9614c88 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5605d9614b68 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5605d9614be8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5605d9614ff8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5605d9614d48 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5605d9614dc0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5605d9614e40 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5605d961fdb0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5605d961fd90 <col:106> 'int' 0
| `-ParmVarDecl 0x5605d9614eb8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5605d961fde8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5605d961fdc8 <col:126> 'int' 0
|-CXXMethodDecl 0x5605d9615398 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5605d96150c8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5605d9615160 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5605d96151e0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5605d9615258 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5605d961fe20 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5605d961fe00 <col:114> 'int' 0
|-CXXMethodDecl 0x5605d9615728 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5605d9615470 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5605d96154e8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5605d9615568 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5605d961fe38 <col:96> 'int' 0
| `-ParmVarDecl 0x5605d96155e0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5605d961fe78 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5605d961fe58 <col:116> 'int' 0
|-CXXMethodDecl 0x5605d9615aa8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5605d96157f8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5605d9615870 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5605d96158f0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5605d961feb0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5605d961fe90 <col:109> 'int' 0
| `-ParmVarDecl 0x5605d9615968 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5605d961fee8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5605d961fec8 <col:129> 'int' 0
|-CXXMethodDecl 0x5605d9615e28 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5605d9615b78 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5605d9615bf0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5605d9615c70 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5605d9615ce8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5605d961ff20 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5605d961ff00 <col:117> 'int' 0
|-CXXMethodDecl 0x5605d96161b8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5605d9615f00 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605d9615f78 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5605d9615ff8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5605d961ff38 <col:99> 'int' 0
| `-ParmVarDecl 0x5605d9616070 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5605d961ff78 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5605d961ff58 <col:119> 'int' 0
|-CXXMethodDecl 0x5605d96165d8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5605d9616288 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5605d9616308 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5605d9616380 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5605d9616400 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5605d961ffb0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5605d961ff90 <col:108> 'int' 0
| `-ParmVarDecl 0x5605d9616480 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5605d961ffe8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5605d961ffc8 <col:141> 'int' 0
|-CXXMethodDecl 0x5605d96169f8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5605d96166b0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5605d9616730 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5605d96167a8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5605d9616828 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5605d96168a8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5605d9620000 <col:121> 'int' 0
|-CXXMethodDecl 0x5605d9616e28 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5605d9616ad8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5605d9616b58 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5605d9616bd0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5605d9616c50 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5605d9620020 <col:98> 'int' 0
| `-ParmVarDecl 0x5605d9616cd0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5605d9620040 <col:123> 'int' 0
|-CXXMethodDecl 0x5605d96170f0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5605d9616f00 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5605d9616f80 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5605d9617000 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5605d9620060 <col:80> 'int' 0
|-EnumDecl 0x5605d96171a8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5605d96172b0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5605d9617540 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d9617290 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5605d9617270 <col:42> 'int' 1
| |-EnumConstantDecl 0x5605d9617340 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5605d9617558 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d9617320 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5605d9617300 <col:40> 'int' 2
| |-EnumConstantDecl 0x5605d96173d0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5605d9617570 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d96173b0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5605d9617390 <col:44> 'int' 4
| |-EnumConstantDecl 0x5605d9617460 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5605d9617588 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d9617440 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5605d9617420 <col:36> 'int' 7
| `-EnumConstantDecl 0x5605d96174f0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5605d96175a0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5605d96174d0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5605d96174b0 <col:34> 'int' 6
|-CXXMethodDecl 0x5605d9617858 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5605d96175c8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5605d9617668 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5605d96176e8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5605d9617760 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5605d9620118 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5605d9620100 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5605d96200e8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5605d96200c8 <col:98, col:105> 'String' (CXXTemporary 0x5605d96200c8)
|           `-CXXTemporaryObjectExpr 0x5605d9620090 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5605d9617af8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5605d9617928 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5605d96179a0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5605d9617a18 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5605d96201c8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5605d96201b0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5605d9620198 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5605d9620178 <col:94, col:101> 'String' (CXXTemporary 0x5605d9620178)
| |         `-CXXTemporaryObjectExpr 0x5605d9620140 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5605d96209b0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5605d9620928 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5605d96208f8 <col:9> '<bound member function type>' ->add_task_handlers 0x5605d9617858
|     | `-CXXThisExpr 0x5605d96208e8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5605d9620968 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5605d9620868 <col:27> 'Task *' lvalue ParmVar 0x5605d9617928 'task' 'Task *'
|     |-ImplicitCastExpr 0x5605d9620980 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5605d9620888 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5605d96179a0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5605d9620998 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5605d96208a8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5605d96174f0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5605d96208c8 <col:62> 'const String' lvalue ParmVar 0x5605d9617a18 'prefix' 'const String &'
|-CXXMethodDecl 0x5605d9617d08 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5605d9617bc0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5605d9617c38 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5605d9620278 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5605d9620260 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5605d9620248 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5605d9620228 <col:70, col:77> 'String' (CXXTemporary 0x5605d9620228)
| |         `-CXXTemporaryObjectExpr 0x5605d96201f0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5605d9620b88 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5605d9620b00 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5605d9620ad0 <col:9> '<bound member function type>' ->add_task_handlers 0x5605d9617858
|     | `-CXXThisExpr 0x5605d9620ac0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5605d9620b40 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5605d9620a40 <col:27> 'Task *' lvalue ParmVar 0x5605d9617bc0 'task' 'Task *'
|     |-ImplicitCastExpr 0x5605d9620b58 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5605d9620a60 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5605d9620b70 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5605d9620a80 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5605d96174f0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5605d9620aa0 <col:57> 'const String' lvalue ParmVar 0x5605d9617c38 'prefix' 'const String &'
|-CXXMethodDecl 0x5605d9617fe8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5605d9617dd0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605d9617e50 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605d9617ec8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5605d9618298 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5605d96180b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605d9618138 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605d96181b8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5605d9618588 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5605d9618368 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605d96183e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605d9618460 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5605d9618838 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5605d9618658 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605d96186d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605d9618758 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5605d9618ae8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5605d9618908 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605d9618988 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605d9618a08 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5605d9618d98 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5605d9618bb8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605d9618c38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605d9618cb0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5605d9619048 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5605d9618e68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605d9618ee8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605d9618f68 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5605d9619358 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5605d9619170 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605d96191f0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605d9619270 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5605d9619638 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5605d9619428 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605d96194a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605d9619550 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5605d9619918 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5605d9619708 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605d9619788 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605d9619830 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5605d9619b80 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5605d96199e8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5605d9619a68 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5605d9619ae0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5605d9619e28 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5605d9619c50 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5605d9619cd0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5605d9619d48 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5605d961a0d8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5605d9619ef8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605d9619f78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605d9619ff8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5605d961a388 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5605d961a1a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605d961a228 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605d961a2a0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5605d961a638 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5605d961a458 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605d961a4d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605d961a550 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5605d961a908 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5605d961a708 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605d961a788 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605d961a828 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5605d961ac38 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5605d961a9d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605d961aa58 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5605d961aad0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5605d961ab48 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5605d9620290 <col:93> 'bool' false
|-CXXMethodDecl 0x5605d961ae20 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5605d961ad08 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5605d961ad88 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5605d961aff8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5605d961aee0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5605d961af60 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5605d961b2d8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5605d961b0b8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5605d961b130 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5605d961b1b0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5605d961b228 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5605d961b5c8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5605d961b3a8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5605d961b420 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5605d961b4a0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5605d961b518 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5605d961b800 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5605d961b6a0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5605d961b720 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5605d961b9e8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5605d961b8c8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5605d961b948 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5605d961ba98 prev 0x5605d9613238 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5605d961bb90 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5605d961bc20 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5605d961bc98 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5605d961bd58 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5605d961be20 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5605d961bf98 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5605d961bed0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5605d961c040 <col:24>
| | `-OptimizeNoneAttr 0x5605d961c098 <col:34>
| |-CXXMethodDecl 0x5605d961c0e0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5605d961c398 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5605d961c190 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5605d961c208 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5605d961c288 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5605d961c450 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5605d961c488 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5605d961c4f0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5605d961c578 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5605d961c898 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5605d961c630 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5605d961c6a8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5605d961c720 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5605d961c7a0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5605d961c9b0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5605d9624328 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5605d9624328
| | `-ParmVarDecl 0x5605d9624438 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5605d96244d8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5605d96244d8
| | `-ParmVarDecl 0x5605d96245e8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5605d96f2bc0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5605d961ca28 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5605d961cac8 <col:38> "" ""
|-CXXMethodDecl 0x5605d961cb58 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5605d961cbf8 <col:44> "" ""
|-AccessSpecDecl 0x5605d961cc68 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5605d961cc90 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5605d961cd90 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5605d961cde0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5605d961cd70 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5605d961cd50 <col:27> 'int' 4
|-FieldDecl 0x5605d961ce98 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5605d961d048 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5605d961d100 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5605d961e190 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5605d961e1f8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5605d961e348 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5605d961e288 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5605d961e4f8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5605d961e408 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5605d961e6d8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5605d961e5b8 <col:20> col:23 'int'
| `-ParmVarDecl 0x5605d961e638 <col:25> col:28 'int'
|-CXXMethodDecl 0x5605d961e980 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5605d961e7a0 <col:23> col:26 'int'
| |-ParmVarDecl 0x5605d961e820 <col:28> col:31 'int'
| `-ParmVarDecl 0x5605d961e898 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5605d961ea38 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5605d961eb00 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5605d961eb50 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5605d961eba0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5605d961ed80 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5605d961ec30 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5605d961eca8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5605d961f028 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5605d961ee48 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5605d961eec8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5605d961ef40 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5605d961f248 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5605d961f0f8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5605d961f178 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5605d961f580 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5605d961f308 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5605d961f388 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5605d961f400 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5605d961f480 <col:57> col:60 'int'
|-CXXMethodDecl 0x5605d961f768 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5605d961f650 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5605d961f6d0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5605d961f8b8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5605d961f828 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5605d961fc38 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5605d961f978 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5605d961f9f8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5605d961fa70 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5605d961faf0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5605d961fd50 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class Tee
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605d9627498 <../elements/standard/tee.hh:25:1, line:39:1> line:25:7 class Tee definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5605d96275f8 <col:1, col:7> col:7 implicit referenced class Tee
|-AccessSpecDecl 0x5605d9627688 <line:27:2, col:8> col:2 public
|-CXXConstructorDecl 0x5605d9627710 <line:29:3, col:7> col:3 Tee 'void ()'
|-CXXMethodDecl 0x5605d9627810 <line:31:3, col:50> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x5605d96101e8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5605d96286c8 <col:34, col:50>
|   `-ReturnStmt 0x5605d96286b8 <col:36, col:43>
|     `-ImplicitCastExpr 0x5605d96286a0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5605d9628680 <col:43> 'const char [4]' lvalue "Tee"
|-CXXMethodDecl 0x5605d96278d8 <line:32:3, col:51> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x5605d96102b0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5605d96287a0 <col:34, col:51>
|   `-ReturnStmt 0x5605d9628790 <col:36, col:43>
|     `-ImplicitCastExpr 0x5605d9628778 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5605d9628758 <col:43> 'const char [5]' lvalue "1/1-"
|-CXXMethodDecl 0x5605d96279a0 <line:33:3, col:49> col:15 processing 'const char *() const'
| |-Overrides: [ 0x5605d9610678 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x5605d9628800 <col:34, col:49>
|   `-ReturnStmt 0x5605d96287f0 <col:36, col:43>
|     `-ImplicitCastExpr 0x5605d96287d8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5605d96287b8 <col:43> 'const char []' lvalue Var 0x5605d96107c0 'PUSH' 'const char []'
|-CXXMethodDecl 0x5605d9627c70 <line:35:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5605d9611a80 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5605d9627b20 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x5605d9627b98 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x5605d9627e48 <line:37:3, col:26> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x5605d960f058 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x5605d9627d38 <col:13> col:16 'int'
| `-ParmVarDecl 0x5605d9627db0 <col:18, col:25> col:26 'Packet *'
|-CXXConstructorDecl 0x5605d9627f28 <line:25:7> col:7 implicit Tee 'void (const Tee &)' inline default_delete noexcept-unevaluated 0x5605d9627f28
| `-ParmVarDecl 0x5605d9628038 <col:7> col:7 'const Tee &'
|-CXXConstructorDecl 0x5605d96280d8 <col:7> col:7 implicit Tee 'void (Tee &&)' inline default_delete noexcept-unevaluated 0x5605d96280d8
| `-ParmVarDecl 0x5605d96281e8 <col:7> col:7 'Tee &&'
|-CXXMethodDecl 0x5605d9628288 <col:7> col:7 implicit operator= 'Tee &(const Tee &)' inline default_delete noexcept-unevaluated 0x5605d9628288
| `-ParmVarDecl 0x5605d9628398 <col:7> col:7 'const Tee &'
|-CXXMethodDecl 0x5605d9628408 <col:7> col:7 implicit operator= 'Tee &(Tee &&)' inline default_delete noexcept-unevaluated 0x5605d9628408
| `-ParmVarDecl 0x5605d9628518 <col:7> col:7 'Tee &&'
`-CXXDestructorDecl 0x5605d96285a0 <col:7> col:7 implicit ~Tee 'void ()' inline default noexcept-unevaluated 0x5605d96285a0
  `-Overrides: [ 0x5605d960ed88 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.Tee = type { %class.Element.base, [4 x i8] }
  NonVirtualBaseLLVMType:%class.Tee.base = type { %class.Element.base }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605d93e1940 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5605d93e1a58 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5605d93e1af8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5605d93e1b58 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5605d93e1bb8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5605d93e1c68 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605d93e1f70 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5605d93e2088 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5605d93e2130 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5605d93e2198 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5605d93e2228 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5605d93e82c0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5605d93e86f8 <col:12>
|-CXXConstructorDecl 0x5605d93e83c8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5605d93e84d8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5605d93e2130 'data' 'const char *'
| | `-ImplicitCastExpr 0x5605d93eac80 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5605d93eac50 <col:12> 'const char *const' lvalue .data 0x5605d93e2130
| |     `-DeclRefExpr 0x5605d93eac30 <col:12> 'const String::rep_t' lvalue ParmVar 0x5605d93e84d8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5605d93e2198 'length' 'int'
| | `-ImplicitCastExpr 0x5605d93ead10 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5605d93eace0 <col:12> 'const int' lvalue .length 0x5605d93e2198
| |     `-DeclRefExpr 0x5605d93eacc0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5605d93e84d8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5605d93e2228 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5605d93eada0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5605d93ead70 <col:12> 'String::memo_t *const' lvalue .memo 0x5605d93e2228
| |     `-DeclRefExpr 0x5605d93ead50 <col:12> 'const String::rep_t' lvalue ParmVar 0x5605d93e84d8 '' 'const String::rep_t &'
| `-CompoundStmt 0x5605d93eadf8 <col:12>
|-CXXConstructorDecl 0x5605d93e8578 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5605d93e8578
| `-ParmVarDecl 0x5605d93e8688 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5605d93edbe0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5605d93f95f8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5605d93f9708 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5605d93f9c20 <col:12>
|   |-BinaryOperator 0x5605d93f9a38 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5605d93f99f0 <col:12> 'const char *' lvalue ->data 0x5605d93e2130
|   | | `-CXXThisExpr 0x5605d93f99e0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5605d93f9a20 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5605d93f99b0 <col:12> 'const char *const' lvalue .data 0x5605d93e2130
|   |     `-DeclRefExpr 0x5605d93f9990 <col:12> 'const String::rep_t' lvalue ParmVar 0x5605d93f9708 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5605d93f9b00 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5605d93f9ab8 <col:12> 'int' lvalue ->length 0x5605d93e2198
|   | | `-CXXThisExpr 0x5605d93f9aa8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5605d93f9ae8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5605d93f9a78 <col:12> 'const int' lvalue .length 0x5605d93e2198
|   |     `-DeclRefExpr 0x5605d93f9a58 <col:12> 'const String::rep_t' lvalue ParmVar 0x5605d93f9708 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5605d93f9bc8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5605d93f9b80 <col:12> 'String::memo_t *' lvalue ->memo 0x5605d93e2228
|   | | `-CXXThisExpr 0x5605d93f9b70 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5605d93f9bb0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5605d93f9b40 <col:12> 'String::memo_t *const' lvalue .memo 0x5605d93e2228
|   |     `-DeclRefExpr 0x5605d93f9b20 <col:12> 'const String::rep_t' lvalue ParmVar 0x5605d93f9708 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5605d93f9c10 <col:12>
|     `-UnaryOperator 0x5605d93f9bf8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5605d93f9be8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5605d93f9778 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5605d93f9778
  `-ParmVarDecl 0x5605d93f9888 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605d93d8eb0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5605d93d8fc8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5605d93d9058 <col:16, col:22> col:16 public
|-TypedefDecl 0x5605d93d9098 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5605d90adfd0 'const char *'
|   `-QualType 0x5605d90ad521 'const char' const
|     `-BuiltinType 0x5605d90ad520 'char'
|-TypedefDecl 0x5605d93d9120 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5605d93d90f0 'String::const_iterator' sugar
|   |-Typedef 0x5605d93d9098 'const_iterator'
|   `-PointerType 0x5605d90adfd0 'const char *'
|     `-QualType 0x5605d90ad521 'const char' const
|       `-BuiltinType 0x5605d90ad520 'char'
|-TypedefDecl 0x5605d93d9290 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5605d93d9200 'int (String::*)() const'
|   |-RecordType 0x5605d93d8f40 'String'
|   | `-CXXRecord 0x5605d93d8eb0 'String'
|   `-ParenType 0x5605d93d91a0 'int () const' sugar
|     `-FunctionProtoType 0x5605d93add40 'int () const' const cdecl
|       `-BuiltinType 0x5605d90ad580 'int'
|-TypedefDecl 0x5605d93d92f8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5605d9202920 'int64_t' sugar
|   |-Typedef 0x5605d9116390 'int64_t'
|   `-TypedefType 0x5605d90ef630 '__int64_t' sugar
|     |-Typedef 0x5605d90ef208 '__int64_t'
|     `-BuiltinType 0x5605d90ad5a0 'long'
|-TypedefDecl 0x5605d93d9360 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5605d9202840 'uint64_t' sugar
|   |-Typedef 0x5605d9116530 'uint64_t'
|   `-TypedefType 0x5605d90ef6c0 '__uint64_t' sugar
|     |-Typedef 0x5605d90ef278 '__uint64_t'
|     `-BuiltinType 0x5605d90ad640 'unsigned long'
|-TypedefDecl 0x5605d93d93f0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5605d93d93c0 'String::intmax_t' sugar
|   |-Typedef 0x5605d93d92f8 'intmax_t'
|   `-TypedefType 0x5605d9202920 'int64_t' sugar
|     |-Typedef 0x5605d9116390 'int64_t'
|     `-TypedefType 0x5605d90ef630 '__int64_t' sugar
|       |-Typedef 0x5605d90ef208 '__int64_t'
|       `-BuiltinType 0x5605d90ad5a0 'long'
|-TypedefDecl 0x5605d93d9480 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5605d93d9450 'String::uintmax_t' sugar
|   |-Typedef 0x5605d93d9360 'uintmax_t'
|   `-TypedefType 0x5605d9202840 'uint64_t' sugar
|     |-Typedef 0x5605d9116530 'uint64_t'
|     `-TypedefType 0x5605d90ef6c0 '__uint64_t' sugar
|       |-Typedef 0x5605d90ef278 '__uint64_t'
|       `-BuiltinType 0x5605d90ad640 'unsigned long'
|-CXXConstructorDecl 0x5605d93d9540 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5605d93d96e8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5605d93d9628 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5605d93d9898 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5605d93d97d8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5605d93d99f0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5605d93d9960 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5605d93d9c08 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5605d93d9ab8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5605d93d9b38 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5605d93d9e28 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5605d93d9cd8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5605d93d9d58 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5605d93da048 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5605d93d9ef8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5605d93d9f78 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5605d93da268 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5605d93da118 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5605d93da198 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5605d93da3f8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5605d93da330 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5605d93da578 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5605d93da4b8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5605d93da708 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5605d93da640 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5605d93da860 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5605d93da7d0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5605d93da9b8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5605d93da928 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5605d93dab10 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5605d93daa80 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5605d93dac98 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5605d93dabd8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5605d93dae28 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5605d93dad60 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5605d93dafb8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5605d93daef0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5605d93db148 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5605d93db080 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5605d93db240 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5605d93db368 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5605d93db4e8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5605d93db420 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5605d93db638 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5605d93db5a8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5605d93db6f0 <col:63> "" ""
|-CXXMethodDecl 0x5605d93db838 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5605d93db778 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5605d93dba48 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5605d93db8f8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5605d93db978 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5605d93dbc68 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5605d93dbb10 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5605d93dbb90 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5605d93dbf48 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5605d93dbd28 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5605d93dbda8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5605d93e7d90 <col:55> 'int' 10
| `-ParmVarDecl 0x5605d93dbe20 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5605d93e7db0 <col:76> 'bool' true
|-CXXMethodDecl 0x5605d93dc228 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5605d93dc010 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5605d93dc090 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5605d93e7dc0 <col:56> 'int' 10
| `-ParmVarDecl 0x5605d93dc108 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5605d93e7de0 <col:77> 'bool' true
|-CXXMethodDecl 0x5605d93dc330 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5605d93dc3f8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5605d93dc4c0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5605d93dc560 <col:20>
| `-OptimizeNoneAttr 0x5605d93dc5b8 <col:30>
|-CXXConversionDecl 0x5605d93dc6a8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5605d93dc778 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5605d93dc838 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5605d93dc928 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5605d93dc9e8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5605d93dcb68 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5605d93dcaa0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5605d93dccb8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5605d93dcc28 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5605d93dcda8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5605d93dce68 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5605d93dd0b8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5605d93dcf20 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5605d93dcfa0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5605d93dd318 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5605d93dd180 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5605d93dd200 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5605d93dd3e8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5605d93dd5f8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5605d93dd4a0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5605d93dd520 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5605d93dd818 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5605d93dd6c0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5605d93dd740 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5605d93dd9a8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5605d93dd8e0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5605d93dda98 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5605d93ddc08 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5605d93ddb48 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5605d93dde18 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5605d93ddcc8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5605d93ddd48 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5605d93de030 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5605d93dded8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5605d93ddf50 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5605d93de1c0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5605d93de0f0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5605d93de3e0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5605d93de280 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5605d93de300 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5605d93de530 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5605d93de4a0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5605d93de708 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5605d93de5f0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5605d93de670 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5605d93de858 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5605d93de7c8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5605d93dea70 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5605d93de910 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5605d93de990 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5605d93e7df0 <col:39> 'int' 0
|-CXXMethodDecl 0x5605d93dec90 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5605d93deb30 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5605d93debb0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5605d93e7e10 <col:48> 'int' 0
|-CXXMethodDecl 0x5605d93dee70 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5605d93ded50 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5605d93dedd0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5605d93e7e30 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5605d93def40 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5605d93df000 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5605d93df0c0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5605d93df180 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5605d93df240 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5605d93df3e8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5605d93df2f0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5605d93df568 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5605d93df4a0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5605d93df740 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5605d93df628 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5605d93df8b8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5605d93df7f8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5605d93dfa00 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5605d93df970 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5605d93dfb50 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5605d93dfac0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5605d93dfd28 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5605d93dfc10 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5605d93dfc90 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5605d93dff08 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5605d93dfdf0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5605d93dfe70 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5605d93e0058 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5605d93dffc8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5605d93e0268 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5605d93e0118 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5605d93e0198 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5605d93e03c8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5605d93e0330 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5605d93e0520 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5605d93e0488 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5605d93e05c8 <col:57> "" ""
|-CXXMethodDecl 0x5605d93e06d8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5605d93e0648 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5605d93e0828 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5605d93e0798 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5605d93e09a8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5605d93e08e0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5605d93e0a70 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5605d93e0b30 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5605d93e0bf0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5605d93e0c90 <col:49> "" ""
|-CXXMethodDecl 0x5605d93e0d20 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5605d93e0de0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5605d93e0ed0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5605d93e0f98 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5605d93e1058 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5605d93e1118 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5605d93e1210 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5605d93e12d8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5605d93e13a0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5605d93e1578 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5605d93e1458 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5605d93e14d8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5605d93e17a0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5605d93e1640 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5605d93e16c0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5605d93e18b0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5605d93e1918 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5605d93e1940 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5605d93e1a58 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5605d93e1af8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5605d93e1b58 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5605d93e1bb8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5605d93e1c68 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5605d93e1cd0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5605d93e1f08 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5605d93e1f58 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5605d93e1ee8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5605d93e1df8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5605d93e1da0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5605d93e1de0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5605d93e1dc0 <col:32> 'int' 8
|-CXXRecordDecl 0x5605d93e1f70 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5605d93e2088 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5605d93e2130 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5605d93e2198 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5605d93e2228 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5605d93e82c0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5605d93e86f8 <col:12>
| |-CXXConstructorDecl 0x5605d93e83c8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5605d93e84d8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5605d93e2130 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5605d93eac80 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5605d93eac50 <col:12> 'const char *const' lvalue .data 0x5605d93e2130
| | |     `-DeclRefExpr 0x5605d93eac30 <col:12> 'const String::rep_t' lvalue ParmVar 0x5605d93e84d8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5605d93e2198 'length' 'int'
| | | `-ImplicitCastExpr 0x5605d93ead10 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5605d93eace0 <col:12> 'const int' lvalue .length 0x5605d93e2198
| | |     `-DeclRefExpr 0x5605d93eacc0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5605d93e84d8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5605d93e2228 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5605d93eada0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5605d93ead70 <col:12> 'String::memo_t *const' lvalue .memo 0x5605d93e2228
| | |     `-DeclRefExpr 0x5605d93ead50 <col:12> 'const String::rep_t' lvalue ParmVar 0x5605d93e84d8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5605d93eadf8 <col:12>
| |-CXXConstructorDecl 0x5605d93e8578 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5605d93e8578
| | `-ParmVarDecl 0x5605d93e8688 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5605d93edbe0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5605d93f95f8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5605d93f9708 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5605d93f9c20 <col:12>
| |   |-BinaryOperator 0x5605d93f9a38 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5605d93f99f0 <col:12> 'const char *' lvalue ->data 0x5605d93e2130
| |   | | `-CXXThisExpr 0x5605d93f99e0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5605d93f9a20 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5605d93f99b0 <col:12> 'const char *const' lvalue .data 0x5605d93e2130
| |   |     `-DeclRefExpr 0x5605d93f9990 <col:12> 'const String::rep_t' lvalue ParmVar 0x5605d93f9708 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5605d93f9b00 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5605d93f9ab8 <col:12> 'int' lvalue ->length 0x5605d93e2198
| |   | | `-CXXThisExpr 0x5605d93f9aa8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5605d93f9ae8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5605d93f9a78 <col:12> 'const int' lvalue .length 0x5605d93e2198
| |   |     `-DeclRefExpr 0x5605d93f9a58 <col:12> 'const String::rep_t' lvalue ParmVar 0x5605d93f9708 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5605d93f9bc8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5605d93f9b80 <col:12> 'String::memo_t *' lvalue ->memo 0x5605d93e2228
| |   | | `-CXXThisExpr 0x5605d93f9b70 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5605d93f9bb0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5605d93f9b40 <col:12> 'String::memo_t *const' lvalue .memo 0x5605d93e2228
| |   |     `-DeclRefExpr 0x5605d93f9b20 <col:12> 'const String::rep_t' lvalue ParmVar 0x5605d93f9708 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5605d93f9c10 <col:12>
| |     `-UnaryOperator 0x5605d93f9bf8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5605d93f9be8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5605d93f9778 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5605d93f9778
|   `-ParmVarDecl 0x5605d93f9888 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5605d93e22a0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5605d93e24e8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5605d93e2308 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5605d93e2388 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5605d93e2400 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5605d93e8280 <col:79, line:261:5>
|   |-BinaryOperator 0x5605d93e7ef8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5605d93e7e90 <col:2, col:5> 'const char *' lvalue .data 0x5605d93e2130
|   | | `-MemberExpr 0x5605d93e7e60 <col:2> 'String::rep_t' lvalue ->_r 0x5605d93e22a0
|   | |   `-CXXThisExpr 0x5605d93e7e50 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5605d93e7ee0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5605d93e7ec0 <col:12> 'const char *' lvalue ParmVar 0x5605d93e2308 'data' 'const char *'
|   |-BinaryOperator 0x5605d93e7fc0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5605d93e7f58 <col:2, col:5> 'int' lvalue .length 0x5605d93e2198
|   | | `-MemberExpr 0x5605d93e7f28 <col:2> 'String::rep_t' lvalue ->_r 0x5605d93e22a0
|   | |   `-CXXThisExpr 0x5605d93e7f18 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5605d93e7fa8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5605d93e7f88 <col:14> 'int' lvalue ParmVar 0x5605d93e2388 'length' 'int'
|   `-IfStmt 0x5605d93e8268 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5605d93e80e0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5605d93e80c8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5605d93e80a8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5605d93e8088 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5605d93e8020 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5605d93e2228
|     |       | `-MemberExpr 0x5605d93e7ff0 <col:7> 'String::rep_t' lvalue ->_r 0x5605d93e22a0
|     |       |   `-CXXThisExpr 0x5605d93e7fe0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5605d93e8070 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5605d93e8050 <col:17> 'String::memo_t *' lvalue ParmVar 0x5605d93e2400 'memo' 'String::memo_t *'
|     `-CallExpr 0x5605d93e8240 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5605d93e8228 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5605d93e8130 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5605d93d0f18 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5605d93e8198 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5605d93e1af8
|         `-ImplicitCastExpr 0x5605d93e8180 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5605d93e8160 <col:27> 'String::memo_t *' lvalue ParmVar 0x5605d93e2400 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5605d93e2798 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5605d93e25b8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5605d93e2638 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5605d93e26b0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5605d93e22a0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5605d93e8708 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5605d93e8898 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5605d93e8800 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5605d93e8770 <col:2> '<bound member function type>' ->assign_memo 0x5605d93e24e8
|     | `-ImplicitCastExpr 0x5605d93e8838 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5605d93e8760 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5605d93e8850 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5605d93e87a0 <col:14> 'const char *' lvalue ParmVar 0x5605d93e25b8 'data' 'const char *'
|     |-ImplicitCastExpr 0x5605d93e8868 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5605d93e87c0 <col:20> 'int' lvalue ParmVar 0x5605d93e2638 'length' 'int'
|     `-ImplicitCastExpr 0x5605d93e8880 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5605d93e87e0 <col:28> 'String::memo_t *' lvalue ParmVar 0x5605d93e26b0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5605d93e2928 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5605d93e2868 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5605d93e8af0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5605d93e8a70 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5605d93e88c0 <col:2> '<bound member function type>' ->assign_memo 0x5605d93e24e8
|     | `-CXXThisExpr 0x5605d93e88b0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5605d93e8aa8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5605d93e8940 <col:14, col:19> 'const char *' lvalue .data 0x5605d93e2130
|     |   `-MemberExpr 0x5605d93e8910 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5605d93e22a0
|     |     `-DeclRefExpr 0x5605d93e88f0 <col:14> 'const String' lvalue ParmVar 0x5605d93e2868 'x' 'const String &'
|     |-ImplicitCastExpr 0x5605d93e8ac0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5605d93e89c0 <col:25, col:30> 'int' lvalue .length 0x5605d93e2198
|     |   `-MemberExpr 0x5605d93e8990 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5605d93e22a0
|     |     `-DeclRefExpr 0x5605d93e8970 <col:25> 'const String' lvalue ParmVar 0x5605d93e2868 'x' 'const String &'
|     `-ImplicitCastExpr 0x5605d93e8ad8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5605d93e8a40 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5605d93e2228
|         `-MemberExpr 0x5605d93e8a10 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5605d93e22a0
|           `-DeclRefExpr 0x5605d93e89f0 <col:38> 'const String' lvalue ParmVar 0x5605d93e2868 'x' 'const String &'
|-CXXMethodDecl 0x5605d93e29f0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5605d93e94b0 <col:31, line:278:5>
|   `-IfStmt 0x5605d93e9498 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5605d93e8b90 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5605d93e8b78 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5605d93e8b48 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5605d93e2228
|     |     `-MemberExpr 0x5605d93e8b18 <col:6> 'String::rep_t' lvalue ->_r 0x5605d93e22a0
|     |       `-CXXThisExpr 0x5605d93e8b08 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5605d93e9470 <col:15, line:277:2>
|       |-ParenExpr 0x5605d93e9040 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5605d93e9010 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5605d93e8ca0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5605d93e8c88 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5605d93e8c70 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5605d93e8c30 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5605d93e1af8
|       |   |       `-ImplicitCastExpr 0x5605d93e8c18 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5605d93e8be8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5605d93e2228
|       |   |           `-MemberExpr 0x5605d93e8bb8 <col:27> 'String::rep_t' lvalue ->_r 0x5605d93e22a0
|       |   |             `-CXXThisExpr 0x5605d93e8ba8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5605d93e8d00 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5605d93e8ce0 <col:54> 'int' 0
|       |   `-CallExpr 0x5605d93e8f70 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5605d93e8f58 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5605d93e8ed8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605d9149130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5605d93e8fb0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5605d93e8de8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5605d93e8fc8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5605d93e8e18 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5605d93e8fe0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5605d93e8e50 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5605d93e8ff8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5605d93e8ec0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5605d93e8ea8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5605d93e8e70 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5605d93e9390 <line:274:6, line:275:22>
|       | |-CallExpr 0x5605d93e9250 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5605d93e9238 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5605d93e91b0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5605d93d2360 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5605d93e9180 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5605d93e1af8
|       | |   `-ImplicitCastExpr 0x5605d93e9168 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5605d93e9138 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5605d93e2228
|       | |       `-MemberExpr 0x5605d93e9108 <col:40> 'String::rep_t' lvalue ->_r 0x5605d93e22a0
|       | |         `-CXXThisExpr 0x5605d93e90f8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5605d93e9350 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5605d93e9338 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5605d93e9278 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5605d93e71d0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5605d93e9378 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5605d93e92d8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5605d93e2228
|       |       `-MemberExpr 0x5605d93e92a8 <col:15> 'String::rep_t' lvalue ->_r 0x5605d93e22a0
|       |         `-CXXThisExpr 0x5605d93e9298 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5605d93e9450 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5605d93e93e8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5605d93e2228
|         | `-MemberExpr 0x5605d93e93b8 <col:6> 'String::rep_t' lvalue ->_r 0x5605d93e22a0
|         |   `-CXXThisExpr 0x5605d93e93a8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5605d93e9438 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5605d93e9418 <col:16> 'int' 0
|-CXXMethodDecl 0x5605d93e2c88 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5605d93e2aa8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5605d93e2b28 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5605d93e2ba0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5605d93e2d60 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5605d93e2fb0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5605d93e2e18 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5605d93e2e98 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5605d93e2f10 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5605d93e3198 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5605d93e3080 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5605d93e3100 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5605d93e3298 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5605d93e9588 <col:41, line:286:5>
|   `-ReturnStmt 0x5605d93e9578 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5605d93e9548 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5605d93e9510 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5605d93e94f8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5605d93e94d8 <col:46> 'int' 1
|-CXXMethodDecl 0x5605d93e3538 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5605d93e3350 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5605d93e33d0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5605d93e3450 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5605d93e71d0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5605d93e3600 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5605d93e72a0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5605d93e7470 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5605d93e7358 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5605d93e73d8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5605d93e7530 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5605d93e75f8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5605d93e76f8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5605d93e7770 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5605d93e77e8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5605d93e7850 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5605d93e7950 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5605d93e79a0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5605d93e7930 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5605d93e7910 <col:22> 'int' 14
|-CXXMethodDecl 0x5605d93e7bb8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5605d93e79d0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5605d93e7a50 <col:38> col:41 'int'
| `-ParmVarDecl 0x5605d93e7ad0 <col:43> col:46 'int'
|-FriendDecl 0x5605d93e7cc0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5605d93e7d50 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5605d94abdd0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5605d94abfa8 prev 0x5605d94abdd0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5605d94ac038 <col:46, col:52> col:46 public
|-TypedefDecl 0x5605d94ac060 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5605d90ad580 'int'
|-TypedefDecl 0x5605d96585e0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5605d9658590 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5605d9658570 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5605d94ac278 'type'
|     `-SubstTemplateTypeParmType 0x5605d94ac240 'String' sugar
|       |-TemplateTypeParmType 0x5605d939d760 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5605d939d710 'T'
|       `-RecordType 0x5605d93d8f40 'String'
|         `-CXXRecord 0x5605d93d8eb0 'String'
|-TypedefDecl 0x5605d9658698 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5605d9658660 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5605d9658640 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5605d96585e0 'type'
|     `-ElaboratedType 0x5605d9658590 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5605d9658570 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5605d94ac278 'type'
|         `-SubstTemplateTypeParmType 0x5605d94ac240 'String' sugar
|           |-TemplateTypeParmType 0x5605d939d760 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5605d939d710 'T'
|           `-RecordType 0x5605d93d8f40 'String'
|             `-CXXRecord 0x5605d93d8eb0 'String'
|-CXXMethodDecl 0x5605d9658818 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5605d9658728 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5605d9658908 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5605d96589e8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5605d96589e8
|-CXXMethodDecl 0x5605d9658cb8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5605d9658bc0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5605d9658ef8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5605d9658d70 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5605d9658de8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5605d96590c8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5605d9658fb8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5605d9659030 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5605d9659228 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5605d96592f8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5605d9659548 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5605d96593b8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5605d9659430 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5605d96597a8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5605d9659618 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5605d9659690 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5605d9659968 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5605d9659878 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5605d9659b28 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5605d9659a30 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5605d9659be0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5605d9659c90 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5605d9659ec8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5605d9659d40 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5605d9659db8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5605d965a168 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5605d965a070 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5605d965a230 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5605d965a280 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5605d965a2d0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5605d96116f0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5605d94aa838 prev 0x5605d96116f0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5605d94abd40 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5605d94abcf0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5605d94abcd0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5605d94abb80 'type'
|     `-SubstTemplateTypeParmType 0x5605d94aba10 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5605d9373510 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5605d93734b8 'F'
|       `-RecordType 0x5605d94ab670 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5605d94ab590 'typed_array_memory'
|-FieldDecl 0x5605d965a320 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5605d965a370 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5605d965a3a8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5605d94aa8d0 'String' sugar
|   |-TemplateTypeParmType 0x5605d93aaa80 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5605d93aaa28 'T'
|   `-RecordType 0x5605d93d8f40 'String'
|     `-CXXRecord 0x5605d93d8eb0 'String'
|-TypedefDecl 0x5605d965a438 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5605d965a400 'String &'
|   `-SubstTemplateTypeParmType 0x5605d94aa8d0 'String' sugar
|     |-TemplateTypeParmType 0x5605d93aaa80 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5605d93aaa28 'T'
|     `-RecordType 0x5605d93d8f40 'String'
|       `-CXXRecord 0x5605d93d8eb0 'String'
|-TypedefDecl 0x5605d965a4c8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5605d965a490 'const String &'
|   `-QualType 0x5605d94aa8d1 'const String' const
|     `-SubstTemplateTypeParmType 0x5605d94aa8d0 'String' sugar
|       |-TemplateTypeParmType 0x5605d93aaa80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5605d93aaa28 'T'
|       `-RecordType 0x5605d93d8f40 'String'
|         `-CXXRecord 0x5605d93d8eb0 'String'
|-TypedefDecl 0x5605d965a558 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5605d965a520 'String *'
|   `-SubstTemplateTypeParmType 0x5605d94aa8d0 'String' sugar
|     |-TemplateTypeParmType 0x5605d93aaa80 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5605d93aaa28 'T'
|     `-RecordType 0x5605d93d8f40 'String'
|       `-CXXRecord 0x5605d93d8eb0 'String'
|-TypedefDecl 0x5605d965a5e8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5605d965a5b0 'const String *'
|   `-QualType 0x5605d94aa8d1 'const String' const
|     `-SubstTemplateTypeParmType 0x5605d94aa8d0 'String' sugar
|       |-TemplateTypeParmType 0x5605d93aaa80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5605d93aaa28 'T'
|       `-RecordType 0x5605d93d8f40 'String'
|         `-CXXRecord 0x5605d93d8eb0 'String'
|-TypedefDecl 0x5605d965b240 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5605d965b1f0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5605d965b1d0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5605d965b108 'type'
|     `-LValueReferenceType 0x5605d965b0d0 'const String &'
|       `-QualType 0x5605d965ae71 'const String' const
|         `-SubstTemplateTypeParmType 0x5605d965ae70 'String' sugar
|           |-TemplateTypeParmType 0x5605d937d460 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5605d937d408 'T'
|           `-RecordType 0x5605d93d8f40 'String'
|             `-CXXRecord 0x5605d93d8eb0 'String'
|-TypedefDecl 0x5605d965b2a8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5605d965a490 'const String &'
|   `-QualType 0x5605d94aa8d1 'const String' const
|     `-SubstTemplateTypeParmType 0x5605d94aa8d0 'String' sugar
|       |-TemplateTypeParmType 0x5605d93aaa80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5605d93aaa28 'T'
|       `-RecordType 0x5605d93d8f40 'String'
|         `-CXXRecord 0x5605d93d8eb0 'String'
|-TypedefDecl 0x5605d965b300 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5605d90ad580 'int'
|-TypedefDecl 0x5605d965b368 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5605d965a520 'String *'
|   `-SubstTemplateTypeParmType 0x5605d94aa8d0 'String' sugar
|     |-TemplateTypeParmType 0x5605d93aaa80 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5605d93aaa28 'T'
|     `-RecordType 0x5605d93d8f40 'String'
|       `-CXXRecord 0x5605d93d8eb0 'String'
|-TypedefDecl 0x5605d965b3d0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5605d965a5b0 'const String *'
|   `-QualType 0x5605d94aa8d1 'const String' const
|     `-SubstTemplateTypeParmType 0x5605d94aa8d0 'String' sugar
|       |-TemplateTypeParmType 0x5605d93aaa80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5605d93aaa28 'T'
|       `-RecordType 0x5605d93d8f40 'String'
|         `-CXXRecord 0x5605d93d8eb0 'String'
|-EnumDecl 0x5605d965b428 <line:134:5> col:5
| `-EnumConstantDecl 0x5605d965b520 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5605d965b500 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5605d93ac108 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5605d93ac0e0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5605d93ac0c0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5605d965b5a8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5605d965b838 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5605d965b660 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5605d965b700 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5605d965bac8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5605d965b9b0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5605d965bd88 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5605d965bc70 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5605d965c0a0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5605d965bf80 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5605d965c3b0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5605d965c290 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5605d965c6a0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5605d965c4e8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5605d965c560 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5605d965c7c8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5605d965c878 <col:20> Inherited
| `-OptimizeNoneAttr 0x5605d965c8d0 <col:30> Inherited
|-CXXMethodDecl 0x5605d965c918 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5605d965c9c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5605d965ca20 <col:30> Inherited
|-CXXMethodDecl 0x5605d965cae8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5605d965cb98 <col:20> Inherited
| `-OptimizeNoneAttr 0x5605d965cbf0 <col:30> Inherited
|-CXXMethodDecl 0x5605d965cc38 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5605d965cce8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5605d965cd40 <col:30> Inherited
|-CXXMethodDecl 0x5605d965cd88 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5605d965ce38 <col:20> Inherited
| `-OptimizeNoneAttr 0x5605d965ce90 <col:30> Inherited
|-CXXMethodDecl 0x5605d965ced8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5605d965cf88 <col:20> Inherited
| `-OptimizeNoneAttr 0x5605d965cfe0 <col:30> Inherited
|-CXXMethodDecl 0x5605d965d008 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5605d965d0b8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5605d965d168 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5605d965d328 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5605d965d218 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5605d965d290 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5605d965d478 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5605d965d3e8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5605d965d628 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5605d965d530 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5605d965d6e0 <col:20>
| `-OptimizeNoneAttr 0x5605d965d738 <col:30>
|-CXXMethodDecl 0x5605d965d858 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5605d965d760 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5605d965d910 <col:20>
| `-OptimizeNoneAttr 0x5605d965d968 <col:30>
|-CXXMethodDecl 0x5605d965da20 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5605d965d990 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5605d965db68 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5605d965dad8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5605d965dc98 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5605d965dd98 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5605d965de68 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5605d965df38 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5605d965e078 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5605d965dfe8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5605d965e1c0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5605d965e130 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5605d965e308 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5605d965e278 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5605d965e3c0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5605d965e4c0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5605d965e430 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5605d965e578 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5605d965e638 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5605d965e738 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5605d965e8b8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5605d965e7f8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5605d965f078 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5605d965e970 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5605d965efd8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5605d965eed8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5605d965f158 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5605d965f2a8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5605d965f218 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5605d965f360 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5605d965f5a8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5605d965f420 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5605d965f498 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5605d965f738 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5605d965f678 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5605d965f948 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5605d965f800 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5605d965f878 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5605d965fa08 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5605d965fc68 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5605d965fb70 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5605d965fd38 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5605d965fd38

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605d96e2128 prev 0x5605d9590588 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5605d96e2220 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5605d96e22b0 <col:22, col:28> col:22 public
|-EnumDecl 0x5605d96e22d8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5605d96e23f8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5605d96e23d8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5605d96e23c0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5605d96e23a0 <col:14> 'int' 999
| |-EnumConstantDecl 0x5605d96e24a0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5605d96e2480 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5605d96e2468 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5605d96e2448 <col:14> 'int' 1
| |-EnumConstantDecl 0x5605d96e2530 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5605d96e2510 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5605d96e24f0 <col:17> 'int' 0
| |-EnumConstantDecl 0x5605d96e25c0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5605d96e25a0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5605d96e2580 <col:13> 'int' 1
| |-EnumConstantDecl 0x5605d96e2650 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5605d96e2630 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5605d96e2610 <col:16> 'int' 2
| |-EnumConstantDecl 0x5605d96e26e0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5605d96e26c0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5605d96e26a0 <col:13> 'int' 3
| |-EnumConstantDecl 0x5605d96e2770 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5605d96e2750 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5605d96e2730 <col:15> 'int' 4
| |-EnumConstantDecl 0x5605d96e2800 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5605d96e27e0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5605d96e27c0 <col:14> 'int' 5
| |-EnumConstantDecl 0x5605d96e2890 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5605d96e2870 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5605d96e2850 <col:12> 'int' 6
| `-EnumConstantDecl 0x5605d96e2920 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5605d96e2900 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5605d96e28e0 <col:13> 'int' 7
|-VarDecl 0x5605d96e2990 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5605d96e2a18 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5605d96e2aa0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5605d96e2b28 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5605d96e2bb0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5605d96e2c38 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5605d96e2cc0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5605d96e2d48 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5605d96e2dd0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5605d96e2e58 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5605d96e2ee0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5605d96e2fe0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5605d96e8358 '_nerrors' 'int'
| | `-IntegerLiteral 0x5605d96e8ae8 <line:128:13> 'int' 0
| `-CompoundStmt 0x5605d96e8b58 <col:16, line:129:5>
|-CXXDestructorDecl 0x5605d96e30d0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5605d96e8b68 <col:29, line:132:5>
|-CXXMethodDecl 0x5605d96e3288 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5605d96e31c0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5605d96e3350 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5605d96e3438 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5605d96e8bc0 <col:44, line:161:5>
|   `-ReturnStmt 0x5605d96e8bb0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5605d96e8b98 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5605d96e8b78 <col:9> 'ErrorHandler *' lvalue Var 0x5605d96e83b8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5605d96e3578 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5605d96e34e8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5605d96e3640 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5605d96e8c20 <col:43, line:173:5>
|   `-ReturnStmt 0x5605d96e8c10 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5605d96e8bf8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5605d96e8bd8 <col:9> 'ErrorHandler *' lvalue Var 0x5605d96e8430 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5605d96e36f8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5605d96e3778 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5605d96e3888 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5605d96e37f8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5605d96e39d8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5605d96e3948 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5605d96e3b30 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5605d96e3a98 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5605d96e3c88 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x5605d96e3bf0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5605d96e3de0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5605d96e3d48 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5605d96e3ff0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5605d96e3e98 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5605d96e3f18 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5605d96e41c8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5605d96e40b0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5605d96e4130 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5605d96e43e8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5605d96e4288 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5605d96e4308 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5605d96e45c8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5605d96e44a8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5605d96e4528 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5605d96e47a8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5605d96e4688 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5605d96e4708 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5605d96e4930 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5605d96e4868 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5605d96e4b00 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5605d96e49e8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5605d96e4a60 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5605d96e8e78 <col:57, line:234:5>
|   `-ReturnStmt 0x5605d96e8e68 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5605d96e8e50 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5605d96e8df8 <col:9, col:41> 'int'
|         |-MemberExpr 0x5605d96e8dc8 <col:9> '<bound member function type>' ->xmessage 0x5605d96e4930
|         | `-CXXThisExpr 0x5605d96e8db8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5605d96e8e38 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5605d96e8e20 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5605d96e8d98 <col:18, col:40> 'String' (CXXTemporary 0x5605d96e8d98)
|               `-CallExpr 0x5605d96e8d60 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5605d96e8d48 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5605d96e8cc0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5605d96e6b88 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5605d96e8ce0 <col:31> 'const String' lvalue ParmVar 0x5605d96e4a60 'str' 'const String &'
|                 `-DeclRefExpr 0x5605d96e8d00 <col:36> 'const String' lvalue ParmVar 0x5605d96e49e8 'anno' 'const String &'
|-CXXMethodDecl 0x5605d96e4de0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5605d96e4bc0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5605d96e4c40 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5605d96e4cb8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5605d96e9108 <col:68, line:243:5>
|   `-ReturnStmt 0x5605d96e90f8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5605d96e90e0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5605d96e9080 <col:9, col:41> 'int'
|         |-MemberExpr 0x5605d96e9050 <col:9> '<bound member function type>' ->xmessage 0x5605d96e4b00
|         | `-CXXThisExpr 0x5605d96e9040 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5605d96e8f18 <col:18> 'const String' lvalue ParmVar 0x5605d96e4bc0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5605d96e90c8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5605d96e90b0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5605d96e9020 <col:24, col:40> 'String' (CXXTemporary 0x5605d96e9020)
|               `-CXXMemberCallExpr 0x5605d96e8fb8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5605d96e8f48 <col:24> '<bound member function type>' ->vformat 0x5605d96e5fc0
|                 | `-CXXThisExpr 0x5605d96e8f38 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5605d96e8fe8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5605d96e8f78 <col:32> 'const char *' lvalue ParmVar 0x5605d96e4c40 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5605d96e9000 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5605d96e8f98 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5605d96e4cb8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5605d96e5080 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5605d96e4ea8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5605d96e4f20 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5605d96e4f98 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5605d96e9448 <col:23, line:254:5>
|   `-ReturnStmt 0x5605d96e9438 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5605d96e9420 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5605d96e93c0 <col:9, col:71> 'int'
|         |-MemberExpr 0x5605d96e9390 <col:9> '<bound member function type>' ->xmessage 0x5605d96e4b00
|         | `-CXXThisExpr 0x5605d96e9380 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5605d96e9408 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5605d96e93f0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5605d96e9340 <col:18, col:65> 'String' (CXXTemporary 0x5605d96e9340)
|         |     `-CallExpr 0x5605d96e92d8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5605d96e92c0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5605d96e91a8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5605d96e6b88 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5605d96e91c8 <col:31> 'const String' lvalue ParmVar 0x5605d96e4f20 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5605d96e9320 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5605d96e9308 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5605d96e92a0 <col:37, col:64> 'String' (CXXTemporary 0x5605d96e92a0)
|         |             `-CallExpr 0x5605d96e9270 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5605d96e9258 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5605d96e91e8 <col:37> 'String (const String &)' lvalue CXXMethod 0x5605d96e71d8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5605d96e9208 <col:56> 'const String' lvalue ParmVar 0x5605d96e4ea8 'landmark' 'const String &'
|         `-DeclRefExpr 0x5605d96e9360 <col:68> 'const String' lvalue ParmVar 0x5605d96e4f98 'str' 'const String &'
|-CXXMethodDecl 0x5605d96e5400 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5605d96e5148 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5605d96e51c0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5605d96e5240 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5605d96e52b8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5605d96e9700 <col:34, line:267:5>
|   `-ReturnStmt 0x5605d96e96f0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5605d96e96d8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5605d96e9670 <col:9, col:51> 'int'
|         |-MemberExpr 0x5605d96e9640 <col:9> '<bound member function type>' ->xmessage 0x5605d96e5080
|         | `-CXXThisExpr 0x5605d96e9630 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5605d96e94e8 <col:18> 'const String' lvalue ParmVar 0x5605d96e5148 'landmark' 'const String &'
|         |-DeclRefExpr 0x5605d96e9508 <col:28> 'const String' lvalue ParmVar 0x5605d96e51c0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5605d96e96c0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5605d96e96a8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5605d96e9610 <col:34, col:50> 'String' (CXXTemporary 0x5605d96e9610)
|               `-CXXMemberCallExpr 0x5605d96e95a8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5605d96e9538 <col:34> '<bound member function type>' ->vformat 0x5605d96e5fc0
|                 | `-CXXThisExpr 0x5605d96e9528 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5605d96e95d8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5605d96e9568 <col:42> 'const char *' lvalue ParmVar 0x5605d96e5240 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5605d96e95f0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5605d96e9588 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5605d96e52b8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5605d96e5510 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5605d96e9780 <col:25, line:288:5>
|   `-ReturnStmt 0x5605d96e9770 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5605d96e9758 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5605d96e9728 <col:9> 'const int' lvalue ->_nerrors 0x5605d96e8358
|         `-CXXThisExpr 0x5605d96e9718 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5605d96e5720 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5605d96e55c8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5605d96e5648 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5605d96e5a08 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5605d96e57e8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5605d96e5868 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5605d96e58e0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5605d96e5ba0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5605d96e5ad8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5605d96e5de8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5605d96e5c60 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5605d96e5cd8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5605d96e99e0 <col:58, line:357:5>
|   `-ReturnStmt 0x5605d96e99d0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5605d96e99b8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5605d96e9988 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5605d96e9970 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5605d96e9950 <col:9, col:29> 'String' (CXXTemporary 0x5605d96e9950)
|             `-CallExpr 0x5605d96e98e0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5605d96e98c8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5605d96e9848 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5605d96e5a08 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5605d96e97e8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5605d96e9918 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5605d96e9808 <col:21> 'const char *' lvalue ParmVar 0x5605d96e5c60 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5605d96e9930 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5605d96e9828 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5605d96e5cd8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5605d96e5fc0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5605d96e5eb0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5605d96e5f28 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5605d96e6118 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5605d96e6088 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5605d96e6260 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5605d96e61d0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5605d96e6500 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5605d96e6318 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5605d96e6398 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5605d96e6410 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5605d96e66f0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5605d96e65d0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5605d96e9af8 <col:37, line:441:5>
|   `-IfStmt 0x5605d96e9ae0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5605d96e9a68 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5605d96e9a38 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5605d96e99f8 <col:6> 'int' lvalue ParmVar 0x5605d96e65d0 'level' 'int'
|     | `-ImplicitCastExpr 0x5605d96e9a50 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5605d96e9a18 <col:15> 'ErrorHandler::Level' EnumConstant 0x5605d96e26e0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5605d96e9ac8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5605d96e9a98 <col:8> 'int' lvalue ->_nerrors 0x5605d96e8358
|         `-CXXThisExpr 0x5605d96e9a88 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5605d96e67b8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5605d96e9b90 <col:26, line:448:5>
|   `-BinaryOperator 0x5605d96e9b70 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5605d96e9b20 <col:2> 'int' lvalue ->_nerrors 0x5605d96e8358
|     | `-CXXThisExpr 0x5605d96e9b10 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5605d96e9b50 <col:13> 'int' 0
|-CXXMethodDecl 0x5605d96e6980 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5605d96e6870 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5605d96e68e8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5605d96e6b88 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5605d96e6a40 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5605d96e6ab8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5605d96e6e38 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5605d96e6c48 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5605d96e6cc8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5605d96e6d48 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5605d96e6ef0 <col:59> 0 0
|-CXXMethodDecl 0x5605d96e7088 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5605d96e6f68 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5605d96e6fe8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5605d96ea200 <col:70, line:534:5>
|   |-DeclStmt 0x5605d96e9d00 <line:528:2, col:20>
|   | |-VarDecl 0x5605d96e9bb8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5605d96e9c20 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5605d96e9c58 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5605d96e9cc0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5605d96e9dd0 <line:529:2, col:23>
|   | `-VarDecl 0x5605d96e9d30 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5605d96e9db8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5605d96e9d98 <col:18> 'const char *' lvalue ParmVar 0x5605d96e6f68 'begin' 'const char *'
|   |-DoStmt 0x5605d96ea198 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5605d96ea0c8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5605d96ea0b0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5605d96ea090 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5605d96e9de8 <col:6> 'const char *' lvalue Var 0x5605d96e9d30 'x' 'const char *'
|   | |     `-CallExpr 0x5605d96e9fe0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5605d96e9fc8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5605d96e9f80 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5605d96e8830 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5605d96ea048 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5605d96ea030 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5605d96e9ea0 <col:20, col:27> 'String' (CXXTemporary 0x5605d96e9ea0)
|   | |       |     `-CXXTemporaryObjectExpr 0x5605d96e9e68 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5605d96ea060 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5605d96e9ec0 <col:30> 'const char *' lvalue Var 0x5605d96e9d30 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5605d96ea078 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5605d96e9ee0 <col:33> 'const char *' lvalue ParmVar 0x5605d96e6fe8 'end' 'const char *'
|   | |       |-UnaryOperator 0x5605d96e9f20 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5605d96e9f00 <col:39> 'String' lvalue Var 0x5605d96e9bb8 'name' 'String'
|   | |       |-UnaryOperator 0x5605d96e9f58 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5605d96e9f38 <col:46> 'String' lvalue Var 0x5605d96e9c58 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5605d96e9f70 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5605d96ea180 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5605d96ea168 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5605d96ea148 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5605d96ea118 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5605d93dc6a8
|   |         `-ImplicitCastExpr 0x5605d96ea100 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5605d96ea0e0 <col:11> 'String' lvalue Var 0x5605d96e9bb8 'name' 'String'
|   `-ReturnStmt 0x5605d96ea1f0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5605d96ea1d8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5605d96ea1b8 <col:9> 'const char *' lvalue Var 0x5605d96e9d30 'x' 'const char *'
|-CXXMethodDecl 0x5605d96e71d8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5605d96e7148 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5605d96ea808 <col:55, line:550:5>
|   `-IfStmt 0x5605d96ea7e0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5605d96ea440 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5605d96ea428 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5605d96ea410 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5605d96ea3f0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5605d96ea3c0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5605d93dc6a8
|     | |       `-DeclRefExpr 0x5605d96ea260 <col:6> 'const String' lvalue ParmVar 0x5605d96e7148 'x' 'const String &'
|     | `-BinaryOperator 0x5605d96ea3a0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5605d96ea370 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5605d96ea320 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5605d96ea308 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5605d96ea2c0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5605d93f5ee0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5605d96ea280 <col:11> 'const String' lvalue ParmVar 0x5605d96e7148 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5605d96ea2a0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5605d96ea388 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5605d96ea358 <col:19> 'char' 123
|     |-ReturnStmt 0x5605d96ea4b0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5605d96ea480 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5605d96ea460 <col:13> 'const String' lvalue ParmVar 0x5605d96e7148 'x' 'const String &'
|     `-IfStmt 0x5605d96ea7b8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5605d96ea548 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5605d96ea530 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5605d96ea510 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5605d96ea4e0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5605d93dc6a8
|       |       `-DeclRefExpr 0x5605d96ea4c0 <col:11> 'const String' lvalue ParmVar 0x5605d96e7148 'x' 'const String &'
|       |-ReturnStmt 0x5605d96ea6d0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5605d96ea6b8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5605d96ea688 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5605d96ea670 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5605d96ea650 <col:13, col:29> 'String' (CXXTemporary 0x5605d96ea650)
|       |         `-CallExpr 0x5605d96ea600 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5605d96ea5e8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5605d96ea560 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5605d96e6980 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5605d96ea630 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5605d96ea580 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5605d96ea5a0 <col:28> 'const String' lvalue ParmVar 0x5605d96e7148 'x' 'const String &'
|       `-ReturnStmt 0x5605d96ea7a8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5605d96ea790 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5605d96ea760 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5605d96ea748 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5605d96ea728 <col:13, col:20> 'String' (CXXTemporary 0x5605d96ea728)
|                 `-CXXTemporaryObjectExpr 0x5605d96ea6f0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5605d96e73a0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5605d96e7290 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5605d96e7308 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5605d96e8ad8 <col:71> 'bool' false
|-CXXRecordDecl 0x5605d96e7450 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5605d96e7748 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5605d96e76e0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5605d96e7680 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5605d96e7640 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5605d93d8f40 'String'
|       | `-CXXRecord 0x5605d93d8eb0 'String'
|       |-BuiltinType 0x5605d90ad580 'int'
|       `-DecayedType 0x5605d95915d0 '__va_list_tag *' sugar
|         |-TypedefType 0x5605d95915a0 'va_list' sugar
|         | |-Typedef 0x5605d92cb000 'va_list'
|         | `-TypedefType 0x5605d92cafb0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5605d9202bd8 '__gnuc_va_list'
|         |   `-TypedefType 0x5605d9202b40 '__builtin_va_list' sugar
|         |     |-Typedef 0x5605d90eed38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5605d90eece0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5605d90ae2d0 '__va_list_tag'
|         |         `-CXXRecord 0x5605d90ae238 '__va_list_tag'
|         `-PointerType 0x5605d92d08a0 '__va_list_tag *'
|           `-RecordType 0x5605d90ae2d0 '__va_list_tag'
|             `-CXXRecord 0x5605d90ae238 '__va_list_tag'
|-EnumDecl 0x5605d96e77a0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5605d96e78a0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5605d96e7e00 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d96e7880 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5605d96e7860 <col:16> 'int' 1
| |-EnumConstantDecl 0x5605d96e7930 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5605d96e7e18 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d96e7910 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5605d96e78f0 <col:21> 'int' 2
| |-EnumConstantDecl 0x5605d96e79c0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5605d96e7e30 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d96e79a0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5605d96e7980 <col:22> 'int' 4
| |-EnumConstantDecl 0x5605d96e7a50 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5605d96e7e48 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d96e7a30 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5605d96e7a10 <col:17> 'int' 8
| |-EnumConstantDecl 0x5605d96e7ae0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5605d96e7e60 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d96e7ac0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5605d96e7aa0 <col:22> 'int' 16
| |-EnumConstantDecl 0x5605d96e7b70 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5605d96e7e78 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d96e7b50 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5605d96e7b30 <col:19> 'int' 32
| |-EnumConstantDecl 0x5605d96e7c00 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5605d96e7e90 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d96e7be0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5605d96e7bc0 <col:17> 'int' 64
| |-EnumConstantDecl 0x5605d96e7c90 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5605d96e7ea8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d96e7c70 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5605d96e7c50 <col:14> 'int' 128
| |-EnumConstantDecl 0x5605d96e7d20 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5605d96e7ec0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d96e7d00 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5605d96e7ce0 <col:16> 'int' 256
| `-EnumConstantDecl 0x5605d96e7db0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5605d96e7ed8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5605d96e7d90 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5605d96e7d70 <col:12> 'int' 1024
|-CXXMethodDecl 0x5605d96e80e8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5605d96e7f00 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5605d96e7fa0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5605d96e8270 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5605d96e81a8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5605d96e8318 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5605d96e8358 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5605d96e83b8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5605d96e8430 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5605d96e8830 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5605d96e84a8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5605d96e8528 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5605d96e85a8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5605d96e8620 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5605d96e8698 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5605d96e8710 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5605d96e8958 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5605d96e8958
| `-ParmVarDecl 0x5605d96e8a68 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5605d96eab68 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5605d96eab68
  `-ParmVarDecl 0x5605d96eac78 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605d9590618 prev 0x5605d95d4198 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5605d9590710 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5605d95907a0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5605d95908d8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5605d95907d8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5605d9591d00 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5605d9591ce0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5605d9591878 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5605d9591d90 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5605d9591d50 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5605d95907d8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5605d95918e0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5605d9591e10 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5605d9591dd0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5605d9591940 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5605d9591e50 <col:54> 'bool' false
| `-CompoundStmt 0x5605d9591f58 <col:61, line:38:5>
|   `-BinaryOperator 0x5605d9591f38 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x5605d9591ed0 <col:9> 'const Element *' lvalue ->_context 0x5605d9591818
|     | `-CXXThisExpr 0x5605d9591ec0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5605d9591f20 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x5605d9591f00 <col:20> 'int' 0
|-CXXConstructorDecl 0x5605d9590ae8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5605d9590998 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5605d9590a10 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5605d9591d38 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5605d9591d18 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x5605d9591818 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5605d9591fb0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5605d9591f70 <col:20> 'const Element *' lvalue ParmVar 0x5605d9590998 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5605d9591878 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5605d9592030 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5605d9591ff0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5605d9590a10 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5605d95918e0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5605d95920b0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5605d9592070 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5605d9591940 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5605d95920f0 <col:73> 'bool' false
| `-CompoundStmt 0x5605d9592168 <col:80, line:46:5>
|-CXXMethodDecl 0x5605d9590c18 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5605d95921e0 <col:36, line:51:5>
|   `-ReturnStmt 0x5605d95921d0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5605d95921b8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5605d9592188 <col:16> 'const Element *const' lvalue ->_context 0x5605d9591818
|         `-CXXThisExpr 0x5605d9592178 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5605d9590d08 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5605d9592260 <col:32, line:57:5>
|   `-ReturnStmt 0x5605d9592250 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5605d9592238 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5605d9592208 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5605d9591878
|         `-CXXThisExpr 0x5605d95921f8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5605d9590dc8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5605d9590f50 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x5605d9590e80 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5605d95910a0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5605d9591010 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5605d95911f0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5605d9591160 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5605d95913f8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5605d95912a8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5605d9591320 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5605d9591728 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5605d95914b8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5605d9591538 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x5605d9591600 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5605d95917e0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x5605d9591818 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5605d9591878 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5605d95918e0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5605d9591940 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5605d9591990 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5605d9591990
| `-ParmVarDecl 0x5605d9591aa8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x5605d9591b48 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x5605d9591b48
| `-ParmVarDecl 0x5605d9591c58 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5605d96f3478 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5605d969c980 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5605d969cb58 prev 0x5605d969c980 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5605d969cbe8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5605d969cc10 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5605d90ad580 'int'
|-TypedefDecl 0x5605d969e7e0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5605d969e790 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5605d969d0c0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5605d969cfc0 'type'
|     `-TemplateSpecializationType 0x5605d969cf50 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5605d969ce30 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5605d969ce10 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5605d969cdf0 <col:24> 'unsigned long' 4
|       `-RecordType 0x5605d969cf30 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5605d969ce50 'char_array'
|-TypedefDecl 0x5605d969e898 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5605d969e860 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5605d969e840 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5605d969e7e0 'type'
|     `-ElaboratedType 0x5605d969e790 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5605d969d0c0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5605d969cfc0 'type'
|         `-TemplateSpecializationType 0x5605d969cf50 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5605d969ce30 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5605d969ce10 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5605d969cdf0 <col:24> 'unsigned long' 4
|           `-RecordType 0x5605d969cf30 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5605d969ce50 'char_array'
|-CXXMethodDecl 0x5605d969ea18 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5605d969e928 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5605d969eb08 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5605d969ebe8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5605d96a8248 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5605d96a8150 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5605d96a8488 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5605d96a8300 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5605d96a8378 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5605d96a8658 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5605d96a8548 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5605d96a85c0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5605d96a87b8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5605d96a8888 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5605d96a8ad8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5605d96a8948 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5605d96a89c0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5605d96a8d38 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5605d96a8ba8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5605d96a8c20 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5605d96a8ef8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5605d96a8e08 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5605d96a90b8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5605d96a8fc0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5605d96a9170 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5605d96a9220 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5605d96a9458 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5605d96a92d0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5605d96a9348 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5605d96a96f8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5605d96a9600 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5605d96a97c0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5605d96a9810 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5605d96a9860 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5605d969b388 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5605d969b598 prev 0x5605d969b388 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5605d969c8f0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5605d969c8a0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5605d969c880 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5605d969c730 'type'
|     `-SubstTemplateTypeParmType 0x5605d969c550 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x5605d9372d90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5605d9372d38 'T'
|       `-RecordType 0x5605d969c0a0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5605d969bfb8 'sized_array_memory'
|-FieldDecl 0x5605d96a98b0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5605d96a9900 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5605d96a9938 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5605d969b630 'int' sugar
|   |-TemplateTypeParmType 0x5605d93aaa80 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5605d93aaa28 'T'
|   `-BuiltinType 0x5605d90ad580 'int'
|-TypedefDecl 0x5605d96a99c8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5605d96a9990 'int &'
|   `-SubstTemplateTypeParmType 0x5605d969b630 'int' sugar
|     |-TemplateTypeParmType 0x5605d93aaa80 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5605d93aaa28 'T'
|     `-BuiltinType 0x5605d90ad580 'int'
|-TypedefDecl 0x5605d96a9a88 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5605d96a9a50 'const int &'
|   `-QualType 0x5605d969b631 'const int' const
|     `-SubstTemplateTypeParmType 0x5605d969b630 'int' sugar
|       |-TemplateTypeParmType 0x5605d93aaa80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5605d93aaa28 'T'
|       `-BuiltinType 0x5605d90ad580 'int'
|-TypedefDecl 0x5605d96a9b18 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5605d96a9ae0 'int *'
|   `-SubstTemplateTypeParmType 0x5605d969b630 'int' sugar
|     |-TemplateTypeParmType 0x5605d93aaa80 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5605d93aaa28 'T'
|     `-BuiltinType 0x5605d90ad580 'int'
|-TypedefDecl 0x5605d96a9ba8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5605d96a9b70 'const int *'
|   `-QualType 0x5605d969b631 'const int' const
|     `-SubstTemplateTypeParmType 0x5605d969b630 'int' sugar
|       |-TemplateTypeParmType 0x5605d93aaa80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5605d93aaa28 'T'
|       `-BuiltinType 0x5605d90ad580 'int'
|-TypedefDecl 0x5605d96aa790 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5605d96aa740 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5605d96aa720 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5605d96aa6b0 'type'
|     `-SubstTemplateTypeParmType 0x5605d96aa470 'int' sugar
|       |-TemplateTypeParmType 0x5605d937db90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5605d937db40 'T'
|       `-BuiltinType 0x5605d90ad580 'int'
|-TypedefDecl 0x5605d96aa7f8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5605d96a9a50 'const int &'
|   `-QualType 0x5605d969b631 'const int' const
|     `-SubstTemplateTypeParmType 0x5605d969b630 'int' sugar
|       |-TemplateTypeParmType 0x5605d93aaa80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5605d93aaa28 'T'
|       `-BuiltinType 0x5605d90ad580 'int'
|-TypedefDecl 0x5605d96aa850 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5605d90ad580 'int'
|-TypedefDecl 0x5605d96aa8b8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5605d96a9ae0 'int *'
|   `-SubstTemplateTypeParmType 0x5605d969b630 'int' sugar
|     |-TemplateTypeParmType 0x5605d93aaa80 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5605d93aaa28 'T'
|     `-BuiltinType 0x5605d90ad580 'int'
|-TypedefDecl 0x5605d96aa920 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5605d96a9b70 'const int *'
|   `-QualType 0x5605d969b631 'const int' const
|     `-SubstTemplateTypeParmType 0x5605d969b630 'int' sugar
|       |-TemplateTypeParmType 0x5605d93aaa80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5605d93aaa28 'T'
|       `-BuiltinType 0x5605d90ad580 'int'
|-EnumDecl 0x5605d96aa978 <line:134:5> col:5
| `-EnumConstantDecl 0x5605d96aaa70 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5605d96aaa50 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5605d93ac108 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5605d93ac0e0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5605d93ac0c0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5605d96aaaf8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5605d96aad48 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5605d96aabb0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5605d96aac50 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5605d96ab008 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5605d96aaef0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5605d96ab2c8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5605d96ab1b0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5605d96ab610 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5605d96ab4f0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5605d96ab920 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5605d96ab800 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5605d96abc10 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5605d96aba58 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5605d96abad0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5605d96abd38 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5605d96abe18 <col:20> Inherited
| `-OptimizeNoneAttr 0x5605d96abe70 <col:30> Inherited
|-CXXMethodDecl 0x5605d96abeb8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5605d96abf68 <col:20> Inherited
| `-OptimizeNoneAttr 0x5605d96abfc0 <col:30> Inherited
|-CXXMethodDecl 0x5605d96ac088 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5605d96ac138 <col:20> Inherited
| `-OptimizeNoneAttr 0x5605d96ac190 <col:30> Inherited
|-CXXMethodDecl 0x5605d96ac1d8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5605d96ac288 <col:20> Inherited
| `-OptimizeNoneAttr 0x5605d96ac2e0 <col:30> Inherited
|-CXXMethodDecl 0x5605d96ac328 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5605d96ac3d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5605d96ac430 <col:30> Inherited
|-CXXMethodDecl 0x5605d96ac478 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5605d96ac528 <col:20> Inherited
| `-OptimizeNoneAttr 0x5605d96ac580 <col:30> Inherited
|-CXXMethodDecl 0x5605d96ac5a8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5605d96ac658 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5605d96ac708 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5605d96ac8c8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5605d96ac7b8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5605d96ac830 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5605d96aca18 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5605d96ac988 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5605d96acbc8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5605d96acad0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5605d96acc80 <col:20>
| `-OptimizeNoneAttr 0x5605d96accd8 <col:30>
|-CXXMethodDecl 0x5605d96acdf8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5605d96acd00 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5605d96aceb0 <col:20>
| `-OptimizeNoneAttr 0x5605d96acf08 <col:30>
|-CXXMethodDecl 0x5605d96acfc0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5605d96acf30 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5605d96ad108 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5605d96ad078 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5605d96ad238 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5605d96ad368 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5605d96ad438 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5605d96ad508 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x5605d96ad648 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5605d96ad5b8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5605d96ad790 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5605d96ad700 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5605d96ad8d8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5605d96ad848 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5605d96ad990 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5605d96ada90 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5605d96ada00 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5605d96adb48 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5605d96adc08 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5605d96add08 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5605d96ade88 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5605d96addc8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5605d96ae648 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5605d96adf40 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5605d96ae5a8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5605d96ae4a8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5605d96ae728 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5605d96ae878 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5605d96ae7e8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5605d96ae930 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5605d96aeb78 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5605d96ae9f0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5605d96aea68 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5605d96aed38 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5605d96aec48 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5605d96aef88 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5605d96aee00 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5605d96aee78 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5605d96af048 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5605d96af2a8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5605d96af1b0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5605d96af378 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605d96994f8 prev 0x5605d967cae8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5605d96995f0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x5605d96996e0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5605d96c0f20 <col:16, line:828:9>
|-CXXDestructorDecl 0x5605d96997d0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5605d96c0f30 <col:25, line:830:9>
|-CXXMethodDecl 0x5605d96998d0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5605d9699980 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5605d9699a28 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5605d9699a28
| `-ParmVarDecl 0x5605d9699b38 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5605d969a2f8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5605d969a2f8
  `-ParmVarDecl 0x5605d969a408 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605d967c8f8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x5605d967ca58 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x5605d967cae8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x5605d967cba0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x5605d967cca8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x5605d967cbd8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5605d96b2228 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5605d96b2208 <col:31> 'int' 0
|-CXXConstructorDecl 0x5605d967cfc8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x5605d967ce40 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x5605d967ceb8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5605d96b2260 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5605d96b2240 <col:59> 'int' 0
|-CXXConstructorDecl 0x5605d967d1a0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5605d967d090 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x5605d967d108 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5605d96b2298 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5605d96b2278 <col:55> 'int' 0
|-CXXConstructorDecl 0x5605d967d558 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5605d967d340 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x5605d967d3b8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x5605d967d430 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5605d96b22d0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5605d96b22b0 <col:31> 'int' 0
|-CXXConstructorDecl 0x5605d967d718 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x5605d967d658 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x5605d967d810 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x5605d967d9f8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x5605d967d900 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x5605d967dae8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5605d96b2680 <col:24, line:291:5>
|   `-ReturnStmt 0x5605d96b2670 <line:290:9, col:79>
|     `-BinaryOperator 0x5605d96b2650 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5605d96b2528 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5605d96b2480 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5605d96b2460 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5605d96b2358 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5605d96b2340 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5605d96b2328 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5605d96b22f8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5605d969b320
|       | |   |       `-CXXThisExpr 0x5605d96b22e8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5605d96b2448 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5605d96b2430 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5605d96b23f8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5605d96b23c8 <col:28, col:35> '<bound member function type>' ->size 0x5605d965d008
|       | |           `-ImplicitCastExpr 0x5605d96b2418 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5605d96b23b0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5605d96b2380 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5605d969b320
|       | |                 `-CXXThisExpr 0x5605d96b2370 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5605d96b2510 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5605d96b24f8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5605d96b24e0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5605d96b24b0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5605d96af4c0
|       |         `-CXXThisExpr 0x5605d96b24a0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5605d96b2630 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5605d96b2618 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5605d96b2600 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5605d96b25c0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5605d96b25a8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5605d96b2558 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5605d96af570
|         |     |   `-CXXThisExpr 0x5605d96b2548 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5605d96b2588 <col:73> 'int' 0
|         `-IntegerLiteral 0x5605d96b25e0 <col:79> 'int' 0
|-CXXMethodDecl 0x5605d967dba8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5605d96b2858 <col:32, line:296:5>
|   `-ReturnStmt 0x5605d96b2848 <line:295:9, col:49>
|     `-BinaryOperator 0x5605d96b2828 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5605d96b2708 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5605d96b26f0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5605d96b26d8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5605d96b26a8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5605d96af4c0
|       |       `-CXXThisExpr 0x5605d96b2698 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5605d96b2808 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5605d96b27f0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5605d96b27d8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5605d96b2798 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5605d96b2780 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5605d96b2730 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5605d96af570
|         |     |   `-CXXThisExpr 0x5605d96b2720 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5605d96b2760 <col:43> 'int' 0
|         `-IntegerLiteral 0x5605d96b27b8 <col:49> 'int' 0
|-CXXMethodDecl 0x5605d967dc98 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5605d96b2a68 <col:19, line:306:5>
|   |-IfStmt 0x5605d96b2988 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5605d96b28c8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5605d96b28b0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5605d96b2880 <col:13> 'Vector<String> *' lvalue ->_conf 0x5605d969b320
|   | |     `-CXXThisExpr 0x5605d96b2870 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5605d96b2968 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5605d96b2938 <col:13, col:20> '<bound member function type>' ->clear 0x5605d965fa08
|   |     `-ImplicitCastExpr 0x5605d96b2920 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5605d96b28f0 <col:13> 'Vector<String> *' lvalue ->_conf 0x5605d969b320
|   |         `-CXXThisExpr 0x5605d96b28e0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5605d96b2a10 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5605d96b29e0 <col:9, col:16> '<bound member function type>' .clear 0x5605d96af048
|   |   `-MemberExpr 0x5605d96b29b0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5605d96af460
|   |     `-CXXThisExpr 0x5605d96b29a0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5605d96b2a58 <line:305:9, col:17>
|     `-UnaryOperator 0x5605d96b2a40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5605d96b2a30 <col:17> 'Args *' this
|-CXXMethodDecl 0x5605d967df18 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x5605d967de20 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x5605d967e098 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x5605d967dfd0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x5605d967e418 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x5605d967e140 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x5605d967e378 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x5605d967e1e8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x5605d967e260 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5605d96b2d88 <col:67, line:327:5>
|     |-WhileStmt 0x5605d96b2d38 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5605d96b2b50 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5605d96b2ad0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5605d95cc668 0x5605d9415c48 0x5605d9415920 0x5605d94060f0 0x5605d9405da0 0x5605d9405690 0x5605d93d8000 0x5605d93654d0
|     | | |-DeclRefExpr 0x5605d96b2a90 <col:16> 'Iter' lvalue ParmVar 0x5605d967e1e8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5605d96b2ab0 <col:25> 'Iter' lvalue ParmVar 0x5605d967e260 'end' 'Iter'
|     | `-CompoundStmt 0x5605d96b2d18 <col:30, line:325:9>
|     |   |-CallExpr 0x5605d96b2cb8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5605d96b2b98 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5605d96b2c88 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5605d96b2c18 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5605d95d17e8 0x5605d95d1408 0x5605d95d1038 0x5605d95d0c58 0x5605d95d0878 0x5605d95d04a8
|     |   |   `-DeclRefExpr 0x5605d96b2bf8 <col:24> 'Iter' lvalue ParmVar 0x5605d967e1e8 'begin' 'Iter'
|     |   `-UnaryOperator 0x5605d96b2d00 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5605d96b2ce0 <col:15> 'Iter' lvalue ParmVar 0x5605d967e1e8 'begin' 'Iter'
|     `-ReturnStmt 0x5605d96b2d78 <line:326:9, col:17>
|       `-UnaryOperator 0x5605d96b2d60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5605d96b2d50 <col:17> 'Args *' this
|-CXXMethodDecl 0x5605d967e520 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x5605d967e490 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x5605d967e668 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x5605d967e5d8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x5605d967e730 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5605d96b2e68 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5605d96b2e08 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5605d96b2db8 <col:9> '<bound member function type>' ->reset_from 0x5605d96af8e8
|   | | `-CXXThisExpr 0x5605d96b2da8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5605d96b2de8 <col:20> 'int' 0
|   `-ReturnStmt 0x5605d96b2e58 <line:352:9, col:17>
|     `-UnaryOperator 0x5605d96b2e40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5605d96b2e30 <col:17> 'Args *' this
|-VarDecl 0x5605d967e7e8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x5605d967e850 <col:38> 'int' 1
|-VarDecl 0x5605d967e8e0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x5605d967e948 <col:39> 'int' 2
|-VarDecl 0x5605d967e9d8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x5605d967ea40 <col:39> 'int' 4
|-VarDecl 0x5605d967ead0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x5605d967eb38 <col:39> 'int' 8
|-FunctionTemplateDecl 0x5605d967eeb8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x5605d967ebb0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5605d967ee18 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5605d967ec60 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d967ed08 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x5605d96b2fc0 <col:43, line:371:5>
|     `-ReturnStmt 0x5605d96b2fb0 <line:370:9, col:34>
|       `-CallExpr 0x5605d96b2f78 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b2e98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b2f18 <col:21> 'const char *' lvalue ParmVar 0x5605d967ec60 'keyword' 'const char *'
|         |-IntegerLiteral 0x5605d96b2f38 <col:30> 'int' 0
|         `-DeclRefExpr 0x5605d96b2f58 <col:33> 'T' lvalue ParmVar 0x5605d967ed08 'x' 'T &'
|-FunctionTemplateDecl 0x5605d967f1e8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x5605d967ef20 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5605d967f148 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5605d967efd0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d967f078 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5605d96b3110 <col:45, line:375:5>
|     `-ReturnStmt 0x5605d96b3100 <line:374:9, col:42>
|       `-CallExpr 0x5605d96b30c8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b2fe8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b3068 <col:21> 'const char *' lvalue ParmVar 0x5605d967efd0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5605d96b3088 <col:30> 'const int' lvalue Var 0x5605d967e7e8 'mandatory' 'const int'
|         `-DeclRefExpr 0x5605d96b30a8 <col:41> 'T' lvalue ParmVar 0x5605d967f078 'x' 'T &'
|-FunctionTemplateDecl 0x5605d967f518 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x5605d967f250 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5605d967f478 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5605d967f300 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5605d967f3a8 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x5605d96b3260 <col:45, line:379:5>
| |   `-ReturnStmt 0x5605d96b3250 <line:378:9, col:43>
| |     `-CallExpr 0x5605d96b3218 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5605d96b3138 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5605d96b31b8 <col:21> 'const char *' lvalue ParmVar 0x5605d967f300 'keyword' 'const char *'
| |       |-DeclRefExpr 0x5605d96b31d8 <col:30> 'const int' lvalue Var 0x5605d967e8e0 'positional' 'const int'
| |       `-DeclRefExpr 0x5605d96b31f8 <col:42> 'T' lvalue ParmVar 0x5605d967f3a8 'x' 'T &'
| `-CXXMethodDecl 0x5605d96f38e8 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5605d96f3708 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x5605d96f37d8 <col:39, col:42> col:42 x 'unsigned int &'
|-FunctionTemplateDecl 0x5605d967f848 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x5605d967f580 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5605d967f7a8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5605d967f630 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d967f6d8 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x5605d96b3460 <col:46, line:383:5>
|     `-ReturnStmt 0x5605d96b3450 <line:382:9, col:55>
|       `-CallExpr 0x5605d96b3418 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b3288 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b3308 <col:21> 'const char *' lvalue ParmVar 0x5605d967f630 'keyword' 'const char *'
|         |-BinaryOperator 0x5605d96b33d8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5605d96b3388 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5605d96b3368 <col:30> 'const int' lvalue Var 0x5605d967e7e8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5605d96b33c0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5605d96b33a0 <col:42> 'const int' lvalue Var 0x5605d967e8e0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5605d96b33f8 <col:54> 'T' lvalue ParmVar 0x5605d967f6d8 'x' 'T &'
|-FunctionTemplateDecl 0x5605d967fc48 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x5605d967f8b0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5605d967fba8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x5605d967f960 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d967f9e0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5605d967fa88 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5605d96b35a0 <col:54, line:388:5>
|     |-CallExpr 0x5605d96b3528 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5605d96b3478 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5605d96b34b8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5605d96b34c8 <col:30> 'const char *' lvalue ParmVar 0x5605d967f960 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5605d96b34e8 <col:39> 'int' lvalue ParmVar 0x5605d967f9e0 'flags' 'int'
|     | `-DeclRefExpr 0x5605d96b3508 <col:46> 'T' lvalue ParmVar 0x5605d967fa88 'x' 'T &'
|     `-ReturnStmt 0x5605d96b3590 <line:387:9, col:17>
|       `-UnaryOperator 0x5605d96b3578 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5605d96b3568 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5605d96800f8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x5605d967fcb8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5605d967fd38 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5605d9680058 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5605d967fdf8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d967fe98 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x5605d967ff38 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5605d96b3710 <col:74, line:403:5>
|     `-ReturnStmt 0x5605d96b3700 <line:402:9, col:56>
|       `-CallExpr 0x5605d96b36c0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b35d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b3640 <col:28> 'const char *' lvalue ParmVar 0x5605d967fdf8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5605d96b3660 <col:37> 'int' 0
|         |-DeclRefExpr 0x5605d96b3680 <col:40> 'T' lvalue ParmVar 0x5605d967fe98 'x' 'T &'
|         `-DeclRefExpr 0x5605d96b36a0 <col:43> 'const V' lvalue ParmVar 0x5605d967ff38 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5605d9680568 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5605d9680168 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5605d96801e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5605d96804c8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5605d96802a8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d9680348 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x5605d96803e8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5605d96b3878 <col:76, line:407:5>
|     `-ReturnStmt 0x5605d96b3868 <line:406:9, col:65>
|       `-CallExpr 0x5605d96b3828 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b3738 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b37a8 <col:28> 'const char *' lvalue ParmVar 0x5605d96802a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5605d96b37c8 <col:37> 'const int' lvalue Var 0x5605d967e8e0 'positional' 'const int'
|         |-DeclRefExpr 0x5605d96b37e8 <col:49> 'T' lvalue ParmVar 0x5605d9680348 'x' 'T &'
|         `-DeclRefExpr 0x5605d96b3808 <col:52> 'const V' lvalue ParmVar 0x5605d96803e8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5605d9680ab8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x5605d96805d8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5605d9680658 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5605d9680a18 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5605d9680718 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d9680798 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5605d9680838 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x5605d96808d8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5605d96b39e0 <col:85, line:412:5>
|     |-CallExpr 0x5605d96b3960 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5605d96b3890 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5605d96b38d0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5605d96b38e0 <col:37> 'const char *' lvalue ParmVar 0x5605d9680718 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5605d96b3900 <col:46> 'int' lvalue ParmVar 0x5605d9680798 'flags' 'int'
|     | |-DeclRefExpr 0x5605d96b3920 <col:53> 'T' lvalue ParmVar 0x5605d9680838 'x' 'T &'
|     | `-DeclRefExpr 0x5605d96b3940 <col:56> 'const V' lvalue ParmVar 0x5605d96808d8 'default_value' 'const V &'
|     `-ReturnStmt 0x5605d96b39d0 <line:411:9, col:17>
|       `-UnaryOperator 0x5605d96b39b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5605d96b39a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5605d9680f48 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5605d9680b30 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d9680ba8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5605d9680ea8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5605d9680c68 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d9680ce0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5605d9680d88 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x5605d96b3b60 <col:53, line:425:5>
|     `-ReturnStmt 0x5605d96b3b50 <line:424:9, col:42>
|       `-CallExpr 0x5605d96b3b10 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b3a10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b3a90 <col:21> 'const char *' lvalue ParmVar 0x5605d9680c68 'keyword' 'const char *'
|         |-IntegerLiteral 0x5605d96b3ab0 <col:30> 'int' 0
|         |-DeclRefExpr 0x5605d96b3ad0 <col:33> 'P' lvalue ParmVar 0x5605d9680ce0 'parser' 'P'
|         `-DeclRefExpr 0x5605d96b3af0 <col:41> 'T' lvalue ParmVar 0x5605d9680d88 'x' 'T &'
|-FunctionTemplateDecl 0x5605d9681398 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x5605d9680fb8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d9681038 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5605d96812f8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5605d96810f8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d9681170 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5605d9681218 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5605d96b3cd8 <col:55, line:429:5>
|     `-ReturnStmt 0x5605d96b3cc8 <line:428:9, col:50>
|       `-CallExpr 0x5605d96b3c88 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b3b88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b3c08 <col:21> 'const char *' lvalue ParmVar 0x5605d96810f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5605d96b3c28 <col:30> 'const int' lvalue Var 0x5605d967e7e8 'mandatory' 'const int'
|         |-DeclRefExpr 0x5605d96b3c48 <col:41> 'P' lvalue ParmVar 0x5605d9681170 'parser' 'P'
|         `-DeclRefExpr 0x5605d96b3c68 <col:49> 'T' lvalue ParmVar 0x5605d9681218 'x' 'T &'
|-FunctionTemplateDecl 0x5605d96817e8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x5605d9681408 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d9681488 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5605d9681748 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5605d9681548 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d96815c0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5605d9681668 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5605d96b3e50 <col:55, line:433:5>
|     `-ReturnStmt 0x5605d96b3e40 <line:432:9, col:51>
|       `-CallExpr 0x5605d96b3e00 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b3d00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b3d80 <col:21> 'const char *' lvalue ParmVar 0x5605d9681548 'keyword' 'const char *'
|         |-DeclRefExpr 0x5605d96b3da0 <col:30> 'const int' lvalue Var 0x5605d967e8e0 'positional' 'const int'
|         |-DeclRefExpr 0x5605d96b3dc0 <col:42> 'P' lvalue ParmVar 0x5605d96815c0 'parser' 'P'
|         `-DeclRefExpr 0x5605d96b3de0 <col:50> 'T' lvalue ParmVar 0x5605d9681668 'x' 'T &'
|-FunctionTemplateDecl 0x5605d9681c38 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x5605d9681858 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d96818d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5605d9681b98 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5605d9681998 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d9681a10 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5605d9681ab8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x5605d96b4078 <col:56, line:437:5>
|     `-ReturnStmt 0x5605d96b4068 <line:436:9, col:63>
|       `-CallExpr 0x5605d96b4028 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b3e78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b3ef8 <col:21> 'const char *' lvalue ParmVar 0x5605d9681998 'keyword' 'const char *'
|         |-BinaryOperator 0x5605d96b3fc8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5605d96b3f78 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5605d96b3f58 <col:30> 'const int' lvalue Var 0x5605d967e7e8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5605d96b3fb0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5605d96b3f90 <col:42> 'const int' lvalue Var 0x5605d967e8e0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5605d96b3fe8 <col:54> 'P' lvalue ParmVar 0x5605d9681a10 'parser' 'P'
|         `-DeclRefExpr 0x5605d96b4008 <col:62> 'T' lvalue ParmVar 0x5605d9681ab8 'x' 'T &'
|-FunctionTemplateDecl 0x5605d9682168 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x5605d9681ca8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d9681d28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5605d96820c8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5605d9681de8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d9681e68 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5605d9681ee0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5605d9681f88 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5605d96b41e0 <col:64, line:442:5>
|     |-CallExpr 0x5605d96b4160 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5605d96b4090 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5605d96b40d0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5605d96b40e0 <col:30> 'const char *' lvalue ParmVar 0x5605d9681de8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5605d96b4100 <col:39> 'int' lvalue ParmVar 0x5605d9681e68 'flags' 'int'
|     | |-DeclRefExpr 0x5605d96b4120 <col:46> 'P' lvalue ParmVar 0x5605d9681ee0 'parser' 'P'
|     | `-DeclRefExpr 0x5605d96b4140 <col:54> 'T' lvalue ParmVar 0x5605d9681f88 'x' 'T &'
|     `-ReturnStmt 0x5605d96b41d0 <line:441:9, col:17>
|       `-UnaryOperator 0x5605d96b41b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5605d96b41a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5605d9682768 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x5605d96821e0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d9682258 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5605d96822d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5605d96826c8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5605d96823a0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d9682418 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5605d96824b8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x5605d9682588 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5605d96b4378 <col:84, line:458:5>
|     `-ReturnStmt 0x5605d96b4368 <line:457:9, col:64>
|       `-CallExpr 0x5605d96b4320 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b4210 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b4280 <col:28> 'const char *' lvalue ParmVar 0x5605d96823a0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5605d96b42a0 <col:37> 'int' 0
|         |-DeclRefExpr 0x5605d96b42c0 <col:40> 'P' lvalue ParmVar 0x5605d9682418 'parser' 'P'
|         |-DeclRefExpr 0x5605d96b42e0 <col:48> 'T' lvalue ParmVar 0x5605d96824b8 'x' 'T &'
|         `-DeclRefExpr 0x5605d96b4300 <col:51> 'const V' lvalue ParmVar 0x5605d9682588 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5605d9682ce8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5605d96827e0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d9682858 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5605d96828d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5605d9682c48 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5605d96829a0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d9682a18 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5605d9682ab8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x5605d9682b58 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5605d96b4508 <col:86, line:462:5>
|     `-ReturnStmt 0x5605d96b44f8 <line:461:9, col:73>
|       `-CallExpr 0x5605d96b44b0 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b43a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b4410 <col:28> 'const char *' lvalue ParmVar 0x5605d96829a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5605d96b4430 <col:37> 'const int' lvalue Var 0x5605d967e8e0 'positional' 'const int'
|         |-DeclRefExpr 0x5605d96b4450 <col:49> 'P' lvalue ParmVar 0x5605d9682a18 'parser' 'P'
|         |-DeclRefExpr 0x5605d96b4470 <col:57> 'T' lvalue ParmVar 0x5605d9682ab8 'x' 'T &'
|         `-DeclRefExpr 0x5605d96b4490 <col:60> 'const V' lvalue ParmVar 0x5605d9682b58 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5605d9683348 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x5605d9682d60 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d9682dd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5605d9682e58 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5605d96832a8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5605d9682f20 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d9682fa0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5605d9683018 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x5605d96830b8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x5605d9683158 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5605d96b4698 <col:95, line:467:5>
|     |-CallExpr 0x5605d96b4610 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5605d96b4520 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5605d96b4560 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5605d96b4570 <col:37> 'const char *' lvalue ParmVar 0x5605d9682f20 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5605d96b4590 <col:46> 'int' lvalue ParmVar 0x5605d9682fa0 'flags' 'int'
|     | |-DeclRefExpr 0x5605d96b45b0 <col:53> 'P' lvalue ParmVar 0x5605d9683018 'parser' 'P'
|     | |-DeclRefExpr 0x5605d96b45d0 <col:61> 'T' lvalue ParmVar 0x5605d96830b8 'x' 'T &'
|     | `-DeclRefExpr 0x5605d96b45f0 <col:64> 'const V' lvalue ParmVar 0x5605d9683158 'default_value' 'const V &'
|     `-ReturnStmt 0x5605d96b4688 <line:466:9, col:17>
|       `-UnaryOperator 0x5605d96b4670 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5605d96b4660 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5605d9687cf8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x5605d96833c8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d9683448 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5605d96834c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5605d9687c58 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5605d9687960 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d96879d8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5605d9687a78 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5605d9687b18 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5605d96b4840 <col:63, line:481:5>
|     `-ReturnStmt 0x5605d96b4830 <line:480:9, col:47>
|       `-CallExpr 0x5605d96b47e8 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b46c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b4748 <col:21> 'const char *' lvalue ParmVar 0x5605d9687960 'keyword' 'const char *'
|         |-IntegerLiteral 0x5605d96b4768 <col:30> 'int' 0
|         |-DeclRefExpr 0x5605d96b4788 <col:33> 'P' lvalue ParmVar 0x5605d96879d8 'parser' 'P'
|         |-DeclRefExpr 0x5605d96b47a8 <col:41> 'T1' lvalue ParmVar 0x5605d9687a78 'x1' 'T1 &'
|         `-DeclRefExpr 0x5605d96b47c8 <col:45> 'T2' lvalue ParmVar 0x5605d9687b18 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5605d9688278 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x5605d9687d70 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d9687de8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5605d9687e68 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5605d96881d8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5605d9687f30 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d9687fa8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5605d9688048 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5605d96880e8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5605d96b49e0 <col:65, line:485:5>
|     `-ReturnStmt 0x5605d96b49d0 <line:484:9, col:55>
|       `-CallExpr 0x5605d96b4988 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b4868 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b48e8 <col:21> 'const char *' lvalue ParmVar 0x5605d9687f30 'keyword' 'const char *'
|         |-DeclRefExpr 0x5605d96b4908 <col:30> 'const int' lvalue Var 0x5605d967e7e8 'mandatory' 'const int'
|         |-DeclRefExpr 0x5605d96b4928 <col:41> 'P' lvalue ParmVar 0x5605d9687fa8 'parser' 'P'
|         |-DeclRefExpr 0x5605d96b4948 <col:49> 'T1' lvalue ParmVar 0x5605d9688048 'x1' 'T1 &'
|         `-DeclRefExpr 0x5605d96b4968 <col:53> 'T2' lvalue ParmVar 0x5605d96880e8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5605d96887f8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x5605d96882f0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d9688368 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5605d96883e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5605d9688758 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5605d96884b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d9688528 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5605d96885c8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5605d9688668 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5605d96b4b80 <col:65, line:489:5>
|     `-ReturnStmt 0x5605d96b4b70 <line:488:9, col:56>
|       `-CallExpr 0x5605d96b4b28 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b4a08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b4a88 <col:21> 'const char *' lvalue ParmVar 0x5605d96884b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5605d96b4aa8 <col:30> 'const int' lvalue Var 0x5605d967e8e0 'positional' 'const int'
|         |-DeclRefExpr 0x5605d96b4ac8 <col:42> 'P' lvalue ParmVar 0x5605d9688528 'parser' 'P'
|         |-DeclRefExpr 0x5605d96b4ae8 <col:50> 'T1' lvalue ParmVar 0x5605d96885c8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5605d96b4b08 <col:54> 'T2' lvalue ParmVar 0x5605d9688668 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5605d9688d78 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x5605d9688870 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d96888e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5605d9688968 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5605d9688cd8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5605d9688a30 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d9688aa8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5605d9688b48 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5605d9688be8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5605d96b4dd0 <col:66, line:493:5>
|     `-ReturnStmt 0x5605d96b4dc0 <line:492:9, col:68>
|       `-CallExpr 0x5605d96b4d78 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b4ba8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b4c28 <col:21> 'const char *' lvalue ParmVar 0x5605d9688a30 'keyword' 'const char *'
|         |-BinaryOperator 0x5605d96b4cf8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5605d96b4ca8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5605d96b4c88 <col:30> 'const int' lvalue Var 0x5605d967e7e8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5605d96b4ce0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5605d96b4cc0 <col:42> 'const int' lvalue Var 0x5605d967e8e0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5605d96b4d18 <col:54> 'P' lvalue ParmVar 0x5605d9688aa8 'parser' 'P'
|         |-DeclRefExpr 0x5605d96b4d38 <col:62> 'T1' lvalue ParmVar 0x5605d9688b48 'x1' 'T1 &'
|         `-DeclRefExpr 0x5605d96b4d58 <col:66> 'T2' lvalue ParmVar 0x5605d9688be8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5605d96893d8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x5605d9688df0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d9688e68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5605d9688ee8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5605d9689338 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5605d9688fb0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d9689030 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5605d96890a8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5605d9689148 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5605d96891e8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5605d96b4f60 <col:74, line:498:5>
|     |-CallExpr 0x5605d96b4ed8 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5605d96b4de8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5605d96b4e28 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5605d96b4e38 <col:30> 'const char *' lvalue ParmVar 0x5605d9688fb0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5605d96b4e58 <col:39> 'int' lvalue ParmVar 0x5605d9689030 'flags' 'int'
|     | |-DeclRefExpr 0x5605d96b4e78 <col:46> 'P' lvalue ParmVar 0x5605d96890a8 'parser' 'P'
|     | |-DeclRefExpr 0x5605d96b4e98 <col:54> 'T1' lvalue ParmVar 0x5605d9689148 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5605d96b4eb8 <col:58> 'T2' lvalue ParmVar 0x5605d96891e8 'x2' 'T2 &'
|     `-ReturnStmt 0x5605d96b4f50 <line:497:9, col:17>
|       `-UnaryOperator 0x5605d96b4f38 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5605d96b4f28 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5605d9689738 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x5605d9689458 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5605d9689698 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5605d9689510 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d9689588 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5605d96b50a8 <col:52, line:509:5>
|     `-ReturnStmt 0x5605d96b5098 <line:508:9, col:44>
|       `-CallExpr 0x5605d96b5060 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b4f90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b5000 <col:26> 'const char *' lvalue ParmVar 0x5605d9689510 'keyword' 'const char *'
|         |-IntegerLiteral 0x5605d96b5020 <col:35> 'int' 0
|         `-DeclRefExpr 0x5605d96b5040 <col:38> 'P' lvalue ParmVar 0x5605d9689588 'parser' 'P'
|-FunctionTemplateDecl 0x5605d9689a38 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x5605d96897a0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5605d9689998 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5605d9689850 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d96898c8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5605d96b51e8 <col:54, line:513:5>
|     `-ReturnStmt 0x5605d96b51d8 <line:512:9, col:52>
|       `-CallExpr 0x5605d96b51a0 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b50d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b5140 <col:26> 'const char *' lvalue ParmVar 0x5605d9689850 'keyword' 'const char *'
|         |-DeclRefExpr 0x5605d96b5160 <col:35> 'const int' lvalue Var 0x5605d967e7e8 'mandatory' 'const int'
|         `-DeclRefExpr 0x5605d96b5180 <col:46> 'P' lvalue ParmVar 0x5605d96898c8 'parser' 'P'
|-FunctionTemplateDecl 0x5605d9689d38 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x5605d9689aa0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5605d9689c98 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5605d9689b50 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d9689bc8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5605d96b5328 <col:54, line:517:5>
|     `-ReturnStmt 0x5605d96b5318 <line:516:9, col:53>
|       `-CallExpr 0x5605d96b52e0 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b5210 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b5280 <col:26> 'const char *' lvalue ParmVar 0x5605d9689b50 'keyword' 'const char *'
|         |-DeclRefExpr 0x5605d96b52a0 <col:35> 'const int' lvalue Var 0x5605d967e8e0 'positional' 'const int'
|         `-DeclRefExpr 0x5605d96b52c0 <col:47> 'P' lvalue ParmVar 0x5605d9689bc8 'parser' 'P'
|-FunctionTemplateDecl 0x5605d968a038 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x5605d9689da0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5605d9689f98 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5605d9689e50 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d9689ec8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5605d96b5518 <col:55, line:521:5>
|     `-ReturnStmt 0x5605d96b5508 <line:520:9, col:65>
|       `-CallExpr 0x5605d96b54d0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b5350 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b53c0 <col:26> 'const char *' lvalue ParmVar 0x5605d9689e50 'keyword' 'const char *'
|         |-BinaryOperator 0x5605d96b5490 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5605d96b5440 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5605d96b5420 <col:35> 'const int' lvalue Var 0x5605d967e7e8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5605d96b5478 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5605d96b5458 <col:47> 'const int' lvalue Var 0x5605d967e8e0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5605d96b54b0 <col:59> 'P' lvalue ParmVar 0x5605d9689ec8 'parser' 'P'
|-FunctionTemplateDecl 0x5605d968a408 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x5605d968a0a0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5605d968a368 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5605d968a150 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d968a1d0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5605d968a248 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5605d96b5658 <col:63, line:526:5>
|     |-CallExpr 0x5605d96b55e0 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5605d96b5530 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5605d96b5570 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5605d96b5580 <col:35> 'const char *' lvalue ParmVar 0x5605d968a150 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5605d96b55a0 <col:44> 'int' lvalue ParmVar 0x5605d968a1d0 'flags' 'int'
|     | `-DeclRefExpr 0x5605d96b55c0 <col:51> 'P' lvalue ParmVar 0x5605d968a248 'parser' 'P'
|     `-ReturnStmt 0x5605d96b5648 <line:525:9, col:17>
|       `-UnaryOperator 0x5605d96b5630 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5605d96b5620 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5605d968a858 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x5605d968a478 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d968a4f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5605d968a7b8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5605d968a5b8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d968a630 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x5605d968a6d8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5605d96b57b0 <col:58, line:541:5>
|     `-ReturnStmt 0x5605d96b57a0 <line:540:9, col:39>
|       `-CallExpr 0x5605d96b5768 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b5688 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b5708 <col:21> 'const char *' lvalue ParmVar 0x5605d968a5b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5605d96b5728 <col:30> 'P' lvalue ParmVar 0x5605d968a630 'parser' 'P'
|         `-DeclRefExpr 0x5605d96b5748 <col:38> 'T' lvalue ParmVar 0x5605d968a6d8 'x' 'T &'
|-FunctionTemplateDecl 0x5605d968aca8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x5605d968a8c8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d968a948 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5605d968ac08 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5605d968aa08 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d968aa80 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5605d968ab28 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5605d96b58e8 <col:60, line:545:5>
|     `-ReturnStmt 0x5605d96b58d8 <line:544:9, col:41>
|       `-CallExpr 0x5605d96b58a0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b57d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b5840 <col:23> 'const char *' lvalue ParmVar 0x5605d968aa08 'keyword' 'const char *'
|         |-DeclRefExpr 0x5605d96b5860 <col:32> 'P' lvalue ParmVar 0x5605d968aa80 'parser' 'P'
|         `-DeclRefExpr 0x5605d96b5880 <col:40> 'T' lvalue ParmVar 0x5605d968ab28 'x' 'T &'
|-FunctionTemplateDecl 0x5605d968b0f8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5605d968ad18 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d968ad98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5605d968b058 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5605d968ae58 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d968aed0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5605d968af78 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5605d96b5a20 <col:60, line:549:5>
|     `-ReturnStmt 0x5605d96b5a10 <line:548:9, col:41>
|       `-CallExpr 0x5605d96b59d8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b5910 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b5978 <col:23> 'const char *' lvalue ParmVar 0x5605d968ae58 'keyword' 'const char *'
|         |-DeclRefExpr 0x5605d96b5998 <col:32> 'P' lvalue ParmVar 0x5605d968aed0 'parser' 'P'
|         `-DeclRefExpr 0x5605d96b59b8 <col:40> 'T' lvalue ParmVar 0x5605d968af78 'x' 'T &'
|-FunctionTemplateDecl 0x5605d968b548 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x5605d968b168 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d968b1e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5605d968b4a8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5605d968b2a8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d968b320 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x5605d968b3c8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5605d96b5b58 <col:61, line:553:5>
|     `-ReturnStmt 0x5605d96b5b48 <line:552:9, col:42>
|       `-CallExpr 0x5605d96b5b10 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b5a48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b5ab0 <col:24> 'const char *' lvalue ParmVar 0x5605d968b2a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5605d96b5ad0 <col:33> 'P' lvalue ParmVar 0x5605d968b320 'parser' 'P'
|         `-DeclRefExpr 0x5605d96b5af0 <col:41> 'T' lvalue ParmVar 0x5605d968b3c8 'x' 'T &'
|-FunctionTemplateDecl 0x5605d968ba28 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x5605d968b5b8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d968b638 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5605d968b988 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5605d968b6f8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d968b778 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5605d968b7f0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x5605d968b898 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5605d96b5cd0 <col:69, line:557:5>
|     `-ReturnStmt 0x5605d96b5cc0 <line:556:9, col:46>
|       `-CallExpr 0x5605d96b5c80 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b5b80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b5c00 <col:21> 'const char *' lvalue ParmVar 0x5605d968b6f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5605d96b5c20 <col:30> 'int' lvalue ParmVar 0x5605d968b778 'flags' 'int'
|         |-DeclRefExpr 0x5605d96b5c40 <col:37> 'P' lvalue ParmVar 0x5605d968b7f0 'parser' 'P'
|         `-DeclRefExpr 0x5605d96b5c60 <col:45> 'T' lvalue ParmVar 0x5605d968b898 'x' 'T &'
|-FunctionTemplateDecl 0x5605d968bd38 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x5605d968baa0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5605d968bc98 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5605d968bb50 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d968bbc8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5605d96b5e10 <col:56, line:571:5>
|     `-ReturnStmt 0x5605d96b5e00 <line:570:9, col:48>
|       `-CallExpr 0x5605d96b5dc8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b5cf8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b5d68 <col:30> 'const char *' lvalue ParmVar 0x5605d968bb50 'keyword' 'const char *'
|         |-IntegerLiteral 0x5605d96b5d88 <col:39> 'int' 0
|         `-DeclRefExpr 0x5605d96b5da8 <col:42> 'P' lvalue ParmVar 0x5605d968bbc8 'parser' 'P'
|-FunctionTemplateDecl 0x5605d968c0c8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x5605d968bda0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5605d968c028 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5605d968be50 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d968bed0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5605d968bf48 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5605d96b5fe0 <col:67, line:576:5>
|     |-CallExpr 0x5605d96b5f68 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5605d96b5e28 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5605d96b5e68 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5605d96b5e78 <col:39> 'const char *' lvalue ParmVar 0x5605d968be50 'keyword' 'const char *'
|     | |-BinaryOperator 0x5605d96b5f28 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5605d96b5ed8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5605d96b5e98 <col:48> 'int' lvalue ParmVar 0x5605d968bed0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5605d96b5f10 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5605d96b5ef0 <col:56> 'const int' lvalue Var 0x5605d967ead0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5605d96b5f48 <col:68> 'P' lvalue ParmVar 0x5605d968bf48 'parser' 'P'
|     `-ReturnStmt 0x5605d96b5fd0 <line:575:9, col:17>
|       `-UnaryOperator 0x5605d96b5fb8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5605d96b5fa8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5605d968c518 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x5605d968c138 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d968c1b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5605d968c478 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5605d968c278 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d968c2f0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5605d968c398 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5605d96b6150 <col:62, line:592:5>
|     `-ReturnStmt 0x5605d96b6140 <line:591:9, col:51>
|       `-CallExpr 0x5605d96b6100 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b6010 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b6080 <col:30> 'const char *' lvalue ParmVar 0x5605d968c278 'keyword' 'const char *'
|         |-IntegerLiteral 0x5605d96b60a0 <col:39> 'int' 0
|         |-DeclRefExpr 0x5605d96b60c0 <col:42> 'P' lvalue ParmVar 0x5605d968c2f0 'parser' 'P'
|         `-DeclRefExpr 0x5605d96b60e0 <col:50> 'T' lvalue ParmVar 0x5605d968c398 'x' 'T &'
|-FunctionTemplateDecl 0x5605d968c9f8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x5605d968c588 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d968c608 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5605d968c958 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5605d968c6c8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d968c748 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5605d968c7c0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x5605d968c868 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5605d96b6348 <col:73, line:597:5>
|     |-CallExpr 0x5605d96b62c8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5605d96b6168 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5605d96b61a8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5605d96b61b8 <col:39> 'const char *' lvalue ParmVar 0x5605d968c6c8 'keyword' 'const char *'
|     | |-BinaryOperator 0x5605d96b6268 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5605d96b6218 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5605d96b61d8 <col:48> 'int' lvalue ParmVar 0x5605d968c748 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5605d96b6250 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5605d96b6230 <col:56> 'const int' lvalue Var 0x5605d967ead0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5605d96b6288 <col:68> 'P' lvalue ParmVar 0x5605d968c7c0 'parser' 'P'
|     | `-DeclRefExpr 0x5605d96b62a8 <col:76> 'T' lvalue ParmVar 0x5605d968c868 'x' 'T &'
|     `-ReturnStmt 0x5605d96b6338 <line:596:9, col:17>
|       `-UnaryOperator 0x5605d96b6320 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5605d96b6310 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5605d968cfa8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x5605d968ca70 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d968cae8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5605d968cf08 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x5605d968cba8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d968cc20 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x5605d968cde0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5605d96b64b8 <col:65, line:614:5>
|     `-ReturnStmt 0x5605d96b64a8 <line:613:9, col:46>
|       `-CallExpr 0x5605d96b6468 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b6378 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b63e8 <col:25> 'const char *' lvalue ParmVar 0x5605d968cba8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5605d96b6408 <col:34> 'int' 0
|         |-DeclRefExpr 0x5605d96b6428 <col:37> 'P' lvalue ParmVar 0x5605d968cc20 'parser' 'P'
|         `-DeclRefExpr 0x5605d96b6448 <col:45> 'Vector<T>' lvalue ParmVar 0x5605d968cde0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5605d968d3d8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x5605d968d018 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5605d968d338 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x5605d968d0d0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d968d220 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5605d96b66d0 <col:55, line:618:5>
|     `-ReturnStmt 0x5605d96b66c0 <line:617:9, col:55>
|       `-CallExpr 0x5605d96b6680 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b64e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b6550 <col:25> 'const char *' lvalue ParmVar 0x5605d968d0d0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5605d96b6570 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5605d96b6640 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5605d96b6660 <col:54> 'Vector<T>' lvalue ParmVar 0x5605d968d220 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5605d968d9a8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x5605d968d440 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d968d4b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5605d968d908 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5605d968d578 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d968d5f8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5605d968d670 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5605d968d7c0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5605d96b68c8 <col:76, line:623:5>
|     |-CallExpr 0x5605d96b6848 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5605d96b66e8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5605d96b6728 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5605d96b6738 <col:34> 'const char *' lvalue ParmVar 0x5605d968d578 'keyword' 'const char *'
|     | |-BinaryOperator 0x5605d96b67e8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5605d96b6798 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5605d96b6758 <col:43> 'int' lvalue ParmVar 0x5605d968d5f8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5605d96b67d0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5605d96b67b0 <col:51> 'const int' lvalue Var 0x5605d967ead0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5605d96b6808 <col:63> 'P' lvalue ParmVar 0x5605d968d670 'parser' 'P'
|     | `-DeclRefExpr 0x5605d96b6828 <col:71> 'Vector<T>' lvalue ParmVar 0x5605d968d7c0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5605d96b68b8 <line:622:9, col:17>
|       `-UnaryOperator 0x5605d96b68a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5605d96b6890 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5605d968dee8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x5605d968da20 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d968da98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5605d968de48 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x5605d968db58 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d968dbd8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5605d968dd20 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5605d96b6b30 <col:66, line:627:5>
|     `-ReturnStmt 0x5605d96b6b20 <line:626:9, col:59>
|       `-CallExpr 0x5605d96b6ae0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605d96b68f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605d96b6968 <col:25> 'const char *' lvalue ParmVar 0x5605d968db58 'keyword' 'const char *'
|         |-DeclRefExpr 0x5605d96b6988 <col:34> 'int' lvalue ParmVar 0x5605d968dbd8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5605d96b6aa0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5605d96b6ac0 <col:58> 'Vector<T>' lvalue ParmVar 0x5605d968dd20 'x' 'Vector<T> &'
|-CXXMethodDecl 0x5605d968df78 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5605d96b6bb0 <col:25, line:633:5>
|   `-ReturnStmt 0x5605d96b6ba0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5605d96b6b88 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5605d96b6b58 <col:16> 'const bool' lvalue ->_status 0x5605d969b188
|         `-CXXThisExpr 0x5605d96b6b48 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5605d968e0f8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x5605d968e030 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5605d96b6c98 <col:27, line:639:5>
|   |-BinaryOperator 0x5605d96b6c40 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5605d96b6bc8 <col:9> 'bool' lvalue ParmVar 0x5605d968e030 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5605d96b6c28 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5605d96b6bf8 <col:13> 'bool' lvalue ->_status 0x5605d969b188
|   |     `-CXXThisExpr 0x5605d96b6be8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5605d96b6c88 <line:638:9, col:17>
|     `-UnaryOperator 0x5605d96b6c70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5605d96b6c60 <col:17> 'Args *' this
|-CXXMethodDecl 0x5605d968e278 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5605d968e1b8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5605d96b6d88 <col:39, line:644:5>
|   |-BinaryOperator 0x5605d96b6d30 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5605d96b6cb8 <col:9> 'bool' lvalue ParmVar 0x5605d968e1b8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5605d96b6d18 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5605d96b6ce8 <col:13> 'const bool' lvalue ->_status 0x5605d969b188
|   |     `-CXXThisExpr 0x5605d96b6cd8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5605d96b6d78 <line:643:9, col:17>
|     `-UnaryOperator 0x5605d96b6d60 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5605d96b6d50 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5605d968e340 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5605d96b6e30 <col:30, line:651:5>
|   `-ReturnStmt 0x5605d96b6e20 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5605d96b6e08 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5605d96b6dd8 <col:16> 'bool' lvalue ->_read_status 0x5605d9591940
|         `-ImplicitCastExpr 0x5605d96b6db8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5605d96b6da8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5605d968e488 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x5605d968e3f8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5605d96b6f38 <col:32, line:658:5>
|   |-BinaryOperator 0x5605d96b6ee0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5605d96b6e48 <col:9> 'bool' lvalue ParmVar 0x5605d968e3f8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5605d96b6ec8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5605d96b6e98 <col:13> 'bool' lvalue ->_read_status 0x5605d9591940
|   |     `-ImplicitCastExpr 0x5605d96b6e78 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5605d96b6e68 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5605d96b6f28 <line:657:9, col:17>
|     `-UnaryOperator 0x5605d96b6f10 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5605d96b6f00 <col:17> 'Args *' this
|-CXXMethodDecl 0x5605d968e5d8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5605d968e548 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5605d96b7048 <col:44, line:663:5>
|   |-BinaryOperator 0x5605d96b6ff0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5605d96b6f58 <col:9> 'bool' lvalue ParmVar 0x5605d968e548 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5605d96b6fd8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5605d96b6fa8 <col:13> 'bool' lvalue ->_read_status 0x5605d9591940
|   |     `-ImplicitCastExpr 0x5605d96b6f88 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5605d96b6f78 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5605d96b7038 <line:662:9, col:17>
|     `-UnaryOperator 0x5605d96b7020 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5605d96b7010 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5605d968e6a0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x5605d968e768 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x5605d968e830 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x5605d968e8f8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x5605d968ec08 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5605d968e998 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5605d968eb68 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x5605d968ea78 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5605d96b7400 <col:19, line:706:5>
|     `-IfStmt 0x5605d96b73d8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5605d96b7148 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5605d96b7308 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5605d96b72d8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5605d96b7298 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5605d96b71a0 <col:42> '<bound member function type>' ->simple_slot 0x5605d96b1e90
|       |     | `-CXXThisExpr 0x5605d96b7190 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x5605d96b7238 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5605d96b71f0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x5605d941a6e8
|       |     | `-DeclRefExpr 0x5605d96b71d0 <col:55> 'T' lvalue ParmVar 0x5605d968ea78 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5605d96b7278 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5605d96b73c8 <line:705:13, col:34>
|         `-CallExpr 0x5605d96b73a0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5605d96b7328 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5605d96b7380 <col:33> 'T' lvalue ParmVar 0x5605d968ea78 'x' 'T &'
|-FunctionTemplateDecl 0x5605d968eed8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x5605d968ec68 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5605d968ee38 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x5605d968ed48 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5605d96b77e0 <col:31, line:717:5>
|     |-DeclStmt 0x5605d96b7540 <line:713:9, col:23>
|     | `-VarDecl 0x5605d96b7428 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5605d96b7518 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5605d96b74a0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5605d96b74f8 <col:21> 'T' lvalue ParmVar 0x5605d968ed48 'x' 'T &'
|     |-IfStmt 0x5605d96b7790 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5605d96b7638 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5605d96b7770 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5605d96b7710 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5605d96b76a0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5605d95d17e8 0x5605d95d1408 0x5605d95d1038 0x5605d95d0c58 0x5605d95d0878 0x5605d95d04a8
|     |   | `-DeclRefExpr 0x5605d96b7680 <col:14> 'T *' lvalue Var 0x5605d96b7428 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5605d96b7750 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5605d96b77c8 <line:716:9, col:16>
|       `-DeclRefExpr 0x5605d96b77a8 <col:16> 'T *' lvalue Var 0x5605d96b7428 's' 'T *'
|-FunctionTemplateDecl 0x5605d968f2e8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x5605d968ef38 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5605d968efb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5605d968f248 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x5605d968f098 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x5605d968f138 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5605d96b7af0 <col:37, line:726:5>
|     |-IfStmt 0x5605d96b7a80 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5605d96b7aa0 <line:723:13, col:26>
|     | | `-VarDecl 0x5605d96b7848 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5605d96b7938 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5605d96b78c0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5605d96b7918 <col:25> 'T' lvalue ParmVar 0x5605d968f098 'x' 'T &'
|     | |-DeclRefExpr 0x5605d96b7960 <col:16> 'T *' lvalue Var 0x5605d96b7848 's' 'T *'
|     | `-BinaryOperator 0x5605d96b7a60 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5605d96b7a10 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5605d96b79a0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5605d95d17e8 0x5605d95d1408 0x5605d95d1038 0x5605d95d0c58 0x5605d95d0878 0x5605d95d04a8
|     |   | `-DeclRefExpr 0x5605d96b7980 <col:14> 'T *' lvalue Var 0x5605d96b7848 's' 'T *'
|     |   `-DeclRefExpr 0x5605d96b7a40 <col:18> 'const V' lvalue ParmVar 0x5605d968f138 'value' 'const V &'
|     `-ReturnStmt 0x5605d96b7ae0 <line:725:9, col:17>
|       `-UnaryOperator 0x5605d96b7ac8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5605d96b7ab8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5605d968f6e8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x5605d968f350 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5605d968f648 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x5605d968f400 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d968f480 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5605d968f528 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5605d96b8910 <col:65, line:737:5>
|     |-DeclStmt 0x5605d96b7b88 <line:732:9, col:26>
|     | `-VarDecl 0x5605d96b7b20 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5605d96b88d8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5605d96b88f8 <line:733:13, col:58>
|       | `-VarDecl 0x5605d96b7bb0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5605d96b7d90 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5605d96b7d60 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5605d96b7d48 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5605d96b7d28 <col:26, col:58> 'String' (CXXTemporary 0x5605d96b7d28)
|       |           `-CXXMemberCallExpr 0x5605d96b7cb8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5605d96b7c28 <col:26> '<bound member function type>' ->find 0x5605d96afbb8
|       |             | `-CXXThisExpr 0x5605d96b7c18 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5605d96b7cf0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5605d96b7c58 <col:31> 'const char *' lvalue ParmVar 0x5605d968f400 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5605d96b7d08 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5605d96b7c78 <col:40> 'int' lvalue ParmVar 0x5605d968f480 'flags' 'int'
|       |             `-DeclRefExpr 0x5605d96b7c98 <col:47> 'Args::Slot *' lvalue Var 0x5605d96b7b20 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5605d96b7e48 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5605d96b7e30 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5605d96b7e10 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5605d96b7de0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5605d93dc6a8
|       |       `-ImplicitCastExpr 0x5605d96b7dc8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5605d96b7da8 <col:20> 'String' lvalue Var 0x5605d96b7bb0 'str' 'String'
|       `-CompoundStmt 0x5605d96b88b8 <col:61, line:736:9>
|         |-DeclStmt 0x5605d96b8300 <line:734:13, col:76>
|         | `-VarDecl 0x5605d96b7e98 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5605d96b82d0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5605d96b8240 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5605d96b8288 <col:60> 'T' lvalue ParmVar 0x5605d968f528 'variable' 'T &'
|         |     `-UnaryOperator 0x5605d96b82b8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5605d96b82a8 <col:71> 'Args *' this
|         `-CallExpr 0x5605d96b8888 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5605d96b8328 <col:13> '<bound member function type>' ->postparse 0x5605d96afdc8
|           | `-CXXThisExpr 0x5605d96b8318 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5605d96b8848 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5605d96b8358 <col:23> 'T *' lvalue Var 0x5605d96b7e98 's' 'T *'
|           | `-CallExpr 0x5605d96b8808 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5605d96b85e0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5605d96b86e0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5605d96b8700 <col:86> 'String' lvalue Var 0x5605d96b7bb0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5605d96b87b0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5605d96b8740 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5605d95d17e8 0x5605d95d1408 0x5605d95d1038 0x5605d95d0c58 0x5605d95d0878 0x5605d95d04a8
|           |   | `-DeclRefExpr 0x5605d96b8720 <col:92> 'T *' lvalue Var 0x5605d96b7e98 's' 'T *'
|           |   `-UnaryOperator 0x5605d96b87f0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5605d96b87e0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5605d96b8868 <col:103> 'Args::Slot *' lvalue Var 0x5605d96b7b20 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5605d9697008 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5605d968f758 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5605d968f7d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5605d9696f68 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5605d968f898 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d9696ce0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5605d9696d88 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x5605d9696e28 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5605d96b97b0 <col:88, line:745:5>
|     |-DeclStmt 0x5605d96b89a8 <line:741:9, col:26>
|     | `-VarDecl 0x5605d96b8940 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5605d96b8bc8 <line:742:9, col:55>
|     | `-VarDecl 0x5605d96b89d0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5605d96b8bb0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5605d96b8b80 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5605d96b8b68 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5605d96b8b48 <col:22, col:54> 'String' (CXXTemporary 0x5605d96b8b48)
|     |           `-CXXMemberCallExpr 0x5605d96b8ad8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5605d96b8a48 <col:22> '<bound member function type>' ->find 0x5605d96afbb8
|     |             | `-CXXThisExpr 0x5605d96b8a38 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5605d96b8b10 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5605d96b8a78 <col:27> 'const char *' lvalue ParmVar 0x5605d968f898 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5605d96b8b28 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5605d96b8a98 <col:36> 'int' lvalue ParmVar 0x5605d9696ce0 'flags' 'int'
|     |             `-DeclRefExpr 0x5605d96b8ab8 <col:43> 'Args::Slot *' lvalue Var 0x5605d96b8940 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5605d96b8fa0 <line:743:9, col:72>
|     | `-VarDecl 0x5605d96b8c18 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5605d96b8f70 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5605d96b8ee0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5605d96b8f28 <col:56> 'T' lvalue ParmVar 0x5605d9696d88 'variable' 'T &'
|     |     `-UnaryOperator 0x5605d96b8f58 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5605d96b8f48 <col:67> 'Args *' this
|     `-CallExpr 0x5605d96b9780 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5605d96b8fc8 <col:9> '<bound member function type>' ->postparse 0x5605d96afdc8
|       | `-CXXThisExpr 0x5605d96b8fb8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5605d96b9740 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5605d96b8ff8 <col:19> 'T *' lvalue Var 0x5605d96b8c18 's' 'T *'
|       | `-ParenExpr 0x5605d96b9720 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5605d96b96f0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5605d96b96d8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5605d96b96c0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5605d96b96a0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5605d96b9670 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5605d93dc6a8
|       |     |       `-ImplicitCastExpr 0x5605d96b9658 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5605d96b9018 <col:25> 'String' lvalue Var 0x5605d96b89d0 'str' 'String'
|       |     |-CallExpr 0x5605d96b94c8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5605d96b92a0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5605d96b93a0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5605d96b93c0 <col:89> 'String' lvalue Var 0x5605d96b89d0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5605d96b9470 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5605d96b9400 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5605d95d17e8 0x5605d95d1408 0x5605d95d1038 0x5605d95d0c58 0x5605d95d0878 0x5605d95d04a8
|       |     | | `-DeclRefExpr 0x5605d96b93e0 <col:95> 'T *' lvalue Var 0x5605d96b8c18 's' 'T *'
|       |     | `-UnaryOperator 0x5605d96b94b0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5605d96b94a0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5605d96b9638 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5605d96b9618 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5605d96b95e8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5605d96b9598 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5605d96b9528 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5605d95d17e8 0x5605d95d1408 0x5605d95d1038 0x5605d95d0c58 0x5605d95d0878 0x5605d95d04a8
|       |         | | `-DeclRefExpr 0x5605d96b9508 <col:109> 'T *' lvalue Var 0x5605d96b8c18 's' 'T *'
|       |         | `-DeclRefExpr 0x5605d96b95c8 <col:113> 'const V' lvalue ParmVar 0x5605d9696e28 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5605d96b9608 <col:120> 'bool' true
|       `-DeclRefExpr 0x5605d96b9760 <col:128> 'Args::Slot *' lvalue Var 0x5605d96b8940 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5605d9697538 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x5605d9697080 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d96970f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5605d9697498 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5605d96971b8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d9697238 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5605d96972b0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5605d9697358 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5605d96bc558 <col:75, line:754:5>
|     |-DeclStmt 0x5605d96b9858 <line:749:9, col:26>
|     | `-VarDecl 0x5605d96b97f0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5605d96bc520 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5605d96bc540 <line:750:13, col:58>
|       | `-VarDecl 0x5605d96bba30 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5605d96bbc10 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5605d96bbbe0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5605d96bbbc8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5605d96bbba8 <col:26, col:58> 'String' (CXXTemporary 0x5605d96bbba8)
|       |           `-CXXMemberCallExpr 0x5605d96bbb38 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5605d96bbaa8 <col:26> '<bound member function type>' ->find 0x5605d96afbb8
|       |             | `-CXXThisExpr 0x5605d96bba98 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5605d96bbb70 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5605d96bbad8 <col:31> 'const char *' lvalue ParmVar 0x5605d96971b8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5605d96bbb88 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5605d96bbaf8 <col:40> 'int' lvalue ParmVar 0x5605d9697238 'flags' 'int'
|       |             `-DeclRefExpr 0x5605d96bbb18 <col:47> 'Args::Slot *' lvalue Var 0x5605d96b97f0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5605d96bbcc8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5605d96bbcb0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5605d96bbc90 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5605d96bbc60 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5605d93dc6a8
|       |       `-ImplicitCastExpr 0x5605d96bbc48 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5605d96bbc28 <col:20> 'String' lvalue Var 0x5605d96bba30 'str' 'String'
|       `-CompoundStmt 0x5605d96bc500 <col:61, line:753:9>
|         |-DeclStmt 0x5605d96bc0a0 <line:751:13, col:63>
|         | `-VarDecl 0x5605d96bbd18 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5605d96bc070 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5605d96bbfe0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5605d96bc028 <col:47> 'T' lvalue ParmVar 0x5605d9697358 'variable' 'T &'
|         |     `-UnaryOperator 0x5605d96bc058 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5605d96bc048 <col:58> 'Args *' this
|         `-CallExpr 0x5605d96bc4d0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5605d96bc0c8 <col:13> '<bound member function type>' ->postparse 0x5605d96afdc8
|           | `-CXXThisExpr 0x5605d96bc0b8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5605d96bc490 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5605d96bc0f8 <col:23> 'T *' lvalue Var 0x5605d96bbd18 's' 'T *'
|           | `-CallExpr 0x5605d96bc450 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5605d96bc2e0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5605d96bc328 <col:56> 'P' lvalue ParmVar 0x5605d96972b0 'parser' 'P'
|           |   |-DeclRefExpr 0x5605d96bc348 <col:64> 'String' lvalue Var 0x5605d96bba30 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5605d96bc3f8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5605d96bc388 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5605d95d17e8 0x5605d95d1408 0x5605d95d1038 0x5605d95d0c58 0x5605d95d0878 0x5605d95d04a8
|           |   | `-DeclRefExpr 0x5605d96bc368 <col:70> 'T *' lvalue Var 0x5605d96bbd18 's' 'T *'
|           |   `-UnaryOperator 0x5605d96bc438 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5605d96bc428 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5605d96bc4b0 <col:81> 'Args::Slot *' lvalue Var 0x5605d96b97f0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5605d9697b98 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5605d96975b0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5605d9697628 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x5605d96976a8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5605d9697af8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5605d9697770 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d96977f0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5605d9697868 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x5605d9697908 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5605d96979a8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5605d96bd2e8 <col:98, line:762:5>
|     |-DeclStmt 0x5605d96bc5f0 <line:758:9, col:26>
|     | `-VarDecl 0x5605d96bc588 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5605d96bc810 <line:759:9, col:55>
|     | `-VarDecl 0x5605d96bc618 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5605d96bc7f8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5605d96bc7c8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5605d96bc7b0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5605d96bc790 <col:22, col:54> 'String' (CXXTemporary 0x5605d96bc790)
|     |           `-CXXMemberCallExpr 0x5605d96bc720 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5605d96bc690 <col:22> '<bound member function type>' ->find 0x5605d96afbb8
|     |             | `-CXXThisExpr 0x5605d96bc680 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5605d96bc758 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5605d96bc6c0 <col:27> 'const char *' lvalue ParmVar 0x5605d9697770 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5605d96bc770 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5605d96bc6e0 <col:36> 'int' lvalue ParmVar 0x5605d96977f0 'flags' 'int'
|     |             `-DeclRefExpr 0x5605d96bc700 <col:43> 'Args::Slot *' lvalue Var 0x5605d96bc588 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5605d96bcc30 <line:760:9, col:59>
|     | `-VarDecl 0x5605d96bc868 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5605d96bcc00 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5605d96bcb70 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5605d96bcbb8 <col:43> 'T' lvalue ParmVar 0x5605d9697908 'variable' 'T &'
|     |     `-UnaryOperator 0x5605d96bcbe8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5605d96bcbd8 <col:54> 'Args *' this
|     `-CallExpr 0x5605d96bd2b8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5605d96bcc58 <col:9> '<bound member function type>' ->postparse 0x5605d96afdc8
|       | `-CXXThisExpr 0x5605d96bcc48 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5605d96bd278 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5605d96bcc88 <col:19> 'T *' lvalue Var 0x5605d96bc868 's' 'T *'
|       | `-ParenExpr 0x5605d96bd258 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5605d96bd228 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5605d96bd210 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5605d96bd1f8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5605d96bd1d8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5605d96bd1a8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5605d93dc6a8
|       |     |       `-ImplicitCastExpr 0x5605d96bd190 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5605d96bcca8 <col:25> 'String' lvalue Var 0x5605d96bc618 'str' 'String'
|       |     |-CallExpr 0x5605d96bd000 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5605d96bce90 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5605d96bced8 <col:59> 'P' lvalue ParmVar 0x5605d9697868 'parser' 'P'
|       |     | |-DeclRefExpr 0x5605d96bcef8 <col:67> 'String' lvalue Var 0x5605d96bc618 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5605d96bcfa8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5605d96bcf38 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5605d95d17e8 0x5605d95d1408 0x5605d95d1038 0x5605d95d0c58 0x5605d95d0878 0x5605d95d04a8
|       |     | | `-DeclRefExpr 0x5605d96bcf18 <col:73> 'T *' lvalue Var 0x5605d96bc868 's' 'T *'
|       |     | `-UnaryOperator 0x5605d96bcfe8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5605d96bcfd8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5605d96bd170 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5605d96bd150 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5605d96bd120 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5605d96bd0d0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5605d96bd060 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5605d95d17e8 0x5605d95d1408 0x5605d95d1038 0x5605d95d0c58 0x5605d95d0878 0x5605d95d04a8
|       |         | | `-DeclRefExpr 0x5605d96bd040 <col:87> 'T *' lvalue Var 0x5605d96bc868 's' 'T *'
|       |         | `-DeclRefExpr 0x5605d96bd100 <col:91> 'const V' lvalue ParmVar 0x5605d96979a8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5605d96bd140 <col:98> 'bool' true
|       `-DeclRefExpr 0x5605d96bd298 <col:106> 'Args::Slot *' lvalue Var 0x5605d96bc588 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5605d9698208 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x5605d9697c18 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d9697c98 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5605d9697d18 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5605d9698168 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5605d9697de0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d9697e60 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5605d9697ed8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x5605d9697f78 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5605d9698018 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5605d96be2c8 <col:60, line:773:5>
|     |-DeclStmt 0x5605d96bd390 <line:767:9, col:26>
|     | `-VarDecl 0x5605d96bd328 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5605d96be290 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5605d96be2b0 <line:768:13, col:58>
|       | `-VarDecl 0x5605d96bd3b8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5605d96bd598 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5605d96bd568 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5605d96bd550 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5605d96bd530 <col:26, col:58> 'String' (CXXTemporary 0x5605d96bd530)
|       |           `-CXXMemberCallExpr 0x5605d96bd4c0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5605d96bd430 <col:26> '<bound member function type>' ->find 0x5605d96afbb8
|       |             | `-CXXThisExpr 0x5605d96bd420 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5605d96bd4f8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5605d96bd460 <col:31> 'const char *' lvalue ParmVar 0x5605d9697de0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5605d96bd510 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5605d96bd480 <col:40> 'int' lvalue ParmVar 0x5605d9697e60 'flags' 'int'
|       |             `-DeclRefExpr 0x5605d96bd4a0 <col:47> 'Args::Slot *' lvalue Var 0x5605d96bd328 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5605d96bd650 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5605d96bd638 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5605d96bd618 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5605d96bd5e8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5605d93dc6a8
|       |       `-ImplicitCastExpr 0x5605d96bd5d0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5605d96bd5b0 <col:20> 'String' lvalue Var 0x5605d96bd3b8 'str' 'String'
|       `-CompoundStmt 0x5605d96be268 <col:61, line:772:9>
|         |-DeclStmt 0x5605d96bd990 <line:769:13, col:66>
|         | `-VarDecl 0x5605d96bd6a8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5605d96bd960 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5605d96bd8d0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5605d96bd918 <col:49> 'T1' lvalue ParmVar 0x5605d9697f78 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5605d96bd948 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5605d96bd938 <col:61> 'Args *' this
|         |-DeclStmt 0x5605d96bdd00 <line:770:13, col:66>
|         | `-VarDecl 0x5605d96bda18 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5605d96bdcd0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5605d96bdc40 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5605d96bdc88 <col:49> 'T2' lvalue ParmVar 0x5605d9698018 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5605d96bdcb8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5605d96bdca8 <col:61> 'Args *' this
|         `-CallExpr 0x5605d96be238 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5605d96bdd28 <col:13> '<bound member function type>' ->postparse 0x5605d96afdc8
|           | `-CXXThisExpr 0x5605d96bdd18 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5605d96be1f8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5605d96bdd98 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5605d96bdd58 <col:23> 'T1 *' lvalue Var 0x5605d96bd6a8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5605d96bdd78 <col:29> 'T2 *' lvalue Var 0x5605d96bda18 's2' 'T2 *'
|           | `-CallExpr 0x5605d96be1b0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5605d96bdf80 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5605d96bdfc8 <col:63> 'P' lvalue ParmVar 0x5605d9697ed8 'parser' 'P'
|           |   |-DeclRefExpr 0x5605d96bdfe8 <col:71> 'String' lvalue Var 0x5605d96bd3b8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5605d96be098 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5605d96be028 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5605d95d17e8 0x5605d95d1408 0x5605d95d1038 0x5605d95d0c58 0x5605d95d0878 0x5605d95d04a8
|           |   | `-DeclRefExpr 0x5605d96be008 <col:77> 'T1 *' lvalue Var 0x5605d96bd6a8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5605d96be158 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5605d96be0e8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5605d95d17e8 0x5605d95d1408 0x5605d95d1038 0x5605d95d0c58 0x5605d95d0878 0x5605d95d04a8
|           |   | `-DeclRefExpr 0x5605d96be0c8 <col:82> 'T2 *' lvalue Var 0x5605d96bda18 's2' 'T2 *'
|           |   `-UnaryOperator 0x5605d96be198 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5605d96be188 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5605d96be218 <col:94> 'Args::Slot *' lvalue Var 0x5605d96bd328 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5605d96985f8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x5605d9698288 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5605d9698558 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5605d9698340 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d96983c0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5605d9698438 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5605d96be7e0 <col:67, line:780:5>
|     |-DeclStmt 0x5605d96be360 <line:777:9, col:26>
|     | `-VarDecl 0x5605d96be2f8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5605d96be7a8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5605d96be7c8 <line:778:13, col:58>
|       | `-VarDecl 0x5605d96be388 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5605d96be568 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5605d96be538 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5605d96be520 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5605d96be500 <col:26, col:58> 'String' (CXXTemporary 0x5605d96be500)
|       |           `-CXXMemberCallExpr 0x5605d96be490 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5605d96be400 <col:26> '<bound member function type>' ->find 0x5605d96afbb8
|       |             | `-CXXThisExpr 0x5605d96be3f0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5605d96be4c8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5605d96be430 <col:31> 'const char *' lvalue ParmVar 0x5605d9698340 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5605d96be4e0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5605d96be450 <col:40> 'int' lvalue ParmVar 0x5605d96983c0 'flags' 'int'
|       |             `-DeclRefExpr 0x5605d96be470 <col:47> 'Args::Slot *' lvalue Var 0x5605d96be2f8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5605d96be620 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5605d96be608 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5605d96be5e8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5605d96be5b8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5605d93dc6a8
|       |       `-ImplicitCastExpr 0x5605d96be5a0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5605d96be580 <col:20> 'String' lvalue Var 0x5605d96be388 'str' 'String'
|       `-CallExpr 0x5605d96be778 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5605d96be648 <col:13> '<bound member function type>' ->postparse 0x5605d96afdc8
|         | `-CXXThisExpr 0x5605d96be638 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5605d96be728 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5605d96be698 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5605d96be678 <col:23> 'P' lvalue ParmVar 0x5605d9698438 'parser' 'P'
|         | |-DeclRefExpr 0x5605d96be6e0 <col:36> 'String' lvalue Var 0x5605d96be388 'str' 'String'
|         | `-UnaryOperator 0x5605d96be710 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5605d96be700 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5605d96be758 <col:49> 'Args::Slot *' lvalue Var 0x5605d96be2f8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5605d9698998 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5605d9698668 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5605d96988f8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5605d9698720 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d96987a0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5605d9698818 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5605d96bf150 <col:71, line:792:5>
|     |-DeclStmt 0x5605d96be878 <line:784:9, col:26>
|     | `-VarDecl 0x5605d96be810 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5605d96be948 <line:785:9, col:29>
|     | `-VarDecl 0x5605d96be8a8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5605d96be930 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5605d96be910 <col:28> 'int' 1
|     |-WhileStmt 0x5605d96bf000 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5605d96bf020 <line:786:16, col:61>
|     | | `-VarDecl 0x5605d96be970 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5605d96beb50 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5605d96beb20 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5605d96beb08 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5605d96beae8 <col:29, col:61> 'String' (CXXTemporary 0x5605d96beae8)
|     | |           `-CXXMemberCallExpr 0x5605d96bea78 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5605d96be9e8 <col:29> '<bound member function type>' ->find 0x5605d96afbb8
|     | |             | `-CXXThisExpr 0x5605d96be9d8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5605d96beab0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5605d96bea18 <col:34> 'const char *' lvalue ParmVar 0x5605d9698720 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5605d96beac8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5605d96bea38 <col:43> 'int' lvalue ParmVar 0x5605d96987a0 'flags' 'int'
|     | |             `-DeclRefExpr 0x5605d96bea58 <col:50> 'Args::Slot *' lvalue Var 0x5605d96be810 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5605d96bec08 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5605d96bebf0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5605d96bebd0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5605d96beba0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5605d93dc6a8
|     | |       `-ImplicitCastExpr 0x5605d96beb88 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5605d96beb68 <col:23> 'String' lvalue Var 0x5605d96be970 'str' 'String'
|     | `-CompoundStmt 0x5605d96befd8 <col:64, line:790:9>
|     |   |-CallExpr 0x5605d96bed60 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5605d96bec30 <col:13> '<bound member function type>' ->postparse 0x5605d96afdc8
|     |   | | `-CXXThisExpr 0x5605d96bec20 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5605d96bed10 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5605d96bec80 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5605d96bec60 <col:23> 'P' lvalue ParmVar 0x5605d9698818 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5605d96becc8 <col:36> 'String' lvalue Var 0x5605d96be970 'str' 'String'
|     |   | | `-UnaryOperator 0x5605d96becf8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5605d96bece8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5605d96bed40 <col:49> 'Args::Slot *' lvalue Var 0x5605d96be810 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5605d96beef8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5605d96bed90 <col:13> 'int' lvalue Var 0x5605d96be8a8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5605d96beee0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5605d96beec0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5605d96bee28 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5605d96bee08 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5605d96bedf0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5605d96bedb0 <col:28> 'int' lvalue Var 0x5605d96be8a8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5605d96bedd0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5605d96beea8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5605d96bee78 <col:49> 'bool' lvalue ->_read_status 0x5605d9591940
|     |   |         `-ImplicitCastExpr 0x5605d96bee58 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5605d96bee48 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5605d96befa8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5605d96bef18 <col:13> 'int' lvalue ParmVar 0x5605d96987a0 'flags' 'int'
|     |     `-UnaryOperator 0x5605d96bef90 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5605d96bef78 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5605d96bef58 <col:23> 'const int' lvalue Var 0x5605d967e7e8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5605d96bf130 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5605d96bf068 <col:9> 'bool' lvalue ->_read_status 0x5605d9591940
|       | `-ImplicitCastExpr 0x5605d96bf048 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5605d96bf038 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5605d96bf110 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5605d96bf0f0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5605d96bf0d8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5605d96bf098 <col:25> 'int' lvalue Var 0x5605d96be8a8 'read_status' 'int'
|           `-IntegerLiteral 0x5605d96bf0b8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5605d9698e78 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5605d9698a08 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d9698a88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5605d9698dd8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5605d9698b48 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d9698bc8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5605d9698c40 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x5605d9698ce8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5605d96c00e0 <col:84, line:805:5>
|     |-DeclStmt 0x5605d96bf1f8 <line:796:9, col:26>
|     | `-VarDecl 0x5605d96bf190 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5605d96bf2c8 <line:797:9, col:29>
|     | `-VarDecl 0x5605d96bf228 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5605d96bf2b0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5605d96bf290 <col:28> 'int' 1
|     |-DeclStmt 0x5605d96bf600 <line:798:9, col:71>
|     | `-VarDecl 0x5605d96bf318 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5605d96bf5d0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5605d96bf540 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5605d96bf588 <col:55> 'T' lvalue ParmVar 0x5605d9698ce8 'variable' 'T &'
|     |     `-UnaryOperator 0x5605d96bf5b8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5605d96bf5a8 <col:66> 'Args *' this
|     |-WhileStmt 0x5605d96bff90 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5605d96bffb0 <line:799:16, col:61>
|     | | `-VarDecl 0x5605d96bf628 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5605d96bf808 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5605d96bf7d8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5605d96bf7c0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5605d96bf7a0 <col:29, col:61> 'String' (CXXTemporary 0x5605d96bf7a0)
|     | |           `-CXXMemberCallExpr 0x5605d96bf730 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5605d96bf6a0 <col:29> '<bound member function type>' ->find 0x5605d96afbb8
|     | |             | `-CXXThisExpr 0x5605d96bf690 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5605d96bf768 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5605d96bf6d0 <col:34> 'const char *' lvalue ParmVar 0x5605d9698b48 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5605d96bf780 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5605d96bf6f0 <col:43> 'int' lvalue ParmVar 0x5605d9698bc8 'flags' 'int'
|     | |             `-DeclRefExpr 0x5605d96bf710 <col:50> 'Args::Slot *' lvalue Var 0x5605d96bf190 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5605d96bf8c0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5605d96bf8a8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5605d96bf888 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5605d96bf858 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5605d93dc6a8
|     | |       `-ImplicitCastExpr 0x5605d96bf840 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5605d96bf820 <col:23> 'String' lvalue Var 0x5605d96bf628 'str' 'String'
|     | `-CompoundStmt 0x5605d96bff68 <col:64, line:803:9>
|     |   |-CallExpr 0x5605d96bfcf0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5605d96bf8e8 <col:13> '<bound member function type>' ->postparse 0x5605d96afdc8
|     |   | | `-CXXThisExpr 0x5605d96bf8d8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5605d96bfcb0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5605d96bf918 <col:23> 'T *' lvalue Var 0x5605d96bf318 's' 'T *'
|     |   | | `-CallExpr 0x5605d96bfc70 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5605d96bfb00 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5605d96bfb48 <col:56> 'P' lvalue ParmVar 0x5605d9698c40 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5605d96bfb68 <col:64> 'String' lvalue Var 0x5605d96bf628 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5605d96bfc18 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5605d96bfba8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5605d95d17e8 0x5605d95d1408 0x5605d95d1038 0x5605d95d0c58 0x5605d95d0878 0x5605d95d04a8
|     |   | |   | `-DeclRefExpr 0x5605d96bfb88 <col:70> 'T *' lvalue Var 0x5605d96bf318 's' 'T *'
|     |   | |   `-UnaryOperator 0x5605d96bfc58 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5605d96bfc48 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5605d96bfcd0 <col:81> 'Args::Slot *' lvalue Var 0x5605d96bf190 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5605d96bfe88 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5605d96bfd20 <col:13> 'int' lvalue Var 0x5605d96bf228 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5605d96bfe70 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5605d96bfe50 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5605d96bfdb8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5605d96bfd98 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5605d96bfd80 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5605d96bfd40 <col:28> 'int' lvalue Var 0x5605d96bf228 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5605d96bfd60 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5605d96bfe38 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5605d96bfe08 <col:49> 'bool' lvalue ->_read_status 0x5605d9591940
|     |   |         `-ImplicitCastExpr 0x5605d96bfde8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5605d96bfdd8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5605d96bff38 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5605d96bfea8 <col:13> 'int' lvalue ParmVar 0x5605d9698bc8 'flags' 'int'
|     |     `-UnaryOperator 0x5605d96bff20 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5605d96bff08 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5605d96bfee8 <col:23> 'const int' lvalue Var 0x5605d967e7e8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5605d96c00c0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5605d96bfff8 <col:9> 'bool' lvalue ->_read_status 0x5605d9591940
|       | `-ImplicitCastExpr 0x5605d96bffd8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5605d96bffc8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5605d96c00a0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5605d96c0080 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5605d96c0068 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5605d96c0028 <col:25> 'int' lvalue Var 0x5605d96bf228 'read_status' 'int'
|           `-IntegerLiteral 0x5605d96c0048 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5605d9699458 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5605d9698ef0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605d9698f68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5605d96993b8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5605d9699028 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605d96990a8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5605d9699120 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5605d9699270 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5605d96c0ee8 <col:87, line:821:5>
|     |-DeclStmt 0x5605d96c0190 <line:809:9, col:26>
|     | `-VarDecl 0x5605d96c0128 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5605d96c0260 <line:810:9, col:29>
|     | `-VarDecl 0x5605d96c01c0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5605d96c0248 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5605d96c0228 <col:28> 'int' 1
|     |-DeclStmt 0x5605d96c04a8 <line:811:9, col:38>
|     | `-VarDecl 0x5605d96c0390 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5605d96c0480 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5605d96c0408 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5605d96c0460 <col:29> 'Vector<T>' lvalue ParmVar 0x5605d9699270 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5605d96c0d98 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5605d96c0db8 <line:812:16, col:61>
|     | | `-VarDecl 0x5605d96c04d0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5605d96c06b0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5605d96c0680 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5605d96c0668 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5605d96c0648 <col:29, col:61> 'String' (CXXTemporary 0x5605d96c0648)
|     | |           `-CXXMemberCallExpr 0x5605d96c05d8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5605d96c0548 <col:29> '<bound member function type>' ->find 0x5605d96afbb8
|     | |             | `-CXXThisExpr 0x5605d96c0538 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5605d96c0610 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5605d96c0578 <col:34> 'const char *' lvalue ParmVar 0x5605d9699028 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5605d96c0628 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5605d96c0598 <col:43> 'int' lvalue ParmVar 0x5605d96990a8 'flags' 'int'
|     | |             `-DeclRefExpr 0x5605d96c05b8 <col:50> 'Args::Slot *' lvalue Var 0x5605d96c0128 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5605d96c0768 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5605d96c0750 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5605d96c0730 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5605d96c0700 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5605d93dc6a8
|     | |       `-ImplicitCastExpr 0x5605d96c06e8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5605d96c06c8 <col:23> 'String' lvalue Var 0x5605d96c04d0 'str' 'String'
|     | `-CompoundStmt 0x5605d96c0d60 <col:64, line:819:9>
|     |   |-DeclStmt 0x5605d96c0828 <line:813:13, col:23>
|     |   | `-VarDecl 0x5605d96c0790 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5605d96c0808 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5605d96c09a8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5605d96c0850 <col:13> '<bound member function type>' ->postparse 0x5605d96afdc8
|     |   | | `-CXXThisExpr 0x5605d96c0840 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5605d96c0950 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5605d96c08a0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5605d96c0880 <col:23> 'P' lvalue ParmVar 0x5605d9699120 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5605d96c08e8 <col:36> 'String' lvalue Var 0x5605d96c04d0 'str' 'String'
|     |   | | |-DeclRefExpr 0x5605d96c0908 <col:41> 'T' lvalue Var 0x5605d96c0790 'sx' 'T'
|     |   | | `-UnaryOperator 0x5605d96c0938 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5605d96c0928 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5605d96c0988 <col:53> 'Args::Slot *' lvalue Var 0x5605d96c0128 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5605d96c0b00 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5605d96c0a38 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5605d96c0a08 <col:17> 'bool' lvalue ->_read_status 0x5605d9591940
|     |   | |   `-ImplicitCastExpr 0x5605d96c09e8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5605d96c09d8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5605d96c0ad8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5605d96c0a70 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5605d96c0a50 <col:17> 'Vector<T> *' lvalue Var 0x5605d96c0390 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5605d96c0ab8 <col:30> 'T' lvalue Var 0x5605d96c0790 'sx' 'T'
|     |   |-BinaryOperator 0x5605d96c0c80 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5605d96c0b18 <col:13> 'int' lvalue Var 0x5605d96c01c0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5605d96c0c68 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5605d96c0c48 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5605d96c0bb0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5605d96c0b90 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5605d96c0b78 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5605d96c0b38 <col:28> 'int' lvalue Var 0x5605d96c01c0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5605d96c0b58 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5605d96c0c30 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5605d96c0c00 <col:49> 'bool' lvalue ->_read_status 0x5605d9591940
|     |   |         `-ImplicitCastExpr 0x5605d96c0be0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5605d96c0bd0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5605d96c0d30 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5605d96c0ca0 <col:13> 'int' lvalue ParmVar 0x5605d96990a8 'flags' 'int'
|     |     `-UnaryOperator 0x5605d96c0d18 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5605d96c0d00 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5605d96c0ce0 <col:23> 'const int' lvalue Var 0x5605d967e7e8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5605d96c0ec8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5605d96c0e00 <col:9> 'bool' lvalue ->_read_status 0x5605d9591940
|       | `-ImplicitCastExpr 0x5605d96c0de0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5605d96c0dd0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5605d96c0ea8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5605d96c0e88 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5605d96c0e70 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5605d96c0e30 <col:25> 'int' lvalue Var 0x5605d96c01c0 'read_status' 'int'
|           `-IntegerLiteral 0x5605d96c0e50 <col:40> 'int' 1
|-AccessSpecDecl 0x5605d96994d0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5605d96994f8 prev 0x5605d967cae8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5605d96995f0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x5605d96996e0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5605d96c0f20 <col:16, line:828:9>
| |-CXXDestructorDecl 0x5605d96997d0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5605d96c0f30 <col:25, line:830:9>
| |-CXXMethodDecl 0x5605d96998d0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5605d9699980 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5605d9699a28 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5605d9699a28
| | `-ParmVarDecl 0x5605d9699b38 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5605d969a2f8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5605d969a2f8
|   `-ParmVarDecl 0x5605d969a408 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5605d9699ba8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5605d9699d08 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5605d9699f00 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x5605d9699db0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5605d9699e28 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5605d96c1110 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x5605d969a1b8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5605d96c0f80 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5605d96c0f40 <col:20> 'void *' lvalue ParmVar 0x5605d9699db0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5605d969a220 '_slot' 'char *'
| | | `-CXXNewExpr 0x5605d96c1008 <col:32, col:45> 'char *' array Function 0x5605d9200328 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5605d96c0ff0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5605d96c0fc0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5605d9699e28 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5605d969a280 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5605d96c10d0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5605d96c1090 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5605d9699e28 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5605d96c1190 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5605d969a000 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x5605d96997d0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5605d96c1218 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5605d96c11f8 <line:840:13, col:22> 'void' array Function 0x5605d9200688 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5605d96c11e0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5605d96c11b0 <col:22> 'char *' lvalue ->_slot 0x5605d969a220
| |         `-CXXThisExpr 0x5605d96c11a0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5605d969a100 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x5605d96998d0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5605d96c1408 <col:22, line:844:9>
| |   `-CallExpr 0x5605d96c1370 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5605d96c1358 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5605d96c1338 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5605d930c108 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5605d96c13a8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5605d96c1288 <col:20> 'void *' lvalue ->_ptr 0x5605d969a1b8
| |     |   `-CXXThisExpr 0x5605d96c1278 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5605d96c13d8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5605d96c13c0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5605d96c12c8 <col:26> 'char *' lvalue ->_slot 0x5605d969a220
| |     |     `-CXXThisExpr 0x5605d96c12b8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5605d96c13f0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5605d96c1308 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5605d969a280
| |         `-CXXThisExpr 0x5605d96c12f8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x5605d969a1b8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5605d969a220 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5605d969a280 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x5605d969a478 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5605d969a478
| | `-ParmVarDecl 0x5605d969a588 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5605d969a628 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5605d969a628
|   `-ParmVarDecl 0x5605d969a738 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x5605d969a8d8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x5605d969a7a8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5605d969a848 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5605d969ab70 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5605d969ad68 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5605d969ac38 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5605d969aee8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5605d96c1440 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5605d96c1420 <col:20> 'T *' lvalue ParmVar 0x5605d969ac38 'ptr' 'T *'
|   | `-CompoundStmt 0x5605d96c1490 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5605d969ae38 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x5605d96998d0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5605d96c1640 <col:22, line:857:9>
|   |   `-CallExpr 0x5605d96c1610 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5605d96c14a0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5605d93c4838 0x5605d936eb68
|   |     |-CXXOperatorCallExpr 0x5605d96c15a0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5605d96c1530 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5605d95d17e8 0x5605d95d1408 0x5605d95d1038 0x5605d95d0c58 0x5605d95d0878 0x5605d95d04a8
|   |     | `-MemberExpr 0x5605d96c1500 <col:29> 'T *' lvalue ->_ptr 0x5605d969aee8
|   |     |   `-CXXThisExpr 0x5605d96c14f0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5605d96c15e0 <col:35> 'T' lvalue ->_slot 0x5605d969af48
|   |       `-CXXThisExpr 0x5605d96c15d0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5605d969aee8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5605d969af48 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5605d969afb0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5605d969b0b0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5605d969b100 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5605d969b090 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5605d969b070 <col:31> 'int' 48
|-FieldDecl 0x5605d969b128 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5605d969b188 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5605d969b1e8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5605d969b320 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5605d96af460 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5605d96af4c0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5605d96af570 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5605d96af798 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5605d96af6a0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5605d96af8e8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5605d96af858 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5605d96afbb8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5605d96af9a8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5605d96afa28 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5605d96afad0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5605d96afdc8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5605d96afc80 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5605d96afcf8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5605d96afe98 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5605d96b18d0 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5605d96aff50 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5605d96b1c68 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5605d96b1990 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5605d96b1a10 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5605d96b1ac0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5605d96b1b78 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5605d96b1e90 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5605d96b1d40 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5605d96b1db8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5605d96b21a8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5605d96b1f40 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5605d96b2108 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5605d96b2018 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605d93cd560 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5605d93cd678 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5605d93cd708 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5605d93cd7d8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5605d93cd8c0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5605d93cdad8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5605d93cd980 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5605d93cdc88 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5605d93cdb90 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5605d93cddd0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5605d93cdd40 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5605d93cdf18 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5605d93cde88 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5605d93ce060 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5605d93cdfd0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5605d93ce128 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5605d93ce270 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5605d93ce1e0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5605d93ce338 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5605d93ce480 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5605d93ce3f0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5605d93ce5f8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5605d93ce538 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5605d93ce740 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5605d93ce6b0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5605d93ce808 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5605d93ce9c8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5605d93ce8b8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5605d93ce930 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5605d93cec18 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5605d93cea88 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5605d93ceb00 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5605d93cecc8 <col:86> "" ""
|-CXXMethodDecl 0x5605d93cef38 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5605d93ceda8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5605d93cee20 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5605d93cf0e8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5605d93ceff8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5605d93cf298 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5605d93cf1a0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5605d93cf568 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5605d93cf350 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5605d93cf3c8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5605d93cf440 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5605d93cf848 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5605d93cf630 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5605d93cf6a8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5605d93cf720 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5605d93cf900 <col:115> "" ""
|-AccessSpecDecl 0x5605d93cf970 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5605d93cf9a8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5605d93cfeb0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5605d93cfeb0
| `-ParmVarDecl 0x5605d93cffb8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5605d93d0058 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5605d93d0058
| `-ParmVarDecl 0x5605d93d0168 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5605d9405798 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5605d95f85a0 <col:7>
|-CXXConstructorDecl 0x5605d9405870 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5605d9405870
| `-ParmVarDecl 0x5605d9405988 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5605d94059f8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5605d94059f8
| `-ParmVarDecl 0x5605d9405b08 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5605d95fafa0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605d95e7148 prev 0x5605d95dc350 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5605d95e7240 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5605d95e7330 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5605d95e7458 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5605d95e75d8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5605d95e7758 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5605d95e78d8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5605d95f8708 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5605d95f8f78 <col:11>
|-CXXDestructorDecl 0x5605d95f87e0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5605d95f8918 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5605d95f8918
| `-ParmVarDecl 0x5605d95f8a28 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5605d95f8ac8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5605d95f8ac8
| `-ParmVarDecl 0x5605d95f8bd8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5605d95fb998 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5605d95fbaa8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5605d95fbd28 <col:11>
|   `-ReturnStmt 0x5605d95fbd18 <col:11>
|     `-UnaryOperator 0x5605d95fbd00 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5605d95fbcf0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5605d95fbb18 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5605d95fbb18
  `-ParmVarDecl 0x5605d95fbc28 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605d95e7940 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5605d95e7a58 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5605d95e7af8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5605d95e7b60 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5605d95e7bc8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5605d95e7c30 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5605d95e7c90 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5605d95e7d50 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5605d95e7db0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5605d95e7e10 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5605d95f8618 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5605d95e7af8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5605d95f8f88 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5605d95f8fe0 <col:12>
|-CXXConstructorDecl 0x5605d95f8c48 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5605d95f8c48
| `-ParmVarDecl 0x5605d95f8d58 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5605d95f8df8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5605d95f8df8
| `-ParmVarDecl 0x5605d95f8f08 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5605d95fb080 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605d95d5a60 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5605d95d5b78 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5605d95d5c08 <col:16, col:22> col:16 public
|-EnumDecl 0x5605d95d5c30 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5605d95d5d30 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5605d95d5e10 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d95d5d10 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5605d95d5cf0 <col:21> 'int' 28
| `-EnumConstantDecl 0x5605d95d5dc0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5605d95d5e28 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5605d95d5da0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5605d95d5d80 <col:22> 'int' 64
|-CXXMethodDecl 0x5605d95d6168 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5605d95d5e50 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5605d95d5ed0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5605d95d5f48 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5605d95d5fc0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5605d95d6228 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5605d95d6428 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5605d95d62a0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5605d95d6318 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5605d95d64d8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5605d95d6638 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5605d95d6548 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5605d95d66e0 <col:72> warn_unused_result ""
|-TypedefDecl 0x5605d95d6a40 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5605d95d69d0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5605d95d6970 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5605d95d6930 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5605d90ad4e0 'void'
|       |-PointerType 0x5605d9355e00 'unsigned char *'
|       | `-BuiltinType 0x5605d90ad5e0 'unsigned char'
|       |-TypedefType 0x5605d91523d0 'size_t' sugar
|       | |-Typedef 0x5605d911dbe0 'size_t'
|       | `-BuiltinType 0x5605d90ad640 'unsigned long'
|       `-PointerType 0x5605d90adce0 'void *'
|         `-BuiltinType 0x5605d90ad4e0 'void'
|-CXXMethodDecl 0x5605d95d6eb8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5605d95d6ab0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5605d95d6b28 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5605d95d6bc0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5605d95d6c40 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5605d95f15b0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5605d95f1598 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5605d95f1560 <col:58> 'int' 0
| |-ParmVarDecl 0x5605d95d6cc0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5605d95f15d8 <col:76> 'int' 0
| |-ParmVarDecl 0x5605d95d6d40 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5605d95f15f8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5605d95d6f88 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5605d95d7008 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5605d95d70c8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5605d95d7168 <col:20>
| `-OptimizeNoneAttr 0x5605d95d71c0 <col:30>
|-CXXMethodDecl 0x5605d95d7238 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5605d95d72d8 <col:20>
| `-OptimizeNoneAttr 0x5605d95d7330 <col:30>
|-CXXMethodDecl 0x5605d95d73a8 <line:76:5, col:55> col:13 used clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5605d95d7448 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5605d95d74f8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5605d95d7598 <col:20>
| |-OptimizeNoneAttr 0x5605d95d75f0 <col:30>
| `-WarnUnusedResultAttr 0x5605d95d7618 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5605d95d7670 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5605d95d7710 <col:20>
| `-OptimizeNoneAttr 0x5605d95d7768 <col:30>
|-CXXMethodDecl 0x5605d95d77b8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5605d95d7858 <col:20>
| `-OptimizeNoneAttr 0x5605d95d78b0 <col:30>
|-CXXMethodDecl 0x5605d95d78f8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x5605d95d7998 <col:20>
| `-OptimizeNoneAttr 0x5605d95d79f0 <col:30>
|-CXXMethodDecl 0x5605d95d7a38 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5605d95d7af8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5605d95d7bc0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5605d95d7c88 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5605d95d7d48 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5605d95d7e68 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5605d95f16c0 <col:54, line:99:5>
|   `-ReturnStmt 0x5605d95f16b0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5605d95f1698 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5605d95f1668 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5605d95e8148
|         `-CXXThisExpr 0x5605d95f1658 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5605d95d8008 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5605d95d7f18 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5605d95f1770 <col:67, line:103:5>
|   `-BinaryOperator 0x5605d95f1750 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5605d95f16e8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5605d95e8148
|     | `-CXXThisExpr 0x5605d95f16d8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5605d95f1738 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5605d95f1718 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5605d95d7f18 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5605d95d8100 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5605d95f17f0 <col:33, line:107:5>
|   `-ReturnStmt 0x5605d95f17e0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5605d95f17c8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5605d95f1798 <col:16> 'void *' lvalue ->_destructor_argument 0x5605d95e81b0
|         `-CXXThisExpr 0x5605d95f1788 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5605d95d81c0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5605d95f1e20 <col:25, line:113:5>
|   |-ParenExpr 0x5605d95f1b68 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5605d95f1b38 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5605d95f18a8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5605d95f1880 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5605d95f1848 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5605d95f1818 <col:24> '<bound member function type>' ->shared 0x5605d95d7238
|   |   |       `-ImplicitCastExpr 0x5605d95f1868 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5605d95f1808 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5605d95f1908 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5605d95f18e8 <col:42> 'int' 0
|   |   `-CallExpr 0x5605d95f1a98 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5605d95f1a80 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5605d95f1a60 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605d9149130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5605d95f1ad8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f1978 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5605d95f1af0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f19a0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5605d95f1b08 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5605d95f19d8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5605d95f1b20 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5605d95f1a48 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5605d95f1a30 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5605d95f19f8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5605d95f1d68 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5605d95f1b98 <col:2> 'unsigned char *' lvalue ->_head 0x5605d95e7f50
|   | | `-CXXThisExpr 0x5605d95f1b88 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5605d95f1d50 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5605d95f1d30 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5605d95f1bd8 <col:10> 'unsigned char *' lvalue ->_data 0x5605d95e7fb8
|   |     | `-CXXThisExpr 0x5605d95f1bc8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5605d95f1d18 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5605d95f1cf8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5605d95f1c18 <col:18> 'unsigned char *' lvalue ->_tail 0x5605d95e8020
|   |         | `-CXXThisExpr 0x5605d95f1c08 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5605d95f1ce0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5605d95f1cc0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5605d95f1c58 <col:26> 'unsigned char *' lvalue ->_end 0x5605d95e8088
|   |             | `-CXXThisExpr 0x5605d95f1c48 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5605d95f1ca8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5605d95f1c88 <col:33> 'int' 0
|   `-BinaryOperator 0x5605d95f1e00 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5605d95f1d98 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5605d95e8148
|     | `-CXXThisExpr 0x5605d95f1d88 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5605d95f1de8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5605d95f1dc8 <col:16> 'int' 0
|-CXXMethodDecl 0x5605d95d8300 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5605d95d8270 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5605d95d83a8 <col:20>
| |-OptimizeNoneAttr 0x5605d95d8400 <col:30>
| `-WarnUnusedResultAttr 0x5605d95d8428 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5605d95d84f8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5605d95d8468 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5605d95d85a0 <col:20>
| |-OptimizeNoneAttr 0x5605d95d85f8 <col:30>
| `-WarnUnusedResultAttr 0x5605d95d8620 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5605d95d8758 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5605d95d8660 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5605d95d8800 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5605d95d8900 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5605d95d8870 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5605d95d89a8 <col:20>
| `-OptimizeNoneAttr 0x5605d95d8a00 <col:30>
|-CXXMethodDecl 0x5605d95d8ac8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5605d95d8a38 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5605d95d8b70 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5605d95d8c70 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5605d95d8be0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5605d95d8d18 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5605d95d8e18 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5605d95d8d88 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5605d95d8ec0 <col:20>
| `-OptimizeNoneAttr 0x5605d95d8f18 <col:30>
|-CXXMethodDecl 0x5605d95d90a8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5605d95d8f58 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5605d95d8fd0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5605d95f1618 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5605d95d9158 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5605d95d9358 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5605d95d91d0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5605d95d9248 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5605d95d9568 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5605d95d9418 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5605d95d9490 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5605d95d9778 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5605d95d9628 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5605d95d96a8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5605d95f1628 <col:39> 'int' 0
|-CXXMethodDecl 0x5605d95d9848 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5605d95d9910 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5605d95d99d8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5605d95d9a98 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5605d95d9b60 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5605d95d9ca8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5605d95d9c18 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5605d95d9e78 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5605d95d9d68 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5605d95d9de0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5605d95d9f48 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5605d95da008 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5605d95da0a8 <col:20>
| `-OptimizeNoneAttr 0x5605d95da100 <col:30>
|-CXXMethodDecl 0x5605d95da150 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5605d95da1f0 <col:20>
| `-OptimizeNoneAttr 0x5605d95da248 <col:30>
|-CXXMethodDecl 0x5605d95da298 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5605d95da358 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5605d95da420 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5605d95da4c0 <col:20>
| `-OptimizeNoneAttr 0x5605d95da518 <col:30>
|-CXXMethodDecl 0x5605d95da668 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5605d95da558 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5605d95da5d0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5605d95da7b8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5605d95da728 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5605d95da890 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5605d95da950 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5605d95da9f0 <col:20>
| `-OptimizeNoneAttr 0x5605d95daa48 <col:30>
|-CXXMethodDecl 0x5605d95daa98 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5605d95dab38 <col:20>
| `-OptimizeNoneAttr 0x5605d95dab90 <col:30>
|-CXXMethodDecl 0x5605d95dabe0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5605d95daca8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5605d95dad48 <col:20>
| `-OptimizeNoneAttr 0x5605d95dada0 <col:30>
|-CXXMethodDecl 0x5605d95dade8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5605d95daf08 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5605d95db078 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5605d95dafb8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5605d95db168 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5605d95db208 <col:20>
| `-OptimizeNoneAttr 0x5605d95db260 <col:30>
|-CXXMethodDecl 0x5605d95db2b0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5605d95db370 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5605d95db5a8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5605d95db420 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5605d95db498 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5605d95db658 <col:20>
| `-OptimizeNoneAttr 0x5605d95db6b0 <col:30>
|-CXXMethodDecl 0x5605d95db758 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5605d95db7f8 <col:20>
| `-OptimizeNoneAttr 0x5605d95db850 <col:30>
|-CXXMethodDecl 0x5605d95db8a0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5605d95db940 <col:20>
| `-OptimizeNoneAttr 0x5605d95db998 <col:30>
|-CXXMethodDecl 0x5605d95db9e0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5605d95dba80 <col:20>
| `-OptimizeNoneAttr 0x5605d95dbad8 <col:30>
|-CXXMethodDecl 0x5605d95dbbd8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5605d95dbb10 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5605d95dbc80 <col:20>
| `-OptimizeNoneAttr 0x5605d95dbcd8 <col:30>
|-CXXMethodDecl 0x5605d95dbe98 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5605d95dbd10 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5605d95dbd88 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5605d95dbf48 <col:20>
| `-OptimizeNoneAttr 0x5605d95dbfa0 <col:30>
|-CXXMethodDecl 0x5605d95dc048 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5605d95dc168 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5605d95dc288 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5605d95dc328 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5605d95dc350 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5605d95dc478 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5605d95dc518 <col:20>
| `-OptimizeNoneAttr 0x5605d95dc570 <col:30>
|-CXXMethodDecl 0x5605d95dc618 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5605d95dc6b8 <col:20>
| `-OptimizeNoneAttr 0x5605d95dc710 <col:30>
|-AccessSpecDecl 0x5605d95dc738 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5605d95dc760 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5605d95dc860 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5605d95dc8b0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5605d95dc840 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5605d95dc820 <col:14> 'int' 48
|-CXXMethodDecl 0x5605d95dc918 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5605d95dc9b8 <col:20>
| `-OptimizeNoneAttr 0x5605d95dca10 <col:30>
|-CXXMethodDecl 0x5605d95dca88 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5605d95dcb28 <col:20>
| `-OptimizeNoneAttr 0x5605d95dcb80 <col:30>
|-CXXMethodDecl 0x5605d95dcc48 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5605d95dcbb8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5605d95dcde8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5605d95dcf88 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5605d95dce98 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5605d95dd030 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5605d95dd130 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5605d95dd4e0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d95dd110 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5605d95dd0f0 <col:9> 'int' 0
| |-EnumConstantDecl 0x5605d95dd1c0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5605d95dd4f8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d95dd1a0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5605d95dd180 <col:14> 'int' 1
| |-EnumConstantDecl 0x5605d95dd250 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5605d95dd510 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d95dd230 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5605d95dd210 <col:14> 'int' 2
| |-EnumConstantDecl 0x5605d95dd2e0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5605d95dd528 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d95dd2c0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5605d95dd2a0 <col:14> 'int' 3
| |-EnumConstantDecl 0x5605d95dd370 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5605d95dd540 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d95dd350 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5605d95dd330 <col:13> 'int' 4
| |-EnumConstantDecl 0x5605d95dd400 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5605d95dd558 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d95dd3e0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5605d95dd3c0 <col:13> 'int' 5
| `-EnumConstantDecl 0x5605d95dd490 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5605d95dd570 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5605d95dd470 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5605d95dd450 <col:14> 'int' 6
|-CXXMethodDecl 0x5605d95dd5d8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5605d95dd678 <col:20>
| `-OptimizeNoneAttr 0x5605d95dd6d0 <col:30>
|-CXXMethodDecl 0x5605d95dd7c8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5605d95dd708 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5605d95dd870 <col:20>
| `-OptimizeNoneAttr 0x5605d95dd8c8 <col:30>
|-CXXMethodDecl 0x5605d95dd938 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5605d95dda60 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5605d95ddbd8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5605d95ddb10 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5605d95ddca0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5605d95ddd68 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5605d95ddea8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5605d95dde18 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5605d95ddf50 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5605d95de050 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5605d95de250 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d95de030 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5605d95de010 <col:23> 'int' 0
| |-EnumConstantDecl 0x5605d95de0e0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5605d95de268 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d95de0c0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5605d95de0a0 <col:45> 'int' 4
| |-EnumConstantDecl 0x5605d95de170 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5605d95de280 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d95de150 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5605d95de130 <col:24> 'int' 0
| `-EnumConstantDecl 0x5605d95de200 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5605d95de298 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5605d95de1e0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5605d95de1c0 <col:47> 'int' 16
|-CXXMethodDecl 0x5605d95de2f8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5605d95de468 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5605d95de3a8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5605d95de510 <col:20>
| `-OptimizeNoneAttr 0x5605d95de568 <col:30>
|-CXXMethodDecl 0x5605d95de5b8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5605d95f1f40 <col:18, col:36>
|   `-ReturnStmt 0x5605d95f1f30 <col:20, col:33>
|     `-ImplicitCastExpr 0x5605d95f1f18 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5605d95f1ef8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5605d95f1ec8 <col:27> '<bound member function type>' ->xanno 0x5605d95dc618
|           `-CXXThisExpr 0x5605d95f1eb8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5605d95de6b0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5605d95f2050 <col:30, col:48>
|   `-ReturnStmt 0x5605d95f2040 <col:32, col:45>
|     `-ImplicitCastExpr 0x5605d95f2028 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5605d95f2008 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5605d95f1fd8 <col:39> '<bound member function type>' ->xanno 0x5605d95dc478
|           `-CXXThisExpr 0x5605d95f1fc8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5605d95de798 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5605d95f21e8 <col:24, col:50>
|   `-ReturnStmt 0x5605d95f21d8 <col:26, col:47>
|     `-UnaryOperator 0x5605d95f21c0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5605d95f21a0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5605d95f2188 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5605d95f2138 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5605d95e7458
|         |   `-CXXMemberCallExpr 0x5605d95f2118 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5605d95f20e8 <col:34> '<bound member function type>' ->xanno 0x5605d95dc618
|         |       `-CXXThisExpr 0x5605d95f20d8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5605d95f2168 <col:46> 'int' 0
|-CXXMethodDecl 0x5605d95de8a0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5605d95f23b8 <col:36, col:62>
|   `-ReturnStmt 0x5605d95f23a8 <col:38, col:59>
|     `-UnaryOperator 0x5605d95f2390 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5605d95f2370 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5605d95f2358 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5605d95f22d0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5605d95e7458
|         |   `-CXXMemberCallExpr 0x5605d95f22b0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5605d95f2280 <col:46> '<bound member function type>' ->xanno 0x5605d95dc478
|         |       `-CXXThisExpr 0x5605d95f2270 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5605d95f2300 <col:58> 'int' 0
|-CXXMethodDecl 0x5605d95de9b8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5605d95f2550 <col:26, col:53>
|   `-ReturnStmt 0x5605d95f2540 <col:28, col:50>
|     `-UnaryOperator 0x5605d95f2528 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5605d95f2508 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5605d95f24f0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5605d95f24a0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5605d95e7758
|         |   `-CXXMemberCallExpr 0x5605d95f2480 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5605d95f2450 <col:36> '<bound member function type>' ->xanno 0x5605d95dc618
|         |       `-CXXThisExpr 0x5605d95f2440 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5605d95f24d0 <col:49> 'int' 0
|-CXXMethodDecl 0x5605d95dead8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5605d95f2728 <col:38, col:65>
|   `-ReturnStmt 0x5605d95f2718 <col:40, col:62>
|     `-UnaryOperator 0x5605d95f2700 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5605d95f26e0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5605d95f26c8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5605d95f2638 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5605d95e7758
|         |   `-CXXMemberCallExpr 0x5605d95f2618 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5605d95f25e8 <col:48> '<bound member function type>' ->xanno 0x5605d95dc478
|         |       `-CXXThisExpr 0x5605d95f25d8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5605d95f2668 <col:61> 'int' 0
|-CXXMethodDecl 0x5605d95dec88 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5605d95deb90 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5605d95f2df8 <col:34, line:463:5>
|   |-ParenExpr 0x5605d95f2c40 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5605d95f2c10 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5605d95f2878 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5605d95f2848 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5605d95f2798 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5605d95f2780 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5605d95f2740 <col:23> 'int' lvalue ParmVar 0x5605d95deb90 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5605d95f2760 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5605d95f2828 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5605d95f27f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5605d95f27b8 <col:33> 'int' lvalue ParmVar 0x5605d95deb90 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5605d95f2810 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5605d95f27d8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5605d95dc860 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5605d95f28d8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5605d95f28b8 <col:56> 'int' 0
|   |   `-CallExpr 0x5605d95f2b70 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5605d95f2b58 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5605d95f2b38 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605d9149130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5605d95f2bb0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f29c8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5605d95f2bc8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f29f8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5605d95f2be0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5605d95f2a30 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5605d95f2bf8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5605d95f2b20 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5605d95f2b08 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5605d95f2ac8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5605d95f2de8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5605d95f2dd0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5605d95f2db0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5605d95f2d80 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5605d95f2d30 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5605d95e7458
|         |   `-CXXMemberCallExpr 0x5605d95f2d10 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5605d95f2ce0 <col:9> '<bound member function type>' ->xanno 0x5605d95dc478
|         |       `-CXXThisExpr 0x5605d95f2cd0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5605d95f2d98 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5605d95f2d60 <col:21> 'int' lvalue ParmVar 0x5605d95deb90 'i' 'int'
|-CXXMethodDecl 0x5605d95deed8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5605d95ded48 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5605d95dedc0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5605d95f3488 <col:40, line:472:5>
|   |-ParenExpr 0x5605d95f32a0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5605d95f3270 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5605d95f2f50 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5605d95f2f20 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5605d95f2e70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5605d95f2e58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5605d95f2e18 <col:23> 'int' lvalue ParmVar 0x5605d95ded48 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5605d95f2e38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5605d95f2f00 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5605d95f2ed0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5605d95f2e90 <col:33> 'int' lvalue ParmVar 0x5605d95ded48 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5605d95f2ee8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5605d95f2eb0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5605d95dc860 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5605d95f2fb0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5605d95f2f90 <col:56> 'int' 0
|   |   `-CallExpr 0x5605d95f31d0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5605d95f31b8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5605d95f3198 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605d9149130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5605d95f3210 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f3020 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5605d95f3228 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f3050 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5605d95f3240 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5605d95f3088 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5605d95f3258 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5605d95f3180 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5605d95f3168 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5605d95f3128 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5605d95f3468 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5605d95f3410 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5605d95f33e0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5605d95f3390 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5605d95e7458
|     | |   `-CXXMemberCallExpr 0x5605d95f3370 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5605d95f3340 <col:2> '<bound member function type>' ->xanno 0x5605d95dc618
|     | |       `-CXXThisExpr 0x5605d95f3330 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5605d95f33f8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5605d95f33c0 <col:14> 'int' lvalue ParmVar 0x5605d95ded48 'i' 'int'
|     `-ImplicitCastExpr 0x5605d95f3450 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5605d95f3430 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5605d95dedc0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5605d95df098 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5605d95defa0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5605d95f3c08 <col:36, line:485:5>
|   |-ParenExpr 0x5605d95f3970 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5605d95f3940 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5605d95f3620 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5605d95f35f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5605d95f3500 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5605d95f34e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5605d95f34a8 <col:23> 'int' lvalue ParmVar 0x5605d95defa0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5605d95f34c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5605d95f35d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5605d95f35b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5605d95f3520 <col:33> 'int' lvalue ParmVar 0x5605d95defa0 'i' 'int'
|   |   |     `-BinaryOperator 0x5605d95f3598 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5605d95f3580 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5605d95f3540 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5605d95dc860 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5605d95f3560 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5605d95f3680 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5605d95f3660 <col:60> 'int' 0
|   |   `-CallExpr 0x5605d95f38a0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5605d95f3888 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5605d95f3868 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605d9149130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5605d95f38e0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f36f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5605d95f38f8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f3728 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5605d95f3910 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5605d95f3760 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5605d95f3928 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5605d95f3850 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5605d95f3838 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5605d95f37f8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5605d95f3bf8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5605d95f3be0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5605d95f3bc8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5605d95f3b98 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5605d95f3b38 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5605d95f3b08 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5605d95f3a80 <col:61, col:70> 'char const[48]' lvalue ->c 0x5605d95e7330
|             |   `-CXXMemberCallExpr 0x5605d95f3a60 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5605d95f3a30 <col:61> '<bound member function type>' ->xanno 0x5605d95dc478
|             |       `-CXXThisExpr 0x5605d95f3a20 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5605d95f3b20 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5605d95f3ab0 <col:74> 'int' lvalue ParmVar 0x5605d95defa0 'i' 'int'
|-CXXMethodDecl 0x5605d95df2e8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5605d95df158 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5605d95df1d0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5605d95f4358 <col:42, line:500:5>
|   |-ParenExpr 0x5605d95f40f0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5605d95f40c0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5605d95f3da0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5605d95f3d70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5605d95f3c80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5605d95f3c68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5605d95f3c28 <col:23> 'int' lvalue ParmVar 0x5605d95df158 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5605d95f3c48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5605d95f3d50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5605d95f3d38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5605d95f3ca0 <col:33> 'int' lvalue ParmVar 0x5605d95df158 'i' 'int'
|   |   |     `-BinaryOperator 0x5605d95f3d18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5605d95f3d00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5605d95f3cc0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5605d95dc860 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5605d95f3ce0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5605d95f3e00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5605d95f3de0 <col:60> 'int' 0
|   |   `-CallExpr 0x5605d95f4020 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5605d95f4008 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5605d95f3fe8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605d9149130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5605d95f4060 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f3e70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5605d95f4078 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f3ea8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5605d95f4090 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5605d95f3ee0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5605d95f40a8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5605d95f3fd0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5605d95f3fb8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5605d95f3f78 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5605d95f4338 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5605d95f42e8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5605d95f42b8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5605d95f4260 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5605d95f4230 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5605d95f41e0 <col:48, col:57> 'char [48]' lvalue ->c 0x5605d95e7330
|     |     |   `-CXXMemberCallExpr 0x5605d95f41c0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5605d95f4190 <col:48> '<bound member function type>' ->xanno 0x5605d95dc618
|     |     |       `-CXXThisExpr 0x5605d95f4180 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5605d95f4248 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5605d95f4210 <col:61> 'int' lvalue ParmVar 0x5605d95df158 'i' 'int'
|     `-ImplicitCastExpr 0x5605d95f4320 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5605d95f4300 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5605d95df1d0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5605d95df4a8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5605d95df3b0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5605d95f4ab8 <col:35, line:513:5>
|   |-ParenExpr 0x5605d95f47c8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5605d95f4798 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5605d95f44f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5605d95f44c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5605d95f43d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5605d95f43b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5605d95f4378 <col:23> 'int' lvalue ParmVar 0x5605d95df3b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5605d95f4398 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5605d95f44a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5605d95f4488 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5605d95f43f0 <col:33> 'int' lvalue ParmVar 0x5605d95df3b0 'i' 'int'
|   |   |     `-BinaryOperator 0x5605d95f4468 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5605d95f4450 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5605d95f4410 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5605d95dc860 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5605d95f4430 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5605d95f4550 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5605d95f4530 <col:60> 'int' 0
|   |   `-CallExpr 0x5605d95f46f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5605d95f46e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5605d95f46c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605d9149130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5605d95f4738 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f45c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5605d95f4750 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f45f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5605d95f4768 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5605d95f4630 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5605d95f4780 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5605d95f46a8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5605d95f4690 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5605d95f4650 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5605d95f4aa8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5605d95f4a90 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5605d95f4a78 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5605d95f4a48 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5605d95f49c0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5605d95f4990 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5605d95f4940 <col:60, col:69> 'char const[48]' lvalue ->c 0x5605d95e7330
|             |   `-CXXMemberCallExpr 0x5605d95f4920 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5605d95f48f0 <col:60> '<bound member function type>' ->xanno 0x5605d95dc478
|             |       `-CXXThisExpr 0x5605d95f48e0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5605d95f49a8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5605d95f4970 <col:73> 'int' lvalue ParmVar 0x5605d95df3b0 'i' 'int'
|-CXXMethodDecl 0x5605d95df6f8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5605d95df568 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5605d95df5e0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5605d95f51d8 <col:41, line:528:5>
|   |-ParenExpr 0x5605d95f4f60 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5605d95f4f30 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5605d95f4c50 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5605d95f4c20 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5605d95f4b30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5605d95f4b18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5605d95f4ad8 <col:23> 'int' lvalue ParmVar 0x5605d95df568 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5605d95f4af8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5605d95f4c00 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5605d95f4be8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5605d95f4b50 <col:33> 'int' lvalue ParmVar 0x5605d95df568 'i' 'int'
|   |   |     `-BinaryOperator 0x5605d95f4bc8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5605d95f4bb0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5605d95f4b70 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5605d95dc860 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5605d95f4b90 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5605d95f4cb0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5605d95f4c90 <col:60> 'int' 0
|   |   `-CallExpr 0x5605d95f4e90 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5605d95f4e78 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5605d95f4e58 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605d9149130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5605d95f4ed0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f4d20 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5605d95f4ee8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f4d58 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5605d95f4f00 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5605d95f4d90 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5605d95f4f18 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5605d95f4e40 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5605d95f4e28 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5605d95f4de8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5605d95f51b8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5605d95f5168 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5605d95f5138 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5605d95f50e0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5605d95f50a0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5605d95f5050 <col:47, col:56> 'char [48]' lvalue ->c 0x5605d95e7330
|     |     |   `-CXXMemberCallExpr 0x5605d95f5030 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5605d95f5000 <col:47> '<bound member function type>' ->xanno 0x5605d95dc618
|     |     |       `-CXXThisExpr 0x5605d95f4ff0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5605d95f50b8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5605d95f5080 <col:60> 'int' lvalue ParmVar 0x5605d95df568 'i' 'int'
|     `-ImplicitCastExpr 0x5605d95f51a0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5605d95f5180 <col:65> 'int16_t':'short' lvalue ParmVar 0x5605d95df5e0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5605d95df8b8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5605d95df7c0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5605d95f58a8 <col:36, line:541:5>
|   |-ParenExpr 0x5605d95f5648 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5605d95f5618 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5605d95f5370 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5605d95f5340 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5605d95f5250 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5605d95f5238 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5605d95f51f8 <col:23> 'int' lvalue ParmVar 0x5605d95df7c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5605d95f5218 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5605d95f5320 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5605d95f5308 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5605d95f5270 <col:33> 'int' lvalue ParmVar 0x5605d95df7c0 'i' 'int'
|   |   |     `-BinaryOperator 0x5605d95f52e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5605d95f52d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5605d95f5290 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5605d95dc860 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5605d95f52b0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5605d95f53d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5605d95f53b0 <col:60> 'int' 0
|   |   `-CallExpr 0x5605d95f5578 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5605d95f5560 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5605d95f5540 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605d9149130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5605d95f55b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f5440 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5605d95f55d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f5478 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5605d95f55e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5605d95f54b0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5605d95f5600 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5605d95f5528 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5605d95f5510 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5605d95f54d0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5605d95f5898 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5605d95f5880 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5605d95f5868 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5605d95f5838 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5605d95f57e0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5605d95f57b0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5605d95f5760 <col:61, col:70> 'char const[48]' lvalue ->c 0x5605d95e7330
|             |   `-CXXMemberCallExpr 0x5605d95f5740 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5605d95f5710 <col:61> '<bound member function type>' ->xanno 0x5605d95dc478
|             |       `-CXXThisExpr 0x5605d95f5700 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5605d95f57c8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5605d95f5790 <col:74> 'int' lvalue ParmVar 0x5605d95df7c0 'i' 'int'
|-CXXMethodDecl 0x5605d95dfa88 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5605d95df978 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5605d95df9f0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5605d95dfb38 <col:20>
| `-OptimizeNoneAttr 0x5605d95dfb90 <col:30>
|-CXXMethodDecl 0x5605d95dfcc8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5605d95dfbd0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5605d95f5f78 <col:35, line:562:5>
|   |-ParenExpr 0x5605d95f5d18 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5605d95f5ce8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5605d95f5a40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5605d95f5a10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5605d95f5920 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5605d95f5908 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5605d95f58c8 <col:23> 'int' lvalue ParmVar 0x5605d95dfbd0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5605d95f58e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5605d95f59f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5605d95f59d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5605d95f5940 <col:33> 'int' lvalue ParmVar 0x5605d95dfbd0 'i' 'int'
|   |   |     `-BinaryOperator 0x5605d95f59b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5605d95f59a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5605d95f5960 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5605d95dc860 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5605d95f5980 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5605d95f5aa0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5605d95f5a80 <col:60> 'int' 0
|   |   `-CallExpr 0x5605d95f5c48 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5605d95f5c30 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5605d95f5c10 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605d9149130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5605d95f5c88 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f5b10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5605d95f5ca0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f5b48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5605d95f5cb8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5605d95f5b80 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5605d95f5cd0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5605d95f5bf8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5605d95f5be0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5605d95f5ba0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5605d95f5f68 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5605d95f5f50 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5605d95f5f38 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5605d95f5f08 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5605d95f5eb0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5605d95f5e80 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5605d95f5e30 <col:60, col:69> 'char const[48]' lvalue ->c 0x5605d95e7330
|             |   `-CXXMemberCallExpr 0x5605d95f5e10 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5605d95f5de0 <col:60> '<bound member function type>' ->xanno 0x5605d95dc478
|             |       `-CXXThisExpr 0x5605d95f5dd0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5605d95f5e98 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5605d95f5e60 <col:73> 'int' lvalue ParmVar 0x5605d95dfbd0 'i' 'int'
|-CXXMethodDecl 0x5605d95dfed8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5605d95dfd88 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5605d95dfe00 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5605d95f6658 <col:41, line:577:5>
|   |-ParenExpr 0x5605d95f63e8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5605d95f63b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5605d95f6110 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5605d95f60e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5605d95f5ff0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5605d95f5fd8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5605d95f5f98 <col:23> 'int' lvalue ParmVar 0x5605d95dfd88 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5605d95f5fb8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5605d95f60c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5605d95f60a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5605d95f6010 <col:33> 'int' lvalue ParmVar 0x5605d95dfd88 'i' 'int'
|   |   |     `-BinaryOperator 0x5605d95f6088 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5605d95f6070 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5605d95f6030 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5605d95dc860 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5605d95f6050 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5605d95f6170 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5605d95f6150 <col:60> 'int' 0
|   |   `-CallExpr 0x5605d95f6318 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5605d95f6300 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5605d95f62e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605d9149130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5605d95f6358 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f61e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5605d95f6370 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f6218 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5605d95f6388 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5605d95f6250 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5605d95f63a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5605d95f62c8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5605d95f62b0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5605d95f6270 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5605d95f6638 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5605d95f65e8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5605d95f65b8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5605d95f6558 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5605d95f6528 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5605d95f64d8 <col:47, col:56> 'char [48]' lvalue ->c 0x5605d95e7330
|     |     |   `-CXXMemberCallExpr 0x5605d95f64b8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5605d95f6488 <col:47> '<bound member function type>' ->xanno 0x5605d95dc618
|     |     |       `-CXXThisExpr 0x5605d95f6478 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5605d95f6540 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5605d95f6508 <col:60> 'int' lvalue ParmVar 0x5605d95dfd88 'i' 'int'
|     `-ImplicitCastExpr 0x5605d95f6620 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5605d95f6600 <col:65> 'int32_t':'int' lvalue ParmVar 0x5605d95dfe00 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5605d95e0098 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5605d95dffa0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5605d95f6d88 <col:36, line:591:5>
|   |-ParenExpr 0x5605d95f6ac8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5605d95f6a98 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5605d95f67f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5605d95f67c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5605d95f66d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5605d95f66b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5605d95f6678 <col:23> 'int' lvalue ParmVar 0x5605d95dffa0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5605d95f6698 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5605d95f67a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5605d95f6788 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5605d95f66f0 <col:33> 'int' lvalue ParmVar 0x5605d95dffa0 'i' 'int'
|   |   |     `-BinaryOperator 0x5605d95f6768 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5605d95f6750 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5605d95f6710 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5605d95dc860 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5605d95f6730 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5605d95f6850 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5605d95f6830 <col:60> 'int' 0
|   |   `-CallExpr 0x5605d95f69f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5605d95f69e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5605d95f69c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605d9149130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5605d95f6a38 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f68c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5605d95f6a50 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f68f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5605d95f6a68 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5605d95f6930 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5605d95f6a80 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5605d95f69a8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5605d95f6990 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5605d95f6950 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5605d95f6d78 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5605d95f6d60 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5605d95f6d48 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5605d95f6d18 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5605d95f6c90 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5605d95f6c60 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5605d95f6c10 <col:61, col:70> 'char const[48]' lvalue ->c 0x5605d95e7330
|             |   `-CXXMemberCallExpr 0x5605d95f6bf0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5605d95f6bc0 <col:61> '<bound member function type>' ->xanno 0x5605d95dc478
|             |       `-CXXThisExpr 0x5605d95f6bb0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5605d95f6c78 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5605d95f6c40 <col:74> 'int' lvalue ParmVar 0x5605d95dffa0 'i' 'int'
|-CXXMethodDecl 0x5605d95e02e8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5605d95e0158 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5605d95e01d0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5605d95f7468 <col:42, line:606:5>
|   |-ParenExpr 0x5605d95f71f8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5605d95f71c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5605d95f6f20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5605d95f6ef0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5605d95f6e00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5605d95f6de8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5605d95f6da8 <col:23> 'int' lvalue ParmVar 0x5605d95e0158 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5605d95f6dc8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5605d95f6ed0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5605d95f6eb8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5605d95f6e20 <col:33> 'int' lvalue ParmVar 0x5605d95e0158 'i' 'int'
|   |   |     `-BinaryOperator 0x5605d95f6e98 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5605d95f6e80 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5605d95f6e40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5605d95dc860 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5605d95f6e60 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5605d95f6f80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5605d95f6f60 <col:60> 'int' 0
|   |   `-CallExpr 0x5605d95f7128 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5605d95f7110 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5605d95f70f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605d9149130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5605d95f7168 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f6ff0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5605d95f7180 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f7028 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5605d95f7198 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5605d95f7060 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5605d95f71b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5605d95f70d8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5605d95f70c0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5605d95f7080 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5605d95f7448 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5605d95f73f8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5605d95f73c8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5605d95f7368 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5605d95f7338 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5605d95f72e8 <col:48, col:57> 'char [48]' lvalue ->c 0x5605d95e7330
|     |     |   `-CXXMemberCallExpr 0x5605d95f72c8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5605d95f7298 <col:48> '<bound member function type>' ->xanno 0x5605d95dc618
|     |     |       `-CXXThisExpr 0x5605d95f7288 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5605d95f7350 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5605d95f7318 <col:61> 'int' lvalue ParmVar 0x5605d95e0158 'i' 'int'
|     `-ImplicitCastExpr 0x5605d95f7430 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5605d95f7410 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5605d95e01d0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5605d95e0480 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5605d95e03b0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5605d95f7cd8 <col:33, line:620:5>
|   |-ParenExpr 0x5605d95f7a50 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5605d95f7a20 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5605d95f7670 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5605d95f7640 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5605d95f74e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5605d95f74c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5605d95f7488 <col:23> 'int' lvalue ParmVar 0x5605d95e03b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5605d95f74a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5605d95f7620 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5605d95f7608 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5605d95f7500 <col:33> 'int' lvalue ParmVar 0x5605d95e03b0 'i' 'int'
|   |   |     `-BinaryOperator 0x5605d95f75e8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5605d95f75d0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5605d95f7520 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5605d95dc860 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5605d95f75a8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5605d95f7590 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5605d95f7558 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5605d95f76d0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5605d95f76b0 <col:79> 'int' 0
|   |   `-CallExpr 0x5605d95f7980 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5605d95f7968 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5605d95f7948 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605d9149130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5605d95f79c0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f77b8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5605d95f79d8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f7800 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5605d95f79f0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5605d95f7838 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5605d95f7a08 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5605d95f7930 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5605d95f7918 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5605d95f78d8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5605d95f7cc8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5605d95f7cb0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5605d95f7c98 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5605d95f7c68 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5605d95f7be0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5605d95f7bb0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5605d95f7b60 <col:67, col:76> 'char const[48]' lvalue ->c 0x5605d95e7330
|             |   `-CXXMemberCallExpr 0x5605d95f7b40 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5605d95f7b10 <col:67> '<bound member function type>' ->xanno 0x5605d95dc478
|             |       `-CXXThisExpr 0x5605d95f7b00 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5605d95f7bc8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5605d95f7b90 <col:80> 'int' lvalue ParmVar 0x5605d95e03b0 'i' 'int'
|-CXXMethodDecl 0x5605d95e0698 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5605d95e0540 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5605d95e05c0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5605d95f8500 <col:45, line:635:5>
|   |-ParenExpr 0x5605d95f8248 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5605d95f8218 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5605d95f7ee0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5605d95f7eb0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5605d95f7d50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5605d95f7d38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5605d95f7cf8 <col:23> 'int' lvalue ParmVar 0x5605d95e0540 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5605d95f7d18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5605d95f7e90 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5605d95f7e78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5605d95f7d70 <col:33> 'int' lvalue ParmVar 0x5605d95e0540 'i' 'int'
|   |   |     `-BinaryOperator 0x5605d95f7e58 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5605d95f7e40 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5605d95f7d90 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5605d95dc860 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5605d95f7e18 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5605d95f7e00 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5605d95f7dc8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5605d95f7f40 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5605d95f7f20 <col:79> 'int' 0
|   |   `-CallExpr 0x5605d95f8178 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5605d95f8160 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5605d95f8140 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605d9149130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5605d95f81b8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f7fb0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5605d95f81d0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605d95f7ff8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5605d95f81e8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5605d95f8030 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5605d95f8200 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5605d95f8128 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5605d95f8110 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5605d95f80c8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5605d95f84e0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5605d95f8448 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5605d95f8418 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5605d95f83b8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5605d95f8388 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5605d95f8338 <col:54, col:63> 'char [48]' lvalue ->c 0x5605d95e7330
|     |     |   `-CXXMemberCallExpr 0x5605d95f8318 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5605d95f82e8 <col:54> '<bound member function type>' ->xanno 0x5605d95dc618
|     |     |       `-CXXThisExpr 0x5605d95f82d8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5605d95f83a0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5605d95f8368 <col:67> 'int' lvalue ParmVar 0x5605d95e0540 'i' 'int'
|     `-CXXConstCastExpr 0x5605d95f84b0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5605d95f8498 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5605d95f8460 <col:91> 'const void *' lvalue ParmVar 0x5605d95e05c0 'x' 'const void *'
|-CXXMethodDecl 0x5605d95e0768 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5605d95f8588 <col:34, line:640:5>
|   `-ReturnStmt 0x5605d95f8578 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5605d95f8560 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5605d95f8530 <col:16> 'Packet *' lvalue ->_data_packet 0x5605d95e7ee8
|         `-CXXThisExpr 0x5605d95f8520 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5605d95e08a8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5605d95e0818 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5605d95f1648 <col:46> 'bool' true
|-CXXMethodDecl 0x5605d95e0a28 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5605d95e0960 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5605d95e0ad0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5605d95e1280 <line:660:22> "" ""
| |-EnumConstantDecl 0x5605d95e0bd0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5605d95e12f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d95e0bb0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5605d95e0b90 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5605d95d5d30 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5605d95e0c60 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5605d95e1308 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d95e0c40 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5605d95e0c20 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5605d95d5dc0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5605d95e0cf0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5605d95e1320 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d95e0cd0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5605d95e0cb0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5605d95e0d80 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5605d95e1338 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d95e0d60 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5605d95e0d40 <col:19> 'int' 16
| |-EnumConstantDecl 0x5605d95e0e10 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5605d95e1350 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d95e0df0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5605d95e0dd0 <col:21> 'int' 16
| |-EnumConstantDecl 0x5605d95e0ea0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5605d95e1368 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d95e0e80 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5605d95e0e60 <col:19> 'int' 32
| |-EnumConstantDecl 0x5605d95e0f30 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5605d95e1380 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d95e0f10 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5605d95e0ef0 <col:19> 'int' EnumConstant 0x5605d95e0d80 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5605d95e0fc0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5605d95e1398 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d95e0fa0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5605d95e0f80 <col:19> 'int' EnumConstant 0x5605d95e0ea0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5605d95e1090 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5605d95e13b0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d95e1070 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5605d95e1050 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5605d95e1010 <col:23> 'int' EnumConstant 0x5605d95e0fc0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5605d95e1030 <col:40> 'int' 2
| |-EnumConstantDecl 0x5605d95e1160 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5605d95e13c8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d95e1140 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5605d95e1120 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5605d95e10e0 <col:23> 'int' EnumConstant 0x5605d95e0fc0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5605d95e1100 <col:40> 'int' 4
| `-EnumConstantDecl 0x5605d95e1230 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5605d95e13e0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5605d95e1210 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5605d95e11f0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5605d95e11b0 <col:23> 'int' EnumConstant 0x5605d95e0fc0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5605d95e11d0 <col:40> 'int' 8
|-CXXMethodDecl 0x5605d95e1420 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5605d95e14c0 <col:68> "" ""
|-CXXMethodDecl 0x5605d95e1558 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5605d95e15f8 <col:45> "" ""
|-CXXMethodDecl 0x5605d95e1690 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5605d95e1730 <col:57> "" ""
|-CXXMethodDecl 0x5605d95e17c8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5605d95e1868 <col:45> "" ""
|-CXXMethodDecl 0x5605d95e1900 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5605d95e19a0 <col:57> "" ""
|-CXXMethodDecl 0x5605d95e1a30 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5605d95e1ad0 <col:51> "" ""
|-CXXMethodDecl 0x5605d95e1b60 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5605d95e1c00 <col:63> "" ""
|-CXXMethodDecl 0x5605d95e1c90 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5605d95e1d30 <col:53> "" ""
|-CXXMethodDecl 0x5605d95e1dc0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5605d95e1e60 <col:65> "" ""
|-CXXMethodDecl 0x5605d95e1f78 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5605d95e1ee8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5605d95e2020 <col:61> "" ""
|-CXXMethodDecl 0x5605d95e21b8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5605d95e20a8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5605d95e2120 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5605d95e2268 <col:67> "" ""
|-CXXMethodDecl 0x5605d95e2380 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5605d95e22f0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5605d95e2428 <col:63> "" ""
|-CXXMethodDecl 0x5605d95e25c0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5605d95e24b0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5605d95e2528 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5605d95e2670 <col:69> "" ""
|-CXXMethodDecl 0x5605d95e2788 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5605d95e26f8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5605d95e2830 <col:63> "" ""
|-CXXMethodDecl 0x5605d95e4f08 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5605d95e4df8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5605d95e4e70 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5605d95e4fb8 <col:69> "" ""
|-CXXMethodDecl 0x5605d95e50d0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5605d95e5040 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5605d95e5178 <col:62> "" ""
|-CXXMethodDecl 0x5605d95e5310 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5605d95e5200 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5605d95e5278 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5605d95e53c0 <col:68> "" ""
|-CXXMethodDecl 0x5605d95e54d8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5605d95e5448 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5605d95e5580 <col:63> "" ""
|-CXXMethodDecl 0x5605d95e5718 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5605d95e5608 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5605d95e5680 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5605d95e57c8 <col:69> "" ""
|-CXXMethodDecl 0x5605d95e5858 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5605d95e58f8 <col:64> "" ""
|-CXXMethodDecl 0x5605d95e5988 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5605d95e5a28 <col:52> "" ""
|-CXXMethodDecl 0x5605d95e5ab8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5605d95e5b58 <col:67> "" ""
|-CXXMethodDecl 0x5605d95e5be8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5605d95e5c88 <col:55> "" ""
|-CXXMethodDecl 0x5605d95e5da0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5605d95e5d10 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5605d95e5e48 <col:58> "" ""
|-CXXMethodDecl 0x5605d95e5fe0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5605d95e5ed0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5605d95e5f48 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5605d95e6090 <col:62> "" ""
|-CXXMethodDecl 0x5605d95e61a8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5605d95e6118 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5605d95e6250 <col:58> "" ""
|-CXXMethodDecl 0x5605d95e63e8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5605d95e62d8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5605d95e6350 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5605d95e6498 <col:62> "" ""
|-CXXMethodDecl 0x5605d95e65b0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5605d95e6520 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5605d95e6658 <col:60> "" ""
|-CXXMethodDecl 0x5605d95e67f0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5605d95e66e0 <col:34> col:37 'int'
| |-ParmVarDecl 0x5605d95e6758 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5605d95e68a0 <col:64> "" ""
|-CXXMethodDecl 0x5605d95e69b8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5605d95e6928 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5605d95e6a60 <col:58> "" ""
|-CXXMethodDecl 0x5605d95e6bf8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5605d95e6ae8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5605d95e6b60 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5605d95e6ca8 <col:62> "" ""
|-CXXMethodDecl 0x5605d95e6dc0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5605d95e6d30 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5605d95e6e68 <col:59> "" ""
|-CXXMethodDecl 0x5605d95e7000 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5605d95e6ef0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5605d95e6f68 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5605d95e70b0 <col:63> "" ""
|-AccessSpecDecl 0x5605d95e7120 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5605d95e7148 prev 0x5605d95dc350 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5605d95e7240 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5605d95e7330 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5605d95e7458 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5605d95e75d8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5605d95e7758 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5605d95e78d8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5605d95f8708 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5605d95f8f78 <col:11>
| |-CXXDestructorDecl 0x5605d95f87e0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5605d95f8918 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5605d95f8918
| | `-ParmVarDecl 0x5605d95f8a28 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5605d95f8ac8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5605d95f8ac8
| | `-ParmVarDecl 0x5605d95f8bd8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5605d95fb998 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5605d95fbaa8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5605d95fbd28 <col:11>
| |   `-ReturnStmt 0x5605d95fbd18 <col:11>
| |     `-UnaryOperator 0x5605d95fbd00 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5605d95fbcf0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5605d95fbb18 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5605d95fbb18
|   `-ParmVarDecl 0x5605d95fbc28 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5605d95e7940 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5605d95e7a58 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5605d95e7af8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5605d95e7b60 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5605d95e7bc8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5605d95e7c30 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5605d95e7c90 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5605d95e7d50 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5605d95e7db0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5605d95e7e10 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5605d95f8618 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5605d95e7af8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5605d95f8f88 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5605d95f8fe0 <col:12>
| |-CXXConstructorDecl 0x5605d95f8c48 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5605d95f8c48
| | `-ParmVarDecl 0x5605d95f8d58 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5605d95f8df8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5605d95f8df8
| | `-ParmVarDecl 0x5605d95f8f08 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5605d95fb080 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5605d95e7e88 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5605d95e7ee8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5605d95e7f50 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5605d95e7fb8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5605d95e8020 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5605d95e8088 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5605d95e80e8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5605d95e8148 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5605d95e81b0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5605d95e8238 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5605d95e7e88 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5605d95f85b0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5605d95e80e8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5605d95f8ff0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5605d95f9050 <col:21, line:755:5>
|-CXXConstructorDecl 0x5605d95e83d8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5605d95e8318 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5605d95e84d0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5605d95e86b8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5605d95e85c0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5605d95e8988 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5605d95e8770 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5605d95e87e8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5605d95e8860 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5605d95e8ba8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5605d95e8a58 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5605d95e8ad0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5605d95f1188 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5605d95e8c68 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5605d95e8ce0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5605d95e8d58 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5605d95f12e0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5605d95f1250 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5605d95f1428 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5605d95f1398 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5605d95f1520 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class PullTee
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605d9628818 <../elements/standard/tee.hh:41:1, line:55:1> line:41:7 class PullTee definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5605d9628978 <col:1, col:7> col:7 implicit referenced class PullTee
|-AccessSpecDecl 0x5605d9628a08 <line:43:2, col:8> col:2 public
|-CXXConstructorDecl 0x5605d9628a90 <line:45:3, col:11> col:3 PullTee 'void ()'
|-CXXMethodDecl 0x5605d9628b90 <line:47:3, col:54> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x5605d96101e8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5605d96299b8 <col:34, col:54>
|   `-ReturnStmt 0x5605d96299a8 <col:36, col:43>
|     `-ImplicitCastExpr 0x5605d9629990 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5605d9629970 <col:43> 'const char [8]' lvalue "PullTee"
|-CXXMethodDecl 0x5605d9628c58 <line:48:3, col:51> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x5605d96102b0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5605d9629a18 <col:34, col:51>
|   `-ReturnStmt 0x5605d9629a08 <col:36, col:43>
|     `-ImplicitCastExpr 0x5605d96299f0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5605d96299d0 <col:43> 'const char [5]' lvalue "1/1-"
|-CXXMethodDecl 0x5605d9628d20 <line:49:3, col:51> col:15 processing 'const char *() const'
| |-Overrides: [ 0x5605d9610678 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x5605d9629a78 <col:34, col:51>
|   `-ReturnStmt 0x5605d9629a68 <col:36, col:43>
|     `-ImplicitCastExpr 0x5605d9629a50 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5605d9629a30 <col:43> 'const char [5]' lvalue "l/lh"
|-CXXMethodDecl 0x5605d9628ff0 <line:51:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5605d9611a80 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5605d9628ea0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x5605d9628f18 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x5605d9629148 <line:53:3, col:19> col:11 pull 'Packet *(int)'
| |-Overrides: [ 0x5605d960f1e8 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x5605d96290b8 <col:16> col:19 'int'
|-CXXConstructorDecl 0x5605d9629218 <line:41:7> col:7 implicit PullTee 'void (const PullTee &)' inline default_delete noexcept-unevaluated 0x5605d9629218
| `-ParmVarDecl 0x5605d9629328 <col:7> col:7 'const PullTee &'
|-CXXConstructorDecl 0x5605d96293c8 <col:7> col:7 implicit PullTee 'void (PullTee &&)' inline default_delete noexcept-unevaluated 0x5605d96293c8
| `-ParmVarDecl 0x5605d96294d8 <col:7> col:7 'PullTee &&'
|-CXXMethodDecl 0x5605d9629578 <col:7> col:7 implicit operator= 'PullTee &(const PullTee &)' inline default_delete noexcept-unevaluated 0x5605d9629578
| `-ParmVarDecl 0x5605d9629688 <col:7> col:7 'const PullTee &'
|-CXXMethodDecl 0x5605d96296f8 <col:7> col:7 implicit operator= 'PullTee &(PullTee &&)' inline default_delete noexcept-unevaluated 0x5605d96296f8
| `-ParmVarDecl 0x5605d9629808 <col:7> col:7 'PullTee &&'
`-CXXDestructorDecl 0x5605d9629890 <col:7> col:7 implicit ~PullTee 'void ()' inline default noexcept-unevaluated 0x5605d9629890
  `-Overrides: [ 0x5605d960ed88 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.PullTee = type { %class.Element.base, [4 x i8] }
  NonVirtualBaseLLVMType:%class.PullTee.base = type { %class.Element.base }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605d96cca00 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5605d96ccb18 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x5605d96ccba8 <col:16, col:22> col:16 public
|-EnumDecl 0x5605d96ccbd0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x5605d96cccd0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5605d96ccf20 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d96cccb0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5605d96ccc90 <col:21> 'int' 0
| |-EnumConstantDecl 0x5605d96ccd60 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5605d96ccf38 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d96ccd40 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x5605d96ccd20 <col:24> 'int' 22
| |-EnumConstantDecl 0x5605d96ccdf0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5605d96ccf50 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d96ccdd0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x5605d96ccdb0 <col:24> 'int' 34
| |-EnumConstantDecl 0x5605d96cce80 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5605d96ccf68 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605d96cce60 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x5605d96cce40 <col:25> 'int' 95
| `-EnumConstantDecl 0x5605d96cced0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x5605d96ce900 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5605d96ced38 <col:7>
|-CXXConstructorDecl 0x5605d96cea08 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x5605d96cea08
| `-ParmVarDecl 0x5605d96ceb18 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x5605d96cebb8 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5605d96cecc8 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x5605d9733ed0 <col:7>
`-CXXDestructorDecl 0x5605d96d0e38 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605d96ccf98 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x5605d96cd0f8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x5605d96cd188 <col:32, col:38> col:32 public
|-TypedefDecl 0x5605d96cd1c0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x5605d9202680 'uint32_t' sugar
|   |-Typedef 0x5605d91164c8 'uint32_t'
|   `-TypedefType 0x5605d90ef5a0 '__uint32_t' sugar
|     |-Typedef 0x5605d90ef198 '__uint32_t'
|     `-BuiltinType 0x5605d90ad620 'unsigned int'
|-CXXConstructorDecl 0x5605d96cd308 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x5605d96cd230 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x5605d96ce808 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5605d96ced48 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5605d96ce0a0 'base' 'int'
| | `-ImplicitCastExpr 0x5605d96ce8a8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5605d96ce868 <col:16> 'int' lvalue ParmVar 0x5605d96cd230 'b' 'int'
| `-CompoundStmt 0x5605d96cedb8 <col:19, line:1046:5>
|-CXXMethodDecl 0x5605d96cd800 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x5605d96cd3d0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x5605d96cd450 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x5605d96cd4c8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x5605d96cd548 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x5605d96cd608 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x5605d96cd688 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x5605d96cdc58 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x5605d96cd8d0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5605d96cdbb8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5605d96cd978 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x5605d96cda18 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x5605d96cda90 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5605d96ce828 <col:82> 'const ArgContext' lvalue Var 0x5605d96c1668 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5605d96cfce8 <col:94, line:1067:5>
| |   |-DeclStmt 0x5605d96cef48 <line:1054:9, col:64>
| |   | `-VarDecl 0x5605d96cedd8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x5605d96cef00 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x5605d96cf168 <line:1055:9, col:91>
| |   | `-VarDecl 0x5605d96cef78 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x5605d96cf140 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x5605d96cf120 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x5605d96cf0d0 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x5605d96cf0b0 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x5605d96cf058 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x5605d96cf008 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x5605d96cf038 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x5605d96cf098 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x5605d96cf078 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x5605d96cf100 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x5605d96cf2c8 <line:1056:9, col:27>
| |   | `-VarDecl 0x5605d96cf260 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x5605d96cf710 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x5605d96cf640 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x5605d96cf5c0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5605d95cc668 0x5605d9415c48 0x5605d9415920 0x5605d94060f0 0x5605d9405da0 0x5605d9405690 0x5605d93d8000 0x5605d93654d0
| |   | | |-CallExpr 0x5605d96cf500 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x5605d96cf2f0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x5605d96cf3a0 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5605d96cf370 <col:19, col:23> '<bound member function type>' .begin 0x5605d93f52f8
| |   | | | |   `-DeclRefExpr 0x5605d96cf350 <col:19> 'const String' lvalue ParmVar 0x5605d96cd978 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x5605d96cf410 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5605d96cf3e0 <col:32, col:36> '<bound member function type>' .end 0x5605d93f5510
| |   | | | |   `-DeclRefExpr 0x5605d96cf3c0 <col:32> 'const String' lvalue ParmVar 0x5605d96cd978 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x5605d96cf430 <col:43> 'const bool' lvalue Var 0x5605d96cedd8 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x5605d96cf498 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x5605d96cf478 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x5605d96cf4c0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x5605d96cf260 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x5605d96cf4e0 <col:73> 'const int' lvalue Var 0x5605d96cef78 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x5605d96cf5a0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x5605d96cf570 <col:16, col:20> '<bound member function type>' .end 0x5605d93f5510
| |   | |     `-DeclRefExpr 0x5605d96cf550 <col:16> 'const String' lvalue ParmVar 0x5605d96cd978 'str' 'const String &'
| |   | `-BinaryOperator 0x5605d96cf6f0 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x5605d96cf688 <col:13> 'int' lvalue ->status 0x5605d96ce108
| |   |   | `-CXXThisExpr 0x5605d96cf678 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x5605d96cf6d8 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x5605d96cf6b8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5605d96ccd60 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x5605d96cf960 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x5605d96cf848 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x5605d96cf830 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x5605d96cf818 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x5605d96cf738 <col:13> 'int' lvalue ->status 0x5605d96ce108
| |   | | |     `-CXXThisExpr 0x5605d96cf728 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x5605d96cf7f8 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x5605d96cf7c8 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x5605d96cf778 <col:23> 'int' lvalue ->status 0x5605d96ce108
| |   | |   |   `-CXXThisExpr 0x5605d96cf768 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x5605d96cf7e0 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x5605d96cf7a8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5605d96ccdf0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x5605d96cf940 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x5605d96cf8e0 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x5605d96cf888 <col:13, col:18> '<bound member function type>' .error 0x5605d9590f50
| |   |   | | `-DeclRefExpr 0x5605d96cf868 <col:13> 'const ArgContext' lvalue ParmVar 0x5605d96cda90 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x5605d96cf908 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x5605d96cf8b8 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x5605d96cf930 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x5605d96cf920 <col:20> 'bool' false
| |   |-DeclStmt 0x5605d96cfb38 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x5605d96cfae0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x5605d96cfa70 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x5605d96cfc98 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x5605d96cfb50 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x5605d9399498
| |   | |-DeclRefExpr 0x5605d96cfb98 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x5605d96cf260 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x5605d96cfc68 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x5605d96cfbe0 <col:64> 'V' lvalue ParmVar 0x5605d96cda18 'result' 'V &'
| |   `-ReturnStmt 0x5605d96cfcd8 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x5605d96cfcc8 <col:16> 'bool' true
| `-CXXMethodDecl 0x5605d9739df8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5605d9739bd0 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x5605d9739ca8 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x5605d9739d10 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x5605d973bb90 <col:94, line:1067:5>
|     |-DeclStmt 0x5605d973a608 <line:1054:9, col:64>
|     | `-VarDecl 0x5605d973a428 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x5605d973a598 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x5605d973a568 <col:36, col:55> 'const bool' lvalue Var 0x5605d93886b0 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x5605d973a7e8 <line:1055:9, col:91>
|     | `-VarDecl 0x5605d973a620 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x5605d973a768 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x5605d973a750 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x5605d973a730 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x5605d973a710 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x5605d973a6f0 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x5605d973a6b8 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x5605d973a698 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x5605d96cf038 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x5605d973a6d8 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x5605d96cf078 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x5605d96cf100 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x5605d973a980 <line:1056:9, col:27>
|     | `-VarDecl 0x5605d973a918 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x5605d973ae08 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x5605d973adb0 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x5605d973ac68 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x5605d973ac38 <col:13> '<bound member function type>' ->parse 0x5605d96cd800
|     | | | | `-CXXThisExpr 0x5605d973ac28 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x5605d973aac8 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5605d973aa98 <col:19, col:23> '<bound member function type>' .begin 0x5605d93f52f8
|     | | | |   `-DeclRefExpr 0x5605d973aa78 <col:19> 'const String' lvalue ParmVar 0x5605d9739bd0 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x5605d973ab38 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5605d973ab08 <col:32, col:36> '<bound member function type>' .end 0x5605d93f5510
|     | | | |   `-DeclRefExpr 0x5605d973aae8 <col:32> 'const String' lvalue ParmVar 0x5605d9739bd0 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x5605d973acd8 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x5605d973acb8 <col:43> 'const bool' lvalue Var 0x5605d973a428 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x5605d973abc0 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x5605d973aba8 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x5605d973ab88 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x5605d973acf0 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x5605d973abe8 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x5605d973a918 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x5605d973ad28 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x5605d973ad08 <col:73> 'const int' lvalue Var 0x5605d973a620 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x5605d973ad90 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x5605d973ad60 <col:16, col:20> '<bound member function type>' .end 0x5605d93f5510
|     | |     `-DeclRefExpr 0x5605d973ad40 <col:16> 'const String' lvalue ParmVar 0x5605d9739bd0 'str' 'const String &'
|     | `-BinaryOperator 0x5605d973ade8 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x5605d96cf688 <col:13> 'int' lvalue ->status 0x5605d96ce108
|     |   | `-CXXThisExpr 0x5605d96cf678 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x5605d973add0 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x5605d96cf6b8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5605d96ccd60 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x5605d973af80 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x5605d973aea0 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x5605d973ae88 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x5605d973ae70 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x5605d96cf738 <col:13> 'int' lvalue ->status 0x5605d96ce108
|     | | |     `-CXXThisExpr 0x5605d96cf728 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x5605d973ae50 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x5605d973ae20 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x5605d96cf778 <col:23> 'int' lvalue ->status 0x5605d96ce108
|     | |   |   `-CXXThisExpr 0x5605d96cf768 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x5605d973ae38 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x5605d96cf7a8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5605d96ccdf0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x5605d973af60 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x5605d973af10 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x5605d973aee0 <col:13, col:18> '<bound member function type>' .error 0x5605d9590f50
|     |   | | `-DeclRefExpr 0x5605d973aec0 <col:13> 'const ArgContext' lvalue ParmVar 0x5605d9739d10 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x5605d973af38 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x5605d96cf8b8 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x5605d973af50 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x5605d96cf920 <col:20> 'bool' false
|     |-DeclStmt 0x5605d973b4c8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x5605d973b470 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x5605d973b420 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x5605d973b400 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x5605d973b390 'type'
|     |       `-ElaboratedType 0x5605d973b340 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x5605d973b320 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x5605d9388808 'unsigned_type'
|     |           `-BuiltinType 0x5605d90ad620 'unsigned int'
|     |-CallExpr 0x5605d973bb20 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x5605d973bb08 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x5605d973ba88 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x5605d973b968 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x5605d9399498 'extract_integer')
|     | |-ImplicitCastExpr 0x5605d973bb68 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x5605d973bb50 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x5605d973b528 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x5605d973a918 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x5605d973b5f8 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x5605d973b5a8 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x5605d9739ca8 'result' 'unsigned int &'
|     `-ReturnStmt 0x5605d973bb80 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x5605d96cfcc8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x5605d96ce018 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x5605d96cdcc8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5605d96cdf78 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5605d96cdd78 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x5605d96cde18 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x5605d96cde90 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5605d96ce848 <col:71> 'const ArgContext' lvalue Var 0x5605d96c1668 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5605d96d0458 <col:83, line:1083:5>
| |   |-DeclStmt 0x5605d96cfdb0 <line:1071:9, col:12>
| |   | `-VarDecl 0x5605d96cfd48 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x5605d96d0430 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5605d96d0040 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x5605d96cfec8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x5605d96cfe90 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x5605d96cfdd8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x5605d96cfe30 <col:31> 'const String' lvalue ParmVar 0x5605d96cdd78 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5605d96cfe50 <col:36> 'V' lvalue Var 0x5605d96cfd48 'x' 'V'
| |     | |   `-DeclRefExpr 0x5605d96cfe70 <col:39> 'const ArgContext' lvalue ParmVar 0x5605d96cde90 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5605d96d0020 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5605d96d0000 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5605d96cffe8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5605d96cffd0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5605d96cfef0 <col:17> 'int' lvalue ->status 0x5605d96ce108
| |     |     |     `-CXXThisExpr 0x5605d96cfee0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x5605d96cffb0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5605d96cff80 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5605d96cff30 <col:27> 'int' lvalue ->status 0x5605d96ce108
| |     |       |   `-CXXThisExpr 0x5605d96cff20 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5605d96cff98 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5605d96cff60 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5605d96ccdf0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5605d96d0070 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5605d96d0060 <col:20> 'bool' false
| |     `-IfStmt 0x5605d96d0408 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5605d96d0110 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5605d96d00e0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5605d96d0090 <col:18> 'int' lvalue ->status 0x5605d96ce108
| |       | |   `-CXXThisExpr 0x5605d96d0080 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5605d96d00f8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x5605d96d00c0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5605d96ccdf0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5605d96d0348 <col:42, line:1079:9>
| |       | |-CallExpr 0x5605d96d02f0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x5605d96d0140 <line:1076:13> '<bound member function type>' ->range_error 0x5605d96ce738
| |       | | | `-CXXThisExpr 0x5605d96d0130 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5605d96d0170 <col:25> 'const ArgContext' lvalue ParmVar 0x5605d96cde90 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x5605d96d0250 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x5605d96d02c8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x5605d96d02a8 <col:43> 'V' lvalue Var 0x5605d96cfd48 'x' 'V'
| |       | `-ReturnStmt 0x5605d96d0338 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5605d96d0328 <col:20> 'bool' false
| |       `-CompoundStmt 0x5605d96d03e8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x5605d96d03a8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x5605d96d0368 <col:13> 'V' lvalue ParmVar 0x5605d96cde18 'result' 'V &'
| |         | `-DeclRefExpr 0x5605d96d0388 <col:22> 'V' lvalue Var 0x5605d96cfd48 'x' 'V'
| |         `-ReturnStmt 0x5605d96d03d8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x5605d96d03c8 <col:20> 'bool' true
| `-CXXMethodDecl 0x5605d97397b8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5605d9739590 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x5605d9739668 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x5605d97396d0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x5605d973a408 <col:83, line:1083:5>
|     |-DeclStmt 0x5605d9739a40 <line:1071:9, col:12>
|     | `-VarDecl 0x5605d97399d8 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x5605d973a3e0 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x5605d973a070 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x5605d9739f98 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x5605d9739f60 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x5605d9739f18 <col:14> '<bound member function type>' ->parse_saturating 0x5605d9739df8
|       | |   | `-CXXThisExpr 0x5605d9739f08 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x5605d9739ab0 <col:31> 'const String' lvalue ParmVar 0x5605d9739590 'str' 'const String &'
|       | |   |-DeclRefExpr 0x5605d9739ad0 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x5605d97399d8 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x5605d9739af0 <col:39> 'const ArgContext' lvalue ParmVar 0x5605d97396d0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x5605d973a050 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x5605d973a030 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x5605d973a018 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x5605d973a000 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x5605d96cfef0 <col:17> 'int' lvalue ->status 0x5605d96ce108
|       |     |     `-CXXThisExpr 0x5605d96cfee0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x5605d9739fe0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x5605d9739fb0 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x5605d96cff30 <col:27> 'int' lvalue ->status 0x5605d96ce108
|       |       |   `-CXXThisExpr 0x5605d96cff20 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x5605d9739fc8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x5605d96cff60 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5605d96ccdf0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x5605d973a090 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x5605d96d0060 <col:20> 'bool' false
|       `-IfStmt 0x5605d973a3b8 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x5605d973a0d0 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x5605d973a0a0 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x5605d96d0090 <col:18> 'int' lvalue ->status 0x5605d96ce108
|         | |   `-CXXThisExpr 0x5605d96d0080 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x5605d973a0b8 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x5605d96d00c0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5605d96ccdf0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x5605d973a2f0 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x5605d973a260 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x5605d96d0140 <line:1076:13> '<bound member function type>' ->range_error 0x5605d96ce738
|         | | | `-CXXThisExpr 0x5605d96d0130 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x5605d973a0f0 <col:25> 'const ArgContext' lvalue ParmVar 0x5605d97396d0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x5605d973a2c8 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x5605d973a298 <col:31, col:50> 'const bool' lvalue Var 0x5605d93886b0 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x5605d973a238 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x5605d973a220 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x5605d973a208 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x5605d973a1e8 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x5605d97399d8 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x5605d973a2e0 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x5605d96d0328 <col:20> 'bool' false
|         `-CompoundStmt 0x5605d973a398 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x5605d973a368 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x5605d973a310 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x5605d9739668 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x5605d973a350 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x5605d973a330 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x5605d97399d8 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x5605d973a388 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x5605d96d03c8 <col:20> 'bool' true
|-FieldDecl 0x5605d96ce0a0 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x5605d96ce108 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x5605d96ce158 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x5605d96ce410 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x5605d96ce198 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x5605d96ce218 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x5605d96ce290 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x5605d96ce310 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x5605d96ce738 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x5605d96ce4e0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x5605d96ce558 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x5605d96ce5f0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x5605d96d0cb8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x5605d96d0cb8
| `-ParmVarDecl 0x5605d96d0dc8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x5605d96d0f48 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5605d96d1058 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5605d9733ee0 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5605d9733eb0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x5605d9733e80 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5605d9733e50 <col:7> 'IntArg' lvalue ParmVar 0x5605d96d1058 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5605d96ce0a0 'base' 'int'
| | `-ImplicitCastExpr 0x5605d9733fd8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5605d9733fa8 <col:7> 'int' xvalue .base 0x5605d96ce0a0
| |     `-CXXStaticCastExpr 0x5605d9733f78 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5605d9733f48 <col:7> 'IntArg' lvalue ParmVar 0x5605d96d1058 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5605d96ce108 'status' 'int'
| | `-ImplicitCastExpr 0x5605d97340a8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5605d9734078 <col:7> 'int' xvalue .status 0x5605d96ce108
| |     `-CXXStaticCastExpr 0x5605d9734048 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5605d9734018 <col:7> 'IntArg' lvalue ParmVar 0x5605d96d1058 '' 'IntArg &&'
| `-CompoundStmt 0x5605d9734100 <col:7>
`-CXXDestructorDecl 0x5605d9733040 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5605d96d5250 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x5605d96d54a8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5605d9732f68 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5605d97334e0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5605d97334c0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5605d9733550 <col:19>
|-CXXConstructorDecl 0x5605d9733148 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x5605d9733148
| `-ParmVarDecl 0x5605d9733258 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x5605d97332f8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5605d9733408 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5605d9734110 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5605d9733e30 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5605d9733e00 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x5605d9733dd0 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x5605d9733408 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x5605d9734180 <col:19>
`-CXXDestructorDecl 0x5605d9733590 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
