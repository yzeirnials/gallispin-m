
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b715fe8 prev 0x56544b70d788 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56544b7160e0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x56544b716170 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x56544b7161e8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x56544b7162a8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x56544b716370 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x56544b7164e8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x56544b716420 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x56544b716590 <col:24>
| `-OptimizeNoneAttr 0x56544b7165e8 <col:34>
|-CXXMethodDecl 0x56544b716630 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x56544b7168e8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x56544b7166e0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x56544b716758 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x56544b7167d8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x56544b7169a0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x56544b7169d8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x56544b716a40 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x56544b716ac8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x56544b716de8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x56544b716b80 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x56544b716bf8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x56544b716c70 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x56544b716cf0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x56544b716f00 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x56544b71e878 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x56544b71e878
| `-ParmVarDecl 0x56544b71e988 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x56544b71ea28 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x56544b71ea28
| `-ParmVarDecl 0x56544b71eb38 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x56544b803db0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b709000 prev 0x56544b708d80 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56544b7090f8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x56544b709188 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x56544b7091e8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x56544b7092d8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x56544b7093d8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x56544b7095a8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x56544b709458 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x56544b7094d0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x56544b709738 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x56544b709670 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x56544b7097e0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x56544b709918 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x56544b709850 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x56544b709ab8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x56544b7099f8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x56544b709c58 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x56544b709b98 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x56544b709d00 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x56544b709e00 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x56544b709ee0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b709de0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x56544b709dc0 <col:26> 'int' 1
| `-EnumConstantDecl 0x56544b709e90 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x56544b709ef8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56544b709e70 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x56544b709e50 <col:44> 'int' 2
|-CXXMethodDecl 0x56544b70a040 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x56544b709f28 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x56544b709fa8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x56544b70a198 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x56544b70a108 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x56544b70a3d8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x56544b70a258 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x56544b70a2d0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x56544b70a488 <col:20>
| `-OptimizeNoneAttr 0x56544b70a4e0 <col:30>
|-CXXMethodDecl 0x56544b70a5e8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x56544b70a520 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x56544b70a690 <col:20>
| `-OptimizeNoneAttr 0x56544b70a6e8 <col:30>
|-CXXMethodDecl 0x56544b70a738 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x56544b70a800 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x56544b70a918 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x56544b70a9a0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x56544b70aa28 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x56544b70aab0 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x56544b70ab38 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x56544b70abc8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x56544b70ac88 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x56544b70ad10 <line:63:5, col:28> col:23 used PUSH 'const char []' static
|-VarDecl 0x56544b70ad98 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x56544b70ae20 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x56544b70aea8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x56544b70af30 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x56544b70afc0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x56544b70b080 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x56544b70b110 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x56544b70b260 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x56544b70b1c8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x56544b70b3f0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x56544b70b320 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x56544b70b6a0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x56544b70b4a8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x56544b70b528 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x56544b70b5a8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x56544b70b758 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x56544b70b860 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56544b70baf0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b70b840 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x56544b70b820 <col:33> 'int' 0
| |-EnumConstantDecl 0x56544b70b8f0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56544b70bb08 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b70b8d0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x56544b70b8b0 <col:32> 'int' 20
| |-EnumConstantDecl 0x56544b70b980 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56544b70bb20 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b70b960 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x56544b70b940 <col:38> 'int' 90
| |-EnumConstantDecl 0x56544b70ba10 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56544b70bb38 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b70b9f0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x56544b70b9d0 <col:35> 'int' 100
| `-EnumConstantDecl 0x56544b70baa0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x56544b70bb50 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56544b70ba80 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x56544b70ba60 <col:32> 'int' 2000
|-CXXMethodDecl 0x56544b70bb90 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x56544b70bfd0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56544b70be40 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x56544b70beb8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56544b70c0a0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x56544b70c220 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x56544b70c150 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56544b70c428 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56544b70c2d8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x56544b70c350 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56544b70c528 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x56544b70c5c8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x56544b70c690 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x56544b70c720 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x56544b70c950 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b70c700 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x56544b70c6e0 <col:36> 'int' EnumConstant 0x56544b70c690 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x56544b70c770 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56544b70c7c0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56544b70c810 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56544b70c860 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56544b70c8b0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x56544b70c900 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x56544b70ca38 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x56544b70c978 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x56544b70cb00 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x56544b70cbc0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x56544b70cc80 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x56544b70cd40 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x56544b70ce58 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x56544b70cf20 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x56544b70d0a0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x56544b70cfd0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x56544b70d1c8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x56544b70d3c8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x56544b70d278 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x56544b70d2f8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x56544b71ad18 <col:54, line:127:5>
|   |-ParenExpr 0x56544b71abc8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x56544b71ab98 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x56544b71a888 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x56544b71a860 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x56544b71a848 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x56544b71a830 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x56544b71a800 <col:31> 'Router *' lvalue ->_router 0x56544b7186e0
|   |   |         `-CXXThisExpr 0x56544b71a7f0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x56544b71a8e8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56544b71a8c8 <col:48> 'int' 0
|   |   `-CallExpr 0x56544b71aaf8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x56544b71aae0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56544b71aac0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56544b243460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56544b71ab38 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b71a958 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x56544b71ab50 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b71a978 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x56544b71ab68 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56544b71a9b0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x56544b71ab80 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56544b71aaa8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56544b71aa90 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56544b71aa48 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x56544b71ac60 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x56544b71abf8 <col:9> 'Router *' lvalue ->_router 0x56544b7186e0
|   | | `-CXXThisExpr 0x56544b71abe8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x56544b71ac48 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56544b71ac28 <col:19> 'Router *' lvalue ParmVar 0x56544b70d278 'r' 'Router *'
|   `-BinaryOperator 0x56544b71acf8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x56544b71ac90 <col:9> 'int' lvalue ->_eindex 0x56544b718748
|     | `-CXXThisExpr 0x56544b71ac80 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x56544b71ace0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x56544b71acc0 <col:19> 'int' lvalue ParmVar 0x56544b70d2f8 'eindex' 'int'
|-CXXMethodDecl 0x56544b70d550 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x56544b70d488 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x56544b70d620 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x56544b70d6e8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x56544b70d788 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x56544b70d9d8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x56544b70d850 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x56544b70d8d0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x56544b70da88 <col:20>
| `-OptimizeNoneAttr 0x56544b70dae0 <col:30>
|-CXXMethodDecl 0x56544b70dbe8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x56544b70db20 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x56544b70dc90 <col:20>
| `-OptimizeNoneAttr 0x56544b70dce8 <col:30>
|-CXXMethodDecl 0x56544b70ddb8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x56544b70dd28 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x56544b70de60 <col:20>
| `-OptimizeNoneAttr 0x56544b70deb8 <col:30>
|-CXXMethodDecl 0x56544b70e048 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x56544b70def0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x56544b70df70 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x56544b70e1d8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x56544b70e110 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x56544b70e328 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x56544b70e298 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x56544b70e478 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x56544b70e3e8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x56544b70e5c8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x56544b70e538 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x56544b70e888 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x56544b70e680 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x56544b70e700 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x56544b70e7a8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x56544b70e960 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x56544b70ea20 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x56544b70ecf0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56544b70eba0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x56544b70ec18 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x56544b70ee18 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x56544b70eff0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x56544b70eed0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x56544b70ef50 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x56544b70f1d8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x56544b70f0b8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x56544b70f138 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x56544b70f548 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x56544b70f298 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56544b70f310 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56544b70f390 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56544b71a300 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56544b71a2e0 <col:106> 'int' 0
| `-ParmVarDecl 0x56544b70f408 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56544b71a338 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56544b71a318 <col:126> 'int' 0
|-CXXMethodDecl 0x56544b70f8e8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56544b70f618 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56544b70f6b0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56544b70f730 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x56544b70f7a8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56544b71a370 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56544b71a350 <col:114> 'int' 0
|-CXXMethodDecl 0x56544b70fc78 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56544b70f9c0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x56544b70fa38 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56544b70fab8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x56544b71a388 <col:96> 'int' 0
| `-ParmVarDecl 0x56544b70fb30 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56544b71a3c8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56544b71a3a8 <col:116> 'int' 0
|-CXXMethodDecl 0x56544b70fff8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x56544b70fd48 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x56544b70fdc0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56544b70fe40 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56544b71a400 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56544b71a3e0 <col:109> 'int' 0
| `-ParmVarDecl 0x56544b70feb8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56544b71a438 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56544b71a418 <col:129> 'int' 0
|-CXXMethodDecl 0x56544b710378 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56544b7100c8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x56544b710140 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56544b7101c0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x56544b710238 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56544b71a470 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56544b71a450 <col:117> 'int' 0
|-CXXMethodDecl 0x56544b710708 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56544b710450 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56544b7104c8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56544b710548 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x56544b71a488 <col:99> 'int' 0
| `-ParmVarDecl 0x56544b7105c0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56544b71a4c8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56544b71a4a8 <col:119> 'int' 0
|-CXXMethodDecl 0x56544b710b28 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x56544b7107d8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x56544b710858 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x56544b7108d0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56544b710950 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56544b71a500 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56544b71a4e0 <col:108> 'int' 0
| `-ParmVarDecl 0x56544b7109d0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x56544b71a538 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x56544b71a518 <col:141> 'int' 0
|-CXXMethodDecl 0x56544b710f48 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x56544b710c00 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x56544b710c80 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x56544b710cf8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56544b710d78 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x56544b710df8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x56544b71a550 <col:121> 'int' 0
|-CXXMethodDecl 0x56544b711378 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x56544b711028 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x56544b7110a8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x56544b711120 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56544b7111a0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x56544b71a570 <col:98> 'int' 0
| `-ParmVarDecl 0x56544b711220 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x56544b71a590 <col:123> 'int' 0
|-CXXMethodDecl 0x56544b711640 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x56544b711450 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56544b7114d0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x56544b711550 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x56544b71a5b0 <col:80> 'int' 0
|-EnumDecl 0x56544b7116f8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x56544b711800 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56544b711a90 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b7117e0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x56544b7117c0 <col:42> 'int' 1
| |-EnumConstantDecl 0x56544b711890 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56544b711aa8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b711870 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x56544b711850 <col:40> 'int' 2
| |-EnumConstantDecl 0x56544b711920 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56544b711ac0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b711900 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x56544b7118e0 <col:44> 'int' 4
| |-EnumConstantDecl 0x56544b7119b0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56544b711ad8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b711990 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x56544b711970 <col:36> 'int' 7
| `-EnumConstantDecl 0x56544b711a40 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x56544b711af0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56544b711a20 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x56544b711a00 <col:34> 'int' 6
|-CXXMethodDecl 0x56544b711da8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x56544b711b18 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x56544b711bb8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x56544b711c38 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x56544b711cb0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x56544b71a668 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x56544b71a650 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x56544b71a638 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x56544b71a618 <col:98, col:105> 'String' (CXXTemporary 0x56544b71a618)
|           `-CXXTemporaryObjectExpr 0x56544b71a5e0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x56544b712048 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x56544b711e78 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x56544b711ef0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x56544b711f68 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x56544b71a718 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x56544b71a700 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x56544b71a6e8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x56544b71a6c8 <col:94, col:101> 'String' (CXXTemporary 0x56544b71a6c8)
| |         `-CXXTemporaryObjectExpr 0x56544b71a690 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x56544b71af00 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x56544b71ae78 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x56544b71ae48 <col:9> '<bound member function type>' ->add_task_handlers 0x56544b711da8
|     | `-CXXThisExpr 0x56544b71ae38 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x56544b71aeb8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x56544b71adb8 <col:27> 'Task *' lvalue ParmVar 0x56544b711e78 'task' 'Task *'
|     |-ImplicitCastExpr 0x56544b71aed0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x56544b71add8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x56544b711ef0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x56544b71aee8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x56544b71adf8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x56544b711a40 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x56544b71ae18 <col:62> 'const String' lvalue ParmVar 0x56544b711f68 'prefix' 'const String &'
|-CXXMethodDecl 0x56544b712258 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x56544b712110 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x56544b712188 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x56544b71a7c8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x56544b71a7b0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x56544b71a798 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x56544b71a778 <col:70, col:77> 'String' (CXXTemporary 0x56544b71a778)
| |         `-CXXTemporaryObjectExpr 0x56544b71a740 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x56544b71b0d8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x56544b71b050 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x56544b71b020 <col:9> '<bound member function type>' ->add_task_handlers 0x56544b711da8
|     | `-CXXThisExpr 0x56544b71b010 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x56544b71b090 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x56544b71af90 <col:27> 'Task *' lvalue ParmVar 0x56544b712110 'task' 'Task *'
|     |-ImplicitCastExpr 0x56544b71b0a8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x56544b71afb0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x56544b71b0c0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x56544b71afd0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x56544b711a40 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x56544b71aff0 <col:57> 'const String' lvalue ParmVar 0x56544b712188 'prefix' 'const String &'
|-CXXMethodDecl 0x56544b712538 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x56544b712320 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56544b7123a0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56544b712418 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x56544b7127e8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x56544b712608 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56544b712688 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56544b712708 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x56544b712ad8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x56544b7128b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56544b712938 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56544b7129b0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x56544b712d88 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x56544b712ba8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56544b712c28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56544b712ca8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x56544b713038 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x56544b712e58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56544b712ed8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56544b712f58 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x56544b7132e8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x56544b713108 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56544b713188 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56544b713200 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x56544b713598 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x56544b7133b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56544b713438 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56544b7134b8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x56544b7138a8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x56544b7136c0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56544b713740 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56544b7137c0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x56544b713b88 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x56544b713978 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56544b7139f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56544b713aa0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x56544b713e68 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x56544b713c58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56544b713cd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56544b713d80 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x56544b7140d0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x56544b713f38 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x56544b713fb8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x56544b714030 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x56544b714378 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x56544b7141a0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x56544b714220 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x56544b714298 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x56544b714628 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x56544b714448 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56544b7144c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56544b714548 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x56544b7148d8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x56544b7146f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56544b714778 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56544b7147f0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x56544b714b88 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x56544b7149a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56544b714a28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56544b714aa0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x56544b714e58 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x56544b714c58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56544b714cd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56544b714d78 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x56544b715188 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x56544b714f28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56544b714fa8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x56544b715020 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x56544b715098 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56544b71a7e0 <col:93> 'bool' false
|-CXXMethodDecl 0x56544b715370 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56544b715258 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x56544b7152d8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x56544b715548 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56544b715430 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x56544b7154b0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x56544b715828 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56544b715608 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x56544b715680 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x56544b715700 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x56544b715778 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x56544b715b18 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56544b7158f8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x56544b715970 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x56544b7159f0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x56544b715a68 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x56544b715d50 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x56544b715bf0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x56544b715c70 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x56544b715f38 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x56544b715e18 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x56544b715e98 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x56544b715fe8 prev 0x56544b70d788 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56544b7160e0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x56544b716170 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x56544b7161e8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x56544b7162a8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x56544b716370 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x56544b7164e8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x56544b716420 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x56544b716590 <col:24>
| | `-OptimizeNoneAttr 0x56544b7165e8 <col:34>
| |-CXXMethodDecl 0x56544b716630 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x56544b7168e8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x56544b7166e0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x56544b716758 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x56544b7167d8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x56544b7169a0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x56544b7169d8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x56544b716a40 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x56544b716ac8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x56544b716de8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x56544b716b80 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x56544b716bf8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x56544b716c70 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x56544b716cf0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x56544b716f00 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x56544b71e878 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x56544b71e878
| | `-ParmVarDecl 0x56544b71e988 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x56544b71ea28 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x56544b71ea28
| | `-ParmVarDecl 0x56544b71eb38 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x56544b803db0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56544b716f78 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x56544b717018 <col:38> "" ""
|-CXXMethodDecl 0x56544b7170a8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x56544b717148 <col:44> "" ""
|-AccessSpecDecl 0x56544b7171b8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x56544b7171e0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x56544b7172e0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x56544b717330 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56544b7172c0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x56544b7172a0 <col:27> 'int' 4
|-FieldDecl 0x56544b7173e8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x56544b717598 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x56544b717650 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x56544b7186e0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x56544b718748 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x56544b718898 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x56544b7187d8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x56544b718a48 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x56544b718958 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x56544b718c28 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x56544b718b08 <col:20> col:23 'int'
| `-ParmVarDecl 0x56544b718b88 <col:25> col:28 'int'
|-CXXMethodDecl 0x56544b718ed0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x56544b718cf0 <col:23> col:26 'int'
| |-ParmVarDecl 0x56544b718d70 <col:28> col:31 'int'
| `-ParmVarDecl 0x56544b718de8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x56544b718f88 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x56544b719050 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x56544b7190a0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x56544b7190f0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x56544b7192d0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x56544b719180 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x56544b7191f8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56544b719578 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x56544b719398 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x56544b719418 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x56544b719490 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x56544b719798 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x56544b719648 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x56544b7196c8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x56544b719ad0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x56544b719858 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x56544b7198d8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x56544b719950 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x56544b7199d0 <col:57> col:60 'int'
|-CXXMethodDecl 0x56544b719cb8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56544b719ba0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x56544b719c20 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x56544b719e08 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x56544b719d78 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x56544b71a188 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x56544b719ec8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x56544b719f48 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x56544b719fc0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x56544b71a040 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x56544b71a2a0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | struct WebGen::(anonymous at ../elements/local/webgen.hh:109:3)
         0 |   int initiated
         4 |   int completed
         8 |   int reset
        12 |   int timeout
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | class WebGen
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class Timer _timer
       112 |     int _schedpos1
       120 |     class Timestamp _expiry_s
       120 |       union Timestamp::rep_t _t
       120 |         int64_t x
       128 |     union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
       128 |       TimerCallback callback
       136 |     void * _thunk
       144 |     class Element * _owner
       152 |     class RouterThread * _thread
       160 |   class IPAddress _src_prefix
       160 |     uint32_t _addr
       164 |   class IPAddress _mask
       164 |     uint32_t _addr
       168 |   class IPAddress _dst
       168 |     uint32_t _addr
       172 |   class atomic_uint32_t _id
       172 |     uint32_t _val
       176 |   class WebGen::CB *[1024] cbhash
      8368 |   class WebGen::CB * cbfree
      8376 |   class WebGen::CB * rexmit_head
      8384 |   class WebGen::CB * rexmit_tail
      8392 |   int start_interval
      8400 |   class Timestamp start_tv
      8400 |     union Timestamp::rep_t _t
      8400 |       int64_t x
      8408 |   class Timestamp perf_tv
      8408 |     union Timestamp::rep_t _t
      8408 |       int64_t x
      8416 |   struct WebGen::(anonymous at ../elements/local/webgen.hh:109:3) perfcnt
      8416 |     int initiated
      8420 |     int completed
      8424 |     int reset
      8428 |     int timeout
           | [sizeof=8432, dsize=8432, align=8,
           |  nvsize=8432, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b6a1930 prev 0x56544b698770 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56544b6a1a28 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x56544b6a1ac8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x56544b6a8890 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56544b6a8c78 <col:11>
|-CXXConstructorDecl 0x56544b6a8970 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56544b6a8a58 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x56544b6a93c0 <col:11>
|-CXXConstructorDecl 0x56544b6a8af8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56544b6a8c08 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x56544b6aac18 <col:11>
|-CXXDestructorDecl 0x56544b6a9f28 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56544b3b08b8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56544b3b09c8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x56544b3b1290 <col:11>
|   `-ReturnStmt 0x56544b3b1280 <col:11>
|     `-UnaryOperator 0x56544b3b1268 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56544b3b1258 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x56544b3b0a38 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x56544b3b0b48 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x56544b73ef50 <col:11>
    `-ReturnStmt 0x56544b73ef40 <col:11>
      `-UnaryOperator 0x56544b73ef28 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x56544b73ef18 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b697928 prev 0x56544b697638 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56544b697a20 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x56544b697ab0 <col:19, col:25> col:19 public
|-TypedefDecl 0x56544b697ae8 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x56544b2fcaf0 'int32_t' sugar
|   |-Typedef 0x56544b20f328 'int32_t'
|   `-TypedefType 0x56544b1e8510 '__int32_t' sugar
|     |-Typedef 0x56544b1e8128 '__int32_t'
|     `-BuiltinType 0x56544b1a6580 'int'
|-TypedefDecl 0x56544b697b50 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x56544b2fccb0 'int64_t' sugar
|   |-Typedef 0x56544b20f390 'int64_t'
|   `-TypedefType 0x56544b1e8630 '__int64_t' sugar
|     |-Typedef 0x56544b1e8208 '__int64_t'
|     `-BuiltinType 0x56544b1a65a0 'long'
|-EnumDecl 0x56544b697ba8 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x56544b697d20 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x56544b697d00 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x56544b697cd8 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x56544b697cc0 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x56544b697c90 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x56544b697e18 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x56544b697df8 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x56544b697dd0 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x56544b697db8 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x56544b697d90 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x56544b697d70 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x56544b697e68 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x56544b697f70 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x56544b6984c0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b697f50 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x56544b697f30 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x56544b698000 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x56544b6984d8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b697fe0 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x56544b697fc0 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x56544b698090 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x56544b6984f0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b698070 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x56544b698050 <col:25> 'int' 1000
| |-EnumConstantDecl 0x56544b698120 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x56544b698508 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b698100 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x56544b6980e0 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x56544b6981b0 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x56544b698520 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b698190 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x56544b698170 <col:25> 'int' 1000
| |-EnumConstantDecl 0x56544b698240 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x56544b698538 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b698220 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x56544b698200 <col:24> 'int' 1000
| |-EnumConstantDecl 0x56544b6982d0 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x56544b698550 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b6982b0 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x56544b698290 <col:26> 'int' EnumConstant 0x56544b697f70 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x56544b6983a0 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x56544b698568 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b698380 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x56544b698360 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x56544b698320 <col:27> 'int' EnumConstant 0x56544b6982d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x56544b698340 <col:44> 'int' EnumConstant 0x56544b698240 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x56544b698470 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x56544b698580 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56544b698450 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x56544b698430 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x56544b6983f0 <col:27> 'int' EnumConstant 0x56544b6982d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x56544b698410 <col:44> 'int' EnumConstant 0x56544b698120 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x56544b698598 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x56544b6986a0 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x56544b6986f0 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56544b698680 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x56544b698660 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b6982d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x56544b698718 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x56544b2fc720 'uninitialized_type'
|   `-CXXRecord 0x56544b2fc688 'uninitialized_type'
|-CXXRecordDecl 0x56544b698770 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x56544b698880 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x56544b6a2a78 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56544b6a8c88 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56544b6a8da8 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x56544b6a8d60 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x56544b6a8cf0 <col:9> '<bound member function type>' ->assign 0x56544b69d4c8
|     | `-CXXThisExpr 0x56544b6a8ce0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x56544b6a8d20 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x56544b6a8d90 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x56544b6a8d40 <col:19> 'int' 0
|-CXXConstructorDecl 0x56544b698ac8 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x56544b698940 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x56544b6989b8 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x56544b6a45c0 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56544b6a45a0 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x56544b6a2a78 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56544b6a8dc0 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56544b6a8f10 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x56544b6a8e98 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x56544b6a8e28 <col:9> '<bound member function type>' ->assign 0x56544b69d4c8
|     | `-CXXThisExpr 0x56544b6a8e18 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x56544b6a8ee0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x56544b6a8ec8 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x56544b6a8e58 <col:16> 'long' lvalue ParmVar 0x56544b698940 'sec' 'long'
|     `-ImplicitCastExpr 0x56544b6a8ef8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x56544b6a8e78 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x56544b6989b8 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x56544b698d28 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56544b698b98 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x56544b698c10 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x56544b6a45f8 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56544b6a45d8 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x56544b6a2a78 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56544b6a8f28 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56544b6a9060 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x56544b6a9000 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x56544b6a8f90 <col:9> '<bound member function type>' ->assign 0x56544b69d4c8
|     | `-CXXThisExpr 0x56544b6a8f80 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x56544b6a9030 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x56544b6a8fc0 <col:16> 'int' lvalue ParmVar 0x56544b698b98 'sec' 'int'
|     `-ImplicitCastExpr 0x56544b6a9048 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x56544b6a8fe0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x56544b698c10 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x56544b698f88 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x56544b698df8 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x56544b698e70 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x56544b6a4630 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56544b6a4610 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x56544b6a2a78 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56544b6a9078 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56544b6a91c8 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x56544b6a9150 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x56544b6a90e0 <col:9> '<bound member function type>' ->assign 0x56544b69d4c8
|     | `-CXXThisExpr 0x56544b6a90d0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x56544b6a9198 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x56544b6a9180 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x56544b6a9110 <col:16> 'unsigned long' lvalue ParmVar 0x56544b698df8 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x56544b6a91b0 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x56544b6a9130 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x56544b698e70 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x56544b69a120 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x56544b699058 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x56544b6990d0 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x56544b6a4668 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56544b6a4648 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x56544b6a2a78 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56544b6a91e0 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56544b6a9330 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x56544b6a92b8 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x56544b6a9248 <col:9> '<bound member function type>' ->assign 0x56544b69d4c8
|     | `-CXXThisExpr 0x56544b6a9238 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x56544b6a9300 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x56544b6a92e8 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x56544b6a9278 <col:16> 'unsigned int' lvalue ParmVar 0x56544b699058 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x56544b6a9318 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x56544b6a9298 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x56544b6990d0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x56544b69a280 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x56544b69a1f0 <col:31> col:37 'double'
|-CXXConstructorDecl 0x56544b69a418 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x56544b69a358 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x56544b69a648 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x56544b69a550 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x56544b69a7f8 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x56544b69a738 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x56544b6a2a78 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56544b6a93d0 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x56544b6a9348 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x56544b69a738 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x56544b6a9430 <col:19, line:214:5>
|-CXXConstructorDecl 0x56544b69a9c8 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x56544b69a908 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x56544b6a2a78 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56544b6a9440 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56544b6a94f0 <col:53, line:219:5>
|   `-CStyleCastExpr 0x56544b6a94c8 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x56544b6a9498 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x56544b69a908 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x56544b69abb8 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x56544b69ab30 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x56544b6976d0 'Timestamp'
|   | `-CXXRecord 0x56544b697928 'Timestamp'
|   `-ParenType 0x56544b69aad0 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x56544b69aaa0 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x56544b697c70 'Timestamp::seconds_type' sugar
|         |-Typedef 0x56544b697ae8 'seconds_type'
|         `-TypedefType 0x56544b2fcaf0 'int32_t' sugar
|           |-Typedef 0x56544b20f328 'int32_t'
|           `-TypedefType 0x56544b1e8510 '__int32_t' sugar
|             |-Typedef 0x56544b1e8128 '__int32_t'
|             `-BuiltinType 0x56544b1a6580 'int'
|-CXXConversionDecl 0x56544b69acf8 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x56544b69adc8 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x56544b6a95f8 <col:37, line:231:5>
|   `-ReturnStmt 0x56544b6a95e8 <line:227:9, col:23>
|     `-BinaryOperator 0x56544b6a95c8 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x56544b6a9598 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x56544b6a9548 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x56544b6a1ac8
|       |   `-MemberExpr 0x56544b6a9518 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x56544b6a2a78
|       |     `-CXXThisExpr 0x56544b6a9508 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x56544b6a95b0 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x56544b6a9578 <col:23> 'int' 0
|-CXXMethodDecl 0x56544b69ae88 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x56544b69af48 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x56544b69b008 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x56544b69b0c8 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x56544b69b188 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x56544b69b2f8 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x56544b69b238 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x56544b69b440 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x56544b69b3b0 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b69b508 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x56544b69b5a8 <col:54> "" ""
|-CXXMethodDecl 0x56544b69b638 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x56544b69b6d8 <col:54> "" ""
|-CXXMethodDecl 0x56544b69b768 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x56544b69b808 <col:54> "" ""
|-CXXMethodDecl 0x56544b69b908 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x56544b69b9d8 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x56544b69bb08 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x56544b69bc00 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x56544b69bd38 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x56544b6a9810 <col:39, line:271:5>
|   `-ReturnStmt 0x56544b6a9800 <line:267:9, col:61>
|     `-CallExpr 0x56544b6a97a0 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x56544b6a9788 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56544b6a9610 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x56544b6a2da8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x56544b6a97d0 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x56544b6a9670 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x56544b6a1ac8
|       |   `-MemberExpr 0x56544b6a9640 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x56544b6a2a78
|       |     `-CXXThisExpr 0x56544b6a9630 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x56544b6a97e8 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x56544b6a9710 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x56544b6a96e0 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x56544b6a96a0 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b6982d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x56544b6a96f8 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x56544b6a96c0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b698240 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56544b69bdf8 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x56544b6a99d0 <col:39, line:279:5>
|   `-ReturnStmt 0x56544b6a99c0 <line:275:9, col:61>
|     `-CallExpr 0x56544b6a9960 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x56544b6a9948 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56544b6a9828 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x56544b6a2da8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x56544b6a9990 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x56544b6a9888 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x56544b6a1ac8
|       |   `-MemberExpr 0x56544b6a9858 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x56544b6a2a78
|       |     `-CXXThisExpr 0x56544b6a9848 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x56544b6a99a8 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x56544b6a9928 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x56544b6a98f8 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x56544b6a98b8 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b6982d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x56544b6a9910 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x56544b6a98d8 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b698120 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56544b69beb8 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x56544b6a9b68 <col:39, line:287:5>
|   `-ReturnStmt 0x56544b6a9b58 <line:283:9, col:53>
|     `-BinaryOperator 0x56544b6a9b38 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x56544b6a9b08 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x56544b6a9a28 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x56544b6a1ac8
|       |   `-MemberExpr 0x56544b6a99f8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x56544b6a2a78
|       |     `-CXXThisExpr 0x56544b6a99e8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x56544b6a9b20 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x56544b6a9ae8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x56544b6a9ac8 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x56544b6a9a98 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x56544b6a9a58 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b697f70 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x56544b6a9ab0 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x56544b6a9a78 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b6982d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56544b69bfa8 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x56544b6aae00 <col:40, line:293:5>
|   |-DeclStmt 0x56544b6a9cb0 <line:291:9, col:48>
|   | `-VarDecl 0x56544b6a9b90 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x56544b6a9c90 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x56544b6a9c38 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x56544b6a9c08 <col:22> '<bound member function type>' ->subsec 0x56544b69af48
|   |     |   `-CXXThisExpr 0x56544b6a9bf8 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x56544b6a9c78 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x56544b6a9c58 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b6983a0 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x56544b6aadf0 <line:292:9, col:70>
|     `-ExprWithCleanups 0x56544b6aadd8 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x56544b6aada8 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56544b6aad90 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x56544b6aad70 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x56544b6aad40 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x56544b6aaad8 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x56544b6aaac0 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x56544b6a9cc8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x56544b6a9b90 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x56544b6aace0 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x56544b6aacc8 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x56544b6aac98 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x56544b6aaaf0 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x56544b6aaa60 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x56544b6aaa48 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x56544b6aa9f8 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x56544b697878 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x56544b6aa998 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x56544b6a9cf8 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x56544b6a9ce8 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x56544b6aa9e0 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x56544b6aa9c8 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x56544b6aa1b8 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x56544b6a9d20 <col:39> 'int' 0
|               |               `-BinaryOperator 0x56544b6a9db0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x56544b6a9d80 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x56544b6a9d40 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b6983a0 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x56544b6a9d98 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x56544b6a9d60 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x56544b6a9b90 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x56544b6aad10 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x56544b6aaaa8 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x56544b6aaa98 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x56544b69c068 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x56544b6ab358 <col:40, line:302:5>
|   |-DeclStmt 0x56544b6aaf50 <line:297:9, col:48>
|   | `-VarDecl 0x56544b6aae30 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x56544b6aaf30 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x56544b6aaed8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x56544b6aaea8 <col:22> '<bound member function type>' ->subsec 0x56544b69af48
|   |     |   `-CXXThisExpr 0x56544b6aae98 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x56544b6aaf18 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x56544b6aaef8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b698470 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x56544b6ab348 <line:298:9, col:70>
|     `-ExprWithCleanups 0x56544b6ab330 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x56544b6ab300 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56544b6ab2e8 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x56544b6ab2c8 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x56544b6ab298 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x56544b6ab1c0 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x56544b6ab1a8 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x56544b6aaf68 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x56544b6aae30 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x56544b6ab238 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x56544b6ab220 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x56544b6ab1f0 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x56544b6ab1d8 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x56544b6ab148 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x56544b6ab130 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x56544b6ab110 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x56544b697878 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x56544b6ab0b0 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x56544b6aaf98 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x56544b6aaf88 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x56544b6ab0f8 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x56544b6ab0e0 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x56544b6ab070 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x56544b6aafc0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x56544b6ab050 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x56544b6ab020 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x56544b6aafe0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b698470 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x56544b6ab038 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x56544b6ab000 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x56544b6aae30 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x56544b6ab268 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x56544b6ab190 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x56544b6ab180 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x56544b69c128 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x56544b6ab3e0 <col:40, line:306:5>
|   `-ReturnStmt 0x56544b6ab3d0 <line:305:9, col:17>
|     `-CXXConstructExpr 0x56544b6ab3a0 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x56544b6ab388 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56544b6ab378 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x56544b69c2c8 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x56544b69c1d8 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x56544b69c498 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x56544b69c3a0 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x56544b69c588 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x56544b69c6f8 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x56544b69c638 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x56544b6ab528 <col:56, line:320:5>
|   `-ReturnStmt 0x56544b6ab518 <line:319:9, col:32>
|     `-ExprWithCleanups 0x56544b6ab500 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x56544b6ab4d0 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56544b6ab4b8 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x56544b6ab478 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x56544b6ab448 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x56544b6ab408 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56544b69c638 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x56544b6ab460 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x56544b6ab428 <col:31> 'int' 0
|-CXXMethodDecl 0x56544b69c938 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x56544b69c7b0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56544b69c828 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56544b6ab6f8 <col:72, line:326:5>
|   `-ReturnStmt 0x56544b6ab6e8 <line:325:9, col:51>
|     `-ExprWithCleanups 0x56544b6ab6d0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x56544b6ab6a0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56544b6ab688 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x56544b6ab648 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x56544b6ab630 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x56544b6ab550 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56544b69c7b0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x56544b6ab5f0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x56544b6ab5d8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x56544b6ab570 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56544b6a1220 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x56544b6ab618 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x56544b6ab590 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x56544b69c828 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b69cae8 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x56544b69c9f8 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x56544b6abdc0 <col:56, line:337:5>
|   |-DeclStmt 0x56544b6ab9f8 <line:329:9, col:51>
|   | `-VarDecl 0x56544b6ab720 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x56544b6ab9e0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x56544b6ab9b0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x56544b6ab998 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x56544b6ab980 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x56544b6ab950 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x56544b6ab938 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x56544b6ab920 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x56544b6ab810 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x56544b6abbb0 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x56544b6aba60 <col:9, col:14> 'int64_t':'long' lvalue .x 0x56544b6a1ac8
|   | | `-MemberExpr 0x56544b6aba30 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x56544b6a2a78
|   | |   `-DeclRefExpr 0x56544b6aba10 <col:9> 'Timestamp' lvalue Var 0x56544b6ab720 't' 'Timestamp'
|   | `-BinaryOperator 0x56544b6abb90 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x56544b6abb60 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56544b6aba90 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x56544b69c9f8 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x56544b6abb78 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x56544b6abb40 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x56544b6abb20 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x56544b6abaf0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x56544b6abab0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b6982d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x56544b6abb08 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x56544b6abad0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b698240 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x56544b6abda8 <line:336:9, col:16>
|     `-CXXConstructExpr 0x56544b6abd78 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x56544b6abd60 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x56544b6abd40 <col:16> 'Timestamp' lvalue Var 0x56544b6ab720 't' 'Timestamp'
|-CXXMethodDecl 0x56544b69ccb0 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x56544b69cba0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56544b69cc18 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56544b6abf78 <col:72, line:343:5>
|   `-ReturnStmt 0x56544b6abf68 <line:342:9, col:51>
|     `-ExprWithCleanups 0x56544b6abf50 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x56544b6abf20 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56544b6abf08 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x56544b6abec8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x56544b6abeb0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x56544b6abdf8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56544b69cba0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x56544b6abe70 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x56544b6abe58 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x56544b6abe18 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56544b6a1368 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x56544b6abe98 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x56544b6abe38 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x56544b69cc18 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b69ce00 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x56544b69cd70 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x56544b6ac3c0 <col:56, line:354:5>
|   |-DeclStmt 0x56544b6ac168 <line:346:9, col:51>
|   | `-VarDecl 0x56544b6abfa0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x56544b6ac150 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x56544b6ac120 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x56544b6ac108 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x56544b6ac0f0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x56544b6ac0c0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x56544b6ac0a8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x56544b6ac090 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x56544b6ac060 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x56544b6ac320 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x56544b6ac1d0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x56544b6a1ac8
|   | | `-MemberExpr 0x56544b6ac1a0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x56544b6a2a78
|   | |   `-DeclRefExpr 0x56544b6ac180 <col:9> 'Timestamp' lvalue Var 0x56544b6abfa0 't' 'Timestamp'
|   | `-BinaryOperator 0x56544b6ac300 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x56544b6ac2d0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56544b6ac200 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x56544b69cd70 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x56544b6ac2e8 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x56544b6ac2b0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x56544b6ac290 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x56544b6ac260 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x56544b6ac220 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b6982d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x56544b6ac278 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x56544b6ac240 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b698120 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x56544b6ac3a8 <line:353:9, col:16>
|     `-CXXConstructExpr 0x56544b6ac378 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x56544b6ac360 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x56544b6ac340 <col:16> 'Timestamp' lvalue Var 0x56544b6abfa0 't' 'Timestamp'
|-CXXMethodDecl 0x56544b69cfc8 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x56544b69ceb8 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56544b69cf30 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56544b6ac578 <col:72, line:360:5>
|   `-ReturnStmt 0x56544b6ac568 <line:359:9, col:51>
|     `-ExprWithCleanups 0x56544b6ac550 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x56544b6ac520 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56544b6ac508 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x56544b6ac4c8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x56544b6ac4b0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x56544b6ac3f8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56544b69ceb8 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x56544b6ac470 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x56544b6ac458 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x56544b6ac418 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56544b6a14b0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x56544b6ac498 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x56544b6ac438 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x56544b69cf30 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b69d118 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x56544b69d088 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x56544b6b8ee8 <col:56, line:371:5>
|   |-DeclStmt 0x56544b6ac768 <line:363:9, col:51>
|   | `-VarDecl 0x56544b6ac5a0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x56544b6ac750 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x56544b6ac720 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x56544b6ac708 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x56544b6ac6f0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x56544b6ac6c0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x56544b6ac6a8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x56544b6ac690 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x56544b6ac660 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x56544b6b8e48 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x56544b6ac7d0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x56544b6a1ac8
|   | | `-MemberExpr 0x56544b6ac7a0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x56544b6a2a78
|   | |   `-DeclRefExpr 0x56544b6ac780 <col:9> 'Timestamp' lvalue Var 0x56544b6ac5a0 't' 'Timestamp'
|   | `-CallExpr 0x56544b6b8de8 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x56544b6b8dd0 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x56544b6ac800 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x56544b6a2da8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x56544b6b8e18 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56544b6ac820 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x56544b69d088 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x56544b6b8e30 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x56544b6b8db0 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x56544b6b8d80 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x56544b6ac840 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b697f70 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x56544b6b8d98 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x56544b6ac860 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b6982d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x56544b6b8ed0 <line:370:9, col:16>
|     `-CXXConstructExpr 0x56544b6b8ea0 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x56544b6b8e88 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x56544b6b8e68 <col:16> 'Timestamp' lvalue Var 0x56544b6ac5a0 't' 'Timestamp'
|-CXXMethodDecl 0x56544b69d208 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x56544b6b9028 <col:39, line:377:5>
|   `-ReturnStmt 0x56544b6b9018 <line:376:9, col:30>
|     `-ExprWithCleanups 0x56544b6b9000 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x56544b6b8fd0 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56544b6b8fb8 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x56544b6b8f78 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x56544b6b8f20 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x56544b6b8f60 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x56544b6b8f40 <col:29> 'int' 1
|-CXXMethodDecl 0x56544b69d2c8 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x56544b6b9108 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x56544b6b90c0 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x56544b6b9050 <col:9> '<bound member function type>' ->assign 0x56544b69d4c8
|     | `-CXXThisExpr 0x56544b6b9040 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x56544b6b9080 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x56544b6b90f0 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x56544b6b90a0 <col:19> 'int' 0
|-CXXMethodDecl 0x56544b69d4c8 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56544b69d378 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56544b69d3f0 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x56544b6a46a0 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56544b6a4680 <col:60> 'int' 0
| `-CompoundStmt 0x56544b6b9300 <col:63, line:395:5>
|   `-BinaryOperator 0x56544b6b92e0 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x56544b6b9160 <col:9, col:12> 'int64_t':'long' lvalue .x 0x56544b6a1ac8
|     | `-MemberExpr 0x56544b6b9130 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x56544b6a2a78
|     |   `-CXXThisExpr 0x56544b6b9120 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x56544b6b92c0 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x56544b6b9250 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x56544b6b91f0 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x56544b6b91d8 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x56544b6b91c0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x56544b6b9190 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56544b69d378 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x56544b6b9238 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x56544b6b9218 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b6982d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x56544b6b92a8 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x56544b6b9290 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x56544b6b9270 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x56544b69d3f0 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b69d698 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56544b69d588 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56544b69d600 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56544b6b9458 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x56544b6b9410 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x56544b6b9328 <col:9> '<bound member function type>' ->assign 0x56544b69d4c8
|     | `-CXXThisExpr 0x56544b6b9318 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x56544b6b9440 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x56544b6b9358 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56544b69d588 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x56544b6b93d0 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x56544b6b93b8 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56544b6b9378 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56544b6a1368 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x56544b6b93f8 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x56544b6b9398 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x56544b69d600 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b69d868 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56544b69d758 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56544b69d7d0 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56544b6b95b0 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x56544b6b9568 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x56544b6b9480 <col:9> '<bound member function type>' ->assign 0x56544b69d4c8
|     | `-CXXThisExpr 0x56544b6b9470 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x56544b6b9598 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x56544b6b94b0 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56544b69d758 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x56544b6b9528 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x56544b6b9510 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56544b6b94d0 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56544b6a14b0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x56544b6b9550 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x56544b6b94f0 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x56544b69d7d0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b69da38 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56544b69d928 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56544b69d9a0 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x56544b6a46d8 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56544b6a46b8 <col:57> 'int' 0
| `-DeprecatedAttr 0x56544b69dae8 <col:75> "" ""
|-CXXMethodDecl 0x56544b69dc78 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56544b69db68 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56544b69dbe0 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56544b69dd28 <col:74> "" ""
|-CXXMethodDecl 0x56544b69deb8 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56544b69dda8 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56544b69de20 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56544b69df68 <col:74> "" ""
|-CXXMethodDecl 0x56544b69dff8 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x56544b69e098 <col:42> "" ""
|-CXXMethodDecl 0x56544b6a08d0 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x56544b6a07b0 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x56544b6a0830 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x56544b6a09a0 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x56544b6a0a60 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x56544b6a0b00 <col:20>
| `-OptimizeNoneAttr 0x56544b6a0b58 <col:30>
|-CXXMethodDecl 0x56544b6a0ba0 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x56544b6a0c60 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x56544b6a0d20 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x56544b6a0de0 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x56544b6a0ea0 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x56544b6a0f60 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x56544b6a1020 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x56544b6a10e0 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x56544b6a1220 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56544b6a1190 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56544b6b96f8 <col:58, line:512:5>
|   `-ReturnStmt 0x56544b6b96e8 <line:511:9, col:53>
|     `-BinaryOperator 0x56544b6b96c8 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x56544b6b9698 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x56544b6b95c8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56544b6a1190 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x56544b6b96b0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x56544b6b9678 <col:23, col:53> 'int'
|           `-BinaryOperator 0x56544b6b9658 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x56544b6b9628 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x56544b6b95e8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b6982d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x56544b6b9640 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x56544b6b9608 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b698240 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56544b6a1368 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56544b6a12d8 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56544b6b9840 <col:58, line:516:5>
|   `-ReturnStmt 0x56544b6b9830 <line:515:9, col:53>
|     `-BinaryOperator 0x56544b6b9810 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x56544b6b97e0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x56544b6b9710 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56544b6a12d8 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x56544b6b97f8 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x56544b6b97c0 <col:23, col:53> 'int'
|           `-BinaryOperator 0x56544b6b97a0 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x56544b6b9770 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x56544b6b9730 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b6982d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x56544b6b9788 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x56544b6b9750 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b698120 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56544b6a14b0 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56544b6a1420 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56544b6b9988 <col:58, line:520:5>
|   `-ReturnStmt 0x56544b6b9978 <line:519:9, col:53>
|     `-BinaryOperator 0x56544b6b9958 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x56544b6b9928 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x56544b6b9858 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56544b6a1420 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x56544b6b9940 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x56544b6b9908 <col:23, col:53> 'int'
|           `-BinaryOperator 0x56544b6b98e8 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x56544b6b98b8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x56544b6b9878 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b697f70 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x56544b6b98d0 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x56544b6b9898 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b6982d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56544b6a15f8 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56544b6a1568 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56544b6b9ad0 <col:60, line:524:5>
|   `-ReturnStmt 0x56544b6b9ac0 <line:523:9, col:55>
|     `-BinaryOperator 0x56544b6b9aa0 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x56544b6b9a70 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x56544b6b99a0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56544b6a1568 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x56544b6b9a88 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x56544b6b9a50 <col:25, col:55> 'int'
|           `-BinaryOperator 0x56544b6b9a30 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x56544b6b9a00 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x56544b6b99c0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b6982d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x56544b6b9a18 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x56544b6b99e0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b698240 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56544b6a1740 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56544b6a16b0 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56544b6b9c18 <col:60, line:528:5>
|   `-ReturnStmt 0x56544b6b9c08 <line:527:9, col:55>
|     `-BinaryOperator 0x56544b6b9be8 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x56544b6b9bb8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x56544b6b9ae8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56544b6a16b0 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x56544b6b9bd0 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x56544b6b9b98 <col:25, col:55> 'int'
|           `-BinaryOperator 0x56544b6b9b78 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x56544b6b9b48 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x56544b6b9b08 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b6982d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x56544b6b9b60 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x56544b6b9b28 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b698120 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56544b6a1888 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56544b6a17f8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56544b6b9d60 <col:60, line:532:5>
|   `-ReturnStmt 0x56544b6b9d50 <line:531:9, col:55>
|     `-BinaryOperator 0x56544b6b9d30 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x56544b6b9d00 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x56544b6b9c30 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56544b6a17f8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x56544b6b9d18 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x56544b6b9ce0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x56544b6b9cc0 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x56544b6b9c90 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x56544b6b9c50 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b697f70 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x56544b6b9ca8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x56544b6b9c70 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56544b6982d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x56544b6a1930 prev 0x56544b698770 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56544b6a1a28 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x56544b6a1ac8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x56544b6a8890 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56544b6a8c78 <col:11>
| |-CXXConstructorDecl 0x56544b6a8970 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56544b6a8a58 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x56544b6a93c0 <col:11>
| |-CXXConstructorDecl 0x56544b6a8af8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x56544b6a8c08 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x56544b6aac18 <col:11>
| |-CXXDestructorDecl 0x56544b6a9f28 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x56544b3b08b8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56544b3b09c8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x56544b3b1290 <col:11>
| |   `-ReturnStmt 0x56544b3b1280 <col:11>
| |     `-UnaryOperator 0x56544b3b1268 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56544b3b1258 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x56544b3b0a38 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x56544b3b0b48 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x56544b73ef50 <col:11>
|     `-ReturnStmt 0x56544b73ef40 <col:11>
|       `-UnaryOperator 0x56544b73ef28 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56544b73ef18 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x56544b6a1b30 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x56544b6a1c30 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x56544b6a1e30 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b6a1c10 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56544b6a1bf0 <col:21> 'int' 0
| |-EnumConstantDecl 0x56544b6a1cc0 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x56544b6a1e48 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b6a1ca0 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x56544b6a1c80 <col:23> 'int' 1
| |-EnumConstantDecl 0x56544b6a1d50 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x56544b6a1e60 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b6a1d30 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x56544b6a1d10 <col:23> 'int' 2
| `-EnumConstantDecl 0x56544b6a1de0 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x56544b6a1e78 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56544b6a1dc0 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x56544b6a1da0 <col:27> 'int' 3
|-CXXMethodDecl 0x56544b6a1eb8 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x56544b6a1f80 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x56544b6a2188 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x56544b6a2030 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x56544b6a20b0 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x56544b6a46f0 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x56544b6a2398 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x56544b6a2248 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x56544b6a22c0 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x56544b6a2468 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x56544b6a2528 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x56544b6a2698 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x56544b6a25d8 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x56544b6a2760 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x56544b6a2820 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x56544b6a28e0 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x56544b6a29a0 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x56544b6a2a40 <line:670:3, col:10> col:3 private
|-FieldDecl 0x56544b6a2a78 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x56544b6a2ae8 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x56544b6b9d78 <col:27, line:684:5>
|-CXXMethodDecl 0x56544b6a2ba8 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x56544b6b9d88 <col:27, line:696:5>
|-CXXMethodDecl 0x56544b6a2da8 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x56544b6a2c58 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x56544b6a2cd0 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56544b6b9f10 <col:66, line:700:5>
|   `-ReturnStmt 0x56544b6b9f00 <line:699:9, col:31>
|     `-CallExpr 0x56544b6b9ea0 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x56544b6b9e88 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56544b6b9e38 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x56544b525158 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x56544b6b9ed0 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x56544b6b9df8 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x56544b6a2c58 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x56544b6b9ee8 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x56544b6b9e18 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x56544b6a2cd0 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b6a3118 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x56544b6a2e68 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x56544b6a2ee0 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x56544b6a2f58 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x56544b6a2fd0 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56544b6ba260 <col:64, line:707:5>
|   |-DeclStmt 0x56544b6b9fa0 <line:704:9, col:24>
|   | `-VarDecl 0x56544b6b9f38 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x56544b6ba1b0 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x56544b6b9fb8 <col:9> 'int32_t':'int' lvalue ParmVar 0x56544b6a2ee0 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x56544b6ba198 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x56544b6ba130 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x56544b6ba118 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56544b6ba098 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x56544b52a428 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x56544b6ba168 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x56544b6ba038 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x56544b6a2f58 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x56544b6ba180 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x56544b6ba058 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x56544b6a2fd0 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x56544b6ba078 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x56544b6b9f38 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x56544b6ba240 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x56544b6ba1d0 <col:9> 'int32_t':'int' lvalue ParmVar 0x56544b6a2e68 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x56544b6ba228 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x56544b6ba210 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x56544b6ba1f0 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x56544b6b9f38 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x56544b6a33b8 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x56544b6a31e8 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x56544b6a3260 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x56544b6a32d8 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x56544b6a3658 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x56544b6a3480 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x56544b6a34f8 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x56544b6a3570 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x56544b6a37e8 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x56544b6a3720 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x56544b6a39e8 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x56544b6a38a0 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x56544b6a3918 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x56544b6a3cb8 <line:717:5, col:73> col:24
| `-FunctionDecl 0x56544b6a3bf8 parent 0x56544b1a6488 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x56544b6a3aa8 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x56544b6a3b20 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x56544b6a3ed8 <line:718:5, col:72> col:24
| `-FunctionDecl 0x56544b6a3e18 parent 0x56544b1a6488 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x56544b6a3d08 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x56544b6a3d80 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x56544b6a40a0 <line:719:5, col:57> col:29
| `-FunctionDecl 0x56544b6a3fe8 parent 0x56544b1a6488 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x56544b6a3f28 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x56544b6a4328 <line:720:5, col:73> col:30
| `-FunctionDecl 0x56544b6a4268 parent 0x56544b1a6488 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x56544b6a4118 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x56544b6a4190 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x56544b6a4548 <line:721:5, col:73> col:30
| `-FunctionDecl 0x56544b6a4488 parent 0x56544b1a6488 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x56544b6a4378 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x56544b6a43f0 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x56544b6a9dd0 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x56544b6a9eb8 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x56544b6a2a78 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56544b6aa928 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x56544b6aa8e0 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x56544b6a2a78
| |     `-DeclRefExpr 0x56544b6aa8c0 <col:7> 'const Timestamp' lvalue ParmVar 0x56544b6a9eb8 '' 'const Timestamp &'
| `-CompoundStmt 0x56544b6aa988 <col:7>
|-CXXConstructorDecl 0x56544b6aa038 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56544b6aa148 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x56544b6a2a78 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56544b6aac28 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x56544b6aabd0 <col:7> 'Timestamp::rep_t' xvalue ._t 0x56544b6a2a78
| |     `-CXXStaticCastExpr 0x56544b6aaba0 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x56544b6aab70 <col:7> 'Timestamp' lvalue ParmVar 0x56544b6aa148 '' 'Timestamp &&'
| `-CompoundStmt 0x56544b6aac88 <col:7>
|-CXXDestructorDecl 0x56544b6aa1f8 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56544b3b0708 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x56544b3b0818 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x56544b3b1308 <col:7>
|   |-CXXMemberCallExpr 0x56544b3b12a8 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x56544b3b11e8 <col:7> '<bound member function type>' .operator= 0x56544b3b08b8
|   | | `-MemberExpr 0x56544b3b10f8 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x56544b6a2a78
|   | |   `-CXXThisExpr 0x56544b3b10e8 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x56544b3b11b8 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x56544b6a2a78
|   |   `-DeclRefExpr 0x56544b3b1198 <col:7> 'const Timestamp' lvalue ParmVar 0x56544b3b0818 '' 'const Timestamp &'
|   `-ReturnStmt 0x56544b3b12f8 <col:7>
|     `-UnaryOperator 0x56544b3b12e0 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56544b3b12d0 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x56544b3b0bb8 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x56544b3b0cc8 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x56544b73efc8 <col:7>
    |-CXXMemberCallExpr 0x56544b73ef68 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x56544b73eed0 <col:7> '<bound member function type>' .operator= 0x56544b3b0a38
    | | `-MemberExpr 0x56544b73eda0 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x56544b6a2a78
    | |   `-CXXThisExpr 0x56544b73ed90 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x56544b73eea0 <col:7> 'Timestamp::rep_t' xvalue ._t 0x56544b6a2a78
    |   `-CXXStaticCastExpr 0x56544b73ee70 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x56544b73ee40 <col:7> 'Timestamp' lvalue ParmVar 0x56544b3b0cc8 '' 'Timestamp &&'
    `-ReturnStmt 0x56544b73efb8 <col:7>
      `-UnaryOperator 0x56544b73efa0 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x56544b73ef90 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b73bfa8 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x56544b73c0d8 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x56544b73cbc8 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b7267d8 prev 0x56544b708c20 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 referenced class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56544b7268d0 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x56544b726960 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x56544b7269c0 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x56544b726a68 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56544b726b88 <col:5, col:12> col:12 implicit struct do_nothing_t
| |-CXXConstructorDecl 0x56544b803220 <col:12> col:12 implicit constexpr do_nothing_t 'void ()' inline default trivial noexcept-unevaluated 0x56544b803220
| |-CXXConstructorDecl 0x56544b803300 <col:12> col:12 implicit constexpr do_nothing_t 'void (const Timer::do_nothing_t &)' inline default trivial noexcept-unevaluated 0x56544b803300
| | `-ParmVarDecl 0x56544b8033e8 <col:12> col:12 'const Timer::do_nothing_t &'
| `-CXXConstructorDecl 0x56544b803488 <col:12> col:12 implicit constexpr do_nothing_t 'void (Timer::do_nothing_t &&)' inline default trivial noexcept-unevaluated 0x56544b803488
|   `-ParmVarDecl 0x56544b803598 <col:12> col:12 'Timer::do_nothing_t &&'
|-CXXConstructorDecl 0x56544b726d28 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x56544b726c68 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x56544b726f78 <line:38:5, col:43> col:5 Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x56544b726de8 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x56544b726e68 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x56544b727108 <line:43:5, col:27> col:5 used Timer 'void (Element *)'
| `-ParmVarDecl 0x56544b727040 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x56544b727288 <line:47:5, col:21> col:5 Timer 'void (Task *)'
| `-ParmVarDecl 0x56544b7271c8 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x56544b727438 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x56544b727378 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x56544b727530 <line:55:5, line:58:5> line:55:12 used ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x56544b73cda0 <col:21, line:58:5>
|   `-IfStmt 0x56544b73cd88 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x56544b73ccf0 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x56544b73ccc0 <col:6> '<bound member function type>' ->scheduled 0x56544b727d88
|     |   `-ImplicitCastExpr 0x56544b73cd10 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x56544b73ccb0 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x56544b73cd68 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x56544b73cd38 <col:6> '<bound member function type>' ->unschedule 0x56544b73b450
|         `-CXXThisExpr 0x56544b73cd28 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x56544b727630 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x56544b73cf40 <col:26, line:65:5>
|   |-BinaryOperator 0x56544b73ce60 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x56544b73cdf8 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x56544b73c0d8
|   | | `-MemberExpr 0x56544b73cdc8 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x56544b73c198
|   | |   `-CXXThisExpr 0x56544b73cdb8 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x56544b73ce48 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56544b73ce28 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x56544b73c5f8 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x56544b73cf20 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x56544b73ce90 <col:2> 'void *' lvalue ->_thunk 0x56544b73c218
|     | `-CXXThisExpr 0x56544b73ce80 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x56544b73cef8 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x56544b73cec0 <col:20> 'int' 1
|-CXXMethodDecl 0x56544b727770 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x56544b7276e0 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x56544b73d0a0 <col:52, line:71:5>
|   |-CStyleCastExpr 0x56544b73cf90 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x56544b73cf60 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x56544b7276e0 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x56544b73d080 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x56544b73d050 <col:2> '<bound member function type>' ->assign 0x56544b727630
|       `-CXXThisExpr 0x56544b73d040 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x56544b727940 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x56544b727828 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x56544b7278a8 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x56544b73d220 <col:58, line:79:5>
|   |-BinaryOperator 0x56544b73d168 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x56544b73d100 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x56544b73c0d8
|   | | `-MemberExpr 0x56544b73d0d0 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x56544b73c198
|   | |   `-CXXThisExpr 0x56544b73d0c0 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x56544b73d150 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x56544b73d130 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x56544b727828 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x56544b73d200 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x56544b73d198 <col:2> 'void *' lvalue ->_thunk 0x56544b73c218
|     | `-CXXThisExpr 0x56544b73d188 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x56544b73d1e8 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x56544b73d1c8 <col:11> 'void *' lvalue ParmVar 0x56544b7278a8 'user_data' 'void *'
|-CXXMethodDecl 0x56544b727a90 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x56544b727a00 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x56544b73d3b8 <col:35, line:87:5>
|   |-BinaryOperator 0x56544b73d2e8 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x56544b73d280 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x56544b73c0d8
|   | | `-MemberExpr 0x56544b73d250 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x56544b73c198
|   | |   `-CXXThisExpr 0x56544b73d240 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x56544b73d2d0 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56544b73d2b0 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x56544b73c7d0 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x56544b73d398 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x56544b73d318 <col:2> 'void *' lvalue ->_thunk 0x56544b73c218
|     | `-CXXThisExpr 0x56544b73d308 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x56544b73d380 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x56544b73d368 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x56544b73d348 <col:11> 'Element *' lvalue ParmVar 0x56544b727a00 'element' 'Element *'
|-CXXMethodDecl 0x56544b727bd8 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x56544b727b48 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x56544b73d550 <col:29, line:94:5>
|   |-BinaryOperator 0x56544b73d480 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x56544b73d418 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x56544b73c0d8
|   | | `-MemberExpr 0x56544b73d3e8 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x56544b73c198
|   | |   `-CXXThisExpr 0x56544b73d3d8 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x56544b73d468 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56544b73d448 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x56544b73c9a8 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x56544b73d530 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x56544b73d4b0 <col:2> 'void *' lvalue ->_thunk 0x56544b73c218
|     | `-CXXThisExpr 0x56544b73d4a0 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x56544b73d518 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x56544b73d500 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x56544b73d4e0 <col:11> 'Task *' lvalue ParmVar 0x56544b727b48 'task' 'Task *'
|-CXXMethodDecl 0x56544b727cc8 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x56544b73d630 <col:37, line:100:5>
|   `-ReturnStmt 0x56544b73d620 <line:99:2, col:19>
|     `-BinaryOperator 0x56544b73d600 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x56544b73d5d0 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x56544b73d580 <col:9> 'Element *const' lvalue ->_owner 0x56544b73c278
|       |   `-CXXThisExpr 0x56544b73d570 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x56544b73d5e8 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x56544b73d5b0 <col:19> 'int' 0
|-CXXMethodDecl 0x56544b727d88 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x56544b73d6f0 <col:35, line:105:5>
|   `-ReturnStmt 0x56544b73d6e0 <line:104:2, col:23>
|     `-BinaryOperator 0x56544b73d6c0 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x56544b73d6a8 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x56544b73d658 <col:9> 'const int' lvalue ->_schedpos1 0x56544b73bef8
|       |   `-CXXThisExpr 0x56544b73d648 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x56544b73d688 <col:23> 'int' 0
|-CXXMethodDecl 0x56544b727e48 <line:116:5, line:118:5> line:116:29 expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x56544b73d758 <col:51, line:118:5>
|   `-ReturnStmt 0x56544b73d748 <line:117:2, col:9>
|     `-MemberExpr 0x56544b73d718 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x56544b73bf58
|       `-CXXThisExpr 0x56544b73d708 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x56544b727f08 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x56544b73dcb0 <col:37, line:136:5>
|   `-IfStmt 0x56544b73dc88 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x56544b73d818 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x56544b73d800 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x56544b73d7e0 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x56544b73d7b0 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x56544b69acf8
|     |       `-MemberExpr 0x56544b73d780 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x56544b73bf58
|     |         `-CXXThisExpr 0x56544b73d770 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x56544b73dbf8 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x56544b73dbe0 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x56544b73dbb0 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x56544b73db98 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x56544b73db60 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x56544b73db48 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x56544b73db28 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x56544b6c94d0 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x56544b73dac8 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x56544b73dab0 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x56544b73d9d8 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x56544b73d9c0 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x56544b73d9a0 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x56544b6c9190 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x56544b73d940 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x56544b73d840 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x56544b73bf58
|     |         |     |   `-CXXThisExpr 0x56544b73d830 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x56544b73d988 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x56544b73d970 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x56544b73d920 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x56544b73d908 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x56544b73d8a8 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x56544b6bc7f0 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x56544b73db10 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x56544b73daf8 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x56544b73da90 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x56544b73da78 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x56544b73da48 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x56544b517d40 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x56544b73dc78 <line:135:6, col:13>
|       `-CXXConstructExpr 0x56544b73dc48 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x56544b73dc18 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x56544b73bf58
|           `-CXXThisExpr 0x56544b73dc08 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x56544b727fc8 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x56544b73dd98 <col:35, line:141:5>
|   `-ReturnStmt 0x56544b73dd88 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x56544b73dd50 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x56544b73dd20 <col:9, col:17> '<bound member function type>' ->router 0x56544b71b380
|         `-ImplicitCastExpr 0x56544b73dd70 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x56544b73dd08 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x56544b73dcd8 <col:9> 'Element *const' lvalue ->_owner 0x56544b73c278
|               `-CXXThisExpr 0x56544b73dcc8 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x56544b728088 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x56544b73de18 <col:37, line:146:5>
|   `-ReturnStmt 0x56544b73de08 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x56544b73ddf0 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x56544b73ddc0 <col:9> 'Element *const' lvalue ->_owner 0x56544b73c278
|         `-CXXThisExpr 0x56544b73ddb0 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x56544b728148 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x56544b73de98 <col:41, line:151:5>
|   `-ReturnStmt 0x56544b73de88 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x56544b73de70 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x56544b73de40 <col:9> 'RouterThread *const' lvalue ->_thread 0x56544b73c2d8
|         `-CXXThisExpr 0x56544b73de30 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x56544b728210 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x56544b728408 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x56544b7282c0 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x56544b728338 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56544b73cbb8 <col:50> 'bool' false
|-CXXMethodDecl 0x56544b728588 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x56544b7284c8 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x56544b73a740 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x56544b728640 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x56544b73a888 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x56544b73a7f8 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x56544b73a9d0 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x56544b73a940 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x56544b73ab18 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x56544b73aa88 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x56544b73abe0 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x56544b73e000 <col:32, line:223:5>
|   `-ExprWithCleanups 0x56544b73dfe8 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x56544b73df90 <col:2, col:47> 'void'
|       |-MemberExpr 0x56544b73dec0 <col:2> '<bound member function type>' ->schedule_at_steady 0x56544b73a740
|       | `-CXXThisExpr 0x56544b73deb0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56544b73dfd0 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x56544b73dfb8 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x56544b73df70 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x56544b73df58 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x56544b73df28 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x56544b517d40 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x56544b73ad20 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x56544b73ac90 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x56544b73ae68 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x56544b73add8 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56544b73e188 <col:56, line:241:5>
|   `-ExprWithCleanups 0x56544b73e170 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x56544b73e118 <col:2, col:40> 'void'
|       |-MemberExpr 0x56544b73e028 <col:2> '<bound member function type>' ->schedule_after 0x56544b73ad20
|       | `-CXXThisExpr 0x56544b73e018 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56544b73e158 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x56544b73e140 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x56544b73e0d8 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x56544b73e0a8 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x56544b73e068 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x56544b73add8 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x56544b73e0c0 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x56544b73e088 <col:38> 'int' 0
|-CXXMethodDecl 0x56544b73afb0 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x56544b73af20 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56544b73e3f8 <col:58, line:249:5>
|   `-ExprWithCleanups 0x56544b73e3e0 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x56544b73e388 <col:2, col:49> 'void'
|       |-MemberExpr 0x56544b73e1b0 <col:2> '<bound member function type>' ->schedule_after 0x56544b73ad20
|       | `-CXXThisExpr 0x56544b73e1a0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56544b73e3c8 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x56544b73e3b0 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x56544b73e330 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x56544b73e318 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x56544b73e288 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x56544b69cae8 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x56544b73e370 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x56544b73e358 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x56544b73e268 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x56544b73af20 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b73b0f8 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x56544b73b068 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x56544b73e5d8 <col:58, line:261:5>
|   `-ExprWithCleanups 0x56544b73e5c0 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x56544b73e568 <col:2, col:38> 'void'
|       |-MemberExpr 0x56544b73e420 <col:2> '<bound member function type>' ->schedule_at_steady 0x56544b73a740
|       | `-CXXThisExpr 0x56544b73e410 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56544b73e5a8 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x56544b73e590 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x56544b73e530 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x56544b73e518 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x56544b73e4f8 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x56544b6c9190 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x56544b73e4c8 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x56544b73e4b0 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x56544b73e460 <col:21> 'Timestamp' lvalue ->_expiry_s 0x56544b73bf58
|             |     `-CXXThisExpr 0x56544b73e450 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x56544b73e490 <col:33> 'const Timestamp' lvalue ParmVar 0x56544b73b068 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x56544b73b240 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x56544b73b1b0 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56544b73e8b0 <col:58, line:270:5>
|   `-ExprWithCleanups 0x56544b73e898 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x56544b73e840 <col:2, col:79> 'void'
|       |-MemberExpr 0x56544b73e600 <col:2> '<bound member function type>' ->schedule_at_steady 0x56544b73a740
|       | `-CXXThisExpr 0x56544b73e5f0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56544b73e880 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x56544b73e868 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x56544b73e800 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x56544b73e738 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x56544b73e720 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x56544b73e6b0 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x56544b73e680 <col:31, col:41> '<bound member function type>' .sec 0x56544b519838
|             | |     `-ImplicitCastExpr 0x56544b73e6d0 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x56544b73e650 <col:31> 'Timestamp' lvalue ->_expiry_s 0x56544b73bf58
|             | |         `-CXXThisExpr 0x56544b73e640 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x56544b73e708 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x56544b73e6e8 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x56544b73b1b0 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x56544b73e7c8 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x56544b73e798 <col:60, col:70> '<bound member function type>' .subsec 0x56544b519f30
|                 `-ImplicitCastExpr 0x56544b73e7e8 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x56544b73e768 <col:60> 'Timestamp' lvalue ->_expiry_s 0x56544b73bf58
|                     `-CXXThisExpr 0x56544b73e758 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x56544b73b388 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x56544b73b2f8 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56544b73ebe8 <col:60, line:279:5>
|   `-ExprWithCleanups 0x56544b73ebd0 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x56544b73eb78 <col:2, col:65> 'void'
|       |-MemberExpr 0x56544b73e8d8 <col:2> '<bound member function type>' ->schedule_at_steady 0x56544b73a740
|       | `-CXXThisExpr 0x56544b73e8c8 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56544b73ebb8 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x56544b73eba0 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x56544b73eb40 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x56544b73eb28 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x56544b73eb08 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x56544b6c9190 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x56544b73eaa8 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x56544b73ea90 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x56544b73e918 <col:21> 'Timestamp' lvalue ->_expiry_s 0x56544b73bf58
|             |     `-CXXThisExpr 0x56544b73e908 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x56544b73eaf0 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x56544b73ead8 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x56544b73ea38 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x56544b73ea20 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x56544b73e9f0 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x56544b69cae8 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x56544b73ea78 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x56544b73ea60 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x56544b73e9d0 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x56544b73b2f8 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b73b450 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x56544b73b510 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x56544b73f0b0 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x56544b73ec40 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x56544b73ec10 <col:2> '<bound member function type>' ->unschedule 0x56544b73b450
|   |   `-CXXThisExpr 0x56544b73ec00 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x56544b73f098 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x56544b73f060 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x56544b73f048 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56544b73ecf8 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x56544b3b0bb8 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x56544b73ec70 <col:2> 'Timestamp' lvalue ->_expiry_s 0x56544b73bf58
|       | `-CXXThisExpr 0x56544b73ec60 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56544b73ece0 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x56544b73ecb0 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x56544b73b5d0 <line:304:5, line:310:5> line:304:29 adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x56544b73f408 <col:42, line:310:5>
|   |-IfStmt 0x56544b73f250 <line:306:2, line:307:23>
|   | |-CallExpr 0x56544b73f180 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x56544b73f168 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x56544b73f108 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x56544b6bac60 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x56544b73f240 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x56544b73f228 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x56544b73f1f8 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x56544b73f1e0 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x56544b73f1b0 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x56544b73f3f8 <line:309:2, col:33>
|     `-ExprWithCleanups 0x56544b73f3e0 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x56544b73f3b0 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56544b73f398 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x56544b73f358 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x56544b73f340 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x56544b73f310 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x56544b69ce00 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x56544b73f380 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x56544b73f2f0 <col:30> 'int' 500
|-CXXMethodDecl 0x56544b73b710 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x56544b73b680 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56544b73b7b8 <col:69> "" ""
|-CXXMethodDecl 0x56544b73b8c8 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x56544b73b838 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56544b73b970 <col:70> "" ""
|-CXXMethodDecl 0x56544b73ba80 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x56544b73b9f0 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56544b73bb28 <col:71> "" ""
|-CXXMethodDecl 0x56544b73bc38 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x56544b73bba8 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56544b73bce0 <col:72> "" ""
|-EnumDecl 0x56544b73bd50 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x56544b73be50 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x56544b73bea0 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56544b73be30 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x56544b73be10 <col:25> 'int' 1
|-AccessSpecDecl 0x56544b73beb8 <line:339:3, col:10> col:3 private
|-FieldDecl 0x56544b73bef8 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x56544b73bf58 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x56544b73bfa8 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x56544b73c0d8 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x56544b73cbc8 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x56544b73c198 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x56544b73c218 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x56544b73c278 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x56544b73c2d8 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x56544b73c428 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x56544b73c338 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x56544b73c5f8 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x56544b73c4e0 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x56544b73c560 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x56544b73c7d0 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x56544b73c6b8 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x56544b73c738 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x56544b73c9a8 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x56544b73c890 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x56544b73c910 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x56544b73cb78 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b508fc0 prev 0x56544b46f008 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56544b5090b8 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x56544b509148 <col:19, col:25> col:19 public
|-TypedefDecl 0x56544b509180 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x56544b2fc720 'uninitialized_type'
|   `-CXXRecord 0x56544b2fc688 'uninitialized_type'
|-CXXConstructorDecl 0x56544b509240 <line:20:5, line:22:5> line:20:12 used IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x56544b50d9a0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x56544b50da48 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56544b50da08 <col:10> 'int' 0
| `-CompoundStmt 0x56544b50da90 <col:13, line:22:5>
|-CXXConstructorDecl 0x56544b509390 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x56544b509300 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x56544b50d9a0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x56544b50dae0 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x56544b50daa0 <col:10> 'unsigned int' lvalue ParmVar 0x56544b509300 'x' 'unsigned int'
| `-CompoundStmt 0x56544b50db28 <col:13, line:27:5>
|-CXXConstructorDecl 0x56544b5094e8 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x56544b509458 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x56544b50d9a0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x56544b50db90 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x56544b50db78 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x56544b50db38 <col:10> 'int' lvalue ParmVar 0x56544b509458 'x' 'int'
| `-CompoundStmt 0x56544b50dbd8 <col:13, line:31:5>
|-CXXConstructorDecl 0x56544b509640 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x56544b5095b0 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x56544b50d9a0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x56544b50dc40 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x56544b50dc28 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x56544b50dbe8 <col:10> 'unsigned long' lvalue ParmVar 0x56544b5095b0 'x' 'unsigned long'
| `-CompoundStmt 0x56544b50dc88 <col:13, line:35:5>
|-CXXConstructorDecl 0x56544b509798 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x56544b509708 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x56544b50d9a0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x56544b50dcf0 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x56544b50dcd8 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x56544b50dc98 <col:10> 'long' lvalue ParmVar 0x56544b509708 'x' 'long'
| `-CompoundStmt 0x56544b50dd38 <col:13, line:39:5>
|-CXXConstructorDecl 0x56544b509958 <line:42:5, line:44:5> line:42:12 IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x56544b509868 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x56544b50d9a0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x56544b50ddb8 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x56544b50dd68 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x56544b43ddc0
| |     `-DeclRefExpr 0x56544b50dd48 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x56544b509868 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x56544b50de00 <col:20, line:44:5>
|-CXXConstructorDecl 0x56544b509ae8 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x56544b509a20 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x56544b50df68 <col:51, line:56:5>
|   `-BinaryOperator 0x56544b50df48 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x56544b50de20 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x56544b50d9a0
|     | `-CXXThisExpr 0x56544b50de10 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x56544b50df30 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x56544b50df18 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x56544b50def8 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x56544b50dec8 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x56544b50deb0 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x56544b50de50 <col:47> 'const unsigned char *' lvalue ParmVar 0x56544b509a20 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x56544b509c38 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x56544b509ba8 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x56544b509de8 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x56544b509d28 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x56544b50dfd8 <col:56, line:68:5>
|   `-CStyleCastExpr 0x56544b50dfb0 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x56544b50df80 <col:9> 'const uninitialized_type' lvalue ParmVar 0x56544b509d28 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x56544b509f78 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x56544b509eb0 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x56544b50a068 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x56544b50ef98 <col:46, line:83:5>
|   `-ReturnStmt 0x56544b50ef88 <line:82:2, col:29>
|     `-ExprWithCleanups 0x56544b50ef70 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x56544b50ef40 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56544b50edf8 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x56544b50ece0 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x56544b50ebc8 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x56544b50e000 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x56544b50a158 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x56544b50f048 <col:31, line:88:5>
|   `-ReturnStmt 0x56544b50f038 <line:87:2, col:10>
|     `-UnaryOperator 0x56544b50f020 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x56544b50f008 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x56544b50eff0 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x56544b50efc0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x56544b50d9a0
|             `-CXXThisExpr 0x56544b50efb0 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x56544b50a218 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x56544b50f0c8 <col:34, line:93:5>
|   `-ReturnStmt 0x56544b50f0b8 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x56544b50f0a0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x56544b50f070 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x56544b50d9a0
|         `-CXXThisExpr 0x56544b50f060 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x56544b50a2e8 <line:99:5, line:101:5> line:99:12 operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x56544b50f148 <col:38, line:101:5>
|   `-ReturnStmt 0x56544b50f138 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x56544b50f120 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x56544b50f0f0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x56544b50d9a0
|         `-CXXThisExpr 0x56544b50f0e0 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x56544b50a3b8 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x56544b50f418 <col:38, line:108:5>
|   `-ReturnStmt 0x56544b50f408 <line:107:2, col:58>
|     `-BinaryOperator 0x56544b50f3e8 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x56544b50f300 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x56544b50f2e0 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x56544b50f2c8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x56544b50f170 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x56544b50d9a0
|       |   |   `-CXXThisExpr 0x56544b50f160 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x56544b50f2a0 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x56544b50f288 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x56544b50f208 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x56544b44c2f8 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x56544b50f1e8 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x56544b50f3c0 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x56544b50f3a8 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x56544b50f388 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x56544b44c2f8 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x56544b50f368 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x56544b50a478 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x56544b50f688 <col:39, line:112:5>
|   `-ReturnStmt 0x56544b50f678 <line:111:2, col:56>
|     `-BinaryOperator 0x56544b50f658 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x56544b50f570 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x56544b50f550 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x56544b50f538 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x56544b50f440 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x56544b50d9a0
|       |   |   `-CXXThisExpr 0x56544b50f430 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x56544b50f510 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x56544b50f4f8 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x56544b50f4d8 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x56544b44c2f8 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x56544b50f4b8 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x56544b50f630 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x56544b50f618 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x56544b50f5f8 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x56544b44c2f8 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x56544b50f5d8 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x56544b50a5a8 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x56544b50a6b0 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x56544b50a7c0 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x56544b50c898 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56544b50c958 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x56544b50ca20 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x56544b50cc18 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x56544b50cad0 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x56544b50cb48 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x56544b50cd98 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x56544b50ccd8 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x56544b50cee0 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x56544b50ce50 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x56544b50d088 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x56544b50cf98 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x56544b50d1d0 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x56544b50d140 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x56544b50d318 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x56544b50d288 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x56544b50d3e0 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x56544b50d4a0 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x56544b50d618 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x56544b50d550 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x56544b50d6e0 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x56544b50d7c8 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x56544b50d870 <col:51> "" ""
|-TypedefDecl 0x56544b50d910 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x56544b46f0a0 'IPAddress'
|   `-CXXRecord 0x56544b508fc0 'IPAddress'
|-AccessSpecDecl 0x56544b50d968 <line:150:3, col:10> col:3 private
|-FieldDecl 0x56544b50d9a0 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x56544b50e048 <line:15:7> col:7 implicit constexpr IPAddress 'void (const IPAddress &)' inline default trivial noexcept-unevaluated 0x56544b50e048
| `-ParmVarDecl 0x56544b50e158 <col:7> col:7 'const IPAddress &'
|-CXXConstructorDecl 0x56544b50e1f8 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56544b50e308 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x56544b50d9a0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x56544b50eee8 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x56544b50eea0 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x56544b50d9a0
| |     `-CXXStaticCastExpr 0x56544b50ee70 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x56544b50ee40 <col:7> 'IPAddress' lvalue ParmVar 0x56544b50e308 '' 'IPAddress &&'
| `-CompoundStmt 0x56544b50ef30 <col:7>
`-CXXDestructorDecl 0x56544b50ebf8 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b4c7ab0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56544b4c7bc8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x56544b4c7c58 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x56544b4c7d28 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x56544b4c7e10 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x56544b4c8028 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56544b4c7ed0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b4c81d8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x56544b4c80e0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x56544b4c8320 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x56544b4c8290 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x56544b4c8468 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56544b4c83d8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b4c85b0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56544b4c8520 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b4c8678 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x56544b4c87c0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x56544b4c8730 <col:28> col:31 'int'
|-CXXMethodDecl 0x56544b4c8888 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x56544b4c89d0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x56544b4c8940 <col:28> col:31 'int'
|-CXXMethodDecl 0x56544b4c8b48 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x56544b4c8a88 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b4c8c90 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x56544b4c8c00 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b4c8d58 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x56544b4c8f18 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56544b4c8e08 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56544b4c8e80 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b4c9168 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56544b4c8fd8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56544b4c9050 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56544b4c9218 <col:86> "" ""
|-CXXMethodDecl 0x56544b4c9488 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x56544b4c92f8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x56544b4c9370 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b4c9638 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x56544b4c9548 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x56544b4c97e8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x56544b4c96f0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x56544b4c9ab8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x56544b4c98a0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x56544b4c9918 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56544b4c9990 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b4c9d98 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x56544b4c9b80 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x56544b4c9bf8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56544b4c9c70 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56544b4c9e50 <col:115> "" ""
|-AccessSpecDecl 0x56544b4c9ec0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x56544b4c9ef8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b4ca400 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x56544b4ca400
| `-ParmVarDecl 0x56544b4ca508 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x56544b4ca5a8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x56544b4ca5a8
| `-ParmVarDecl 0x56544b4ca6b8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x56544b4ffce8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56544b6f2af0 <col:7>
|-CXXConstructorDecl 0x56544b4ffdc0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x56544b4ffdc0
| `-ParmVarDecl 0x56544b4ffed8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x56544b4fff48 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x56544b4fff48
| `-ParmVarDecl 0x56544b500058 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x56544b6f54f0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WebGen::CB
         0 |   class IPAddress _src
         0 |     uint32_t _addr
         4 |   unsigned short _sport
         6 |   unsigned short _dport
         8 |   unsigned int _iss
        12 |   unsigned int _snd_una
        16 |   unsigned int _snd_nxt
        20 |   unsigned int _irs
        24 |   unsigned int _rcv_nxt
    28:0-0 |   unsigned char _connected
    28:1-1 |   unsigned char _got_fin
    28:2-2 |   unsigned char _sent_fin
    28:3-3 |   unsigned char _closed
    28:4-4 |   unsigned char _do_send
    28:5-7 |   unsigned char _spare_bits
        29 |   char _resends
        32 |   class Timestamp last_send
        32 |     union Timestamp::rep_t _t
        32 |       int64_t x
        40 |   char [64] sndbuf
       104 |   unsigned int sndlen
       112 |   class WebGen::CB * next
       120 |   class WebGen::CB ** pprev
       128 |   class WebGen::CB * rexmit_next
       136 |   class WebGen::CB * rexmit_prev
           | [sizeof=144, dsize=144, align=8,
           |  nvsize=144, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b7417f8 <../elements/local/webgen.hh:49:3, line:89:3> line:49:9 referenced class CB definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x56544b741918 <col:3, col:9> col:9 implicit referenced class CB
|-AccessSpecDecl 0x56544b7419a8 <line:50:3, col:9> col:3 public
|-CXXConstructorDecl 0x56544b741a30 <line:51:5, col:8> col:5 CB 'void ()'
|-FieldDecl 0x56544b741ae8 <line:53:5, col:15> col:15 _src 'IPAddress'
|-FieldDecl 0x56544b741b50 <line:54:5, col:20> col:20 _sport 'unsigned short'
|-FieldDecl 0x56544b741bb8 <line:55:5, col:20> col:20 _dport 'unsigned short'
|-FieldDecl 0x56544b741c20 <line:57:5, col:14> col:14 _iss 'unsigned int'
|-FieldDecl 0x56544b741c88 <line:58:5, col:14> col:14 _snd_una 'unsigned int'
|-FieldDecl 0x56544b741cf0 <line:59:5, col:14> col:14 _snd_nxt 'unsigned int'
|-FieldDecl 0x56544b741d58 <line:60:5, col:14> col:14 _irs 'unsigned int'
|-FieldDecl 0x56544b741dc0 <line:61:5, col:14> col:14 _rcv_nxt 'unsigned int'
|-FieldDecl 0x56544b741e68 <line:63:5, line:64:13> col:2 _connected 'unsigned char'
| `-ConstantExpr 0x56544b741e48 <col:13> 'int' Int: 1
|   `-IntegerLiteral 0x56544b741e10 <col:13> 'int' 1
|-FieldDecl 0x56544b741f10 <line:63:5, line:65:11> col:2 _got_fin 'unsigned char'
| `-ConstantExpr 0x56544b741ef0 <col:11> 'int' Int: 1
|   `-IntegerLiteral 0x56544b741eb8 <col:11> 'int' 1
|-FieldDecl 0x56544b741fb8 <line:63:5, line:66:12> col:2 _sent_fin 'unsigned char'
| `-ConstantExpr 0x56544b741f98 <col:12> 'int' Int: 1
|   `-IntegerLiteral 0x56544b741f60 <col:12> 'int' 1
|-FieldDecl 0x56544b742060 <line:63:5, line:67:10> col:2 _closed 'unsigned char'
| `-ConstantExpr 0x56544b742040 <col:10> 'int' Int: 1
|   `-IntegerLiteral 0x56544b742008 <col:10> 'int' 1
|-FieldDecl 0x56544b742108 <line:63:5, line:68:11> col:2 _do_send 'unsigned char'
| `-ConstantExpr 0x56544b7420e8 <col:11> 'int' Int: 1
|   `-IntegerLiteral 0x56544b7420b0 <col:11> 'int' 1
|-FieldDecl 0x56544b7421b0 <line:63:5, line:69:14> col:2 _spare_bits 'unsigned char'
| `-ConstantExpr 0x56544b742190 <col:14> 'int' Int: 3
|   `-IntegerLiteral 0x56544b742158 <col:14> 'int' 3
|-FieldDecl 0x56544b742248 <line:70:5, col:10> col:10 _resends 'char'
|-FieldDecl 0x56544b7422a8 <line:72:5, col:15> col:15 last_send 'Timestamp'
|-FieldDecl 0x56544b742398 <line:73:5, col:19> col:10 sndbuf 'char [64]'
|-FieldDecl 0x56544b742400 <line:74:5, col:14> col:14 sndlen 'unsigned int'
|-CXXMethodDecl 0x56544b7424f0 <line:76:5, col:30> col:10 reset 'void (IPAddress)'
| `-ParmVarDecl 0x56544b742460 <col:17, col:27> col:27 src 'IPAddress'
|-CXXMethodDecl 0x56544b7425b8 <line:78:5, col:28> col:10 remove_from_list 'void ()'
|-CXXMethodDecl 0x56544b742778 <line:79:5, col:33> col:10 add_to_list 'void (WebGen::CB **)'
| `-ParmVarDecl 0x56544b7426a0 <col:23, col:28> col:28 phead 'WebGen::CB **'
|-CXXMethodDecl 0x56544b742840 <line:81:5, col:25> col:10 rexmit_unlink 'void ()'
|-CXXMethodDecl 0x56544b7429b8 <line:82:5, col:33> col:10 rexmit_update 'void (WebGen::CB *)'
| `-ParmVarDecl 0x56544b7428f0 <col:25, col:29> col:29 tail 'WebGen::CB *'
|-FieldDecl 0x56544b742a70 <line:84:5, col:9> col:9 next 'WebGen::CB *'
|-FieldDecl 0x56544b742ad8 <line:85:5, col:10> col:10 pprev 'WebGen::CB **'
|-FieldDecl 0x56544b742b38 <line:87:5, col:9> col:9 rexmit_next 'WebGen::CB *'
`-FieldDecl 0x56544b742b98 <line:88:5, col:9> col:9 rexmit_prev 'WebGen::CB *'

Layout: <CGRecordLayout
  LLVMType:%"class.WebGen::CB" = type { %class.IPAddress, i16, i16, i32, i32, i32, i32, i32, i8, i8, %class.Timestamp, [64 x i8], i32, %"class.WebGen::CB"*, %"class.WebGen::CB"**, %"class.WebGen::CB"*, %"class.WebGen::CB"* }
  NonVirtualBaseLLVMType:%"class.WebGen::CB" = type { %class.IPAddress, i16, i16, i32, i32, i32, i32, i32, i8, i8, %class.Timestamp, [64 x i8], i32, %"class.WebGen::CB"*, %"class.WebGen::CB"**, %"class.WebGen::CB"*, %"class.WebGen::CB"* }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:1 IsSigned:0 StorageSize:8 StorageOffset:28>
    <CGBitFieldInfo Offset:1 Size:1 IsSigned:0 StorageSize:8 StorageOffset:28>
    <CGBitFieldInfo Offset:2 Size:1 IsSigned:0 StorageSize:8 StorageOffset:28>
    <CGBitFieldInfo Offset:3 Size:1 IsSigned:0 StorageSize:8 StorageOffset:28>
    <CGBitFieldInfo Offset:4 Size:1 IsSigned:0 StorageSize:8 StorageOffset:28>
    <CGBitFieldInfo Offset:5 Size:3 IsSigned:0 StorageSize:8 StorageOffset:28>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b743640 <../elements/local/webgen.hh:109:3, line:114:3> line:109:3 struct definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-FieldDecl 0x56544b743770 <line:110:5, col:9> col:9 initiated 'int'
|-FieldDecl 0x56544b7437d8 <line:111:5, col:9> col:9 completed 'int'
|-FieldDecl 0x56544b743840 <line:112:5, col:9> col:9 reset 'int'
|-FieldDecl 0x56544b7438a8 <line:113:5, col:9> col:9 timeout 'int'
|-CXXConstructorDecl 0x56544b8038d8 <line:109:3> col:3 implicit used  'void () noexcept' inline default trivial
| `-CompoundStmt 0x56544b803d08 <col:3>
|-CXXConstructorDecl 0x56544b8039d8 <col:3> col:3 implicit constexpr  'void (const WebGen::(anonymous struct at ../elements/local/webgen.hh:109:3) &)' inline default trivial noexcept-unevaluated 0x56544b8039d8
| `-ParmVarDecl 0x56544b803ae8 <col:3> col:3 'const WebGen::(anonymous struct at ../elements/local/webgen.hh:109:3) &'
`-CXXConstructorDecl 0x56544b803b88 <col:3> col:3 implicit constexpr  'void (WebGen::(anonymous struct at ../elements/local/webgen.hh:109:3) &&)' inline default trivial noexcept-unevaluated 0x56544b803b88
  `-ParmVarDecl 0x56544b803c98 <col:3> col:3 'WebGen::(anonymous struct at ../elements/local/webgen.hh:109:3) &&'

Layout: <CGRecordLayout
  LLVMType:%struct.anon = type { i32, i32, i32, i32 }
  NonVirtualBaseLLVMType:%struct.anon = type { i32, i32, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b740720 <../elements/local/webgen.hh:25:1, line:132:1> line:25:7 class WebGen definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x56544b740878 <col:1, col:7> col:7 implicit referenced class WebGen
|-AccessSpecDecl 0x56544b740908 <line:26:2, col:8> col:2 public
|-CXXConstructorDecl 0x56544b740990 <line:28:3, col:10> col:3 WebGen 'void ()'
|-CXXDestructorDecl 0x56544b740a80 <line:29:3, col:11> col:3 ~WebGen 'void ()' noexcept-unevaluated 0x56544b740a80
| `-Overrides: [ 0x56544b7092d8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x56544b740bb0 <line:31:3, col:53> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x56544b70a738 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x56544b745140 <col:34, col:53>
|   `-ReturnStmt 0x56544b745130 <col:36, col:43>
|     `-ImplicitCastExpr 0x56544b745118 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x56544b7450f8 <col:43> 'const char [7]' lvalue "WebGen"
|-CXXMethodDecl 0x56544b740c78 <line:32:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x56544b70a800 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x56544b7451a0 <col:34, col:54>
|   `-ReturnStmt 0x56544b745190 <col:36, col:43>
|     `-ImplicitCastExpr 0x56544b745178 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x56544b745158 <col:43> 'const char []' lvalue Var 0x56544b70aab0 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x56544b740d40 <line:33:3, col:49> col:15 processing 'const char *() const'
| |-Overrides: [ 0x56544b70abc8 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x56544b745200 <col:34, col:49>
|   `-ReturnStmt 0x56544b7451f0 <col:36, col:43>
|     `-ImplicitCastExpr 0x56544b7451d8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x56544b7451b8 <col:43> 'const char []' lvalue Var 0x56544b70ad10 'PUSH' 'const char []'
|-CXXMethodDecl 0x56544b740e88 <line:34:3, col:32> col:7 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x56544b70c220 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x56544b740df0 <col:18, col:31> col:32 'ErrorHandler *'
|-CXXMethodDecl 0x56544b740fd0 <line:35:3, col:28> col:8 cleanup 'void (Element::CleanupStage)'
| |-Overrides: [ 0x56544b70ca38 Element::cleanup 'void (Element::CleanupStage)' ]
| `-ParmVarDecl 0x56544b740f40 <col:16> col:28 'Element::CleanupStage'
|-CXXMethodDecl 0x56544b7412b0 <line:36:3, col:57> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x56544b70bfd0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x56544b741160 <col:17, col:33> col:33 conf 'Vector<String> &'
| `-ParmVarDecl 0x56544b7411d8 <col:39, col:53> col:53 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56544b741400 <line:38:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x56544b709918 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x56544b741370 <col:25, col:32> col:33 'Packet *'
|-CXXMethodDecl 0x56544b741548 <line:39:3, col:25> col:8 run_timer 'void (Timer *)'
| |-Overrides: [ 0x56544b709c58 Element::run_timer 'void (Timer *)' ]
| `-ParmVarDecl 0x56544b7414b8 <col:18, col:24> col:25 'Timer *'
|-AccessSpecDecl 0x56544b7415f0 <line:41:1, col:8> col:1 private
|-FieldDecl 0x56544b741628 <line:42:3, col:9> col:9 _timer 'Timer'
|-FieldDecl 0x56544b741688 <line:43:3, col:13> col:13 _src_prefix 'IPAddress'
|-FieldDecl 0x56544b7416e8 <line:44:3, col:13> col:13 _mask 'IPAddress'
|-FieldDecl 0x56544b741748 <line:45:3, col:13> col:13 _dst 'IPAddress'
|-FieldDecl 0x56544b7417a8 <line:46:3, col:19> col:19 _id 'atomic_uint32_t'
|-CXXRecordDecl 0x56544b7417f8 <line:49:3, line:89:3> line:49:9 referenced class CB definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56544b741918 <col:3, col:9> col:9 implicit referenced class CB
| |-AccessSpecDecl 0x56544b7419a8 <line:50:3, col:9> col:3 public
| |-CXXConstructorDecl 0x56544b741a30 <line:51:5, col:8> col:5 CB 'void ()'
| |-FieldDecl 0x56544b741ae8 <line:53:5, col:15> col:15 _src 'IPAddress'
| |-FieldDecl 0x56544b741b50 <line:54:5, col:20> col:20 _sport 'unsigned short'
| |-FieldDecl 0x56544b741bb8 <line:55:5, col:20> col:20 _dport 'unsigned short'
| |-FieldDecl 0x56544b741c20 <line:57:5, col:14> col:14 _iss 'unsigned int'
| |-FieldDecl 0x56544b741c88 <line:58:5, col:14> col:14 _snd_una 'unsigned int'
| |-FieldDecl 0x56544b741cf0 <line:59:5, col:14> col:14 _snd_nxt 'unsigned int'
| |-FieldDecl 0x56544b741d58 <line:60:5, col:14> col:14 _irs 'unsigned int'
| |-FieldDecl 0x56544b741dc0 <line:61:5, col:14> col:14 _rcv_nxt 'unsigned int'
| |-FieldDecl 0x56544b741e68 <line:63:5, line:64:13> col:2 _connected 'unsigned char'
| | `-ConstantExpr 0x56544b741e48 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x56544b741e10 <col:13> 'int' 1
| |-FieldDecl 0x56544b741f10 <line:63:5, line:65:11> col:2 _got_fin 'unsigned char'
| | `-ConstantExpr 0x56544b741ef0 <col:11> 'int' Int: 1
| |   `-IntegerLiteral 0x56544b741eb8 <col:11> 'int' 1
| |-FieldDecl 0x56544b741fb8 <line:63:5, line:66:12> col:2 _sent_fin 'unsigned char'
| | `-ConstantExpr 0x56544b741f98 <col:12> 'int' Int: 1
| |   `-IntegerLiteral 0x56544b741f60 <col:12> 'int' 1
| |-FieldDecl 0x56544b742060 <line:63:5, line:67:10> col:2 _closed 'unsigned char'
| | `-ConstantExpr 0x56544b742040 <col:10> 'int' Int: 1
| |   `-IntegerLiteral 0x56544b742008 <col:10> 'int' 1
| |-FieldDecl 0x56544b742108 <line:63:5, line:68:11> col:2 _do_send 'unsigned char'
| | `-ConstantExpr 0x56544b7420e8 <col:11> 'int' Int: 1
| |   `-IntegerLiteral 0x56544b7420b0 <col:11> 'int' 1
| |-FieldDecl 0x56544b7421b0 <line:63:5, line:69:14> col:2 _spare_bits 'unsigned char'
| | `-ConstantExpr 0x56544b742190 <col:14> 'int' Int: 3
| |   `-IntegerLiteral 0x56544b742158 <col:14> 'int' 3
| |-FieldDecl 0x56544b742248 <line:70:5, col:10> col:10 _resends 'char'
| |-FieldDecl 0x56544b7422a8 <line:72:5, col:15> col:15 last_send 'Timestamp'
| |-FieldDecl 0x56544b742398 <line:73:5, col:19> col:10 sndbuf 'char [64]'
| |-FieldDecl 0x56544b742400 <line:74:5, col:14> col:14 sndlen 'unsigned int'
| |-CXXMethodDecl 0x56544b7424f0 <line:76:5, col:30> col:10 reset 'void (IPAddress)'
| | `-ParmVarDecl 0x56544b742460 <col:17, col:27> col:27 src 'IPAddress'
| |-CXXMethodDecl 0x56544b7425b8 <line:78:5, col:28> col:10 remove_from_list 'void ()'
| |-CXXMethodDecl 0x56544b742778 <line:79:5, col:33> col:10 add_to_list 'void (WebGen::CB **)'
| | `-ParmVarDecl 0x56544b7426a0 <col:23, col:28> col:28 phead 'WebGen::CB **'
| |-CXXMethodDecl 0x56544b742840 <line:81:5, col:25> col:10 rexmit_unlink 'void ()'
| |-CXXMethodDecl 0x56544b7429b8 <line:82:5, col:33> col:10 rexmit_update 'void (WebGen::CB *)'
| | `-ParmVarDecl 0x56544b7428f0 <col:25, col:29> col:29 tail 'WebGen::CB *'
| |-FieldDecl 0x56544b742a70 <line:84:5, col:9> col:9 next 'WebGen::CB *'
| |-FieldDecl 0x56544b742ad8 <line:85:5, col:10> col:10 pprev 'WebGen::CB **'
| |-FieldDecl 0x56544b742b38 <line:87:5, col:9> col:9 rexmit_next 'WebGen::CB *'
| `-FieldDecl 0x56544b742b98 <line:88:5, col:9> col:9 rexmit_prev 'WebGen::CB *'
|-VarDecl 0x56544b742c18 <line:91:3, col:29> col:20 referenced htbits 'const int' static cinit
| `-IntegerLiteral 0x56544b742c80 <col:29> 'int' 10
|-VarDecl 0x56544b742d10 <line:92:3, col:34> col:20 referenced htsize 'const int' static cinit
| `-BinaryOperator 0x56544b742df0 <col:29, col:34> 'int' '<<'
|   |-IntegerLiteral 0x56544b742d78 <col:29> 'int' 1
|   `-ImplicitCastExpr 0x56544b742dd8 <col:34> 'int' <LValueToRValue>
|     `-DeclRefExpr 0x56544b742db8 <col:34> 'const int' lvalue Var 0x56544b742c18 'htbits' 'const int' non_odr_use_constant
|-VarDecl 0x56544b742e80 <line:93:3, col:38> col:20 htmask 'const int' static cinit
| `-BinaryOperator 0x56544b742f60 <col:29, col:38> 'int' '-'
|   |-ImplicitCastExpr 0x56544b742f48 <col:29> 'int' <LValueToRValue>
|   | `-DeclRefExpr 0x56544b742f28 <col:29> 'const int' lvalue Var 0x56544b742d10 'htsize' 'const int' non_odr_use_constant
|   `-IntegerLiteral 0x56544b742f08 <col:38> 'int' 1
|-FieldDecl 0x56544b7430a8 <line:94:3, col:20> col:7 referenced cbhash 'WebGen::CB *[1024]'
|-FieldDecl 0x56544b743108 <line:95:3, col:7> col:7 referenced cbfree 'WebGen::CB *'
|-FieldDecl 0x56544b743168 <line:96:3, col:7> col:7 referenced rexmit_head 'WebGen::CB *'
|-FieldDecl 0x56544b7431c8 <col:3, col:21> col:21 referenced rexmit_tail 'WebGen::CB *'
|-VarDecl 0x56544b743248 <line:99:3, col:32> col:20 resend_dt 'const int' static cinit
| `-IntegerLiteral 0x56544b7432b0 <col:32> 'int' 1000000
|-VarDecl 0x56544b743340 <line:100:3, col:33> col:20 resend_max 'const int' static cinit
| `-IntegerLiteral 0x56544b7433a8 <col:33> 'int' 5
|-FieldDecl 0x56544b743438 <line:103:3, col:7> col:7 start_interval 'int'
|-FieldDecl 0x56544b743498 <line:104:3, col:13> col:13 start_tv 'Timestamp'
|-VarDecl 0x56544b743500 <line:107:3, col:30> col:20 perf_dt 'const int' static cinit
| `-IntegerLiteral 0x56544b743568 <col:30> 'int' 5000000
|-FieldDecl 0x56544b7435f0 <line:108:3, col:13> col:13 perf_tv 'Timestamp'
|-CXXRecordDecl 0x56544b743640 <line:109:3, line:114:3> line:109:3 struct definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FieldDecl 0x56544b743770 <line:110:5, col:9> col:9 initiated 'int'
| |-FieldDecl 0x56544b7437d8 <line:111:5, col:9> col:9 completed 'int'
| |-FieldDecl 0x56544b743840 <line:112:5, col:9> col:9 reset 'int'
| |-FieldDecl 0x56544b7438a8 <line:113:5, col:9> col:9 timeout 'int'
| |-CXXConstructorDecl 0x56544b8038d8 <line:109:3> col:3 implicit used  'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56544b803d08 <col:3>
| |-CXXConstructorDecl 0x56544b8039d8 <col:3> col:3 implicit constexpr  'void (const WebGen::(anonymous struct at ../elements/local/webgen.hh:109:3) &)' inline default trivial noexcept-unevaluated 0x56544b8039d8
| | `-ParmVarDecl 0x56544b803ae8 <col:3> col:3 'const WebGen::(anonymous struct at ../elements/local/webgen.hh:109:3) &'
| `-CXXConstructorDecl 0x56544b803b88 <col:3> col:3 implicit constexpr  'void (WebGen::(anonymous struct at ../elements/local/webgen.hh:109:3) &&)' inline default trivial noexcept-unevaluated 0x56544b803b88
|   `-ParmVarDecl 0x56544b803c98 <col:3> col:3 'WebGen::(anonymous struct at ../elements/local/webgen.hh:109:3) &&'
|-FieldDecl 0x56544b743968 <col:3, line:114:5> col:5 referenced perfcnt 'struct (anonymous struct at ../elements/local/webgen.hh:109:3)':'WebGen::(anonymous struct at ../elements/local/webgen.hh:109:3)'
|-CXXMethodDecl 0x56544b7439f0 <line:116:3, col:23> col:8 do_perf_stats 'void ()'
|-CXXMethodDecl 0x56544b743b30 <line:118:3, col:20> col:8 recycle 'void (WebGen::CB *)'
| `-ParmVarDecl 0x56544b743aa0 <col:16, col:19> col:20 'WebGen::CB *'
|-CXXMethodDecl 0x56544b743dd8 <line:119:3, col:71> col:7 find_cb 'WebGen::CB *(unsigned int, unsigned short, unsigned short)'
| |-ParmVarDecl 0x56544b743bf0 <col:15, col:24> col:24 src 'unsigned int'
| |-ParmVarDecl 0x56544b743c70 <col:29, col:44> col:44 sport 'unsigned short'
| `-ParmVarDecl 0x56544b743cf0 <col:51, col:66> col:66 dport 'unsigned short'
|-CXXMethodDecl 0x56544b743eb0 <line:120:3, col:22> col:13 pick_src 'IPAddress ()'
|-CXXMethodDecl 0x56544b7440c0 <line:121:3, col:50> col:7 connhash 'int (unsigned int, unsigned short)'
| |-ParmVarDecl 0x56544b743f68 <col:16, col:25> col:25 src 'unsigned int'
| `-ParmVarDecl 0x56544b743fe8 <col:30, col:45> col:45 sport 'unsigned short'
|-CXXMethodDecl 0x56544b7442d8 <line:123:3, col:57> col:19 fixup_packet 'WritablePacket *(Packet *, unsigned int)'
| |-ParmVarDecl 0x56544b744180 <col:33, col:41> col:41 p 'Packet *'
| `-ParmVarDecl 0x56544b744200 <col:44, col:53> col:53 plen 'unsigned int'
|-CXXMethodDecl 0x56544b744428 <line:125:3, col:26> col:8 tcp_input 'void (Packet *)'
| `-ParmVarDecl 0x56544b744398 <col:18, col:25> col:26 'Packet *'
|-CXXMethodDecl 0x56544b744628 <line:126:3, col:31> col:8 tcp_send 'void (WebGen::CB *, Packet *)'
| |-ParmVarDecl 0x56544b7444e0 <col:17, col:20> col:21 'WebGen::CB *'
| `-ParmVarDecl 0x56544b744558 <col:23, col:30> col:31 'Packet *'
|-CXXMethodDecl 0x56544b744ca8 <line:127:3, line:131:27> line:127:8 tcp_output 'void (WritablePacket *, IPAddress, unsigned short, IPAddress, unsigned short, int, int, char, char *, int)'
| |-ParmVarDecl 0x56544b7446e8 <col:19, col:35> col:35 p 'WritablePacket *'
| |-ParmVarDecl 0x56544b744760 <line:128:2, col:12> col:12 src 'IPAddress'
| |-ParmVarDecl 0x56544b7447e0 <col:17, col:32> col:32 sport 'unsigned short'
| |-ParmVarDecl 0x56544b744858 <line:129:2, col:12> col:12 dst 'IPAddress'
| |-ParmVarDecl 0x56544b7448d8 <col:17, col:32> col:32 dport 'unsigned short'
| |-ParmVarDecl 0x56544b744958 <line:130:2, col:6> col:6 seq 'int'
| |-ParmVarDecl 0x56544b7449d8 <col:11, col:15> col:15 ack 'int'
| |-ParmVarDecl 0x56544b744a50 <col:20, col:25> col:25 tcpflags 'char'
| |-ParmVarDecl 0x56544b744ad0 <line:131:2, col:8> col:8 payload 'char *'
| `-ParmVarDecl 0x56544b744b50 <col:17, col:21> col:21 paylen 'int'
|-CXXConstructorDecl 0x56544b744dc8 <line:25:7> col:7 implicit WebGen 'void (const WebGen &)' inline default_delete noexcept-unevaluated 0x56544b744dc8
| `-ParmVarDecl 0x56544b744ed8 <col:7> col:7 'const WebGen &'
`-CXXMethodDecl 0x56544b744f78 <col:7> col:7 implicit operator= 'WebGen &(const WebGen &)' inline default_delete noexcept-unevaluated 0x56544b744f78
  `-ParmVarDecl 0x56544b745088 <col:7> col:7 'const WebGen &'

Layout: <CGRecordLayout
  LLVMType:%class.WebGen = type { %class.Element.base, %class.Timer, %class.IPAddress, %class.IPAddress, %class.IPAddress, %class.atomic_uint32_t, [1024 x %"class.WebGen::CB"*], %"class.WebGen::CB"*, %"class.WebGen::CB"*, %"class.WebGen::CB"*, i32, %class.Timestamp, %class.Timestamp, %struct.anon }
  NonVirtualBaseLLVMType:%class.WebGen = type { %class.Element.base, %class.Timer, %class.IPAddress, %class.IPAddress, %class.IPAddress, %class.atomic_uint32_t, [1024 x %"class.WebGen::CB"*], %"class.WebGen::CB"*, %"class.WebGen::CB"*, %"class.WebGen::CB"*, i32, %class.Timestamp, %class.Timestamp, %struct.anon }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b4dbe90 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x56544b4dbfa8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x56544b4dc048 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x56544b4dc0a8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x56544b4dc108 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x56544b4dc1b8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b4dc4c0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56544b4dc5d8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x56544b4dc680 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x56544b4dc6e8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x56544b4dc778 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x56544b4e2810 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56544b4e2c48 <col:12>
|-CXXConstructorDecl 0x56544b4e2918 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56544b4e2a28 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56544b4dc680 'data' 'const char *'
| | `-ImplicitCastExpr 0x56544b4e51d0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x56544b4e51a0 <col:12> 'const char *const' lvalue .data 0x56544b4dc680
| |     `-DeclRefExpr 0x56544b4e5180 <col:12> 'const String::rep_t' lvalue ParmVar 0x56544b4e2a28 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56544b4dc6e8 'length' 'int'
| | `-ImplicitCastExpr 0x56544b4e5260 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x56544b4e5230 <col:12> 'const int' lvalue .length 0x56544b4dc6e8
| |     `-DeclRefExpr 0x56544b4e5210 <col:12> 'const String::rep_t' lvalue ParmVar 0x56544b4e2a28 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56544b4dc778 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x56544b4e52f0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x56544b4e52c0 <col:12> 'String::memo_t *const' lvalue .memo 0x56544b4dc778
| |     `-DeclRefExpr 0x56544b4e52a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56544b4e2a28 '' 'const String::rep_t &'
| `-CompoundStmt 0x56544b4e5348 <col:12>
|-CXXConstructorDecl 0x56544b4e2ac8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56544b4e2ac8
| `-ParmVarDecl 0x56544b4e2bd8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x56544b4e8130 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56544b4f3b48 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56544b4f3c58 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x56544b4f4170 <col:12>
|   |-BinaryOperator 0x56544b4f3f88 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x56544b4f3f40 <col:12> 'const char *' lvalue ->data 0x56544b4dc680
|   | | `-CXXThisExpr 0x56544b4f3f30 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56544b4f3f70 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x56544b4f3f00 <col:12> 'const char *const' lvalue .data 0x56544b4dc680
|   |     `-DeclRefExpr 0x56544b4f3ee0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56544b4f3c58 '' 'const String::rep_t &'
|   |-BinaryOperator 0x56544b4f4050 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x56544b4f4008 <col:12> 'int' lvalue ->length 0x56544b4dc6e8
|   | | `-CXXThisExpr 0x56544b4f3ff8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56544b4f4038 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x56544b4f3fc8 <col:12> 'const int' lvalue .length 0x56544b4dc6e8
|   |     `-DeclRefExpr 0x56544b4f3fa8 <col:12> 'const String::rep_t' lvalue ParmVar 0x56544b4f3c58 '' 'const String::rep_t &'
|   |-BinaryOperator 0x56544b4f4118 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x56544b4f40d0 <col:12> 'String::memo_t *' lvalue ->memo 0x56544b4dc778
|   | | `-CXXThisExpr 0x56544b4f40c0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56544b4f4100 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x56544b4f4090 <col:12> 'String::memo_t *const' lvalue .memo 0x56544b4dc778
|   |     `-DeclRefExpr 0x56544b4f4070 <col:12> 'const String::rep_t' lvalue ParmVar 0x56544b4f3c58 '' 'const String::rep_t &'
|   `-ReturnStmt 0x56544b4f4160 <col:12>
|     `-UnaryOperator 0x56544b4f4148 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56544b4f4138 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x56544b4f3cc8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56544b4f3cc8
  `-ParmVarDecl 0x56544b4f3dd8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b4d3400 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56544b4d3518 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x56544b4d35a8 <col:16, col:22> col:16 public
|-TypedefDecl 0x56544b4d35e8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x56544b1a6fd0 'const char *'
|   `-QualType 0x56544b1a6521 'const char' const
|     `-BuiltinType 0x56544b1a6520 'char'
|-TypedefDecl 0x56544b4d3670 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x56544b4d3640 'String::const_iterator' sugar
|   |-Typedef 0x56544b4d35e8 'const_iterator'
|   `-PointerType 0x56544b1a6fd0 'const char *'
|     `-QualType 0x56544b1a6521 'const char' const
|       `-BuiltinType 0x56544b1a6520 'char'
|-TypedefDecl 0x56544b4d37e0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x56544b4d3750 'int (String::*)() const'
|   |-RecordType 0x56544b4d3490 'String'
|   | `-CXXRecord 0x56544b4d3400 'String'
|   `-ParenType 0x56544b4d36f0 'int () const' sugar
|     `-FunctionProtoType 0x56544b4a8290 'int () const' const cdecl
|       `-BuiltinType 0x56544b1a6580 'int'
|-TypedefDecl 0x56544b4d3848 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x56544b2fccb0 'int64_t' sugar
|   |-Typedef 0x56544b20f390 'int64_t'
|   `-TypedefType 0x56544b1e8630 '__int64_t' sugar
|     |-Typedef 0x56544b1e8208 '__int64_t'
|     `-BuiltinType 0x56544b1a65a0 'long'
|-TypedefDecl 0x56544b4d38b0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x56544b2fcbd0 'uint64_t' sugar
|   |-Typedef 0x56544b20f530 'uint64_t'
|   `-TypedefType 0x56544b1e86c0 '__uint64_t' sugar
|     |-Typedef 0x56544b1e8278 '__uint64_t'
|     `-BuiltinType 0x56544b1a6640 'unsigned long'
|-TypedefDecl 0x56544b4d3940 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x56544b4d3910 'String::intmax_t' sugar
|   |-Typedef 0x56544b4d3848 'intmax_t'
|   `-TypedefType 0x56544b2fccb0 'int64_t' sugar
|     |-Typedef 0x56544b20f390 'int64_t'
|     `-TypedefType 0x56544b1e8630 '__int64_t' sugar
|       |-Typedef 0x56544b1e8208 '__int64_t'
|       `-BuiltinType 0x56544b1a65a0 'long'
|-TypedefDecl 0x56544b4d39d0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x56544b4d39a0 'String::uintmax_t' sugar
|   |-Typedef 0x56544b4d38b0 'uintmax_t'
|   `-TypedefType 0x56544b2fcbd0 'uint64_t' sugar
|     |-Typedef 0x56544b20f530 'uint64_t'
|     `-TypedefType 0x56544b1e86c0 '__uint64_t' sugar
|       |-Typedef 0x56544b1e8278 '__uint64_t'
|       `-BuiltinType 0x56544b1a6640 'unsigned long'
|-CXXConstructorDecl 0x56544b4d3a90 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x56544b4d3c38 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x56544b4d3b78 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x56544b4d3de8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x56544b4d3d28 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x56544b4d3f40 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x56544b4d3eb0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x56544b4d4158 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x56544b4d4008 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x56544b4d4088 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x56544b4d4378 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x56544b4d4228 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x56544b4d42a8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x56544b4d4598 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x56544b4d4448 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x56544b4d44c8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x56544b4d47b8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x56544b4d4668 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x56544b4d46e8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x56544b4d4948 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x56544b4d4880 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x56544b4d4ac8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x56544b4d4a08 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x56544b4d4c58 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x56544b4d4b90 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x56544b4d4db0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x56544b4d4d20 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x56544b4d4f08 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x56544b4d4e78 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x56544b4d5060 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x56544b4d4fd0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x56544b4d51e8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x56544b4d5128 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x56544b4d5378 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x56544b4d52b0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x56544b4d5508 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x56544b4d5440 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x56544b4d5698 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x56544b4d55d0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x56544b4d5790 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x56544b4d58b8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x56544b4d5a38 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x56544b4d5970 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x56544b4d5b88 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x56544b4d5af8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x56544b4d5c40 <col:63> "" ""
|-CXXMethodDecl 0x56544b4d5d88 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x56544b4d5cc8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x56544b4d5f98 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x56544b4d5e48 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x56544b4d5ec8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x56544b4d61b8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x56544b4d6060 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x56544b4d60e0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x56544b4d6498 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x56544b4d6278 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x56544b4d62f8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x56544b4e22e0 <col:55> 'int' 10
| `-ParmVarDecl 0x56544b4d6370 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56544b4e2300 <col:76> 'bool' true
|-CXXMethodDecl 0x56544b4d6778 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x56544b4d6560 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x56544b4d65e0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x56544b4e2310 <col:56> 'int' 10
| `-ParmVarDecl 0x56544b4d6658 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56544b4e2330 <col:77> 'bool' true
|-CXXMethodDecl 0x56544b4d6880 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x56544b4d6948 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x56544b4d6a10 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x56544b4d6ab0 <col:20>
| `-OptimizeNoneAttr 0x56544b4d6b08 <col:30>
|-CXXConversionDecl 0x56544b4d6bf8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x56544b4d6cc8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x56544b4d6d88 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x56544b4d6e78 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x56544b4d6f38 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x56544b4d70b8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x56544b4d6ff0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x56544b4d7208 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x56544b4d7178 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x56544b4d72f8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x56544b4d73b8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x56544b4d7608 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x56544b4d7470 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x56544b4d74f0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x56544b4d7868 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x56544b4d76d0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x56544b4d7750 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x56544b4d7938 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x56544b4d7b48 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x56544b4d79f0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x56544b4d7a70 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x56544b4d7d68 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x56544b4d7c10 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x56544b4d7c90 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x56544b4d7ef8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x56544b4d7e30 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x56544b4d7fe8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x56544b4d8158 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x56544b4d8098 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56544b4d8368 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x56544b4d8218 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x56544b4d8298 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x56544b4d8580 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x56544b4d8428 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x56544b4d84a0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x56544b4d8710 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x56544b4d8640 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56544b4d8930 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x56544b4d87d0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x56544b4d8850 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x56544b4d8a80 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x56544b4d89f0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x56544b4d8c58 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x56544b4d8b40 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x56544b4d8bc0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x56544b4d8da8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x56544b4d8d18 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x56544b4d8fc0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x56544b4d8e60 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x56544b4d8ee0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x56544b4e2340 <col:39> 'int' 0
|-CXXMethodDecl 0x56544b4d91e0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x56544b4d9080 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x56544b4d9100 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x56544b4e2360 <col:48> 'int' 0
|-CXXMethodDecl 0x56544b4d93c0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x56544b4d92a0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x56544b4d9320 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x56544b4e2380 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x56544b4d9490 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x56544b4d9550 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x56544b4d9610 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x56544b4d96d0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x56544b4d9790 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x56544b4d9938 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x56544b4d9840 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x56544b4d9ab8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x56544b4d99f0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x56544b4d9c90 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x56544b4d9b78 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x56544b4d9e08 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x56544b4d9d48 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x56544b4d9f50 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x56544b4d9ec0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56544b4da0a0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x56544b4da010 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x56544b4da278 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x56544b4da160 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x56544b4da1e0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x56544b4da458 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x56544b4da340 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x56544b4da3c0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x56544b4da5a8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x56544b4da518 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x56544b4da7b8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x56544b4da668 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x56544b4da6e8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x56544b4da918 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x56544b4da880 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x56544b4daa70 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x56544b4da9d8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x56544b4dab18 <col:57> "" ""
|-CXXMethodDecl 0x56544b4dac28 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x56544b4dab98 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x56544b4dad78 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x56544b4dace8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x56544b4daef8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x56544b4dae30 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x56544b4dafc0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x56544b4db080 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x56544b4db140 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x56544b4db1e0 <col:49> "" ""
|-CXXMethodDecl 0x56544b4db270 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x56544b4db330 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x56544b4db420 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x56544b4db4e8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x56544b4db5a8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x56544b4db668 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x56544b4db760 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x56544b4db828 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x56544b4db8f0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x56544b4dbac8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x56544b4db9a8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x56544b4dba28 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x56544b4dbcf0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x56544b4dbb90 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x56544b4dbc10 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x56544b4dbe00 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x56544b4dbe68 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x56544b4dbe90 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56544b4dbfa8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x56544b4dc048 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x56544b4dc0a8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x56544b4dc108 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x56544b4dc1b8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x56544b4dc220 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x56544b4dc458 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x56544b4dc4a8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56544b4dc438 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x56544b4dc348 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x56544b4dc2f0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x56544b4dc330 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x56544b4dc310 <col:32> 'int' 8
|-CXXRecordDecl 0x56544b4dc4c0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56544b4dc5d8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x56544b4dc680 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x56544b4dc6e8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x56544b4dc778 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x56544b4e2810 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56544b4e2c48 <col:12>
| |-CXXConstructorDecl 0x56544b4e2918 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56544b4e2a28 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56544b4dc680 'data' 'const char *'
| | | `-ImplicitCastExpr 0x56544b4e51d0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x56544b4e51a0 <col:12> 'const char *const' lvalue .data 0x56544b4dc680
| | |     `-DeclRefExpr 0x56544b4e5180 <col:12> 'const String::rep_t' lvalue ParmVar 0x56544b4e2a28 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56544b4dc6e8 'length' 'int'
| | | `-ImplicitCastExpr 0x56544b4e5260 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x56544b4e5230 <col:12> 'const int' lvalue .length 0x56544b4dc6e8
| | |     `-DeclRefExpr 0x56544b4e5210 <col:12> 'const String::rep_t' lvalue ParmVar 0x56544b4e2a28 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56544b4dc778 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x56544b4e52f0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x56544b4e52c0 <col:12> 'String::memo_t *const' lvalue .memo 0x56544b4dc778
| | |     `-DeclRefExpr 0x56544b4e52a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56544b4e2a28 '' 'const String::rep_t &'
| | `-CompoundStmt 0x56544b4e5348 <col:12>
| |-CXXConstructorDecl 0x56544b4e2ac8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56544b4e2ac8
| | `-ParmVarDecl 0x56544b4e2bd8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x56544b4e8130 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x56544b4f3b48 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56544b4f3c58 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x56544b4f4170 <col:12>
| |   |-BinaryOperator 0x56544b4f3f88 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x56544b4f3f40 <col:12> 'const char *' lvalue ->data 0x56544b4dc680
| |   | | `-CXXThisExpr 0x56544b4f3f30 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56544b4f3f70 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x56544b4f3f00 <col:12> 'const char *const' lvalue .data 0x56544b4dc680
| |   |     `-DeclRefExpr 0x56544b4f3ee0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56544b4f3c58 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x56544b4f4050 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x56544b4f4008 <col:12> 'int' lvalue ->length 0x56544b4dc6e8
| |   | | `-CXXThisExpr 0x56544b4f3ff8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56544b4f4038 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x56544b4f3fc8 <col:12> 'const int' lvalue .length 0x56544b4dc6e8
| |   |     `-DeclRefExpr 0x56544b4f3fa8 <col:12> 'const String::rep_t' lvalue ParmVar 0x56544b4f3c58 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x56544b4f4118 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x56544b4f40d0 <col:12> 'String::memo_t *' lvalue ->memo 0x56544b4dc778
| |   | | `-CXXThisExpr 0x56544b4f40c0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56544b4f4100 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x56544b4f4090 <col:12> 'String::memo_t *const' lvalue .memo 0x56544b4dc778
| |   |     `-DeclRefExpr 0x56544b4f4070 <col:12> 'const String::rep_t' lvalue ParmVar 0x56544b4f3c58 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x56544b4f4160 <col:12>
| |     `-UnaryOperator 0x56544b4f4148 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56544b4f4138 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x56544b4f3cc8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56544b4f3cc8
|   `-ParmVarDecl 0x56544b4f3dd8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x56544b4dc7f0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x56544b4dca38 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x56544b4dc858 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x56544b4dc8d8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x56544b4dc950 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x56544b4e27d0 <col:79, line:261:5>
|   |-BinaryOperator 0x56544b4e2448 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x56544b4e23e0 <col:2, col:5> 'const char *' lvalue .data 0x56544b4dc680
|   | | `-MemberExpr 0x56544b4e23b0 <col:2> 'String::rep_t' lvalue ->_r 0x56544b4dc7f0
|   | |   `-CXXThisExpr 0x56544b4e23a0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x56544b4e2430 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56544b4e2410 <col:12> 'const char *' lvalue ParmVar 0x56544b4dc858 'data' 'const char *'
|   |-BinaryOperator 0x56544b4e2510 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x56544b4e24a8 <col:2, col:5> 'int' lvalue .length 0x56544b4dc6e8
|   | | `-MemberExpr 0x56544b4e2478 <col:2> 'String::rep_t' lvalue ->_r 0x56544b4dc7f0
|   | |   `-CXXThisExpr 0x56544b4e2468 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x56544b4e24f8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56544b4e24d8 <col:14> 'int' lvalue ParmVar 0x56544b4dc8d8 'length' 'int'
|   `-IfStmt 0x56544b4e27b8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x56544b4e2630 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x56544b4e2618 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x56544b4e25f8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x56544b4e25d8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x56544b4e2570 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x56544b4dc778
|     |       | `-MemberExpr 0x56544b4e2540 <col:7> 'String::rep_t' lvalue ->_r 0x56544b4dc7f0
|     |       |   `-CXXThisExpr 0x56544b4e2530 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x56544b4e25c0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x56544b4e25a0 <col:17> 'String::memo_t *' lvalue ParmVar 0x56544b4dc950 'memo' 'String::memo_t *'
|     `-CallExpr 0x56544b4e2790 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x56544b4e2778 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56544b4e2680 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x56544b4cb468 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x56544b4e26e8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56544b4dc048
|         `-ImplicitCastExpr 0x56544b4e26d0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x56544b4e26b0 <col:27> 'String::memo_t *' lvalue ParmVar 0x56544b4dc950 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x56544b4dcce8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x56544b4dcb08 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x56544b4dcb88 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x56544b4dcc00 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x56544b4dc7f0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x56544b4e2c58 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56544b4e2de8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x56544b4e2d50 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x56544b4e2cc0 <col:2> '<bound member function type>' ->assign_memo 0x56544b4dca38
|     | `-ImplicitCastExpr 0x56544b4e2d88 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x56544b4e2cb0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x56544b4e2da0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x56544b4e2cf0 <col:14> 'const char *' lvalue ParmVar 0x56544b4dcb08 'data' 'const char *'
|     |-ImplicitCastExpr 0x56544b4e2db8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x56544b4e2d10 <col:20> 'int' lvalue ParmVar 0x56544b4dcb88 'length' 'int'
|     `-ImplicitCastExpr 0x56544b4e2dd0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x56544b4e2d30 <col:28> 'String::memo_t *' lvalue ParmVar 0x56544b4dcc00 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x56544b4dce78 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x56544b4dcdb8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x56544b4e3040 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x56544b4e2fc0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x56544b4e2e10 <col:2> '<bound member function type>' ->assign_memo 0x56544b4dca38
|     | `-CXXThisExpr 0x56544b4e2e00 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x56544b4e2ff8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x56544b4e2e90 <col:14, col:19> 'const char *' lvalue .data 0x56544b4dc680
|     |   `-MemberExpr 0x56544b4e2e60 <col:14, col:16> 'String::rep_t' lvalue ._r 0x56544b4dc7f0
|     |     `-DeclRefExpr 0x56544b4e2e40 <col:14> 'const String' lvalue ParmVar 0x56544b4dcdb8 'x' 'const String &'
|     |-ImplicitCastExpr 0x56544b4e3010 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x56544b4e2f10 <col:25, col:30> 'int' lvalue .length 0x56544b4dc6e8
|     |   `-MemberExpr 0x56544b4e2ee0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x56544b4dc7f0
|     |     `-DeclRefExpr 0x56544b4e2ec0 <col:25> 'const String' lvalue ParmVar 0x56544b4dcdb8 'x' 'const String &'
|     `-ImplicitCastExpr 0x56544b4e3028 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x56544b4e2f90 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x56544b4dc778
|         `-MemberExpr 0x56544b4e2f60 <col:38, col:40> 'String::rep_t' lvalue ._r 0x56544b4dc7f0
|           `-DeclRefExpr 0x56544b4e2f40 <col:38> 'const String' lvalue ParmVar 0x56544b4dcdb8 'x' 'const String &'
|-CXXMethodDecl 0x56544b4dcf40 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x56544b4e3a00 <col:31, line:278:5>
|   `-IfStmt 0x56544b4e39e8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x56544b4e30e0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x56544b4e30c8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x56544b4e3098 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x56544b4dc778
|     |     `-MemberExpr 0x56544b4e3068 <col:6> 'String::rep_t' lvalue ->_r 0x56544b4dc7f0
|     |       `-CXXThisExpr 0x56544b4e3058 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x56544b4e39c0 <col:15, line:277:2>
|       |-ParenExpr 0x56544b4e3590 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x56544b4e3560 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x56544b4e31f0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x56544b4e31d8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x56544b4e31c0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x56544b4e3180 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56544b4dc048
|       |   |       `-ImplicitCastExpr 0x56544b4e3168 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x56544b4e3138 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x56544b4dc778
|       |   |           `-MemberExpr 0x56544b4e3108 <col:27> 'String::rep_t' lvalue ->_r 0x56544b4dc7f0
|       |   |             `-CXXThisExpr 0x56544b4e30f8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x56544b4e3250 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x56544b4e3230 <col:54> 'int' 0
|       |   `-CallExpr 0x56544b4e34c0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x56544b4e34a8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x56544b4e3428 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56544b243460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x56544b4e3500 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x56544b4e3338 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x56544b4e3518 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x56544b4e3368 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x56544b4e3530 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x56544b4e33a0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x56544b4e3548 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x56544b4e3410 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x56544b4e33f8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x56544b4e33c0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x56544b4e38e0 <line:274:6, line:275:22>
|       | |-CallExpr 0x56544b4e37a0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x56544b4e3788 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x56544b4e3700 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x56544b4cc8b0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x56544b4e36d0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56544b4dc048
|       | |   `-ImplicitCastExpr 0x56544b4e36b8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x56544b4e3688 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x56544b4dc778
|       | |       `-MemberExpr 0x56544b4e3658 <col:40> 'String::rep_t' lvalue ->_r 0x56544b4dc7f0
|       | |         `-CXXThisExpr 0x56544b4e3648 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x56544b4e38a0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x56544b4e3888 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x56544b4e37c8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x56544b4e1720 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x56544b4e38c8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x56544b4e3828 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x56544b4dc778
|       |       `-MemberExpr 0x56544b4e37f8 <col:15> 'String::rep_t' lvalue ->_r 0x56544b4dc7f0
|       |         `-CXXThisExpr 0x56544b4e37e8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x56544b4e39a0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x56544b4e3938 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x56544b4dc778
|         | `-MemberExpr 0x56544b4e3908 <col:6> 'String::rep_t' lvalue ->_r 0x56544b4dc7f0
|         |   `-CXXThisExpr 0x56544b4e38f8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x56544b4e3988 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x56544b4e3968 <col:16> 'int' 0
|-CXXMethodDecl 0x56544b4dd1d8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x56544b4dcff8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x56544b4dd078 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x56544b4dd0f0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x56544b4dd2b0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x56544b4dd500 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x56544b4dd368 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x56544b4dd3e8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x56544b4dd460 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x56544b4dd6e8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x56544b4dd5d0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x56544b4dd650 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x56544b4dd7e8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x56544b4e3ad8 <col:41, line:286:5>
|   `-ReturnStmt 0x56544b4e3ac8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x56544b4e3a98 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x56544b4e3a60 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x56544b4e3a48 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x56544b4e3a28 <col:46> 'int' 1
|-CXXMethodDecl 0x56544b4dda88 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x56544b4dd8a0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x56544b4dd920 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x56544b4dd9a0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x56544b4e1720 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x56544b4ddb50 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x56544b4e17f0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x56544b4e19c0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x56544b4e18a8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x56544b4e1928 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x56544b4e1a80 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x56544b4e1b48 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x56544b4e1c48 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x56544b4e1cc0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x56544b4e1d38 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x56544b4e1da0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x56544b4e1ea0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x56544b4e1ef0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56544b4e1e80 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x56544b4e1e60 <col:22> 'int' 14
|-CXXMethodDecl 0x56544b4e2108 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x56544b4e1f20 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x56544b4e1fa0 <col:38> col:41 'int'
| `-ParmVarDecl 0x56544b4e2020 <col:43> col:46 'int'
|-FriendDecl 0x56544b4e2210 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x56544b4e22a0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56544b772910 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x56544b772ae8 prev 0x56544b772910 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56544b772b78 <col:46, col:52> col:46 public
|-TypedefDecl 0x56544b772ba0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56544b1a6580 'int'
|-TypedefDecl 0x56544b774500 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x56544b7744b0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x56544b774490 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x56544b772db8 'type'
|     `-SubstTemplateTypeParmType 0x56544b772d80 'String' sugar
|       |-TemplateTypeParmType 0x56544b497cb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56544b497c60 'T'
|       `-RecordType 0x56544b4d3490 'String'
|         `-CXXRecord 0x56544b4d3400 'String'
|-TypedefDecl 0x56544b7745b8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x56544b774580 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x56544b774560 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x56544b774500 'type'
|     `-ElaboratedType 0x56544b7744b0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x56544b774490 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x56544b772db8 'type'
|         `-SubstTemplateTypeParmType 0x56544b772d80 'String' sugar
|           |-TemplateTypeParmType 0x56544b497cb0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x56544b497c60 'T'
|           `-RecordType 0x56544b4d3490 'String'
|             `-CXXRecord 0x56544b4d3400 'String'
|-CXXMethodDecl 0x56544b774758 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x56544b774668 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x56544b774848 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56544b774928 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x56544b774928
|-CXXMethodDecl 0x56544b774bf8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x56544b774b00 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x56544b774e38 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56544b774cb0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56544b774d28 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56544b775008 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56544b774ef8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56544b774f70 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56544b775168 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x56544b775238 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x56544b775488 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56544b7752f8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x56544b775370 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56544b7756e8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x56544b775558 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x56544b7755d0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56544b7758a8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56544b7757b8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56544b775a68 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56544b775970 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56544b775b20 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56544b775bd0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56544b775e08 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56544b775c80 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56544b775cf8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56544b7760a8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x56544b775fb0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x56544b776170 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x56544b7761c0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56544b776210 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56544b70bc40 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x56544b771378 prev 0x56544b70bc40 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56544b772880 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x56544b772830 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x56544b772810 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x56544b7726c0 'type'
|     `-SubstTemplateTypeParmType 0x56544b772550 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x56544b46da60 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x56544b46da08 'F'
|       `-RecordType 0x56544b7721b0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x56544b7720d0 'typed_array_memory'
|-FieldDecl 0x56544b776260 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x56544b7762b0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56544b7762e8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x56544b771410 'String' sugar
|   |-TemplateTypeParmType 0x56544b4a4fd0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56544b4a4f78 'T'
|   `-RecordType 0x56544b4d3490 'String'
|     `-CXXRecord 0x56544b4d3400 'String'
|-TypedefDecl 0x56544b776378 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x56544b776340 'String &'
|   `-SubstTemplateTypeParmType 0x56544b771410 'String' sugar
|     |-TemplateTypeParmType 0x56544b4a4fd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56544b4a4f78 'T'
|     `-RecordType 0x56544b4d3490 'String'
|       `-CXXRecord 0x56544b4d3400 'String'
|-TypedefDecl 0x56544b776408 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x56544b7763d0 'const String &'
|   `-QualType 0x56544b771411 'const String' const
|     `-SubstTemplateTypeParmType 0x56544b771410 'String' sugar
|       |-TemplateTypeParmType 0x56544b4a4fd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56544b4a4f78 'T'
|       `-RecordType 0x56544b4d3490 'String'
|         `-CXXRecord 0x56544b4d3400 'String'
|-TypedefDecl 0x56544b776498 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x56544b776460 'String *'
|   `-SubstTemplateTypeParmType 0x56544b771410 'String' sugar
|     |-TemplateTypeParmType 0x56544b4a4fd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56544b4a4f78 'T'
|     `-RecordType 0x56544b4d3490 'String'
|       `-CXXRecord 0x56544b4d3400 'String'
|-TypedefDecl 0x56544b776528 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x56544b7764f0 'const String *'
|   `-QualType 0x56544b771411 'const String' const
|     `-SubstTemplateTypeParmType 0x56544b771410 'String' sugar
|       |-TemplateTypeParmType 0x56544b4a4fd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56544b4a4f78 'T'
|       `-RecordType 0x56544b4d3490 'String'
|         `-CXXRecord 0x56544b4d3400 'String'
|-TypedefDecl 0x56544b777180 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x56544b777130 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x56544b777110 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x56544b777048 'type'
|     `-LValueReferenceType 0x56544b777010 'const String &'
|       `-QualType 0x56544b776db1 'const String' const
|         `-SubstTemplateTypeParmType 0x56544b776db0 'String' sugar
|           |-TemplateTypeParmType 0x56544b4779b0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x56544b477958 'T'
|           `-RecordType 0x56544b4d3490 'String'
|             `-CXXRecord 0x56544b4d3400 'String'
|-TypedefDecl 0x56544b7771e8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x56544b7763d0 'const String &'
|   `-QualType 0x56544b771411 'const String' const
|     `-SubstTemplateTypeParmType 0x56544b771410 'String' sugar
|       |-TemplateTypeParmType 0x56544b4a4fd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56544b4a4f78 'T'
|       `-RecordType 0x56544b4d3490 'String'
|         `-CXXRecord 0x56544b4d3400 'String'
|-TypedefDecl 0x56544b777240 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56544b1a6580 'int'
|-TypedefDecl 0x56544b7772a8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x56544b776460 'String *'
|   `-SubstTemplateTypeParmType 0x56544b771410 'String' sugar
|     |-TemplateTypeParmType 0x56544b4a4fd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56544b4a4f78 'T'
|     `-RecordType 0x56544b4d3490 'String'
|       `-CXXRecord 0x56544b4d3400 'String'
|-TypedefDecl 0x56544b777310 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x56544b7764f0 'const String *'
|   `-QualType 0x56544b771411 'const String' const
|     `-SubstTemplateTypeParmType 0x56544b771410 'String' sugar
|       |-TemplateTypeParmType 0x56544b4a4fd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56544b4a4f78 'T'
|       `-RecordType 0x56544b4d3490 'String'
|         `-CXXRecord 0x56544b4d3400 'String'
|-EnumDecl 0x56544b777368 <line:134:5> col:5
| `-EnumConstantDecl 0x56544b777460 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56544b777440 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56544b4a6658 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56544b4a6630 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56544b4a6610 <col:40> 'int' 1
|-CXXConstructorDecl 0x56544b7774e8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56544b777778 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56544b7775a0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56544b777640 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x56544b777a08 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x56544b7778f0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x56544b777cc8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x56544b777bb0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x56544b777fe0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x56544b777ec0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x56544b7782f0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x56544b7781d0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x56544b7785e0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56544b778428 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56544b7784a0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56544b778708 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x56544b7787b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56544b778810 <col:30> Inherited
|-CXXMethodDecl 0x56544b778858 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x56544b778908 <col:20> Inherited
| `-OptimizeNoneAttr 0x56544b778960 <col:30> Inherited
|-CXXMethodDecl 0x56544b778a28 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56544b778ad8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56544b778b30 <col:30> Inherited
|-CXXMethodDecl 0x56544b778b78 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56544b778c28 <col:20> Inherited
| `-OptimizeNoneAttr 0x56544b778c80 <col:30> Inherited
|-CXXMethodDecl 0x56544b778cc8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56544b778d78 <col:20> Inherited
| `-OptimizeNoneAttr 0x56544b778dd0 <col:30> Inherited
|-CXXMethodDecl 0x56544b778e18 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56544b778ec8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56544b778f20 <col:30> Inherited
|-CXXMethodDecl 0x56544b778f48 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56544b778ff8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56544b7790a8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56544b779268 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56544b779158 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56544b7791d0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56544b7793b8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56544b779328 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56544b779568 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x56544b779470 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56544b779620 <col:20>
| `-OptimizeNoneAttr 0x56544b779678 <col:30>
|-CXXMethodDecl 0x56544b779798 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x56544b7796a0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56544b779850 <col:20>
| `-OptimizeNoneAttr 0x56544b7798a8 <col:30>
|-CXXMethodDecl 0x56544b779960 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x56544b7798d0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56544b779aa8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56544b779a18 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56544b779bd8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x56544b779cd8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x56544b779da8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x56544b779e78 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x56544b779fb8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x56544b779f28 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56544b77a100 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56544b77a070 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56544b77a248 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x56544b77a1b8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56544b77a300 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56544b77a400 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56544b77a370 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56544b77a4b8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56544b77a578 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x56544b77a678 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x56544b77a7f8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x56544b77a738 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x56544b77afb8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56544b77a8b0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x56544b77af18 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x56544b77ae18 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x56544b77b098 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56544b77b1e8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x56544b77b158 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56544b77b2a0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56544b77b4e8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56544b77b360 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x56544b77b3d8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56544b77b678 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x56544b77b5b8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x56544b77b888 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x56544b77b740 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x56544b77b7b8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x56544b77b948 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x56544b77bba8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x56544b77bab0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x56544b77bc78 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x56544b77bc78

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b7f2238 prev 0x56544b78a258 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56544b7f2330 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x56544b7f23c0 <col:22, col:28> col:22 public
|-EnumDecl 0x56544b7f23e8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x56544b7f2508 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x56544b7f24e8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x56544b7f24d0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x56544b7f24b0 <col:14> 'int' 999
| |-EnumConstantDecl 0x56544b7f25b0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x56544b7f2590 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x56544b7f2578 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x56544b7f2558 <col:14> 'int' 1
| |-EnumConstantDecl 0x56544b7f2640 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x56544b7f2620 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x56544b7f2600 <col:17> 'int' 0
| |-EnumConstantDecl 0x56544b7f26d0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x56544b7f26b0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x56544b7f2690 <col:13> 'int' 1
| |-EnumConstantDecl 0x56544b7f2760 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x56544b7f2740 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x56544b7f2720 <col:16> 'int' 2
| |-EnumConstantDecl 0x56544b7f27f0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x56544b7f27d0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x56544b7f27b0 <col:13> 'int' 3
| |-EnumConstantDecl 0x56544b7f2880 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x56544b7f2860 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x56544b7f2840 <col:15> 'int' 4
| |-EnumConstantDecl 0x56544b7f2910 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x56544b7f28f0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x56544b7f28d0 <col:14> 'int' 5
| |-EnumConstantDecl 0x56544b7f29a0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x56544b7f2980 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x56544b7f2960 <col:12> 'int' 6
| `-EnumConstantDecl 0x56544b7f2a30 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x56544b7f2a10 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x56544b7f29f0 <col:13> 'int' 7
|-VarDecl 0x56544b7f2aa0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x56544b7f2b28 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x56544b7f2bb0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x56544b7f2c38 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x56544b7f2cc0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x56544b7f2d48 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x56544b7f2dd0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x56544b7f2e58 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x56544b7f2ee0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x56544b7f2f68 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x56544b7f2ff0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x56544b7f30f0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x56544b7f8478 '_nerrors' 'int'
| | `-IntegerLiteral 0x56544b7f8c08 <line:128:13> 'int' 0
| `-CompoundStmt 0x56544b7f8c78 <col:16, line:129:5>
|-CXXDestructorDecl 0x56544b7f31e0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x56544b7f8c88 <col:29, line:132:5>
|-CXXMethodDecl 0x56544b7f3398 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x56544b7f32d0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56544b7f3460 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x56544b7f3548 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x56544b7f8ce0 <col:44, line:161:5>
|   `-ReturnStmt 0x56544b7f8cd0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x56544b7f8cb8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x56544b7f8c98 <col:9> 'ErrorHandler *' lvalue Var 0x56544b7f84d8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x56544b7f3688 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x56544b7f35f8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56544b7f3750 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x56544b7f8d40 <col:43, line:173:5>
|   `-ReturnStmt 0x56544b7f8d30 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x56544b7f8d18 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x56544b7f8cf8 <col:9> 'ErrorHandler *' lvalue Var 0x56544b7f8550 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x56544b7f3808 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x56544b7f3888 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x56544b7f3998 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x56544b7f3908 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x56544b7f3ae8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x56544b7f3a58 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56544b7f3c40 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x56544b7f3ba8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x56544b7f3d98 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x56544b7f3d00 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x56544b7f3ef0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x56544b7f3e58 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x56544b7f4100 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x56544b7f3fa8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x56544b7f4028 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x56544b7f42d8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x56544b7f41c0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x56544b7f4240 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x56544b7f44f8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56544b7f4398 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x56544b7f4418 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x56544b7f46d8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56544b7f45b8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x56544b7f4638 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x56544b7f48b8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56544b7f4798 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x56544b7f4818 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x56544b7f4a40 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x56544b7f4978 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x56544b7f4c10 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x56544b7f4af8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x56544b7f4b70 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x56544b7f8f98 <col:57, line:234:5>
|   `-ReturnStmt 0x56544b7f8f88 <line:233:2, col:41>
|     `-ExprWithCleanups 0x56544b7f8f70 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x56544b7f8f18 <col:9, col:41> 'int'
|         |-MemberExpr 0x56544b7f8ee8 <col:9> '<bound member function type>' ->xmessage 0x56544b7f4a40
|         | `-CXXThisExpr 0x56544b7f8ed8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x56544b7f8f58 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x56544b7f8f40 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56544b7f8eb8 <col:18, col:40> 'String' (CXXTemporary 0x56544b7f8eb8)
|               `-CallExpr 0x56544b7f8e80 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x56544b7f8e68 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x56544b7f8de0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x56544b7f6c08 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x56544b7f8e00 <col:31> 'const String' lvalue ParmVar 0x56544b7f4b70 'str' 'const String &'
|                 `-DeclRefExpr 0x56544b7f8e20 <col:36> 'const String' lvalue ParmVar 0x56544b7f4af8 'anno' 'const String &'
|-CXXMethodDecl 0x56544b7f4ef0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x56544b7f4cd0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x56544b7f4d50 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x56544b7f4dc8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56544b7f9228 <col:68, line:243:5>
|   `-ReturnStmt 0x56544b7f9218 <line:242:2, col:41>
|     `-ExprWithCleanups 0x56544b7f9200 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x56544b7f91a0 <col:9, col:41> 'int'
|         |-MemberExpr 0x56544b7f9170 <col:9> '<bound member function type>' ->xmessage 0x56544b7f4c10
|         | `-CXXThisExpr 0x56544b7f9160 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x56544b7f9038 <col:18> 'const String' lvalue ParmVar 0x56544b7f4cd0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x56544b7f91e8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x56544b7f91d0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56544b7f9140 <col:24, col:40> 'String' (CXXTemporary 0x56544b7f9140)
|               `-CXXMemberCallExpr 0x56544b7f90d8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x56544b7f9068 <col:24> '<bound member function type>' ->vformat 0x56544b7f60d0
|                 | `-CXXThisExpr 0x56544b7f9058 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x56544b7f9108 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x56544b7f9098 <col:32> 'const char *' lvalue ParmVar 0x56544b7f4d50 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x56544b7f9120 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x56544b7f90b8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56544b7f4dc8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56544b7f5190 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x56544b7f4fb8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x56544b7f5030 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x56544b7f50a8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x56544b7f9568 <col:23, line:254:5>
|   `-ReturnStmt 0x56544b7f9558 <line:253:2, col:71>
|     `-ExprWithCleanups 0x56544b7f9540 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x56544b7f94e0 <col:9, col:71> 'int'
|         |-MemberExpr 0x56544b7f94b0 <col:9> '<bound member function type>' ->xmessage 0x56544b7f4c10
|         | `-CXXThisExpr 0x56544b7f94a0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x56544b7f9528 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x56544b7f9510 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x56544b7f9460 <col:18, col:65> 'String' (CXXTemporary 0x56544b7f9460)
|         |     `-CallExpr 0x56544b7f93f8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x56544b7f93e0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x56544b7f92c8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x56544b7f6c08 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x56544b7f92e8 <col:31> 'const String' lvalue ParmVar 0x56544b7f5030 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x56544b7f9440 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x56544b7f9428 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x56544b7f93c0 <col:37, col:64> 'String' (CXXTemporary 0x56544b7f93c0)
|         |             `-CallExpr 0x56544b7f9390 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x56544b7f9378 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x56544b7f9308 <col:37> 'String (const String &)' lvalue CXXMethod 0x56544b7f72f0 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x56544b7f9328 <col:56> 'const String' lvalue ParmVar 0x56544b7f4fb8 'landmark' 'const String &'
|         `-DeclRefExpr 0x56544b7f9480 <col:68> 'const String' lvalue ParmVar 0x56544b7f50a8 'str' 'const String &'
|-CXXMethodDecl 0x56544b7f5510 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x56544b7f5258 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x56544b7f52d0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x56544b7f5350 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x56544b7f53c8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56544b7f9820 <col:34, line:267:5>
|   `-ReturnStmt 0x56544b7f9810 <line:266:2, col:51>
|     `-ExprWithCleanups 0x56544b7f97f8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x56544b7f9790 <col:9, col:51> 'int'
|         |-MemberExpr 0x56544b7f9760 <col:9> '<bound member function type>' ->xmessage 0x56544b7f5190
|         | `-CXXThisExpr 0x56544b7f9750 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x56544b7f9608 <col:18> 'const String' lvalue ParmVar 0x56544b7f5258 'landmark' 'const String &'
|         |-DeclRefExpr 0x56544b7f9628 <col:28> 'const String' lvalue ParmVar 0x56544b7f52d0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x56544b7f97e0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x56544b7f97c8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56544b7f9730 <col:34, col:50> 'String' (CXXTemporary 0x56544b7f9730)
|               `-CXXMemberCallExpr 0x56544b7f96c8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x56544b7f9658 <col:34> '<bound member function type>' ->vformat 0x56544b7f60d0
|                 | `-CXXThisExpr 0x56544b7f9648 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x56544b7f96f8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x56544b7f9688 <col:42> 'const char *' lvalue ParmVar 0x56544b7f5350 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x56544b7f9710 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x56544b7f96a8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56544b7f53c8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56544b7f5620 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x56544b7f98a0 <col:25, line:288:5>
|   `-ReturnStmt 0x56544b7f9890 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x56544b7f9878 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x56544b7f9848 <col:9> 'const int' lvalue ->_nerrors 0x56544b7f8478
|         `-CXXThisExpr 0x56544b7f9838 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x56544b7f5830 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x56544b7f56d8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x56544b7f5758 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x56544b7f5b18 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x56544b7f58f8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x56544b7f5978 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x56544b7f59f0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56544b7f5cb0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x56544b7f5be8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x56544b7f5ef8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x56544b7f5d70 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x56544b7f5de8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56544b7f9b00 <col:58, line:357:5>
|   `-ReturnStmt 0x56544b7f9af0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x56544b7f9ad8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x56544b7f9aa8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x56544b7f9a90 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x56544b7f9a70 <col:9, col:29> 'String' (CXXTemporary 0x56544b7f9a70)
|             `-CallExpr 0x56544b7f9a00 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x56544b7f99e8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x56544b7f9968 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x56544b7f5b18 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x56544b7f9908 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x56544b7f9a38 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x56544b7f9928 <col:21> 'const char *' lvalue ParmVar 0x56544b7f5d70 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x56544b7f9a50 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x56544b7f9948 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56544b7f5de8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56544b7f60d0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x56544b7f5fc0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x56544b7f6038 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56544b7f6228 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x56544b7f6198 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x56544b7f6370 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x56544b7f62e0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x56544b7f6610 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x56544b7f6428 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x56544b7f64a8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x56544b7f6520 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x56544b7f6770 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x56544b7f66e0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x56544b7f9c18 <col:37, line:441:5>
|   `-IfStmt 0x56544b7f9c00 <line:439:2, line:440:8>
|     |-BinaryOperator 0x56544b7f9b88 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x56544b7f9b58 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x56544b7f9b18 <col:6> 'int' lvalue ParmVar 0x56544b7f66e0 'level' 'int'
|     | `-ImplicitCastExpr 0x56544b7f9b70 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x56544b7f9b38 <col:15> 'ErrorHandler::Level' EnumConstant 0x56544b7f27f0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x56544b7f9be8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x56544b7f9bb8 <col:8> 'int' lvalue ->_nerrors 0x56544b7f8478
|         `-CXXThisExpr 0x56544b7f9ba8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x56544b7f6838 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x56544b7f9cb0 <col:26, line:448:5>
|   `-BinaryOperator 0x56544b7f9c90 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x56544b7f9c40 <col:2> 'int' lvalue ->_nerrors 0x56544b7f8478
|     | `-CXXThisExpr 0x56544b7f9c30 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x56544b7f9c70 <col:13> 'int' 0
|-CXXMethodDecl 0x56544b7f6a00 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x56544b7f68f0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x56544b7f6968 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x56544b7f6c08 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x56544b7f6ac0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x56544b7f6b38 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x56544b7f6f50 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x56544b7f6cc8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x56544b7f6d48 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x56544b7f6dc8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x56544b7f7008 <col:59> 0 0
|-CXXMethodDecl 0x56544b7f71a0 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x56544b7f7080 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x56544b7f7100 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x56544b7fa320 <col:70, line:534:5>
|   |-DeclStmt 0x56544b7f9e20 <line:528:2, col:20>
|   | |-VarDecl 0x56544b7f9cd8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x56544b7f9d40 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x56544b7f9d78 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x56544b7f9de0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x56544b7f9ef0 <line:529:2, col:23>
|   | `-VarDecl 0x56544b7f9e50 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x56544b7f9ed8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x56544b7f9eb8 <col:18> 'const char *' lvalue ParmVar 0x56544b7f7080 'begin' 'const char *'
|   |-DoStmt 0x56544b7fa2b8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x56544b7fa1e8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x56544b7fa1d0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x56544b7fa1b0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x56544b7f9f08 <col:6> 'const char *' lvalue Var 0x56544b7f9e50 'x' 'const char *'
|   | |     `-CallExpr 0x56544b7fa100 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x56544b7fa0e8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x56544b7fa0a0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x56544b7f8950 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x56544b7fa168 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x56544b7fa150 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x56544b7f9fc0 <col:20, col:27> 'String' (CXXTemporary 0x56544b7f9fc0)
|   | |       |     `-CXXTemporaryObjectExpr 0x56544b7f9f88 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x56544b7fa180 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x56544b7f9fe0 <col:30> 'const char *' lvalue Var 0x56544b7f9e50 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x56544b7fa198 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x56544b7fa000 <col:33> 'const char *' lvalue ParmVar 0x56544b7f7100 'end' 'const char *'
|   | |       |-UnaryOperator 0x56544b7fa040 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x56544b7fa020 <col:39> 'String' lvalue Var 0x56544b7f9cd8 'name' 'String'
|   | |       |-UnaryOperator 0x56544b7fa078 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x56544b7fa058 <col:46> 'String' lvalue Var 0x56544b7f9d78 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x56544b7fa090 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x56544b7fa2a0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x56544b7fa288 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x56544b7fa268 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x56544b7fa238 <col:11> '<bound member function type>' .operator int (String::*)() const 0x56544b4d6bf8
|   |         `-ImplicitCastExpr 0x56544b7fa220 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x56544b7fa200 <col:11> 'String' lvalue Var 0x56544b7f9cd8 'name' 'String'
|   `-ReturnStmt 0x56544b7fa310 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x56544b7fa2f8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x56544b7fa2d8 <col:9> 'const char *' lvalue Var 0x56544b7f9e50 'x' 'const char *'
|-CXXMethodDecl 0x56544b7f72f0 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x56544b7f7260 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x56544b7fa928 <col:55, line:550:5>
|   `-IfStmt 0x56544b7fa900 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x56544b7fa560 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x56544b7fa548 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56544b7fa530 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56544b7fa510 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56544b7fa4e0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x56544b4d6bf8
|     | |       `-DeclRefExpr 0x56544b7fa380 <col:6> 'const String' lvalue ParmVar 0x56544b7f7260 'x' 'const String &'
|     | `-BinaryOperator 0x56544b7fa4c0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x56544b7fa490 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x56544b7fa440 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x56544b7fa428 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x56544b7fa3e0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x56544b4f0430 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x56544b7fa3a0 <col:11> 'const String' lvalue ParmVar 0x56544b7f7260 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x56544b7fa3c0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x56544b7fa4a8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x56544b7fa478 <col:19> 'char' 123
|     |-ReturnStmt 0x56544b7fa5d0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x56544b7fa5a0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x56544b7fa580 <col:13> 'const String' lvalue ParmVar 0x56544b7f7260 'x' 'const String &'
|     `-IfStmt 0x56544b7fa8d8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x56544b7fa668 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56544b7fa650 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56544b7fa630 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56544b7fa600 <col:11> '<bound member function type>' .operator int (String::*)() const 0x56544b4d6bf8
|       |       `-DeclRefExpr 0x56544b7fa5e0 <col:11> 'const String' lvalue ParmVar 0x56544b7f7260 'x' 'const String &'
|       |-ReturnStmt 0x56544b7fa7f0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x56544b7fa7d8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x56544b7fa7a8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x56544b7fa790 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x56544b7fa770 <col:13, col:29> 'String' (CXXTemporary 0x56544b7fa770)
|       |         `-CallExpr 0x56544b7fa720 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x56544b7fa708 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x56544b7fa680 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x56544b7f6a00 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x56544b7fa750 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x56544b7fa6a0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x56544b7fa6c0 <col:28> 'const String' lvalue ParmVar 0x56544b7f7260 'x' 'const String &'
|       `-ReturnStmt 0x56544b7fa8c8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x56544b7fa8b0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x56544b7fa880 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x56544b7fa868 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x56544b7fa848 <col:13, col:20> 'String' (CXXTemporary 0x56544b7fa848)
|                 `-CXXTemporaryObjectExpr 0x56544b7fa810 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x56544b7f74b8 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x56544b7f73a8 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x56544b7f7420 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56544b7f8bf8 <col:71> 'bool' false
|-CXXRecordDecl 0x56544b7f7568 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x56544b7f7868 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x56544b7f7800 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x56544b7f77a0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x56544b7f7760 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x56544b4d3490 'String'
|       | `-CXXRecord 0x56544b4d3400 'String'
|       |-BuiltinType 0x56544b1a6580 'int'
|       `-DecayedType 0x56544b78b2a0 '__va_list_tag *' sugar
|         |-TypedefType 0x56544b78b270 'va_list' sugar
|         | |-Typedef 0x56544b3c5390 'va_list'
|         | `-TypedefType 0x56544b3c5340 '__gnuc_va_list' sugar
|         |   |-Typedef 0x56544b2fcf68 '__gnuc_va_list'
|         |   `-TypedefType 0x56544b2fced0 '__builtin_va_list' sugar
|         |     |-Typedef 0x56544b1e7d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x56544b1e7ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x56544b1a72d0 '__va_list_tag'
|         |         `-CXXRecord 0x56544b1a7238 '__va_list_tag'
|         `-PointerType 0x56544b3cac30 '__va_list_tag *'
|           `-RecordType 0x56544b1a72d0 '__va_list_tag'
|             `-CXXRecord 0x56544b1a7238 '__va_list_tag'
|-EnumDecl 0x56544b7f78c0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x56544b7f79c0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56544b7f7f20 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b7f79a0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x56544b7f7980 <col:16> 'int' 1
| |-EnumConstantDecl 0x56544b7f7a50 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56544b7f7f38 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b7f7a30 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x56544b7f7a10 <col:21> 'int' 2
| |-EnumConstantDecl 0x56544b7f7ae0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56544b7f7f50 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b7f7ac0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x56544b7f7aa0 <col:22> 'int' 4
| |-EnumConstantDecl 0x56544b7f7b70 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56544b7f7f68 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b7f7b50 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x56544b7f7b30 <col:17> 'int' 8
| |-EnumConstantDecl 0x56544b7f7c00 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56544b7f7f80 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b7f7be0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x56544b7f7bc0 <col:22> 'int' 16
| |-EnumConstantDecl 0x56544b7f7c90 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56544b7f7f98 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b7f7c70 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x56544b7f7c50 <col:19> 'int' 32
| |-EnumConstantDecl 0x56544b7f7d20 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56544b7f7fb0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b7f7d00 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x56544b7f7ce0 <col:17> 'int' 64
| |-EnumConstantDecl 0x56544b7f7db0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56544b7f7fc8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b7f7d90 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x56544b7f7d70 <col:14> 'int' 128
| |-EnumConstantDecl 0x56544b7f7e40 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56544b7f7fe0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b7f7e20 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x56544b7f7e00 <col:16> 'int' 256
| `-EnumConstantDecl 0x56544b7f7ed0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x56544b7f7ff8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56544b7f7eb0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x56544b7f7e90 <col:12> 'int' 1024
|-CXXMethodDecl 0x56544b7f8208 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x56544b7f8020 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x56544b7f80c0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x56544b7f8390 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x56544b7f82c8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x56544b7f8438 <line:580:3, col:10> col:3 private
|-FieldDecl 0x56544b7f8478 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x56544b7f84d8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x56544b7f8550 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x56544b7f8950 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x56544b7f85c8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x56544b7f8648 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x56544b7f86c8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x56544b7f8740 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x56544b7f87b8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x56544b7f8830 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x56544b7f8a78 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x56544b7f8a78
| `-ParmVarDecl 0x56544b7f8b88 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x56544b7fac88 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x56544b7fac88
  `-ParmVarDecl 0x56544b7fad98 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b78a2e8 prev 0x56544b6ce6e8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56544b78a3e0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x56544b78a470 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x56544b78a5a8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x56544b78a4a8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x56544b78b9d0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x56544b78b9b0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x56544b78b548 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x56544b78ba60 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x56544b78ba20 <col:17> 'ErrorHandler *' lvalue ParmVar 0x56544b78a4a8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x56544b78b5b0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x56544b78bae0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x56544b78baa0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x56544b78b610 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x56544b78bb20 <col:54> 'bool' false
| `-CompoundStmt 0x56544b78bc28 <col:61, line:38:5>
|   `-BinaryOperator 0x56544b78bc08 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x56544b78bba0 <col:9> 'const Element *' lvalue ->_context 0x56544b78b4e8
|     | `-CXXThisExpr 0x56544b78bb90 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x56544b78bbf0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x56544b78bbd0 <col:20> 'int' 0
|-CXXConstructorDecl 0x56544b78a7b8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56544b78a668 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x56544b78a6e0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x56544b78ba08 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x56544b78b9e8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x56544b78b4e8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x56544b78bc80 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x56544b78bc40 <col:20> 'const Element *' lvalue ParmVar 0x56544b78a668 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x56544b78b548 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x56544b78bd00 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x56544b78bcc0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x56544b78a6e0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x56544b78b5b0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x56544b78bd80 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x56544b78bd40 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x56544b78b610 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x56544b78bdc0 <col:73> 'bool' false
| `-CompoundStmt 0x56544b78be38 <col:80, line:46:5>
|-CXXMethodDecl 0x56544b78a8e8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x56544b78beb0 <col:36, line:51:5>
|   `-ReturnStmt 0x56544b78bea0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x56544b78be88 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x56544b78be58 <col:16> 'const Element *const' lvalue ->_context 0x56544b78b4e8
|         `-CXXThisExpr 0x56544b78be48 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56544b78a9d8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x56544b78bf30 <col:32, line:57:5>
|   `-ReturnStmt 0x56544b78bf20 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x56544b78bf08 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x56544b78bed8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x56544b78b548
|         `-CXXThisExpr 0x56544b78bec8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56544b78aa98 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x56544b78ac20 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x56544b78ab50 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x56544b78ad70 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x56544b78ace0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56544b78aec0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x56544b78ae30 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56544b78b0c8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x56544b78af78 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x56544b78aff0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x56544b78b3f8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x56544b78b188 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x56544b78b208 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x56544b78b2d0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x56544b78b4b0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x56544b78b4e8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x56544b78b548 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x56544b78b5b0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x56544b78b610 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x56544b78b660 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x56544b78b660
| `-ParmVarDecl 0x56544b78b778 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x56544b78b818 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x56544b78b818
| `-ParmVarDecl 0x56544b78b928 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x56544b8054e8 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56544b7ad850 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x56544b7ada28 prev 0x56544b7ad850 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56544b7adab8 <col:46, col:52> col:46 public
|-TypedefDecl 0x56544b7adae0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56544b1a6580 'int'
|-TypedefDecl 0x56544b7af6b0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x56544b7af660 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x56544b7adf90 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x56544b7ade90 'type'
|     `-TemplateSpecializationType 0x56544b7ade20 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x56544b7add00 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x56544b7adce0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x56544b7adcc0 <col:24> 'unsigned long' 4
|       `-RecordType 0x56544b7ade00 'char_array<4>'
|         `-ClassTemplateSpecialization 0x56544b7add20 'char_array'
|-TypedefDecl 0x56544b7af768 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x56544b7af730 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x56544b7af710 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x56544b7af6b0 'type'
|     `-ElaboratedType 0x56544b7af660 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x56544b7adf90 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x56544b7ade90 'type'
|         `-TemplateSpecializationType 0x56544b7ade20 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x56544b7add00 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x56544b7adce0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x56544b7adcc0 <col:24> 'unsigned long' 4
|           `-RecordType 0x56544b7ade00 'char_array<4>'
|             `-ClassTemplateSpecialization 0x56544b7add20 'char_array'
|-CXXMethodDecl 0x56544b7af8e8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x56544b7af7f8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x56544b7af9d8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56544b7afab8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x56544b7afd88 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56544b7afc90 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x56544b7affc8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56544b7afe40 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56544b7afeb8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56544b7b0198 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56544b7b0088 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56544b7b0100 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56544b7b87f0 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x56544b7b88c0 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x56544b7b8b08 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56544b7b8980 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x56544b7b89f8 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56544b7b8d68 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x56544b7b8bd8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x56544b7b8c50 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56544b7b8f28 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x56544b7b8e38 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56544b7b90e8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x56544b7b8ff0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56544b7b91a0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56544b7b9250 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56544b7b9488 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56544b7b9300 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56544b7b9378 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56544b7b9728 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56544b7b9630 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x56544b7b97f0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x56544b7b9840 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56544b7b9890 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56544b7ac258 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x56544b7ac468 prev 0x56544b7ac258 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56544b7ad7c0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x56544b7ad770 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x56544b7ad750 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x56544b7ad600 'type'
|     `-SubstTemplateTypeParmType 0x56544b7ad420 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x56544b46d2e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56544b46d288 'T'
|       `-RecordType 0x56544b7acf70 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x56544b7ace88 'sized_array_memory'
|-FieldDecl 0x56544b7b98e0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x56544b7b9930 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56544b7b9968 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x56544b7ac500 'int' sugar
|   |-TemplateTypeParmType 0x56544b4a4fd0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56544b4a4f78 'T'
|   `-BuiltinType 0x56544b1a6580 'int'
|-TypedefDecl 0x56544b7b99f8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x56544b7b99c0 'int &'
|   `-SubstTemplateTypeParmType 0x56544b7ac500 'int' sugar
|     |-TemplateTypeParmType 0x56544b4a4fd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56544b4a4f78 'T'
|     `-BuiltinType 0x56544b1a6580 'int'
|-TypedefDecl 0x56544b7b9ab8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x56544b7b9a80 'const int &'
|   `-QualType 0x56544b7ac501 'const int' const
|     `-SubstTemplateTypeParmType 0x56544b7ac500 'int' sugar
|       |-TemplateTypeParmType 0x56544b4a4fd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56544b4a4f78 'T'
|       `-BuiltinType 0x56544b1a6580 'int'
|-TypedefDecl 0x56544b7b9b48 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x56544b7b9b10 'int *'
|   `-SubstTemplateTypeParmType 0x56544b7ac500 'int' sugar
|     |-TemplateTypeParmType 0x56544b4a4fd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56544b4a4f78 'T'
|     `-BuiltinType 0x56544b1a6580 'int'
|-TypedefDecl 0x56544b7b9bd8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x56544b7b9ba0 'const int *'
|   `-QualType 0x56544b7ac501 'const int' const
|     `-SubstTemplateTypeParmType 0x56544b7ac500 'int' sugar
|       |-TemplateTypeParmType 0x56544b4a4fd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56544b4a4f78 'T'
|       `-BuiltinType 0x56544b1a6580 'int'
|-TypedefDecl 0x56544b7ba7c0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x56544b7ba770 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x56544b7ba750 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x56544b7ba6e0 'type'
|     `-SubstTemplateTypeParmType 0x56544b7ba4a0 'int' sugar
|       |-TemplateTypeParmType 0x56544b4780e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56544b478090 'T'
|       `-BuiltinType 0x56544b1a6580 'int'
|-TypedefDecl 0x56544b7ba828 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x56544b7b9a80 'const int &'
|   `-QualType 0x56544b7ac501 'const int' const
|     `-SubstTemplateTypeParmType 0x56544b7ac500 'int' sugar
|       |-TemplateTypeParmType 0x56544b4a4fd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56544b4a4f78 'T'
|       `-BuiltinType 0x56544b1a6580 'int'
|-TypedefDecl 0x56544b7ba880 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56544b1a6580 'int'
|-TypedefDecl 0x56544b7ba8e8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x56544b7b9b10 'int *'
|   `-SubstTemplateTypeParmType 0x56544b7ac500 'int' sugar
|     |-TemplateTypeParmType 0x56544b4a4fd0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56544b4a4f78 'T'
|     `-BuiltinType 0x56544b1a6580 'int'
|-TypedefDecl 0x56544b7ba950 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x56544b7b9ba0 'const int *'
|   `-QualType 0x56544b7ac501 'const int' const
|     `-SubstTemplateTypeParmType 0x56544b7ac500 'int' sugar
|       |-TemplateTypeParmType 0x56544b4a4fd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56544b4a4f78 'T'
|       `-BuiltinType 0x56544b1a6580 'int'
|-EnumDecl 0x56544b7ba9a8 <line:134:5> col:5
| `-EnumConstantDecl 0x56544b7baaa0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56544b7baa80 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56544b4a6658 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56544b4a6630 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56544b4a6610 <col:40> 'int' 1
|-CXXConstructorDecl 0x56544b7bab28 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56544b7bad78 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56544b7babe0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56544b7bac80 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x56544b7bb038 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x56544b7baf20 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x56544b7bb2f8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x56544b7bb1e0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x56544b7bb640 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x56544b7bb520 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x56544b7bb950 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x56544b7bb830 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x56544b7bbc40 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56544b7bba88 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56544b7bbb00 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56544b7bbd68 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x56544b7bbe48 <col:20> Inherited
| `-OptimizeNoneAttr 0x56544b7bbea0 <col:30> Inherited
|-CXXMethodDecl 0x56544b7bbee8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x56544b7bbf98 <col:20> Inherited
| `-OptimizeNoneAttr 0x56544b7bbff0 <col:30> Inherited
|-CXXMethodDecl 0x56544b7bc0b8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56544b7bc168 <col:20> Inherited
| `-OptimizeNoneAttr 0x56544b7bc1c0 <col:30> Inherited
|-CXXMethodDecl 0x56544b7bc208 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56544b7bc2b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56544b7bc310 <col:30> Inherited
|-CXXMethodDecl 0x56544b7bc358 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56544b7bc408 <col:20> Inherited
| `-OptimizeNoneAttr 0x56544b7bc460 <col:30> Inherited
|-CXXMethodDecl 0x56544b7bc4a8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56544b7bc558 <col:20> Inherited
| `-OptimizeNoneAttr 0x56544b7bc5b0 <col:30> Inherited
|-CXXMethodDecl 0x56544b7bc5d8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56544b7bc688 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56544b7bc738 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56544b7bc8f8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56544b7bc7e8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56544b7bc860 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56544b7bca48 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56544b7bc9b8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56544b7bcbf8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x56544b7bcb00 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56544b7bccb0 <col:20>
| `-OptimizeNoneAttr 0x56544b7bcd08 <col:30>
|-CXXMethodDecl 0x56544b7bce28 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x56544b7bcd30 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56544b7bcee0 <col:20>
| `-OptimizeNoneAttr 0x56544b7bcf38 <col:30>
|-CXXMethodDecl 0x56544b7bcff0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x56544b7bcf60 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56544b7bd138 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56544b7bd0a8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56544b7bd268 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x56544b7bd398 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x56544b7bd468 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x56544b7bd538 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x56544b7bd678 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x56544b7bd5e8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56544b7bd7c0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56544b7bd730 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56544b7bd908 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x56544b7bd878 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56544b7bd9c0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56544b7bdac0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56544b7bda30 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56544b7bdb78 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56544b7bdc38 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x56544b7bdd38 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x56544b7bdeb8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x56544b7bddf8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x56544b7be678 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56544b7bdf70 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x56544b7be5d8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x56544b7be4d8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x56544b7be758 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56544b7be8a8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x56544b7be818 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56544b7be960 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56544b7beba8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56544b7bea20 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x56544b7bea98 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56544b7bed68 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x56544b7bec78 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x56544b7befb8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x56544b7bee30 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x56544b7beea8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x56544b7bf078 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x56544b7bf2d8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x56544b7bf1e0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x56544b7bf3a8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b7aa3c8 prev 0x56544b790e58 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56544b7aa4c0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x56544b7aa5b0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x56544b7d20c0 <col:16, line:828:9>
|-CXXDestructorDecl 0x56544b7aa6a0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x56544b7d20d0 <col:25, line:830:9>
|-CXXMethodDecl 0x56544b7aa7a0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x56544b7aa850 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x56544b7aa8f8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x56544b7aa8f8
| `-ParmVarDecl 0x56544b7aaa08 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x56544b7ab1c8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x56544b7ab1c8
  `-ParmVarDecl 0x56544b7ab2d8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b790c68 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x56544b790dc8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x56544b790e58 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x56544b790f10 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x56544b791018 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x56544b790f48 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56544b7c2258 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56544b7c2238 <col:31> 'int' 0
|-CXXConstructorDecl 0x56544b791338 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x56544b7911b0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x56544b791228 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56544b7c2290 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56544b7c2270 <col:59> 'int' 0
|-CXXConstructorDecl 0x56544b791510 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56544b791400 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x56544b791478 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56544b7c22c8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56544b7c22a8 <col:55> 'int' 0
|-CXXConstructorDecl 0x56544b7918c8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56544b7916b0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x56544b791728 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x56544b7917a0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56544b7c2300 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56544b7c22e0 <col:31> 'int' 0
|-CXXConstructorDecl 0x56544b791a88 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x56544b7919c8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x56544b791b80 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x56544b791d68 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x56544b791c70 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x56544b791e58 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x56544b7c26b0 <col:24, line:291:5>
|   `-ReturnStmt 0x56544b7c26a0 <line:290:9, col:79>
|     `-BinaryOperator 0x56544b7c2680 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x56544b7c2558 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x56544b7c24b0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x56544b7c2490 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x56544b7c2388 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x56544b7c2370 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x56544b7c2358 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x56544b7c2328 <col:18> 'Vector<String> *const' lvalue ->_conf 0x56544b7ac1f0
|       | |   |       `-CXXThisExpr 0x56544b7c2318 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x56544b7c2478 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x56544b7c2460 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x56544b7c2428 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x56544b7c23f8 <col:28, col:35> '<bound member function type>' ->size 0x56544b778f48
|       | |           `-ImplicitCastExpr 0x56544b7c2448 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x56544b7c23e0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x56544b7c23b0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x56544b7ac1f0
|       | |                 `-CXXThisExpr 0x56544b7c23a0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x56544b7c2540 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x56544b7c2528 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x56544b7c2510 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x56544b7c24e0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x56544b7bf4f0
|       |         `-CXXThisExpr 0x56544b7c24d0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x56544b7c2660 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x56544b7c2648 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x56544b7c2630 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x56544b7c25f0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x56544b7c25d8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x56544b7c2588 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x56544b7bf5a0
|         |     |   `-CXXThisExpr 0x56544b7c2578 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x56544b7c25b8 <col:73> 'int' 0
|         `-IntegerLiteral 0x56544b7c2610 <col:79> 'int' 0
|-CXXMethodDecl 0x56544b791f18 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x56544b7c2888 <col:32, line:296:5>
|   `-ReturnStmt 0x56544b7c2878 <line:295:9, col:49>
|     `-BinaryOperator 0x56544b7c2858 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x56544b7c2738 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x56544b7c2720 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x56544b7c2708 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x56544b7c26d8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x56544b7bf4f0
|       |       `-CXXThisExpr 0x56544b7c26c8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x56544b7c2838 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x56544b7c2820 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x56544b7c2808 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x56544b7c27c8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x56544b7c27b0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x56544b7c2760 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x56544b7bf5a0
|         |     |   `-CXXThisExpr 0x56544b7c2750 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x56544b7c2790 <col:43> 'int' 0
|         `-IntegerLiteral 0x56544b7c27e8 <col:49> 'int' 0
|-CXXMethodDecl 0x56544b792008 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x56544b7c2a98 <col:19, line:306:5>
|   |-IfStmt 0x56544b7c29b8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x56544b7c28f8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x56544b7c28e0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x56544b7c28b0 <col:13> 'Vector<String> *' lvalue ->_conf 0x56544b7ac1f0
|   | |     `-CXXThisExpr 0x56544b7c28a0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x56544b7c2998 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x56544b7c2968 <col:13, col:20> '<bound member function type>' ->clear 0x56544b77b948
|   |     `-ImplicitCastExpr 0x56544b7c2950 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x56544b7c2920 <col:13> 'Vector<String> *' lvalue ->_conf 0x56544b7ac1f0
|   |         `-CXXThisExpr 0x56544b7c2910 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x56544b7c2a40 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x56544b7c2a10 <col:9, col:16> '<bound member function type>' .clear 0x56544b7bf078
|   |   `-MemberExpr 0x56544b7c29e0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x56544b7bf490
|   |     `-CXXThisExpr 0x56544b7c29d0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x56544b7c2a88 <line:305:9, col:17>
|     `-UnaryOperator 0x56544b7c2a70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56544b7c2a60 <col:17> 'Args *' this
|-CXXMethodDecl 0x56544b792288 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x56544b792190 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x56544b792408 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x56544b792340 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x56544b792788 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x56544b7924b0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x56544b7926e8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x56544b792558 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x56544b7925d0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x56544b7c2db8 <col:67, line:327:5>
|     |-WhileStmt 0x56544b7c2d68 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x56544b7c2b80 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x56544b7c2b00 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x56544b6c6bb8 0x56544b510198 0x56544b50fe70 0x56544b500640 0x56544b5002f0 0x56544b4ffbe0 0x56544b4d2550 0x56544b45fa20
|     | | |-DeclRefExpr 0x56544b7c2ac0 <col:16> 'Iter' lvalue ParmVar 0x56544b792558 'begin' 'Iter'
|     | | `-DeclRefExpr 0x56544b7c2ae0 <col:25> 'Iter' lvalue ParmVar 0x56544b7925d0 'end' 'Iter'
|     | `-CompoundStmt 0x56544b7c2d48 <col:30, line:325:9>
|     |   |-CallExpr 0x56544b7c2ce8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x56544b7c2bc8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x56544b7c2cb8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x56544b7c2c48 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56544b6cbd38 0x56544b6cb958 0x56544b6cb588 0x56544b6cb1a8 0x56544b6cadc8 0x56544b6ca9f8
|     |   |   `-DeclRefExpr 0x56544b7c2c28 <col:24> 'Iter' lvalue ParmVar 0x56544b792558 'begin' 'Iter'
|     |   `-UnaryOperator 0x56544b7c2d30 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x56544b7c2d10 <col:15> 'Iter' lvalue ParmVar 0x56544b792558 'begin' 'Iter'
|     `-ReturnStmt 0x56544b7c2da8 <line:326:9, col:17>
|       `-UnaryOperator 0x56544b7c2d90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56544b7c2d80 <col:17> 'Args *' this
|-CXXMethodDecl 0x56544b792890 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x56544b792800 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x56544b7929d8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x56544b792948 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x56544b792aa0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x56544b7c2e98 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x56544b7c2e38 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x56544b7c2de8 <col:9> '<bound member function type>' ->reset_from 0x56544b7bf918
|   | | `-CXXThisExpr 0x56544b7c2dd8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x56544b7c2e18 <col:20> 'int' 0
|   `-ReturnStmt 0x56544b7c2e88 <line:352:9, col:17>
|     `-UnaryOperator 0x56544b7c2e70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56544b7c2e60 <col:17> 'Args *' this
|-VarDecl 0x56544b792b58 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x56544b792bc0 <col:38> 'int' 1
|-VarDecl 0x56544b792c50 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x56544b792cb8 <col:39> 'int' 2
|-VarDecl 0x56544b792d48 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x56544b792db0 <col:39> 'int' 4
|-VarDecl 0x56544b792e40 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x56544b792ea8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x56544b793228 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x56544b792f20 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56544b793188 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56544b792fd0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b793078 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x56544b7c2ff0 <col:43, line:371:5>
|     `-ReturnStmt 0x56544b7c2fe0 <line:370:9, col:34>
|       `-CallExpr 0x56544b7c2fa8 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c2ec8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c2f48 <col:21> 'const char *' lvalue ParmVar 0x56544b792fd0 'keyword' 'const char *'
|         |-IntegerLiteral 0x56544b7c2f68 <col:30> 'int' 0
|         `-DeclRefExpr 0x56544b7c2f88 <col:33> 'T' lvalue ParmVar 0x56544b793078 'x' 'T &'
|-FunctionTemplateDecl 0x56544b793558 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x56544b793290 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56544b7934b8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56544b793340 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b7933e8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x56544b7c3140 <col:45, line:375:5>
|     `-ReturnStmt 0x56544b7c3130 <line:374:9, col:42>
|       `-CallExpr 0x56544b7c30f8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c3018 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c3098 <col:21> 'const char *' lvalue ParmVar 0x56544b793340 'keyword' 'const char *'
|         |-DeclRefExpr 0x56544b7c30b8 <col:30> 'const int' lvalue Var 0x56544b792b58 'mandatory' 'const int'
|         `-DeclRefExpr 0x56544b7c30d8 <col:41> 'T' lvalue ParmVar 0x56544b7933e8 'x' 'T &'
|-FunctionTemplateDecl 0x56544b793888 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x56544b7935c0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56544b7937e8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56544b793670 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b793718 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x56544b7c3290 <col:45, line:379:5>
|     `-ReturnStmt 0x56544b7c3280 <line:378:9, col:43>
|       `-CallExpr 0x56544b7c3248 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c3168 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c31e8 <col:21> 'const char *' lvalue ParmVar 0x56544b793670 'keyword' 'const char *'
|         |-DeclRefExpr 0x56544b7c3208 <col:30> 'const int' lvalue Var 0x56544b792c50 'positional' 'const int'
|         `-DeclRefExpr 0x56544b7c3228 <col:42> 'T' lvalue ParmVar 0x56544b793718 'x' 'T &'
|-FunctionTemplateDecl 0x56544b793bb8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x56544b7938f0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x56544b793b18 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x56544b7939a0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x56544b793a48 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x56544b7c3490 <col:46, line:383:5>
| |   `-ReturnStmt 0x56544b7c3480 <line:382:9, col:55>
| |     `-CallExpr 0x56544b7c3448 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x56544b7c32b8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x56544b7c3338 <col:21> 'const char *' lvalue ParmVar 0x56544b7939a0 'keyword' 'const char *'
| |       |-BinaryOperator 0x56544b7c3408 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x56544b7c33b8 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x56544b7c3398 <col:30> 'const int' lvalue Var 0x56544b792b58 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x56544b7c33f0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56544b7c33d0 <col:42> 'const int' lvalue Var 0x56544b792c50 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x56544b7c3428 <col:54> 'T' lvalue ParmVar 0x56544b793a48 'x' 'T &'
| |-CXXMethodDecl 0x56544b806718 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, IPAddress &)'
| | |-TemplateArgument type 'IPAddress'
| | |-ParmVarDecl 0x56544b806538 <col:19, col:31> col:31 keyword 'const char *'
| | `-ParmVarDecl 0x56544b806608 <col:40, col:43> col:43 x 'IPAddress &'
| `-CXXMethodDecl 0x56544b806bf8 <col:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x56544b806a18 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x56544b806ae8 <col:40, col:43> col:43 x 'int &'
|-FunctionTemplateDecl 0x56544b793fb8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x56544b793c20 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56544b793f18 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x56544b793cd0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b793d50 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56544b793df8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x56544b7c35d0 <col:54, line:388:5>
|     |-CallExpr 0x56544b7c3558 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56544b7c34a8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56544b7c34e8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56544b7c34f8 <col:30> 'const char *' lvalue ParmVar 0x56544b793cd0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56544b7c3518 <col:39> 'int' lvalue ParmVar 0x56544b793d50 'flags' 'int'
|     | `-DeclRefExpr 0x56544b7c3538 <col:46> 'T' lvalue ParmVar 0x56544b793df8 'x' 'T &'
|     `-ReturnStmt 0x56544b7c35c0 <line:387:9, col:17>
|       `-UnaryOperator 0x56544b7c35a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56544b7c3598 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56544b794468 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x56544b794028 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56544b7940a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56544b7943c8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x56544b794168 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b794208 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x56544b7942a8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x56544b7c3740 <col:74, line:403:5>
|     `-ReturnStmt 0x56544b7c3730 <line:402:9, col:56>
|       `-CallExpr 0x56544b7c36f0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c3600 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c3670 <col:28> 'const char *' lvalue ParmVar 0x56544b794168 'keyword' 'const char *'
|         |-IntegerLiteral 0x56544b7c3690 <col:37> 'int' 0
|         |-DeclRefExpr 0x56544b7c36b0 <col:40> 'T' lvalue ParmVar 0x56544b794208 'x' 'T &'
|         `-DeclRefExpr 0x56544b7c36d0 <col:43> 'const V' lvalue ParmVar 0x56544b7942a8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56544b7948d8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x56544b7944d8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56544b794558 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56544b794838 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x56544b794618 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b7946b8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x56544b794758 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x56544b7c38a8 <col:76, line:407:5>
|     `-ReturnStmt 0x56544b7c3898 <line:406:9, col:65>
|       `-CallExpr 0x56544b7c3858 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c3768 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c37d8 <col:28> 'const char *' lvalue ParmVar 0x56544b794618 'keyword' 'const char *'
|         |-DeclRefExpr 0x56544b7c37f8 <col:37> 'const int' lvalue Var 0x56544b792c50 'positional' 'const int'
|         |-DeclRefExpr 0x56544b7c3818 <col:49> 'T' lvalue ParmVar 0x56544b7946b8 'x' 'T &'
|         `-DeclRefExpr 0x56544b7c3838 <col:52> 'const V' lvalue ParmVar 0x56544b794758 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56544b794e28 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x56544b794948 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56544b7949c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56544b794d88 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x56544b794a88 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b794b08 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x56544b794ba8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x56544b794c48 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x56544b7c3a10 <col:85, line:412:5>
|     |-CallExpr 0x56544b7c3990 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56544b7c38c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x56544b7c3900 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x56544b7c3910 <col:37> 'const char *' lvalue ParmVar 0x56544b794a88 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56544b7c3930 <col:46> 'int' lvalue ParmVar 0x56544b794b08 'flags' 'int'
|     | |-DeclRefExpr 0x56544b7c3950 <col:53> 'T' lvalue ParmVar 0x56544b794ba8 'x' 'T &'
|     | `-DeclRefExpr 0x56544b7c3970 <col:56> 'const V' lvalue ParmVar 0x56544b794c48 'default_value' 'const V &'
|     `-ReturnStmt 0x56544b7c3a00 <line:411:9, col:17>
|       `-UnaryOperator 0x56544b7c39e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56544b7c39d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56544b7952b8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x56544b794ea0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b794f18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56544b795218 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56544b794fd8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b795050 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x56544b7950f8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x56544b7c3b90 <col:53, line:425:5>
|     `-ReturnStmt 0x56544b7c3b80 <line:424:9, col:42>
|       `-CallExpr 0x56544b7c3b40 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c3a40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c3ac0 <col:21> 'const char *' lvalue ParmVar 0x56544b794fd8 'keyword' 'const char *'
|         |-IntegerLiteral 0x56544b7c3ae0 <col:30> 'int' 0
|         |-DeclRefExpr 0x56544b7c3b00 <col:33> 'P' lvalue ParmVar 0x56544b795050 'parser' 'P'
|         `-DeclRefExpr 0x56544b7c3b20 <col:41> 'T' lvalue ParmVar 0x56544b7950f8 'x' 'T &'
|-FunctionTemplateDecl 0x56544b795708 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x56544b795328 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b7953a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56544b795668 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56544b795468 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b7954e0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56544b795588 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x56544b7c3d08 <col:55, line:429:5>
|     `-ReturnStmt 0x56544b7c3cf8 <line:428:9, col:50>
|       `-CallExpr 0x56544b7c3cb8 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c3bb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c3c38 <col:21> 'const char *' lvalue ParmVar 0x56544b795468 'keyword' 'const char *'
|         |-DeclRefExpr 0x56544b7c3c58 <col:30> 'const int' lvalue Var 0x56544b792b58 'mandatory' 'const int'
|         |-DeclRefExpr 0x56544b7c3c78 <col:41> 'P' lvalue ParmVar 0x56544b7954e0 'parser' 'P'
|         `-DeclRefExpr 0x56544b7c3c98 <col:49> 'T' lvalue ParmVar 0x56544b795588 'x' 'T &'
|-FunctionTemplateDecl 0x56544b795b58 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x56544b795778 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b7957f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56544b795ab8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56544b7958b8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b795930 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56544b7959d8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x56544b7c3e80 <col:55, line:433:5>
|     `-ReturnStmt 0x56544b7c3e70 <line:432:9, col:51>
|       `-CallExpr 0x56544b7c3e30 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c3d30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c3db0 <col:21> 'const char *' lvalue ParmVar 0x56544b7958b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56544b7c3dd0 <col:30> 'const int' lvalue Var 0x56544b792c50 'positional' 'const int'
|         |-DeclRefExpr 0x56544b7c3df0 <col:42> 'P' lvalue ParmVar 0x56544b795930 'parser' 'P'
|         `-DeclRefExpr 0x56544b7c3e10 <col:50> 'T' lvalue ParmVar 0x56544b7959d8 'x' 'T &'
|-FunctionTemplateDecl 0x56544b795fa8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x56544b795bc8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b795c48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56544b795f08 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56544b795d08 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b795d80 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x56544b795e28 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x56544b7c40a8 <col:56, line:437:5>
|     `-ReturnStmt 0x56544b7c4098 <line:436:9, col:63>
|       `-CallExpr 0x56544b7c4058 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c3ea8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c3f28 <col:21> 'const char *' lvalue ParmVar 0x56544b795d08 'keyword' 'const char *'
|         |-BinaryOperator 0x56544b7c3ff8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x56544b7c3fa8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56544b7c3f88 <col:30> 'const int' lvalue Var 0x56544b792b58 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56544b7c3fe0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56544b7c3fc0 <col:42> 'const int' lvalue Var 0x56544b792c50 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x56544b7c4018 <col:54> 'P' lvalue ParmVar 0x56544b795d80 'parser' 'P'
|         `-DeclRefExpr 0x56544b7c4038 <col:62> 'T' lvalue ParmVar 0x56544b795e28 'x' 'T &'
|-FunctionTemplateDecl 0x56544b7964d8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x56544b796018 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b796098 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56544b796438 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56544b796158 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b7961d8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56544b796250 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x56544b7962f8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x56544b7c4210 <col:64, line:442:5>
|     |-CallExpr 0x56544b7c4190 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56544b7c40c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56544b7c4100 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56544b7c4110 <col:30> 'const char *' lvalue ParmVar 0x56544b796158 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56544b7c4130 <col:39> 'int' lvalue ParmVar 0x56544b7961d8 'flags' 'int'
|     | |-DeclRefExpr 0x56544b7c4150 <col:46> 'P' lvalue ParmVar 0x56544b796250 'parser' 'P'
|     | `-DeclRefExpr 0x56544b7c4170 <col:54> 'T' lvalue ParmVar 0x56544b7962f8 'x' 'T &'
|     `-ReturnStmt 0x56544b7c4200 <line:441:9, col:17>
|       `-UnaryOperator 0x56544b7c41e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56544b7c41d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56544b796ad8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x56544b796550 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b7965c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56544b796648 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56544b796a38 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x56544b796710 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b796788 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56544b796828 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x56544b7968f8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x56544b7c43a8 <col:84, line:458:5>
|     `-ReturnStmt 0x56544b7c4398 <line:457:9, col:64>
|       `-CallExpr 0x56544b7c4350 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c4240 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c42b0 <col:28> 'const char *' lvalue ParmVar 0x56544b796710 'keyword' 'const char *'
|         |-IntegerLiteral 0x56544b7c42d0 <col:37> 'int' 0
|         |-DeclRefExpr 0x56544b7c42f0 <col:40> 'P' lvalue ParmVar 0x56544b796788 'parser' 'P'
|         |-DeclRefExpr 0x56544b7c4310 <col:48> 'T' lvalue ParmVar 0x56544b796828 'x' 'T &'
|         `-DeclRefExpr 0x56544b7c4330 <col:51> 'const V' lvalue ParmVar 0x56544b7968f8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56544b797058 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x56544b796b50 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b796bc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56544b796c48 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56544b796fb8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x56544b796d10 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b796d88 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x56544b796e28 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x56544b796ec8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x56544b7c4538 <col:86, line:462:5>
|     `-ReturnStmt 0x56544b7c4528 <line:461:9, col:73>
|       `-CallExpr 0x56544b7c44e0 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c43d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c4440 <col:28> 'const char *' lvalue ParmVar 0x56544b796d10 'keyword' 'const char *'
|         |-DeclRefExpr 0x56544b7c4460 <col:37> 'const int' lvalue Var 0x56544b792c50 'positional' 'const int'
|         |-DeclRefExpr 0x56544b7c4480 <col:49> 'P' lvalue ParmVar 0x56544b796d88 'parser' 'P'
|         |-DeclRefExpr 0x56544b7c44a0 <col:57> 'T' lvalue ParmVar 0x56544b796e28 'x' 'T &'
|         `-DeclRefExpr 0x56544b7c44c0 <col:60> 'const V' lvalue ParmVar 0x56544b796ec8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56544b7976b8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x56544b7970d0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b797148 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56544b7971c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56544b797618 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x56544b797290 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b797310 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x56544b797388 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x56544b797428 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x56544b7974c8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x56544b7c46c8 <col:95, line:467:5>
|     |-CallExpr 0x56544b7c4640 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56544b7c4550 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x56544b7c4590 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x56544b7c45a0 <col:37> 'const char *' lvalue ParmVar 0x56544b797290 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56544b7c45c0 <col:46> 'int' lvalue ParmVar 0x56544b797310 'flags' 'int'
|     | |-DeclRefExpr 0x56544b7c45e0 <col:53> 'P' lvalue ParmVar 0x56544b797388 'parser' 'P'
|     | |-DeclRefExpr 0x56544b7c4600 <col:61> 'T' lvalue ParmVar 0x56544b797428 'x' 'T &'
|     | `-DeclRefExpr 0x56544b7c4620 <col:64> 'const V' lvalue ParmVar 0x56544b7974c8 'default_value' 'const V &'
|     `-ReturnStmt 0x56544b7c46b8 <line:466:9, col:17>
|       `-UnaryOperator 0x56544b7c46a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56544b7c4690 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56544b797c98 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x56544b797738 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b7977b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56544b797838 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56544b797bf8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56544b797900 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b797978 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x56544b797a18 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56544b797ab8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x56544b7c4870 <col:63, line:481:5>
|     `-ReturnStmt 0x56544b7c4860 <line:480:9, col:47>
|       `-CallExpr 0x56544b7c4818 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c46f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c4778 <col:21> 'const char *' lvalue ParmVar 0x56544b797900 'keyword' 'const char *'
|         |-IntegerLiteral 0x56544b7c4798 <col:30> 'int' 0
|         |-DeclRefExpr 0x56544b7c47b8 <col:33> 'P' lvalue ParmVar 0x56544b797978 'parser' 'P'
|         |-DeclRefExpr 0x56544b7c47d8 <col:41> 'T1' lvalue ParmVar 0x56544b797a18 'x1' 'T1 &'
|         `-DeclRefExpr 0x56544b7c47f8 <col:45> 'T2' lvalue ParmVar 0x56544b797ab8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56544b7985e8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x56544b797d10 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b797d88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56544b797e08 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56544b798548 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56544b797ed0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b797f48 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56544b797fe8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56544b798450 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x56544b7c4a10 <col:65, line:485:5>
|     `-ReturnStmt 0x56544b7c4a00 <line:484:9, col:55>
|       `-CallExpr 0x56544b7c49b8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c4898 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c4918 <col:21> 'const char *' lvalue ParmVar 0x56544b797ed0 'keyword' 'const char *'
|         |-DeclRefExpr 0x56544b7c4938 <col:30> 'const int' lvalue Var 0x56544b792b58 'mandatory' 'const int'
|         |-DeclRefExpr 0x56544b7c4958 <col:41> 'P' lvalue ParmVar 0x56544b797f48 'parser' 'P'
|         |-DeclRefExpr 0x56544b7c4978 <col:49> 'T1' lvalue ParmVar 0x56544b797fe8 'x1' 'T1 &'
|         `-DeclRefExpr 0x56544b7c4998 <col:53> 'T2' lvalue ParmVar 0x56544b798450 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56544b798b68 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x56544b798660 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b7986d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56544b798758 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56544b798ac8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56544b798820 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b798898 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56544b798938 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56544b7989d8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x56544b7c4bb0 <col:65, line:489:5>
|     `-ReturnStmt 0x56544b7c4ba0 <line:488:9, col:56>
|       `-CallExpr 0x56544b7c4b58 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c4a38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c4ab8 <col:21> 'const char *' lvalue ParmVar 0x56544b798820 'keyword' 'const char *'
|         |-DeclRefExpr 0x56544b7c4ad8 <col:30> 'const int' lvalue Var 0x56544b792c50 'positional' 'const int'
|         |-DeclRefExpr 0x56544b7c4af8 <col:42> 'P' lvalue ParmVar 0x56544b798898 'parser' 'P'
|         |-DeclRefExpr 0x56544b7c4b18 <col:50> 'T1' lvalue ParmVar 0x56544b798938 'x1' 'T1 &'
|         `-DeclRefExpr 0x56544b7c4b38 <col:54> 'T2' lvalue ParmVar 0x56544b7989d8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56544b7990e8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x56544b798be0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b798c58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56544b798cd8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| |-CXXMethodDecl 0x56544b799048 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
| | |-ParmVarDecl 0x56544b798da0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x56544b798e18 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x56544b798eb8 <col:50, col:54> col:54 referenced x1 'T1 &'
| | |-ParmVarDecl 0x56544b798f58 <col:58, col:62> col:62 referenced x2 'T2 &'
| | `-CompoundStmt 0x56544b7c4e00 <col:66, line:493:5>
| |   `-ReturnStmt 0x56544b7c4df0 <line:492:9, col:68>
| |     `-CallExpr 0x56544b7c4da8 <col:16, col:68> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x56544b7c4bd8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x56544b7c4c58 <col:21> 'const char *' lvalue ParmVar 0x56544b798da0 'keyword' 'const char *'
| |       |-BinaryOperator 0x56544b7c4d28 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x56544b7c4cd8 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x56544b7c4cb8 <col:30> 'const int' lvalue Var 0x56544b792b58 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x56544b7c4d10 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56544b7c4cf0 <col:42> 'const int' lvalue Var 0x56544b792c50 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x56544b7c4d48 <col:54> 'P' lvalue ParmVar 0x56544b798e18 'parser' 'P'
| |       |-DeclRefExpr 0x56544b7c4d68 <col:62> 'T1' lvalue ParmVar 0x56544b798eb8 'x1' 'T1 &'
| |       `-DeclRefExpr 0x56544b7c4d88 <col:66> 'T2' lvalue ParmVar 0x56544b798f58 'x2' 'T2 &'
| `-CXXMethodDecl 0x56544b806068 <line:491:5, line:493:5> line:491:11 used read_mp 'Args &(const char *, IPPrefixArg, IPAddress &, IPAddress &)'
|   |-TemplateArgument type 'IPPrefixArg'
|   |-TemplateArgument type 'IPAddress'
|   |-TemplateArgument type 'IPAddress'
|   |-ParmVarDecl 0x56544b805ce0 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x56544b805d88 <col:40, col:42> col:42 parser 'IPPrefixArg':'IPPrefixArg'
|   |-ParmVarDecl 0x56544b805e58 <col:50, col:54> col:54 x1 'IPAddress &'
|   `-ParmVarDecl 0x56544b805f28 <col:58, col:62> col:62 x2 'IPAddress &'
|-FunctionTemplateDecl 0x56544b799748 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x56544b799160 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b7991d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56544b799258 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56544b7996a8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56544b799320 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b7993a0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56544b799418 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x56544b7994b8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56544b799558 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x56544b7c4f90 <col:74, line:498:5>
|     |-CallExpr 0x56544b7c4f08 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56544b7c4e18 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56544b7c4e58 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56544b7c4e68 <col:30> 'const char *' lvalue ParmVar 0x56544b799320 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56544b7c4e88 <col:39> 'int' lvalue ParmVar 0x56544b7993a0 'flags' 'int'
|     | |-DeclRefExpr 0x56544b7c4ea8 <col:46> 'P' lvalue ParmVar 0x56544b799418 'parser' 'P'
|     | |-DeclRefExpr 0x56544b7c4ec8 <col:54> 'T1' lvalue ParmVar 0x56544b7994b8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x56544b7c4ee8 <col:58> 'T2' lvalue ParmVar 0x56544b799558 'x2' 'T2 &'
|     `-ReturnStmt 0x56544b7c4f80 <line:497:9, col:17>
|       `-UnaryOperator 0x56544b7c4f68 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56544b7c4f58 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56544b799aa8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x56544b7997c8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56544b799a08 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56544b799880 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b7998f8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x56544b7c50d8 <col:52, line:509:5>
|     `-ReturnStmt 0x56544b7c50c8 <line:508:9, col:44>
|       `-CallExpr 0x56544b7c5090 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c4fc0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c5030 <col:26> 'const char *' lvalue ParmVar 0x56544b799880 'keyword' 'const char *'
|         |-IntegerLiteral 0x56544b7c5050 <col:35> 'int' 0
|         `-DeclRefExpr 0x56544b7c5070 <col:38> 'P' lvalue ParmVar 0x56544b7998f8 'parser' 'P'
|-FunctionTemplateDecl 0x56544b799da8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x56544b799b10 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56544b799d08 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56544b799bc0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b799c38 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x56544b7c5218 <col:54, line:513:5>
|     `-ReturnStmt 0x56544b7c5208 <line:512:9, col:52>
|       `-CallExpr 0x56544b7c51d0 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c5100 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c5170 <col:26> 'const char *' lvalue ParmVar 0x56544b799bc0 'keyword' 'const char *'
|         |-DeclRefExpr 0x56544b7c5190 <col:35> 'const int' lvalue Var 0x56544b792b58 'mandatory' 'const int'
|         `-DeclRefExpr 0x56544b7c51b0 <col:46> 'P' lvalue ParmVar 0x56544b799c38 'parser' 'P'
|-FunctionTemplateDecl 0x56544b79a0a8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x56544b799e10 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56544b79a008 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56544b799ec0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b799f38 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x56544b7c5358 <col:54, line:517:5>
|     `-ReturnStmt 0x56544b7c5348 <line:516:9, col:53>
|       `-CallExpr 0x56544b7c5310 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c5240 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c52b0 <col:26> 'const char *' lvalue ParmVar 0x56544b799ec0 'keyword' 'const char *'
|         |-DeclRefExpr 0x56544b7c52d0 <col:35> 'const int' lvalue Var 0x56544b792c50 'positional' 'const int'
|         `-DeclRefExpr 0x56544b7c52f0 <col:47> 'P' lvalue ParmVar 0x56544b799f38 'parser' 'P'
|-FunctionTemplateDecl 0x56544b79a3a8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x56544b79a110 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56544b79a308 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56544b79a1c0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b79a238 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x56544b7c5548 <col:55, line:521:5>
|     `-ReturnStmt 0x56544b7c5538 <line:520:9, col:65>
|       `-CallExpr 0x56544b7c5500 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c5380 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c53f0 <col:26> 'const char *' lvalue ParmVar 0x56544b79a1c0 'keyword' 'const char *'
|         |-BinaryOperator 0x56544b7c54c0 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x56544b7c5470 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56544b7c5450 <col:35> 'const int' lvalue Var 0x56544b792b58 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56544b7c54a8 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56544b7c5488 <col:47> 'const int' lvalue Var 0x56544b792c50 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x56544b7c54e0 <col:59> 'P' lvalue ParmVar 0x56544b79a238 'parser' 'P'
|-FunctionTemplateDecl 0x56544b79a778 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x56544b79a410 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56544b79a6d8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x56544b79a4c0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b79a540 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x56544b79a5b8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x56544b7c5688 <col:63, line:526:5>
|     |-CallExpr 0x56544b7c5610 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56544b7c5560 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x56544b7c55a0 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x56544b7c55b0 <col:35> 'const char *' lvalue ParmVar 0x56544b79a4c0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56544b7c55d0 <col:44> 'int' lvalue ParmVar 0x56544b79a540 'flags' 'int'
|     | `-DeclRefExpr 0x56544b7c55f0 <col:51> 'P' lvalue ParmVar 0x56544b79a5b8 'parser' 'P'
|     `-ReturnStmt 0x56544b7c5678 <line:525:9, col:17>
|       `-UnaryOperator 0x56544b7c5660 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56544b7c5650 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56544b79abc8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x56544b79a7e8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b79a868 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56544b79ab28 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56544b79a928 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b79a9a0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x56544b79aa48 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x56544b7c57e0 <col:58, line:541:5>
|     `-ReturnStmt 0x56544b7c57d0 <line:540:9, col:39>
|       `-CallExpr 0x56544b7c5798 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c56b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c5738 <col:21> 'const char *' lvalue ParmVar 0x56544b79a928 'keyword' 'const char *'
|         |-DeclRefExpr 0x56544b7c5758 <col:30> 'P' lvalue ParmVar 0x56544b79a9a0 'parser' 'P'
|         `-DeclRefExpr 0x56544b7c5778 <col:38> 'T' lvalue ParmVar 0x56544b79aa48 'x' 'T &'
|-FunctionTemplateDecl 0x56544b79b018 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x56544b79ac38 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b79acb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56544b79af78 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56544b79ad78 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b79adf0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56544b79ae98 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x56544b7c5918 <col:60, line:545:5>
|     `-ReturnStmt 0x56544b7c5908 <line:544:9, col:41>
|       `-CallExpr 0x56544b7c58d0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c5808 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c5870 <col:23> 'const char *' lvalue ParmVar 0x56544b79ad78 'keyword' 'const char *'
|         |-DeclRefExpr 0x56544b7c5890 <col:32> 'P' lvalue ParmVar 0x56544b79adf0 'parser' 'P'
|         `-DeclRefExpr 0x56544b7c58b0 <col:40> 'T' lvalue ParmVar 0x56544b79ae98 'x' 'T &'
|-FunctionTemplateDecl 0x56544b79b468 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x56544b79b088 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b79b108 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56544b79b3c8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56544b79b1c8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b79b240 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56544b79b2e8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x56544b7c5a50 <col:60, line:549:5>
|     `-ReturnStmt 0x56544b7c5a40 <line:548:9, col:41>
|       `-CallExpr 0x56544b7c5a08 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c5940 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c59a8 <col:23> 'const char *' lvalue ParmVar 0x56544b79b1c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56544b7c59c8 <col:32> 'P' lvalue ParmVar 0x56544b79b240 'parser' 'P'
|         `-DeclRefExpr 0x56544b7c59e8 <col:40> 'T' lvalue ParmVar 0x56544b79b2e8 'x' 'T &'
|-FunctionTemplateDecl 0x56544b79b8b8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x56544b79b4d8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b79b558 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56544b79b818 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56544b79b618 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b79b690 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x56544b79b738 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x56544b7c5b88 <col:61, line:553:5>
|     `-ReturnStmt 0x56544b7c5b78 <line:552:9, col:42>
|       `-CallExpr 0x56544b7c5b40 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c5a78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c5ae0 <col:24> 'const char *' lvalue ParmVar 0x56544b79b618 'keyword' 'const char *'
|         |-DeclRefExpr 0x56544b7c5b00 <col:33> 'P' lvalue ParmVar 0x56544b79b690 'parser' 'P'
|         `-DeclRefExpr 0x56544b7c5b20 <col:41> 'T' lvalue ParmVar 0x56544b79b738 'x' 'T &'
|-FunctionTemplateDecl 0x56544b79bd98 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x56544b79b928 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b79b9a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56544b79bcf8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56544b79ba68 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b79bae8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x56544b79bb60 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x56544b79bc08 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x56544b7c5d00 <col:69, line:557:5>
|     `-ReturnStmt 0x56544b7c5cf0 <line:556:9, col:46>
|       `-CallExpr 0x56544b7c5cb0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c5bb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c5c30 <col:21> 'const char *' lvalue ParmVar 0x56544b79ba68 'keyword' 'const char *'
|         |-DeclRefExpr 0x56544b7c5c50 <col:30> 'int' lvalue ParmVar 0x56544b79bae8 'flags' 'int'
|         |-DeclRefExpr 0x56544b7c5c70 <col:37> 'P' lvalue ParmVar 0x56544b79bb60 'parser' 'P'
|         `-DeclRefExpr 0x56544b7c5c90 <col:45> 'T' lvalue ParmVar 0x56544b79bc08 'x' 'T &'
|-FunctionTemplateDecl 0x56544b79c0a8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x56544b79be10 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56544b79c008 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56544b79bec0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b79bf38 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x56544b7c5e40 <col:56, line:571:5>
|     `-ReturnStmt 0x56544b7c5e30 <line:570:9, col:48>
|       `-CallExpr 0x56544b7c5df8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c5d28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c5d98 <col:30> 'const char *' lvalue ParmVar 0x56544b79bec0 'keyword' 'const char *'
|         |-IntegerLiteral 0x56544b7c5db8 <col:39> 'int' 0
|         `-DeclRefExpr 0x56544b7c5dd8 <col:42> 'P' lvalue ParmVar 0x56544b79bf38 'parser' 'P'
|-FunctionTemplateDecl 0x56544b79c438 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x56544b79c110 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56544b79c398 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x56544b79c1c0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b79c240 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56544b79c2b8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x56544b7c6010 <col:67, line:576:5>
|     |-CallExpr 0x56544b7c5f98 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56544b7c5e58 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x56544b7c5e98 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x56544b7c5ea8 <col:39> 'const char *' lvalue ParmVar 0x56544b79c1c0 'keyword' 'const char *'
|     | |-BinaryOperator 0x56544b7c5f58 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x56544b7c5f08 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56544b7c5ec8 <col:48> 'int' lvalue ParmVar 0x56544b79c240 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56544b7c5f40 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56544b7c5f20 <col:56> 'const int' lvalue Var 0x56544b792e40 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x56544b7c5f78 <col:68> 'P' lvalue ParmVar 0x56544b79c2b8 'parser' 'P'
|     `-ReturnStmt 0x56544b7c6000 <line:575:9, col:17>
|       `-UnaryOperator 0x56544b7c5fe8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56544b7c5fd8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56544b79c888 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x56544b79c4a8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b79c528 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56544b79c7e8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56544b79c5e8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b79c660 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x56544b79c708 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x56544b7c6180 <col:62, line:592:5>
|     `-ReturnStmt 0x56544b7c6170 <line:591:9, col:51>
|       `-CallExpr 0x56544b7c6130 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c6040 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c60b0 <col:30> 'const char *' lvalue ParmVar 0x56544b79c5e8 'keyword' 'const char *'
|         |-IntegerLiteral 0x56544b7c60d0 <col:39> 'int' 0
|         |-DeclRefExpr 0x56544b7c60f0 <col:42> 'P' lvalue ParmVar 0x56544b79c660 'parser' 'P'
|         `-DeclRefExpr 0x56544b7c6110 <col:50> 'T' lvalue ParmVar 0x56544b79c708 'x' 'T &'
|-FunctionTemplateDecl 0x56544b79cd68 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x56544b79c8f8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b79c978 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56544b79ccc8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56544b79ca38 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b79cab8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56544b79cb30 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x56544b79cbd8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x56544b7c6378 <col:73, line:597:5>
|     |-CallExpr 0x56544b7c62f8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56544b7c6198 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x56544b7c61d8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x56544b7c61e8 <col:39> 'const char *' lvalue ParmVar 0x56544b79ca38 'keyword' 'const char *'
|     | |-BinaryOperator 0x56544b7c6298 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x56544b7c6248 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56544b7c6208 <col:48> 'int' lvalue ParmVar 0x56544b79cab8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56544b7c6280 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56544b7c6260 <col:56> 'const int' lvalue Var 0x56544b792e40 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x56544b7c62b8 <col:68> 'P' lvalue ParmVar 0x56544b79cb30 'parser' 'P'
|     | `-DeclRefExpr 0x56544b7c62d8 <col:76> 'T' lvalue ParmVar 0x56544b79cbd8 'x' 'T &'
|     `-ReturnStmt 0x56544b7c6368 <line:596:9, col:17>
|       `-UnaryOperator 0x56544b7c6350 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56544b7c6340 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56544b79d318 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x56544b79cde0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b79ce58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56544b79d278 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x56544b79cf18 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b79cf90 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x56544b79d150 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56544b7c64e8 <col:65, line:614:5>
|     `-ReturnStmt 0x56544b7c64d8 <line:613:9, col:46>
|       `-CallExpr 0x56544b7c6498 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c63a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c6418 <col:25> 'const char *' lvalue ParmVar 0x56544b79cf18 'keyword' 'const char *'
|         |-IntegerLiteral 0x56544b7c6438 <col:34> 'int' 0
|         |-DeclRefExpr 0x56544b7c6458 <col:37> 'P' lvalue ParmVar 0x56544b79cf90 'parser' 'P'
|         `-DeclRefExpr 0x56544b7c6478 <col:45> 'Vector<T>' lvalue ParmVar 0x56544b79d150 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x56544b79d748 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x56544b79d388 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56544b79d6a8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x56544b79d440 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b79d590 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56544b7c6700 <col:55, line:618:5>
|     `-ReturnStmt 0x56544b7c66f0 <line:617:9, col:55>
|       `-CallExpr 0x56544b7c66b0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c6510 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c6580 <col:25> 'const char *' lvalue ParmVar 0x56544b79d440 'keyword' 'const char *'
|         |-IntegerLiteral 0x56544b7c65a0 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x56544b7c6670 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x56544b7c6690 <col:54> 'Vector<T>' lvalue ParmVar 0x56544b79d590 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x56544b79dd18 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x56544b79d7b0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b79d828 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56544b79dc78 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x56544b79d8e8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b79d968 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56544b79d9e0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x56544b79db30 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56544b7c68f8 <col:76, line:623:5>
|     |-CallExpr 0x56544b7c6878 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56544b7c6718 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x56544b7c6758 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x56544b7c6768 <col:34> 'const char *' lvalue ParmVar 0x56544b79d8e8 'keyword' 'const char *'
|     | |-BinaryOperator 0x56544b7c6818 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x56544b7c67c8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56544b7c6788 <col:43> 'int' lvalue ParmVar 0x56544b79d968 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56544b7c6800 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56544b7c67e0 <col:51> 'const int' lvalue Var 0x56544b792e40 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x56544b7c6838 <col:63> 'P' lvalue ParmVar 0x56544b79d9e0 'parser' 'P'
|     | `-DeclRefExpr 0x56544b7c6858 <col:71> 'Vector<T>' lvalue ParmVar 0x56544b79db30 'x' 'Vector<T> &'
|     `-ReturnStmt 0x56544b7c68e8 <line:622:9, col:17>
|       `-UnaryOperator 0x56544b7c68d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56544b7c68c0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56544b79e258 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x56544b79dd90 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b79de08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56544b79e1b8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x56544b79dec8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b79df48 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56544b79e090 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56544b7c6b60 <col:66, line:627:5>
|     `-ReturnStmt 0x56544b7c6b50 <line:626:9, col:59>
|       `-CallExpr 0x56544b7c6b10 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56544b7c6928 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56544b7c6998 <col:25> 'const char *' lvalue ParmVar 0x56544b79dec8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56544b7c69b8 <col:34> 'int' lvalue ParmVar 0x56544b79df48 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x56544b7c6ad0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x56544b7c6af0 <col:58> 'Vector<T>' lvalue ParmVar 0x56544b79e090 'x' 'Vector<T> &'
|-CXXMethodDecl 0x56544b79e2e8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x56544b7c6be0 <col:25, line:633:5>
|   `-ReturnStmt 0x56544b7c6bd0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x56544b7c6bb8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x56544b7c6b88 <col:16> 'const bool' lvalue ->_status 0x56544b7ac058
|         `-CXXThisExpr 0x56544b7c6b78 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x56544b79e468 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x56544b79e3a0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x56544b7c6cc8 <col:27, line:639:5>
|   |-BinaryOperator 0x56544b7c6c70 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56544b7c6bf8 <col:9> 'bool' lvalue ParmVar 0x56544b79e3a0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56544b7c6c58 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56544b7c6c28 <col:13> 'bool' lvalue ->_status 0x56544b7ac058
|   |     `-CXXThisExpr 0x56544b7c6c18 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x56544b7c6cb8 <line:638:9, col:17>
|     `-UnaryOperator 0x56544b7c6ca0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56544b7c6c90 <col:17> 'Args *' this
|-CXXMethodDecl 0x56544b79e5e8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x56544b79e528 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x56544b7c6db8 <col:39, line:644:5>
|   |-BinaryOperator 0x56544b7c6d60 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56544b7c6ce8 <col:9> 'bool' lvalue ParmVar 0x56544b79e528 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56544b7c6d48 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56544b7c6d18 <col:13> 'const bool' lvalue ->_status 0x56544b7ac058
|   |     `-CXXThisExpr 0x56544b7c6d08 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x56544b7c6da8 <line:643:9, col:17>
|     `-UnaryOperator 0x56544b7c6d90 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56544b7c6d80 <col:17> 'const Args *' this
|-CXXMethodDecl 0x56544b79e6b0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x56544b7c6e60 <col:30, line:651:5>
|   `-ReturnStmt 0x56544b7c6e50 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x56544b7c6e38 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x56544b7c6e08 <col:16> 'bool' lvalue ->_read_status 0x56544b78b610
|         `-ImplicitCastExpr 0x56544b7c6de8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x56544b7c6dd8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x56544b79e7f8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x56544b79e768 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x56544b7c6f68 <col:32, line:658:5>
|   |-BinaryOperator 0x56544b7c6f10 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56544b7c6e78 <col:9> 'bool' lvalue ParmVar 0x56544b79e768 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56544b7c6ef8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56544b7c6ec8 <col:13> 'bool' lvalue ->_read_status 0x56544b78b610
|   |     `-ImplicitCastExpr 0x56544b7c6ea8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x56544b7c6e98 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x56544b7c6f58 <line:657:9, col:17>
|     `-UnaryOperator 0x56544b7c6f40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56544b7c6f30 <col:17> 'Args *' this
|-CXXMethodDecl 0x56544b79e948 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x56544b79e8b8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x56544b7c7078 <col:44, line:663:5>
|   |-BinaryOperator 0x56544b7c7020 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56544b7c6f88 <col:9> 'bool' lvalue ParmVar 0x56544b79e8b8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56544b7c7008 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56544b7c6fd8 <col:13> 'bool' lvalue ->_read_status 0x56544b78b610
|   |     `-ImplicitCastExpr 0x56544b7c6fb8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x56544b7c6fa8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x56544b7c7068 <line:662:9, col:17>
|     `-UnaryOperator 0x56544b7c7050 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56544b7c7040 <col:17> 'const Args *' this
|-CXXMethodDecl 0x56544b79ea10 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x56544b79ead8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x56544b79eba0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x56544b79ec68 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x56544b79ef78 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x56544b79ed08 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56544b79eed8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x56544b79ede8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x56544b7c7430 <col:19, line:706:5>
|     `-IfStmt 0x56544b7c7408 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x56544b7c7178 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x56544b7c7338 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x56544b7c7308 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x56544b7c72c8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x56544b7c71d0 <col:42> '<bound member function type>' ->simple_slot 0x56544b7c05d0
|       |     | `-CXXThisExpr 0x56544b7c71c0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x56544b7c7268 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x56544b7c7220 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x56544b514c38
|       |     | `-DeclRefExpr 0x56544b7c7200 <col:55> 'T' lvalue ParmVar 0x56544b79ede8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x56544b7c72a8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x56544b7c73f8 <line:705:13, col:34>
|         `-CallExpr 0x56544b7c73d0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x56544b7c7358 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x56544b7c73b0 <col:33> 'T' lvalue ParmVar 0x56544b79ede8 'x' 'T &'
|-FunctionTemplateDecl 0x56544b79f248 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x56544b79efd8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56544b79f1a8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x56544b79f0b8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x56544b7c7810 <col:31, line:717:5>
|     |-DeclStmt 0x56544b7c7570 <line:713:9, col:23>
|     | `-VarDecl 0x56544b7c7458 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x56544b7c7548 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x56544b7c74d0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x56544b7c7528 <col:21> 'T' lvalue ParmVar 0x56544b79f0b8 'x' 'T &'
|     |-IfStmt 0x56544b7c77c0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x56544b7c7668 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x56544b7c77a0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x56544b7c7740 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x56544b7c76d0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56544b6cbd38 0x56544b6cb958 0x56544b6cb588 0x56544b6cb1a8 0x56544b6cadc8 0x56544b6ca9f8
|     |   | `-DeclRefExpr 0x56544b7c76b0 <col:14> 'T *' lvalue Var 0x56544b7c7458 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x56544b7c7780 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x56544b7c77f8 <line:716:9, col:16>
|       `-DeclRefExpr 0x56544b7c77d8 <col:16> 'T *' lvalue Var 0x56544b7c7458 's' 'T *'
|-FunctionTemplateDecl 0x56544b79f658 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x56544b79f2a8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56544b79f328 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56544b79f5b8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x56544b79f408 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x56544b79f4a8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x56544b7c7b20 <col:37, line:726:5>
|     |-IfStmt 0x56544b7c7ab0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x56544b7c7ad0 <line:723:13, col:26>
|     | | `-VarDecl 0x56544b7c7878 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x56544b7c7968 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x56544b7c78f0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x56544b7c7948 <col:25> 'T' lvalue ParmVar 0x56544b79f408 'x' 'T &'
|     | |-DeclRefExpr 0x56544b7c7990 <col:16> 'T *' lvalue Var 0x56544b7c7878 's' 'T *'
|     | `-BinaryOperator 0x56544b7c7a90 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x56544b7c7a40 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x56544b7c79d0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56544b6cbd38 0x56544b6cb958 0x56544b6cb588 0x56544b6cb1a8 0x56544b6cadc8 0x56544b6ca9f8
|     |   | `-DeclRefExpr 0x56544b7c79b0 <col:14> 'T *' lvalue Var 0x56544b7c7878 's' 'T *'
|     |   `-DeclRefExpr 0x56544b7c7a70 <col:18> 'const V' lvalue ParmVar 0x56544b79f4a8 'value' 'const V &'
|     `-ReturnStmt 0x56544b7c7b10 <line:725:9, col:17>
|       `-UnaryOperator 0x56544b7c7af8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56544b7c7ae8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56544b79fa58 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x56544b79f6c0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56544b79f9b8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x56544b79f770 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b79f7f0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56544b79f898 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x56544b7c8940 <col:65, line:737:5>
|     |-DeclStmt 0x56544b7c7bb8 <line:732:9, col:26>
|     | `-VarDecl 0x56544b7c7b50 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56544b7c8908 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x56544b7c8928 <line:733:13, col:58>
|       | `-VarDecl 0x56544b7c7be0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56544b7c7dc0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56544b7c7d90 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56544b7c7d78 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56544b7c7d58 <col:26, col:58> 'String' (CXXTemporary 0x56544b7c7d58)
|       |           `-CXXMemberCallExpr 0x56544b7c7ce8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56544b7c7c58 <col:26> '<bound member function type>' ->find 0x56544b7bfbe8
|       |             | `-CXXThisExpr 0x56544b7c7c48 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56544b7c7d20 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56544b7c7c88 <col:31> 'const char *' lvalue ParmVar 0x56544b79f770 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56544b7c7d38 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56544b7c7ca8 <col:40> 'int' lvalue ParmVar 0x56544b79f7f0 'flags' 'int'
|       |             `-DeclRefExpr 0x56544b7c7cc8 <col:47> 'Args::Slot *' lvalue Var 0x56544b7c7b50 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56544b7c7e78 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56544b7c7e60 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56544b7c7e40 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56544b7c7e10 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56544b4d6bf8
|       |       `-ImplicitCastExpr 0x56544b7c7df8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56544b7c7dd8 <col:20> 'String' lvalue Var 0x56544b7c7be0 'str' 'String'
|       `-CompoundStmt 0x56544b7c88e8 <col:61, line:736:9>
|         |-DeclStmt 0x56544b7c8330 <line:734:13, col:76>
|         | `-VarDecl 0x56544b7c7ec8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x56544b7c8300 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56544b7c8270 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56544b7c82b8 <col:60> 'T' lvalue ParmVar 0x56544b79f898 'variable' 'T &'
|         |     `-UnaryOperator 0x56544b7c82e8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56544b7c82d8 <col:71> 'Args *' this
|         `-CallExpr 0x56544b7c88b8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x56544b7c8358 <col:13> '<bound member function type>' ->postparse 0x56544b7bfdf8
|           | `-CXXThisExpr 0x56544b7c8348 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56544b7c8878 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x56544b7c8388 <col:23> 'T *' lvalue Var 0x56544b7c7ec8 's' 'T *'
|           | `-CallExpr 0x56544b7c8838 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56544b7c8610 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x56544b7c8710 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x56544b7c8730 <col:86> 'String' lvalue Var 0x56544b7c7be0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56544b7c87e0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56544b7c8770 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56544b6cbd38 0x56544b6cb958 0x56544b6cb588 0x56544b6cb1a8 0x56544b6cadc8 0x56544b6ca9f8
|           |   | `-DeclRefExpr 0x56544b7c8750 <col:92> 'T *' lvalue Var 0x56544b7c7ec8 's' 'T *'
|           |   `-UnaryOperator 0x56544b7c8820 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56544b7c8810 <col:96> 'Args *' this
|           `-DeclRefExpr 0x56544b7c8898 <col:103> 'Args::Slot *' lvalue Var 0x56544b7c7b50 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56544b79ffa8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x56544b79fac8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56544b79fb48 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56544b79ff08 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x56544b79fc08 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b79fc88 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x56544b79fd28 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x56544b79fdc8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x56544b7c97e0 <col:88, line:745:5>
|     |-DeclStmt 0x56544b7c89d8 <line:741:9, col:26>
|     | `-VarDecl 0x56544b7c8970 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56544b7c8bf8 <line:742:9, col:55>
|     | `-VarDecl 0x56544b7c8a00 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x56544b7c8be0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x56544b7c8bb0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x56544b7c8b98 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x56544b7c8b78 <col:22, col:54> 'String' (CXXTemporary 0x56544b7c8b78)
|     |           `-CXXMemberCallExpr 0x56544b7c8b08 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x56544b7c8a78 <col:22> '<bound member function type>' ->find 0x56544b7bfbe8
|     |             | `-CXXThisExpr 0x56544b7c8a68 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x56544b7c8b40 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56544b7c8aa8 <col:27> 'const char *' lvalue ParmVar 0x56544b79fc08 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x56544b7c8b58 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56544b7c8ac8 <col:36> 'int' lvalue ParmVar 0x56544b79fc88 'flags' 'int'
|     |             `-DeclRefExpr 0x56544b7c8ae8 <col:43> 'Args::Slot *' lvalue Var 0x56544b7c8970 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x56544b7c8fd0 <line:743:9, col:72>
|     | `-VarDecl 0x56544b7c8c48 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56544b7c8fa0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56544b7c8f10 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x56544b7c8f58 <col:56> 'T' lvalue ParmVar 0x56544b79fd28 'variable' 'T &'
|     |     `-UnaryOperator 0x56544b7c8f88 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56544b7c8f78 <col:67> 'Args *' this
|     `-CallExpr 0x56544b7c97b0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x56544b7c8ff8 <col:9> '<bound member function type>' ->postparse 0x56544b7bfdf8
|       | `-CXXThisExpr 0x56544b7c8fe8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x56544b7c9770 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x56544b7c9028 <col:19> 'T *' lvalue Var 0x56544b7c8c48 's' 'T *'
|       | `-ParenExpr 0x56544b7c9750 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x56544b7c9720 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x56544b7c9708 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x56544b7c96f0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x56544b7c96d0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x56544b7c96a0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x56544b4d6bf8
|       |     |       `-ImplicitCastExpr 0x56544b7c9688 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x56544b7c9048 <col:25> 'String' lvalue Var 0x56544b7c8a00 'str' 'String'
|       |     |-CallExpr 0x56544b7c94f8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x56544b7c92d0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x56544b7c93d0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x56544b7c93f0 <col:89> 'String' lvalue Var 0x56544b7c8a00 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x56544b7c94a0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x56544b7c9430 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56544b6cbd38 0x56544b6cb958 0x56544b6cb588 0x56544b6cb1a8 0x56544b6cadc8 0x56544b6ca9f8
|       |     | | `-DeclRefExpr 0x56544b7c9410 <col:95> 'T *' lvalue Var 0x56544b7c8c48 's' 'T *'
|       |     | `-UnaryOperator 0x56544b7c94e0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x56544b7c94d0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x56544b7c9668 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x56544b7c9648 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x56544b7c9618 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x56544b7c95c8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x56544b7c9558 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56544b6cbd38 0x56544b6cb958 0x56544b6cb588 0x56544b6cb1a8 0x56544b6cadc8 0x56544b6ca9f8
|       |         | | `-DeclRefExpr 0x56544b7c9538 <col:109> 'T *' lvalue Var 0x56544b7c8c48 's' 'T *'
|       |         | `-DeclRefExpr 0x56544b7c95f8 <col:113> 'const V' lvalue ParmVar 0x56544b79fdc8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x56544b7c9638 <col:120> 'bool' true
|       `-DeclRefExpr 0x56544b7c9790 <col:128> 'Args::Slot *' lvalue Var 0x56544b7c8970 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56544b7a8400 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x56544b7a0020 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b7a0098 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56544b7a8360 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x56544b7a0158 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b7a01d8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56544b7a0250 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x56544b7a02f8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x56544b7cd6f8 <col:75, line:754:5>
|     |-DeclStmt 0x56544b7c9888 <line:749:9, col:26>
|     | `-VarDecl 0x56544b7c9820 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56544b7cd6c0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x56544b7cd6e0 <line:750:13, col:58>
|       | `-VarDecl 0x56544b7c98b0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56544b7c9a90 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56544b7c9a60 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56544b7c9a48 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56544b7c9a28 <col:26, col:58> 'String' (CXXTemporary 0x56544b7c9a28)
|       |           `-CXXMemberCallExpr 0x56544b7c99b8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56544b7c9928 <col:26> '<bound member function type>' ->find 0x56544b7bfbe8
|       |             | `-CXXThisExpr 0x56544b7c9918 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56544b7c99f0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56544b7c9958 <col:31> 'const char *' lvalue ParmVar 0x56544b7a0158 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56544b7c9a08 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56544b7c9978 <col:40> 'int' lvalue ParmVar 0x56544b7a01d8 'flags' 'int'
|       |             `-DeclRefExpr 0x56544b7c9998 <col:47> 'Args::Slot *' lvalue Var 0x56544b7c9820 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56544b7c9b48 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56544b7c9b30 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56544b7c9b10 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56544b7c9ae0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56544b4d6bf8
|       |       `-ImplicitCastExpr 0x56544b7c9ac8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56544b7c9aa8 <col:20> 'String' lvalue Var 0x56544b7c98b0 'str' 'String'
|       `-CompoundStmt 0x56544b7cd6a0 <col:61, line:753:9>
|         |-DeclStmt 0x56544b7c9f20 <line:751:13, col:63>
|         | `-VarDecl 0x56544b7c9b98 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x56544b7c9ef0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56544b7c9e60 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56544b7c9ea8 <col:47> 'T' lvalue ParmVar 0x56544b7a02f8 'variable' 'T &'
|         |     `-UnaryOperator 0x56544b7c9ed8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56544b7c9ec8 <col:58> 'Args *' this
|         `-CallExpr 0x56544b7cd670 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x56544b7c9f48 <col:13> '<bound member function type>' ->postparse 0x56544b7bfdf8
|           | `-CXXThisExpr 0x56544b7c9f38 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56544b7cd630 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x56544b7c9f78 <col:23> 'T *' lvalue Var 0x56544b7c9b98 's' 'T *'
|           | `-CallExpr 0x56544b7cd5f0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56544b7cd480 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x56544b7cd4c8 <col:56> 'P' lvalue ParmVar 0x56544b7a0250 'parser' 'P'
|           |   |-DeclRefExpr 0x56544b7cd4e8 <col:64> 'String' lvalue Var 0x56544b7c98b0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56544b7cd598 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56544b7cd528 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56544b6cbd38 0x56544b6cb958 0x56544b6cb588 0x56544b6cb1a8 0x56544b6cadc8 0x56544b6ca9f8
|           |   | `-DeclRefExpr 0x56544b7cd508 <col:70> 'T *' lvalue Var 0x56544b7c9b98 's' 'T *'
|           |   `-UnaryOperator 0x56544b7cd5d8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56544b7cd5c8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x56544b7cd650 <col:81> 'Args::Slot *' lvalue Var 0x56544b7c9820 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56544b7a8a68 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x56544b7a8478 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56544b7a84f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x56544b7a8578 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56544b7a89c8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x56544b7a8640 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b7a86c0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x56544b7a8738 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x56544b7a87d8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x56544b7a8878 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x56544b7ce488 <col:98, line:762:5>
|     |-DeclStmt 0x56544b7cd790 <line:758:9, col:26>
|     | `-VarDecl 0x56544b7cd728 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56544b7cd9b0 <line:759:9, col:55>
|     | `-VarDecl 0x56544b7cd7b8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x56544b7cd998 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x56544b7cd968 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x56544b7cd950 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x56544b7cd930 <col:22, col:54> 'String' (CXXTemporary 0x56544b7cd930)
|     |           `-CXXMemberCallExpr 0x56544b7cd8c0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x56544b7cd830 <col:22> '<bound member function type>' ->find 0x56544b7bfbe8
|     |             | `-CXXThisExpr 0x56544b7cd820 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x56544b7cd8f8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56544b7cd860 <col:27> 'const char *' lvalue ParmVar 0x56544b7a8640 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x56544b7cd910 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56544b7cd880 <col:36> 'int' lvalue ParmVar 0x56544b7a86c0 'flags' 'int'
|     |             `-DeclRefExpr 0x56544b7cd8a0 <col:43> 'Args::Slot *' lvalue Var 0x56544b7cd728 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x56544b7cddd0 <line:760:9, col:59>
|     | `-VarDecl 0x56544b7cda08 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56544b7cdda0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56544b7cdd10 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x56544b7cdd58 <col:43> 'T' lvalue ParmVar 0x56544b7a87d8 'variable' 'T &'
|     |     `-UnaryOperator 0x56544b7cdd88 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56544b7cdd78 <col:54> 'Args *' this
|     `-CallExpr 0x56544b7ce458 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x56544b7cddf8 <col:9> '<bound member function type>' ->postparse 0x56544b7bfdf8
|       | `-CXXThisExpr 0x56544b7cdde8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x56544b7ce418 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x56544b7cde28 <col:19> 'T *' lvalue Var 0x56544b7cda08 's' 'T *'
|       | `-ParenExpr 0x56544b7ce3f8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x56544b7ce3c8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x56544b7ce3b0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x56544b7ce398 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x56544b7ce378 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x56544b7ce348 <col:25> '<bound member function type>' .operator int (String::*)() const 0x56544b4d6bf8
|       |     |       `-ImplicitCastExpr 0x56544b7ce330 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x56544b7cde48 <col:25> 'String' lvalue Var 0x56544b7cd7b8 'str' 'String'
|       |     |-CallExpr 0x56544b7ce1a0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x56544b7ce030 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x56544b7ce078 <col:59> 'P' lvalue ParmVar 0x56544b7a8738 'parser' 'P'
|       |     | |-DeclRefExpr 0x56544b7ce098 <col:67> 'String' lvalue Var 0x56544b7cd7b8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x56544b7ce148 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x56544b7ce0d8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56544b6cbd38 0x56544b6cb958 0x56544b6cb588 0x56544b6cb1a8 0x56544b6cadc8 0x56544b6ca9f8
|       |     | | `-DeclRefExpr 0x56544b7ce0b8 <col:73> 'T *' lvalue Var 0x56544b7cda08 's' 'T *'
|       |     | `-UnaryOperator 0x56544b7ce188 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x56544b7ce178 <col:77> 'Args *' this
|       |     `-ParenExpr 0x56544b7ce310 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x56544b7ce2f0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x56544b7ce2c0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x56544b7ce270 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x56544b7ce200 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56544b6cbd38 0x56544b6cb958 0x56544b6cb588 0x56544b6cb1a8 0x56544b6cadc8 0x56544b6ca9f8
|       |         | | `-DeclRefExpr 0x56544b7ce1e0 <col:87> 'T *' lvalue Var 0x56544b7cda08 's' 'T *'
|       |         | `-DeclRefExpr 0x56544b7ce2a0 <col:91> 'const V' lvalue ParmVar 0x56544b7a8878 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x56544b7ce2e0 <col:98> 'bool' true
|       `-DeclRefExpr 0x56544b7ce438 <col:106> 'Args::Slot *' lvalue Var 0x56544b7cd728 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56544b7a90d8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x56544b7a8ae8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b7a8b68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56544b7a8be8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56544b7a9038 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56544b7a8cb0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b7a8d30 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56544b7a8da8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x56544b7a8e48 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x56544b7a8ee8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x56544b7cf468 <col:60, line:773:5>
|     |-DeclStmt 0x56544b7ce530 <line:767:9, col:26>
|     | `-VarDecl 0x56544b7ce4c8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56544b7cf430 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x56544b7cf450 <line:768:13, col:58>
|       | `-VarDecl 0x56544b7ce558 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56544b7ce738 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56544b7ce708 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56544b7ce6f0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56544b7ce6d0 <col:26, col:58> 'String' (CXXTemporary 0x56544b7ce6d0)
|       |           `-CXXMemberCallExpr 0x56544b7ce660 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56544b7ce5d0 <col:26> '<bound member function type>' ->find 0x56544b7bfbe8
|       |             | `-CXXThisExpr 0x56544b7ce5c0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56544b7ce698 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56544b7ce600 <col:31> 'const char *' lvalue ParmVar 0x56544b7a8cb0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56544b7ce6b0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56544b7ce620 <col:40> 'int' lvalue ParmVar 0x56544b7a8d30 'flags' 'int'
|       |             `-DeclRefExpr 0x56544b7ce640 <col:47> 'Args::Slot *' lvalue Var 0x56544b7ce4c8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56544b7ce7f0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56544b7ce7d8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56544b7ce7b8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56544b7ce788 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56544b4d6bf8
|       |       `-ImplicitCastExpr 0x56544b7ce770 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56544b7ce750 <col:20> 'String' lvalue Var 0x56544b7ce558 'str' 'String'
|       `-CompoundStmt 0x56544b7cf408 <col:61, line:772:9>
|         |-DeclStmt 0x56544b7ceb30 <line:769:13, col:66>
|         | `-VarDecl 0x56544b7ce848 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x56544b7ceb00 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56544b7cea70 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56544b7ceab8 <col:49> 'T1' lvalue ParmVar 0x56544b7a8e48 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x56544b7ceae8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56544b7cead8 <col:61> 'Args *' this
|         |-DeclStmt 0x56544b7ceea0 <line:770:13, col:66>
|         | `-VarDecl 0x56544b7cebb8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x56544b7cee70 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56544b7cede0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56544b7cee28 <col:49> 'T2' lvalue ParmVar 0x56544b7a8ee8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x56544b7cee58 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56544b7cee48 <col:61> 'Args *' this
|         `-CallExpr 0x56544b7cf3d8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x56544b7ceec8 <col:13> '<bound member function type>' ->postparse 0x56544b7bfdf8
|           | `-CXXThisExpr 0x56544b7ceeb8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56544b7cf398 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x56544b7cef38 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x56544b7ceef8 <col:23> 'T1 *' lvalue Var 0x56544b7ce848 's1' 'T1 *'
|           | | `-DeclRefExpr 0x56544b7cef18 <col:29> 'T2 *' lvalue Var 0x56544b7cebb8 's2' 'T2 *'
|           | `-CallExpr 0x56544b7cf350 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56544b7cf120 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x56544b7cf168 <col:63> 'P' lvalue ParmVar 0x56544b7a8da8 'parser' 'P'
|           |   |-DeclRefExpr 0x56544b7cf188 <col:71> 'String' lvalue Var 0x56544b7ce558 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56544b7cf238 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56544b7cf1c8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56544b6cbd38 0x56544b6cb958 0x56544b6cb588 0x56544b6cb1a8 0x56544b6cadc8 0x56544b6ca9f8
|           |   | `-DeclRefExpr 0x56544b7cf1a8 <col:77> 'T1 *' lvalue Var 0x56544b7ce848 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x56544b7cf2f8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56544b7cf288 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56544b6cbd38 0x56544b6cb958 0x56544b6cb588 0x56544b6cb1a8 0x56544b6cadc8 0x56544b6ca9f8
|           |   | `-DeclRefExpr 0x56544b7cf268 <col:82> 'T2 *' lvalue Var 0x56544b7cebb8 's2' 'T2 *'
|           |   `-UnaryOperator 0x56544b7cf338 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56544b7cf328 <col:87> 'Args *' this
|           `-DeclRefExpr 0x56544b7cf3b8 <col:94> 'Args::Slot *' lvalue Var 0x56544b7ce4c8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56544b7a94c8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x56544b7a9158 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56544b7a9428 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56544b7a9210 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b7a9290 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56544b7a9308 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x56544b7cf980 <col:67, line:780:5>
|     |-DeclStmt 0x56544b7cf500 <line:777:9, col:26>
|     | `-VarDecl 0x56544b7cf498 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56544b7cf948 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x56544b7cf968 <line:778:13, col:58>
|       | `-VarDecl 0x56544b7cf528 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56544b7cf708 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56544b7cf6d8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56544b7cf6c0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56544b7cf6a0 <col:26, col:58> 'String' (CXXTemporary 0x56544b7cf6a0)
|       |           `-CXXMemberCallExpr 0x56544b7cf630 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56544b7cf5a0 <col:26> '<bound member function type>' ->find 0x56544b7bfbe8
|       |             | `-CXXThisExpr 0x56544b7cf590 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56544b7cf668 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56544b7cf5d0 <col:31> 'const char *' lvalue ParmVar 0x56544b7a9210 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56544b7cf680 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56544b7cf5f0 <col:40> 'int' lvalue ParmVar 0x56544b7a9290 'flags' 'int'
|       |             `-DeclRefExpr 0x56544b7cf610 <col:47> 'Args::Slot *' lvalue Var 0x56544b7cf498 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56544b7cf7c0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56544b7cf7a8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56544b7cf788 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56544b7cf758 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56544b4d6bf8
|       |       `-ImplicitCastExpr 0x56544b7cf740 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56544b7cf720 <col:20> 'String' lvalue Var 0x56544b7cf528 'str' 'String'
|       `-CallExpr 0x56544b7cf918 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x56544b7cf7e8 <col:13> '<bound member function type>' ->postparse 0x56544b7bfdf8
|         | `-CXXThisExpr 0x56544b7cf7d8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x56544b7cf8c8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x56544b7cf838 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x56544b7cf818 <col:23> 'P' lvalue ParmVar 0x56544b7a9308 'parser' 'P'
|         | |-DeclRefExpr 0x56544b7cf880 <col:36> 'String' lvalue Var 0x56544b7cf528 'str' 'String'
|         | `-UnaryOperator 0x56544b7cf8b0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x56544b7cf8a0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x56544b7cf8f8 <col:49> 'Args::Slot *' lvalue Var 0x56544b7cf498 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56544b7a9868 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56544b7a9538 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56544b7a97c8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56544b7a95f0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b7a9670 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56544b7a96e8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x56544b7d02f0 <col:71, line:792:5>
|     |-DeclStmt 0x56544b7cfa18 <line:784:9, col:26>
|     | `-VarDecl 0x56544b7cf9b0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56544b7cfae8 <line:785:9, col:29>
|     | `-VarDecl 0x56544b7cfa48 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56544b7cfad0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56544b7cfab0 <col:28> 'int' 1
|     |-WhileStmt 0x56544b7d01a0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x56544b7d01c0 <line:786:16, col:61>
|     | | `-VarDecl 0x56544b7cfb10 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56544b7cfcf0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56544b7cfcc0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56544b7cfca8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56544b7cfc88 <col:29, col:61> 'String' (CXXTemporary 0x56544b7cfc88)
|     | |           `-CXXMemberCallExpr 0x56544b7cfc18 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56544b7cfb88 <col:29> '<bound member function type>' ->find 0x56544b7bfbe8
|     | |             | `-CXXThisExpr 0x56544b7cfb78 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56544b7cfc50 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56544b7cfbb8 <col:34> 'const char *' lvalue ParmVar 0x56544b7a95f0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56544b7cfc68 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56544b7cfbd8 <col:43> 'int' lvalue ParmVar 0x56544b7a9670 'flags' 'int'
|     | |             `-DeclRefExpr 0x56544b7cfbf8 <col:50> 'Args::Slot *' lvalue Var 0x56544b7cf9b0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56544b7cfda8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56544b7cfd90 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56544b7cfd70 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56544b7cfd40 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56544b4d6bf8
|     | |       `-ImplicitCastExpr 0x56544b7cfd28 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56544b7cfd08 <col:23> 'String' lvalue Var 0x56544b7cfb10 'str' 'String'
|     | `-CompoundStmt 0x56544b7d0178 <col:64, line:790:9>
|     |   |-CallExpr 0x56544b7cff00 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x56544b7cfdd0 <col:13> '<bound member function type>' ->postparse 0x56544b7bfdf8
|     |   | | `-CXXThisExpr 0x56544b7cfdc0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x56544b7cfeb0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x56544b7cfe20 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x56544b7cfe00 <col:23> 'P' lvalue ParmVar 0x56544b7a96e8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x56544b7cfe68 <col:36> 'String' lvalue Var 0x56544b7cfb10 'str' 'String'
|     |   | | `-UnaryOperator 0x56544b7cfe98 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x56544b7cfe88 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x56544b7cfee0 <col:49> 'Args::Slot *' lvalue Var 0x56544b7cf9b0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x56544b7d0098 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56544b7cff30 <col:13> 'int' lvalue Var 0x56544b7cfa48 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56544b7d0080 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56544b7d0060 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56544b7cffc8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56544b7cffa8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56544b7cff90 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56544b7cff50 <col:28> 'int' lvalue Var 0x56544b7cfa48 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56544b7cff70 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56544b7d0048 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56544b7d0018 <col:49> 'bool' lvalue ->_read_status 0x56544b78b610
|     |   |         `-ImplicitCastExpr 0x56544b7cfff8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56544b7cffe8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56544b7d0148 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56544b7d00b8 <col:13> 'int' lvalue ParmVar 0x56544b7a9670 'flags' 'int'
|     |     `-UnaryOperator 0x56544b7d0130 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56544b7d0118 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56544b7d00f8 <col:23> 'const int' lvalue Var 0x56544b792b58 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56544b7d02d0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56544b7d0208 <col:9> 'bool' lvalue ->_read_status 0x56544b78b610
|       | `-ImplicitCastExpr 0x56544b7d01e8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56544b7d01d8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56544b7d02b0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56544b7d0290 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56544b7d0278 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56544b7d0238 <col:25> 'int' lvalue Var 0x56544b7cfa48 'read_status' 'int'
|           `-IntegerLiteral 0x56544b7d0258 <col:40> 'int' 1
|-FunctionTemplateDecl 0x56544b7a9d48 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56544b7a98d8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b7a9958 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56544b7a9ca8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x56544b7a9a18 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b7a9a98 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56544b7a9b10 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x56544b7a9bb8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x56544b7d1280 <col:84, line:805:5>
|     |-DeclStmt 0x56544b7d0398 <line:796:9, col:26>
|     | `-VarDecl 0x56544b7d0330 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56544b7d0468 <line:797:9, col:29>
|     | `-VarDecl 0x56544b7d03c8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56544b7d0450 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56544b7d0430 <col:28> 'int' 1
|     |-DeclStmt 0x56544b7d07a0 <line:798:9, col:71>
|     | `-VarDecl 0x56544b7d04b8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56544b7d0770 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56544b7d06e0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x56544b7d0728 <col:55> 'T' lvalue ParmVar 0x56544b7a9bb8 'variable' 'T &'
|     |     `-UnaryOperator 0x56544b7d0758 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56544b7d0748 <col:66> 'Args *' this
|     |-WhileStmt 0x56544b7d1130 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x56544b7d1150 <line:799:16, col:61>
|     | | `-VarDecl 0x56544b7d07c8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56544b7d09a8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56544b7d0978 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56544b7d0960 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56544b7d0940 <col:29, col:61> 'String' (CXXTemporary 0x56544b7d0940)
|     | |           `-CXXMemberCallExpr 0x56544b7d08d0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56544b7d0840 <col:29> '<bound member function type>' ->find 0x56544b7bfbe8
|     | |             | `-CXXThisExpr 0x56544b7d0830 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56544b7d0908 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56544b7d0870 <col:34> 'const char *' lvalue ParmVar 0x56544b7a9a18 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56544b7d0920 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56544b7d0890 <col:43> 'int' lvalue ParmVar 0x56544b7a9a98 'flags' 'int'
|     | |             `-DeclRefExpr 0x56544b7d08b0 <col:50> 'Args::Slot *' lvalue Var 0x56544b7d0330 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56544b7d0a60 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56544b7d0a48 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56544b7d0a28 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56544b7d09f8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56544b4d6bf8
|     | |       `-ImplicitCastExpr 0x56544b7d09e0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56544b7d09c0 <col:23> 'String' lvalue Var 0x56544b7d07c8 'str' 'String'
|     | `-CompoundStmt 0x56544b7d1108 <col:64, line:803:9>
|     |   |-CallExpr 0x56544b7d0e90 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x56544b7d0a88 <col:13> '<bound member function type>' ->postparse 0x56544b7bfdf8
|     |   | | `-CXXThisExpr 0x56544b7d0a78 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x56544b7d0e50 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x56544b7d0ab8 <col:23> 'T *' lvalue Var 0x56544b7d04b8 's' 'T *'
|     |   | | `-CallExpr 0x56544b7d0e10 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x56544b7d0ca0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x56544b7d0ce8 <col:56> 'P' lvalue ParmVar 0x56544b7a9b10 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x56544b7d0d08 <col:64> 'String' lvalue Var 0x56544b7d07c8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x56544b7d0db8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x56544b7d0d48 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56544b6cbd38 0x56544b6cb958 0x56544b6cb588 0x56544b6cb1a8 0x56544b6cadc8 0x56544b6ca9f8
|     |   | |   | `-DeclRefExpr 0x56544b7d0d28 <col:70> 'T *' lvalue Var 0x56544b7d04b8 's' 'T *'
|     |   | |   `-UnaryOperator 0x56544b7d0df8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x56544b7d0de8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x56544b7d0e70 <col:81> 'Args::Slot *' lvalue Var 0x56544b7d0330 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x56544b7d1028 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56544b7d0ec0 <col:13> 'int' lvalue Var 0x56544b7d03c8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56544b7d1010 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56544b7d0ff0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56544b7d0f58 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56544b7d0f38 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56544b7d0f20 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56544b7d0ee0 <col:28> 'int' lvalue Var 0x56544b7d03c8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56544b7d0f00 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56544b7d0fd8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56544b7d0fa8 <col:49> 'bool' lvalue ->_read_status 0x56544b78b610
|     |   |         `-ImplicitCastExpr 0x56544b7d0f88 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56544b7d0f78 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56544b7d10d8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56544b7d1048 <col:13> 'int' lvalue ParmVar 0x56544b7a9a98 'flags' 'int'
|     |     `-UnaryOperator 0x56544b7d10c0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56544b7d10a8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56544b7d1088 <col:23> 'const int' lvalue Var 0x56544b792b58 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56544b7d1260 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56544b7d1198 <col:9> 'bool' lvalue ->_read_status 0x56544b78b610
|       | `-ImplicitCastExpr 0x56544b7d1178 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56544b7d1168 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56544b7d1240 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56544b7d1220 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56544b7d1208 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56544b7d11c8 <col:25> 'int' lvalue Var 0x56544b7d03c8 'read_status' 'int'
|           `-IntegerLiteral 0x56544b7d11e8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x56544b7aa328 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x56544b7a9dc0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56544b7a9e38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56544b7aa288 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x56544b7a9ef8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56544b7a9f78 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x56544b7a9ff0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x56544b7aa140 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x56544b7d2088 <col:87, line:821:5>
|     |-DeclStmt 0x56544b7d1330 <line:809:9, col:26>
|     | `-VarDecl 0x56544b7d12c8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56544b7d1400 <line:810:9, col:29>
|     | `-VarDecl 0x56544b7d1360 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56544b7d13e8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56544b7d13c8 <col:28> 'int' 1
|     |-DeclStmt 0x56544b7d1648 <line:811:9, col:38>
|     | `-VarDecl 0x56544b7d1530 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x56544b7d1620 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x56544b7d15a8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x56544b7d1600 <col:29> 'Vector<T>' lvalue ParmVar 0x56544b7aa140 'variable' 'Vector<T> &'
|     |-WhileStmt 0x56544b7d1f38 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x56544b7d1f58 <line:812:16, col:61>
|     | | `-VarDecl 0x56544b7d1670 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56544b7d1850 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56544b7d1820 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56544b7d1808 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56544b7d17e8 <col:29, col:61> 'String' (CXXTemporary 0x56544b7d17e8)
|     | |           `-CXXMemberCallExpr 0x56544b7d1778 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56544b7d16e8 <col:29> '<bound member function type>' ->find 0x56544b7bfbe8
|     | |             | `-CXXThisExpr 0x56544b7d16d8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56544b7d17b0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56544b7d1718 <col:34> 'const char *' lvalue ParmVar 0x56544b7a9ef8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56544b7d17c8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56544b7d1738 <col:43> 'int' lvalue ParmVar 0x56544b7a9f78 'flags' 'int'
|     | |             `-DeclRefExpr 0x56544b7d1758 <col:50> 'Args::Slot *' lvalue Var 0x56544b7d12c8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56544b7d1908 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56544b7d18f0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56544b7d18d0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56544b7d18a0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56544b4d6bf8
|     | |       `-ImplicitCastExpr 0x56544b7d1888 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56544b7d1868 <col:23> 'String' lvalue Var 0x56544b7d1670 'str' 'String'
|     | `-CompoundStmt 0x56544b7d1f00 <col:64, line:819:9>
|     |   |-DeclStmt 0x56544b7d19c8 <line:813:13, col:23>
|     |   | `-VarDecl 0x56544b7d1930 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x56544b7d19a8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x56544b7d1b48 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x56544b7d19f0 <col:13> '<bound member function type>' ->postparse 0x56544b7bfdf8
|     |   | | `-CXXThisExpr 0x56544b7d19e0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x56544b7d1af0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x56544b7d1a40 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x56544b7d1a20 <col:23> 'P' lvalue ParmVar 0x56544b7a9ff0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x56544b7d1a88 <col:36> 'String' lvalue Var 0x56544b7d1670 'str' 'String'
|     |   | | |-DeclRefExpr 0x56544b7d1aa8 <col:41> 'T' lvalue Var 0x56544b7d1930 'sx' 'T'
|     |   | | `-UnaryOperator 0x56544b7d1ad8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x56544b7d1ac8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x56544b7d1b28 <col:53> 'Args::Slot *' lvalue Var 0x56544b7d12c8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x56544b7d1ca0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x56544b7d1bd8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x56544b7d1ba8 <col:17> 'bool' lvalue ->_read_status 0x56544b78b610
|     |   | |   `-ImplicitCastExpr 0x56544b7d1b88 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x56544b7d1b78 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x56544b7d1c78 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x56544b7d1c10 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x56544b7d1bf0 <col:17> 'Vector<T> *' lvalue Var 0x56544b7d1530 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x56544b7d1c58 <col:30> 'T' lvalue Var 0x56544b7d1930 'sx' 'T'
|     |   |-BinaryOperator 0x56544b7d1e20 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56544b7d1cb8 <col:13> 'int' lvalue Var 0x56544b7d1360 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56544b7d1e08 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56544b7d1de8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56544b7d1d50 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56544b7d1d30 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56544b7d1d18 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56544b7d1cd8 <col:28> 'int' lvalue Var 0x56544b7d1360 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56544b7d1cf8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56544b7d1dd0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56544b7d1da0 <col:49> 'bool' lvalue ->_read_status 0x56544b78b610
|     |   |         `-ImplicitCastExpr 0x56544b7d1d80 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56544b7d1d70 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56544b7d1ed0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56544b7d1e40 <col:13> 'int' lvalue ParmVar 0x56544b7a9f78 'flags' 'int'
|     |     `-UnaryOperator 0x56544b7d1eb8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56544b7d1ea0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56544b7d1e80 <col:23> 'const int' lvalue Var 0x56544b792b58 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56544b7d2068 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56544b7d1fa0 <col:9> 'bool' lvalue ->_read_status 0x56544b78b610
|       | `-ImplicitCastExpr 0x56544b7d1f80 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56544b7d1f70 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56544b7d2048 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56544b7d2028 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56544b7d2010 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56544b7d1fd0 <col:25> 'int' lvalue Var 0x56544b7d1360 'read_status' 'int'
|           `-IntegerLiteral 0x56544b7d1ff0 <col:40> 'int' 1
|-AccessSpecDecl 0x56544b7aa3a0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x56544b7aa3c8 prev 0x56544b790e58 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x56544b7aa4c0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x56544b7aa5b0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x56544b7d20c0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x56544b7aa6a0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x56544b7d20d0 <col:25, line:830:9>
| |-CXXMethodDecl 0x56544b7aa7a0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x56544b7aa850 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x56544b7aa8f8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x56544b7aa8f8
| | `-ParmVarDecl 0x56544b7aaa08 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x56544b7ab1c8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x56544b7ab1c8
|   `-ParmVarDecl 0x56544b7ab2d8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x56544b7aaa78 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x56544b7aabd8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x56544b7aadd0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x56544b7aac80 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x56544b7aacf8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x56544b7d22b0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x56544b7ab088 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x56544b7d2120 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x56544b7d20e0 <col:20> 'void *' lvalue ParmVar 0x56544b7aac80 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x56544b7ab0f0 '_slot' 'char *'
| | | `-CXXNewExpr 0x56544b7d21a8 <col:32, col:45> 'char *' array Function 0x56544b2fa658 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x56544b7d2190 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x56544b7d2160 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x56544b7aacf8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x56544b7ab150 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x56544b7d2270 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x56544b7d2230 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x56544b7aacf8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x56544b7d2330 <col:61, line:838:9>
| |-CXXDestructorDecl 0x56544b7aaed0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x56544b7aa6a0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x56544b7d23b8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x56544b7d2398 <line:840:13, col:22> 'void' array Function 0x56544b2fa9b8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x56544b7d2380 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x56544b7d2350 <col:22> 'char *' lvalue ->_slot 0x56544b7ab0f0
| |         `-CXXThisExpr 0x56544b7d2340 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x56544b7aafd0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x56544b7aa7a0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x56544b7d25a8 <col:22, line:844:9>
| |   `-CallExpr 0x56544b7d2510 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x56544b7d24f8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56544b7d24d8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x56544b406658 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x56544b7d2548 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x56544b7d2428 <col:20> 'void *' lvalue ->_ptr 0x56544b7ab088
| |     |   `-CXXThisExpr 0x56544b7d2418 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x56544b7d2578 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x56544b7d2560 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x56544b7d2468 <col:26> 'char *' lvalue ->_slot 0x56544b7ab0f0
| |     |     `-CXXThisExpr 0x56544b7d2458 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x56544b7d2590 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x56544b7d24a8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x56544b7ab150
| |         `-CXXThisExpr 0x56544b7d2498 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x56544b7ab088 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x56544b7ab0f0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x56544b7ab150 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x56544b7ab348 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x56544b7ab348
| | `-ParmVarDecl 0x56544b7ab458 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x56544b7ab4f8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x56544b7ab4f8
|   `-ParmVarDecl 0x56544b7ab608 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x56544b7ab7a8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x56544b7ab678 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x56544b7ab718 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x56544b7aba40 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x56544b7abc38 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x56544b7abb08 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x56544b7abdb8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x56544b7d25e0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x56544b7d25c0 <col:20> 'T *' lvalue ParmVar 0x56544b7abb08 'ptr' 'T *'
|   | `-CompoundStmt 0x56544b7d2630 <col:25, line:854:9>
|   |-CXXMethodDecl 0x56544b7abd08 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x56544b7aa7a0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x56544b7d27e0 <col:22, line:857:9>
|   |   `-CallExpr 0x56544b7d27b0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x56544b7d2640 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x56544b4bed88 0x56544b4690b8
|   |     |-CXXOperatorCallExpr 0x56544b7d2740 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x56544b7d26d0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56544b6cbd38 0x56544b6cb958 0x56544b6cb588 0x56544b6cb1a8 0x56544b6cadc8 0x56544b6ca9f8
|   |     | `-MemberExpr 0x56544b7d26a0 <col:29> 'T *' lvalue ->_ptr 0x56544b7abdb8
|   |     |   `-CXXThisExpr 0x56544b7d2690 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x56544b7d2780 <col:35> 'T' lvalue ->_slot 0x56544b7abe18
|   |       `-CXXThisExpr 0x56544b7d2770 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x56544b7abdb8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x56544b7abe18 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x56544b7abe80 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x56544b7abf80 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x56544b7abfd0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56544b7abf60 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x56544b7abf40 <col:31> 'int' 48
|-FieldDecl 0x56544b7abff8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x56544b7ac058 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x56544b7ac0b8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x56544b7ac1f0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x56544b7bf490 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x56544b7bf4f0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x56544b7bf5a0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x56544b7bf7c8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x56544b7bf6d0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x56544b7bf918 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x56544b7bf888 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x56544b7bfbe8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x56544b7bf9d8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x56544b7bfa58 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x56544b7bfb00 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x56544b7bfdf8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x56544b7bfcb0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x56544b7bfd28 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x56544b7bfec8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x56544b7c0018 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x56544b7bff80 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x56544b7c03a8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x56544b7c00d8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x56544b7c0158 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x56544b7c0200 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x56544b7c02b8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x56544b7c05d0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x56544b7c0480 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x56544b7c04f8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x56544b7c21d8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x56544b7c0680 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x56544b7c2138 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x56544b7c0758 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPPrefixArg
         0 |   _Bool allow_bare_address
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b51bdd0 <../dummy_inc/click/ipaddress.hh:382:1, line:396:1> line:382:7 referenced class IPPrefixArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56544b51bee8 <col:1, col:7> col:7 implicit referenced class IPPrefixArg
|-AccessSpecDecl 0x56544b51bf78 <col:21, col:27> col:21 public
|-CXXConstructorDecl 0x56544b51c088 <line:383:5, line:385:5> line:383:5 used IPPrefixArg 'void (bool)'
| |-ParmVarDecl 0x56544b51bfb0 <col:17, col:44> col:22 used allow_bare_address_ 'bool' cinit
| | `-CXXBoolLiteralExpr 0x56544b51c8c0 <col:44> 'bool' false
| |-CXXCtorInitializer Field 0x56544b51c858 'allow_bare_address' 'bool'
| | `-ImplicitCastExpr 0x56544b51c950 <line:384:23> 'bool' <LValueToRValue>
| |   `-DeclRefExpr 0x56544b51c910 <col:23> 'bool' lvalue ParmVar 0x56544b51bfb0 'allow_bare_address_' 'bool'
| `-CompoundStmt 0x56544b51c998 <col:44, line:385:5>
|-CXXMethodDecl 0x56544b51c3d8 <line:386:5, line:388:46> line:386:10 used parse 'bool (const String &, IPAddress &, IPAddress &, const ArgContext &) const'
| |-ParmVarDecl 0x56544b51c148 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x56544b51c1c0 <line:387:9, col:20> col:20 result_addr 'IPAddress &'
| |-ParmVarDecl 0x56544b51c238 <col:33, col:44> col:44 result_mask 'IPAddress &'
| `-ParmVarDecl 0x56544b51c2b0 <line:388:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x56544b51c8d0 <col:34> 'const ArgContext' lvalue Var 0x56544b508d20 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x56544b51c788 <line:389:5, line:394:5> line:389:10 parse 'bool (const String &, struct in_addr &, struct in_addr &, const ArgContext &) const'
| |-ParmVarDecl 0x56544b51c4a8 <col:16, col:30> col:30 used str 'const String &'
| |-ParmVarDecl 0x56544b51c538 <line:390:9, col:25> col:25 used result_addr 'struct in_addr &'
| |-ParmVarDecl 0x56544b51c5c8 <col:38, col:54> col:54 used result_mask 'struct in_addr &'
| |-ParmVarDecl 0x56544b51c640 <line:391:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x56544b51c8f0 <col:34> 'const ArgContext' lvalue Var 0x56544b508d20 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x56544b51cba8 <col:52, line:394:5>
|   `-ReturnStmt 0x56544b51cb98 <line:392:2, line:393:56>
|     `-CXXMemberCallExpr 0x56544b51cb58 <line:392:9, line:393:56> 'bool'
|       |-MemberExpr 0x56544b51cb28 <line:392:9> '<bound member function type>' ->parse 0x56544b51c3d8
|       | `-CXXThisExpr 0x56544b51cb18 <col:9> 'const IPPrefixArg *' implicit this
|       |-DeclRefExpr 0x56544b51ca18 <col:15> 'const String' lvalue ParmVar 0x56544b51c4a8 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x56544b51ca68 <col:20, col:61> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x56544b51ca38 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x56544b51c538 'result_addr' 'struct in_addr &'
|       |-CXXReinterpretCastExpr 0x56544b51cac8 <line:393:8, col:49> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x56544b51ca98 <col:38> 'struct in_addr':'in_addr' lvalue ParmVar 0x56544b51c5c8 'result_mask' 'struct in_addr &'
|       `-DeclRefExpr 0x56544b51caf8 <col:52> 'const ArgContext' lvalue ParmVar 0x56544b51c640 'args' 'const ArgContext &'
|-FieldDecl 0x56544b51c858 <line:395:5, col:10> col:10 referenced allow_bare_address 'bool'
|-CXXConstructorDecl 0x56544b8056e8 <line:382:7> col:7 implicit constexpr IPPrefixArg 'void (const IPPrefixArg &)' inline default trivial noexcept-unevaluated 0x56544b8056e8
| `-ParmVarDecl 0x56544b8057f8 <col:7> col:7 'const IPPrefixArg &'
|-CXXConstructorDecl 0x56544b805898 <col:7> col:7 implicit used constexpr IPPrefixArg 'void (IPPrefixArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56544b8059a8 <col:7> col:7 used 'IPPrefixArg &&'
| |-CXXCtorInitializer Field 0x56544b51c858 'allow_bare_address' 'bool'
| | `-ImplicitCastExpr 0x56544b806330 <col:7> 'bool' <LValueToRValue>
| |   `-MemberExpr 0x56544b806300 <col:7> 'bool' xvalue .allow_bare_address 0x56544b51c858
| |     `-CXXStaticCastExpr 0x56544b8062d0 <col:7> 'IPPrefixArg' xvalue static_cast<class IPPrefixArg &&> <NoOp>
| |       `-DeclRefExpr 0x56544b8062a0 <col:7> 'IPPrefixArg' lvalue ParmVar 0x56544b8059a8 '' 'IPPrefixArg &&'
| `-CompoundStmt 0x56544b806378 <col:7>
`-CXXDestructorDecl 0x56544b805a48 <col:7> col:7 implicit referenced ~IPPrefixArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPPrefixArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPPrefixArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b6e1698 prev 0x56544b6d68a0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56544b6e1790 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x56544b6e1880 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x56544b6e19a8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x56544b6e1b28 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x56544b6e1ca8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x56544b6e1e28 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x56544b6f2c58 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56544b6f34c8 <col:11>
|-CXXDestructorDecl 0x56544b6f2d30 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56544b6f2e68 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x56544b6f2e68
| `-ParmVarDecl 0x56544b6f2f78 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x56544b6f3018 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56544b6f3018
| `-ParmVarDecl 0x56544b6f3128 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x56544b6f5ee8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x56544b6f5ff8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x56544b6f6278 <col:11>
|   `-ReturnStmt 0x56544b6f6268 <col:11>
|     `-UnaryOperator 0x56544b6f6250 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56544b6f6240 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x56544b6f6068 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56544b6f6068
  `-ParmVarDecl 0x56544b6f6178 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b6e1e90 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56544b6e1fa8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x56544b6e2048 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x56544b6e20b0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x56544b6e2118 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x56544b6e2180 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x56544b6e21e0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x56544b6e22a0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x56544b6e2300 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x56544b6e2360 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x56544b6f2b68 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x56544b6e2048 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x56544b6f34d8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x56544b6f3530 <col:12>
|-CXXConstructorDecl 0x56544b6f3198 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x56544b6f3198
| `-ParmVarDecl 0x56544b6f32a8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x56544b6f3348 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x56544b6f3348
| `-ParmVarDecl 0x56544b6f3458 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x56544b6f55d0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b6cffb0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56544b6d00c8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x56544b6d0158 <col:16, col:22> col:16 public
|-EnumDecl 0x56544b6d0180 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x56544b6d0280 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x56544b6d0360 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b6d0260 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x56544b6d0240 <col:21> 'int' 28
| `-EnumConstantDecl 0x56544b6d0310 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x56544b6d0378 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56544b6d02f0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x56544b6d02d0 <col:22> 'int' 64
|-CXXMethodDecl 0x56544b6d06b8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x56544b6d03a0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56544b6d0420 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x56544b6d0498 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56544b6d0510 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56544b6d0778 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x56544b6d0978 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x56544b6d07f0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x56544b6d0868 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56544b6d0a28 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x56544b6d0b88 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x56544b6d0a98 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56544b6d0c30 <col:72> warn_unused_result ""
|-TypedefDecl 0x56544b6d0f90 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x56544b6d0f20 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x56544b6d0ec0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x56544b6d0e80 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x56544b1a64e0 'void'
|       |-PointerType 0x56544b450350 'unsigned char *'
|       | `-BuiltinType 0x56544b1a65e0 'unsigned char'
|       |-TypedefType 0x56544b24c700 'size_t' sugar
|       | |-Typedef 0x56544b216be0 'size_t'
|       | `-BuiltinType 0x56544b1a6640 'unsigned long'
|       `-PointerType 0x56544b1a6ce0 'void *'
|         `-BuiltinType 0x56544b1a64e0 'void'
|-CXXMethodDecl 0x56544b6d1408 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x56544b6d1000 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x56544b6d1078 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56544b6d1110 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x56544b6d1190 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x56544b6ebb00 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x56544b6ebae8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x56544b6ebab0 <col:58> 'int' 0
| |-ParmVarDecl 0x56544b6d1210 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x56544b6ebb28 <col:76> 'int' 0
| |-ParmVarDecl 0x56544b6d1290 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x56544b6ebb48 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x56544b6d14d8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x56544b6d1558 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x56544b6d1618 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x56544b6d16b8 <col:20>
| `-OptimizeNoneAttr 0x56544b6d1710 <col:30>
|-CXXMethodDecl 0x56544b6d1788 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x56544b6d1828 <col:20>
| `-OptimizeNoneAttr 0x56544b6d1880 <col:30>
|-CXXMethodDecl 0x56544b6d18f8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x56544b6d1998 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x56544b6d1a48 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x56544b6d1ae8 <col:20>
| |-OptimizeNoneAttr 0x56544b6d1b40 <col:30>
| `-WarnUnusedResultAttr 0x56544b6d1b68 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x56544b6d1bc0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x56544b6d1c60 <col:20>
| `-OptimizeNoneAttr 0x56544b6d1cb8 <col:30>
|-CXXMethodDecl 0x56544b6d1d08 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x56544b6d1da8 <col:20>
| `-OptimizeNoneAttr 0x56544b6d1e00 <col:30>
|-CXXMethodDecl 0x56544b6d1e48 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x56544b6d1ee8 <col:20>
| `-OptimizeNoneAttr 0x56544b6d1f40 <col:30>
|-CXXMethodDecl 0x56544b6d1f88 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x56544b6d2048 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x56544b6d2110 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56544b6d21d8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56544b6d2298 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56544b6d23b8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x56544b6ebc10 <col:54, line:99:5>
|   `-ReturnStmt 0x56544b6ebc00 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x56544b6ebbe8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x56544b6ebbb8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56544b6e2698
|         `-CXXThisExpr 0x56544b6ebba8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x56544b6d2558 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x56544b6d2468 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x56544b6ebcc0 <col:67, line:103:5>
|   `-BinaryOperator 0x56544b6ebca0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x56544b6ebc38 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56544b6e2698
|     | `-CXXThisExpr 0x56544b6ebc28 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x56544b6ebc88 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x56544b6ebc68 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x56544b6d2468 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x56544b6d2650 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x56544b6ebd40 <col:33, line:107:5>
|   `-ReturnStmt 0x56544b6ebd30 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x56544b6ebd18 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x56544b6ebce8 <col:16> 'void *' lvalue ->_destructor_argument 0x56544b6e2700
|         `-CXXThisExpr 0x56544b6ebcd8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x56544b6d2710 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x56544b6ec370 <col:25, line:113:5>
|   |-ParenExpr 0x56544b6ec0b8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x56544b6ec088 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x56544b6ebdf8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x56544b6ebdd0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x56544b6ebd98 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x56544b6ebd68 <col:24> '<bound member function type>' ->shared 0x56544b6d1788
|   |   |       `-ImplicitCastExpr 0x56544b6ebdb8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x56544b6ebd58 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x56544b6ebe58 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56544b6ebe38 <col:42> 'int' 0
|   |   `-CallExpr 0x56544b6ebfe8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x56544b6ebfd0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56544b6ebfb0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56544b243460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56544b6ec028 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6ebec8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x56544b6ec040 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6ebef0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56544b6ec058 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56544b6ebf28 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x56544b6ec070 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56544b6ebf98 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56544b6ebf80 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56544b6ebf48 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x56544b6ec2b8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x56544b6ec0e8 <col:2> 'unsigned char *' lvalue ->_head 0x56544b6e24a0
|   | | `-CXXThisExpr 0x56544b6ec0d8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x56544b6ec2a0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x56544b6ec280 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x56544b6ec128 <col:10> 'unsigned char *' lvalue ->_data 0x56544b6e2508
|   |     | `-CXXThisExpr 0x56544b6ec118 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x56544b6ec268 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x56544b6ec248 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x56544b6ec168 <col:18> 'unsigned char *' lvalue ->_tail 0x56544b6e2570
|   |         | `-CXXThisExpr 0x56544b6ec158 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x56544b6ec230 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x56544b6ec210 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x56544b6ec1a8 <col:26> 'unsigned char *' lvalue ->_end 0x56544b6e25d8
|   |             | `-CXXThisExpr 0x56544b6ec198 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x56544b6ec1f8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x56544b6ec1d8 <col:33> 'int' 0
|   `-BinaryOperator 0x56544b6ec350 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x56544b6ec2e8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56544b6e2698
|     | `-CXXThisExpr 0x56544b6ec2d8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x56544b6ec338 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x56544b6ec318 <col:16> 'int' 0
|-CXXMethodDecl 0x56544b6d2850 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56544b6d27c0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56544b6d28f8 <col:20>
| |-OptimizeNoneAttr 0x56544b6d2950 <col:30>
| `-WarnUnusedResultAttr 0x56544b6d2978 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x56544b6d2a48 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56544b6d29b8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56544b6d2af0 <col:20>
| |-OptimizeNoneAttr 0x56544b6d2b48 <col:30>
| `-WarnUnusedResultAttr 0x56544b6d2b70 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x56544b6d2ca8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x56544b6d2bb0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56544b6d2d50 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x56544b6d2e50 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x56544b6d2dc0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56544b6d2ef8 <col:20>
| `-OptimizeNoneAttr 0x56544b6d2f50 <col:30>
|-CXXMethodDecl 0x56544b6d3018 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56544b6d2f88 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56544b6d30c0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x56544b6d31c0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x56544b6d3130 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56544b6d3268 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x56544b6d3368 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x56544b6d32d8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56544b6d3410 <col:20>
| `-OptimizeNoneAttr 0x56544b6d3468 <col:30>
|-CXXMethodDecl 0x56544b6d35f8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x56544b6d34a8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x56544b6d3520 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x56544b6ebb68 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x56544b6d36a8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x56544b6d38a8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56544b6d3720 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x56544b6d3798 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b6d3ab8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56544b6d3968 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56544b6d39e0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b6d3cc8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x56544b6d3b78 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x56544b6d3bf8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x56544b6ebb78 <col:39> 'int' 0
|-CXXMethodDecl 0x56544b6d3d98 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x56544b6d3e60 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56544b6d3f28 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x56544b6d3fe8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56544b6d40b0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x56544b6d41f8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x56544b6d4168 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x56544b6d43c8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56544b6d42b8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x56544b6d4330 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b6d4498 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x56544b6d4558 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x56544b6d45f8 <col:20>
| `-OptimizeNoneAttr 0x56544b6d4650 <col:30>
|-CXXMethodDecl 0x56544b6d46a0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x56544b6d4740 <col:20>
| `-OptimizeNoneAttr 0x56544b6d4798 <col:30>
|-CXXMethodDecl 0x56544b6d47e8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x56544b6d48a8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56544b6d4970 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x56544b6d4a10 <col:20>
| `-OptimizeNoneAttr 0x56544b6d4a68 <col:30>
|-CXXMethodDecl 0x56544b6d4bb8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56544b6d4aa8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x56544b6d4b20 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b6d4d08 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x56544b6d4c78 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b6d4de0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x56544b6d4ea0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x56544b6d4f40 <col:20>
| `-OptimizeNoneAttr 0x56544b6d4f98 <col:30>
|-CXXMethodDecl 0x56544b6d4fe8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x56544b6d5088 <col:20>
| `-OptimizeNoneAttr 0x56544b6d50e0 <col:30>
|-CXXMethodDecl 0x56544b6d5130 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x56544b6d51f8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x56544b6d5298 <col:20>
| `-OptimizeNoneAttr 0x56544b6d52f0 <col:30>
|-CXXMethodDecl 0x56544b6d5338 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x56544b6d5458 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x56544b6d55c8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x56544b6d5508 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x56544b6d56b8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x56544b6d5758 <col:20>
| `-OptimizeNoneAttr 0x56544b6d57b0 <col:30>
|-CXXMethodDecl 0x56544b6d5800 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x56544b6d58c0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56544b6d5af8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x56544b6d5970 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x56544b6d59e8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56544b6d5ba8 <col:20>
| `-OptimizeNoneAttr 0x56544b6d5c00 <col:30>
|-CXXMethodDecl 0x56544b6d5ca8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x56544b6d5d48 <col:20>
| `-OptimizeNoneAttr 0x56544b6d5da0 <col:30>
|-CXXMethodDecl 0x56544b6d5df0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x56544b6d5e90 <col:20>
| `-OptimizeNoneAttr 0x56544b6d5ee8 <col:30>
|-CXXMethodDecl 0x56544b6d5f30 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x56544b6d5fd0 <col:20>
| `-OptimizeNoneAttr 0x56544b6d6028 <col:30>
|-CXXMethodDecl 0x56544b6d6128 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x56544b6d6060 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x56544b6d61d0 <col:20>
| `-OptimizeNoneAttr 0x56544b6d6228 <col:30>
|-CXXMethodDecl 0x56544b6d63e8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x56544b6d6260 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x56544b6d62d8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56544b6d6498 <col:20>
| `-OptimizeNoneAttr 0x56544b6d64f0 <col:30>
|-CXXMethodDecl 0x56544b6d6598 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x56544b6d66b8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x56544b6d67d8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x56544b6d6878 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x56544b6d68a0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x56544b6d69c8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x56544b6d6a68 <col:20>
| `-OptimizeNoneAttr 0x56544b6d6ac0 <col:30>
|-CXXMethodDecl 0x56544b6d6b68 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x56544b6d6c08 <col:20>
| `-OptimizeNoneAttr 0x56544b6d6c60 <col:30>
|-AccessSpecDecl 0x56544b6d6c88 <line:344:3, col:9> col:3 public
|-EnumDecl 0x56544b6d6cb0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x56544b6d6db0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x56544b6d6e00 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56544b6d6d90 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x56544b6d6d70 <col:14> 'int' 48
|-CXXMethodDecl 0x56544b6d6e68 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x56544b6d6f08 <col:20>
| `-OptimizeNoneAttr 0x56544b6d6f60 <col:30>
|-CXXMethodDecl 0x56544b6d6fd8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x56544b6d7078 <col:20>
| `-OptimizeNoneAttr 0x56544b6d70d0 <col:30>
|-CXXMethodDecl 0x56544b6d7198 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x56544b6d7108 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x56544b6d7338 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x56544b6d74d8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x56544b6d73e8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x56544b6d7580 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x56544b6d7680 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56544b6d7a30 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b6d7660 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x56544b6d7640 <col:9> 'int' 0
| |-EnumConstantDecl 0x56544b6d7710 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56544b6d7a48 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b6d76f0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x56544b6d76d0 <col:14> 'int' 1
| |-EnumConstantDecl 0x56544b6d77a0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56544b6d7a60 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b6d7780 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x56544b6d7760 <col:14> 'int' 2
| |-EnumConstantDecl 0x56544b6d7830 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56544b6d7a78 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b6d7810 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x56544b6d77f0 <col:14> 'int' 3
| |-EnumConstantDecl 0x56544b6d78c0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56544b6d7a90 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b6d78a0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x56544b6d7880 <col:13> 'int' 4
| |-EnumConstantDecl 0x56544b6d7950 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56544b6d7aa8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b6d7930 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x56544b6d7910 <col:13> 'int' 5
| `-EnumConstantDecl 0x56544b6d79e0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x56544b6d7ac0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56544b6d79c0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x56544b6d79a0 <col:14> 'int' 6
|-CXXMethodDecl 0x56544b6d7b28 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x56544b6d7bc8 <col:20>
| `-OptimizeNoneAttr 0x56544b6d7c20 <col:30>
|-CXXMethodDecl 0x56544b6d7d18 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x56544b6d7c58 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x56544b6d7dc0 <col:20>
| `-OptimizeNoneAttr 0x56544b6d7e18 <col:30>
|-CXXMethodDecl 0x56544b6d7e88 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x56544b6d7fb0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x56544b6d8128 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x56544b6d8060 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x56544b6d81f0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x56544b6d82b8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x56544b6d83f8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x56544b6d8368 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x56544b6d84a0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x56544b6d85a0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56544b6d87a0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b6d8580 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x56544b6d8560 <col:23> 'int' 0
| |-EnumConstantDecl 0x56544b6d8630 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56544b6d87b8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b6d8610 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x56544b6d85f0 <col:45> 'int' 4
| |-EnumConstantDecl 0x56544b6d86c0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56544b6d87d0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b6d86a0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x56544b6d8680 <col:24> 'int' 0
| `-EnumConstantDecl 0x56544b6d8750 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x56544b6d87e8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56544b6d8730 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x56544b6d8710 <col:47> 'int' 16
|-CXXMethodDecl 0x56544b6d8848 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x56544b6d89b8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x56544b6d88f8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x56544b6d8a60 <col:20>
| `-OptimizeNoneAttr 0x56544b6d8ab8 <col:30>
|-CXXMethodDecl 0x56544b6d8b08 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x56544b6ec490 <col:18, col:36>
|   `-ReturnStmt 0x56544b6ec480 <col:20, col:33>
|     `-ImplicitCastExpr 0x56544b6ec468 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x56544b6ec448 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x56544b6ec418 <col:27> '<bound member function type>' ->xanno 0x56544b6d6b68
|           `-CXXThisExpr 0x56544b6ec408 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x56544b6d8c00 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x56544b6ec5a0 <col:30, col:48>
|   `-ReturnStmt 0x56544b6ec590 <col:32, col:45>
|     `-ImplicitCastExpr 0x56544b6ec578 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x56544b6ec558 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x56544b6ec528 <col:39> '<bound member function type>' ->xanno 0x56544b6d69c8
|           `-CXXThisExpr 0x56544b6ec518 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x56544b6d8ce8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x56544b6ec738 <col:24, col:50>
|   `-ReturnStmt 0x56544b6ec728 <col:26, col:47>
|     `-UnaryOperator 0x56544b6ec710 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56544b6ec6f0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x56544b6ec6d8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56544b6ec688 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x56544b6e19a8
|         |   `-CXXMemberCallExpr 0x56544b6ec668 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x56544b6ec638 <col:34> '<bound member function type>' ->xanno 0x56544b6d6b68
|         |       `-CXXThisExpr 0x56544b6ec628 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x56544b6ec6b8 <col:46> 'int' 0
|-CXXMethodDecl 0x56544b6d8df0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x56544b6ec908 <col:36, col:62>
|   `-ReturnStmt 0x56544b6ec8f8 <col:38, col:59>
|     `-UnaryOperator 0x56544b6ec8e0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56544b6ec8c0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x56544b6ec8a8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56544b6ec820 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x56544b6e19a8
|         |   `-CXXMemberCallExpr 0x56544b6ec800 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56544b6ec7d0 <col:46> '<bound member function type>' ->xanno 0x56544b6d69c8
|         |       `-CXXThisExpr 0x56544b6ec7c0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x56544b6ec850 <col:58> 'int' 0
|-CXXMethodDecl 0x56544b6d8f08 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x56544b6ecaa0 <col:26, col:53>
|   `-ReturnStmt 0x56544b6eca90 <col:28, col:50>
|     `-UnaryOperator 0x56544b6eca78 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56544b6eca58 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x56544b6eca40 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56544b6ec9f0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x56544b6e1ca8
|         |   `-CXXMemberCallExpr 0x56544b6ec9d0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x56544b6ec9a0 <col:36> '<bound member function type>' ->xanno 0x56544b6d6b68
|         |       `-CXXThisExpr 0x56544b6ec990 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x56544b6eca20 <col:49> 'int' 0
|-CXXMethodDecl 0x56544b6d9028 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x56544b6ecc78 <col:38, col:65>
|   `-ReturnStmt 0x56544b6ecc68 <col:40, col:62>
|     `-UnaryOperator 0x56544b6ecc50 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56544b6ecc30 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x56544b6ecc18 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56544b6ecb88 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x56544b6e1ca8
|         |   `-CXXMemberCallExpr 0x56544b6ecb68 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56544b6ecb38 <col:48> '<bound member function type>' ->xanno 0x56544b6d69c8
|         |       `-CXXThisExpr 0x56544b6ecb28 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x56544b6ecbb8 <col:61> 'int' 0
|-CXXMethodDecl 0x56544b6d91d8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x56544b6d90e0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x56544b6ed348 <col:34, line:463:5>
|   |-ParenExpr 0x56544b6ed190 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x56544b6ed160 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x56544b6ecdc8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56544b6ecd98 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56544b6ecce8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56544b6eccd0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56544b6ecc90 <col:23> 'int' lvalue ParmVar 0x56544b6d90e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56544b6eccb0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56544b6ecd78 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56544b6ecd48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56544b6ecd08 <col:33> 'int' lvalue ParmVar 0x56544b6d90e0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x56544b6ecd60 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x56544b6ecd28 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56544b6d6db0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x56544b6ece28 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56544b6ece08 <col:56> 'int' 0
|   |   `-CallExpr 0x56544b6ed0c0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x56544b6ed0a8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56544b6ed088 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56544b243460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56544b6ed100 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6ecf18 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x56544b6ed118 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6ecf48 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56544b6ed130 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56544b6ecf80 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x56544b6ed148 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56544b6ed070 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56544b6ed058 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56544b6ed018 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x56544b6ed338 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x56544b6ed320 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x56544b6ed300 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x56544b6ed2d0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56544b6ed280 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x56544b6e19a8
|         |   `-CXXMemberCallExpr 0x56544b6ed260 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56544b6ed230 <col:9> '<bound member function type>' ->xanno 0x56544b6d69c8
|         |       `-CXXThisExpr 0x56544b6ed220 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x56544b6ed2e8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x56544b6ed2b0 <col:21> 'int' lvalue ParmVar 0x56544b6d90e0 'i' 'int'
|-CXXMethodDecl 0x56544b6d9428 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x56544b6d9298 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x56544b6d9310 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x56544b6ed9d8 <col:40, line:472:5>
|   |-ParenExpr 0x56544b6ed7f0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x56544b6ed7c0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x56544b6ed4a0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56544b6ed470 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56544b6ed3c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56544b6ed3a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56544b6ed368 <col:23> 'int' lvalue ParmVar 0x56544b6d9298 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56544b6ed388 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56544b6ed450 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56544b6ed420 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56544b6ed3e0 <col:33> 'int' lvalue ParmVar 0x56544b6d9298 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x56544b6ed438 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x56544b6ed400 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56544b6d6db0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x56544b6ed500 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56544b6ed4e0 <col:56> 'int' 0
|   |   `-CallExpr 0x56544b6ed720 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x56544b6ed708 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56544b6ed6e8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56544b243460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56544b6ed760 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6ed570 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x56544b6ed778 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6ed5a0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56544b6ed790 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56544b6ed5d8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x56544b6ed7a8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56544b6ed6d0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56544b6ed6b8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56544b6ed678 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x56544b6ed9b8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x56544b6ed960 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x56544b6ed930 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x56544b6ed8e0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x56544b6e19a8
|     | |   `-CXXMemberCallExpr 0x56544b6ed8c0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x56544b6ed890 <col:2> '<bound member function type>' ->xanno 0x56544b6d6b68
|     | |       `-CXXThisExpr 0x56544b6ed880 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x56544b6ed948 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x56544b6ed910 <col:14> 'int' lvalue ParmVar 0x56544b6d9298 'i' 'int'
|     `-ImplicitCastExpr 0x56544b6ed9a0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x56544b6ed980 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x56544b6d9310 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x56544b6d95e8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x56544b6d94f0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56544b6ee158 <col:36, line:485:5>
|   |-ParenExpr 0x56544b6edec0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x56544b6ede90 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56544b6edb70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56544b6edb40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56544b6eda50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56544b6eda38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56544b6ed9f8 <col:23> 'int' lvalue ParmVar 0x56544b6d94f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56544b6eda18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56544b6edb20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56544b6edb08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56544b6eda70 <col:33> 'int' lvalue ParmVar 0x56544b6d94f0 'i' 'int'
|   |   |     `-BinaryOperator 0x56544b6edae8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56544b6edad0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56544b6eda90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56544b6d6db0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56544b6edab0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56544b6edbd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56544b6edbb0 <col:60> 'int' 0
|   |   `-CallExpr 0x56544b6eddf0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56544b6eddd8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56544b6eddb8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56544b243460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56544b6ede30 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6edc40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56544b6ede48 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6edc78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56544b6ede60 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56544b6edcb0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x56544b6ede78 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56544b6edda0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56544b6edd88 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56544b6edd48 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x56544b6ee148 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x56544b6ee130 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x56544b6ee118 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56544b6ee0e8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x56544b6ee088 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56544b6ee058 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56544b6edfd0 <col:61, col:70> 'char const[48]' lvalue ->c 0x56544b6e1880
|             |   `-CXXMemberCallExpr 0x56544b6edfb0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56544b6edf80 <col:61> '<bound member function type>' ->xanno 0x56544b6d69c8
|             |       `-CXXThisExpr 0x56544b6edf70 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56544b6ee070 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56544b6ee000 <col:74> 'int' lvalue ParmVar 0x56544b6d94f0 'i' 'int'
|-CXXMethodDecl 0x56544b6d9838 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x56544b6d96a8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56544b6d9720 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x56544b6ee8a8 <col:42, line:500:5>
|   |-ParenExpr 0x56544b6ee640 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x56544b6ee610 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56544b6ee2f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56544b6ee2c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56544b6ee1d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56544b6ee1b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56544b6ee178 <col:23> 'int' lvalue ParmVar 0x56544b6d96a8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56544b6ee198 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56544b6ee2a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56544b6ee288 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56544b6ee1f0 <col:33> 'int' lvalue ParmVar 0x56544b6d96a8 'i' 'int'
|   |   |     `-BinaryOperator 0x56544b6ee268 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56544b6ee250 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56544b6ee210 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56544b6d6db0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56544b6ee230 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56544b6ee350 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56544b6ee330 <col:60> 'int' 0
|   |   `-CallExpr 0x56544b6ee570 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56544b6ee558 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56544b6ee538 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56544b243460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56544b6ee5b0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6ee3c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56544b6ee5c8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6ee3f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56544b6ee5e0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56544b6ee430 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x56544b6ee5f8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56544b6ee520 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56544b6ee508 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56544b6ee4c8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x56544b6ee888 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x56544b6ee838 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56544b6ee808 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x56544b6ee7b0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56544b6ee780 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56544b6ee730 <col:48, col:57> 'char [48]' lvalue ->c 0x56544b6e1880
|     |     |   `-CXXMemberCallExpr 0x56544b6ee710 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56544b6ee6e0 <col:48> '<bound member function type>' ->xanno 0x56544b6d6b68
|     |     |       `-CXXThisExpr 0x56544b6ee6d0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56544b6ee798 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56544b6ee760 <col:61> 'int' lvalue ParmVar 0x56544b6d96a8 'i' 'int'
|     `-ImplicitCastExpr 0x56544b6ee870 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x56544b6ee850 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x56544b6d9720 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x56544b6d99f8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x56544b6d9900 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x56544b6ef008 <col:35, line:513:5>
|   |-ParenExpr 0x56544b6eed18 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x56544b6eece8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56544b6eea40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56544b6eea10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56544b6ee920 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56544b6ee908 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56544b6ee8c8 <col:23> 'int' lvalue ParmVar 0x56544b6d9900 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56544b6ee8e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56544b6ee9f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56544b6ee9d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56544b6ee940 <col:33> 'int' lvalue ParmVar 0x56544b6d9900 'i' 'int'
|   |   |     `-BinaryOperator 0x56544b6ee9b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56544b6ee9a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56544b6ee960 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56544b6d6db0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56544b6ee980 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56544b6eeaa0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56544b6eea80 <col:60> 'int' 0
|   |   `-CallExpr 0x56544b6eec48 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56544b6eec30 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56544b6eec10 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56544b243460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56544b6eec88 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6eeb10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56544b6eeca0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6eeb48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56544b6eecb8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56544b6eeb80 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x56544b6eecd0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56544b6eebf8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56544b6eebe0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56544b6eeba0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x56544b6eeff8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x56544b6eefe0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x56544b6eefc8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56544b6eef98 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x56544b6eef10 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x56544b6eeee0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56544b6eee90 <col:60, col:69> 'char const[48]' lvalue ->c 0x56544b6e1880
|             |   `-CXXMemberCallExpr 0x56544b6eee70 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56544b6eee40 <col:60> '<bound member function type>' ->xanno 0x56544b6d69c8
|             |       `-CXXThisExpr 0x56544b6eee30 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56544b6eeef8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56544b6eeec0 <col:73> 'int' lvalue ParmVar 0x56544b6d9900 'i' 'int'
|-CXXMethodDecl 0x56544b6d9c48 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x56544b6d9ab8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56544b6d9b30 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x56544b6ef728 <col:41, line:528:5>
|   |-ParenExpr 0x56544b6ef4b0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x56544b6ef480 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56544b6ef1a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56544b6ef170 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56544b6ef080 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56544b6ef068 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56544b6ef028 <col:23> 'int' lvalue ParmVar 0x56544b6d9ab8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56544b6ef048 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56544b6ef150 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56544b6ef138 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56544b6ef0a0 <col:33> 'int' lvalue ParmVar 0x56544b6d9ab8 'i' 'int'
|   |   |     `-BinaryOperator 0x56544b6ef118 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56544b6ef100 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56544b6ef0c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56544b6d6db0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56544b6ef0e0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56544b6ef200 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56544b6ef1e0 <col:60> 'int' 0
|   |   `-CallExpr 0x56544b6ef3e0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56544b6ef3c8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56544b6ef3a8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56544b243460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56544b6ef420 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6ef270 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56544b6ef438 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6ef2a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56544b6ef450 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56544b6ef2e0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x56544b6ef468 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56544b6ef390 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56544b6ef378 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56544b6ef338 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x56544b6ef708 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x56544b6ef6b8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56544b6ef688 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x56544b6ef630 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56544b6ef5f0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56544b6ef5a0 <col:47, col:56> 'char [48]' lvalue ->c 0x56544b6e1880
|     |     |   `-CXXMemberCallExpr 0x56544b6ef580 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56544b6ef550 <col:47> '<bound member function type>' ->xanno 0x56544b6d6b68
|     |     |       `-CXXThisExpr 0x56544b6ef540 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56544b6ef608 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56544b6ef5d0 <col:60> 'int' lvalue ParmVar 0x56544b6d9ab8 'i' 'int'
|     `-ImplicitCastExpr 0x56544b6ef6f0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x56544b6ef6d0 <col:65> 'int16_t':'short' lvalue ParmVar 0x56544b6d9b30 'x' 'int16_t':'short'
|-CXXMethodDecl 0x56544b6d9e08 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x56544b6d9d10 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56544b6efdf8 <col:36, line:541:5>
|   |-ParenExpr 0x56544b6efb98 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x56544b6efb68 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56544b6ef8c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56544b6ef890 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56544b6ef7a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56544b6ef788 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56544b6ef748 <col:23> 'int' lvalue ParmVar 0x56544b6d9d10 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56544b6ef768 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56544b6ef870 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56544b6ef858 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56544b6ef7c0 <col:33> 'int' lvalue ParmVar 0x56544b6d9d10 'i' 'int'
|   |   |     `-BinaryOperator 0x56544b6ef838 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56544b6ef820 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56544b6ef7e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56544b6d6db0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56544b6ef800 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56544b6ef920 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56544b6ef900 <col:60> 'int' 0
|   |   `-CallExpr 0x56544b6efac8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56544b6efab0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56544b6efa90 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56544b243460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56544b6efb08 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6ef990 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56544b6efb20 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6ef9c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56544b6efb38 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56544b6efa00 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x56544b6efb50 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56544b6efa78 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56544b6efa60 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56544b6efa20 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x56544b6efde8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x56544b6efdd0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x56544b6efdb8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56544b6efd88 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x56544b6efd30 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56544b6efd00 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56544b6efcb0 <col:61, col:70> 'char const[48]' lvalue ->c 0x56544b6e1880
|             |   `-CXXMemberCallExpr 0x56544b6efc90 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56544b6efc60 <col:61> '<bound member function type>' ->xanno 0x56544b6d69c8
|             |       `-CXXThisExpr 0x56544b6efc50 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56544b6efd18 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56544b6efce0 <col:74> 'int' lvalue ParmVar 0x56544b6d9d10 'i' 'int'
|-CXXMethodDecl 0x56544b6d9fd8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x56544b6d9ec8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x56544b6d9f40 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56544b6da088 <col:20>
| `-OptimizeNoneAttr 0x56544b6da0e0 <col:30>
|-CXXMethodDecl 0x56544b6da218 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x56544b6da120 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x56544b6f04c8 <col:35, line:562:5>
|   |-ParenExpr 0x56544b6f0268 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x56544b6f0238 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56544b6eff90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56544b6eff60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56544b6efe70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56544b6efe58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56544b6efe18 <col:23> 'int' lvalue ParmVar 0x56544b6da120 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56544b6efe38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56544b6eff40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56544b6eff28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56544b6efe90 <col:33> 'int' lvalue ParmVar 0x56544b6da120 'i' 'int'
|   |   |     `-BinaryOperator 0x56544b6eff08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56544b6efef0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56544b6efeb0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56544b6d6db0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56544b6efed0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56544b6efff0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56544b6effd0 <col:60> 'int' 0
|   |   `-CallExpr 0x56544b6f0198 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56544b6f0180 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56544b6f0160 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56544b243460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56544b6f01d8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6f0060 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56544b6f01f0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6f0098 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56544b6f0208 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56544b6f00d0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x56544b6f0220 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56544b6f0148 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56544b6f0130 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56544b6f00f0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x56544b6f04b8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x56544b6f04a0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x56544b6f0488 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56544b6f0458 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x56544b6f0400 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x56544b6f03d0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56544b6f0380 <col:60, col:69> 'char const[48]' lvalue ->c 0x56544b6e1880
|             |   `-CXXMemberCallExpr 0x56544b6f0360 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56544b6f0330 <col:60> '<bound member function type>' ->xanno 0x56544b6d69c8
|             |       `-CXXThisExpr 0x56544b6f0320 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56544b6f03e8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56544b6f03b0 <col:73> 'int' lvalue ParmVar 0x56544b6da120 'i' 'int'
|-CXXMethodDecl 0x56544b6da428 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x56544b6da2d8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56544b6da350 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x56544b6f0ba8 <col:41, line:577:5>
|   |-ParenExpr 0x56544b6f0938 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x56544b6f0908 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56544b6f0660 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56544b6f0630 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56544b6f0540 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56544b6f0528 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56544b6f04e8 <col:23> 'int' lvalue ParmVar 0x56544b6da2d8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56544b6f0508 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56544b6f0610 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56544b6f05f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56544b6f0560 <col:33> 'int' lvalue ParmVar 0x56544b6da2d8 'i' 'int'
|   |   |     `-BinaryOperator 0x56544b6f05d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56544b6f05c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56544b6f0580 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56544b6d6db0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56544b6f05a0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56544b6f06c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56544b6f06a0 <col:60> 'int' 0
|   |   `-CallExpr 0x56544b6f0868 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56544b6f0850 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56544b6f0830 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56544b243460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56544b6f08a8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6f0730 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56544b6f08c0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6f0768 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56544b6f08d8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56544b6f07a0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x56544b6f08f0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56544b6f0818 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56544b6f0800 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56544b6f07c0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x56544b6f0b88 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x56544b6f0b38 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56544b6f0b08 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x56544b6f0aa8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56544b6f0a78 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56544b6f0a28 <col:47, col:56> 'char [48]' lvalue ->c 0x56544b6e1880
|     |     |   `-CXXMemberCallExpr 0x56544b6f0a08 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56544b6f09d8 <col:47> '<bound member function type>' ->xanno 0x56544b6d6b68
|     |     |       `-CXXThisExpr 0x56544b6f09c8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56544b6f0a90 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56544b6f0a58 <col:60> 'int' lvalue ParmVar 0x56544b6da2d8 'i' 'int'
|     `-ImplicitCastExpr 0x56544b6f0b70 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x56544b6f0b50 <col:65> 'int32_t':'int' lvalue ParmVar 0x56544b6da350 'x' 'int32_t':'int'
|-CXXMethodDecl 0x56544b6da5e8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x56544b6da4f0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56544b6f12d8 <col:36, line:591:5>
|   |-ParenExpr 0x56544b6f1018 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x56544b6f0fe8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56544b6f0d40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56544b6f0d10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56544b6f0c20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56544b6f0c08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56544b6f0bc8 <col:23> 'int' lvalue ParmVar 0x56544b6da4f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56544b6f0be8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56544b6f0cf0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56544b6f0cd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56544b6f0c40 <col:33> 'int' lvalue ParmVar 0x56544b6da4f0 'i' 'int'
|   |   |     `-BinaryOperator 0x56544b6f0cb8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56544b6f0ca0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56544b6f0c60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56544b6d6db0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56544b6f0c80 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x56544b6f0da0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56544b6f0d80 <col:60> 'int' 0
|   |   `-CallExpr 0x56544b6f0f48 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56544b6f0f30 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56544b6f0f10 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56544b243460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56544b6f0f88 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6f0e10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x56544b6f0fa0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6f0e48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56544b6f0fb8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56544b6f0e80 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x56544b6f0fd0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56544b6f0ef8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56544b6f0ee0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56544b6f0ea0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x56544b6f12c8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x56544b6f12b0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x56544b6f1298 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56544b6f1268 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x56544b6f11e0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56544b6f11b0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56544b6f1160 <col:61, col:70> 'char const[48]' lvalue ->c 0x56544b6e1880
|             |   `-CXXMemberCallExpr 0x56544b6f1140 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56544b6f1110 <col:61> '<bound member function type>' ->xanno 0x56544b6d69c8
|             |       `-CXXThisExpr 0x56544b6f1100 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56544b6f11c8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56544b6f1190 <col:74> 'int' lvalue ParmVar 0x56544b6da4f0 'i' 'int'
|-CXXMethodDecl 0x56544b6da838 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x56544b6da6a8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56544b6da720 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x56544b6f19b8 <col:42, line:606:5>
|   |-ParenExpr 0x56544b6f1748 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x56544b6f1718 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56544b6f1470 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56544b6f1440 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56544b6f1350 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56544b6f1338 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56544b6f12f8 <col:23> 'int' lvalue ParmVar 0x56544b6da6a8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56544b6f1318 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56544b6f1420 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56544b6f1408 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56544b6f1370 <col:33> 'int' lvalue ParmVar 0x56544b6da6a8 'i' 'int'
|   |   |     `-BinaryOperator 0x56544b6f13e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56544b6f13d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56544b6f1390 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56544b6d6db0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56544b6f13b0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x56544b6f14d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56544b6f14b0 <col:60> 'int' 0
|   |   `-CallExpr 0x56544b6f1678 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56544b6f1660 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56544b6f1640 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56544b243460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56544b6f16b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6f1540 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x56544b6f16d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6f1578 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56544b6f16e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56544b6f15b0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x56544b6f1700 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56544b6f1628 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56544b6f1610 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56544b6f15d0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x56544b6f1998 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x56544b6f1948 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56544b6f1918 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x56544b6f18b8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56544b6f1888 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56544b6f1838 <col:48, col:57> 'char [48]' lvalue ->c 0x56544b6e1880
|     |     |   `-CXXMemberCallExpr 0x56544b6f1818 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56544b6f17e8 <col:48> '<bound member function type>' ->xanno 0x56544b6d6b68
|     |     |       `-CXXThisExpr 0x56544b6f17d8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56544b6f18a0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56544b6f1868 <col:61> 'int' lvalue ParmVar 0x56544b6da6a8 'i' 'int'
|     `-ImplicitCastExpr 0x56544b6f1980 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x56544b6f1960 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x56544b6da720 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x56544b6da9d0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x56544b6da900 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x56544b6f2228 <col:33, line:620:5>
|   |-ParenExpr 0x56544b6f1fa0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x56544b6f1f70 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x56544b6f1bc0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56544b6f1b90 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56544b6f1a30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56544b6f1a18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56544b6f19d8 <col:23> 'int' lvalue ParmVar 0x56544b6da900 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56544b6f19f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56544b6f1b70 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x56544b6f1b58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56544b6f1a50 <col:33> 'int' lvalue ParmVar 0x56544b6da900 'i' 'int'
|   |   |     `-BinaryOperator 0x56544b6f1b38 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56544b6f1b20 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56544b6f1a70 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56544b6d6db0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x56544b6f1af8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x56544b6f1ae0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x56544b6f1aa8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x56544b6f1c20 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56544b6f1c00 <col:79> 'int' 0
|   |   `-CallExpr 0x56544b6f1ed0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x56544b6f1eb8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56544b6f1e98 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56544b243460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56544b6f1f10 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6f1d08 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x56544b6f1f28 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6f1d50 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56544b6f1f40 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56544b6f1d88 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x56544b6f1f58 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56544b6f1e80 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56544b6f1e68 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56544b6f1e28 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x56544b6f2218 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x56544b6f2200 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x56544b6f21e8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56544b6f21b8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x56544b6f2130 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x56544b6f2100 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56544b6f20b0 <col:67, col:76> 'char const[48]' lvalue ->c 0x56544b6e1880
|             |   `-CXXMemberCallExpr 0x56544b6f2090 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56544b6f2060 <col:67> '<bound member function type>' ->xanno 0x56544b6d69c8
|             |       `-CXXThisExpr 0x56544b6f2050 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56544b6f2118 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56544b6f20e0 <col:80> 'int' lvalue ParmVar 0x56544b6da900 'i' 'int'
|-CXXMethodDecl 0x56544b6dabe8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x56544b6daa90 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56544b6dab10 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x56544b6f2a50 <col:45, line:635:5>
|   |-ParenExpr 0x56544b6f2798 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x56544b6f2768 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x56544b6f2430 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56544b6f2400 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56544b6f22a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56544b6f2288 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56544b6f2248 <col:23> 'int' lvalue ParmVar 0x56544b6daa90 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56544b6f2268 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56544b6f23e0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x56544b6f23c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56544b6f22c0 <col:33> 'int' lvalue ParmVar 0x56544b6daa90 'i' 'int'
|   |   |     `-BinaryOperator 0x56544b6f23a8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56544b6f2390 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56544b6f22e0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56544b6d6db0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x56544b6f2368 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x56544b6f2350 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x56544b6f2318 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x56544b6f2490 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56544b6f2470 <col:79> 'int' 0
|   |   `-CallExpr 0x56544b6f26c8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x56544b6f26b0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56544b6f2690 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56544b243460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56544b6f2708 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6f2500 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x56544b6f2720 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56544b6f2548 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56544b6f2738 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56544b6f2580 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x56544b6f2750 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56544b6f2678 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56544b6f2660 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56544b6f2618 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x56544b6f2a30 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x56544b6f2998 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56544b6f2968 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x56544b6f2908 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56544b6f28d8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56544b6f2888 <col:54, col:63> 'char [48]' lvalue ->c 0x56544b6e1880
|     |     |   `-CXXMemberCallExpr 0x56544b6f2868 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56544b6f2838 <col:54> '<bound member function type>' ->xanno 0x56544b6d6b68
|     |     |       `-CXXThisExpr 0x56544b6f2828 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56544b6f28f0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56544b6f28b8 <col:67> 'int' lvalue ParmVar 0x56544b6daa90 'i' 'int'
|     `-CXXConstCastExpr 0x56544b6f2a00 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x56544b6f29e8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x56544b6f29b0 <col:91> 'const void *' lvalue ParmVar 0x56544b6dab10 'x' 'const void *'
|-CXXMethodDecl 0x56544b6dacb8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x56544b6f2ad8 <col:34, line:640:5>
|   `-ReturnStmt 0x56544b6f2ac8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x56544b6f2ab0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x56544b6f2a80 <col:16> 'Packet *' lvalue ->_data_packet 0x56544b6e2438
|         `-CXXThisExpr 0x56544b6f2a70 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x56544b6dadf8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x56544b6dad68 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56544b6ebb98 <col:46> 'bool' true
|-CXXMethodDecl 0x56544b6daf78 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x56544b6daeb0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x56544b6db020 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x56544b6db7d0 <line:660:22> "" ""
| |-EnumConstantDecl 0x56544b6db120 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56544b6db840 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b6db100 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x56544b6db0e0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x56544b6d0280 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x56544b6db1b0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56544b6db858 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b6db190 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x56544b6db170 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x56544b6d0310 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x56544b6db240 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56544b6db870 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b6db220 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56544b6db200 <col:21> 'int' 0
| |-EnumConstantDecl 0x56544b6db2d0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56544b6db888 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b6db2b0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x56544b6db290 <col:19> 'int' 16
| |-EnumConstantDecl 0x56544b6db360 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56544b6db8a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b6db340 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x56544b6db320 <col:21> 'int' 16
| |-EnumConstantDecl 0x56544b6db3f0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56544b6db8b8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b6db3d0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x56544b6db3b0 <col:19> 'int' 32
| |-EnumConstantDecl 0x56544b6db480 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56544b6db8d0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b6db460 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x56544b6db440 <col:19> 'int' EnumConstant 0x56544b6db2d0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x56544b6db510 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56544b6db8e8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b6db4f0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x56544b6db4d0 <col:19> 'int' EnumConstant 0x56544b6db3f0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x56544b6db5e0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56544b6db900 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b6db5c0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x56544b6db5a0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x56544b6db560 <col:23> 'int' EnumConstant 0x56544b6db510 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x56544b6db580 <col:40> 'int' 2
| |-EnumConstantDecl 0x56544b6db6b0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56544b6db918 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b6db690 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x56544b6db670 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x56544b6db630 <col:23> 'int' EnumConstant 0x56544b6db510 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x56544b6db650 <col:40> 'int' 4
| `-EnumConstantDecl 0x56544b6db780 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x56544b6db930 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56544b6db760 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x56544b6db740 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x56544b6db700 <col:23> 'int' EnumConstant 0x56544b6db510 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x56544b6db720 <col:40> 'int' 8
|-CXXMethodDecl 0x56544b6db970 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x56544b6dba10 <col:68> "" ""
|-CXXMethodDecl 0x56544b6dbaa8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x56544b6dbb48 <col:45> "" ""
|-CXXMethodDecl 0x56544b6dbbe0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x56544b6dbc80 <col:57> "" ""
|-CXXMethodDecl 0x56544b6dbd18 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x56544b6dbdb8 <col:45> "" ""
|-CXXMethodDecl 0x56544b6dbe50 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x56544b6dbef0 <col:57> "" ""
|-CXXMethodDecl 0x56544b6dbf80 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x56544b6dc020 <col:51> "" ""
|-CXXMethodDecl 0x56544b6dc0b0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x56544b6dc150 <col:63> "" ""
|-CXXMethodDecl 0x56544b6dc1e0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x56544b6dc280 <col:53> "" ""
|-CXXMethodDecl 0x56544b6dc310 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x56544b6dc3b0 <col:65> "" ""
|-CXXMethodDecl 0x56544b6dc4c8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x56544b6dc438 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x56544b6dc570 <col:61> "" ""
|-CXXMethodDecl 0x56544b6dc708 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x56544b6dc5f8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x56544b6dc670 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x56544b6dc7b8 <col:67> "" ""
|-CXXMethodDecl 0x56544b6dc8d0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x56544b6dc840 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56544b6dc978 <col:63> "" ""
|-CXXMethodDecl 0x56544b6dcb10 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x56544b6dca00 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56544b6dca78 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x56544b6dcbc0 <col:69> "" ""
|-CXXMethodDecl 0x56544b6dccd8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x56544b6dcc48 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56544b6dcd80 <col:63> "" ""
|-CXXMethodDecl 0x56544b6df458 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56544b6df348 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56544b6df3c0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56544b6df508 <col:69> "" ""
|-CXXMethodDecl 0x56544b6df620 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x56544b6df590 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x56544b6df6c8 <col:62> "" ""
|-CXXMethodDecl 0x56544b6df860 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x56544b6df750 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56544b6df7c8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x56544b6df910 <col:68> "" ""
|-CXXMethodDecl 0x56544b6dfa28 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x56544b6df998 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56544b6dfad0 <col:63> "" ""
|-CXXMethodDecl 0x56544b6dfc68 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x56544b6dfb58 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56544b6dfbd0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x56544b6dfd18 <col:69> "" ""
|-CXXMethodDecl 0x56544b6dfda8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x56544b6dfe48 <col:64> "" ""
|-CXXMethodDecl 0x56544b6dfed8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x56544b6dff78 <col:52> "" ""
|-CXXMethodDecl 0x56544b6e0008 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x56544b6e00a8 <col:67> "" ""
|-CXXMethodDecl 0x56544b6e0138 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x56544b6e01d8 <col:55> "" ""
|-CXXMethodDecl 0x56544b6e02f0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x56544b6e0260 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56544b6e0398 <col:58> "" ""
|-CXXMethodDecl 0x56544b6e0530 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x56544b6e0420 <col:33> col:36 'int'
| |-ParmVarDecl 0x56544b6e0498 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x56544b6e05e0 <col:62> "" ""
|-CXXMethodDecl 0x56544b6e06f8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x56544b6e0668 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56544b6e07a0 <col:58> "" ""
|-CXXMethodDecl 0x56544b6e0938 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x56544b6e0828 <col:33> col:36 'int'
| |-ParmVarDecl 0x56544b6e08a0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x56544b6e09e8 <col:62> "" ""
|-CXXMethodDecl 0x56544b6e0b00 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x56544b6e0a70 <col:34> col:37 'int'
| `-DeprecatedAttr 0x56544b6e0ba8 <col:60> "" ""
|-CXXMethodDecl 0x56544b6e0d40 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x56544b6e0c30 <col:34> col:37 'int'
| |-ParmVarDecl 0x56544b6e0ca8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x56544b6e0df0 <col:64> "" ""
|-CXXMethodDecl 0x56544b6e0f08 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x56544b6e0e78 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56544b6e0fb0 <col:58> "" ""
|-CXXMethodDecl 0x56544b6e1148 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x56544b6e1038 <col:33> col:36 'int'
| |-ParmVarDecl 0x56544b6e10b0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x56544b6e11f8 <col:62> "" ""
|-CXXMethodDecl 0x56544b6e1310 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x56544b6e1280 <col:33> col:36 'int'
| `-DeprecatedAttr 0x56544b6e13b8 <col:59> "" ""
|-CXXMethodDecl 0x56544b6e1550 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56544b6e1440 <col:33> col:36 'int'
| |-ParmVarDecl 0x56544b6e14b8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56544b6e1600 <col:63> "" ""
|-AccessSpecDecl 0x56544b6e1670 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x56544b6e1698 prev 0x56544b6d68a0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56544b6e1790 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x56544b6e1880 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x56544b6e19a8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x56544b6e1b28 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x56544b6e1ca8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x56544b6e1e28 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x56544b6f2c58 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56544b6f34c8 <col:11>
| |-CXXDestructorDecl 0x56544b6f2d30 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x56544b6f2e68 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x56544b6f2e68
| | `-ParmVarDecl 0x56544b6f2f78 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x56544b6f3018 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56544b6f3018
| | `-ParmVarDecl 0x56544b6f3128 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x56544b6f5ee8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56544b6f5ff8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x56544b6f6278 <col:11>
| |   `-ReturnStmt 0x56544b6f6268 <col:11>
| |     `-UnaryOperator 0x56544b6f6250 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56544b6f6240 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x56544b6f6068 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56544b6f6068
|   `-ParmVarDecl 0x56544b6f6178 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x56544b6e1e90 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56544b6e1fa8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x56544b6e2048 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x56544b6e20b0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x56544b6e2118 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x56544b6e2180 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x56544b6e21e0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x56544b6e22a0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x56544b6e2300 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x56544b6e2360 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x56544b6f2b68 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x56544b6e2048 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x56544b6f34d8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x56544b6f3530 <col:12>
| |-CXXConstructorDecl 0x56544b6f3198 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x56544b6f3198
| | `-ParmVarDecl 0x56544b6f32a8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x56544b6f3348 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x56544b6f3348
| | `-ParmVarDecl 0x56544b6f3458 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x56544b6f55d0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x56544b6e23d8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x56544b6e2438 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x56544b6e24a0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x56544b6e2508 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x56544b6e2570 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x56544b6e25d8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x56544b6e2638 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x56544b6e2698 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x56544b6e2700 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x56544b6e2788 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x56544b6e23d8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x56544b6f2b00 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x56544b6e2638 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x56544b6f3540 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x56544b6f35a0 <col:21, line:755:5>
|-CXXConstructorDecl 0x56544b6e2928 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x56544b6e2868 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x56544b6e2a20 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x56544b6e2c08 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x56544b6e2b10 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x56544b6e2ed8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x56544b6e2cc0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56544b6e2d38 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56544b6e2db0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b6e30f8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x56544b6e2fa8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x56544b6e3020 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x56544b6eb6d8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x56544b6e31b8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x56544b6e3230 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x56544b6e32a8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x56544b6eb830 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x56544b6eb7a0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b6eb978 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x56544b6eb8e8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x56544b6eba70 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_tcp
         0 |   uint16_t th_sport
         2 |   uint16_t th_dport
         4 |   tcp_seq_t th_seq
         8 |   tcp_seq_t th_ack
    12:0-3 |   unsigned int th_flags2
    12:4-7 |   unsigned int th_off
        13 |   uint8_t th_flags
        14 |   uint16_t th_win
        16 |   uint16_t th_sum
        18 |   uint16_t th_urp
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b43dbd8 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56544b43dcf8 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x56544b43ddc0 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x56544b50e390 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56544b5136a8 <col:8>
|-CXXConstructorDecl 0x56544b50e498 <col:8> col:8 implicit used constexpr in_addr 'void (const in_addr &) noexcept' inline default trivial
| |-ParmVarDecl 0x56544b50e5a8 <col:8> col:8 used 'const in_addr &'
| |-CXXCtorInitializer Field 0x56544b43ddc0 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x56544b84e5c0 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x56544b84e590 <col:8> 'const in_addr_t':'const unsigned int' lvalue .s_addr 0x56544b43ddc0
| |     `-DeclRefExpr 0x56544b84e570 <col:8> 'const in_addr' lvalue ParmVar 0x56544b50e5a8 '' 'const in_addr &'
| `-CompoundStmt 0x56544b84e608 <col:8>
|-CXXConstructorDecl 0x56544b50e648 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56544b50e758 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x56544b43ddc0 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x56544b5138c0 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x56544b513890 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x56544b43ddc0
| |     `-CXXStaticCastExpr 0x56544b513860 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x56544b513830 <col:8> 'in_addr' lvalue ParmVar 0x56544b50e758 '' 'in_addr &&'
| `-CompoundStmt 0x56544b513908 <col:8>
`-CXXDestructorDecl 0x56544b513b40 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b506078 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x56544b506198 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x56544b506280 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x56544b506260 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x56544b506228 <col:22> 'int' 4
|-FieldDecl 0x56544b506328 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x56544b506308 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x56544b5062d0 <col:21> 'int' 4
|-FieldDecl 0x56544b506388 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x56544b5063e8 <line:40:5, col:14> col:14 referenced ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x56544b506448 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x56544b5064a8 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x56544b506508 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x56544b506568 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x56544b5065c8 <line:49:5, col:14> col:14 ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x56544b506638 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x56544b5066a8 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b745280 prev 0x56544b6cfcf0 <../dummy_inc/clicknet/tcp.h:24:1, line:51:1> line:24:8 referenced struct click_tcp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x56544b745378 <col:1, col:8> col:8 implicit struct click_tcp
|-FieldDecl 0x56544b745418 <line:25:5, col:14> col:14 referenced th_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x56544b745478 <line:26:5, col:14> col:14 referenced th_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x56544b745500 <line:27:5, col:15> col:15 referenced th_seq 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x56544b745560 <line:28:5, col:15> col:15 referenced th_ack 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x56544b745608 <line:30:5, col:26> col:14 th_flags2 'unsigned int'
| `-ConstantExpr 0x56544b7455e8 <col:26> 'int' Int: 4
|   `-IntegerLiteral 0x56544b7455b0 <col:26> 'int' 4
|-FieldDecl 0x56544b7456b0 <line:31:5, col:23> col:14 referenced th_off 'unsigned int'
| `-ConstantExpr 0x56544b745690 <col:23> 'int' Int: 4
|   `-IntegerLiteral 0x56544b745658 <col:23> 'int' 4
|-FieldDecl 0x56544b745710 <line:39:5, col:13> col:13 referenced th_flags 'uint8_t':'unsigned char'
|-FieldDecl 0x56544b745770 <line:48:5, col:14> col:14 th_win 'uint16_t':'unsigned short'
|-FieldDecl 0x56544b7457d0 <line:49:5, col:14> col:14 th_sum 'uint16_t':'unsigned short'
`-FieldDecl 0x56544b745830 <line:50:5, col:14> col:14 th_urp 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b6f3640 prev 0x56544b6cff00 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x56544b6f3778 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x56544b6f3808 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x56544b6f38b0 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x56544b6f3950 <col:20>
| `-OptimizeNoneAttr 0x56544b6f39a8 <col:30>
|-CXXMethodDecl 0x56544b6f39f8 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x56544b6f3a98 <col:20>
| `-OptimizeNoneAttr 0x56544b6f3af0 <col:30>
|-CXXMethodDecl 0x56544b6f3b40 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x56544b6f3c08 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x56544b6f3cd0 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x56544b6f3de8 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x56544b6f3eb0 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x56544b6f3f50 <col:20>
| `-OptimizeNoneAttr 0x56544b6f3fa8 <col:30>
|-CXXMethodDecl 0x56544b6f4018 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x56544b6f40b8 <col:20>
| `-OptimizeNoneAttr 0x56544b6f4110 <col:30>
|-CXXMethodDecl 0x56544b6f41b8 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x56544b6f4258 <col:20>
| `-OptimizeNoneAttr 0x56544b6f42b0 <col:30>
|-CXXMethodDecl 0x56544b6f4300 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x56544b6f4418 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x56544b6f4538 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x56544b6f4658 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x56544b6f4720 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x56544b6f47c0 <col:62> "" ""
|-AccessSpecDecl 0x56544b6f4830 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x56544b6f4890 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x56544b6f5488 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x56544b6f56b0 <col:29, col:31>
|-CXXMethodDecl 0x56544b6f4958 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x56544b6f4a98 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x56544b6f4a08 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x56544b6f4b90 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x56544b6f56c0 <col:23, col:25>
|-CXXMethodDecl 0x56544b6f4d48 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x56544b6f4c80 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x56544b6f5018 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x56544b6f4e00 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56544b6f4e78 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56544b6f4ef0 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56544b6f51a8 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x56544b6f50e0 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x56544b6f52a0 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x56544b6f5308 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x56544b6f5308
  `-ParmVarDecl 0x56544b6f5418 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class IPAddress>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class IPAddress * _ptr
        24 |   class IPAddress _slot
        24 |     uint32_t _addr
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct uninitialized_type (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b2fc688 <../dummy_inc/click/config.h:317:1, line:318:1> line:317:8 referenced struct uninitialized_type definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56544b2fc7a8 <col:1, col:8> col:8 implicit struct uninitialized_type
|-CXXConstructorDecl 0x56544b50e7e0 <col:8> col:8 implicit referenced constexpr uninitialized_type 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56544b50e8c0 <col:8> col:8 implicit constexpr uninitialized_type 'void (const uninitialized_type &)' inline default trivial noexcept-unevaluated 0x56544b50e8c0
| `-ParmVarDecl 0x56544b50e9a8 <col:8> col:8 'const uninitialized_type &'
|-CXXConstructorDecl 0x56544b50ea48 <col:8> col:8 implicit constexpr uninitialized_type 'void (uninitialized_type &&)' inline default trivial noexcept-unevaluated 0x56544b50ea48
| `-ParmVarDecl 0x56544b50eb58 <col:8> col:8 'uninitialized_type &&'
`-CXXDestructorDecl 0x56544b6ab840 <col:8> col:8 implicit referenced ~uninitialized_type 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.uninitialized_type = type { i8 }
  NonVirtualBaseLLVMType:%struct.uninitialized_type = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPAddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class IPAddress> (empty)
         0 |   class IPAddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b5169a0 prev 0x56544b508d88 <../dummy_inc/click/ipaddress.hh:367:1, line:378:1> line:367:7 referenced class IPAddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56544b516a98 <col:1, col:7> col:7 implicit class IPAddressArg
|-AccessSpecDecl 0x56544b516b28 <col:22, col:28> col:22 public
|-CXXMethodDecl 0x56544b516f50 <line:368:5, line:369:43> line:368:24 basic_parse 'const char *(const char *, const char *, unsigned char *, int &)' static
| |-ParmVarDecl 0x56544b516b68 <col:36, col:48> col:48 begin 'const char *'
| |-ParmVarDecl 0x56544b516be8 <col:55, col:67> col:67 end 'const char *'
| |-ParmVarDecl 0x56544b516d20 <line:369:8, col:29> col:22 value 'unsigned char *':'unsigned char *'
| `-ParmVarDecl 0x56544b516dd0 <col:32, col:37> col:37 nbytes 'int &'
|-CXXMethodDecl 0x56544b517218 <line:370:5, line:371:44> line:370:17 used parse 'bool (const String &, IPAddress &, const ArgContext &)' static
| |-ParmVarDecl 0x56544b517020 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x56544b517098 <col:42, col:53> col:53 result 'IPAddress &'
| `-ParmVarDecl 0x56544b517138 <line:371:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x56544b51bbb8 <col:34> 'const ArgContext' lvalue Var 0x56544b508d20 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x56544b51b610 <line:372:5, line:375:5> line:372:17 parse 'bool (const String &, struct in_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x56544b5172e0 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x56544b5173d0 <col:42, col:58> col:58 used result 'struct in_addr &'
| |-ParmVarDecl 0x56544b517448 <line:373:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x56544b51bbd8 <col:34> 'const ArgContext' lvalue Var 0x56544b508d20 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x56544b51bdb8 <col:46, line:375:5>
|   `-ReturnStmt 0x56544b51bda8 <line:374:2, col:63>
|     `-CallExpr 0x56544b51bd70 <col:9, col:63> 'bool'
|       |-ImplicitCastExpr 0x56544b51bd58 <col:9> 'bool (*)(const String &, IPAddress &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56544b51bd10 <col:9> 'bool (const String &, IPAddress &, const ArgContext &)' lvalue CXXMethod 0x56544b517218 'parse' 'bool (const String &, IPAddress &, const ArgContext &)'
|       |-DeclRefExpr 0x56544b51bc70 <col:15> 'const String' lvalue ParmVar 0x56544b5172e0 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x56544b51bcc0 <col:20, col:56> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x56544b51bc90 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x56544b5173d0 'result' 'struct in_addr &'
|       `-DeclRefExpr 0x56544b51bcf0 <col:59> 'const ArgContext' lvalue ParmVar 0x56544b517448 'args' 'const ArgContext &'
|-CXXMethodDecl 0x56544b51bae8 <line:376:5, line:377:44> line:376:17 parse 'bool (const String &, Vector<IPAddress> &, const ArgContext &)' static
| |-ParmVarDecl 0x56544b51b6d8 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x56544b51b950 <col:42, col:61> col:61 result 'Vector<IPAddress> &'
| `-ParmVarDecl 0x56544b51b9c8 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x56544b51bbf8 <col:34> 'const ArgContext' lvalue Var 0x56544b508d20 'blank_args' 'const ArgContext'
|-CXXConstructorDecl 0x56544b8dfc68 <line:367:7> col:7 implicit constexpr IPAddressArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x56544b8dfd40 <col:7> col:7 implicit ~IPAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56544b8dfe78 <col:7> col:7 implicit constexpr IPAddressArg 'void (const IPAddressArg &)' inline default trivial noexcept-unevaluated 0x56544b8dfe78
| `-ParmVarDecl 0x56544b8dff88 <col:7> col:7 'const IPAddressArg &'
`-CXXConstructorDecl 0x56544b8e0028 <col:7> col:7 implicit used constexpr IPAddressArg 'void (IPAddressArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x56544b8e0138 <col:7> col:7 'IPAddressArg &&'
  `-CompoundStmt 0x56544b8e0d90 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.IPAddressArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPAddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56544b51cbe8 <../dummy_inc/click/ipaddress.hh:398:1, col:64> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IPAddressArg'
|-TemplateArgument type 'IPAddress'
|-CXXRecordDecl 0x56544b51ce48 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x56544b8dfb78 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56544b8e01a8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<IPAddress> &)' inline default trivial noexcept-unevaluated 0x56544b8e01a8
| `-ParmVarDecl 0x56544b8e02b8 <col:19> col:19 'const DefaultArg<IPAddress> &'
|-CXXConstructorDecl 0x56544b8e0358 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<IPAddress> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56544b8e0468 <col:19> col:19 used 'DefaultArg<IPAddress> &&'
| |-CXXCtorInitializer 'IPAddressArg'
| | `-CXXConstructExpr 0x56544b8e0da0 <col:19> 'IPAddressArg' 'void (IPAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x56544b8e0d70 <col:19> 'IPAddressArg' xvalue <UncheckedDerivedToBase (IPAddressArg)>
| |     `-CXXStaticCastExpr 0x56544b8e0d40 <col:19> 'DefaultArg<IPAddress>' xvalue static_cast<struct DefaultArg<class IPAddress> &&> <NoOp>
| |       `-DeclRefExpr 0x56544b8e0d10 <col:19> 'DefaultArg<IPAddress>' lvalue ParmVar 0x56544b8e0468 '' 'DefaultArg<IPAddress> &&'
| `-CompoundStmt 0x56544b8e0e10 <col:19>
`-CXXDestructorDecl 0x56544b8e0508 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b7dcab0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56544b7dcbc8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x56544b7dcc58 <col:16, col:22> col:16 public
|-EnumDecl 0x56544b7dcc80 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x56544b7dcd80 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56544b7dcfd0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b7dcd60 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56544b7dcd40 <col:21> 'int' 0
| |-EnumConstantDecl 0x56544b7dce10 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56544b7dcfe8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b7dcdf0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x56544b7dcdd0 <col:24> 'int' 22
| |-EnumConstantDecl 0x56544b7dcea0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56544b7dd000 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b7dce80 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x56544b7dce60 <col:24> 'int' 34
| |-EnumConstantDecl 0x56544b7dcf30 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56544b7dd018 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56544b7dcf10 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x56544b7dcef0 <col:25> 'int' 95
| `-EnumConstantDecl 0x56544b7dcf80 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x56544b7de990 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56544b7dedc8 <col:7>
|-CXXConstructorDecl 0x56544b7dea98 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x56544b7dea98
| `-ParmVarDecl 0x56544b7deba8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x56544b7dec48 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56544b7ded58 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x56544b8e9710 <col:7>
`-CXXDestructorDecl 0x56544b7e0f08 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56544b7dd048 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x56544b7dd1a8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x56544b7dd238 <col:32, col:38> col:32 public
|-TypedefDecl 0x56544b7dd270 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x56544b2fca10 'uint32_t' sugar
|   |-Typedef 0x56544b20f4c8 'uint32_t'
|   `-TypedefType 0x56544b1e85a0 '__uint32_t' sugar
|     |-Typedef 0x56544b1e8198 '__uint32_t'
|     `-BuiltinType 0x56544b1a6620 'unsigned int'
|-CXXConstructorDecl 0x56544b7dd3b8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x56544b7dd2e0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x56544b7de898 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x56544b7dedd8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x56544b7de150 'base' 'int'
| | `-ImplicitCastExpr 0x56544b7de938 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x56544b7de8f8 <col:16> 'int' lvalue ParmVar 0x56544b7dd2e0 'b' 'int'
| `-CompoundStmt 0x56544b7dee48 <col:19, line:1046:5>
|-CXXMethodDecl 0x56544b7dd8b0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x56544b7dd480 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x56544b7dd500 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x56544b7dd578 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x56544b7dd5f8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x56544b7dd6b8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x56544b7dd738 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x56544b7ddd08 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x56544b7dd980 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x56544b7ddc68 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x56544b7dda28 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x56544b7ddac8 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x56544b7ddb40 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x56544b7de8b8 <col:82> 'const ArgContext' lvalue Var 0x56544b7d2808 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x56544b7dfdb8 <col:94, line:1067:5>
| |   |-DeclStmt 0x56544b7df018 <line:1054:9, col:64>
| |   | `-VarDecl 0x56544b7dee68 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x56544b7defd0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x56544b7df238 <line:1055:9, col:91>
| |   | `-VarDecl 0x56544b7df048 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x56544b7df210 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x56544b7df1f0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x56544b7df1a0 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x56544b7df180 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x56544b7df128 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x56544b7df0d8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x56544b7df108 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x56544b7df168 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x56544b7df148 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x56544b7df1d0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x56544b7df398 <line:1056:9, col:27>
| |   | `-VarDecl 0x56544b7df330 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x56544b7df7e0 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x56544b7df710 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x56544b7df690 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x56544b6c6bb8 0x56544b510198 0x56544b50fe70 0x56544b500640 0x56544b5002f0 0x56544b4ffbe0 0x56544b4d2550 0x56544b45fa20
| |   | | |-CallExpr 0x56544b7df5d0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x56544b7df3c0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x56544b7df470 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x56544b7df440 <col:19, col:23> '<bound member function type>' .begin 0x56544b4ef848
| |   | | | |   `-DeclRefExpr 0x56544b7df420 <col:19> 'const String' lvalue ParmVar 0x56544b7dda28 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x56544b7df4e0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x56544b7df4b0 <col:32, col:36> '<bound member function type>' .end 0x56544b4efa60
| |   | | | |   `-DeclRefExpr 0x56544b7df490 <col:32> 'const String' lvalue ParmVar 0x56544b7dda28 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x56544b7df500 <col:43> 'const bool' lvalue Var 0x56544b7dee68 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x56544b7df568 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x56544b7df548 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x56544b7df590 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x56544b7df330 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x56544b7df5b0 <col:73> 'const int' lvalue Var 0x56544b7df048 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x56544b7df670 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x56544b7df640 <col:16, col:20> '<bound member function type>' .end 0x56544b4efa60
| |   | |     `-DeclRefExpr 0x56544b7df620 <col:16> 'const String' lvalue ParmVar 0x56544b7dda28 'str' 'const String &'
| |   | `-BinaryOperator 0x56544b7df7c0 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x56544b7df758 <col:13> 'int' lvalue ->status 0x56544b7de1b8
| |   |   | `-CXXThisExpr 0x56544b7df748 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x56544b7df7a8 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x56544b7df788 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56544b7dce10 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x56544b7dfa30 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x56544b7df918 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x56544b7df900 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x56544b7df8e8 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x56544b7df808 <col:13> 'int' lvalue ->status 0x56544b7de1b8
| |   | | |     `-CXXThisExpr 0x56544b7df7f8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x56544b7df8c8 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x56544b7df898 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x56544b7df848 <col:23> 'int' lvalue ->status 0x56544b7de1b8
| |   | |   |   `-CXXThisExpr 0x56544b7df838 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x56544b7df8b0 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x56544b7df878 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56544b7dcea0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x56544b7dfa10 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x56544b7df9b0 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x56544b7df958 <col:13, col:18> '<bound member function type>' .error 0x56544b78ac20
| |   |   | | `-DeclRefExpr 0x56544b7df938 <col:13> 'const ArgContext' lvalue ParmVar 0x56544b7ddb40 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x56544b7df9d8 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x56544b7df988 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x56544b7dfa00 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x56544b7df9f0 <col:20> 'bool' false
| |   |-DeclStmt 0x56544b7dfc08 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x56544b7dfbb0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x56544b7dfb40 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x56544b7dfd68 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x56544b7dfc20 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x56544b4939e8
| |   | |-DeclRefExpr 0x56544b7dfc68 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x56544b7df330 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x56544b7dfd38 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x56544b7dfcb0 <col:64> 'V' lvalue ParmVar 0x56544b7ddac8 'result' 'V &'
| |   `-ReturnStmt 0x56544b7dfda8 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x56544b7dfd98 <col:16> 'bool' true
| `-CXXMethodDecl 0x56544b8f0a48 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x56544b8ecaf0 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x56544b8f0900 <col:46, col:49> col:49 used result 'int &'
|   |-ParmVarDecl 0x56544b8f0968 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x56544b8f27e0 <col:94, line:1067:5>
|     |-DeclStmt 0x56544b8f1258 <line:1054:9, col:64>
|     | `-VarDecl 0x56544b8f1078 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x56544b8f11e8 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x56544b8f11b8 <col:36, col:55> 'const bool' lvalue Var 0x56544b483958 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x56544b8f1438 <line:1055:9, col:91>
|     | `-VarDecl 0x56544b8f1270 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x56544b8f13b8 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x56544b8f13a0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x56544b8f1380 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x56544b8f1360 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x56544b8f1340 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x56544b8f1308 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x56544b8f12e8 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x56544b7df108 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x56544b8f1328 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x56544b7df148 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x56544b7df1d0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x56544b8f15d0 <line:1056:9, col:27>
|     | `-VarDecl 0x56544b8f1568 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x56544b8f1a58 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x56544b8f1a00 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x56544b8f18b8 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x56544b8f1888 <col:13> '<bound member function type>' ->parse 0x56544b7dd8b0
|     | | | | `-CXXThisExpr 0x56544b8f1878 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x56544b8f1718 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x56544b8f16e8 <col:19, col:23> '<bound member function type>' .begin 0x56544b4ef848
|     | | | |   `-DeclRefExpr 0x56544b8f16c8 <col:19> 'const String' lvalue ParmVar 0x56544b8ecaf0 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x56544b8f1788 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x56544b8f1758 <col:32, col:36> '<bound member function type>' .end 0x56544b4efa60
|     | | | |   `-DeclRefExpr 0x56544b8f1738 <col:32> 'const String' lvalue ParmVar 0x56544b8ecaf0 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x56544b8f1928 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x56544b8f1908 <col:43> 'const bool' lvalue Var 0x56544b8f1078 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x56544b8f1810 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x56544b8f17f8 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x56544b8f17d8 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
|     | | | |-ImplicitCastExpr 0x56544b8f1940 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x56544b8f1838 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x56544b8f1568 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x56544b8f1978 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x56544b8f1958 <col:73> 'const int' lvalue Var 0x56544b8f1270 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x56544b8f19e0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x56544b8f19b0 <col:16, col:20> '<bound member function type>' .end 0x56544b4efa60
|     | |     `-DeclRefExpr 0x56544b8f1990 <col:16> 'const String' lvalue ParmVar 0x56544b8ecaf0 'str' 'const String &'
|     | `-BinaryOperator 0x56544b8f1a38 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x56544b7df758 <col:13> 'int' lvalue ->status 0x56544b7de1b8
|     |   | `-CXXThisExpr 0x56544b7df748 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x56544b8f1a20 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x56544b7df788 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56544b7dce10 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x56544b8f1bd0 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x56544b8f1af0 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x56544b8f1ad8 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x56544b8f1ac0 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x56544b7df808 <col:13> 'int' lvalue ->status 0x56544b7de1b8
|     | | |     `-CXXThisExpr 0x56544b7df7f8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x56544b8f1aa0 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x56544b8f1a70 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x56544b7df848 <col:23> 'int' lvalue ->status 0x56544b7de1b8
|     | |   |   `-CXXThisExpr 0x56544b7df838 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x56544b8f1a88 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x56544b7df878 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56544b7dcea0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x56544b8f1bb0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x56544b8f1b60 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x56544b8f1b30 <col:13, col:18> '<bound member function type>' .error 0x56544b78ac20
|     |   | | `-DeclRefExpr 0x56544b8f1b10 <col:13> 'const ArgContext' lvalue ParmVar 0x56544b8f0968 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x56544b8f1b88 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x56544b7df988 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x56544b8f1ba0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x56544b7df9f0 <col:20> 'bool' false
|     |-DeclStmt 0x56544b8f2118 <line:1064:9, col:64>
|     | `-TypedefDecl 0x56544b8f20c0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
|     |   `-ElaboratedType 0x56544b8f2070 'typename make_unsigned<int>::type' sugar
|     |     `-TypedefType 0x56544b8f2050 'make_unsigned<int>::type' sugar
|     |       |-Typedef 0x56544b8f1fe0 'type'
|     |       `-ElaboratedType 0x56544b8f1f90 'typename integer_traits<int>::unsigned_type' sugar
|     |         `-TypedefType 0x56544b8f1f70 'integer_traits<int>::unsigned_type' sugar
|     |           |-Typedef 0x56544b483ab0 'unsigned_type'
|     |           `-BuiltinType 0x56544b1a6620 'unsigned int'
|     |-CallExpr 0x56544b8f2770 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x56544b8f2758 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x56544b8f26d8 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x56544b8f25b8 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x56544b4939e8 'extract_integer')
|     | |-ImplicitCastExpr 0x56544b8f27b8 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x56544b8f27a0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x56544b8f2178 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x56544b8f1568 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x56544b8f2248 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
|     |   `-DeclRefExpr 0x56544b8f21f8 <col:64> 'int':'int' lvalue ParmVar 0x56544b8f0900 'result' 'int &'
|     `-ReturnStmt 0x56544b8f27d0 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x56544b7dfd98 <col:16> 'bool' true
|-FunctionTemplateDecl 0x56544b7de0c8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x56544b7ddd78 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x56544b7de028 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x56544b7dde28 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x56544b7ddec8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x56544b7ddf40 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x56544b7de8d8 <col:71> 'const ArgContext' lvalue Var 0x56544b7d2808 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x56544b7e0528 <col:83, line:1083:5>
| |   |-DeclStmt 0x56544b7dfe80 <line:1071:9, col:12>
| |   | `-VarDecl 0x56544b7dfe18 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x56544b7e0500 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x56544b7e0110 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x56544b7dff98 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x56544b7dff60 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x56544b7dfea8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x56544b7dff00 <col:31> 'const String' lvalue ParmVar 0x56544b7dde28 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x56544b7dff20 <col:36> 'V' lvalue Var 0x56544b7dfe18 'x' 'V'
| |     | |   `-DeclRefExpr 0x56544b7dff40 <col:39> 'const ArgContext' lvalue ParmVar 0x56544b7ddf40 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x56544b7e00f0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x56544b7e00d0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x56544b7e00b8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x56544b7e00a0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x56544b7dffc0 <col:17> 'int' lvalue ->status 0x56544b7de1b8
| |     |     |     `-CXXThisExpr 0x56544b7dffb0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x56544b7e0080 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x56544b7e0050 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x56544b7e0000 <col:27> 'int' lvalue ->status 0x56544b7de1b8
| |     |       |   `-CXXThisExpr 0x56544b7dfff0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x56544b7e0068 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x56544b7e0030 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56544b7dcea0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x56544b7e0140 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x56544b7e0130 <col:20> 'bool' false
| |     `-IfStmt 0x56544b7e04d8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x56544b7e01e0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x56544b7e01b0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x56544b7e0160 <col:18> 'int' lvalue ->status 0x56544b7de1b8
| |       | |   `-CXXThisExpr 0x56544b7e0150 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x56544b7e01c8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x56544b7e0190 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56544b7dcea0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x56544b7e0418 <col:42, line:1079:9>
| |       | |-CallExpr 0x56544b7e03c0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x56544b7e0210 <line:1076:13> '<bound member function type>' ->range_error 0x56544b7de7c8
| |       | | | `-CXXThisExpr 0x56544b7e0200 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x56544b7e0240 <col:25> 'const ArgContext' lvalue ParmVar 0x56544b7ddf40 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x56544b7e0320 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x56544b7e0398 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x56544b7e0378 <col:43> 'V' lvalue Var 0x56544b7dfe18 'x' 'V'
| |       | `-ReturnStmt 0x56544b7e0408 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x56544b7e03f8 <col:20> 'bool' false
| |       `-CompoundStmt 0x56544b7e04b8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x56544b7e0478 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x56544b7e0438 <col:13> 'V' lvalue ParmVar 0x56544b7ddec8 'result' 'V &'
| |         | `-DeclRefExpr 0x56544b7e0458 <col:22> 'V' lvalue Var 0x56544b7dfe18 'x' 'V'
| |         `-ReturnStmt 0x56544b7e04a8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x56544b7e0498 <col:20> 'bool' true
| `-CXXMethodDecl 0x56544b8ec6d8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x56544b8ec4b0 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x56544b8ec588 <col:35, col:38> col:38 used result 'int &'
|   |-ParmVarDecl 0x56544b8ec5f0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x56544b8f1058 <col:83, line:1083:5>
|     |-DeclStmt 0x56544b8ec960 <line:1071:9, col:12>
|     | `-VarDecl 0x56544b8ec8f8 <col:9, col:11> col:11 used x 'int':'int'
|     `-IfStmt 0x56544b8f1030 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x56544b8f0cc0 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x56544b8f0be8 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x56544b8f0bb0 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x56544b8f0b68 <col:14> '<bound member function type>' ->parse_saturating 0x56544b8f0a48
|       | |   | `-CXXThisExpr 0x56544b8f0b58 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x56544b8ec9d0 <col:31> 'const String' lvalue ParmVar 0x56544b8ec4b0 'str' 'const String &'
|       | |   |-DeclRefExpr 0x56544b8ec9f0 <col:36> 'int':'int' lvalue Var 0x56544b8ec8f8 'x' 'int':'int'
|       | |   `-DeclRefExpr 0x56544b8eca10 <col:39> 'const ArgContext' lvalue ParmVar 0x56544b8ec5f0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x56544b8f0ca0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x56544b8f0c80 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x56544b8f0c68 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x56544b8f0c50 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x56544b7dffc0 <col:17> 'int' lvalue ->status 0x56544b7de1b8
|       |     |     `-CXXThisExpr 0x56544b7dffb0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x56544b8f0c30 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x56544b8f0c00 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x56544b7e0000 <col:27> 'int' lvalue ->status 0x56544b7de1b8
|       |       |   `-CXXThisExpr 0x56544b7dfff0 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x56544b8f0c18 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x56544b7e0030 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56544b7dcea0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x56544b8f0ce0 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x56544b7e0130 <col:20> 'bool' false
|       `-IfStmt 0x56544b8f1008 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x56544b8f0d20 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x56544b8f0cf0 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x56544b7e0160 <col:18> 'int' lvalue ->status 0x56544b7de1b8
|         | |   `-CXXThisExpr 0x56544b7e0150 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x56544b8f0d08 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x56544b7e0190 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56544b7dcea0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x56544b8f0f40 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x56544b8f0eb0 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x56544b7e0210 <line:1076:13> '<bound member function type>' ->range_error 0x56544b7de7c8
|         | | | `-CXXThisExpr 0x56544b7e0200 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x56544b8f0d40 <col:25> 'const ArgContext' lvalue ParmVar 0x56544b8ec5f0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x56544b8f0f18 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x56544b8f0ee8 <col:31, col:50> 'const bool' lvalue Var 0x56544b483958 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x56544b8f0e88 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x56544b8f0e70 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x56544b8f0e58 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x56544b8f0e38 <col:43> 'int':'int' lvalue Var 0x56544b8ec8f8 'x' 'int':'int'
|         | `-ReturnStmt 0x56544b8f0f30 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x56544b7e03f8 <col:20> 'bool' false
|         `-CompoundStmt 0x56544b8f0fe8 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x56544b8f0fb8 <line:1080:13, col:22> 'int':'int' lvalue '='
|           | |-DeclRefExpr 0x56544b8f0f60 <col:13> 'int':'int' lvalue ParmVar 0x56544b8ec588 'result' 'int &'
|           | `-ImplicitCastExpr 0x56544b8f0fa0 <col:22> 'int':'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x56544b8f0f80 <col:22> 'int':'int' lvalue Var 0x56544b8ec8f8 'x' 'int':'int'
|           `-ReturnStmt 0x56544b8f0fd8 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x56544b7e0498 <col:20> 'bool' true
|-FieldDecl 0x56544b7de150 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x56544b7de1b8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x56544b7de208 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x56544b7de4c0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x56544b7de248 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x56544b7de2c8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x56544b7de340 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x56544b7de3c0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x56544b7de7c8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x56544b7de590 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x56544b7de608 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x56544b7de6a0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x56544b7e0d88 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x56544b7e0d88
| `-ParmVarDecl 0x56544b7e0e98 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x56544b7e1018 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56544b7e1128 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x56544b8e9720 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x56544b8e96f0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x56544b8e96c0 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x56544b8e9690 <col:7> 'IntArg' lvalue ParmVar 0x56544b7e1128 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x56544b7de150 'base' 'int'
| | `-ImplicitCastExpr 0x56544b8e9818 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x56544b8e97e8 <col:7> 'int' xvalue .base 0x56544b7de150
| |     `-CXXStaticCastExpr 0x56544b8e97b8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x56544b8e9788 <col:7> 'IntArg' lvalue ParmVar 0x56544b7e1128 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x56544b7de1b8 'status' 'int'
| | `-ImplicitCastExpr 0x56544b8e98e8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x56544b8e98b8 <col:7> 'int' xvalue .status 0x56544b7de1b8
| |     `-CXXStaticCastExpr 0x56544b8e9888 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x56544b8e9858 <col:7> 'IntArg' lvalue ParmVar 0x56544b7e1128 '' 'IntArg &&'
| `-CompoundStmt 0x56544b8e9940 <col:7>
`-CXXDestructorDecl 0x56544b8e8880 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56544b7e5650 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x56544b7e58a8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x56544b8e87a8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x56544b8e8d20 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x56544b8e8d00 <<invalid sloc>> 'int'
| `-CompoundStmt 0x56544b8e8d90 <col:19>
|-CXXConstructorDecl 0x56544b8e8988 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x56544b8e8988
| `-ParmVarDecl 0x56544b8e8a98 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x56544b8e8b38 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56544b8e8c48 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x56544b8e9950 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x56544b8e9670 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x56544b8e9640 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x56544b8e9610 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x56544b8e8c48 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x56544b8e99c0 <col:19>
`-CXXDestructorDecl 0x56544b8e8dd0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
