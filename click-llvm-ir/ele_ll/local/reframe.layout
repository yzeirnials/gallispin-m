
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55931ae77818 prev 0x55931ae6efb8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55931ae77910 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55931ae779a0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55931ae77a18 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55931ae77ad8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55931ae77ba0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55931ae77d18 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55931ae77c50 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55931ae77dc0 <col:24>
| `-OptimizeNoneAttr 0x55931ae77e18 <col:34>
|-CXXMethodDecl 0x55931ae77e60 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55931ae78118 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55931ae77f10 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55931ae77f88 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55931ae78008 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55931ae781d0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55931ae78208 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55931ae78270 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55931ae782f8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55931ae78618 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55931ae783b0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55931ae78428 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55931ae784a0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55931ae78520 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55931ae78730 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55931ae800a8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55931ae800a8
| `-ParmVarDecl 0x55931ae801b8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55931ae80258 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55931ae80258
| `-ParmVarDecl 0x55931ae80368 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55931af880b0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55931ae6a830 prev 0x55931ae6a5b0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55931ae6a928 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55931ae6a9b8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55931ae6aa18 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55931ae6ab08 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55931ae6ac08 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55931ae6add8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55931ae6ac88 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55931ae6ad00 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55931ae6af68 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55931ae6aea0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55931ae6b010 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55931ae6b148 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55931ae6b080 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55931ae6b2e8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55931ae6b228 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55931ae6b488 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55931ae6b3c8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55931ae6b530 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55931ae6b630 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55931ae6b710 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae6b610 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55931ae6b5f0 <col:26> 'int' 1
| `-EnumConstantDecl 0x55931ae6b6c0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55931ae6b728 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55931ae6b6a0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55931ae6b680 <col:44> 'int' 2
|-CXXMethodDecl 0x55931ae6b870 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55931ae6b758 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55931ae6b7d8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55931ae6b9c8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55931ae6b938 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55931ae6bc08 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55931ae6ba88 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55931ae6bb00 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55931ae6bcb8 <col:20>
| `-OptimizeNoneAttr 0x55931ae6bd10 <col:30>
|-CXXMethodDecl 0x55931ae6be18 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55931ae6bd50 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55931ae6bec0 <col:20>
| `-OptimizeNoneAttr 0x55931ae6bf18 <col:30>
|-CXXMethodDecl 0x55931ae6bf68 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55931ae6c030 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55931ae6c148 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55931ae6c1d0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55931ae6c258 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55931ae6c2e0 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55931ae6c368 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55931ae6c3f8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55931ae6c4b8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55931ae6c540 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55931ae6c5c8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55931ae6c650 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55931ae6c6d8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55931ae6c760 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55931ae6c7f0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55931ae6c8b0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55931ae6c940 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55931ae6ca90 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55931ae6c9f8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55931ae6cc20 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55931ae6cb50 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55931ae6ced0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55931ae6ccd8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55931ae6cd58 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55931ae6cdd8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55931ae6cf88 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55931ae6d090 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55931ae6d320 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae6d070 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55931ae6d050 <col:33> 'int' 0
| |-EnumConstantDecl 0x55931ae6d120 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55931ae6d338 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae6d100 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55931ae6d0e0 <col:32> 'int' 20
| |-EnumConstantDecl 0x55931ae6d1b0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55931ae6d350 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae6d190 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55931ae6d170 <col:38> 'int' 90
| |-EnumConstantDecl 0x55931ae6d240 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55931ae6d368 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae6d220 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55931ae6d200 <col:35> 'int' 100
| `-EnumConstantDecl 0x55931ae6d2d0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55931ae6d380 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55931ae6d2b0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55931ae6d290 <col:32> 'int' 2000
|-CXXMethodDecl 0x55931ae6d3c0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55931ae6d800 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55931ae6d670 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55931ae6d6e8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55931ae6d8d0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55931ae6da50 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55931ae6d980 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55931ae6dc58 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55931ae6db08 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55931ae6db80 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55931ae6dd58 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55931ae6ddf8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55931ae6dec0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55931ae6df50 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55931ae6e180 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae6df30 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55931ae6df10 <col:36> 'int' EnumConstant 0x55931ae6dec0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55931ae6dfa0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55931ae6dff0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55931ae6e040 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55931ae6e090 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55931ae6e0e0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55931ae6e130 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55931ae6e268 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55931ae6e1a8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55931ae6e330 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55931ae6e3f0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55931ae6e4b0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55931ae6e570 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55931ae6e688 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55931ae6e750 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55931ae6e8d0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55931ae6e800 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55931ae6e9f8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55931ae6ebf8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55931ae6eaa8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55931ae6eb28 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55931ae7c548 <col:54, line:127:5>
|   |-ParenExpr 0x55931ae7c3f8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55931ae7c3c8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55931ae7c0b8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55931ae7c090 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55931ae7c078 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55931ae7c060 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55931ae7c030 <col:31> 'Router *' lvalue ->_router 0x55931ae79f10
|   |   |         `-CXXThisExpr 0x55931ae7c020 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55931ae7c118 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55931ae7c0f8 <col:48> 'int' 0
|   |   `-CallExpr 0x55931ae7c328 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55931ae7c310 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55931ae7c2f0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55931a9a4eb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55931ae7c368 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae7c188 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55931ae7c380 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae7c1a8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55931ae7c398 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55931ae7c1e0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55931ae7c3b0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55931ae7c2d8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55931ae7c2c0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55931ae7c278 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55931ae7c490 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55931ae7c428 <col:9> 'Router *' lvalue ->_router 0x55931ae79f10
|   | | `-CXXThisExpr 0x55931ae7c418 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55931ae7c478 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55931ae7c458 <col:19> 'Router *' lvalue ParmVar 0x55931ae6eaa8 'r' 'Router *'
|   `-BinaryOperator 0x55931ae7c528 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55931ae7c4c0 <col:9> 'int' lvalue ->_eindex 0x55931ae79f78
|     | `-CXXThisExpr 0x55931ae7c4b0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55931ae7c510 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55931ae7c4f0 <col:19> 'int' lvalue ParmVar 0x55931ae6eb28 'eindex' 'int'
|-CXXMethodDecl 0x55931ae6ed80 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55931ae6ecb8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55931ae6ee50 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55931ae6ef18 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55931ae6efb8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55931ae6f208 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55931ae6f080 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55931ae6f100 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55931ae6f2b8 <col:20>
| `-OptimizeNoneAttr 0x55931ae6f310 <col:30>
|-CXXMethodDecl 0x55931ae6f418 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55931ae6f350 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55931ae6f4c0 <col:20>
| `-OptimizeNoneAttr 0x55931ae6f518 <col:30>
|-CXXMethodDecl 0x55931ae6f5e8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55931ae6f558 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55931ae6f690 <col:20>
| `-OptimizeNoneAttr 0x55931ae6f6e8 <col:30>
|-CXXMethodDecl 0x55931ae6f878 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55931ae6f720 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55931ae6f7a0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55931ae6fa08 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55931ae6f940 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55931ae6fb58 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55931ae6fac8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55931ae6fca8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55931ae6fc18 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55931ae6fdf8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55931ae6fd68 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55931ae700b8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55931ae6feb0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55931ae6ff30 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55931ae6ffd8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55931ae70190 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55931ae70250 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55931ae70520 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55931ae703d0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55931ae70448 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55931ae70648 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55931ae70820 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55931ae70700 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55931ae70780 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55931ae70a08 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55931ae708e8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55931ae70968 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55931ae70d78 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55931ae70ac8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55931ae70b40 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55931ae70bc0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55931ae7bb30 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55931ae7bb10 <col:106> 'int' 0
| `-ParmVarDecl 0x55931ae70c38 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55931ae7bb68 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55931ae7bb48 <col:126> 'int' 0
|-CXXMethodDecl 0x55931ae71118 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55931ae70e48 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55931ae70ee0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55931ae70f60 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55931ae70fd8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55931ae7bba0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55931ae7bb80 <col:114> 'int' 0
|-CXXMethodDecl 0x55931ae714a8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55931ae711f0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55931ae71268 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55931ae712e8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55931ae7bbb8 <col:96> 'int' 0
| `-ParmVarDecl 0x55931ae71360 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55931ae7bbf8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55931ae7bbd8 <col:116> 'int' 0
|-CXXMethodDecl 0x55931ae71828 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55931ae71578 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55931ae715f0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55931ae71670 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55931ae7bc30 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55931ae7bc10 <col:109> 'int' 0
| `-ParmVarDecl 0x55931ae716e8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55931ae7bc68 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55931ae7bc48 <col:129> 'int' 0
|-CXXMethodDecl 0x55931ae71ba8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55931ae718f8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55931ae71970 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55931ae719f0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55931ae71a68 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55931ae7bca0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55931ae7bc80 <col:117> 'int' 0
|-CXXMethodDecl 0x55931ae71f38 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55931ae71c80 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55931ae71cf8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55931ae71d78 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55931ae7bcb8 <col:99> 'int' 0
| `-ParmVarDecl 0x55931ae71df0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55931ae7bcf8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55931ae7bcd8 <col:119> 'int' 0
|-CXXMethodDecl 0x55931ae72358 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55931ae72008 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55931ae72088 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55931ae72100 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55931ae72180 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55931ae7bd30 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55931ae7bd10 <col:108> 'int' 0
| `-ParmVarDecl 0x55931ae72200 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55931ae7bd68 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55931ae7bd48 <col:141> 'int' 0
|-CXXMethodDecl 0x55931ae72778 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55931ae72430 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55931ae724b0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55931ae72528 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55931ae725a8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55931ae72628 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55931ae7bd80 <col:121> 'int' 0
|-CXXMethodDecl 0x55931ae72ba8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55931ae72858 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55931ae728d8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55931ae72950 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55931ae729d0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55931ae7bda0 <col:98> 'int' 0
| `-ParmVarDecl 0x55931ae72a50 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55931ae7bdc0 <col:123> 'int' 0
|-CXXMethodDecl 0x55931ae72e70 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55931ae72c80 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55931ae72d00 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55931ae72d80 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55931ae7bde0 <col:80> 'int' 0
|-EnumDecl 0x55931ae72f28 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55931ae73030 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55931ae732c0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae73010 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55931ae72ff0 <col:42> 'int' 1
| |-EnumConstantDecl 0x55931ae730c0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55931ae732d8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae730a0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55931ae73080 <col:40> 'int' 2
| |-EnumConstantDecl 0x55931ae73150 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55931ae732f0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae73130 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55931ae73110 <col:44> 'int' 4
| |-EnumConstantDecl 0x55931ae731e0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55931ae73308 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae731c0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55931ae731a0 <col:36> 'int' 7
| `-EnumConstantDecl 0x55931ae73270 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55931ae73320 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55931ae73250 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55931ae73230 <col:34> 'int' 6
|-CXXMethodDecl 0x55931ae735d8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55931ae73348 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55931ae733e8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55931ae73468 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55931ae734e0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55931ae7be98 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55931ae7be80 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55931ae7be68 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55931ae7be48 <col:98, col:105> 'String' (CXXTemporary 0x55931ae7be48)
|           `-CXXTemporaryObjectExpr 0x55931ae7be10 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55931ae73878 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55931ae736a8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55931ae73720 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55931ae73798 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55931ae7bf48 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55931ae7bf30 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55931ae7bf18 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55931ae7bef8 <col:94, col:101> 'String' (CXXTemporary 0x55931ae7bef8)
| |         `-CXXTemporaryObjectExpr 0x55931ae7bec0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55931ae7c730 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55931ae7c6a8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55931ae7c678 <col:9> '<bound member function type>' ->add_task_handlers 0x55931ae735d8
|     | `-CXXThisExpr 0x55931ae7c668 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55931ae7c6e8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55931ae7c5e8 <col:27> 'Task *' lvalue ParmVar 0x55931ae736a8 'task' 'Task *'
|     |-ImplicitCastExpr 0x55931ae7c700 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55931ae7c608 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55931ae73720 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55931ae7c718 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55931ae7c628 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55931ae73270 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55931ae7c648 <col:62> 'const String' lvalue ParmVar 0x55931ae73798 'prefix' 'const String &'
|-CXXMethodDecl 0x55931ae73a88 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55931ae73940 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55931ae739b8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55931ae7bff8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55931ae7bfe0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55931ae7bfc8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55931ae7bfa8 <col:70, col:77> 'String' (CXXTemporary 0x55931ae7bfa8)
| |         `-CXXTemporaryObjectExpr 0x55931ae7bf70 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55931ae7c908 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55931ae7c880 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55931ae7c850 <col:9> '<bound member function type>' ->add_task_handlers 0x55931ae735d8
|     | `-CXXThisExpr 0x55931ae7c840 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55931ae7c8c0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55931ae7c7c0 <col:27> 'Task *' lvalue ParmVar 0x55931ae73940 'task' 'Task *'
|     |-ImplicitCastExpr 0x55931ae7c8d8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55931ae7c7e0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55931ae7c8f0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55931ae7c800 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55931ae73270 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55931ae7c820 <col:57> 'const String' lvalue ParmVar 0x55931ae739b8 'prefix' 'const String &'
|-CXXMethodDecl 0x55931ae73d68 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55931ae73b50 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55931ae73bd0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55931ae73c48 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55931ae74018 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55931ae73e38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55931ae73eb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55931ae73f38 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55931ae74308 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55931ae740e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55931ae74168 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55931ae741e0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55931ae745b8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55931ae743d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55931ae74458 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55931ae744d8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55931ae74868 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55931ae74688 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55931ae74708 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55931ae74788 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55931ae74b18 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55931ae74938 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55931ae749b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55931ae74a30 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55931ae74dc8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55931ae74be8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55931ae74c68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55931ae74ce8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55931ae750d8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55931ae74ef0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55931ae74f70 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55931ae74ff0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55931ae753b8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55931ae751a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55931ae75228 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55931ae752d0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55931ae75698 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55931ae75488 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55931ae75508 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55931ae755b0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55931ae75900 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55931ae75768 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55931ae757e8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55931ae75860 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55931ae75ba8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55931ae759d0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55931ae75a50 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55931ae75ac8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55931ae75e58 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55931ae75c78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55931ae75cf8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55931ae75d78 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55931ae76108 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55931ae75f28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55931ae75fa8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55931ae76020 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55931ae763b8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55931ae761d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55931ae76258 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55931ae762d0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55931ae76688 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55931ae76488 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55931ae76508 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55931ae765a8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55931ae769b8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55931ae76758 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55931ae767d8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55931ae76850 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55931ae768c8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55931ae7c010 <col:93> 'bool' false
|-CXXMethodDecl 0x55931ae76ba0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55931ae76a88 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55931ae76b08 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55931ae76d78 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55931ae76c60 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55931ae76ce0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55931ae77058 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55931ae76e38 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55931ae76eb0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55931ae76f30 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55931ae76fa8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55931ae77348 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55931ae77128 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55931ae771a0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55931ae77220 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55931ae77298 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55931ae77580 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55931ae77420 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55931ae774a0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55931ae77768 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55931ae77648 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55931ae776c8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55931ae77818 prev 0x55931ae6efb8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55931ae77910 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55931ae779a0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55931ae77a18 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55931ae77ad8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55931ae77ba0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55931ae77d18 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55931ae77c50 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55931ae77dc0 <col:24>
| | `-OptimizeNoneAttr 0x55931ae77e18 <col:34>
| |-CXXMethodDecl 0x55931ae77e60 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55931ae78118 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55931ae77f10 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55931ae77f88 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55931ae78008 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55931ae781d0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55931ae78208 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55931ae78270 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55931ae782f8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55931ae78618 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55931ae783b0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55931ae78428 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55931ae784a0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55931ae78520 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55931ae78730 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55931ae800a8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55931ae800a8
| | `-ParmVarDecl 0x55931ae801b8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55931ae80258 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55931ae80258
| | `-ParmVarDecl 0x55931ae80368 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55931af880b0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55931ae787a8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55931ae78848 <col:38> "" ""
|-CXXMethodDecl 0x55931ae788d8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55931ae78978 <col:44> "" ""
|-AccessSpecDecl 0x55931ae789e8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55931ae78a10 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55931ae78b10 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55931ae78b60 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55931ae78af0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55931ae78ad0 <col:27> 'int' 4
|-FieldDecl 0x55931ae78c18 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55931ae78dc8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55931ae78e80 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55931ae79f10 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55931ae79f78 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55931ae7a0c8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55931ae7a008 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55931ae7a278 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55931ae7a188 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55931ae7a458 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55931ae7a338 <col:20> col:23 'int'
| `-ParmVarDecl 0x55931ae7a3b8 <col:25> col:28 'int'
|-CXXMethodDecl 0x55931ae7a700 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55931ae7a520 <col:23> col:26 'int'
| |-ParmVarDecl 0x55931ae7a5a0 <col:28> col:31 'int'
| `-ParmVarDecl 0x55931ae7a618 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55931ae7a7b8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55931ae7a880 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55931ae7a8d0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55931ae7a920 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55931ae7ab00 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55931ae7a9b0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55931ae7aa28 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55931ae7ada8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55931ae7abc8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55931ae7ac48 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55931ae7acc0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55931ae7afc8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55931ae7ae78 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55931ae7aef8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55931ae7b300 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55931ae7b088 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55931ae7b108 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55931ae7b180 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55931ae7b200 <col:57> col:60 'int'
|-CXXMethodDecl 0x55931ae7b4e8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55931ae7b3d0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55931ae7b450 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55931ae7b638 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55931ae7b5a8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55931ae7b9b8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55931ae7b6f8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55931ae7b778 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55931ae7b7f0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55931ae7b870 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55931ae7bad0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class Reframe
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _foff
       112 |   int _flen
       116 |   _Bool _ntoh
       120 |   int _mul
       124 |   int _align
       128 |   int _add
       136 |   class WritablePacket * _header
       144 |   class Packet * _qhead
       152 |   class Packet * _qtail
       160 |   int _have
       164 |   int _need
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55931ac292e0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55931ac293f8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55931ac29488 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55931ac29558 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55931ac29640 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55931ac29858 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55931ac29700 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55931ac29a08 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55931ac29910 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55931ac29b50 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55931ac29ac0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55931ac29c98 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55931ac29c08 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55931ac29de0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55931ac29d50 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55931ac29ea8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55931ac29ff0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55931ac29f60 <col:28> col:31 'int'
|-CXXMethodDecl 0x55931ac2a0b8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55931ac2a200 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55931ac2a170 <col:28> col:31 'int'
|-CXXMethodDecl 0x55931ac2a378 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55931ac2a2b8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55931ac2a4c0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55931ac2a430 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55931ac2a588 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55931ac2a748 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55931ac2a638 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55931ac2a6b0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55931ac2a998 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55931ac2a808 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55931ac2a880 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55931ac2aa48 <col:86> "" ""
|-CXXMethodDecl 0x55931ac2acb8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55931ac2ab28 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55931ac2aba0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55931ac2ae68 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55931ac2ad78 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55931ac2b018 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55931ac2af20 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55931ac2b2e8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55931ac2b0d0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55931ac2b148 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55931ac2b1c0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55931ac2b5c8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55931ac2b3b0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55931ac2b428 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55931ac2b4a0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55931ac2b680 <col:115> "" ""
|-AccessSpecDecl 0x55931ac2b6f0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55931ac2b728 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55931ac2bc30 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55931ac2bc30
| `-ParmVarDecl 0x55931ac2bd38 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55931ac2bdd8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55931ac2bdd8
| `-ParmVarDecl 0x55931ac2bee8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55931ac61518 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55931ae54320 <col:7>
|-CXXConstructorDecl 0x55931ac615f0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55931ac615f0
| `-ParmVarDecl 0x55931ac61708 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55931ac61778 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55931ac61778
| `-ParmVarDecl 0x55931ac61888 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55931ae56d20 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55931ae42ec8 prev 0x55931ae380d0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55931ae42fc0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55931ae430b0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55931ae431d8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55931ae43358 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55931ae434d8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55931ae43658 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55931ae54488 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55931ae54cf8 <col:11>
|-CXXDestructorDecl 0x55931ae54560 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55931ae54698 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55931ae54698
| `-ParmVarDecl 0x55931ae547a8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55931ae54848 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55931ae54848
| `-ParmVarDecl 0x55931ae54958 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55931ae57718 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55931ae57828 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55931ae57aa8 <col:11>
|   `-ReturnStmt 0x55931ae57a98 <col:11>
|     `-UnaryOperator 0x55931ae57a80 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55931ae57a70 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55931ae57898 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55931ae57898
  `-ParmVarDecl 0x55931ae579a8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55931ae436c0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55931ae437d8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55931ae43878 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55931ae438e0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55931ae43948 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55931ae439b0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55931ae43a10 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55931ae43ad0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55931ae43b30 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55931ae43b90 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55931ae54398 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55931ae43878 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55931ae54d08 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55931ae54d60 <col:12>
|-CXXConstructorDecl 0x55931ae549c8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55931ae549c8
| `-ParmVarDecl 0x55931ae54ad8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55931ae54b78 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55931ae54b78
| `-ParmVarDecl 0x55931ae54c88 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55931ae56e00 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55931ae317e0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55931ae318f8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55931ae31988 <col:16, col:22> col:16 public
|-EnumDecl 0x55931ae319b0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55931ae31ab0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55931ae31b90 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae31a90 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55931ae31a70 <col:21> 'int' 28
| `-EnumConstantDecl 0x55931ae31b40 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55931ae31ba8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55931ae31b20 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55931ae31b00 <col:22> 'int' 64
|-CXXMethodDecl 0x55931ae31ee8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55931ae31bd0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55931ae31c50 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55931ae31cc8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55931ae31d40 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55931ae31fa8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55931ae321a8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55931ae32020 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55931ae32098 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55931ae32258 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55931ae323b8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55931ae322c8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55931ae32460 <col:72> warn_unused_result ""
|-TypedefDecl 0x55931ae327c0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55931ae32750 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55931ae326f0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55931ae326b0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55931a9074e0 'void'
|       |-PointerType 0x55931abb1b80 'unsigned char *'
|       | `-BuiltinType 0x55931a9075e0 'unsigned char'
|       |-TypedefType 0x55931a9ae150 'size_t' sugar
|       | |-Typedef 0x55931a977be0 'size_t'
|       | `-BuiltinType 0x55931a907640 'unsigned long'
|       `-PointerType 0x55931a907ce0 'void *'
|         `-BuiltinType 0x55931a9074e0 'void'
|-CXXMethodDecl 0x55931ae32c38 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55931ae32830 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55931ae328a8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55931ae32940 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55931ae329c0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55931ae4d330 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55931ae4d318 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55931ae4d2e0 <col:58> 'int' 0
| |-ParmVarDecl 0x55931ae32a40 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55931ae4d358 <col:76> 'int' 0
| |-ParmVarDecl 0x55931ae32ac0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55931ae4d378 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55931ae32d08 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55931ae32d88 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55931ae32e48 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55931ae32ee8 <col:20>
| `-OptimizeNoneAttr 0x55931ae32f40 <col:30>
|-CXXMethodDecl 0x55931ae32fb8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55931ae33058 <col:20>
| `-OptimizeNoneAttr 0x55931ae330b0 <col:30>
|-CXXMethodDecl 0x55931ae33128 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55931ae331c8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55931ae33278 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55931ae33318 <col:20>
| |-OptimizeNoneAttr 0x55931ae33370 <col:30>
| `-WarnUnusedResultAttr 0x55931ae33398 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55931ae333f0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55931ae33490 <col:20>
| `-OptimizeNoneAttr 0x55931ae334e8 <col:30>
|-CXXMethodDecl 0x55931ae33538 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55931ae335d8 <col:20>
| `-OptimizeNoneAttr 0x55931ae33630 <col:30>
|-CXXMethodDecl 0x55931ae33678 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55931ae33718 <col:20>
| `-OptimizeNoneAttr 0x55931ae33770 <col:30>
|-CXXMethodDecl 0x55931ae337b8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55931ae33878 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55931ae33940 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55931ae33a08 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55931ae33ac8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55931ae33be8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55931ae4d440 <col:54, line:99:5>
|   `-ReturnStmt 0x55931ae4d430 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55931ae4d418 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55931ae4d3e8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55931ae43ec8
|         `-CXXThisExpr 0x55931ae4d3d8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55931ae33d88 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55931ae33c98 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55931ae4d4f0 <col:67, line:103:5>
|   `-BinaryOperator 0x55931ae4d4d0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55931ae4d468 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55931ae43ec8
|     | `-CXXThisExpr 0x55931ae4d458 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55931ae4d4b8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55931ae4d498 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55931ae33c98 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55931ae33e80 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55931ae4d570 <col:33, line:107:5>
|   `-ReturnStmt 0x55931ae4d560 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55931ae4d548 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55931ae4d518 <col:16> 'void *' lvalue ->_destructor_argument 0x55931ae43f30
|         `-CXXThisExpr 0x55931ae4d508 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55931ae33f40 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55931ae4dba0 <col:25, line:113:5>
|   |-ParenExpr 0x55931ae4d8e8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55931ae4d8b8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55931ae4d628 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55931ae4d600 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55931ae4d5c8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55931ae4d598 <col:24> '<bound member function type>' ->shared 0x55931ae32fb8
|   |   |       `-ImplicitCastExpr 0x55931ae4d5e8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55931ae4d588 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55931ae4d688 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55931ae4d668 <col:42> 'int' 0
|   |   `-CallExpr 0x55931ae4d818 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55931ae4d800 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55931ae4d7e0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55931a9a4eb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55931ae4d858 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae4d6f8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55931ae4d870 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae4d720 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55931ae4d888 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55931ae4d758 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55931ae4d8a0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55931ae4d7c8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55931ae4d7b0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55931ae4d778 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55931ae4dae8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55931ae4d918 <col:2> 'unsigned char *' lvalue ->_head 0x55931ae43cd0
|   | | `-CXXThisExpr 0x55931ae4d908 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55931ae4dad0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55931ae4dab0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55931ae4d958 <col:10> 'unsigned char *' lvalue ->_data 0x55931ae43d38
|   |     | `-CXXThisExpr 0x55931ae4d948 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55931ae4da98 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55931ae4da78 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55931ae4d998 <col:18> 'unsigned char *' lvalue ->_tail 0x55931ae43da0
|   |         | `-CXXThisExpr 0x55931ae4d988 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55931ae4da60 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55931ae4da40 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55931ae4d9d8 <col:26> 'unsigned char *' lvalue ->_end 0x55931ae43e08
|   |             | `-CXXThisExpr 0x55931ae4d9c8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55931ae4da28 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55931ae4da08 <col:33> 'int' 0
|   `-BinaryOperator 0x55931ae4db80 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55931ae4db18 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55931ae43ec8
|     | `-CXXThisExpr 0x55931ae4db08 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55931ae4db68 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55931ae4db48 <col:16> 'int' 0
|-CXXMethodDecl 0x55931ae34080 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55931ae33ff0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55931ae34128 <col:20>
| |-OptimizeNoneAttr 0x55931ae34180 <col:30>
| `-WarnUnusedResultAttr 0x55931ae341a8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55931ae34278 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55931ae341e8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55931ae34320 <col:20>
| |-OptimizeNoneAttr 0x55931ae34378 <col:30>
| `-WarnUnusedResultAttr 0x55931ae343a0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55931ae344d8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55931ae343e0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55931ae34580 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55931ae34680 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55931ae345f0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55931ae34728 <col:20>
| `-OptimizeNoneAttr 0x55931ae34780 <col:30>
|-CXXMethodDecl 0x55931ae34848 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55931ae347b8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55931ae348f0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55931ae349f0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55931ae34960 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55931ae34a98 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55931ae34b98 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55931ae34b08 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55931ae34c40 <col:20>
| `-OptimizeNoneAttr 0x55931ae34c98 <col:30>
|-CXXMethodDecl 0x55931ae34e28 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55931ae34cd8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55931ae34d50 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55931ae4d398 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55931ae34ed8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55931ae350d8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55931ae34f50 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55931ae34fc8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55931ae352e8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55931ae35198 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55931ae35210 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55931ae354f8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55931ae353a8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55931ae35428 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55931ae4d3a8 <col:39> 'int' 0
|-CXXMethodDecl 0x55931ae355c8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55931ae35690 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55931ae35758 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55931ae35818 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55931ae358e0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55931ae35a28 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55931ae35998 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55931ae35bf8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55931ae35ae8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55931ae35b60 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55931ae35cc8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55931ae35d88 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55931ae35e28 <col:20>
| `-OptimizeNoneAttr 0x55931ae35e80 <col:30>
|-CXXMethodDecl 0x55931ae35ed0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55931ae35f70 <col:20>
| `-OptimizeNoneAttr 0x55931ae35fc8 <col:30>
|-CXXMethodDecl 0x55931ae36018 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55931ae360d8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55931ae361a0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55931ae36240 <col:20>
| `-OptimizeNoneAttr 0x55931ae36298 <col:30>
|-CXXMethodDecl 0x55931ae363e8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55931ae362d8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55931ae36350 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55931ae36538 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55931ae364a8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55931ae36610 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55931ae366d0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55931ae36770 <col:20>
| `-OptimizeNoneAttr 0x55931ae367c8 <col:30>
|-CXXMethodDecl 0x55931ae36818 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55931ae368b8 <col:20>
| `-OptimizeNoneAttr 0x55931ae36910 <col:30>
|-CXXMethodDecl 0x55931ae36960 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55931ae36a28 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55931ae36ac8 <col:20>
| `-OptimizeNoneAttr 0x55931ae36b20 <col:30>
|-CXXMethodDecl 0x55931ae36b68 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55931ae36c88 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55931ae36df8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55931ae36d38 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55931ae36ee8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55931ae36f88 <col:20>
| `-OptimizeNoneAttr 0x55931ae36fe0 <col:30>
|-CXXMethodDecl 0x55931ae37030 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55931ae370f0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55931ae37328 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55931ae371a0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55931ae37218 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55931ae373d8 <col:20>
| `-OptimizeNoneAttr 0x55931ae37430 <col:30>
|-CXXMethodDecl 0x55931ae374d8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55931ae37578 <col:20>
| `-OptimizeNoneAttr 0x55931ae375d0 <col:30>
|-CXXMethodDecl 0x55931ae37620 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55931ae376c0 <col:20>
| `-OptimizeNoneAttr 0x55931ae37718 <col:30>
|-CXXMethodDecl 0x55931ae37760 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55931ae37800 <col:20>
| `-OptimizeNoneAttr 0x55931ae37858 <col:30>
|-CXXMethodDecl 0x55931ae37958 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55931ae37890 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55931ae37a00 <col:20>
| `-OptimizeNoneAttr 0x55931ae37a58 <col:30>
|-CXXMethodDecl 0x55931ae37c18 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55931ae37a90 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55931ae37b08 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55931ae37cc8 <col:20>
| `-OptimizeNoneAttr 0x55931ae37d20 <col:30>
|-CXXMethodDecl 0x55931ae37dc8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55931ae37ee8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55931ae38008 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55931ae380a8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55931ae380d0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55931ae381f8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55931ae38298 <col:20>
| `-OptimizeNoneAttr 0x55931ae382f0 <col:30>
|-CXXMethodDecl 0x55931ae38398 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55931ae38438 <col:20>
| `-OptimizeNoneAttr 0x55931ae38490 <col:30>
|-AccessSpecDecl 0x55931ae384b8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55931ae384e0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55931ae385e0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55931ae38630 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55931ae385c0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55931ae385a0 <col:14> 'int' 48
|-CXXMethodDecl 0x55931ae38698 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55931ae38738 <col:20>
| `-OptimizeNoneAttr 0x55931ae38790 <col:30>
|-CXXMethodDecl 0x55931ae38808 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55931ae388a8 <col:20>
| `-OptimizeNoneAttr 0x55931ae38900 <col:30>
|-CXXMethodDecl 0x55931ae389c8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55931ae38938 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55931ae38b68 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55931ae38d08 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55931ae38c18 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55931ae38db0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55931ae38eb0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55931ae39260 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae38e90 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55931ae38e70 <col:9> 'int' 0
| |-EnumConstantDecl 0x55931ae38f40 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55931ae39278 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae38f20 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55931ae38f00 <col:14> 'int' 1
| |-EnumConstantDecl 0x55931ae38fd0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55931ae39290 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae38fb0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55931ae38f90 <col:14> 'int' 2
| |-EnumConstantDecl 0x55931ae39060 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55931ae392a8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae39040 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55931ae39020 <col:14> 'int' 3
| |-EnumConstantDecl 0x55931ae390f0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55931ae392c0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae390d0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55931ae390b0 <col:13> 'int' 4
| |-EnumConstantDecl 0x55931ae39180 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55931ae392d8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae39160 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55931ae39140 <col:13> 'int' 5
| `-EnumConstantDecl 0x55931ae39210 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55931ae392f0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55931ae391f0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55931ae391d0 <col:14> 'int' 6
|-CXXMethodDecl 0x55931ae39358 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55931ae393f8 <col:20>
| `-OptimizeNoneAttr 0x55931ae39450 <col:30>
|-CXXMethodDecl 0x55931ae39548 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55931ae39488 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55931ae395f0 <col:20>
| `-OptimizeNoneAttr 0x55931ae39648 <col:30>
|-CXXMethodDecl 0x55931ae396b8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55931ae397e0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55931ae39958 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55931ae39890 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55931ae39a20 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55931ae39ae8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55931ae39c28 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55931ae39b98 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55931ae39cd0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55931ae39dd0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55931ae39fd0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae39db0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55931ae39d90 <col:23> 'int' 0
| |-EnumConstantDecl 0x55931ae39e60 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55931ae39fe8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae39e40 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55931ae39e20 <col:45> 'int' 4
| |-EnumConstantDecl 0x55931ae39ef0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55931ae3a000 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae39ed0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55931ae39eb0 <col:24> 'int' 0
| `-EnumConstantDecl 0x55931ae39f80 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55931ae3a018 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55931ae39f60 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55931ae39f40 <col:47> 'int' 16
|-CXXMethodDecl 0x55931ae3a078 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55931ae3a1e8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55931ae3a128 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55931ae3a290 <col:20>
| `-OptimizeNoneAttr 0x55931ae3a2e8 <col:30>
|-CXXMethodDecl 0x55931ae3a338 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55931ae4dcc0 <col:18, col:36>
|   `-ReturnStmt 0x55931ae4dcb0 <col:20, col:33>
|     `-ImplicitCastExpr 0x55931ae4dc98 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55931ae4dc78 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55931ae4dc48 <col:27> '<bound member function type>' ->xanno 0x55931ae38398
|           `-CXXThisExpr 0x55931ae4dc38 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55931ae3a430 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55931ae4ddd0 <col:30, col:48>
|   `-ReturnStmt 0x55931ae4ddc0 <col:32, col:45>
|     `-ImplicitCastExpr 0x55931ae4dda8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55931ae4dd88 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55931ae4dd58 <col:39> '<bound member function type>' ->xanno 0x55931ae381f8
|           `-CXXThisExpr 0x55931ae4dd48 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55931ae3a518 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55931ae4df68 <col:24, col:50>
|   `-ReturnStmt 0x55931ae4df58 <col:26, col:47>
|     `-UnaryOperator 0x55931ae4df40 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55931ae4df20 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55931ae4df08 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55931ae4deb8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55931ae431d8
|         |   `-CXXMemberCallExpr 0x55931ae4de98 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55931ae4de68 <col:34> '<bound member function type>' ->xanno 0x55931ae38398
|         |       `-CXXThisExpr 0x55931ae4de58 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55931ae4dee8 <col:46> 'int' 0
|-CXXMethodDecl 0x55931ae3a620 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55931ae4e138 <col:36, col:62>
|   `-ReturnStmt 0x55931ae4e128 <col:38, col:59>
|     `-UnaryOperator 0x55931ae4e110 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55931ae4e0f0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55931ae4e0d8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55931ae4e050 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55931ae431d8
|         |   `-CXXMemberCallExpr 0x55931ae4e030 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55931ae4e000 <col:46> '<bound member function type>' ->xanno 0x55931ae381f8
|         |       `-CXXThisExpr 0x55931ae4dff0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55931ae4e080 <col:58> 'int' 0
|-CXXMethodDecl 0x55931ae3a738 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55931ae4e2d0 <col:26, col:53>
|   `-ReturnStmt 0x55931ae4e2c0 <col:28, col:50>
|     `-UnaryOperator 0x55931ae4e2a8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55931ae4e288 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55931ae4e270 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55931ae4e220 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55931ae434d8
|         |   `-CXXMemberCallExpr 0x55931ae4e200 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55931ae4e1d0 <col:36> '<bound member function type>' ->xanno 0x55931ae38398
|         |       `-CXXThisExpr 0x55931ae4e1c0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55931ae4e250 <col:49> 'int' 0
|-CXXMethodDecl 0x55931ae3a858 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55931ae4e4a8 <col:38, col:65>
|   `-ReturnStmt 0x55931ae4e498 <col:40, col:62>
|     `-UnaryOperator 0x55931ae4e480 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55931ae4e460 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55931ae4e448 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55931ae4e3b8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55931ae434d8
|         |   `-CXXMemberCallExpr 0x55931ae4e398 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55931ae4e368 <col:48> '<bound member function type>' ->xanno 0x55931ae381f8
|         |       `-CXXThisExpr 0x55931ae4e358 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55931ae4e3e8 <col:61> 'int' 0
|-CXXMethodDecl 0x55931ae3aa08 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55931ae3a910 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55931ae4eb78 <col:34, line:463:5>
|   |-ParenExpr 0x55931ae4e9c0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55931ae4e990 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55931ae4e5f8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55931ae4e5c8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55931ae4e518 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55931ae4e500 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55931ae4e4c0 <col:23> 'int' lvalue ParmVar 0x55931ae3a910 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55931ae4e4e0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55931ae4e5a8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55931ae4e578 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55931ae4e538 <col:33> 'int' lvalue ParmVar 0x55931ae3a910 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55931ae4e590 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55931ae4e558 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55931ae385e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55931ae4e658 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55931ae4e638 <col:56> 'int' 0
|   |   `-CallExpr 0x55931ae4e8f0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55931ae4e8d8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55931ae4e8b8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55931a9a4eb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55931ae4e930 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae4e748 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55931ae4e948 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae4e778 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55931ae4e960 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55931ae4e7b0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55931ae4e978 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55931ae4e8a0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55931ae4e888 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55931ae4e848 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55931ae4eb68 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55931ae4eb50 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55931ae4eb30 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55931ae4eb00 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55931ae4eab0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55931ae431d8
|         |   `-CXXMemberCallExpr 0x55931ae4ea90 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55931ae4ea60 <col:9> '<bound member function type>' ->xanno 0x55931ae381f8
|         |       `-CXXThisExpr 0x55931ae4ea50 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55931ae4eb18 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55931ae4eae0 <col:21> 'int' lvalue ParmVar 0x55931ae3a910 'i' 'int'
|-CXXMethodDecl 0x55931ae3ac58 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55931ae3aac8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55931ae3ab40 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55931ae4f208 <col:40, line:472:5>
|   |-ParenExpr 0x55931ae4f020 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55931ae4eff0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55931ae4ecd0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55931ae4eca0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55931ae4ebf0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55931ae4ebd8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55931ae4eb98 <col:23> 'int' lvalue ParmVar 0x55931ae3aac8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55931ae4ebb8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55931ae4ec80 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55931ae4ec50 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55931ae4ec10 <col:33> 'int' lvalue ParmVar 0x55931ae3aac8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55931ae4ec68 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55931ae4ec30 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55931ae385e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55931ae4ed30 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55931ae4ed10 <col:56> 'int' 0
|   |   `-CallExpr 0x55931ae4ef50 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55931ae4ef38 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55931ae4ef18 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55931a9a4eb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55931ae4ef90 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae4eda0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55931ae4efa8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae4edd0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55931ae4efc0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55931ae4ee08 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55931ae4efd8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55931ae4ef00 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55931ae4eee8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55931ae4eea8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55931ae4f1e8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55931ae4f190 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55931ae4f160 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55931ae4f110 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55931ae431d8
|     | |   `-CXXMemberCallExpr 0x55931ae4f0f0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55931ae4f0c0 <col:2> '<bound member function type>' ->xanno 0x55931ae38398
|     | |       `-CXXThisExpr 0x55931ae4f0b0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55931ae4f178 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55931ae4f140 <col:14> 'int' lvalue ParmVar 0x55931ae3aac8 'i' 'int'
|     `-ImplicitCastExpr 0x55931ae4f1d0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55931ae4f1b0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55931ae3ab40 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55931ae3ae18 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55931ae3ad20 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55931ae4f988 <col:36, line:485:5>
|   |-ParenExpr 0x55931ae4f6f0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55931ae4f6c0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55931ae4f3a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55931ae4f370 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55931ae4f280 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55931ae4f268 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55931ae4f228 <col:23> 'int' lvalue ParmVar 0x55931ae3ad20 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55931ae4f248 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55931ae4f350 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55931ae4f338 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55931ae4f2a0 <col:33> 'int' lvalue ParmVar 0x55931ae3ad20 'i' 'int'
|   |   |     `-BinaryOperator 0x55931ae4f318 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55931ae4f300 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55931ae4f2c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55931ae385e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55931ae4f2e0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55931ae4f400 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55931ae4f3e0 <col:60> 'int' 0
|   |   `-CallExpr 0x55931ae4f620 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55931ae4f608 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55931ae4f5e8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55931a9a4eb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55931ae4f660 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae4f470 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55931ae4f678 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae4f4a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55931ae4f690 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55931ae4f4e0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55931ae4f6a8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55931ae4f5d0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55931ae4f5b8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55931ae4f578 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55931ae4f978 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55931ae4f960 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55931ae4f948 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55931ae4f918 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55931ae4f8b8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55931ae4f888 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55931ae4f800 <col:61, col:70> 'char const[48]' lvalue ->c 0x55931ae430b0
|             |   `-CXXMemberCallExpr 0x55931ae4f7e0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55931ae4f7b0 <col:61> '<bound member function type>' ->xanno 0x55931ae381f8
|             |       `-CXXThisExpr 0x55931ae4f7a0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55931ae4f8a0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55931ae4f830 <col:74> 'int' lvalue ParmVar 0x55931ae3ad20 'i' 'int'
|-CXXMethodDecl 0x55931ae3b068 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55931ae3aed8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55931ae3af50 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55931ae500d8 <col:42, line:500:5>
|   |-ParenExpr 0x55931ae4fe70 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55931ae4fe40 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55931ae4fb20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55931ae4faf0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55931ae4fa00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55931ae4f9e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55931ae4f9a8 <col:23> 'int' lvalue ParmVar 0x55931ae3aed8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55931ae4f9c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55931ae4fad0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55931ae4fab8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55931ae4fa20 <col:33> 'int' lvalue ParmVar 0x55931ae3aed8 'i' 'int'
|   |   |     `-BinaryOperator 0x55931ae4fa98 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55931ae4fa80 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55931ae4fa40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55931ae385e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55931ae4fa60 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55931ae4fb80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55931ae4fb60 <col:60> 'int' 0
|   |   `-CallExpr 0x55931ae4fda0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55931ae4fd88 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55931ae4fd68 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55931a9a4eb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55931ae4fde0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae4fbf0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55931ae4fdf8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae4fc28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55931ae4fe10 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55931ae4fc60 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55931ae4fe28 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55931ae4fd50 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55931ae4fd38 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55931ae4fcf8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55931ae500b8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55931ae50068 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55931ae50038 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55931ae4ffe0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55931ae4ffb0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55931ae4ff60 <col:48, col:57> 'char [48]' lvalue ->c 0x55931ae430b0
|     |     |   `-CXXMemberCallExpr 0x55931ae4ff40 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55931ae4ff10 <col:48> '<bound member function type>' ->xanno 0x55931ae38398
|     |     |       `-CXXThisExpr 0x55931ae4ff00 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55931ae4ffc8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55931ae4ff90 <col:61> 'int' lvalue ParmVar 0x55931ae3aed8 'i' 'int'
|     `-ImplicitCastExpr 0x55931ae500a0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55931ae50080 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55931ae3af50 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55931ae3b228 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55931ae3b130 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55931ae50838 <col:35, line:513:5>
|   |-ParenExpr 0x55931ae50548 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55931ae50518 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55931ae50270 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55931ae50240 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55931ae50150 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55931ae50138 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55931ae500f8 <col:23> 'int' lvalue ParmVar 0x55931ae3b130 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55931ae50118 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55931ae50220 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55931ae50208 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55931ae50170 <col:33> 'int' lvalue ParmVar 0x55931ae3b130 'i' 'int'
|   |   |     `-BinaryOperator 0x55931ae501e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55931ae501d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55931ae50190 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55931ae385e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55931ae501b0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55931ae502d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55931ae502b0 <col:60> 'int' 0
|   |   `-CallExpr 0x55931ae50478 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55931ae50460 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55931ae50440 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55931a9a4eb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55931ae504b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae50340 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55931ae504d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae50378 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55931ae504e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55931ae503b0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55931ae50500 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55931ae50428 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55931ae50410 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55931ae503d0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55931ae50828 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55931ae50810 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55931ae507f8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55931ae507c8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55931ae50740 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55931ae50710 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55931ae506c0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55931ae430b0
|             |   `-CXXMemberCallExpr 0x55931ae506a0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55931ae50670 <col:60> '<bound member function type>' ->xanno 0x55931ae381f8
|             |       `-CXXThisExpr 0x55931ae50660 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55931ae50728 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55931ae506f0 <col:73> 'int' lvalue ParmVar 0x55931ae3b130 'i' 'int'
|-CXXMethodDecl 0x55931ae3b478 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55931ae3b2e8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55931ae3b360 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55931ae50f58 <col:41, line:528:5>
|   |-ParenExpr 0x55931ae50ce0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55931ae50cb0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55931ae509d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55931ae509a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55931ae508b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55931ae50898 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55931ae50858 <col:23> 'int' lvalue ParmVar 0x55931ae3b2e8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55931ae50878 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55931ae50980 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55931ae50968 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55931ae508d0 <col:33> 'int' lvalue ParmVar 0x55931ae3b2e8 'i' 'int'
|   |   |     `-BinaryOperator 0x55931ae50948 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55931ae50930 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55931ae508f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55931ae385e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55931ae50910 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55931ae50a30 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55931ae50a10 <col:60> 'int' 0
|   |   `-CallExpr 0x55931ae50c10 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55931ae50bf8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55931ae50bd8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55931a9a4eb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55931ae50c50 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae50aa0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55931ae50c68 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae50ad8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55931ae50c80 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55931ae50b10 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55931ae50c98 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55931ae50bc0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55931ae50ba8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55931ae50b68 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55931ae50f38 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55931ae50ee8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55931ae50eb8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55931ae50e60 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55931ae50e20 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55931ae50dd0 <col:47, col:56> 'char [48]' lvalue ->c 0x55931ae430b0
|     |     |   `-CXXMemberCallExpr 0x55931ae50db0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55931ae50d80 <col:47> '<bound member function type>' ->xanno 0x55931ae38398
|     |     |       `-CXXThisExpr 0x55931ae50d70 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55931ae50e38 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55931ae50e00 <col:60> 'int' lvalue ParmVar 0x55931ae3b2e8 'i' 'int'
|     `-ImplicitCastExpr 0x55931ae50f20 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55931ae50f00 <col:65> 'int16_t':'short' lvalue ParmVar 0x55931ae3b360 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55931ae3b638 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55931ae3b540 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55931ae51628 <col:36, line:541:5>
|   |-ParenExpr 0x55931ae513c8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55931ae51398 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55931ae510f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55931ae510c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55931ae50fd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55931ae50fb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55931ae50f78 <col:23> 'int' lvalue ParmVar 0x55931ae3b540 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55931ae50f98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55931ae510a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55931ae51088 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55931ae50ff0 <col:33> 'int' lvalue ParmVar 0x55931ae3b540 'i' 'int'
|   |   |     `-BinaryOperator 0x55931ae51068 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55931ae51050 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55931ae51010 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55931ae385e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55931ae51030 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55931ae51150 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55931ae51130 <col:60> 'int' 0
|   |   `-CallExpr 0x55931ae512f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55931ae512e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55931ae512c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55931a9a4eb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55931ae51338 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae511c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55931ae51350 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae511f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55931ae51368 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55931ae51230 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55931ae51380 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55931ae512a8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55931ae51290 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55931ae51250 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55931ae51618 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55931ae51600 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55931ae515e8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55931ae515b8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55931ae51560 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55931ae51530 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55931ae514e0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55931ae430b0
|             |   `-CXXMemberCallExpr 0x55931ae514c0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55931ae51490 <col:61> '<bound member function type>' ->xanno 0x55931ae381f8
|             |       `-CXXThisExpr 0x55931ae51480 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55931ae51548 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55931ae51510 <col:74> 'int' lvalue ParmVar 0x55931ae3b540 'i' 'int'
|-CXXMethodDecl 0x55931ae3b808 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55931ae3b6f8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55931ae3b770 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55931ae3b8b8 <col:20>
| `-OptimizeNoneAttr 0x55931ae3b910 <col:30>
|-CXXMethodDecl 0x55931ae3ba48 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55931ae3b950 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55931ae51cf8 <col:35, line:562:5>
|   |-ParenExpr 0x55931ae51a98 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55931ae51a68 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55931ae517c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55931ae51790 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55931ae516a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55931ae51688 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55931ae51648 <col:23> 'int' lvalue ParmVar 0x55931ae3b950 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55931ae51668 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55931ae51770 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55931ae51758 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55931ae516c0 <col:33> 'int' lvalue ParmVar 0x55931ae3b950 'i' 'int'
|   |   |     `-BinaryOperator 0x55931ae51738 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55931ae51720 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55931ae516e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55931ae385e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55931ae51700 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55931ae51820 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55931ae51800 <col:60> 'int' 0
|   |   `-CallExpr 0x55931ae519c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55931ae519b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55931ae51990 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55931a9a4eb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55931ae51a08 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae51890 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55931ae51a20 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae518c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55931ae51a38 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55931ae51900 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55931ae51a50 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55931ae51978 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55931ae51960 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55931ae51920 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55931ae51ce8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55931ae51cd0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55931ae51cb8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55931ae51c88 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55931ae51c30 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55931ae51c00 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55931ae51bb0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55931ae430b0
|             |   `-CXXMemberCallExpr 0x55931ae51b90 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55931ae51b60 <col:60> '<bound member function type>' ->xanno 0x55931ae381f8
|             |       `-CXXThisExpr 0x55931ae51b50 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55931ae51c18 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55931ae51be0 <col:73> 'int' lvalue ParmVar 0x55931ae3b950 'i' 'int'
|-CXXMethodDecl 0x55931ae3bc58 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55931ae3bb08 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55931ae3bb80 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55931ae523d8 <col:41, line:577:5>
|   |-ParenExpr 0x55931ae52168 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55931ae52138 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55931ae51e90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55931ae51e60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55931ae51d70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55931ae51d58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55931ae51d18 <col:23> 'int' lvalue ParmVar 0x55931ae3bb08 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55931ae51d38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55931ae51e40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55931ae51e28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55931ae51d90 <col:33> 'int' lvalue ParmVar 0x55931ae3bb08 'i' 'int'
|   |   |     `-BinaryOperator 0x55931ae51e08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55931ae51df0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55931ae51db0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55931ae385e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55931ae51dd0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55931ae51ef0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55931ae51ed0 <col:60> 'int' 0
|   |   `-CallExpr 0x55931ae52098 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55931ae52080 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55931ae52060 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55931a9a4eb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55931ae520d8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae51f60 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55931ae520f0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae51f98 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55931ae52108 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55931ae51fd0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55931ae52120 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55931ae52048 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55931ae52030 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55931ae51ff0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55931ae523b8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55931ae52368 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55931ae52338 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55931ae522d8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55931ae522a8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55931ae52258 <col:47, col:56> 'char [48]' lvalue ->c 0x55931ae430b0
|     |     |   `-CXXMemberCallExpr 0x55931ae52238 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55931ae52208 <col:47> '<bound member function type>' ->xanno 0x55931ae38398
|     |     |       `-CXXThisExpr 0x55931ae521f8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55931ae522c0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55931ae52288 <col:60> 'int' lvalue ParmVar 0x55931ae3bb08 'i' 'int'
|     `-ImplicitCastExpr 0x55931ae523a0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55931ae52380 <col:65> 'int32_t':'int' lvalue ParmVar 0x55931ae3bb80 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55931ae3be18 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55931ae3bd20 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55931ae52b08 <col:36, line:591:5>
|   |-ParenExpr 0x55931ae52848 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55931ae52818 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55931ae52570 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55931ae52540 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55931ae52450 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55931ae52438 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55931ae523f8 <col:23> 'int' lvalue ParmVar 0x55931ae3bd20 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55931ae52418 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55931ae52520 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55931ae52508 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55931ae52470 <col:33> 'int' lvalue ParmVar 0x55931ae3bd20 'i' 'int'
|   |   |     `-BinaryOperator 0x55931ae524e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55931ae524d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55931ae52490 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55931ae385e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55931ae524b0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55931ae525d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55931ae525b0 <col:60> 'int' 0
|   |   `-CallExpr 0x55931ae52778 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55931ae52760 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55931ae52740 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55931a9a4eb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55931ae527b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae52640 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55931ae527d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae52678 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55931ae527e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55931ae526b0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55931ae52800 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55931ae52728 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55931ae52710 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55931ae526d0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55931ae52af8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55931ae52ae0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55931ae52ac8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55931ae52a98 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55931ae52a10 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55931ae529e0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55931ae52990 <col:61, col:70> 'char const[48]' lvalue ->c 0x55931ae430b0
|             |   `-CXXMemberCallExpr 0x55931ae52970 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55931ae52940 <col:61> '<bound member function type>' ->xanno 0x55931ae381f8
|             |       `-CXXThisExpr 0x55931ae52930 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55931ae529f8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55931ae529c0 <col:74> 'int' lvalue ParmVar 0x55931ae3bd20 'i' 'int'
|-CXXMethodDecl 0x55931ae3c068 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55931ae3bed8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55931ae3bf50 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55931ae531e8 <col:42, line:606:5>
|   |-ParenExpr 0x55931ae52f78 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55931ae52f48 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55931ae52ca0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55931ae52c70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55931ae52b80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55931ae52b68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55931ae52b28 <col:23> 'int' lvalue ParmVar 0x55931ae3bed8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55931ae52b48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55931ae52c50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55931ae52c38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55931ae52ba0 <col:33> 'int' lvalue ParmVar 0x55931ae3bed8 'i' 'int'
|   |   |     `-BinaryOperator 0x55931ae52c18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55931ae52c00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55931ae52bc0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55931ae385e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55931ae52be0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55931ae52d00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55931ae52ce0 <col:60> 'int' 0
|   |   `-CallExpr 0x55931ae52ea8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55931ae52e90 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55931ae52e70 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55931a9a4eb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55931ae52ee8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae52d70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55931ae52f00 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae52da8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55931ae52f18 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55931ae52de0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55931ae52f30 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55931ae52e58 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55931ae52e40 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55931ae52e00 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55931ae531c8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55931ae53178 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55931ae53148 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55931ae530e8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55931ae530b8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55931ae53068 <col:48, col:57> 'char [48]' lvalue ->c 0x55931ae430b0
|     |     |   `-CXXMemberCallExpr 0x55931ae53048 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55931ae53018 <col:48> '<bound member function type>' ->xanno 0x55931ae38398
|     |     |       `-CXXThisExpr 0x55931ae53008 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55931ae530d0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55931ae53098 <col:61> 'int' lvalue ParmVar 0x55931ae3bed8 'i' 'int'
|     `-ImplicitCastExpr 0x55931ae531b0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55931ae53190 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55931ae3bf50 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55931ae3c200 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55931ae3c130 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55931ae53a58 <col:33, line:620:5>
|   |-ParenExpr 0x55931ae537d0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55931ae537a0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55931ae533f0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55931ae533c0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55931ae53260 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55931ae53248 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55931ae53208 <col:23> 'int' lvalue ParmVar 0x55931ae3c130 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55931ae53228 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55931ae533a0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55931ae53388 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55931ae53280 <col:33> 'int' lvalue ParmVar 0x55931ae3c130 'i' 'int'
|   |   |     `-BinaryOperator 0x55931ae53368 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55931ae53350 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55931ae532a0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55931ae385e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55931ae53328 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55931ae53310 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55931ae532d8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55931ae53450 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55931ae53430 <col:79> 'int' 0
|   |   `-CallExpr 0x55931ae53700 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55931ae536e8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55931ae536c8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55931a9a4eb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55931ae53740 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae53538 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55931ae53758 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae53580 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55931ae53770 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55931ae535b8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55931ae53788 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55931ae536b0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55931ae53698 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55931ae53658 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55931ae53a48 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55931ae53a30 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55931ae53a18 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55931ae539e8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55931ae53960 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55931ae53930 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55931ae538e0 <col:67, col:76> 'char const[48]' lvalue ->c 0x55931ae430b0
|             |   `-CXXMemberCallExpr 0x55931ae538c0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55931ae53890 <col:67> '<bound member function type>' ->xanno 0x55931ae381f8
|             |       `-CXXThisExpr 0x55931ae53880 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55931ae53948 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55931ae53910 <col:80> 'int' lvalue ParmVar 0x55931ae3c130 'i' 'int'
|-CXXMethodDecl 0x55931ae3c418 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55931ae3c2c0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55931ae3c340 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55931ae54280 <col:45, line:635:5>
|   |-ParenExpr 0x55931ae53fc8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55931ae53f98 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55931ae53c60 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55931ae53c30 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55931ae53ad0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55931ae53ab8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55931ae53a78 <col:23> 'int' lvalue ParmVar 0x55931ae3c2c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55931ae53a98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55931ae53c10 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55931ae53bf8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55931ae53af0 <col:33> 'int' lvalue ParmVar 0x55931ae3c2c0 'i' 'int'
|   |   |     `-BinaryOperator 0x55931ae53bd8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55931ae53bc0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55931ae53b10 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55931ae385e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55931ae53b98 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55931ae53b80 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55931ae53b48 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55931ae53cc0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55931ae53ca0 <col:79> 'int' 0
|   |   `-CallExpr 0x55931ae53ef8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55931ae53ee0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55931ae53ec0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55931a9a4eb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55931ae53f38 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae53d30 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55931ae53f50 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55931ae53d78 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55931ae53f68 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55931ae53db0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55931ae53f80 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55931ae53ea8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55931ae53e90 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55931ae53e48 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55931ae54260 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55931ae541c8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55931ae54198 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55931ae54138 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55931ae54108 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55931ae540b8 <col:54, col:63> 'char [48]' lvalue ->c 0x55931ae430b0
|     |     |   `-CXXMemberCallExpr 0x55931ae54098 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55931ae54068 <col:54> '<bound member function type>' ->xanno 0x55931ae38398
|     |     |       `-CXXThisExpr 0x55931ae54058 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55931ae54120 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55931ae540e8 <col:67> 'int' lvalue ParmVar 0x55931ae3c2c0 'i' 'int'
|     `-CXXConstCastExpr 0x55931ae54230 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55931ae54218 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55931ae541e0 <col:91> 'const void *' lvalue ParmVar 0x55931ae3c340 'x' 'const void *'
|-CXXMethodDecl 0x55931ae3c4e8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55931ae54308 <col:34, line:640:5>
|   `-ReturnStmt 0x55931ae542f8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55931ae542e0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55931ae542b0 <col:16> 'Packet *' lvalue ->_data_packet 0x55931ae43c68
|         `-CXXThisExpr 0x55931ae542a0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55931ae3c628 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55931ae3c598 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55931ae4d3c8 <col:46> 'bool' true
|-CXXMethodDecl 0x55931ae3c7a8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55931ae3c6e0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55931ae3c850 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55931ae3d000 <line:660:22> "" ""
| |-EnumConstantDecl 0x55931ae3c950 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55931ae3d070 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae3c930 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55931ae3c910 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55931ae31ab0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55931ae3c9e0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55931ae3d088 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae3c9c0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55931ae3c9a0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55931ae31b40 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55931ae3ca70 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55931ae3d0a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae3ca50 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55931ae3ca30 <col:21> 'int' 0
| |-EnumConstantDecl 0x55931ae3cb00 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55931ae3d0b8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae3cae0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55931ae3cac0 <col:19> 'int' 16
| |-EnumConstantDecl 0x55931ae3cb90 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55931ae3d0d0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae3cb70 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55931ae3cb50 <col:21> 'int' 16
| |-EnumConstantDecl 0x55931ae3cc20 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55931ae3d0e8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae3cc00 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55931ae3cbe0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55931ae3ccb0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55931ae3d100 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae3cc90 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55931ae3cc70 <col:19> 'int' EnumConstant 0x55931ae3cb00 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55931ae3cd40 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55931ae3d118 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae3cd20 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55931ae3cd00 <col:19> 'int' EnumConstant 0x55931ae3cc20 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55931ae3ce10 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55931ae3d130 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae3cdf0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55931ae3cdd0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55931ae3cd90 <col:23> 'int' EnumConstant 0x55931ae3cd40 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55931ae3cdb0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55931ae3cee0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55931ae3d148 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae3cec0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55931ae3cea0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55931ae3ce60 <col:23> 'int' EnumConstant 0x55931ae3cd40 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55931ae3ce80 <col:40> 'int' 4
| `-EnumConstantDecl 0x55931ae3cfb0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55931ae3d160 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55931ae3cf90 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55931ae3cf70 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55931ae3cf30 <col:23> 'int' EnumConstant 0x55931ae3cd40 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55931ae3cf50 <col:40> 'int' 8
|-CXXMethodDecl 0x55931ae3d1a0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55931ae3d240 <col:68> "" ""
|-CXXMethodDecl 0x55931ae3d2d8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55931ae3d378 <col:45> "" ""
|-CXXMethodDecl 0x55931ae3d410 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55931ae3d4b0 <col:57> "" ""
|-CXXMethodDecl 0x55931ae3d548 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55931ae3d5e8 <col:45> "" ""
|-CXXMethodDecl 0x55931ae3d680 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55931ae3d720 <col:57> "" ""
|-CXXMethodDecl 0x55931ae3d7b0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55931ae3d850 <col:51> "" ""
|-CXXMethodDecl 0x55931ae3d8e0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55931ae3d980 <col:63> "" ""
|-CXXMethodDecl 0x55931ae3da10 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55931ae3dab0 <col:53> "" ""
|-CXXMethodDecl 0x55931ae3db40 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55931ae3dbe0 <col:65> "" ""
|-CXXMethodDecl 0x55931ae3dcf8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55931ae3dc68 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55931ae3dda0 <col:61> "" ""
|-CXXMethodDecl 0x55931ae3df38 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55931ae3de28 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55931ae3dea0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55931ae3dfe8 <col:67> "" ""
|-CXXMethodDecl 0x55931ae3e100 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55931ae3e070 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55931ae3e1a8 <col:63> "" ""
|-CXXMethodDecl 0x55931ae3e340 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55931ae3e230 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55931ae3e2a8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55931ae3e3f0 <col:69> "" ""
|-CXXMethodDecl 0x55931ae3e508 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55931ae3e478 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55931ae3e5b0 <col:63> "" ""
|-CXXMethodDecl 0x55931ae40c88 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55931ae40b78 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55931ae40bf0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55931ae40d38 <col:69> "" ""
|-CXXMethodDecl 0x55931ae40e50 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55931ae40dc0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55931ae40ef8 <col:62> "" ""
|-CXXMethodDecl 0x55931ae41090 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55931ae40f80 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55931ae40ff8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55931ae41140 <col:68> "" ""
|-CXXMethodDecl 0x55931ae41258 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55931ae411c8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55931ae41300 <col:63> "" ""
|-CXXMethodDecl 0x55931ae41498 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55931ae41388 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55931ae41400 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55931ae41548 <col:69> "" ""
|-CXXMethodDecl 0x55931ae415d8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55931ae41678 <col:64> "" ""
|-CXXMethodDecl 0x55931ae41708 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55931ae417a8 <col:52> "" ""
|-CXXMethodDecl 0x55931ae41838 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55931ae418d8 <col:67> "" ""
|-CXXMethodDecl 0x55931ae41968 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55931ae41a08 <col:55> "" ""
|-CXXMethodDecl 0x55931ae41b20 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55931ae41a90 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55931ae41bc8 <col:58> "" ""
|-CXXMethodDecl 0x55931ae41d60 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55931ae41c50 <col:33> col:36 'int'
| |-ParmVarDecl 0x55931ae41cc8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55931ae41e10 <col:62> "" ""
|-CXXMethodDecl 0x55931ae41f28 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55931ae41e98 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55931ae41fd0 <col:58> "" ""
|-CXXMethodDecl 0x55931ae42168 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55931ae42058 <col:33> col:36 'int'
| |-ParmVarDecl 0x55931ae420d0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55931ae42218 <col:62> "" ""
|-CXXMethodDecl 0x55931ae42330 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55931ae422a0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55931ae423d8 <col:60> "" ""
|-CXXMethodDecl 0x55931ae42570 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55931ae42460 <col:34> col:37 'int'
| |-ParmVarDecl 0x55931ae424d8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55931ae42620 <col:64> "" ""
|-CXXMethodDecl 0x55931ae42738 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55931ae426a8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55931ae427e0 <col:58> "" ""
|-CXXMethodDecl 0x55931ae42978 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55931ae42868 <col:33> col:36 'int'
| |-ParmVarDecl 0x55931ae428e0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55931ae42a28 <col:62> "" ""
|-CXXMethodDecl 0x55931ae42b40 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55931ae42ab0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55931ae42be8 <col:59> "" ""
|-CXXMethodDecl 0x55931ae42d80 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55931ae42c70 <col:33> col:36 'int'
| |-ParmVarDecl 0x55931ae42ce8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55931ae42e30 <col:63> "" ""
|-AccessSpecDecl 0x55931ae42ea0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55931ae42ec8 prev 0x55931ae380d0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55931ae42fc0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55931ae430b0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55931ae431d8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55931ae43358 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55931ae434d8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55931ae43658 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55931ae54488 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55931ae54cf8 <col:11>
| |-CXXDestructorDecl 0x55931ae54560 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55931ae54698 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55931ae54698
| | `-ParmVarDecl 0x55931ae547a8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55931ae54848 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55931ae54848
| | `-ParmVarDecl 0x55931ae54958 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55931ae57718 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55931ae57828 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55931ae57aa8 <col:11>
| |   `-ReturnStmt 0x55931ae57a98 <col:11>
| |     `-UnaryOperator 0x55931ae57a80 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55931ae57a70 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55931ae57898 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55931ae57898
|   `-ParmVarDecl 0x55931ae579a8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55931ae436c0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55931ae437d8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55931ae43878 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55931ae438e0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55931ae43948 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55931ae439b0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55931ae43a10 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55931ae43ad0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55931ae43b30 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55931ae43b90 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55931ae54398 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55931ae43878 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55931ae54d08 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55931ae54d60 <col:12>
| |-CXXConstructorDecl 0x55931ae549c8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55931ae549c8
| | `-ParmVarDecl 0x55931ae54ad8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55931ae54b78 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55931ae54b78
| | `-ParmVarDecl 0x55931ae54c88 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55931ae56e00 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55931ae43c08 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55931ae43c68 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55931ae43cd0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55931ae43d38 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55931ae43da0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55931ae43e08 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55931ae43e68 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55931ae43ec8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55931ae43f30 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55931ae43fb8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55931ae43c08 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55931ae54330 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55931ae43e68 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55931ae54d70 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55931ae54dd0 <col:21, line:755:5>
|-CXXConstructorDecl 0x55931ae44158 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55931ae44098 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55931ae44250 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55931ae44438 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55931ae44340 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55931ae44708 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55931ae444f0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55931ae44568 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55931ae445e0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55931ae44928 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55931ae447d8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55931ae44850 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55931ae4cf08 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55931ae449e8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55931ae44a60 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55931ae44ad8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55931ae4d060 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55931ae4cfd0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55931ae4d1a8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55931ae4d118 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55931ae4d2a0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55931ae54e70 prev 0x55931ae31730 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x55931ae54fa8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x55931ae55038 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x55931ae550e0 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x55931ae55180 <col:20>
| `-OptimizeNoneAttr 0x55931ae551d8 <col:30>
|-CXXMethodDecl 0x55931ae55228 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x55931ae552c8 <col:20>
| `-OptimizeNoneAttr 0x55931ae55320 <col:30>
|-CXXMethodDecl 0x55931ae55370 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55931ae55438 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55931ae55500 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55931ae55618 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x55931ae556e0 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x55931ae55780 <col:20>
| `-OptimizeNoneAttr 0x55931ae557d8 <col:30>
|-CXXMethodDecl 0x55931ae55848 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x55931ae558e8 <col:20>
| `-OptimizeNoneAttr 0x55931ae55940 <col:30>
|-CXXMethodDecl 0x55931ae559e8 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x55931ae55a88 <col:20>
| `-OptimizeNoneAttr 0x55931ae55ae0 <col:30>
|-CXXMethodDecl 0x55931ae55b30 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55931ae55c48 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x55931ae55d68 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x55931ae55e88 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x55931ae55f50 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x55931ae55ff0 <col:62> "" ""
|-AccessSpecDecl 0x55931ae56060 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x55931ae560c0 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x55931ae56cb8 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x55931ae56ee0 <col:29, col:31>
|-CXXMethodDecl 0x55931ae56188 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x55931ae562c8 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x55931ae56238 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x55931ae563c0 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x55931ae56ef0 <col:23, col:25>
|-CXXMethodDecl 0x55931ae56578 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x55931ae564b0 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x55931ae56848 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55931ae56630 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55931ae566a8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55931ae56720 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55931ae569d8 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x55931ae56910 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x55931ae56ad0 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x55931ae56b38 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x55931ae56b38
  `-ParmVarDecl 0x55931ae56c48 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55931ae83218 <../elements/local/reframe.hh:108:1, line:138:1> line:108:7 class Reframe definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55931ae83378 <col:1, col:7> col:7 implicit referenced class Reframe
|-AccessSpecDecl 0x55931ae83408 <col:34, col:40> col:34 public
|-CXXConstructorDecl 0x55931ae83490 <line:110:5, col:13> col:5 Reframe 'void ()'
|-CXXDestructorDecl 0x55931ae83580 <line:111:5, col:14> col:5 ~Reframe 'void ()' noexcept-unevaluated 0x55931ae83580
| `-Overrides: [ 0x55931ae6ab08 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55931ae836b0 <line:113:5, col:56> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x55931ae6bf68 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55931ae84b10 <col:36, col:56>
|   `-ReturnStmt 0x55931ae84b00 <col:38, col:45>
|     `-ImplicitCastExpr 0x55931ae84ae8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55931ae84ac8 <col:45> 'const char [8]' lvalue "Reframe"
|-CXXMethodDecl 0x55931ae83778 <line:114:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x55931ae6c030 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55931ae84b70 <col:36, col:56>
|   `-ReturnStmt 0x55931ae84b60 <col:38, col:45>
|     `-ImplicitCastExpr 0x55931ae84b48 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55931ae84b28 <col:45> 'const char []' lvalue Var 0x55931ae6c2e0 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55931ae83840 <line:115:5, col:52> col:17 processing 'const char *() const'
| |-Overrides: [ 0x55931ae6c3f8 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x55931ae84bd0 <col:36, col:52>
|   `-ReturnStmt 0x55931ae84bc0 <col:38, col:45>
|     `-ImplicitCastExpr 0x55931ae84ba8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55931ae84b88 <col:45> 'const char [4]' lvalue "h/a"
|-CXXMethodDecl 0x55931ae83b10 <line:117:3, col:53> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55931ae6d800 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55931ae839c0 <col:17, col:33> col:33 conf 'Vector<String> &'
| `-ParmVarDecl 0x55931ae83a38 <col:39, col:52> col:53 'ErrorHandler *'
|-CXXMethodDecl 0x55931ae83c68 <line:118:3, col:32> col:7 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x55931ae6da50 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x55931ae83bd0 <col:18, col:31> col:32 'ErrorHandler *'
|-CXXMethodDecl 0x55931ae83db0 <line:119:3, col:28> col:8 cleanup 'void (Element::CleanupStage)'
| |-Overrides: [ 0x55931ae6e268 Element::cleanup 'void (Element::CleanupStage)' ]
| `-ParmVarDecl 0x55931ae83d20 <col:16> col:28 'Element::CleanupStage'
|-CXXMethodDecl 0x55931ae83f80 <line:121:3, col:25> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x55931ae6add8 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x55931ae83e70 <col:13> col:16 'int'
| `-ParmVarDecl 0x55931ae83ee8 <col:18, col:24> col:25 'Packet *'
|-CXXMethodDecl 0x55931ae840d8 <line:122:3, col:20> col:12 pull 'Packet *(int)'
| |-Overrides: [ 0x55931ae6af68 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x55931ae84048 <col:17> col:20 'int'
|-AccessSpecDecl 0x55931ae84180 <line:124:2, col:9> col:2 private
|-FieldDecl 0x55931ae841c0 <line:126:3, col:7> col:7 _foff 'int'
|-FieldDecl 0x55931ae84228 <line:127:3, col:7> col:7 _flen 'int'
|-FieldDecl 0x55931ae84288 <line:128:3, col:8> col:8 _ntoh 'bool'
|-FieldDecl 0x55931ae842f0 <line:129:3, col:7> col:7 _mul 'int'
|-FieldDecl 0x55931ae84358 <line:130:3, col:7> col:7 _align 'int'
|-FieldDecl 0x55931ae843c0 <line:131:3, col:7> col:7 _add 'int'
|-FieldDecl 0x55931ae84420 <line:133:3, col:19> col:19 _header 'WritablePacket *'
|-FieldDecl 0x55931ae84480 <line:134:3, col:11> col:11 _qhead 'Packet *'
|-FieldDecl 0x55931ae844e0 <col:3, col:20> col:20 _qtail 'Packet *'
|-FieldDecl 0x55931ae84560 <line:135:3, col:7> col:7 _have 'int'
|-FieldDecl 0x55931ae845c8 <col:3, col:14> col:14 _need 'int'
|-CXXMethodDecl 0x55931ae846c8 <line:137:3, col:20> col:8 reframe 'void ()'
|-CXXConstructorDecl 0x55931ae84798 <line:108:7> col:7 implicit Reframe 'void (const Reframe &)' inline default_delete noexcept-unevaluated 0x55931ae84798
| `-ParmVarDecl 0x55931ae848a8 <col:7> col:7 'const Reframe &'
`-CXXMethodDecl 0x55931ae84948 <col:7> col:7 implicit operator= 'Reframe &(const Reframe &)' inline default_delete noexcept-unevaluated 0x55931ae84948
  `-ParmVarDecl 0x55931ae84a58 <col:7> col:7 'const Reframe &'

Layout: <CGRecordLayout
  LLVMType:%class.Reframe = type { %class.Element.base, i32, i32, i8, i32, i32, i32, %class.WritablePacket*, %class.Packet*, %class.Packet*, i32, i32 }
  NonVirtualBaseLLVMType:%class.Reframe = type { %class.Element.base, i32, i32, i8, i32, i32, i32, %class.WritablePacket*, %class.Packet*, %class.Packet*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55931ac3d6c0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55931ac3d7d8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55931ac3d878 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55931ac3d8d8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55931ac3d938 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55931ac3d9e8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55931ac3dcf0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55931ac3de08 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55931ac3deb0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55931ac3df18 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55931ac3dfa8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55931ac44040 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55931ac44478 <col:12>
|-CXXConstructorDecl 0x55931ac44148 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55931ac44258 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55931ac3deb0 'data' 'const char *'
| | `-ImplicitCastExpr 0x55931ac46a00 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55931ac469d0 <col:12> 'const char *const' lvalue .data 0x55931ac3deb0
| |     `-DeclRefExpr 0x55931ac469b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55931ac44258 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55931ac3df18 'length' 'int'
| | `-ImplicitCastExpr 0x55931ac46a90 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55931ac46a60 <col:12> 'const int' lvalue .length 0x55931ac3df18
| |     `-DeclRefExpr 0x55931ac46a40 <col:12> 'const String::rep_t' lvalue ParmVar 0x55931ac44258 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55931ac3dfa8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55931ac46b20 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55931ac46af0 <col:12> 'String::memo_t *const' lvalue .memo 0x55931ac3dfa8
| |     `-DeclRefExpr 0x55931ac46ad0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55931ac44258 '' 'const String::rep_t &'
| `-CompoundStmt 0x55931ac46b78 <col:12>
|-CXXConstructorDecl 0x55931ac442f8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55931ac442f8
| `-ParmVarDecl 0x55931ac44408 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55931ac49960 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55931ac55378 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55931ac55488 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55931ac559a0 <col:12>
|   |-BinaryOperator 0x55931ac557b8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55931ac55770 <col:12> 'const char *' lvalue ->data 0x55931ac3deb0
|   | | `-CXXThisExpr 0x55931ac55760 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55931ac557a0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55931ac55730 <col:12> 'const char *const' lvalue .data 0x55931ac3deb0
|   |     `-DeclRefExpr 0x55931ac55710 <col:12> 'const String::rep_t' lvalue ParmVar 0x55931ac55488 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55931ac55880 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55931ac55838 <col:12> 'int' lvalue ->length 0x55931ac3df18
|   | | `-CXXThisExpr 0x55931ac55828 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55931ac55868 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55931ac557f8 <col:12> 'const int' lvalue .length 0x55931ac3df18
|   |     `-DeclRefExpr 0x55931ac557d8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55931ac55488 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55931ac55948 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55931ac55900 <col:12> 'String::memo_t *' lvalue ->memo 0x55931ac3dfa8
|   | | `-CXXThisExpr 0x55931ac558f0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55931ac55930 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55931ac558c0 <col:12> 'String::memo_t *const' lvalue .memo 0x55931ac3dfa8
|   |     `-DeclRefExpr 0x55931ac558a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55931ac55488 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55931ac55990 <col:12>
|     `-UnaryOperator 0x55931ac55978 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55931ac55968 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55931ac554f8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55931ac554f8
  `-ParmVarDecl 0x55931ac55608 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55931ac34c30 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55931ac34d48 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55931ac34dd8 <col:16, col:22> col:16 public
|-TypedefDecl 0x55931ac34e18 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55931a907fd0 'const char *'
|   `-QualType 0x55931a907521 'const char' const
|     `-BuiltinType 0x55931a907520 'char'
|-TypedefDecl 0x55931ac34ea0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55931ac34e70 'String::const_iterator' sugar
|   |-Typedef 0x55931ac34e18 'const_iterator'
|   `-PointerType 0x55931a907fd0 'const char *'
|     `-QualType 0x55931a907521 'const char' const
|       `-BuiltinType 0x55931a907520 'char'
|-TypedefDecl 0x55931ac35010 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55931ac34f80 'int (String::*)() const'
|   |-RecordType 0x55931ac34cc0 'String'
|   | `-CXXRecord 0x55931ac34c30 'String'
|   `-ParenType 0x55931ac34f20 'int () const' sugar
|     `-FunctionProtoType 0x55931ac09ac0 'int () const' const cdecl
|       `-BuiltinType 0x55931a907580 'int'
|-TypedefDecl 0x55931ac35078 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55931aa5e6a0 'int64_t' sugar
|   |-Typedef 0x55931a970390 'int64_t'
|   `-TypedefType 0x55931a949630 '__int64_t' sugar
|     |-Typedef 0x55931a949208 '__int64_t'
|     `-BuiltinType 0x55931a9075a0 'long'
|-TypedefDecl 0x55931ac350e0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55931aa5e5c0 'uint64_t' sugar
|   |-Typedef 0x55931a970530 'uint64_t'
|   `-TypedefType 0x55931a9496c0 '__uint64_t' sugar
|     |-Typedef 0x55931a949278 '__uint64_t'
|     `-BuiltinType 0x55931a907640 'unsigned long'
|-TypedefDecl 0x55931ac35170 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55931ac35140 'String::intmax_t' sugar
|   |-Typedef 0x55931ac35078 'intmax_t'
|   `-TypedefType 0x55931aa5e6a0 'int64_t' sugar
|     |-Typedef 0x55931a970390 'int64_t'
|     `-TypedefType 0x55931a949630 '__int64_t' sugar
|       |-Typedef 0x55931a949208 '__int64_t'
|       `-BuiltinType 0x55931a9075a0 'long'
|-TypedefDecl 0x55931ac35200 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55931ac351d0 'String::uintmax_t' sugar
|   |-Typedef 0x55931ac350e0 'uintmax_t'
|   `-TypedefType 0x55931aa5e5c0 'uint64_t' sugar
|     |-Typedef 0x55931a970530 'uint64_t'
|     `-TypedefType 0x55931a9496c0 '__uint64_t' sugar
|       |-Typedef 0x55931a949278 '__uint64_t'
|       `-BuiltinType 0x55931a907640 'unsigned long'
|-CXXConstructorDecl 0x55931ac352c0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55931ac35468 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55931ac353a8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55931ac35618 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55931ac35558 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55931ac35770 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55931ac356e0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55931ac35988 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55931ac35838 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55931ac358b8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55931ac35ba8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55931ac35a58 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55931ac35ad8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55931ac35dc8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55931ac35c78 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55931ac35cf8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55931ac35fe8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55931ac35e98 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55931ac35f18 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55931ac36178 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55931ac360b0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55931ac362f8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55931ac36238 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55931ac36488 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55931ac363c0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55931ac365e0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55931ac36550 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55931ac36738 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55931ac366a8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55931ac36890 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55931ac36800 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55931ac36a18 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55931ac36958 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55931ac36ba8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55931ac36ae0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55931ac36d38 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55931ac36c70 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55931ac36ec8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55931ac36e00 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55931ac36fc0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55931ac370e8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55931ac37268 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55931ac371a0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55931ac373b8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55931ac37328 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55931ac37470 <col:63> "" ""
|-CXXMethodDecl 0x55931ac375b8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55931ac374f8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55931ac377c8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55931ac37678 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55931ac376f8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55931ac379e8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55931ac37890 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55931ac37910 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55931ac37cc8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55931ac37aa8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55931ac37b28 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55931ac43b10 <col:55> 'int' 10
| `-ParmVarDecl 0x55931ac37ba0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55931ac43b30 <col:76> 'bool' true
|-CXXMethodDecl 0x55931ac37fa8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55931ac37d90 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55931ac37e10 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55931ac43b40 <col:56> 'int' 10
| `-ParmVarDecl 0x55931ac37e88 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55931ac43b60 <col:77> 'bool' true
|-CXXMethodDecl 0x55931ac380b0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55931ac38178 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55931ac38240 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55931ac382e0 <col:20>
| `-OptimizeNoneAttr 0x55931ac38338 <col:30>
|-CXXConversionDecl 0x55931ac38428 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55931ac384f8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55931ac385b8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55931ac386a8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55931ac38768 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55931ac388e8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55931ac38820 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55931ac38a38 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55931ac389a8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55931ac38b28 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55931ac38be8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55931ac38e38 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55931ac38ca0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55931ac38d20 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55931ac39098 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55931ac38f00 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55931ac38f80 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55931ac39168 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55931ac39378 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55931ac39220 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55931ac392a0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55931ac39598 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55931ac39440 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55931ac394c0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55931ac39728 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55931ac39660 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55931ac39818 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55931ac39988 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55931ac398c8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55931ac39b98 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55931ac39a48 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55931ac39ac8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55931ac39db0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55931ac39c58 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55931ac39cd0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55931ac39f40 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55931ac39e70 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55931ac3a160 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55931ac3a000 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55931ac3a080 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55931ac3a2b0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55931ac3a220 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55931ac3a488 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55931ac3a370 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55931ac3a3f0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55931ac3a5d8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55931ac3a548 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55931ac3a7f0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55931ac3a690 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55931ac3a710 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55931ac43b70 <col:39> 'int' 0
|-CXXMethodDecl 0x55931ac3aa10 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55931ac3a8b0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55931ac3a930 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55931ac43b90 <col:48> 'int' 0
|-CXXMethodDecl 0x55931ac3abf0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55931ac3aad0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55931ac3ab50 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55931ac43bb0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55931ac3acc0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55931ac3ad80 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55931ac3ae40 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55931ac3af00 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55931ac3afc0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55931ac3b168 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55931ac3b070 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55931ac3b2e8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55931ac3b220 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55931ac3b4c0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55931ac3b3a8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55931ac3b638 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55931ac3b578 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55931ac3b780 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55931ac3b6f0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55931ac3b8d0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55931ac3b840 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55931ac3baa8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55931ac3b990 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55931ac3ba10 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55931ac3bc88 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55931ac3bb70 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55931ac3bbf0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55931ac3bdd8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55931ac3bd48 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55931ac3bfe8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55931ac3be98 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55931ac3bf18 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55931ac3c148 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55931ac3c0b0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55931ac3c2a0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55931ac3c208 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55931ac3c348 <col:57> "" ""
|-CXXMethodDecl 0x55931ac3c458 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55931ac3c3c8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55931ac3c5a8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55931ac3c518 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55931ac3c728 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55931ac3c660 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55931ac3c7f0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55931ac3c8b0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55931ac3c970 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55931ac3ca10 <col:49> "" ""
|-CXXMethodDecl 0x55931ac3caa0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55931ac3cb60 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55931ac3cc50 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55931ac3cd18 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55931ac3cdd8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55931ac3ce98 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55931ac3cf90 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55931ac3d058 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55931ac3d120 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55931ac3d2f8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55931ac3d1d8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55931ac3d258 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55931ac3d520 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55931ac3d3c0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55931ac3d440 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55931ac3d630 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55931ac3d698 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55931ac3d6c0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55931ac3d7d8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55931ac3d878 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55931ac3d8d8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55931ac3d938 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55931ac3d9e8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55931ac3da50 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55931ac3dc88 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55931ac3dcd8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55931ac3dc68 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55931ac3db78 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55931ac3db20 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55931ac3db60 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55931ac3db40 <col:32> 'int' 8
|-CXXRecordDecl 0x55931ac3dcf0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55931ac3de08 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55931ac3deb0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55931ac3df18 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55931ac3dfa8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55931ac44040 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55931ac44478 <col:12>
| |-CXXConstructorDecl 0x55931ac44148 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55931ac44258 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55931ac3deb0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55931ac46a00 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55931ac469d0 <col:12> 'const char *const' lvalue .data 0x55931ac3deb0
| | |     `-DeclRefExpr 0x55931ac469b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55931ac44258 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55931ac3df18 'length' 'int'
| | | `-ImplicitCastExpr 0x55931ac46a90 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55931ac46a60 <col:12> 'const int' lvalue .length 0x55931ac3df18
| | |     `-DeclRefExpr 0x55931ac46a40 <col:12> 'const String::rep_t' lvalue ParmVar 0x55931ac44258 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55931ac3dfa8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55931ac46b20 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55931ac46af0 <col:12> 'String::memo_t *const' lvalue .memo 0x55931ac3dfa8
| | |     `-DeclRefExpr 0x55931ac46ad0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55931ac44258 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55931ac46b78 <col:12>
| |-CXXConstructorDecl 0x55931ac442f8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55931ac442f8
| | `-ParmVarDecl 0x55931ac44408 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55931ac49960 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55931ac55378 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55931ac55488 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55931ac559a0 <col:12>
| |   |-BinaryOperator 0x55931ac557b8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55931ac55770 <col:12> 'const char *' lvalue ->data 0x55931ac3deb0
| |   | | `-CXXThisExpr 0x55931ac55760 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55931ac557a0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55931ac55730 <col:12> 'const char *const' lvalue .data 0x55931ac3deb0
| |   |     `-DeclRefExpr 0x55931ac55710 <col:12> 'const String::rep_t' lvalue ParmVar 0x55931ac55488 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55931ac55880 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55931ac55838 <col:12> 'int' lvalue ->length 0x55931ac3df18
| |   | | `-CXXThisExpr 0x55931ac55828 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55931ac55868 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55931ac557f8 <col:12> 'const int' lvalue .length 0x55931ac3df18
| |   |     `-DeclRefExpr 0x55931ac557d8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55931ac55488 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55931ac55948 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55931ac55900 <col:12> 'String::memo_t *' lvalue ->memo 0x55931ac3dfa8
| |   | | `-CXXThisExpr 0x55931ac558f0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55931ac55930 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55931ac558c0 <col:12> 'String::memo_t *const' lvalue .memo 0x55931ac3dfa8
| |   |     `-DeclRefExpr 0x55931ac558a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55931ac55488 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55931ac55990 <col:12>
| |     `-UnaryOperator 0x55931ac55978 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55931ac55968 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55931ac554f8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55931ac554f8
|   `-ParmVarDecl 0x55931ac55608 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55931ac3e020 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55931ac3e268 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55931ac3e088 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55931ac3e108 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55931ac3e180 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55931ac44000 <col:79, line:261:5>
|   |-BinaryOperator 0x55931ac43c78 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55931ac43c10 <col:2, col:5> 'const char *' lvalue .data 0x55931ac3deb0
|   | | `-MemberExpr 0x55931ac43be0 <col:2> 'String::rep_t' lvalue ->_r 0x55931ac3e020
|   | |   `-CXXThisExpr 0x55931ac43bd0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55931ac43c60 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55931ac43c40 <col:12> 'const char *' lvalue ParmVar 0x55931ac3e088 'data' 'const char *'
|   |-BinaryOperator 0x55931ac43d40 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55931ac43cd8 <col:2, col:5> 'int' lvalue .length 0x55931ac3df18
|   | | `-MemberExpr 0x55931ac43ca8 <col:2> 'String::rep_t' lvalue ->_r 0x55931ac3e020
|   | |   `-CXXThisExpr 0x55931ac43c98 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55931ac43d28 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55931ac43d08 <col:14> 'int' lvalue ParmVar 0x55931ac3e108 'length' 'int'
|   `-IfStmt 0x55931ac43fe8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55931ac43e60 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55931ac43e48 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55931ac43e28 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55931ac43e08 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55931ac43da0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55931ac3dfa8
|     |       | `-MemberExpr 0x55931ac43d70 <col:7> 'String::rep_t' lvalue ->_r 0x55931ac3e020
|     |       |   `-CXXThisExpr 0x55931ac43d60 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55931ac43df0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55931ac43dd0 <col:17> 'String::memo_t *' lvalue ParmVar 0x55931ac3e180 'memo' 'String::memo_t *'
|     `-CallExpr 0x55931ac43fc0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55931ac43fa8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55931ac43eb0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55931ac2cc98 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55931ac43f18 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55931ac3d878
|         `-ImplicitCastExpr 0x55931ac43f00 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55931ac43ee0 <col:27> 'String::memo_t *' lvalue ParmVar 0x55931ac3e180 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55931ac3e518 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55931ac3e338 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55931ac3e3b8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55931ac3e430 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55931ac3e020 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55931ac44488 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55931ac44618 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55931ac44580 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55931ac444f0 <col:2> '<bound member function type>' ->assign_memo 0x55931ac3e268
|     | `-ImplicitCastExpr 0x55931ac445b8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55931ac444e0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55931ac445d0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55931ac44520 <col:14> 'const char *' lvalue ParmVar 0x55931ac3e338 'data' 'const char *'
|     |-ImplicitCastExpr 0x55931ac445e8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55931ac44540 <col:20> 'int' lvalue ParmVar 0x55931ac3e3b8 'length' 'int'
|     `-ImplicitCastExpr 0x55931ac44600 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55931ac44560 <col:28> 'String::memo_t *' lvalue ParmVar 0x55931ac3e430 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55931ac3e6a8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55931ac3e5e8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55931ac44870 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55931ac447f0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55931ac44640 <col:2> '<bound member function type>' ->assign_memo 0x55931ac3e268
|     | `-CXXThisExpr 0x55931ac44630 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55931ac44828 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55931ac446c0 <col:14, col:19> 'const char *' lvalue .data 0x55931ac3deb0
|     |   `-MemberExpr 0x55931ac44690 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55931ac3e020
|     |     `-DeclRefExpr 0x55931ac44670 <col:14> 'const String' lvalue ParmVar 0x55931ac3e5e8 'x' 'const String &'
|     |-ImplicitCastExpr 0x55931ac44840 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55931ac44740 <col:25, col:30> 'int' lvalue .length 0x55931ac3df18
|     |   `-MemberExpr 0x55931ac44710 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55931ac3e020
|     |     `-DeclRefExpr 0x55931ac446f0 <col:25> 'const String' lvalue ParmVar 0x55931ac3e5e8 'x' 'const String &'
|     `-ImplicitCastExpr 0x55931ac44858 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55931ac447c0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55931ac3dfa8
|         `-MemberExpr 0x55931ac44790 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55931ac3e020
|           `-DeclRefExpr 0x55931ac44770 <col:38> 'const String' lvalue ParmVar 0x55931ac3e5e8 'x' 'const String &'
|-CXXMethodDecl 0x55931ac3e770 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55931ac45230 <col:31, line:278:5>
|   `-IfStmt 0x55931ac45218 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55931ac44910 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55931ac448f8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55931ac448c8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55931ac3dfa8
|     |     `-MemberExpr 0x55931ac44898 <col:6> 'String::rep_t' lvalue ->_r 0x55931ac3e020
|     |       `-CXXThisExpr 0x55931ac44888 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55931ac451f0 <col:15, line:277:2>
|       |-ParenExpr 0x55931ac44dc0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55931ac44d90 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55931ac44a20 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55931ac44a08 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55931ac449f0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55931ac449b0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55931ac3d878
|       |   |       `-ImplicitCastExpr 0x55931ac44998 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55931ac44968 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55931ac3dfa8
|       |   |           `-MemberExpr 0x55931ac44938 <col:27> 'String::rep_t' lvalue ->_r 0x55931ac3e020
|       |   |             `-CXXThisExpr 0x55931ac44928 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55931ac44a80 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55931ac44a60 <col:54> 'int' 0
|       |   `-CallExpr 0x55931ac44cf0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55931ac44cd8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55931ac44c58 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55931a9a4eb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55931ac44d30 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55931ac44b68 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55931ac44d48 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55931ac44b98 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55931ac44d60 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55931ac44bd0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55931ac44d78 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55931ac44c40 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55931ac44c28 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55931ac44bf0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55931ac45110 <line:274:6, line:275:22>
|       | |-CallExpr 0x55931ac44fd0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55931ac44fb8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55931ac44f30 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55931ac2e0e0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55931ac44f00 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55931ac3d878
|       | |   `-ImplicitCastExpr 0x55931ac44ee8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55931ac44eb8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55931ac3dfa8
|       | |       `-MemberExpr 0x55931ac44e88 <col:40> 'String::rep_t' lvalue ->_r 0x55931ac3e020
|       | |         `-CXXThisExpr 0x55931ac44e78 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55931ac450d0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55931ac450b8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55931ac44ff8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55931ac42f50 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55931ac450f8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55931ac45058 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55931ac3dfa8
|       |       `-MemberExpr 0x55931ac45028 <col:15> 'String::rep_t' lvalue ->_r 0x55931ac3e020
|       |         `-CXXThisExpr 0x55931ac45018 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55931ac451d0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55931ac45168 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55931ac3dfa8
|         | `-MemberExpr 0x55931ac45138 <col:6> 'String::rep_t' lvalue ->_r 0x55931ac3e020
|         |   `-CXXThisExpr 0x55931ac45128 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55931ac451b8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55931ac45198 <col:16> 'int' 0
|-CXXMethodDecl 0x55931ac3ea08 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55931ac3e828 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55931ac3e8a8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55931ac3e920 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55931ac3eae0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55931ac3ed30 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55931ac3eb98 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55931ac3ec18 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55931ac3ec90 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55931ac3ef18 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55931ac3ee00 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55931ac3ee80 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55931ac3f018 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55931ac45308 <col:41, line:286:5>
|   `-ReturnStmt 0x55931ac452f8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55931ac452c8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55931ac45290 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55931ac45278 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55931ac45258 <col:46> 'int' 1
|-CXXMethodDecl 0x55931ac3f2b8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55931ac3f0d0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55931ac3f150 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55931ac3f1d0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55931ac42f50 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55931ac3f380 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55931ac43020 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55931ac431f0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55931ac430d8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55931ac43158 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55931ac432b0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55931ac43378 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55931ac43478 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55931ac434f0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55931ac43568 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55931ac435d0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55931ac436d0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55931ac43720 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55931ac436b0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55931ac43690 <col:22> 'int' 14
|-CXXMethodDecl 0x55931ac43938 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55931ac43750 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55931ac437d0 <col:38> col:41 'int'
| `-ParmVarDecl 0x55931ac43850 <col:43> col:46 'int'
|-FriendDecl 0x55931ac43a40 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55931ac43ad0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55931aed37e0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55931aed39b8 prev 0x55931aed37e0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55931aed3a48 <col:46, col:52> col:46 public
|-TypedefDecl 0x55931aed3a70 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55931a907580 'int'
|-TypedefDecl 0x55931aed5460 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55931aed5410 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55931aed53f0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55931aed3c88 'type'
|     `-SubstTemplateTypeParmType 0x55931aed3c50 'String' sugar
|       |-TemplateTypeParmType 0x55931abf94e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55931abf9490 'T'
|       `-RecordType 0x55931ac34cc0 'String'
|         `-CXXRecord 0x55931ac34c30 'String'
|-TypedefDecl 0x55931aed5518 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55931aed54e0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55931aed54c0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55931aed5460 'type'
|     `-ElaboratedType 0x55931aed5410 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55931aed53f0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55931aed3c88 'type'
|         `-SubstTemplateTypeParmType 0x55931aed3c50 'String' sugar
|           |-TemplateTypeParmType 0x55931abf94e0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55931abf9490 'T'
|           `-RecordType 0x55931ac34cc0 'String'
|             `-CXXRecord 0x55931ac34c30 'String'
|-CXXMethodDecl 0x55931aed5698 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55931aed55a8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55931aed5788 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55931aed5868 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55931aed5868
|-CXXMethodDecl 0x55931aed5b38 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55931aed5a40 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55931aed5d78 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55931aed5bf0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55931aed5c68 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55931aed5f48 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55931aed5e38 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55931aed5eb0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55931aed60a8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55931aed6178 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55931aed63c8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55931aed6238 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55931aed62b0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55931aed6628 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55931aed6498 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55931aed6510 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55931aed67e8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55931aed66f8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55931aed69a8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55931aed68b0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55931aed6a60 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55931aed6b10 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55931aed6d48 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55931aed6bc0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55931aed6c38 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55931aed6fe8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55931aed6ef0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55931aed70b0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55931aed7100 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55931aed7150 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55931ae6d470 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55931aed2248 prev 0x55931ae6d470 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55931aed3750 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55931aed3700 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55931aed36e0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55931aed3590 'type'
|     `-SubstTemplateTypeParmType 0x55931aed3420 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55931abcf290 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55931abcf238 'F'
|       `-RecordType 0x55931aed3080 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55931aed2fa0 'typed_array_memory'
|-FieldDecl 0x55931aed71a0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55931aed71f0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55931aed7228 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55931aed22e0 'String' sugar
|   |-TemplateTypeParmType 0x55931ac06800 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55931ac067a8 'T'
|   `-RecordType 0x55931ac34cc0 'String'
|     `-CXXRecord 0x55931ac34c30 'String'
|-TypedefDecl 0x55931aed72b8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55931aed7280 'String &'
|   `-SubstTemplateTypeParmType 0x55931aed22e0 'String' sugar
|     |-TemplateTypeParmType 0x55931ac06800 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55931ac067a8 'T'
|     `-RecordType 0x55931ac34cc0 'String'
|       `-CXXRecord 0x55931ac34c30 'String'
|-TypedefDecl 0x55931aed7348 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55931aed7310 'const String &'
|   `-QualType 0x55931aed22e1 'const String' const
|     `-SubstTemplateTypeParmType 0x55931aed22e0 'String' sugar
|       |-TemplateTypeParmType 0x55931ac06800 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55931ac067a8 'T'
|       `-RecordType 0x55931ac34cc0 'String'
|         `-CXXRecord 0x55931ac34c30 'String'
|-TypedefDecl 0x55931aed73d8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55931aed73a0 'String *'
|   `-SubstTemplateTypeParmType 0x55931aed22e0 'String' sugar
|     |-TemplateTypeParmType 0x55931ac06800 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55931ac067a8 'T'
|     `-RecordType 0x55931ac34cc0 'String'
|       `-CXXRecord 0x55931ac34c30 'String'
|-TypedefDecl 0x55931aed7468 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55931aed7430 'const String *'
|   `-QualType 0x55931aed22e1 'const String' const
|     `-SubstTemplateTypeParmType 0x55931aed22e0 'String' sugar
|       |-TemplateTypeParmType 0x55931ac06800 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55931ac067a8 'T'
|       `-RecordType 0x55931ac34cc0 'String'
|         `-CXXRecord 0x55931ac34c30 'String'
|-TypedefDecl 0x55931aed80c0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55931aed8070 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55931aed8050 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55931aed7f88 'type'
|     `-LValueReferenceType 0x55931aed7f50 'const String &'
|       `-QualType 0x55931aed7cf1 'const String' const
|         `-SubstTemplateTypeParmType 0x55931aed7cf0 'String' sugar
|           |-TemplateTypeParmType 0x55931abd91e0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55931abd9188 'T'
|           `-RecordType 0x55931ac34cc0 'String'
|             `-CXXRecord 0x55931ac34c30 'String'
|-TypedefDecl 0x55931aed8128 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55931aed7310 'const String &'
|   `-QualType 0x55931aed22e1 'const String' const
|     `-SubstTemplateTypeParmType 0x55931aed22e0 'String' sugar
|       |-TemplateTypeParmType 0x55931ac06800 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55931ac067a8 'T'
|       `-RecordType 0x55931ac34cc0 'String'
|         `-CXXRecord 0x55931ac34c30 'String'
|-TypedefDecl 0x55931aed8180 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55931a907580 'int'
|-TypedefDecl 0x55931aed81e8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55931aed73a0 'String *'
|   `-SubstTemplateTypeParmType 0x55931aed22e0 'String' sugar
|     |-TemplateTypeParmType 0x55931ac06800 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55931ac067a8 'T'
|     `-RecordType 0x55931ac34cc0 'String'
|       `-CXXRecord 0x55931ac34c30 'String'
|-TypedefDecl 0x55931aed8250 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55931aed7430 'const String *'
|   `-QualType 0x55931aed22e1 'const String' const
|     `-SubstTemplateTypeParmType 0x55931aed22e0 'String' sugar
|       |-TemplateTypeParmType 0x55931ac06800 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55931ac067a8 'T'
|       `-RecordType 0x55931ac34cc0 'String'
|         `-CXXRecord 0x55931ac34c30 'String'
|-EnumDecl 0x55931aed82a8 <line:134:5> col:5
| `-EnumConstantDecl 0x55931aed83a0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55931aed8380 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55931ac07e88 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55931ac07e60 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55931ac07e40 <col:40> 'int' 1
|-CXXConstructorDecl 0x55931aed8428 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55931aed86b8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55931aed84e0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55931aed8580 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55931aed8948 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55931aed8830 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55931aed8c08 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55931aed8af0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55931aed8f20 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55931aed8e00 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55931aed9230 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55931aed9110 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55931aed9520 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55931aed9368 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55931aed93e0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55931aed9648 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55931aed96f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55931aed9750 <col:30> Inherited
|-CXXMethodDecl 0x55931aed9798 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55931aed9848 <col:20> Inherited
| `-OptimizeNoneAttr 0x55931aed98a0 <col:30> Inherited
|-CXXMethodDecl 0x55931aed9968 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55931aed9a18 <col:20> Inherited
| `-OptimizeNoneAttr 0x55931aed9a70 <col:30> Inherited
|-CXXMethodDecl 0x55931aed9ab8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55931aed9b68 <col:20> Inherited
| `-OptimizeNoneAttr 0x55931aed9bc0 <col:30> Inherited
|-CXXMethodDecl 0x55931aed9c08 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55931aed9cb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55931aed9d10 <col:30> Inherited
|-CXXMethodDecl 0x55931aed9d58 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55931aed9e08 <col:20> Inherited
| `-OptimizeNoneAttr 0x55931aed9e60 <col:30> Inherited
|-CXXMethodDecl 0x55931aed9e88 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55931aed9f38 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55931aed9fe8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55931aeda1a8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55931aeda098 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55931aeda110 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55931aeda2f8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55931aeda268 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55931aeda4a8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55931aeda3b0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55931aeda560 <col:20>
| `-OptimizeNoneAttr 0x55931aeda5b8 <col:30>
|-CXXMethodDecl 0x55931aeda6d8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55931aeda5e0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55931aeda790 <col:20>
| `-OptimizeNoneAttr 0x55931aeda7e8 <col:30>
|-CXXMethodDecl 0x55931aeda8a0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55931aeda810 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55931aeda9e8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55931aeda958 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55931aedab18 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55931aedac18 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55931aedace8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55931aedadb8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55931aedaef8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55931aedae68 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55931aedb040 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55931aedafb0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55931aedb188 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55931aedb0f8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55931aedb240 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55931aedb340 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55931aedb2b0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55931aedb3f8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55931aedb4b8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55931aedb5b8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55931aedb738 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55931aedb678 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55931aedbef8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55931aedb7f0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55931aedbe58 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55931aedbd58 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55931aedbfd8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55931aedc128 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55931aedc098 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55931aedc1e0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55931aedc428 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55931aedc2a0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55931aedc318 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55931aedc5b8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55931aedc4f8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55931aedc7c8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55931aedc680 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55931aedc6f8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55931aedc888 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55931aedcae8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55931aedc9f0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55931aedcbb8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55931aedcbb8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55931ae84be8 prev 0x55931ae6a640 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55931ae84ce0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55931ae84d70 <col:22, col:28> col:22 public
|-EnumDecl 0x55931ae84d98 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55931ae84eb8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55931ae84e98 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55931ae84e80 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55931ae84e60 <col:14> 'int' 999
| |-EnumConstantDecl 0x55931ae84f60 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55931ae84f40 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55931ae84f28 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55931ae84f08 <col:14> 'int' 1
| |-EnumConstantDecl 0x55931ae84ff0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55931ae84fd0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55931ae84fb0 <col:17> 'int' 0
| |-EnumConstantDecl 0x55931ae85080 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55931ae85060 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55931ae85040 <col:13> 'int' 1
| |-EnumConstantDecl 0x55931ae85110 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55931ae850f0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55931ae850d0 <col:16> 'int' 2
| |-EnumConstantDecl 0x55931ae851a0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55931ae85180 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55931ae85160 <col:13> 'int' 3
| |-EnumConstantDecl 0x55931ae85230 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55931ae85210 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55931ae851f0 <col:15> 'int' 4
| |-EnumConstantDecl 0x55931ae852c0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55931ae852a0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55931ae85280 <col:14> 'int' 5
| |-EnumConstantDecl 0x55931ae85350 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55931ae85330 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55931ae85310 <col:12> 'int' 6
| `-EnumConstantDecl 0x55931ae853e0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55931ae853c0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55931ae853a0 <col:13> 'int' 7
|-VarDecl 0x55931ae85450 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55931ae854d8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55931ae85560 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55931ae855e8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55931ae85670 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55931ae856f8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55931ae85780 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55931ae85808 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55931ae85890 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55931ae85918 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55931ae859a0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55931ae85aa0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55931ae8ec38 '_nerrors' 'int'
| | `-IntegerLiteral 0x55931ae8f3c8 <line:128:13> 'int' 0
| `-CompoundStmt 0x55931ae8f438 <col:16, line:129:5>
|-CXXDestructorDecl 0x55931ae85b90 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55931ae8f448 <col:29, line:132:5>
|-CXXMethodDecl 0x55931ae85d48 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55931ae85c80 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55931ae85e10 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55931ae85ef8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55931ae8f4a0 <col:44, line:161:5>
|   `-ReturnStmt 0x55931ae8f490 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55931ae8f478 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55931ae8f458 <col:9> 'ErrorHandler *' lvalue Var 0x55931ae8ec98 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55931ae86068 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55931ae85fa8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55931ae86130 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55931ae8f500 <col:43, line:173:5>
|   `-ReturnStmt 0x55931ae8f4f0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55931ae8f4d8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55931ae8f4b8 <col:9> 'ErrorHandler *' lvalue Var 0x55931ae8ed10 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55931ae861e8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55931ae86268 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55931ae86378 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55931ae862e8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55931ae864c8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55931ae86438 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55931ae86620 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55931ae86588 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55931ae86778 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x55931ae866e0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55931ae868d0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55931ae86838 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55931ae86ae0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55931ae86988 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55931ae86a08 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55931ae86cb8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55931ae86ba0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55931ae86c20 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55931ae86ed8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55931ae86d78 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55931ae86df8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55931ae870b8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55931ae86f98 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55931ae87018 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55931ae87298 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55931ae87178 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55931ae871f8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55931ae87420 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55931ae87358 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55931ae875f0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55931ae874d8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55931ae87550 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55931ae8f758 <col:57, line:234:5>
|   `-ReturnStmt 0x55931ae8f748 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55931ae8f730 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55931ae8f6d8 <col:9, col:41> 'int'
|         |-MemberExpr 0x55931ae8f6a8 <col:9> '<bound member function type>' ->xmessage 0x55931ae87420
|         | `-CXXThisExpr 0x55931ae8f698 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55931ae8f718 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55931ae8f700 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55931ae8f678 <col:18, col:40> 'String' (CXXTemporary 0x55931ae8f678)
|               `-CallExpr 0x55931ae8f640 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55931ae8f628 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55931ae8f5a0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55931ae89678 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55931ae8f5c0 <col:31> 'const String' lvalue ParmVar 0x55931ae87550 'str' 'const String &'
|                 `-DeclRefExpr 0x55931ae8f5e0 <col:36> 'const String' lvalue ParmVar 0x55931ae874d8 'anno' 'const String &'
|-CXXMethodDecl 0x55931ae87930 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55931ae876b0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55931ae87730 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55931ae87800 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55931ae8f9e8 <col:68, line:243:5>
|   `-ReturnStmt 0x55931ae8f9d8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55931ae8f9c0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55931ae8f960 <col:9, col:41> 'int'
|         |-MemberExpr 0x55931ae8f930 <col:9> '<bound member function type>' ->xmessage 0x55931ae875f0
|         | `-CXXThisExpr 0x55931ae8f920 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55931ae8f7f8 <col:18> 'const String' lvalue ParmVar 0x55931ae876b0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55931ae8f9a8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55931ae8f990 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55931ae8f900 <col:24, col:40> 'String' (CXXTemporary 0x55931ae8f900)
|               `-CXXMemberCallExpr 0x55931ae8f898 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55931ae8f828 <col:24> '<bound member function type>' ->vformat 0x55931ae88b10
|                 | `-CXXThisExpr 0x55931ae8f818 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55931ae8f8c8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55931ae8f858 <col:32> 'const char *' lvalue ParmVar 0x55931ae87730 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55931ae8f8e0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55931ae8f878 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55931ae87800 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55931ae87bd0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55931ae879f8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55931ae87a70 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55931ae87ae8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55931ae8fd28 <col:23, line:254:5>
|   `-ReturnStmt 0x55931ae8fd18 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55931ae8fd00 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55931ae8fca0 <col:9, col:71> 'int'
|         |-MemberExpr 0x55931ae8fc70 <col:9> '<bound member function type>' ->xmessage 0x55931ae875f0
|         | `-CXXThisExpr 0x55931ae8fc60 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55931ae8fce8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55931ae8fcd0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55931ae8fc20 <col:18, col:65> 'String' (CXXTemporary 0x55931ae8fc20)
|         |     `-CallExpr 0x55931ae8fbb8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55931ae8fba0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55931ae8fa88 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55931ae89678 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55931ae8faa8 <col:31> 'const String' lvalue ParmVar 0x55931ae87a70 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55931ae8fc00 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55931ae8fbe8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55931ae8fb80 <col:37, col:64> 'String' (CXXTemporary 0x55931ae8fb80)
|         |             `-CallExpr 0x55931ae8fb50 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55931ae8fb38 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55931ae8fac8 <col:37> 'String (const String &)' lvalue CXXMethod 0x55931ae89cc8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55931ae8fae8 <col:56> 'const String' lvalue ParmVar 0x55931ae879f8 'landmark' 'const String &'
|         `-DeclRefExpr 0x55931ae8fc40 <col:68> 'const String' lvalue ParmVar 0x55931ae87ae8 'str' 'const String &'
|-CXXMethodDecl 0x55931ae87f50 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55931ae87c98 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55931ae87d10 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55931ae87d90 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55931ae87e08 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55931ae8ffe0 <col:34, line:267:5>
|   `-ReturnStmt 0x55931ae8ffd0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55931ae8ffb8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55931ae8ff50 <col:9, col:51> 'int'
|         |-MemberExpr 0x55931ae8ff20 <col:9> '<bound member function type>' ->xmessage 0x55931ae87bd0
|         | `-CXXThisExpr 0x55931ae8ff10 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55931ae8fdc8 <col:18> 'const String' lvalue ParmVar 0x55931ae87c98 'landmark' 'const String &'
|         |-DeclRefExpr 0x55931ae8fde8 <col:28> 'const String' lvalue ParmVar 0x55931ae87d10 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55931ae8ffa0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55931ae8ff88 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55931ae8fef0 <col:34, col:50> 'String' (CXXTemporary 0x55931ae8fef0)
|               `-CXXMemberCallExpr 0x55931ae8fe88 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55931ae8fe18 <col:34> '<bound member function type>' ->vformat 0x55931ae88b10
|                 | `-CXXThisExpr 0x55931ae8fe08 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55931ae8feb8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55931ae8fe48 <col:42> 'const char *' lvalue ParmVar 0x55931ae87d90 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55931ae8fed0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55931ae8fe68 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55931ae87e08 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55931ae88060 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55931ae90060 <col:25, line:288:5>
|   `-ReturnStmt 0x55931ae90050 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55931ae90038 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55931ae90008 <col:9> 'const int' lvalue ->_nerrors 0x55931ae8ec38
|         `-CXXThisExpr 0x55931ae8fff8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55931ae88270 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55931ae88118 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55931ae88198 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55931ae88558 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55931ae88338 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55931ae883b8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55931ae88430 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55931ae886f0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55931ae88628 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55931ae88938 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55931ae887b0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55931ae88828 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55931ae902c0 <col:58, line:357:5>
|   `-ReturnStmt 0x55931ae902b0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55931ae90298 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55931ae90268 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55931ae90250 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55931ae90230 <col:9, col:29> 'String' (CXXTemporary 0x55931ae90230)
|             `-CallExpr 0x55931ae901c0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55931ae901a8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55931ae90128 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55931ae88558 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55931ae900c8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55931ae901f8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55931ae900e8 <col:21> 'const char *' lvalue ParmVar 0x55931ae887b0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55931ae90210 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55931ae90108 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55931ae88828 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55931ae88b10 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55931ae88a00 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55931ae88a78 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55931ae88c68 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55931ae88bd8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55931ae88de8 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55931ae88d20 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55931ae89080 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55931ae88ea0 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55931ae88f20 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55931ae88f98 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55931ae891e0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55931ae89150 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55931ae903d8 <col:37, line:441:5>
|   `-IfStmt 0x55931ae903c0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55931ae90348 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55931ae90318 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55931ae902d8 <col:6> 'int' lvalue ParmVar 0x55931ae89150 'level' 'int'
|     | `-ImplicitCastExpr 0x55931ae90330 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55931ae902f8 <col:15> 'ErrorHandler::Level' EnumConstant 0x55931ae851a0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55931ae903a8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55931ae90378 <col:8> 'int' lvalue ->_nerrors 0x55931ae8ec38
|         `-CXXThisExpr 0x55931ae90368 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55931ae892a8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55931ae90470 <col:26, line:448:5>
|   `-BinaryOperator 0x55931ae90450 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55931ae90400 <col:2> 'int' lvalue ->_nerrors 0x55931ae8ec38
|     | `-CXXThisExpr 0x55931ae903f0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55931ae90430 <col:13> 'int' 0
|-CXXMethodDecl 0x55931ae89470 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55931ae89360 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55931ae893d8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55931ae89678 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55931ae89530 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55931ae895a8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55931ae89928 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55931ae89738 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55931ae897b8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55931ae89838 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55931ae899e0 <col:59> 0 0
|-CXXMethodDecl 0x55931ae89b78 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55931ae89a58 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55931ae89ad8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55931ae90ae0 <col:70, line:534:5>
|   |-DeclStmt 0x55931ae905e0 <line:528:2, col:20>
|   | |-VarDecl 0x55931ae90498 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55931ae90500 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55931ae90538 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55931ae905a0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55931ae906b0 <line:529:2, col:23>
|   | `-VarDecl 0x55931ae90610 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55931ae90698 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55931ae90678 <col:18> 'const char *' lvalue ParmVar 0x55931ae89a58 'begin' 'const char *'
|   |-DoStmt 0x55931ae90a78 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55931ae909a8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55931ae90990 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55931ae90970 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55931ae906c8 <col:6> 'const char *' lvalue Var 0x55931ae90610 'x' 'const char *'
|   | |     `-CallExpr 0x55931ae908c0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55931ae908a8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55931ae90860 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55931ae8f110 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55931ae90928 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55931ae90910 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55931ae90780 <col:20, col:27> 'String' (CXXTemporary 0x55931ae90780)
|   | |       |     `-CXXTemporaryObjectExpr 0x55931ae90748 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55931ae90940 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55931ae907a0 <col:30> 'const char *' lvalue Var 0x55931ae90610 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55931ae90958 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55931ae907c0 <col:33> 'const char *' lvalue ParmVar 0x55931ae89ad8 'end' 'const char *'
|   | |       |-UnaryOperator 0x55931ae90800 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55931ae907e0 <col:39> 'String' lvalue Var 0x55931ae90498 'name' 'String'
|   | |       |-UnaryOperator 0x55931ae90838 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55931ae90818 <col:46> 'String' lvalue Var 0x55931ae90538 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55931ae90850 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55931ae90a60 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55931ae90a48 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55931ae90a28 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55931ae909f8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55931ac38428
|   |         `-ImplicitCastExpr 0x55931ae909e0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55931ae909c0 <col:11> 'String' lvalue Var 0x55931ae90498 'name' 'String'
|   `-ReturnStmt 0x55931ae90ad0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55931ae90ab8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55931ae90a98 <col:9> 'const char *' lvalue Var 0x55931ae90610 'x' 'const char *'
|-CXXMethodDecl 0x55931ae89cc8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55931ae89c38 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55931ae910e8 <col:55, line:550:5>
|   `-IfStmt 0x55931ae910c0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55931ae90d20 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55931ae90d08 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55931ae90cf0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55931ae90cd0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55931ae90ca0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55931ac38428
|     | |       `-DeclRefExpr 0x55931ae90b40 <col:6> 'const String' lvalue ParmVar 0x55931ae89c38 'x' 'const String &'
|     | `-BinaryOperator 0x55931ae90c80 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55931ae90c50 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55931ae90c00 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55931ae90be8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55931ae90ba0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55931ac51c60 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55931ae90b60 <col:11> 'const String' lvalue ParmVar 0x55931ae89c38 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55931ae90b80 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55931ae90c68 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55931ae90c38 <col:19> 'char' 123
|     |-ReturnStmt 0x55931ae90d90 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55931ae90d60 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55931ae90d40 <col:13> 'const String' lvalue ParmVar 0x55931ae89c38 'x' 'const String &'
|     `-IfStmt 0x55931ae91098 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55931ae90e28 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55931ae90e10 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55931ae90df0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55931ae90dc0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55931ac38428
|       |       `-DeclRefExpr 0x55931ae90da0 <col:11> 'const String' lvalue ParmVar 0x55931ae89c38 'x' 'const String &'
|       |-ReturnStmt 0x55931ae90fb0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55931ae90f98 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55931ae90f68 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55931ae90f50 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55931ae90f30 <col:13, col:29> 'String' (CXXTemporary 0x55931ae90f30)
|       |         `-CallExpr 0x55931ae90ee0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55931ae90ec8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55931ae90e40 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55931ae89470 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55931ae90f10 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55931ae90e60 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55931ae90e80 <col:28> 'const String' lvalue ParmVar 0x55931ae89c38 'x' 'const String &'
|       `-ReturnStmt 0x55931ae91088 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55931ae91070 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55931ae91040 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55931ae91028 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55931ae91008 <col:13, col:20> 'String' (CXXTemporary 0x55931ae91008)
|                 `-CXXTemporaryObjectExpr 0x55931ae90fd0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55931ae8dc80 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55931ae89d80 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55931ae89df8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55931ae8f3b8 <col:71> 'bool' false
|-CXXRecordDecl 0x55931ae8dd30 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55931ae8e028 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55931ae8dfc0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55931ae8df60 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55931ae8df20 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55931ac34cc0 'String'
|       | `-CXXRecord 0x55931ac34c30 'String'
|       |-BuiltinType 0x55931a907580 'int'
|       `-DecayedType 0x55931ae877d0 '__va_list_tag *' sugar
|         |-TypedefType 0x55931ae877a0 'va_list' sugar
|         | |-Typedef 0x55931ab26d80 'va_list'
|         | `-TypedefType 0x55931ab26d30 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55931aa5e958 '__gnuc_va_list'
|         |   `-TypedefType 0x55931aa5e8c0 '__builtin_va_list' sugar
|         |     |-Typedef 0x55931a948d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55931a948ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55931a9082d0 '__va_list_tag'
|         |         `-CXXRecord 0x55931a908238 '__va_list_tag'
|         `-PointerType 0x55931ab2c620 '__va_list_tag *'
|           `-RecordType 0x55931a9082d0 '__va_list_tag'
|             `-CXXRecord 0x55931a908238 '__va_list_tag'
|-EnumDecl 0x55931ae8e080 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55931ae8e180 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55931ae8e6e0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae8e160 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55931ae8e140 <col:16> 'int' 1
| |-EnumConstantDecl 0x55931ae8e210 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55931ae8e6f8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae8e1f0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55931ae8e1d0 <col:21> 'int' 2
| |-EnumConstantDecl 0x55931ae8e2a0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55931ae8e710 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae8e280 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55931ae8e260 <col:22> 'int' 4
| |-EnumConstantDecl 0x55931ae8e330 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55931ae8e728 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae8e310 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55931ae8e2f0 <col:17> 'int' 8
| |-EnumConstantDecl 0x55931ae8e3c0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55931ae8e740 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae8e3a0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55931ae8e380 <col:22> 'int' 16
| |-EnumConstantDecl 0x55931ae8e450 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55931ae8e758 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae8e430 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55931ae8e410 <col:19> 'int' 32
| |-EnumConstantDecl 0x55931ae8e4e0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55931ae8e770 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae8e4c0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55931ae8e4a0 <col:17> 'int' 64
| |-EnumConstantDecl 0x55931ae8e570 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55931ae8e788 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae8e550 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55931ae8e530 <col:14> 'int' 128
| |-EnumConstantDecl 0x55931ae8e600 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55931ae8e7a0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931ae8e5e0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55931ae8e5c0 <col:16> 'int' 256
| `-EnumConstantDecl 0x55931ae8e690 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55931ae8e7b8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55931ae8e670 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55931ae8e650 <col:12> 'int' 1024
|-CXXMethodDecl 0x55931ae8e9c8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55931ae8e7e0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55931ae8e880 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55931ae8eb50 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55931ae8ea88 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55931ae8ebf8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55931ae8ec38 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55931ae8ec98 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55931ae8ed10 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55931ae8f110 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55931ae8ed88 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55931ae8ee08 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55931ae8ee88 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55931ae8ef00 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55931ae8ef78 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55931ae8eff0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55931ae8f238 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55931ae8f238
| `-ParmVarDecl 0x55931ae8f348 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55931ae91448 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55931ae91448
  `-ParmVarDecl 0x55931ae91558 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55931aee77f8 prev 0x55931ae2ff18 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55931aee78f0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55931aee7980 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55931aee7a88 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55931aee79b8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55931aee8e60 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55931aee8e40 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55931aee89d8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55931aee8ef0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55931aee8eb0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55931aee79b8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55931aee8a40 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55931aee8f70 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55931aee8f30 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55931aee8aa0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55931aee8fb0 <col:54> 'bool' false
| `-CompoundStmt 0x55931aee90b8 <col:61, line:38:5>
|   `-BinaryOperator 0x55931aee9098 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55931aee9030 <col:9> 'const Element *' lvalue ->_context 0x55931aee8978
|     | `-CXXThisExpr 0x55931aee9020 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55931aee9080 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55931aee9060 <col:20> 'int' 0
|-CXXConstructorDecl 0x55931aee7c98 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55931aee7b48 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55931aee7bc0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55931aee8e98 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55931aee8e78 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55931aee8978 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55931aee9110 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55931aee90d0 <col:20> 'const Element *' lvalue ParmVar 0x55931aee7b48 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55931aee89d8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55931aee9190 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55931aee9150 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55931aee7bc0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55931aee8a40 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55931aee9210 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55931aee91d0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55931aee8aa0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55931aee9250 <col:73> 'bool' false
| `-CompoundStmt 0x55931aee92c8 <col:80, line:46:5>
|-CXXMethodDecl 0x55931aee7dc8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55931aee9340 <col:36, line:51:5>
|   `-ReturnStmt 0x55931aee9330 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55931aee9318 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55931aee92e8 <col:16> 'const Element *const' lvalue ->_context 0x55931aee8978
|         `-CXXThisExpr 0x55931aee92d8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55931aee7eb8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55931aee93c0 <col:32, line:57:5>
|   `-ReturnStmt 0x55931aee93b0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55931aee9398 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55931aee9368 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55931aee89d8
|         `-CXXThisExpr 0x55931aee9358 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55931aee7f78 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55931aee8100 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55931aee8030 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55931aee8250 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55931aee81c0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55931aee83a0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55931aee8310 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55931aee85a8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55931aee8458 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55931aee84d0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55931aee8888 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55931aee8668 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55931aee86e8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55931aee8760 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55931aee8940 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55931aee8978 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55931aee89d8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55931aee8a40 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55931aee8aa0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55931aee8af0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55931aee8af0
| `-ParmVarDecl 0x55931aee8c08 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55931aee8ca8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55931aee8ca8
| `-ParmVarDecl 0x55931aee8db8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55931af88f58 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55931af0ccc0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55931af0ce98 prev 0x55931af0ccc0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55931af0cf28 <col:46, col:52> col:46 public
|-TypedefDecl 0x55931af0cf50 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55931a907580 'int'
|-TypedefDecl 0x55931af0eb20 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55931af0ead0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55931af0d400 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55931af0d300 'type'
|     `-TemplateSpecializationType 0x55931af0d290 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55931af0d170 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55931af0d150 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55931af0d130 <col:24> 'unsigned long' 4
|       `-RecordType 0x55931af0d270 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55931af0d190 'char_array'
|-TypedefDecl 0x55931af0ebd8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55931af0eba0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55931af0eb80 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55931af0eb20 'type'
|     `-ElaboratedType 0x55931af0ead0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55931af0d400 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55931af0d300 'type'
|         `-TemplateSpecializationType 0x55931af0d290 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55931af0d170 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55931af0d150 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55931af0d130 <col:24> 'unsigned long' 4
|           `-RecordType 0x55931af0d270 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55931af0d190 'char_array'
|-CXXMethodDecl 0x55931af0ed58 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55931af0ec68 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55931af0ee48 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55931af19300 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55931af195c8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55931af194d0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55931af19808 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55931af19680 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55931af196f8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55931af199d8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55931af198c8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55931af19940 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55931af19b38 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55931af19c08 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55931af19e58 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55931af19cc8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55931af19d40 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55931af1a0b8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55931af19f28 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55931af19fa0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55931af1a278 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55931af1a188 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55931af1a438 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55931af1a340 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55931af1a4f0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55931af1a5a0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55931af1a7d8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55931af1a650 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55931af1a6c8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55931af1aa78 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55931af1a980 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55931af1ab40 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55931af1ab90 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55931af1abe0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55931af0b6c8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55931af0b8d8 prev 0x55931af0b6c8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55931af0cc30 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55931af0cbe0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55931af0cbc0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55931af0ca70 'type'
|     `-SubstTemplateTypeParmType 0x55931af0c890 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55931abceb10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55931abceab8 'T'
|       `-RecordType 0x55931af0c3e0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55931af0c2f8 'sized_array_memory'
|-FieldDecl 0x55931af1ac30 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55931af1ac80 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55931af1acb8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55931af0b970 'int' sugar
|   |-TemplateTypeParmType 0x55931ac06800 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55931ac067a8 'T'
|   `-BuiltinType 0x55931a907580 'int'
|-TypedefDecl 0x55931af1ad48 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55931af1ad10 'int &'
|   `-SubstTemplateTypeParmType 0x55931af0b970 'int' sugar
|     |-TemplateTypeParmType 0x55931ac06800 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55931ac067a8 'T'
|     `-BuiltinType 0x55931a907580 'int'
|-TypedefDecl 0x55931af1ae08 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55931af1add0 'const int &'
|   `-QualType 0x55931af0b971 'const int' const
|     `-SubstTemplateTypeParmType 0x55931af0b970 'int' sugar
|       |-TemplateTypeParmType 0x55931ac06800 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55931ac067a8 'T'
|       `-BuiltinType 0x55931a907580 'int'
|-TypedefDecl 0x55931af1ae98 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55931af1ae60 'int *'
|   `-SubstTemplateTypeParmType 0x55931af0b970 'int' sugar
|     |-TemplateTypeParmType 0x55931ac06800 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55931ac067a8 'T'
|     `-BuiltinType 0x55931a907580 'int'
|-TypedefDecl 0x55931af1af28 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55931af1aef0 'const int *'
|   `-QualType 0x55931af0b971 'const int' const
|     `-SubstTemplateTypeParmType 0x55931af0b970 'int' sugar
|       |-TemplateTypeParmType 0x55931ac06800 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55931ac067a8 'T'
|       `-BuiltinType 0x55931a907580 'int'
|-TypedefDecl 0x55931af1bb10 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55931af1bac0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55931af1baa0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55931af1ba30 'type'
|     `-SubstTemplateTypeParmType 0x55931af1b7f0 'int' sugar
|       |-TemplateTypeParmType 0x55931abd9910 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55931abd98c0 'T'
|       `-BuiltinType 0x55931a907580 'int'
|-TypedefDecl 0x55931af1bb78 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55931af1add0 'const int &'
|   `-QualType 0x55931af0b971 'const int' const
|     `-SubstTemplateTypeParmType 0x55931af0b970 'int' sugar
|       |-TemplateTypeParmType 0x55931ac06800 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55931ac067a8 'T'
|       `-BuiltinType 0x55931a907580 'int'
|-TypedefDecl 0x55931af1bbd0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55931a907580 'int'
|-TypedefDecl 0x55931af1bc38 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55931af1ae60 'int *'
|   `-SubstTemplateTypeParmType 0x55931af0b970 'int' sugar
|     |-TemplateTypeParmType 0x55931ac06800 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55931ac067a8 'T'
|     `-BuiltinType 0x55931a907580 'int'
|-TypedefDecl 0x55931af1bca0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55931af1aef0 'const int *'
|   `-QualType 0x55931af0b971 'const int' const
|     `-SubstTemplateTypeParmType 0x55931af0b970 'int' sugar
|       |-TemplateTypeParmType 0x55931ac06800 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55931ac067a8 'T'
|       `-BuiltinType 0x55931a907580 'int'
|-EnumDecl 0x55931af1bcf8 <line:134:5> col:5
| `-EnumConstantDecl 0x55931af1bdf0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55931af1bdd0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55931ac07e88 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55931ac07e60 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55931ac07e40 <col:40> 'int' 1
|-CXXConstructorDecl 0x55931af1be78 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55931af1c0c8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55931af1bf30 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55931af1bfd0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55931af1c388 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55931af1c270 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55931af1c648 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55931af1c530 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55931af1c990 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55931af1c870 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55931af1cca0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55931af1cb80 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55931af1cf90 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55931af1cdd8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55931af1ce50 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55931af1d0b8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55931af1d198 <col:20> Inherited
| `-OptimizeNoneAttr 0x55931af1d1f0 <col:30> Inherited
|-CXXMethodDecl 0x55931af1d238 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55931af1d2e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55931af1d340 <col:30> Inherited
|-CXXMethodDecl 0x55931af1d408 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55931af1d4b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55931af1d510 <col:30> Inherited
|-CXXMethodDecl 0x55931af1d558 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55931af1d608 <col:20> Inherited
| `-OptimizeNoneAttr 0x55931af1d660 <col:30> Inherited
|-CXXMethodDecl 0x55931af1d6a8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55931af1d758 <col:20> Inherited
| `-OptimizeNoneAttr 0x55931af1d7b0 <col:30> Inherited
|-CXXMethodDecl 0x55931af1d7f8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55931af1d8a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55931af1d900 <col:30> Inherited
|-CXXMethodDecl 0x55931af1d928 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55931af1d9d8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55931af1da88 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55931af1dc48 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55931af1db38 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55931af1dbb0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55931af1dd98 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55931af1dd08 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55931af1df48 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55931af1de50 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55931af1e000 <col:20>
| `-OptimizeNoneAttr 0x55931af1e058 <col:30>
|-CXXMethodDecl 0x55931af1e178 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55931af1e080 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55931af1e230 <col:20>
| `-OptimizeNoneAttr 0x55931af1e288 <col:30>
|-CXXMethodDecl 0x55931af1e340 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55931af1e2b0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55931af1e488 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55931af1e3f8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55931af1e5b8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55931af1e6e8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55931af1e7b8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55931af1e888 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55931af1e9c8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55931af1e938 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55931af1eb10 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55931af1ea80 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55931af1ec58 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55931af1ebc8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55931af1ed10 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55931af1ee10 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55931af1ed80 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55931af1eec8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55931af1ef88 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55931af1f088 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55931af1f208 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55931af1f148 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55931af1f9c8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55931af1f2c0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55931af1f928 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55931af1f828 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55931af1faa8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55931af1fbf8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55931af1fb68 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55931af1fcb0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55931af1fef8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55931af1fd70 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55931af1fde8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55931af200b8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55931af1ffc8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55931af20308 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55931af20180 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55931af201f8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55931af203c8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55931af20628 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55931af20530 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55931af206f8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55931af09838 prev 0x55931aeee388 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55931af09930 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55931af09a20 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55931af33330 <col:16, line:828:9>
|-CXXDestructorDecl 0x55931af09b10 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55931af33340 <col:25, line:830:9>
|-CXXMethodDecl 0x55931af09c10 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55931af09cc0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55931af09d68 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55931af09d68
| `-ParmVarDecl 0x55931af09e78 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55931af0a638 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55931af0a638
  `-ParmVarDecl 0x55931af0a748 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55931aeee198 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55931aeee2f8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55931aeee388 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55931aeee440 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55931aeee548 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55931aeee478 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55931af245e8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55931af245c8 <col:31> 'int' 0
|-CXXConstructorDecl 0x55931aeee868 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55931aeee6e0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55931aeee758 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55931af24620 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55931af24600 <col:59> 'int' 0
|-CXXConstructorDecl 0x55931aeeea40 <line:265:5, col:56> col:5 used Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55931aeee930 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55931aeee9a8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55931af24658 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55931af24638 <col:55> 'int' 0
|-CXXConstructorDecl 0x55931aeeedf8 <line:271:5, line:272:32> line:271:5 Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55931aeeebe0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55931aeeec58 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55931aeeecd0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55931af24690 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55931af24670 <col:31> 'int' 0
|-CXXConstructorDecl 0x55931aeeefb8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55931aeeeef8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55931aeef0b0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55931aeef298 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55931aeef1a0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55931aeef388 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55931af24a40 <col:24, line:291:5>
|   `-ReturnStmt 0x55931af24a30 <line:290:9, col:79>
|     `-BinaryOperator 0x55931af24a10 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55931af248e8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55931af24840 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55931af24820 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55931af24718 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55931af24700 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55931af246e8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55931af246b8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55931af0b660
|       | |   |       `-CXXThisExpr 0x55931af246a8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55931af24808 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55931af247f0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55931af247b8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55931af24788 <col:28, col:35> '<bound member function type>' ->size 0x55931aed9e88
|       | |           `-ImplicitCastExpr 0x55931af247d8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55931af24770 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55931af24740 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55931af0b660
|       | |                 `-CXXThisExpr 0x55931af24730 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55931af248d0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55931af248b8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55931af248a0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55931af24870 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55931af20840
|       |         `-CXXThisExpr 0x55931af24860 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55931af249f0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55931af249d8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55931af249c0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55931af24980 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55931af24968 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55931af24918 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55931af208f0
|         |     |   `-CXXThisExpr 0x55931af24908 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55931af24948 <col:73> 'int' 0
|         `-IntegerLiteral 0x55931af249a0 <col:79> 'int' 0
|-CXXMethodDecl 0x55931aeef448 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55931af24c18 <col:32, line:296:5>
|   `-ReturnStmt 0x55931af24c08 <line:295:9, col:49>
|     `-BinaryOperator 0x55931af24be8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55931af24ac8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55931af24ab0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55931af24a98 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55931af24a68 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55931af20840
|       |       `-CXXThisExpr 0x55931af24a58 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55931af24bc8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55931af24bb0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55931af24b98 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55931af24b58 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55931af24b40 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55931af24af0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55931af208f0
|         |     |   `-CXXThisExpr 0x55931af24ae0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55931af24b20 <col:43> 'int' 0
|         `-IntegerLiteral 0x55931af24b78 <col:49> 'int' 0
|-CXXMethodDecl 0x55931aeef538 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55931af24e28 <col:19, line:306:5>
|   |-IfStmt 0x55931af24d48 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55931af24c88 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55931af24c70 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55931af24c40 <col:13> 'Vector<String> *' lvalue ->_conf 0x55931af0b660
|   | |     `-CXXThisExpr 0x55931af24c30 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55931af24d28 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55931af24cf8 <col:13, col:20> '<bound member function type>' ->clear 0x55931aedc888
|   |     `-ImplicitCastExpr 0x55931af24ce0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55931af24cb0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55931af0b660
|   |         `-CXXThisExpr 0x55931af24ca0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55931af24dd0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55931af24da0 <col:9, col:16> '<bound member function type>' .clear 0x55931af203c8
|   |   `-MemberExpr 0x55931af24d70 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55931af207e0
|   |     `-CXXThisExpr 0x55931af24d60 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55931af24e18 <line:305:9, col:17>
|     `-UnaryOperator 0x55931af24e00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55931af24df0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55931aeef7b8 <line:313:5, col:36> col:11 used bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55931aeef6c0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55931aeef938 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55931aeef870 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55931aeefcb8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55931aeef9e0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55931aeefc18 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55931aeefa88 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55931aeefb00 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55931af25148 <col:67, line:327:5>
|     |-WhileStmt 0x55931af250f8 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55931af24f10 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55931af24e90 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55931ae283e8 0x55931ac719c8 0x55931ac716a0 0x55931ac61e70 0x55931ac61b20 0x55931ac61410 0x55931ac33d80 0x55931abc1250
|     | | |-DeclRefExpr 0x55931af24e50 <col:16> 'Iter' lvalue ParmVar 0x55931aeefa88 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55931af24e70 <col:25> 'Iter' lvalue ParmVar 0x55931aeefb00 'end' 'Iter'
|     | `-CompoundStmt 0x55931af250d8 <col:30, line:325:9>
|     |   |-CallExpr 0x55931af25078 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55931af24f58 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55931af25048 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55931af24fd8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55931ae2d568 0x55931ae2d188 0x55931ae2cdb8 0x55931ae2c9d8 0x55931ae2c5f8 0x55931ae2c228
|     |   |   `-DeclRefExpr 0x55931af24fb8 <col:24> 'Iter' lvalue ParmVar 0x55931aeefa88 'begin' 'Iter'
|     |   `-UnaryOperator 0x55931af250c0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55931af250a0 <col:15> 'Iter' lvalue ParmVar 0x55931aeefa88 'begin' 'Iter'
|     `-ReturnStmt 0x55931af25138 <line:326:9, col:17>
|       `-UnaryOperator 0x55931af25120 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55931af25110 <col:17> 'Args *' this
|-CXXMethodDecl 0x55931aeefdc0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55931aeefd30 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55931aeeff08 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55931aeefe78 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55931aeeffd0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55931af25228 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55931af251c8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55931af25178 <col:9> '<bound member function type>' ->reset_from 0x55931af20c68
|   | | `-CXXThisExpr 0x55931af25168 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55931af251a8 <col:20> 'int' 0
|   `-ReturnStmt 0x55931af25218 <line:352:9, col:17>
|     `-UnaryOperator 0x55931af25200 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55931af251f0 <col:17> 'Args *' this
|-VarDecl 0x55931aef0088 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55931aef00f0 <col:38> 'int' 1
|-VarDecl 0x55931aef0180 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55931aef01e8 <col:39> 'int' 2
|-VarDecl 0x55931aef0278 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55931aef02e0 <col:39> 'int' 4
|-VarDecl 0x55931aef0370 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55931aef03d8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55931aef0758 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55931aef0450 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55931aef06b8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55931aef0500 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55931aef05a8 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x55931af25380 <col:43, line:371:5>
| |   `-ReturnStmt 0x55931af25370 <line:370:9, col:34>
| |     `-CallExpr 0x55931af25338 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55931af25258 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55931af252d8 <col:21> 'const char *' lvalue ParmVar 0x55931aef0500 'keyword' 'const char *'
| |       |-IntegerLiteral 0x55931af252f8 <col:30> 'int' 0
| |       `-DeclRefExpr 0x55931af25318 <col:33> 'T' lvalue ParmVar 0x55931aef05a8 'x' 'T &'
| |-CXXMethodDecl 0x55931af894f8 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, int &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x55931af89318 <col:16, col:28> col:28 keyword 'const char *'
| | `-ParmVarDecl 0x55931af893e8 <col:37, col:40> col:40 x 'int &'
| `-CXXMethodDecl 0x55931af89b38 <col:5, line:371:5> line:369:11 used read 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x55931af89958 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x55931af89a28 <col:37, col:40> col:40 x 'bool &'
|-FunctionTemplateDecl 0x55931aef0a88 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55931aef07c0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55931aef09e8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55931aef0870 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aef0918 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55931af254d0 <col:45, line:375:5>
|     `-ReturnStmt 0x55931af254c0 <line:374:9, col:42>
|       `-CallExpr 0x55931af25488 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af253a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af25428 <col:21> 'const char *' lvalue ParmVar 0x55931aef0870 'keyword' 'const char *'
|         |-DeclRefExpr 0x55931af25448 <col:30> 'const int' lvalue Var 0x55931aef0088 'mandatory' 'const int'
|         `-DeclRefExpr 0x55931af25468 <col:41> 'T' lvalue ParmVar 0x55931aef0918 'x' 'T &'
|-FunctionTemplateDecl 0x55931aef0db8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55931aef0af0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55931aef0d18 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55931aef0ba0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aef0c48 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55931af25620 <col:45, line:379:5>
|     `-ReturnStmt 0x55931af25610 <line:378:9, col:43>
|       `-CallExpr 0x55931af255d8 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af254f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af25578 <col:21> 'const char *' lvalue ParmVar 0x55931aef0ba0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55931af25598 <col:30> 'const int' lvalue Var 0x55931aef0180 'positional' 'const int'
|         `-DeclRefExpr 0x55931af255b8 <col:42> 'T' lvalue ParmVar 0x55931aef0c48 'x' 'T &'
|-FunctionTemplateDecl 0x55931aef10e8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55931aef0e20 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55931aef1048 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55931aef0ed0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aef0f78 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x55931af25820 <col:46, line:383:5>
|     `-ReturnStmt 0x55931af25810 <line:382:9, col:55>
|       `-CallExpr 0x55931af257d8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af25648 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af256c8 <col:21> 'const char *' lvalue ParmVar 0x55931aef0ed0 'keyword' 'const char *'
|         |-BinaryOperator 0x55931af25798 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55931af25748 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55931af25728 <col:30> 'const int' lvalue Var 0x55931aef0088 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55931af25780 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55931af25760 <col:42> 'const int' lvalue Var 0x55931aef0180 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55931af257b8 <col:54> 'T' lvalue ParmVar 0x55931aef0f78 'x' 'T &'
|-FunctionTemplateDecl 0x55931aef14e8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55931aef1150 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55931aef1448 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55931aef1200 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aef1280 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55931aef1328 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55931af25960 <col:54, line:388:5>
|     |-CallExpr 0x55931af258e8 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55931af25838 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55931af25878 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55931af25888 <col:30> 'const char *' lvalue ParmVar 0x55931aef1200 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55931af258a8 <col:39> 'int' lvalue ParmVar 0x55931aef1280 'flags' 'int'
|     | `-DeclRefExpr 0x55931af258c8 <col:46> 'T' lvalue ParmVar 0x55931aef1328 'x' 'T &'
|     `-ReturnStmt 0x55931af25950 <line:387:9, col:17>
|       `-UnaryOperator 0x55931af25938 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55931af25928 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55931aef1998 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55931aef1558 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55931aef15d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55931aef18f8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55931aef1698 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aef1738 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55931aef17d8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55931af25ad0 <col:74, line:403:5>
|     `-ReturnStmt 0x55931af25ac0 <line:402:9, col:56>
|       `-CallExpr 0x55931af25a80 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af25990 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af25a00 <col:28> 'const char *' lvalue ParmVar 0x55931aef1698 'keyword' 'const char *'
|         |-IntegerLiteral 0x55931af25a20 <col:37> 'int' 0
|         |-DeclRefExpr 0x55931af25a40 <col:40> 'T' lvalue ParmVar 0x55931aef1738 'x' 'T &'
|         `-DeclRefExpr 0x55931af25a60 <col:43> 'const V' lvalue ParmVar 0x55931aef17d8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55931aef1e08 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55931aef1a08 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55931aef1a88 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55931aef1d68 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55931aef1b48 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aef1be8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55931aef1c88 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55931af25c38 <col:76, line:407:5>
|     `-ReturnStmt 0x55931af25c28 <line:406:9, col:65>
|       `-CallExpr 0x55931af25be8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af25af8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af25b68 <col:28> 'const char *' lvalue ParmVar 0x55931aef1b48 'keyword' 'const char *'
|         |-DeclRefExpr 0x55931af25b88 <col:37> 'const int' lvalue Var 0x55931aef0180 'positional' 'const int'
|         |-DeclRefExpr 0x55931af25ba8 <col:49> 'T' lvalue ParmVar 0x55931aef1be8 'x' 'T &'
|         `-DeclRefExpr 0x55931af25bc8 <col:52> 'const V' lvalue ParmVar 0x55931aef1c88 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55931aef2358 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55931aef1e78 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55931aef1ef8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55931aef22b8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55931aef1fb8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aef2038 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55931aef20d8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55931aef2178 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55931af25da0 <col:85, line:412:5>
|     |-CallExpr 0x55931af25d20 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55931af25c50 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55931af25c90 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55931af25ca0 <col:37> 'const char *' lvalue ParmVar 0x55931aef1fb8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55931af25cc0 <col:46> 'int' lvalue ParmVar 0x55931aef2038 'flags' 'int'
|     | |-DeclRefExpr 0x55931af25ce0 <col:53> 'T' lvalue ParmVar 0x55931aef20d8 'x' 'T &'
|     | `-DeclRefExpr 0x55931af25d00 <col:56> 'const V' lvalue ParmVar 0x55931aef2178 'default_value' 'const V &'
|     `-ReturnStmt 0x55931af25d90 <line:411:9, col:17>
|       `-UnaryOperator 0x55931af25d78 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55931af25d68 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55931aef27e8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55931aef23d0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931aef2448 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55931aef2748 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55931aef2508 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aef2580 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55931aef2628 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55931af25f20 <col:53, line:425:5>
|     `-ReturnStmt 0x55931af25f10 <line:424:9, col:42>
|       `-CallExpr 0x55931af25ed0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af25dd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af25e50 <col:21> 'const char *' lvalue ParmVar 0x55931aef2508 'keyword' 'const char *'
|         |-IntegerLiteral 0x55931af25e70 <col:30> 'int' 0
|         |-DeclRefExpr 0x55931af25e90 <col:33> 'P' lvalue ParmVar 0x55931aef2580 'parser' 'P'
|         `-DeclRefExpr 0x55931af25eb0 <col:41> 'T' lvalue ParmVar 0x55931aef2628 'x' 'T &'
|-FunctionTemplateDecl 0x55931aef2c38 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55931aef2858 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931aef28d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55931aef2b98 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55931aef2998 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aef2a10 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55931aef2ab8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55931af26098 <col:55, line:429:5>
|     `-ReturnStmt 0x55931af26088 <line:428:9, col:50>
|       `-CallExpr 0x55931af26048 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af25f48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af25fc8 <col:21> 'const char *' lvalue ParmVar 0x55931aef2998 'keyword' 'const char *'
|         |-DeclRefExpr 0x55931af25fe8 <col:30> 'const int' lvalue Var 0x55931aef0088 'mandatory' 'const int'
|         |-DeclRefExpr 0x55931af26008 <col:41> 'P' lvalue ParmVar 0x55931aef2a10 'parser' 'P'
|         `-DeclRefExpr 0x55931af26028 <col:49> 'T' lvalue ParmVar 0x55931aef2ab8 'x' 'T &'
|-FunctionTemplateDecl 0x55931aef3088 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55931aef2ca8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931aef2d28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55931aef2fe8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55931aef2de8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aef2e60 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55931aef2f08 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55931af26210 <col:55, line:433:5>
|     `-ReturnStmt 0x55931af26200 <line:432:9, col:51>
|       `-CallExpr 0x55931af261c0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af260c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af26140 <col:21> 'const char *' lvalue ParmVar 0x55931aef2de8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55931af26160 <col:30> 'const int' lvalue Var 0x55931aef0180 'positional' 'const int'
|         |-DeclRefExpr 0x55931af26180 <col:42> 'P' lvalue ParmVar 0x55931aef2e60 'parser' 'P'
|         `-DeclRefExpr 0x55931af261a0 <col:50> 'T' lvalue ParmVar 0x55931aef2f08 'x' 'T &'
|-FunctionTemplateDecl 0x55931aef34d8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55931aef30f8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931aef3178 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55931aef3438 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55931aef3238 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aef32b0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55931aef3358 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55931af26438 <col:56, line:437:5>
|     `-ReturnStmt 0x55931af26428 <line:436:9, col:63>
|       `-CallExpr 0x55931af263e8 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af26238 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af262b8 <col:21> 'const char *' lvalue ParmVar 0x55931aef3238 'keyword' 'const char *'
|         |-BinaryOperator 0x55931af26388 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55931af26338 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55931af26318 <col:30> 'const int' lvalue Var 0x55931aef0088 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55931af26370 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55931af26350 <col:42> 'const int' lvalue Var 0x55931aef0180 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55931af263a8 <col:54> 'P' lvalue ParmVar 0x55931aef32b0 'parser' 'P'
|         `-DeclRefExpr 0x55931af263c8 <col:62> 'T' lvalue ParmVar 0x55931aef3358 'x' 'T &'
|-FunctionTemplateDecl 0x55931aef3a08 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55931aef3548 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931aef35c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55931aef3968 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55931aef3688 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aef3708 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55931aef3780 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55931aef3828 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55931af265a0 <col:64, line:442:5>
|     |-CallExpr 0x55931af26520 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55931af26450 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55931af26490 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55931af264a0 <col:30> 'const char *' lvalue ParmVar 0x55931aef3688 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55931af264c0 <col:39> 'int' lvalue ParmVar 0x55931aef3708 'flags' 'int'
|     | |-DeclRefExpr 0x55931af264e0 <col:46> 'P' lvalue ParmVar 0x55931aef3780 'parser' 'P'
|     | `-DeclRefExpr 0x55931af26500 <col:54> 'T' lvalue ParmVar 0x55931aef3828 'x' 'T &'
|     `-ReturnStmt 0x55931af26590 <line:441:9, col:17>
|       `-UnaryOperator 0x55931af26578 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55931af26568 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55931aef4008 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55931aef3a80 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931aef3af8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55931aef3b78 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55931aef3f68 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55931aef3c40 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aef3cb8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55931aef3d58 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55931aef3e28 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55931af26738 <col:84, line:458:5>
|     `-ReturnStmt 0x55931af26728 <line:457:9, col:64>
|       `-CallExpr 0x55931af266e0 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af265d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af26640 <col:28> 'const char *' lvalue ParmVar 0x55931aef3c40 'keyword' 'const char *'
|         |-IntegerLiteral 0x55931af26660 <col:37> 'int' 0
|         |-DeclRefExpr 0x55931af26680 <col:40> 'P' lvalue ParmVar 0x55931aef3cb8 'parser' 'P'
|         |-DeclRefExpr 0x55931af266a0 <col:48> 'T' lvalue ParmVar 0x55931aef3d58 'x' 'T &'
|         `-DeclRefExpr 0x55931af266c0 <col:51> 'const V' lvalue ParmVar 0x55931aef3e28 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55931aef4588 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55931aef4080 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931aef40f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55931aef4178 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55931aef44e8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55931aef4240 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aef42b8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55931aef4358 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55931aef43f8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55931af268c8 <col:86, line:462:5>
|     `-ReturnStmt 0x55931af268b8 <line:461:9, col:73>
|       `-CallExpr 0x55931af26870 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af26760 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af267d0 <col:28> 'const char *' lvalue ParmVar 0x55931aef4240 'keyword' 'const char *'
|         |-DeclRefExpr 0x55931af267f0 <col:37> 'const int' lvalue Var 0x55931aef0180 'positional' 'const int'
|         |-DeclRefExpr 0x55931af26810 <col:49> 'P' lvalue ParmVar 0x55931aef42b8 'parser' 'P'
|         |-DeclRefExpr 0x55931af26830 <col:57> 'T' lvalue ParmVar 0x55931aef4358 'x' 'T &'
|         `-DeclRefExpr 0x55931af26850 <col:60> 'const V' lvalue ParmVar 0x55931aef43f8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55931aef4be8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55931aef4600 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931aef4678 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55931aef46f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55931aef4b48 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55931aef47c0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aef4840 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55931aef48b8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55931aef4958 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55931aef49f8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55931af26a58 <col:95, line:467:5>
|     |-CallExpr 0x55931af269d0 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55931af268e0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55931af26920 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55931af26930 <col:37> 'const char *' lvalue ParmVar 0x55931aef47c0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55931af26950 <col:46> 'int' lvalue ParmVar 0x55931aef4840 'flags' 'int'
|     | |-DeclRefExpr 0x55931af26970 <col:53> 'P' lvalue ParmVar 0x55931aef48b8 'parser' 'P'
|     | |-DeclRefExpr 0x55931af26990 <col:61> 'T' lvalue ParmVar 0x55931aef4958 'x' 'T &'
|     | `-DeclRefExpr 0x55931af269b0 <col:64> 'const V' lvalue ParmVar 0x55931aef49f8 'default_value' 'const V &'
|     `-ReturnStmt 0x55931af26a48 <line:466:9, col:17>
|       `-UnaryOperator 0x55931af26a30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55931af26a20 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55931aef9078 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55931aef4c68 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931aef4ce8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55931aef8c18 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55931aef8fd8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55931aef8ce0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aef8d58 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55931aef8df8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55931aef8e98 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55931af26c00 <col:63, line:481:5>
|     `-ReturnStmt 0x55931af26bf0 <line:480:9, col:47>
|       `-CallExpr 0x55931af26ba8 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af26a88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af26b08 <col:21> 'const char *' lvalue ParmVar 0x55931aef8ce0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55931af26b28 <col:30> 'int' 0
|         |-DeclRefExpr 0x55931af26b48 <col:33> 'P' lvalue ParmVar 0x55931aef8d58 'parser' 'P'
|         |-DeclRefExpr 0x55931af26b68 <col:41> 'T1' lvalue ParmVar 0x55931aef8df8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55931af26b88 <col:45> 'T2' lvalue ParmVar 0x55931aef8e98 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55931aef95f8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55931aef90f0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931aef9168 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55931aef91e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55931aef9558 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55931aef92b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aef9328 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55931aef93c8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55931aef9468 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55931af26da0 <col:65, line:485:5>
|     `-ReturnStmt 0x55931af26d90 <line:484:9, col:55>
|       `-CallExpr 0x55931af26d48 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af26c28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af26ca8 <col:21> 'const char *' lvalue ParmVar 0x55931aef92b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55931af26cc8 <col:30> 'const int' lvalue Var 0x55931aef0088 'mandatory' 'const int'
|         |-DeclRefExpr 0x55931af26ce8 <col:41> 'P' lvalue ParmVar 0x55931aef9328 'parser' 'P'
|         |-DeclRefExpr 0x55931af26d08 <col:49> 'T1' lvalue ParmVar 0x55931aef93c8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55931af26d28 <col:53> 'T2' lvalue ParmVar 0x55931aef9468 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55931aef9b78 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55931aef9670 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931aef96e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55931aef9768 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55931aef9ad8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55931aef9830 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aef98a8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55931aef9948 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55931aef99e8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55931af26f40 <col:65, line:489:5>
|     `-ReturnStmt 0x55931af26f30 <line:488:9, col:56>
|       `-CallExpr 0x55931af26ee8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af26dc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af26e48 <col:21> 'const char *' lvalue ParmVar 0x55931aef9830 'keyword' 'const char *'
|         |-DeclRefExpr 0x55931af26e68 <col:30> 'const int' lvalue Var 0x55931aef0180 'positional' 'const int'
|         |-DeclRefExpr 0x55931af26e88 <col:42> 'P' lvalue ParmVar 0x55931aef98a8 'parser' 'P'
|         |-DeclRefExpr 0x55931af26ea8 <col:50> 'T1' lvalue ParmVar 0x55931aef9948 'x1' 'T1 &'
|         `-DeclRefExpr 0x55931af26ec8 <col:54> 'T2' lvalue ParmVar 0x55931aef99e8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55931aefa0f8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55931aef9bf0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931aef9c68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55931aef9ce8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55931aefa058 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55931aef9db0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aef9e28 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55931aef9ec8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55931aef9f68 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55931af27190 <col:66, line:493:5>
|     `-ReturnStmt 0x55931af27180 <line:492:9, col:68>
|       `-CallExpr 0x55931af27138 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af26f68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af26fe8 <col:21> 'const char *' lvalue ParmVar 0x55931aef9db0 'keyword' 'const char *'
|         |-BinaryOperator 0x55931af270b8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55931af27068 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55931af27048 <col:30> 'const int' lvalue Var 0x55931aef0088 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55931af270a0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55931af27080 <col:42> 'const int' lvalue Var 0x55931aef0180 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55931af270d8 <col:54> 'P' lvalue ParmVar 0x55931aef9e28 'parser' 'P'
|         |-DeclRefExpr 0x55931af270f8 <col:62> 'T1' lvalue ParmVar 0x55931aef9ec8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55931af27118 <col:66> 'T2' lvalue ParmVar 0x55931aef9f68 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55931aefa758 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55931aefa170 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931aefa1e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55931aefa268 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55931aefa6b8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55931aefa330 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aefa3b0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55931aefa428 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55931aefa4c8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55931aefa568 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55931af27320 <col:74, line:498:5>
|     |-CallExpr 0x55931af27298 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55931af271a8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55931af271e8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55931af271f8 <col:30> 'const char *' lvalue ParmVar 0x55931aefa330 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55931af27218 <col:39> 'int' lvalue ParmVar 0x55931aefa3b0 'flags' 'int'
|     | |-DeclRefExpr 0x55931af27238 <col:46> 'P' lvalue ParmVar 0x55931aefa428 'parser' 'P'
|     | |-DeclRefExpr 0x55931af27258 <col:54> 'T1' lvalue ParmVar 0x55931aefa4c8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55931af27278 <col:58> 'T2' lvalue ParmVar 0x55931aefa568 'x2' 'T2 &'
|     `-ReturnStmt 0x55931af27310 <line:497:9, col:17>
|       `-UnaryOperator 0x55931af272f8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55931af272e8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55931aefaab8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55931aefa7d8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55931aefaa18 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55931aefa890 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aefa908 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55931af27468 <col:52, line:509:5>
|     `-ReturnStmt 0x55931af27458 <line:508:9, col:44>
|       `-CallExpr 0x55931af27420 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af27350 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af273c0 <col:26> 'const char *' lvalue ParmVar 0x55931aefa890 'keyword' 'const char *'
|         |-IntegerLiteral 0x55931af273e0 <col:35> 'int' 0
|         `-DeclRefExpr 0x55931af27400 <col:38> 'P' lvalue ParmVar 0x55931aefa908 'parser' 'P'
|-FunctionTemplateDecl 0x55931aefadb8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55931aefab20 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55931aefad18 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55931aefabd0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aefac48 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55931af275a8 <col:54, line:513:5>
|     `-ReturnStmt 0x55931af27598 <line:512:9, col:52>
|       `-CallExpr 0x55931af27560 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af27490 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af27500 <col:26> 'const char *' lvalue ParmVar 0x55931aefabd0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55931af27520 <col:35> 'const int' lvalue Var 0x55931aef0088 'mandatory' 'const int'
|         `-DeclRefExpr 0x55931af27540 <col:46> 'P' lvalue ParmVar 0x55931aefac48 'parser' 'P'
|-FunctionTemplateDecl 0x55931aefb0b8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55931aefae20 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55931aefb018 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55931aefaed0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aefaf48 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55931af276e8 <col:54, line:517:5>
|     `-ReturnStmt 0x55931af276d8 <line:516:9, col:53>
|       `-CallExpr 0x55931af276a0 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af275d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af27640 <col:26> 'const char *' lvalue ParmVar 0x55931aefaed0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55931af27660 <col:35> 'const int' lvalue Var 0x55931aef0180 'positional' 'const int'
|         `-DeclRefExpr 0x55931af27680 <col:47> 'P' lvalue ParmVar 0x55931aefaf48 'parser' 'P'
|-FunctionTemplateDecl 0x55931aefb3b8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55931aefb120 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55931aefb318 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55931aefb1d0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aefb248 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55931af278d8 <col:55, line:521:5>
|     `-ReturnStmt 0x55931af278c8 <line:520:9, col:65>
|       `-CallExpr 0x55931af27890 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af27710 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af27780 <col:26> 'const char *' lvalue ParmVar 0x55931aefb1d0 'keyword' 'const char *'
|         |-BinaryOperator 0x55931af27850 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55931af27800 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55931af277e0 <col:35> 'const int' lvalue Var 0x55931aef0088 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55931af27838 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55931af27818 <col:47> 'const int' lvalue Var 0x55931aef0180 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55931af27870 <col:59> 'P' lvalue ParmVar 0x55931aefb248 'parser' 'P'
|-FunctionTemplateDecl 0x55931aefb788 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55931aefb420 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55931aefb6e8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55931aefb4d0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aefb550 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55931aefb5c8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55931af27a18 <col:63, line:526:5>
|     |-CallExpr 0x55931af279a0 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55931af278f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55931af27930 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55931af27940 <col:35> 'const char *' lvalue ParmVar 0x55931aefb4d0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55931af27960 <col:44> 'int' lvalue ParmVar 0x55931aefb550 'flags' 'int'
|     | `-DeclRefExpr 0x55931af27980 <col:51> 'P' lvalue ParmVar 0x55931aefb5c8 'parser' 'P'
|     `-ReturnStmt 0x55931af27a08 <line:525:9, col:17>
|       `-UnaryOperator 0x55931af279f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55931af279e0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55931aefbbd8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55931aefb7f8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931aefb878 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55931aefbb38 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55931aefb938 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aefb9b0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55931aefba58 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55931af27b70 <col:58, line:541:5>
|     `-ReturnStmt 0x55931af27b60 <line:540:9, col:39>
|       `-CallExpr 0x55931af27b28 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af27a48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af27ac8 <col:21> 'const char *' lvalue ParmVar 0x55931aefb938 'keyword' 'const char *'
|         |-DeclRefExpr 0x55931af27ae8 <col:30> 'P' lvalue ParmVar 0x55931aefb9b0 'parser' 'P'
|         `-DeclRefExpr 0x55931af27b08 <col:38> 'T' lvalue ParmVar 0x55931aefba58 'x' 'T &'
|-FunctionTemplateDecl 0x55931aefc028 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55931aefbc48 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931aefbcc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55931aefbf88 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55931aefbd88 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aefbe00 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55931aefbea8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55931af27ca8 <col:60, line:545:5>
|     `-ReturnStmt 0x55931af27c98 <line:544:9, col:41>
|       `-CallExpr 0x55931af27c60 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af27b98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af27c00 <col:23> 'const char *' lvalue ParmVar 0x55931aefbd88 'keyword' 'const char *'
|         |-DeclRefExpr 0x55931af27c20 <col:32> 'P' lvalue ParmVar 0x55931aefbe00 'parser' 'P'
|         `-DeclRefExpr 0x55931af27c40 <col:40> 'T' lvalue ParmVar 0x55931aefbea8 'x' 'T &'
|-FunctionTemplateDecl 0x55931aefc478 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55931aefc098 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931aefc118 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55931aefc3d8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55931aefc1d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aefc250 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55931aefc2f8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55931af27de0 <col:60, line:549:5>
|     `-ReturnStmt 0x55931af27dd0 <line:548:9, col:41>
|       `-CallExpr 0x55931af27d98 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af27cd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af27d38 <col:23> 'const char *' lvalue ParmVar 0x55931aefc1d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55931af27d58 <col:32> 'P' lvalue ParmVar 0x55931aefc250 'parser' 'P'
|         `-DeclRefExpr 0x55931af27d78 <col:40> 'T' lvalue ParmVar 0x55931aefc2f8 'x' 'T &'
|-FunctionTemplateDecl 0x55931aefc8c8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55931aefc4e8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931aefc568 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55931aefc828 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55931aefc628 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aefc6a0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55931aefc748 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55931af27f18 <col:61, line:553:5>
|     `-ReturnStmt 0x55931af27f08 <line:552:9, col:42>
|       `-CallExpr 0x55931af27ed0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af27e08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af27e70 <col:24> 'const char *' lvalue ParmVar 0x55931aefc628 'keyword' 'const char *'
|         |-DeclRefExpr 0x55931af27e90 <col:33> 'P' lvalue ParmVar 0x55931aefc6a0 'parser' 'P'
|         `-DeclRefExpr 0x55931af27eb0 <col:41> 'T' lvalue ParmVar 0x55931aefc748 'x' 'T &'
|-FunctionTemplateDecl 0x55931aefcda8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55931aefc938 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931aefc9b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55931aefcd08 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55931aefca78 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aefcaf8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55931aefcb70 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55931aefcc18 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55931af28090 <col:69, line:557:5>
|     `-ReturnStmt 0x55931af28080 <line:556:9, col:46>
|       `-CallExpr 0x55931af28040 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af27f40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af27fc0 <col:21> 'const char *' lvalue ParmVar 0x55931aefca78 'keyword' 'const char *'
|         |-DeclRefExpr 0x55931af27fe0 <col:30> 'int' lvalue ParmVar 0x55931aefcaf8 'flags' 'int'
|         |-DeclRefExpr 0x55931af28000 <col:37> 'P' lvalue ParmVar 0x55931aefcb70 'parser' 'P'
|         `-DeclRefExpr 0x55931af28020 <col:45> 'T' lvalue ParmVar 0x55931aefcc18 'x' 'T &'
|-FunctionTemplateDecl 0x55931aefd0b8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55931aefce20 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55931aefd018 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55931aefced0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aefcf48 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55931af281d0 <col:56, line:571:5>
|     `-ReturnStmt 0x55931af281c0 <line:570:9, col:48>
|       `-CallExpr 0x55931af28188 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af280b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af28128 <col:30> 'const char *' lvalue ParmVar 0x55931aefced0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55931af28148 <col:39> 'int' 0
|         `-DeclRefExpr 0x55931af28168 <col:42> 'P' lvalue ParmVar 0x55931aefcf48 'parser' 'P'
|-FunctionTemplateDecl 0x55931aefd448 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55931aefd120 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55931aefd3a8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55931aefd1d0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aefd250 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55931aefd2c8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55931af283a0 <col:67, line:576:5>
|     |-CallExpr 0x55931af28328 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55931af281e8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55931af28228 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55931af28238 <col:39> 'const char *' lvalue ParmVar 0x55931aefd1d0 'keyword' 'const char *'
|     | |-BinaryOperator 0x55931af282e8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55931af28298 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55931af28258 <col:48> 'int' lvalue ParmVar 0x55931aefd250 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55931af282d0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55931af282b0 <col:56> 'const int' lvalue Var 0x55931aef0370 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55931af28308 <col:68> 'P' lvalue ParmVar 0x55931aefd2c8 'parser' 'P'
|     `-ReturnStmt 0x55931af28390 <line:575:9, col:17>
|       `-UnaryOperator 0x55931af28378 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55931af28368 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55931aefd898 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55931aefd4b8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931aefd538 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55931aefd7f8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55931aefd5f8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aefd670 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55931aefd718 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55931af28510 <col:62, line:592:5>
|     `-ReturnStmt 0x55931af28500 <line:591:9, col:51>
|       `-CallExpr 0x55931af284c0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af283d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af28440 <col:30> 'const char *' lvalue ParmVar 0x55931aefd5f8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55931af28460 <col:39> 'int' 0
|         |-DeclRefExpr 0x55931af28480 <col:42> 'P' lvalue ParmVar 0x55931aefd670 'parser' 'P'
|         `-DeclRefExpr 0x55931af284a0 <col:50> 'T' lvalue ParmVar 0x55931aefd718 'x' 'T &'
|-FunctionTemplateDecl 0x55931aefdd78 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55931aefd908 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931aefd988 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55931aefdcd8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55931aefda48 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aefdac8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55931aefdb40 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55931aefdbe8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55931af28708 <col:73, line:597:5>
|     |-CallExpr 0x55931af28688 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55931af28528 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55931af28568 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55931af28578 <col:39> 'const char *' lvalue ParmVar 0x55931aefda48 'keyword' 'const char *'
|     | |-BinaryOperator 0x55931af28628 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55931af285d8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55931af28598 <col:48> 'int' lvalue ParmVar 0x55931aefdac8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55931af28610 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55931af285f0 <col:56> 'const int' lvalue Var 0x55931aef0370 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55931af28648 <col:68> 'P' lvalue ParmVar 0x55931aefdb40 'parser' 'P'
|     | `-DeclRefExpr 0x55931af28668 <col:76> 'T' lvalue ParmVar 0x55931aefdbe8 'x' 'T &'
|     `-ReturnStmt 0x55931af286f8 <line:596:9, col:17>
|       `-UnaryOperator 0x55931af286e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55931af286d0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55931aefe328 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55931aefddf0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931aefde68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55931aefe288 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55931aefdf28 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aefdfa0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55931aefe160 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55931af28878 <col:65, line:614:5>
|     `-ReturnStmt 0x55931af28868 <line:613:9, col:46>
|       `-CallExpr 0x55931af28828 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af28738 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af287a8 <col:25> 'const char *' lvalue ParmVar 0x55931aefdf28 'keyword' 'const char *'
|         |-IntegerLiteral 0x55931af287c8 <col:34> 'int' 0
|         |-DeclRefExpr 0x55931af287e8 <col:37> 'P' lvalue ParmVar 0x55931aefdfa0 'parser' 'P'
|         `-DeclRefExpr 0x55931af28808 <col:45> 'Vector<T>' lvalue ParmVar 0x55931aefe160 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55931aefe758 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55931aefe398 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55931aefe6b8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55931aefe450 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aefe5a0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55931af28a90 <col:55, line:618:5>
|     `-ReturnStmt 0x55931af28a80 <line:617:9, col:55>
|       `-CallExpr 0x55931af28a40 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af288a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af28910 <col:25> 'const char *' lvalue ParmVar 0x55931aefe450 'keyword' 'const char *'
|         |-IntegerLiteral 0x55931af28930 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55931af28a00 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55931af28a20 <col:54> 'Vector<T>' lvalue ParmVar 0x55931aefe5a0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55931aefed28 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55931aefe7c0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931aefe838 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55931aefec88 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55931aefe8f8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aefe978 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55931aefe9f0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55931aefeb40 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55931af28c88 <col:76, line:623:5>
|     |-CallExpr 0x55931af28c08 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55931af28aa8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55931af28ae8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55931af28af8 <col:34> 'const char *' lvalue ParmVar 0x55931aefe8f8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55931af28ba8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55931af28b58 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55931af28b18 <col:43> 'int' lvalue ParmVar 0x55931aefe978 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55931af28b90 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55931af28b70 <col:51> 'const int' lvalue Var 0x55931aef0370 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55931af28bc8 <col:63> 'P' lvalue ParmVar 0x55931aefe9f0 'parser' 'P'
|     | `-DeclRefExpr 0x55931af28be8 <col:71> 'Vector<T>' lvalue ParmVar 0x55931aefeb40 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55931af28c78 <line:622:9, col:17>
|       `-UnaryOperator 0x55931af28c60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55931af28c50 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55931aeff268 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55931aefeda0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931aefee18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55931aeff1c8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55931aefeed8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931aefef58 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55931aeff0a0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55931af28ef0 <col:66, line:627:5>
|     `-ReturnStmt 0x55931af28ee0 <line:626:9, col:59>
|       `-CallExpr 0x55931af28ea0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55931af28cb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55931af28d28 <col:25> 'const char *' lvalue ParmVar 0x55931aefeed8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55931af28d48 <col:34> 'int' lvalue ParmVar 0x55931aefef58 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55931af28e60 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55931af28e80 <col:58> 'Vector<T>' lvalue ParmVar 0x55931aeff0a0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55931aeff2f8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55931af28f70 <col:25, line:633:5>
|   `-ReturnStmt 0x55931af28f60 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55931af28f48 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55931af28f18 <col:16> 'const bool' lvalue ->_status 0x55931af0b4c8
|         `-CXXThisExpr 0x55931af28f08 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55931aeff478 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55931aeff3b0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55931af29058 <col:27, line:639:5>
|   |-BinaryOperator 0x55931af29000 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55931af28f88 <col:9> 'bool' lvalue ParmVar 0x55931aeff3b0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55931af28fe8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55931af28fb8 <col:13> 'bool' lvalue ->_status 0x55931af0b4c8
|   |     `-CXXThisExpr 0x55931af28fa8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55931af29048 <line:638:9, col:17>
|     `-UnaryOperator 0x55931af29030 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55931af29020 <col:17> 'Args *' this
|-CXXMethodDecl 0x55931aeff5f8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55931aeff538 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55931af29148 <col:39, line:644:5>
|   |-BinaryOperator 0x55931af290f0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55931af29078 <col:9> 'bool' lvalue ParmVar 0x55931aeff538 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55931af290d8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55931af290a8 <col:13> 'const bool' lvalue ->_status 0x55931af0b4c8
|   |     `-CXXThisExpr 0x55931af29098 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55931af29138 <line:643:9, col:17>
|     `-UnaryOperator 0x55931af29120 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55931af29110 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55931aeff6c0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55931af291f0 <col:30, line:651:5>
|   `-ReturnStmt 0x55931af291e0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55931af291c8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55931af29198 <col:16> 'bool' lvalue ->_read_status 0x55931aee8aa0
|         `-ImplicitCastExpr 0x55931af29178 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55931af29168 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55931aeff808 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55931aeff778 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55931af292f8 <col:32, line:658:5>
|   |-BinaryOperator 0x55931af292a0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55931af29208 <col:9> 'bool' lvalue ParmVar 0x55931aeff778 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55931af29288 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55931af29258 <col:13> 'bool' lvalue ->_read_status 0x55931aee8aa0
|   |     `-ImplicitCastExpr 0x55931af29238 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55931af29228 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55931af292e8 <line:657:9, col:17>
|     `-UnaryOperator 0x55931af292d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55931af292c0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55931aeff958 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55931aeff8c8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55931af29408 <col:44, line:663:5>
|   |-BinaryOperator 0x55931af293b0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55931af29318 <col:9> 'bool' lvalue ParmVar 0x55931aeff8c8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55931af29398 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55931af29368 <col:13> 'bool' lvalue ->_read_status 0x55931aee8aa0
|   |     `-ImplicitCastExpr 0x55931af29348 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55931af29338 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55931af293f8 <line:662:9, col:17>
|     `-UnaryOperator 0x55931af293e0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55931af293d0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55931aeffa20 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55931aeffae8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55931aeffbb0 <line:684:5, col:17> col:9 used consume 'int ()'
|-CXXMethodDecl 0x55931aeffc78 <line:693:5, col:18> col:9 complete 'int ()'
|-FunctionTemplateDecl 0x55931aefff88 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55931aeffd18 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55931aeffee8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55931aeffdf8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55931af297c0 <col:19, line:706:5>
|     `-IfStmt 0x55931af29798 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55931af29508 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55931af296c8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55931af29698 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55931af29658 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55931af29560 <col:42> '<bound member function type>' ->simple_slot 0x55931af24250
|       |     | `-CXXThisExpr 0x55931af29550 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55931af295f8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55931af295b0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55931ac76468
|       |     | `-DeclRefExpr 0x55931af29590 <col:55> 'T' lvalue ParmVar 0x55931aeffdf8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55931af29638 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55931af29788 <line:705:13, col:34>
|         `-CallExpr 0x55931af29760 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55931af296e8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55931af29740 <col:33> 'T' lvalue ParmVar 0x55931aeffdf8 'x' 'T &'
|-FunctionTemplateDecl 0x55931af00258 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55931aefffe8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55931af001b8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55931af000c8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55931af29ba0 <col:31, line:717:5>
|     |-DeclStmt 0x55931af29900 <line:713:9, col:23>
|     | `-VarDecl 0x55931af297e8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55931af298d8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55931af29860 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55931af298b8 <col:21> 'T' lvalue ParmVar 0x55931af000c8 'x' 'T &'
|     |-IfStmt 0x55931af29b50 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55931af299f8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55931af29b30 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55931af29ad0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55931af29a60 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55931ae2d568 0x55931ae2d188 0x55931ae2cdb8 0x55931ae2c9d8 0x55931ae2c5f8 0x55931ae2c228
|     |   | `-DeclRefExpr 0x55931af29a40 <col:14> 'T *' lvalue Var 0x55931af297e8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55931af29b10 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55931af29b88 <line:716:9, col:16>
|       `-DeclRefExpr 0x55931af29b68 <col:16> 'T *' lvalue Var 0x55931af297e8 's' 'T *'
|-FunctionTemplateDecl 0x55931af00668 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55931af002b8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55931af00338 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55931af005c8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55931af00418 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55931af004b8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55931af29eb0 <col:37, line:726:5>
|     |-IfStmt 0x55931af29e40 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55931af29e60 <line:723:13, col:26>
|     | | `-VarDecl 0x55931af29c08 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55931af29cf8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55931af29c80 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55931af29cd8 <col:25> 'T' lvalue ParmVar 0x55931af00418 'x' 'T &'
|     | |-DeclRefExpr 0x55931af29d20 <col:16> 'T *' lvalue Var 0x55931af29c08 's' 'T *'
|     | `-BinaryOperator 0x55931af29e20 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55931af29dd0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55931af29d60 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55931ae2d568 0x55931ae2d188 0x55931ae2cdb8 0x55931ae2c9d8 0x55931ae2c5f8 0x55931ae2c228
|     |   | `-DeclRefExpr 0x55931af29d40 <col:14> 'T *' lvalue Var 0x55931af29c08 's' 'T *'
|     |   `-DeclRefExpr 0x55931af29e00 <col:18> 'const V' lvalue ParmVar 0x55931af004b8 'value' 'const V &'
|     `-ReturnStmt 0x55931af29ea0 <line:725:9, col:17>
|       `-UnaryOperator 0x55931af29e88 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55931af29e78 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55931af00a68 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55931af006d0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55931af009c8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55931af00780 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931af00800 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55931af008a8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55931af2acd0 <col:65, line:737:5>
|     |-DeclStmt 0x55931af29f48 <line:732:9, col:26>
|     | `-VarDecl 0x55931af29ee0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55931af2ac98 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55931af2acb8 <line:733:13, col:58>
|       | `-VarDecl 0x55931af29f70 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55931af2a150 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55931af2a120 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55931af2a108 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55931af2a0e8 <col:26, col:58> 'String' (CXXTemporary 0x55931af2a0e8)
|       |           `-CXXMemberCallExpr 0x55931af2a078 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55931af29fe8 <col:26> '<bound member function type>' ->find 0x55931af20f38
|       |             | `-CXXThisExpr 0x55931af29fd8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55931af2a0b0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55931af2a018 <col:31> 'const char *' lvalue ParmVar 0x55931af00780 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55931af2a0c8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55931af2a038 <col:40> 'int' lvalue ParmVar 0x55931af00800 'flags' 'int'
|       |             `-DeclRefExpr 0x55931af2a058 <col:47> 'Args::Slot *' lvalue Var 0x55931af29ee0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55931af2a208 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55931af2a1f0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55931af2a1d0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55931af2a1a0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55931ac38428
|       |       `-ImplicitCastExpr 0x55931af2a188 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55931af2a168 <col:20> 'String' lvalue Var 0x55931af29f70 'str' 'String'
|       `-CompoundStmt 0x55931af2ac78 <col:61, line:736:9>
|         |-DeclStmt 0x55931af2a6c0 <line:734:13, col:76>
|         | `-VarDecl 0x55931af2a258 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55931af2a690 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55931af2a600 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55931af2a648 <col:60> 'T' lvalue ParmVar 0x55931af008a8 'variable' 'T &'
|         |     `-UnaryOperator 0x55931af2a678 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55931af2a668 <col:71> 'Args *' this
|         `-CallExpr 0x55931af2ac48 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55931af2a6e8 <col:13> '<bound member function type>' ->postparse 0x55931af21148
|           | `-CXXThisExpr 0x55931af2a6d8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55931af2ac08 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55931af2a718 <col:23> 'T *' lvalue Var 0x55931af2a258 's' 'T *'
|           | `-CallExpr 0x55931af2abc8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55931af2a9a0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55931af2aaa0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55931af2aac0 <col:86> 'String' lvalue Var 0x55931af29f70 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55931af2ab70 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55931af2ab00 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55931ae2d568 0x55931ae2d188 0x55931ae2cdb8 0x55931ae2c9d8 0x55931ae2c5f8 0x55931ae2c228
|           |   | `-DeclRefExpr 0x55931af2aae0 <col:92> 'T *' lvalue Var 0x55931af2a258 's' 'T *'
|           |   `-UnaryOperator 0x55931af2abb0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55931af2aba0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55931af2ac28 <col:103> 'Args::Slot *' lvalue Var 0x55931af29ee0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55931af07348 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55931af00ad8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55931af00b58 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55931af072a8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55931af06fa0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931af07020 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55931af070c8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55931af07168 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55931af2bb70 <col:88, line:745:5>
|     |-DeclStmt 0x55931af2ad68 <line:741:9, col:26>
|     | `-VarDecl 0x55931af2ad00 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55931af2af88 <line:742:9, col:55>
|     | `-VarDecl 0x55931af2ad90 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55931af2af70 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55931af2af40 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55931af2af28 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55931af2af08 <col:22, col:54> 'String' (CXXTemporary 0x55931af2af08)
|     |           `-CXXMemberCallExpr 0x55931af2ae98 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55931af2ae08 <col:22> '<bound member function type>' ->find 0x55931af20f38
|     |             | `-CXXThisExpr 0x55931af2adf8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55931af2aed0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55931af2ae38 <col:27> 'const char *' lvalue ParmVar 0x55931af06fa0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55931af2aee8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55931af2ae58 <col:36> 'int' lvalue ParmVar 0x55931af07020 'flags' 'int'
|     |             `-DeclRefExpr 0x55931af2ae78 <col:43> 'Args::Slot *' lvalue Var 0x55931af2ad00 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55931af2b360 <line:743:9, col:72>
|     | `-VarDecl 0x55931af2afd8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55931af2b330 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55931af2b2a0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55931af2b2e8 <col:56> 'T' lvalue ParmVar 0x55931af070c8 'variable' 'T &'
|     |     `-UnaryOperator 0x55931af2b318 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55931af2b308 <col:67> 'Args *' this
|     `-CallExpr 0x55931af2bb40 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55931af2b388 <col:9> '<bound member function type>' ->postparse 0x55931af21148
|       | `-CXXThisExpr 0x55931af2b378 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55931af2bb00 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55931af2b3b8 <col:19> 'T *' lvalue Var 0x55931af2afd8 's' 'T *'
|       | `-ParenExpr 0x55931af2bae0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55931af2bab0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55931af2ba98 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55931af2ba80 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55931af2ba60 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55931af2ba30 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55931ac38428
|       |     |       `-ImplicitCastExpr 0x55931af2ba18 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55931af2b3d8 <col:25> 'String' lvalue Var 0x55931af2ad90 'str' 'String'
|       |     |-CallExpr 0x55931af2b888 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55931af2b660 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55931af2b760 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55931af2b780 <col:89> 'String' lvalue Var 0x55931af2ad90 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55931af2b830 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55931af2b7c0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55931ae2d568 0x55931ae2d188 0x55931ae2cdb8 0x55931ae2c9d8 0x55931ae2c5f8 0x55931ae2c228
|       |     | | `-DeclRefExpr 0x55931af2b7a0 <col:95> 'T *' lvalue Var 0x55931af2afd8 's' 'T *'
|       |     | `-UnaryOperator 0x55931af2b870 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55931af2b860 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55931af2b9f8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55931af2b9d8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55931af2b9a8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55931af2b958 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55931af2b8e8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55931ae2d568 0x55931ae2d188 0x55931ae2cdb8 0x55931ae2c9d8 0x55931ae2c5f8 0x55931ae2c228
|       |         | | `-DeclRefExpr 0x55931af2b8c8 <col:109> 'T *' lvalue Var 0x55931af2afd8 's' 'T *'
|       |         | `-DeclRefExpr 0x55931af2b988 <col:113> 'const V' lvalue ParmVar 0x55931af07168 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55931af2b9c8 <col:120> 'bool' true
|       `-DeclRefExpr 0x55931af2bb20 <col:128> 'Args::Slot *' lvalue Var 0x55931af2ad00 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55931af07878 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55931af073c0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931af07438 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55931af077d8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55931af074f8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931af07578 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55931af075f0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55931af07698 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55931af2e968 <col:75, line:754:5>
|     |-DeclStmt 0x55931af2de18 <line:749:9, col:26>
|     | `-VarDecl 0x55931af2ddb0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55931af2e930 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55931af2e950 <line:750:13, col:58>
|       | `-VarDecl 0x55931af2de40 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55931af2e020 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55931af2dff0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55931af2dfd8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55931af2dfb8 <col:26, col:58> 'String' (CXXTemporary 0x55931af2dfb8)
|       |           `-CXXMemberCallExpr 0x55931af2df48 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55931af2deb8 <col:26> '<bound member function type>' ->find 0x55931af20f38
|       |             | `-CXXThisExpr 0x55931af2dea8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55931af2df80 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55931af2dee8 <col:31> 'const char *' lvalue ParmVar 0x55931af074f8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55931af2df98 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55931af2df08 <col:40> 'int' lvalue ParmVar 0x55931af07578 'flags' 'int'
|       |             `-DeclRefExpr 0x55931af2df28 <col:47> 'Args::Slot *' lvalue Var 0x55931af2ddb0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55931af2e0d8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55931af2e0c0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55931af2e0a0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55931af2e070 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55931ac38428
|       |       `-ImplicitCastExpr 0x55931af2e058 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55931af2e038 <col:20> 'String' lvalue Var 0x55931af2de40 'str' 'String'
|       `-CompoundStmt 0x55931af2e910 <col:61, line:753:9>
|         |-DeclStmt 0x55931af2e4b0 <line:751:13, col:63>
|         | `-VarDecl 0x55931af2e128 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55931af2e480 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55931af2e3f0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55931af2e438 <col:47> 'T' lvalue ParmVar 0x55931af07698 'variable' 'T &'
|         |     `-UnaryOperator 0x55931af2e468 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55931af2e458 <col:58> 'Args *' this
|         `-CallExpr 0x55931af2e8e0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55931af2e4d8 <col:13> '<bound member function type>' ->postparse 0x55931af21148
|           | `-CXXThisExpr 0x55931af2e4c8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55931af2e8a0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55931af2e508 <col:23> 'T *' lvalue Var 0x55931af2e128 's' 'T *'
|           | `-CallExpr 0x55931af2e860 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55931af2e6f0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55931af2e738 <col:56> 'P' lvalue ParmVar 0x55931af075f0 'parser' 'P'
|           |   |-DeclRefExpr 0x55931af2e758 <col:64> 'String' lvalue Var 0x55931af2de40 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55931af2e808 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55931af2e798 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55931ae2d568 0x55931ae2d188 0x55931ae2cdb8 0x55931ae2c9d8 0x55931ae2c5f8 0x55931ae2c228
|           |   | `-DeclRefExpr 0x55931af2e778 <col:70> 'T *' lvalue Var 0x55931af2e128 's' 'T *'
|           |   `-UnaryOperator 0x55931af2e848 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55931af2e838 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55931af2e8c0 <col:81> 'Args::Slot *' lvalue Var 0x55931af2ddb0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55931af07ed8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55931af078f0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55931af07968 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55931af079e8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55931af07e38 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55931af07ab0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931af07b30 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55931af07ba8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55931af07c48 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55931af07ce8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55931af2f6f8 <col:98, line:762:5>
|     |-DeclStmt 0x55931af2ea00 <line:758:9, col:26>
|     | `-VarDecl 0x55931af2e998 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55931af2ec20 <line:759:9, col:55>
|     | `-VarDecl 0x55931af2ea28 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55931af2ec08 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55931af2ebd8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55931af2ebc0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55931af2eba0 <col:22, col:54> 'String' (CXXTemporary 0x55931af2eba0)
|     |           `-CXXMemberCallExpr 0x55931af2eb30 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55931af2eaa0 <col:22> '<bound member function type>' ->find 0x55931af20f38
|     |             | `-CXXThisExpr 0x55931af2ea90 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55931af2eb68 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55931af2ead0 <col:27> 'const char *' lvalue ParmVar 0x55931af07ab0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55931af2eb80 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55931af2eaf0 <col:36> 'int' lvalue ParmVar 0x55931af07b30 'flags' 'int'
|     |             `-DeclRefExpr 0x55931af2eb10 <col:43> 'Args::Slot *' lvalue Var 0x55931af2e998 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55931af2f040 <line:760:9, col:59>
|     | `-VarDecl 0x55931af2ec78 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55931af2f010 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55931af2ef80 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55931af2efc8 <col:43> 'T' lvalue ParmVar 0x55931af07c48 'variable' 'T &'
|     |     `-UnaryOperator 0x55931af2eff8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55931af2efe8 <col:54> 'Args *' this
|     `-CallExpr 0x55931af2f6c8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55931af2f068 <col:9> '<bound member function type>' ->postparse 0x55931af21148
|       | `-CXXThisExpr 0x55931af2f058 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55931af2f688 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55931af2f098 <col:19> 'T *' lvalue Var 0x55931af2ec78 's' 'T *'
|       | `-ParenExpr 0x55931af2f668 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55931af2f638 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55931af2f620 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55931af2f608 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55931af2f5e8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55931af2f5b8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55931ac38428
|       |     |       `-ImplicitCastExpr 0x55931af2f5a0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55931af2f0b8 <col:25> 'String' lvalue Var 0x55931af2ea28 'str' 'String'
|       |     |-CallExpr 0x55931af2f410 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55931af2f2a0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55931af2f2e8 <col:59> 'P' lvalue ParmVar 0x55931af07ba8 'parser' 'P'
|       |     | |-DeclRefExpr 0x55931af2f308 <col:67> 'String' lvalue Var 0x55931af2ea28 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55931af2f3b8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55931af2f348 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55931ae2d568 0x55931ae2d188 0x55931ae2cdb8 0x55931ae2c9d8 0x55931ae2c5f8 0x55931ae2c228
|       |     | | `-DeclRefExpr 0x55931af2f328 <col:73> 'T *' lvalue Var 0x55931af2ec78 's' 'T *'
|       |     | `-UnaryOperator 0x55931af2f3f8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55931af2f3e8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55931af2f580 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55931af2f560 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55931af2f530 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55931af2f4e0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55931af2f470 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55931ae2d568 0x55931ae2d188 0x55931ae2cdb8 0x55931ae2c9d8 0x55931ae2c5f8 0x55931ae2c228
|       |         | | `-DeclRefExpr 0x55931af2f450 <col:87> 'T *' lvalue Var 0x55931af2ec78 's' 'T *'
|       |         | `-DeclRefExpr 0x55931af2f510 <col:91> 'const V' lvalue ParmVar 0x55931af07ce8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55931af2f550 <col:98> 'bool' true
|       `-DeclRefExpr 0x55931af2f6a8 <col:106> 'Args::Slot *' lvalue Var 0x55931af2e998 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55931af08548 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55931af07f58 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931af07fd8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55931af08058 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55931af084a8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55931af08120 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931af081a0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55931af08218 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55931af082b8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55931af08358 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55931af306d8 <col:60, line:773:5>
|     |-DeclStmt 0x55931af2f7a0 <line:767:9, col:26>
|     | `-VarDecl 0x55931af2f738 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55931af306a0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55931af306c0 <line:768:13, col:58>
|       | `-VarDecl 0x55931af2f7c8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55931af2f9a8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55931af2f978 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55931af2f960 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55931af2f940 <col:26, col:58> 'String' (CXXTemporary 0x55931af2f940)
|       |           `-CXXMemberCallExpr 0x55931af2f8d0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55931af2f840 <col:26> '<bound member function type>' ->find 0x55931af20f38
|       |             | `-CXXThisExpr 0x55931af2f830 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55931af2f908 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55931af2f870 <col:31> 'const char *' lvalue ParmVar 0x55931af08120 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55931af2f920 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55931af2f890 <col:40> 'int' lvalue ParmVar 0x55931af081a0 'flags' 'int'
|       |             `-DeclRefExpr 0x55931af2f8b0 <col:47> 'Args::Slot *' lvalue Var 0x55931af2f738 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55931af2fa60 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55931af2fa48 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55931af2fa28 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55931af2f9f8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55931ac38428
|       |       `-ImplicitCastExpr 0x55931af2f9e0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55931af2f9c0 <col:20> 'String' lvalue Var 0x55931af2f7c8 'str' 'String'
|       `-CompoundStmt 0x55931af30678 <col:61, line:772:9>
|         |-DeclStmt 0x55931af2fda0 <line:769:13, col:66>
|         | `-VarDecl 0x55931af2fab8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55931af2fd70 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55931af2fce0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55931af2fd28 <col:49> 'T1' lvalue ParmVar 0x55931af082b8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55931af2fd58 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55931af2fd48 <col:61> 'Args *' this
|         |-DeclStmt 0x55931af30110 <line:770:13, col:66>
|         | `-VarDecl 0x55931af2fe28 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55931af300e0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55931af30050 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55931af30098 <col:49> 'T2' lvalue ParmVar 0x55931af08358 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55931af300c8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55931af300b8 <col:61> 'Args *' this
|         `-CallExpr 0x55931af30648 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55931af30138 <col:13> '<bound member function type>' ->postparse 0x55931af21148
|           | `-CXXThisExpr 0x55931af30128 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55931af30608 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55931af301a8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55931af30168 <col:23> 'T1 *' lvalue Var 0x55931af2fab8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55931af30188 <col:29> 'T2 *' lvalue Var 0x55931af2fe28 's2' 'T2 *'
|           | `-CallExpr 0x55931af305c0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55931af30390 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55931af303d8 <col:63> 'P' lvalue ParmVar 0x55931af08218 'parser' 'P'
|           |   |-DeclRefExpr 0x55931af303f8 <col:71> 'String' lvalue Var 0x55931af2f7c8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55931af304a8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55931af30438 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55931ae2d568 0x55931ae2d188 0x55931ae2cdb8 0x55931ae2c9d8 0x55931ae2c5f8 0x55931ae2c228
|           |   | `-DeclRefExpr 0x55931af30418 <col:77> 'T1 *' lvalue Var 0x55931af2fab8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55931af30568 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55931af304f8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55931ae2d568 0x55931ae2d188 0x55931ae2cdb8 0x55931ae2c9d8 0x55931ae2c5f8 0x55931ae2c228
|           |   | `-DeclRefExpr 0x55931af304d8 <col:82> 'T2 *' lvalue Var 0x55931af2fe28 's2' 'T2 *'
|           |   `-UnaryOperator 0x55931af305a8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55931af30598 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55931af30628 <col:94> 'Args::Slot *' lvalue Var 0x55931af2f738 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55931af08938 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55931af085c8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55931af08898 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55931af08680 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931af08700 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55931af08778 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55931af30bf0 <col:67, line:780:5>
|     |-DeclStmt 0x55931af30770 <line:777:9, col:26>
|     | `-VarDecl 0x55931af30708 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55931af30bb8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55931af30bd8 <line:778:13, col:58>
|       | `-VarDecl 0x55931af30798 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55931af30978 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55931af30948 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55931af30930 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55931af30910 <col:26, col:58> 'String' (CXXTemporary 0x55931af30910)
|       |           `-CXXMemberCallExpr 0x55931af308a0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55931af30810 <col:26> '<bound member function type>' ->find 0x55931af20f38
|       |             | `-CXXThisExpr 0x55931af30800 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55931af308d8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55931af30840 <col:31> 'const char *' lvalue ParmVar 0x55931af08680 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55931af308f0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55931af30860 <col:40> 'int' lvalue ParmVar 0x55931af08700 'flags' 'int'
|       |             `-DeclRefExpr 0x55931af30880 <col:47> 'Args::Slot *' lvalue Var 0x55931af30708 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55931af30a30 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55931af30a18 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55931af309f8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55931af309c8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55931ac38428
|       |       `-ImplicitCastExpr 0x55931af309b0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55931af30990 <col:20> 'String' lvalue Var 0x55931af30798 'str' 'String'
|       `-CallExpr 0x55931af30b88 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55931af30a58 <col:13> '<bound member function type>' ->postparse 0x55931af21148
|         | `-CXXThisExpr 0x55931af30a48 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55931af30b38 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55931af30aa8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55931af30a88 <col:23> 'P' lvalue ParmVar 0x55931af08778 'parser' 'P'
|         | |-DeclRefExpr 0x55931af30af0 <col:36> 'String' lvalue Var 0x55931af30798 'str' 'String'
|         | `-UnaryOperator 0x55931af30b20 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55931af30b10 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55931af30b68 <col:49> 'Args::Slot *' lvalue Var 0x55931af30708 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55931af08cd8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55931af089a8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55931af08c38 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55931af08a60 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931af08ae0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55931af08b58 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55931af31560 <col:71, line:792:5>
|     |-DeclStmt 0x55931af30c88 <line:784:9, col:26>
|     | `-VarDecl 0x55931af30c20 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55931af30d58 <line:785:9, col:29>
|     | `-VarDecl 0x55931af30cb8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55931af30d40 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55931af30d20 <col:28> 'int' 1
|     |-WhileStmt 0x55931af31410 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55931af31430 <line:786:16, col:61>
|     | | `-VarDecl 0x55931af30d80 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55931af30f60 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55931af30f30 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55931af30f18 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55931af30ef8 <col:29, col:61> 'String' (CXXTemporary 0x55931af30ef8)
|     | |           `-CXXMemberCallExpr 0x55931af30e88 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55931af30df8 <col:29> '<bound member function type>' ->find 0x55931af20f38
|     | |             | `-CXXThisExpr 0x55931af30de8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55931af30ec0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55931af30e28 <col:34> 'const char *' lvalue ParmVar 0x55931af08a60 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55931af30ed8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55931af30e48 <col:43> 'int' lvalue ParmVar 0x55931af08ae0 'flags' 'int'
|     | |             `-DeclRefExpr 0x55931af30e68 <col:50> 'Args::Slot *' lvalue Var 0x55931af30c20 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55931af31018 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55931af31000 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55931af30fe0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55931af30fb0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55931ac38428
|     | |       `-ImplicitCastExpr 0x55931af30f98 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55931af30f78 <col:23> 'String' lvalue Var 0x55931af30d80 'str' 'String'
|     | `-CompoundStmt 0x55931af313e8 <col:64, line:790:9>
|     |   |-CallExpr 0x55931af31170 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55931af31040 <col:13> '<bound member function type>' ->postparse 0x55931af21148
|     |   | | `-CXXThisExpr 0x55931af31030 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55931af31120 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55931af31090 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55931af31070 <col:23> 'P' lvalue ParmVar 0x55931af08b58 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55931af310d8 <col:36> 'String' lvalue Var 0x55931af30d80 'str' 'String'
|     |   | | `-UnaryOperator 0x55931af31108 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55931af310f8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55931af31150 <col:49> 'Args::Slot *' lvalue Var 0x55931af30c20 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55931af31308 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55931af311a0 <col:13> 'int' lvalue Var 0x55931af30cb8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55931af312f0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55931af312d0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55931af31238 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55931af31218 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55931af31200 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55931af311c0 <col:28> 'int' lvalue Var 0x55931af30cb8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55931af311e0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55931af312b8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55931af31288 <col:49> 'bool' lvalue ->_read_status 0x55931aee8aa0
|     |   |         `-ImplicitCastExpr 0x55931af31268 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55931af31258 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55931af313b8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55931af31328 <col:13> 'int' lvalue ParmVar 0x55931af08ae0 'flags' 'int'
|     |     `-UnaryOperator 0x55931af313a0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55931af31388 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55931af31368 <col:23> 'const int' lvalue Var 0x55931aef0088 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55931af31540 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55931af31478 <col:9> 'bool' lvalue ->_read_status 0x55931aee8aa0
|       | `-ImplicitCastExpr 0x55931af31458 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55931af31448 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55931af31520 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55931af31500 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55931af314e8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55931af314a8 <col:25> 'int' lvalue Var 0x55931af30cb8 'read_status' 'int'
|           `-IntegerLiteral 0x55931af314c8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55931af091b8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55931af08d48 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931af08dc8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55931af09118 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55931af08e88 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931af08f08 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55931af08f80 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55931af09028 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55931af324f0 <col:84, line:805:5>
|     |-DeclStmt 0x55931af31608 <line:796:9, col:26>
|     | `-VarDecl 0x55931af315a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55931af316d8 <line:797:9, col:29>
|     | `-VarDecl 0x55931af31638 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55931af316c0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55931af316a0 <col:28> 'int' 1
|     |-DeclStmt 0x55931af31a10 <line:798:9, col:71>
|     | `-VarDecl 0x55931af31728 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55931af319e0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55931af31950 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55931af31998 <col:55> 'T' lvalue ParmVar 0x55931af09028 'variable' 'T &'
|     |     `-UnaryOperator 0x55931af319c8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55931af319b8 <col:66> 'Args *' this
|     |-WhileStmt 0x55931af323a0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55931af323c0 <line:799:16, col:61>
|     | | `-VarDecl 0x55931af31a38 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55931af31c18 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55931af31be8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55931af31bd0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55931af31bb0 <col:29, col:61> 'String' (CXXTemporary 0x55931af31bb0)
|     | |           `-CXXMemberCallExpr 0x55931af31b40 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55931af31ab0 <col:29> '<bound member function type>' ->find 0x55931af20f38
|     | |             | `-CXXThisExpr 0x55931af31aa0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55931af31b78 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55931af31ae0 <col:34> 'const char *' lvalue ParmVar 0x55931af08e88 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55931af31b90 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55931af31b00 <col:43> 'int' lvalue ParmVar 0x55931af08f08 'flags' 'int'
|     | |             `-DeclRefExpr 0x55931af31b20 <col:50> 'Args::Slot *' lvalue Var 0x55931af315a0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55931af31cd0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55931af31cb8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55931af31c98 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55931af31c68 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55931ac38428
|     | |       `-ImplicitCastExpr 0x55931af31c50 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55931af31c30 <col:23> 'String' lvalue Var 0x55931af31a38 'str' 'String'
|     | `-CompoundStmt 0x55931af32378 <col:64, line:803:9>
|     |   |-CallExpr 0x55931af32100 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55931af31cf8 <col:13> '<bound member function type>' ->postparse 0x55931af21148
|     |   | | `-CXXThisExpr 0x55931af31ce8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55931af320c0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55931af31d28 <col:23> 'T *' lvalue Var 0x55931af31728 's' 'T *'
|     |   | | `-CallExpr 0x55931af32080 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55931af31f10 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55931af31f58 <col:56> 'P' lvalue ParmVar 0x55931af08f80 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55931af31f78 <col:64> 'String' lvalue Var 0x55931af31a38 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55931af32028 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55931af31fb8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55931ae2d568 0x55931ae2d188 0x55931ae2cdb8 0x55931ae2c9d8 0x55931ae2c5f8 0x55931ae2c228
|     |   | |   | `-DeclRefExpr 0x55931af31f98 <col:70> 'T *' lvalue Var 0x55931af31728 's' 'T *'
|     |   | |   `-UnaryOperator 0x55931af32068 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55931af32058 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55931af320e0 <col:81> 'Args::Slot *' lvalue Var 0x55931af315a0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55931af32298 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55931af32130 <col:13> 'int' lvalue Var 0x55931af31638 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55931af32280 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55931af32260 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55931af321c8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55931af321a8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55931af32190 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55931af32150 <col:28> 'int' lvalue Var 0x55931af31638 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55931af32170 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55931af32248 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55931af32218 <col:49> 'bool' lvalue ->_read_status 0x55931aee8aa0
|     |   |         `-ImplicitCastExpr 0x55931af321f8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55931af321e8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55931af32348 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55931af322b8 <col:13> 'int' lvalue ParmVar 0x55931af08f08 'flags' 'int'
|     |     `-UnaryOperator 0x55931af32330 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55931af32318 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55931af322f8 <col:23> 'const int' lvalue Var 0x55931aef0088 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55931af324d0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55931af32408 <col:9> 'bool' lvalue ->_read_status 0x55931aee8aa0
|       | `-ImplicitCastExpr 0x55931af323e8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55931af323d8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55931af324b0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55931af32490 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55931af32478 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55931af32438 <col:25> 'int' lvalue Var 0x55931af31638 'read_status' 'int'
|           `-IntegerLiteral 0x55931af32458 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55931af09798 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55931af09230 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55931af092a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55931af096f8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55931af09368 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55931af093e8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55931af09460 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55931af095b0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55931af332f8 <col:87, line:821:5>
|     |-DeclStmt 0x55931af325a0 <line:809:9, col:26>
|     | `-VarDecl 0x55931af32538 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55931af32670 <line:810:9, col:29>
|     | `-VarDecl 0x55931af325d0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55931af32658 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55931af32638 <col:28> 'int' 1
|     |-DeclStmt 0x55931af328b8 <line:811:9, col:38>
|     | `-VarDecl 0x55931af327a0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55931af32890 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55931af32818 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55931af32870 <col:29> 'Vector<T>' lvalue ParmVar 0x55931af095b0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55931af331a8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55931af331c8 <line:812:16, col:61>
|     | | `-VarDecl 0x55931af328e0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55931af32ac0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55931af32a90 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55931af32a78 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55931af32a58 <col:29, col:61> 'String' (CXXTemporary 0x55931af32a58)
|     | |           `-CXXMemberCallExpr 0x55931af329e8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55931af32958 <col:29> '<bound member function type>' ->find 0x55931af20f38
|     | |             | `-CXXThisExpr 0x55931af32948 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55931af32a20 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55931af32988 <col:34> 'const char *' lvalue ParmVar 0x55931af09368 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55931af32a38 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55931af329a8 <col:43> 'int' lvalue ParmVar 0x55931af093e8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55931af329c8 <col:50> 'Args::Slot *' lvalue Var 0x55931af32538 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55931af32b78 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55931af32b60 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55931af32b40 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55931af32b10 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55931ac38428
|     | |       `-ImplicitCastExpr 0x55931af32af8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55931af32ad8 <col:23> 'String' lvalue Var 0x55931af328e0 'str' 'String'
|     | `-CompoundStmt 0x55931af33170 <col:64, line:819:9>
|     |   |-DeclStmt 0x55931af32c38 <line:813:13, col:23>
|     |   | `-VarDecl 0x55931af32ba0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55931af32c18 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55931af32db8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55931af32c60 <col:13> '<bound member function type>' ->postparse 0x55931af21148
|     |   | | `-CXXThisExpr 0x55931af32c50 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55931af32d60 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55931af32cb0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55931af32c90 <col:23> 'P' lvalue ParmVar 0x55931af09460 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55931af32cf8 <col:36> 'String' lvalue Var 0x55931af328e0 'str' 'String'
|     |   | | |-DeclRefExpr 0x55931af32d18 <col:41> 'T' lvalue Var 0x55931af32ba0 'sx' 'T'
|     |   | | `-UnaryOperator 0x55931af32d48 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55931af32d38 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55931af32d98 <col:53> 'Args::Slot *' lvalue Var 0x55931af32538 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55931af32f10 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55931af32e48 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55931af32e18 <col:17> 'bool' lvalue ->_read_status 0x55931aee8aa0
|     |   | |   `-ImplicitCastExpr 0x55931af32df8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55931af32de8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55931af32ee8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55931af32e80 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55931af32e60 <col:17> 'Vector<T> *' lvalue Var 0x55931af327a0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55931af32ec8 <col:30> 'T' lvalue Var 0x55931af32ba0 'sx' 'T'
|     |   |-BinaryOperator 0x55931af33090 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55931af32f28 <col:13> 'int' lvalue Var 0x55931af325d0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55931af33078 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55931af33058 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55931af32fc0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55931af32fa0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55931af32f88 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55931af32f48 <col:28> 'int' lvalue Var 0x55931af325d0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55931af32f68 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55931af33040 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55931af33010 <col:49> 'bool' lvalue ->_read_status 0x55931aee8aa0
|     |   |         `-ImplicitCastExpr 0x55931af32ff0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55931af32fe0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55931af33140 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55931af330b0 <col:13> 'int' lvalue ParmVar 0x55931af093e8 'flags' 'int'
|     |     `-UnaryOperator 0x55931af33128 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55931af33110 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55931af330f0 <col:23> 'const int' lvalue Var 0x55931aef0088 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55931af332d8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55931af33210 <col:9> 'bool' lvalue ->_read_status 0x55931aee8aa0
|       | `-ImplicitCastExpr 0x55931af331f0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55931af331e0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55931af332b8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55931af33298 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55931af33280 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55931af33240 <col:25> 'int' lvalue Var 0x55931af325d0 'read_status' 'int'
|           `-IntegerLiteral 0x55931af33260 <col:40> 'int' 1
|-AccessSpecDecl 0x55931af09810 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55931af09838 prev 0x55931aeee388 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55931af09930 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55931af09a20 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55931af33330 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55931af09b10 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55931af33340 <col:25, line:830:9>
| |-CXXMethodDecl 0x55931af09c10 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55931af09cc0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55931af09d68 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55931af09d68
| | `-ParmVarDecl 0x55931af09e78 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55931af0a638 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55931af0a638
|   `-ParmVarDecl 0x55931af0a748 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55931af09ee8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55931af0a048 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55931af0a240 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55931af0a0f0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55931af0a168 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55931af33520 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55931af0a4f8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55931af33390 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55931af33350 <col:20> 'void *' lvalue ParmVar 0x55931af0a0f0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55931af0a560 '_slot' 'char *'
| | | `-CXXNewExpr 0x55931af33418 <col:32, col:45> 'char *' array Function 0x55931aa5c0a8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55931af33400 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55931af333d0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55931af0a168 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55931af0a5c0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55931af334e0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55931af334a0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55931af0a168 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55931af335a0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55931af0a340 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55931af09b10 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55931af33628 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55931af33608 <line:840:13, col:22> 'void' array Function 0x55931aa5c408 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55931af335f0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55931af335c0 <col:22> 'char *' lvalue ->_slot 0x55931af0a560
| |         `-CXXThisExpr 0x55931af335b0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55931af0a440 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55931af09c10 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55931af33818 <col:22, line:844:9>
| |   `-CallExpr 0x55931af33780 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55931af33768 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55931af33748 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55931ab67e88 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55931af337b8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55931af33698 <col:20> 'void *' lvalue ->_ptr 0x55931af0a4f8
| |     |   `-CXXThisExpr 0x55931af33688 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55931af337e8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55931af337d0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55931af336d8 <col:26> 'char *' lvalue ->_slot 0x55931af0a560
| |     |     `-CXXThisExpr 0x55931af336c8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55931af33800 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55931af33718 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55931af0a5c0
| |         `-CXXThisExpr 0x55931af33708 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55931af0a4f8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55931af0a560 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55931af0a5c0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55931af0a7b8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55931af0a7b8
| | `-ParmVarDecl 0x55931af0a8c8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55931af0a968 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55931af0a968
|   `-ParmVarDecl 0x55931af0aa78 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55931af0ac18 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55931af0aae8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55931af0ab88 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55931af0aeb0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55931af0b0a8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55931af0af78 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55931af0b228 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55931af33850 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55931af33830 <col:20> 'T *' lvalue ParmVar 0x55931af0af78 'ptr' 'T *'
|   | `-CompoundStmt 0x55931af338a0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55931af0b178 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55931af09c10 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55931af33a50 <col:22, line:857:9>
|   |   `-CallExpr 0x55931af33a20 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55931af338b0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55931ac205b8 0x55931abca8e8
|   |     |-CXXOperatorCallExpr 0x55931af339b0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55931af33940 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55931ae2d568 0x55931ae2d188 0x55931ae2cdb8 0x55931ae2c9d8 0x55931ae2c5f8 0x55931ae2c228
|   |     | `-MemberExpr 0x55931af33910 <col:29> 'T *' lvalue ->_ptr 0x55931af0b228
|   |     |   `-CXXThisExpr 0x55931af33900 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55931af339f0 <col:35> 'T' lvalue ->_slot 0x55931af0b288
|   |       `-CXXThisExpr 0x55931af339e0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55931af0b228 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55931af0b288 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55931af0b2f0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55931af0b3f0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55931af0b440 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55931af0b3d0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55931af0b3b0 <col:31> 'int' 48
|-FieldDecl 0x55931af0b468 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55931af0b4c8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55931af0b528 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55931af0b660 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55931af207e0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55931af20840 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55931af208f0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55931af20b18 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55931af20a20 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55931af20c68 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55931af20bd8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55931af20f38 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55931af20d28 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55931af20da8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55931af20e50 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55931af21148 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55931af21000 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55931af21078 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55931af21218 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55931af23c98 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55931af23c00 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55931af24028 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55931af23d58 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55931af23dd8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55931af23e80 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55931af23f38 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55931af24250 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55931af24100 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55931af24178 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55931af24568 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55931af24300 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55931af244c8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55931af243d8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55931af3de10 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55931af3df28 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55931af3dfb8 <col:16, col:22> col:16 public
|-EnumDecl 0x55931af3dfe0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55931af3e0e0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55931af3e330 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931af3e0c0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55931af3e0a0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55931af3e170 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55931af3e348 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931af3e150 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55931af3e130 <col:24> 'int' 22
| |-EnumConstantDecl 0x55931af3e200 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55931af3e360 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931af3e1e0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55931af3e1c0 <col:24> 'int' 34
| |-EnumConstantDecl 0x55931af3e290 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55931af3e378 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55931af3e270 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55931af3e250 <col:25> 'int' 95
| `-EnumConstantDecl 0x55931af3e2e0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55931af3fd20 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55931af40158 <col:7>
|-CXXConstructorDecl 0x55931af3fe28 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55931af3fe28
| `-ParmVarDecl 0x55931af3ff38 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55931af3ffd8 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55931af400e8 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55931afd60f0 <col:7>
`-CXXDestructorDecl 0x55931af42258 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55931af3e3a8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55931af3e508 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55931af3e598 <col:32, col:38> col:32 public
|-TypedefDecl 0x55931af3e5d0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55931aa5e400 'uint32_t' sugar
|   |-Typedef 0x55931a9704c8 'uint32_t'
|   `-TypedefType 0x55931a9495a0 '__uint32_t' sugar
|     |-Typedef 0x55931a949198 '__uint32_t'
|     `-BuiltinType 0x55931a907620 'unsigned int'
|-CXXConstructorDecl 0x55931af3e718 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55931af3e640 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55931af3fc28 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55931af40168 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55931af3f4b0 'base' 'int'
| | `-ImplicitCastExpr 0x55931af3fcc8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55931af3fc88 <col:16> 'int' lvalue ParmVar 0x55931af3e640 'b' 'int'
| `-CompoundStmt 0x55931af401d8 <col:19, line:1046:5>
|-CXXMethodDecl 0x55931af3ec10 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55931af3e7e0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55931af3e860 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55931af3e8d8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55931af3e958 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55931af3ea18 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55931af3ea98 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55931af3f068 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55931af3ece0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55931af3efc8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55931af3ed88 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55931af3ee28 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55931af3eea0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55931af3fc48 <col:82> 'const ArgContext' lvalue Var 0x55931af33a78 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55931af41108 <col:94, line:1067:5>
| |   |-DeclStmt 0x55931af40368 <line:1054:9, col:64>
| |   | `-VarDecl 0x55931af401f8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x55931af40320 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x55931af40588 <line:1055:9, col:91>
| |   | `-VarDecl 0x55931af40398 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55931af40560 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x55931af40540 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x55931af404f0 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x55931af404d0 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x55931af40478 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x55931af40428 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x55931af40458 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x55931af404b8 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x55931af40498 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x55931af40520 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55931af406e8 <line:1056:9, col:27>
| |   | `-VarDecl 0x55931af40680 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x55931af40b30 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x55931af40a60 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x55931af409e0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55931ae283e8 0x55931ac719c8 0x55931ac716a0 0x55931ac61e70 0x55931ac61b20 0x55931ac61410 0x55931ac33d80 0x55931abc1250
| |   | | |-CallExpr 0x55931af40920 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x55931af40710 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x55931af407c0 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55931af40790 <col:19, col:23> '<bound member function type>' .begin 0x55931ac51078
| |   | | | |   `-DeclRefExpr 0x55931af40770 <col:19> 'const String' lvalue ParmVar 0x55931af3ed88 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55931af40830 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55931af40800 <col:32, col:36> '<bound member function type>' .end 0x55931ac51290
| |   | | | |   `-DeclRefExpr 0x55931af407e0 <col:32> 'const String' lvalue ParmVar 0x55931af3ed88 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x55931af40850 <col:43> 'const bool' lvalue Var 0x55931af401f8 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x55931af408b8 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x55931af40898 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x55931af408e0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55931af40680 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x55931af40900 <col:73> 'const int' lvalue Var 0x55931af40398 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x55931af409c0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55931af40990 <col:16, col:20> '<bound member function type>' .end 0x55931ac51290
| |   | |     `-DeclRefExpr 0x55931af40970 <col:16> 'const String' lvalue ParmVar 0x55931af3ed88 'str' 'const String &'
| |   | `-BinaryOperator 0x55931af40b10 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55931af40aa8 <col:13> 'int' lvalue ->status 0x55931af3f518
| |   |   | `-CXXThisExpr 0x55931af40a98 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55931af40af8 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55931af40ad8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55931af3e170 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55931af40d80 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55931af40c68 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55931af40c50 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55931af40c38 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55931af40b58 <col:13> 'int' lvalue ->status 0x55931af3f518
| |   | | |     `-CXXThisExpr 0x55931af40b48 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55931af40c18 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55931af40be8 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55931af40b98 <col:23> 'int' lvalue ->status 0x55931af3f518
| |   | |   |   `-CXXThisExpr 0x55931af40b88 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55931af40c00 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55931af40bc8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55931af3e200 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55931af40d60 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55931af40d00 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55931af40ca8 <col:13, col:18> '<bound member function type>' .error 0x55931aee8100
| |   |   | | `-DeclRefExpr 0x55931af40c88 <col:13> 'const ArgContext' lvalue ParmVar 0x55931af3eea0 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55931af40d28 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55931af40cd8 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55931af40d50 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55931af40d40 <col:20> 'bool' false
| |   |-DeclStmt 0x55931af40f58 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55931af40f00 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x55931af40e90 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x55931af410b8 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x55931af40f70 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55931abf5218
| |   | |-DeclRefExpr 0x55931af40fb8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55931af40680 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x55931af41088 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x55931af41000 <col:64> 'V' lvalue ParmVar 0x55931af3ee28 'result' 'V &'
| |   `-ReturnStmt 0x55931af410f8 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55931af410e8 <col:16> 'bool' true
| `-CXXMethodDecl 0x55931afd9928 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55931afd9700 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55931afd97d8 <col:46, col:49> col:49 used result 'int &'
|   |-ParmVarDecl 0x55931afd9840 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55931afdb6c0 <col:94, line:1067:5>
|     |-DeclStmt 0x55931afda138 <line:1054:9, col:64>
|     | `-VarDecl 0x55931afd9f58 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55931afda0c8 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55931afda098 <col:36, col:55> 'const bool' lvalue Var 0x55931abe5188 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55931afda318 <line:1055:9, col:91>
|     | `-VarDecl 0x55931afda150 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55931afda298 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55931afda280 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55931afda260 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55931afda240 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55931afda220 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55931afda1e8 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55931afda1c8 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x55931af40458 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55931afda208 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x55931af40498 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x55931af40520 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55931afda4b0 <line:1056:9, col:27>
|     | `-VarDecl 0x55931afda448 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55931afda938 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55931afda8e0 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55931afda798 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55931afda768 <col:13> '<bound member function type>' ->parse 0x55931af3ec10
|     | | | | `-CXXThisExpr 0x55931afda758 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55931afda5f8 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55931afda5c8 <col:19, col:23> '<bound member function type>' .begin 0x55931ac51078
|     | | | |   `-DeclRefExpr 0x55931afda5a8 <col:19> 'const String' lvalue ParmVar 0x55931afd9700 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55931afda668 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55931afda638 <col:32, col:36> '<bound member function type>' .end 0x55931ac51290
|     | | | |   `-DeclRefExpr 0x55931afda618 <col:32> 'const String' lvalue ParmVar 0x55931afd9700 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55931afda808 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55931afda7e8 <col:43> 'const bool' lvalue Var 0x55931afd9f58 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55931afda6f0 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55931afda6d8 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55931afda6b8 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
|     | | | |-ImplicitCastExpr 0x55931afda820 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55931afda718 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55931afda448 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55931afda858 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55931afda838 <col:73> 'const int' lvalue Var 0x55931afda150 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55931afda8c0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55931afda890 <col:16, col:20> '<bound member function type>' .end 0x55931ac51290
|     | |     `-DeclRefExpr 0x55931afda870 <col:16> 'const String' lvalue ParmVar 0x55931afd9700 'str' 'const String &'
|     | `-BinaryOperator 0x55931afda918 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55931af40aa8 <col:13> 'int' lvalue ->status 0x55931af3f518
|     |   | `-CXXThisExpr 0x55931af40a98 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55931afda900 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55931af40ad8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55931af3e170 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55931afdaab0 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55931afda9d0 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55931afda9b8 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55931afda9a0 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55931af40b58 <col:13> 'int' lvalue ->status 0x55931af3f518
|     | | |     `-CXXThisExpr 0x55931af40b48 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55931afda980 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55931afda950 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55931af40b98 <col:23> 'int' lvalue ->status 0x55931af3f518
|     | |   |   `-CXXThisExpr 0x55931af40b88 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55931afda968 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55931af40bc8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55931af3e200 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55931afdaa90 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55931afdaa40 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55931afdaa10 <col:13, col:18> '<bound member function type>' .error 0x55931aee8100
|     |   | | `-DeclRefExpr 0x55931afda9f0 <col:13> 'const ArgContext' lvalue ParmVar 0x55931afd9840 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55931afdaa68 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55931af40cd8 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55931afdaa80 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55931af40d40 <col:20> 'bool' false
|     |-DeclStmt 0x55931afdaff8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55931afdafa0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
|     |   `-ElaboratedType 0x55931afdaf50 'typename make_unsigned<int>::type' sugar
|     |     `-TypedefType 0x55931afdaf30 'make_unsigned<int>::type' sugar
|     |       |-Typedef 0x55931afdaec0 'type'
|     |       `-ElaboratedType 0x55931afdae70 'typename integer_traits<int>::unsigned_type' sugar
|     |         `-TypedefType 0x55931afdae50 'integer_traits<int>::unsigned_type' sugar
|     |           |-Typedef 0x55931abe52e0 'unsigned_type'
|     |           `-BuiltinType 0x55931a907620 'unsigned int'
|     |-CallExpr 0x55931afdb650 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55931afdb638 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55931afdb5b8 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55931afdb498 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x55931abf5218 'extract_integer')
|     | |-ImplicitCastExpr 0x55931afdb698 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55931afdb680 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55931afdb058 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55931afda448 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55931afdb128 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
|     |   `-DeclRefExpr 0x55931afdb0d8 <col:64> 'int':'int' lvalue ParmVar 0x55931afd97d8 'result' 'int &'
|     `-ReturnStmt 0x55931afdb6b0 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55931af410e8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55931af3f428 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55931af3f0d8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55931af3f388 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55931af3f188 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55931af3f228 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55931af3f2a0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55931af3fc68 <col:71> 'const ArgContext' lvalue Var 0x55931af33a78 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55931af41878 <col:83, line:1083:5>
| |   |-DeclStmt 0x55931af411d0 <line:1071:9, col:12>
| |   | `-VarDecl 0x55931af41168 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55931af41850 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55931af41460 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55931af412e8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55931af412b0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55931af411f8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55931af41250 <col:31> 'const String' lvalue ParmVar 0x55931af3f188 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55931af41270 <col:36> 'V' lvalue Var 0x55931af41168 'x' 'V'
| |     | |   `-DeclRefExpr 0x55931af41290 <col:39> 'const ArgContext' lvalue ParmVar 0x55931af3f2a0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55931af41440 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55931af41420 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55931af41408 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55931af413f0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55931af41310 <col:17> 'int' lvalue ->status 0x55931af3f518
| |     |     |     `-CXXThisExpr 0x55931af41300 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55931af413d0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55931af413a0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55931af41350 <col:27> 'int' lvalue ->status 0x55931af3f518
| |     |       |   `-CXXThisExpr 0x55931af41340 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55931af413b8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55931af41380 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55931af3e200 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55931af41490 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55931af41480 <col:20> 'bool' false
| |     `-IfStmt 0x55931af41828 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55931af41530 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55931af41500 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55931af414b0 <col:18> 'int' lvalue ->status 0x55931af3f518
| |       | |   `-CXXThisExpr 0x55931af414a0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55931af41518 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55931af414e0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55931af3e200 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55931af41768 <col:42, line:1079:9>
| |       | |-CallExpr 0x55931af41710 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55931af41560 <line:1076:13> '<bound member function type>' ->range_error 0x55931af3fb58
| |       | | | `-CXXThisExpr 0x55931af41550 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55931af41590 <col:25> 'const ArgContext' lvalue ParmVar 0x55931af3f2a0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55931af41670 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55931af416e8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55931af416c8 <col:43> 'V' lvalue Var 0x55931af41168 'x' 'V'
| |       | `-ReturnStmt 0x55931af41758 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55931af41748 <col:20> 'bool' false
| |       `-CompoundStmt 0x55931af41808 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55931af417c8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55931af41788 <col:13> 'V' lvalue ParmVar 0x55931af3f228 'result' 'V &'
| |         | `-DeclRefExpr 0x55931af417a8 <col:22> 'V' lvalue Var 0x55931af41168 'x' 'V'
| |         `-ReturnStmt 0x55931af417f8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55931af417e8 <col:20> 'bool' true
| `-CXXMethodDecl 0x55931afd92e8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55931afd90c0 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55931afd9198 <col:35, col:38> col:38 used result 'int &'
|   |-ParmVarDecl 0x55931afd9200 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x55931afd9f38 <col:83, line:1083:5>
|     |-DeclStmt 0x55931afd9570 <line:1071:9, col:12>
|     | `-VarDecl 0x55931afd9508 <col:9, col:11> col:11 used x 'int':'int'
|     `-IfStmt 0x55931afd9f10 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55931afd9ba0 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55931afd9ac8 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55931afd9a90 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55931afd9a48 <col:14> '<bound member function type>' ->parse_saturating 0x55931afd9928
|       | |   | `-CXXThisExpr 0x55931afd9a38 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55931afd95e0 <col:31> 'const String' lvalue ParmVar 0x55931afd90c0 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55931afd9600 <col:36> 'int':'int' lvalue Var 0x55931afd9508 'x' 'int':'int'
|       | |   `-DeclRefExpr 0x55931afd9620 <col:39> 'const ArgContext' lvalue ParmVar 0x55931afd9200 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55931afd9b80 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55931afd9b60 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55931afd9b48 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55931afd9b30 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x55931af41310 <col:17> 'int' lvalue ->status 0x55931af3f518
|       |     |     `-CXXThisExpr 0x55931af41300 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55931afd9b10 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55931afd9ae0 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x55931af41350 <col:27> 'int' lvalue ->status 0x55931af3f518
|       |       |   `-CXXThisExpr 0x55931af41340 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55931afd9af8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x55931af41380 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55931af3e200 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55931afd9bc0 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55931af41480 <col:20> 'bool' false
|       `-IfStmt 0x55931afd9ee8 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55931afd9c00 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55931afd9bd0 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x55931af414b0 <col:18> 'int' lvalue ->status 0x55931af3f518
|         | |   `-CXXThisExpr 0x55931af414a0 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55931afd9be8 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55931af414e0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55931af3e200 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55931afd9e20 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55931afd9d90 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x55931af41560 <line:1076:13> '<bound member function type>' ->range_error 0x55931af3fb58
|         | | | `-CXXThisExpr 0x55931af41550 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55931afd9c20 <col:25> 'const ArgContext' lvalue ParmVar 0x55931afd9200 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55931afd9df8 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55931afd9dc8 <col:31, col:50> 'const bool' lvalue Var 0x55931abe5188 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55931afd9d68 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55931afd9d50 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55931afd9d38 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55931afd9d18 <col:43> 'int':'int' lvalue Var 0x55931afd9508 'x' 'int':'int'
|         | `-ReturnStmt 0x55931afd9e10 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55931af41748 <col:20> 'bool' false
|         `-CompoundStmt 0x55931afd9ec8 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55931afd9e98 <line:1080:13, col:22> 'int':'int' lvalue '='
|           | |-DeclRefExpr 0x55931afd9e40 <col:13> 'int':'int' lvalue ParmVar 0x55931afd9198 'result' 'int &'
|           | `-ImplicitCastExpr 0x55931afd9e80 <col:22> 'int':'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x55931afd9e60 <col:22> 'int':'int' lvalue Var 0x55931afd9508 'x' 'int':'int'
|           `-ReturnStmt 0x55931afd9eb8 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x55931af417e8 <col:20> 'bool' true
|-FieldDecl 0x55931af3f4b0 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55931af3f518 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55931af3f568 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55931af3f820 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55931af3f5a8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55931af3f628 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55931af3f6a0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55931af3f720 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55931af3fb58 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55931af3f8f0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55931af3f968 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55931af3fa30 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55931af420d8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55931af420d8
| `-ParmVarDecl 0x55931af421e8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55931af42368 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55931af42478 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55931afd6100 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55931afd60d0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55931afd60a0 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55931afd6070 <col:7> 'IntArg' lvalue ParmVar 0x55931af42478 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55931af3f4b0 'base' 'int'
| | `-ImplicitCastExpr 0x55931afd61f8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55931afd61c8 <col:7> 'int' xvalue .base 0x55931af3f4b0
| |     `-CXXStaticCastExpr 0x55931afd6198 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55931afd6168 <col:7> 'IntArg' lvalue ParmVar 0x55931af42478 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55931af3f518 'status' 'int'
| | `-ImplicitCastExpr 0x55931afd62c8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55931afd6298 <col:7> 'int' xvalue .status 0x55931af3f518
| |     `-CXXStaticCastExpr 0x55931afd6268 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55931afd6238 <col:7> 'IntArg' lvalue ParmVar 0x55931af42478 '' 'IntArg &&'
| `-CompoundStmt 0x55931afd6320 <col:7>
`-CXXDestructorDecl 0x55931afd5260 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55931af469a0 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55931af46bf8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55931afd5188 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55931afd5700 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55931afd56e0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55931afd5770 <col:19>
|-CXXConstructorDecl 0x55931afd5368 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x55931afd5368
| `-ParmVarDecl 0x55931afd5478 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x55931afd5518 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55931afd5628 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55931afd6330 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55931afd6050 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55931afd6020 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x55931afd5ff0 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x55931afd5628 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x55931afd63a0 <col:19>
`-CXXDestructorDecl 0x55931afd57b0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55931af4ba60 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55931af4bb78 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x55931af4bc08 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x55931af4be48 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x55931af4bc40 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55931af4bcc0 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x55931af4bd38 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55931af4c060 <col:81> 'const ArgContext' lvalue Var 0x55931af33a78 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55931af4bfa0 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x55931af4bf10 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x55931af4c1b8 <col:35, line:1261:5>
|   `-ReturnStmt 0x55931af4c1a8 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x55931af4c190 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x55931af4c160 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55931af4c148 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x55931af4c120 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x55931af4c100 <col:16, col:24> 'String' (CXXTemporary 0x55931af4c100)
|               `-CXXConstructExpr 0x55931af4c0c8 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x55931af4c0b0 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x55931af4c090 <col:23> 'bool' lvalue ParmVar 0x55931af4bf10 'x' 'bool'
|-CXXConstructorDecl 0x55931afe87e8 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55931afe88c0 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55931afe89f8 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x55931afe89f8
| `-ParmVarDecl 0x55931afe8b08 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x55931afe8ba8 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55931afe8cb8 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x55931afe9910 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55931af4c1f8 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x55931af4c458 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55931afe86f8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55931afe8d28 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x55931afe8d28
| `-ParmVarDecl 0x55931afe8e38 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x55931afe8ed8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55931afe8fe8 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x55931afe9920 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55931afe98f0 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x55931afe98c0 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x55931afe9890 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x55931afe8fe8 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x55931afe9990 <col:19>
`-CXXDestructorDecl 0x55931afe9088 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
