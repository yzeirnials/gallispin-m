
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576570a5b68 prev 0x55765709d3c8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5576570a5c60 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5576570a5cf0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5576570a5d68 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5576570a5e28 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5576570a5ef0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5576570a6068 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5576570a5fa0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5576570a6110 <col:24>
| `-OptimizeNoneAttr 0x5576570a6168 <col:34>
|-CXXMethodDecl 0x5576570a61b0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5576570a6468 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5576570a6260 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5576570a62d8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5576570a6358 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5576570a6520 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5576570a6558 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5576570a65c0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5576570a6648 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5576570a6968 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5576570a6700 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5576570a6778 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5576570a67f0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5576570a6870 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5576570a6a80 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5576570ad378 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5576570ad378
| `-ParmVarDecl 0x5576570ad488 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5576570ad528 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5576570ad528
| `-ParmVarDecl 0x5576570ad638 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5576570d5488 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557657089150 prev 0x557657088ef0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x557657089248 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5576570892d8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x557657089338 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x557657089428 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x557657089528 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5576570896f8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5576570895a8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x557657089620 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x557657089888 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5576570897c0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x557657089930 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x557657089a68 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5576570899a0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x557657089c08 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x557657089b48 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x557657089da8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x557657089ce8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x557657089e50 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x557657089f50 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55765708a030 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557657089f30 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x557657089f10 <col:26> 'int' 1
| `-EnumConstantDecl 0x557657089fe0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55765708a048 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x557657089fc0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x557657089fa0 <col:44> 'int' 2
|-CXXMethodDecl 0x55765708a190 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55765708a078 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55765708a0f8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55765708a2e8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55765708a258 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55765708a4f8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55765708a3a8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55765708a420 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55765708a5a8 <col:20>
| `-OptimizeNoneAttr 0x55765708a600 <col:30>
|-CXXMethodDecl 0x55765708a708 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55765708a640 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55765708a7b0 <col:20>
| `-OptimizeNoneAttr 0x55765708a808 <col:30>
|-CXXMethodDecl 0x55765709a510 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55765709a5d8 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55765709a6c8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55765709a750 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55765709a7d8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55765709a860 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x55765709a8e8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55765709a978 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55765709aa38 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55765709aac0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55765709ab48 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55765709abd0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55765709ac58 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55765709ace0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55765709ad70 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55765709ae30 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55765709aec0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55765709b010 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55765709af78 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55765709b1a0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55765709b0d0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55765709b440 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55765709b258 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55765709b2d8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55765709b358 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55765709b4f8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55765709b600 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55765709b890 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55765709b5e0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55765709b5c0 <col:33> 'int' 0
| |-EnumConstantDecl 0x55765709b690 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55765709b8a8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55765709b670 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55765709b650 <col:32> 'int' 20
| |-EnumConstantDecl 0x55765709b720 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55765709b8c0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55765709b700 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55765709b6e0 <col:38> 'int' 90
| |-EnumConstantDecl 0x55765709b7b0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55765709b8d8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55765709b790 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55765709b770 <col:35> 'int' 100
| `-EnumConstantDecl 0x55765709b840 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55765709b8f0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55765709b820 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55765709b800 <col:32> 'int' 2000
|-CXXMethodDecl 0x55765709b930 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55765709bc40 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55765709bab0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55765709bb28 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55765709bd10 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55765709be90 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55765709bdc0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55765709c098 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55765709bf48 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55765709bfc0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55765709c198 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55765709c238 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55765709c300 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55765709c390 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55765709c5c0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55765709c370 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55765709c350 <col:36> 'int' EnumConstant 0x55765709c300 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55765709c3e0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55765709c430 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55765709c480 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55765709c4d0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55765709c520 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55765709c570 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55765709c6a8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55765709c5e8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55765709c770 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55765709c830 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55765709c8f0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55765709c9b0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55765709ca98 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55765709cb60 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55765709cce0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55765709cc10 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55765709ce08 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55765709d008 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55765709ceb8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55765709cf38 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5576570a9838 <col:54, line:127:5>
|   |-ParenExpr 0x5576570a96e8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5576570a96b8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5576570a93a0 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5576570a9378 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5576570a9360 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5576570a9348 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5576570a9318 <col:31> 'Router *' lvalue ->_router 0x5576570a7230
|   |   |         `-CXXThisExpr 0x5576570a9308 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5576570a9400 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5576570a93e0 <col:48> 'int' 0
|   |   `-CallExpr 0x5576570a9618 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5576570a9600 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5576570a95e0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x557656b15d00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5576570a9658 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576570a9470 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5576570a9670 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576570a9490 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5576570a9688 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5576570a94c8 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5576570a96a0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5576570a95c8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5576570a95b0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576570a9568 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5576570a9780 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5576570a9718 <col:9> 'Router *' lvalue ->_router 0x5576570a7230
|   | | `-CXXThisExpr 0x5576570a9708 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5576570a9768 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5576570a9748 <col:19> 'Router *' lvalue ParmVar 0x55765709ceb8 'r' 'Router *'
|   `-BinaryOperator 0x5576570a9818 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5576570a97b0 <col:9> 'int' lvalue ->_eindex 0x5576570a7298
|     | `-CXXThisExpr 0x5576570a97a0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5576570a9800 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5576570a97e0 <col:19> 'int' lvalue ParmVar 0x55765709cf38 'eindex' 'int'
|-CXXMethodDecl 0x55765709d190 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55765709d0c8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55765709d260 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55765709d328 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55765709d3c8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55765709d618 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55765709d490 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55765709d510 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55765709d6c8 <col:20>
| `-OptimizeNoneAttr 0x55765709d720 <col:30>
|-CXXMethodDecl 0x55765709d828 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55765709d760 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55765709d8d0 <col:20>
| `-OptimizeNoneAttr 0x55765709d928 <col:30>
|-CXXMethodDecl 0x55765709d9f8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55765709d968 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55765709daa0 <col:20>
| `-OptimizeNoneAttr 0x55765709daf8 <col:30>
|-CXXMethodDecl 0x55765709dc88 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55765709db30 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55765709dbb0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55765709de18 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55765709dd50 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55765709df68 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55765709ded8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55765709e0b8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55765709e028 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55765709e208 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55765709e178 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55765709e4c8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55765709e2c0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55765709e340 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55765709e3e8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55765709e5a0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55765709e660 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55765709e930 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55765709e7e0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55765709e858 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55765709ea58 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55765709ec30 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55765709eb10 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55765709eb90 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55765709ee18 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55765709ecf8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55765709ed78 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55765709f188 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55765709eed8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55765709ef50 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55765709efd0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5576570a8e18 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5576570a8df8 <col:106> 'int' 0
| `-ParmVarDecl 0x55765709f048 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5576570a8e50 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5576570a8e30 <col:126> 'int' 0
|-CXXMethodDecl 0x55765709f508 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55765709f258 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55765709f2d0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55765709f350 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55765709f3c8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5576570a8e88 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5576570a8e68 <col:114> 'int' 0
|-CXXMethodDecl 0x55765709f898 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55765709f5e0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55765709f658 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55765709f6d8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5576570a8ea0 <col:96> 'int' 0
| `-ParmVarDecl 0x55765709f750 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5576570a8ee0 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5576570a8ec0 <col:116> 'int' 0
|-CXXMethodDecl 0x55765709fc18 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55765709f968 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55765709f9e0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55765709fa60 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5576570a8f18 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5576570a8ef8 <col:109> 'int' 0
| `-ParmVarDecl 0x55765709fad8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5576570a8f50 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5576570a8f30 <col:129> 'int' 0
|-CXXMethodDecl 0x55765709ff98 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55765709fce8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55765709fd60 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55765709fde0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55765709fe58 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5576570a8f88 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5576570a8f68 <col:117> 'int' 0
|-CXXMethodDecl 0x5576570a0328 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5576570a0070 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576570a00e8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5576570a0168 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5576570a8fa0 <col:99> 'int' 0
| `-ParmVarDecl 0x5576570a01e0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5576570a8fe0 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5576570a8fc0 <col:119> 'int' 0
|-CXXMethodDecl 0x5576570a0748 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5576570a03f8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5576570a0478 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5576570a04f0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5576570a0570 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5576570a9018 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5576570a8ff8 <col:108> 'int' 0
| `-ParmVarDecl 0x5576570a05f0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5576570a9050 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5576570a9030 <col:141> 'int' 0
|-CXXMethodDecl 0x5576570a0b68 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5576570a0820 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5576570a08a0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5576570a0918 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5576570a0998 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5576570a0a18 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5576570a9068 <col:121> 'int' 0
|-CXXMethodDecl 0x5576570a0f98 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5576570a0c48 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5576570a0cc8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5576570a0d40 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5576570a0dc0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5576570a9088 <col:98> 'int' 0
| `-ParmVarDecl 0x5576570a0e40 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5576570a90a8 <col:123> 'int' 0
|-CXXMethodDecl 0x5576570a1260 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5576570a1070 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5576570a10f0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5576570a1170 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5576570a90c8 <col:80> 'int' 0
|-EnumDecl 0x5576570a1318 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5576570a1420 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5576570a16b0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576570a1400 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5576570a13e0 <col:42> 'int' 1
| |-EnumConstantDecl 0x5576570a14b0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5576570a16c8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576570a1490 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5576570a1470 <col:40> 'int' 2
| |-EnumConstantDecl 0x5576570a1540 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5576570a16e0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576570a1520 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5576570a1500 <col:44> 'int' 4
| |-EnumConstantDecl 0x5576570a15d0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5576570a16f8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576570a15b0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5576570a1590 <col:36> 'int' 7
| `-EnumConstantDecl 0x5576570a1660 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5576570a1710 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576570a1640 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5576570a1620 <col:34> 'int' 6
|-CXXMethodDecl 0x5576570a19c8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5576570a1738 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5576570a17d8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5576570a1858 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5576570a18d0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5576570a9180 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5576570a9168 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5576570a9150 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5576570a9130 <col:98, col:105> 'String' (CXXTemporary 0x5576570a9130)
|           `-CXXTemporaryObjectExpr 0x5576570a90f8 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5576570a1c68 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5576570a1a98 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5576570a1b10 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5576570a1b88 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5576570a9230 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5576570a9218 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5576570a9200 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5576570a91e0 <col:94, col:101> 'String' (CXXTemporary 0x5576570a91e0)
| |         `-CXXTemporaryObjectExpr 0x5576570a91a8 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5576570a9a20 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5576570a9998 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5576570a9968 <col:9> '<bound member function type>' ->add_task_handlers 0x5576570a19c8
|     | `-CXXThisExpr 0x5576570a9958 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5576570a99d8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5576570a98d8 <col:27> 'Task *' lvalue ParmVar 0x5576570a1a98 'task' 'Task *'
|     |-ImplicitCastExpr 0x5576570a99f0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5576570a98f8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5576570a1b10 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5576570a9a08 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5576570a9918 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5576570a1660 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5576570a9938 <col:62> 'const String' lvalue ParmVar 0x5576570a1b88 'prefix' 'const String &'
|-CXXMethodDecl 0x5576570a1e78 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5576570a1d30 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5576570a1da8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5576570a92e0 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5576570a92c8 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5576570a92b0 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5576570a9290 <col:70, col:77> 'String' (CXXTemporary 0x5576570a9290)
| |         `-CXXTemporaryObjectExpr 0x5576570a9258 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5576570a9bf8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5576570a9b70 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5576570a9b40 <col:9> '<bound member function type>' ->add_task_handlers 0x5576570a19c8
|     | `-CXXThisExpr 0x5576570a9b30 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5576570a9bb0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5576570a9ab0 <col:27> 'Task *' lvalue ParmVar 0x5576570a1d30 'task' 'Task *'
|     |-ImplicitCastExpr 0x5576570a9bc8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5576570a9ad0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5576570a9be0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5576570a9af0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5576570a1660 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5576570a9b10 <col:57> 'const String' lvalue ParmVar 0x5576570a1da8 'prefix' 'const String &'
|-CXXMethodDecl 0x5576570a2158 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5576570a1f40 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576570a1fc0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576570a2038 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5576570a2408 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5576570a2228 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576570a22a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576570a2328 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5576570a2738 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5576570a2520 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576570a25a0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576570a2618 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5576570a29e8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5576570a2808 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576570a2888 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576570a2908 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5576570a2c98 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5576570a2ab8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576570a2b38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576570a2bb8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5576570a2f48 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5576570a2d68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576570a2de8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576570a2e60 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5576570a31f8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5576570a3018 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576570a3098 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576570a3118 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5576570a34a8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5576570a32c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576570a3348 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576570a33c8 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5576570a3758 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5576570a3578 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576570a35f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576570a3678 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5576570a3a08 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5576570a3828 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576570a38a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576570a3928 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5576570a3c70 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5576570a3ad8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5576570a3b58 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5576570a3bd0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5576570a3f18 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5576570a3d40 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5576570a3dc0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5576570a3e38 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5576570a41c8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5576570a3fe8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576570a4068 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576570a40e8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5576570a4478 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5576570a4298 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576570a4318 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576570a4390 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5576570a4728 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5576570a4548 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576570a45c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576570a4640 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5576570a49d8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5576570a47f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576570a4878 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576570a48f0 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5576570a4d08 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5576570a4aa8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576570a4b28 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5576570a4ba0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5576570a4c18 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5576570a92f8 <col:93> 'bool' false
|-CXXMethodDecl 0x5576570a4ef0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5576570a4dd8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5576570a4e58 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5576570a50c8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5576570a4fb0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5576570a5030 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5576570a53a8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5576570a5188 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5576570a5200 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5576570a5280 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5576570a52f8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5576570a5698 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5576570a5478 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5576570a54f0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5576570a5570 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5576570a55e8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5576570a58d0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5576570a5770 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5576570a57f0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5576570a5ab8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5576570a5998 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5576570a5a18 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5576570a5b68 prev 0x55765709d3c8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5576570a5c60 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5576570a5cf0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5576570a5d68 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5576570a5e28 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5576570a5ef0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5576570a6068 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5576570a5fa0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5576570a6110 <col:24>
| | `-OptimizeNoneAttr 0x5576570a6168 <col:34>
| |-CXXMethodDecl 0x5576570a61b0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5576570a6468 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5576570a6260 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5576570a62d8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5576570a6358 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5576570a6520 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5576570a6558 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5576570a65c0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5576570a6648 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5576570a6968 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5576570a6700 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5576570a6778 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5576570a67f0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5576570a6870 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5576570a6a80 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5576570ad378 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5576570ad378
| | `-ParmVarDecl 0x5576570ad488 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5576570ad528 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5576570ad528
| | `-ParmVarDecl 0x5576570ad638 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5576570d5488 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5576570a6af8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5576570a6b98 <col:38> "" ""
|-CXXMethodDecl 0x5576570a6c28 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5576570a6cc8 <col:44> "" ""
|-AccessSpecDecl 0x5576570a6d38 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5576570a6d60 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5576570a6e60 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5576570a6eb0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576570a6e40 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5576570a6e20 <col:27> 'int' 4
|-FieldDecl 0x5576570a6f68 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5576570a7118 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5576570a71d0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5576570a7230 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5576570a7298 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5576570a73e8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5576570a7328 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5576570a7598 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5576570a74a8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5576570a7778 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5576570a7658 <col:20> col:23 'int'
| `-ParmVarDecl 0x5576570a76d8 <col:25> col:28 'int'
|-CXXMethodDecl 0x5576570a7a20 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5576570a7840 <col:23> col:26 'int'
| |-ParmVarDecl 0x5576570a78c0 <col:28> col:31 'int'
| `-ParmVarDecl 0x5576570a7938 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5576570a7ad8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5576570a7ba0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5576570a7bf0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5576570a7c40 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5576570a7e20 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5576570a7cd0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5576570a7d48 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5576570a80c8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5576570a7ee8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5576570a7f68 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5576570a7fe0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5576570a82e8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5576570a8198 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5576570a8218 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5576570a8620 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5576570a83a8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5576570a8428 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5576570a84a0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5576570a8520 <col:57> col:60 'int'
|-CXXMethodDecl 0x5576570a8808 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5576570a86f0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5576570a8770 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5576570a8958 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5576570a88c8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5576570a8cd8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5576570a8a18 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5576570a8a98 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5576570a8b10 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5576570a8b90 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5576570a8db8 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class BufferConverter
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class Timer _timer
       112 |     int _schedpos1
       120 |     class Timestamp _expiry_s
       120 |       union Timestamp::rep_t _t
       120 |         int64_t x
       128 |     union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
       128 |       TimerCallback callback
       136 |     void * _thunk
       144 |     class Element * _owner
       152 |     class RouterThread * _thread
       160 |   int _mtu
       168 |   class String _obuf
       168 |     struct String::rep_t _r
       168 |       const char * data
       176 |       int length
       184 |       struct String::memo_t * memo
           | [sizeof=192, dsize=192, align=8,
           |  nvsize=192, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557656f99100 prev 0x557656f8f510 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x557656f991f8 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x557656f99298 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x557656f9bef8 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x557656f9f2f8 <col:11>
|-CXXConstructorDecl 0x557656f9bfd0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x557656f9c0b8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x557656f9fa40 <col:11>
|-CXXConstructorDecl 0x557656f9c158 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x557656f9f288 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x557656fa1698 <col:11>
|-CXXDestructorDecl 0x557656fa05a8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55765706be68 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55765706bf78 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55765706c840 <col:11>
|   `-ReturnStmt 0x55765706c830 <col:11>
|     `-UnaryOperator 0x55765706c818 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55765706c808 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x55765706bfe8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55765706c0f8 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x5576570b7020 <col:11>
    `-ReturnStmt 0x5576570b7010 <col:11>
      `-UnaryOperator 0x5576570b6ff8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5576570b6fe8 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557656f8e6c8 prev 0x557656f8e430 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x557656f8e7c0 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x557656f8e850 <col:19, col:25> col:19 public
|-TypedefDecl 0x557656f8e888 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x557656bcf330 'int32_t' sugar
|   |-Typedef 0x557656ae2328 'int32_t'
|   `-TypedefType 0x557656abb510 '__int32_t' sugar
|     |-Typedef 0x557656abb128 '__int32_t'
|     `-BuiltinType 0x557656a79580 'int'
|-TypedefDecl 0x557656f8e8f0 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x557656bcf4f0 'int64_t' sugar
|   |-Typedef 0x557656ae2390 'int64_t'
|   `-TypedefType 0x557656abb630 '__int64_t' sugar
|     |-Typedef 0x557656abb208 '__int64_t'
|     `-BuiltinType 0x557656a795a0 'long'
|-EnumDecl 0x557656f8e948 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x557656f8eac0 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x557656f8eaa0 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x557656f8ea78 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x557656f8ea60 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x557656f8ea30 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x557656f8ebb8 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x557656f8eb98 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x557656f8eb70 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x557656f8eb58 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x557656f8eb30 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x557656f8eb10 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x557656f8ec08 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x557656f8ed10 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x557656f8f260 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557656f8ecf0 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x557656f8ecd0 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x557656f8eda0 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x557656f8f278 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557656f8ed80 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x557656f8ed60 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x557656f8ee30 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x557656f8f290 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557656f8ee10 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x557656f8edf0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x557656f8eec0 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x557656f8f2a8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557656f8eea0 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x557656f8ee80 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x557656f8ef50 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x557656f8f2c0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557656f8ef30 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x557656f8ef10 <col:25> 'int' 1000
| |-EnumConstantDecl 0x557656f8efe0 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x557656f8f2d8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557656f8efc0 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x557656f8efa0 <col:24> 'int' 1000
| |-EnumConstantDecl 0x557656f8f070 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x557656f8f2f0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557656f8f050 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x557656f8f030 <col:26> 'int' EnumConstant 0x557656f8ed10 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x557656f8f140 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x557656f8f308 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557656f8f120 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x557656f8f100 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x557656f8f0c0 <col:27> 'int' EnumConstant 0x557656f8f070 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x557656f8f0e0 <col:44> 'int' EnumConstant 0x557656f8efe0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x557656f8f210 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x557656f8f320 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x557656f8f1f0 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x557656f8f1d0 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x557656f8f190 <col:27> 'int' EnumConstant 0x557656f8f070 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x557656f8f1b0 <col:44> 'int' EnumConstant 0x557656f8eec0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x557656f8f338 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x557656f8f440 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x557656f8f490 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x557656f8f420 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x557656f8f400 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8f070 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x557656f8f4b8 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x557656bcef60 'uninitialized_type'
|   `-CXXRecord 0x557656bceec8 'uninitialized_type'
|-CXXRecordDecl 0x557656f8f510 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x557656f8f5f8 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x557656f9a248 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x557656f9f308 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x557656f9f428 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x557656f9f3e0 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x557656f9f370 <col:9> '<bound member function type>' ->assign 0x557656f93bb8
|     | `-CXXThisExpr 0x557656f9f360 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x557656f9f3a0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x557656f9f410 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x557656f9f3c0 <col:19> 'int' 0
|-CXXConstructorDecl 0x557656f8f848 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x557656f8f6b8 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x557656f8f730 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x557656f9bd90 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x557656f9bd70 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x557656f9a248 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x557656f9f440 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x557656f9f590 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x557656f9f518 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x557656f9f4a8 <col:9> '<bound member function type>' ->assign 0x557656f93bb8
|     | `-CXXThisExpr 0x557656f9f498 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x557656f9f560 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x557656f9f548 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x557656f9f4d8 <col:16> 'long' lvalue ParmVar 0x557656f8f6b8 'sec' 'long'
|     `-ImplicitCastExpr 0x557656f9f578 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x557656f9f4f8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656f8f730 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x557656f8faa8 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x557656f8f918 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x557656f8f990 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x557656f9bdc8 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x557656f9bda8 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x557656f9a248 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x557656f9f5a8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x557656f9f6e0 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x557656f9f680 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x557656f9f610 <col:9> '<bound member function type>' ->assign 0x557656f93bb8
|     | `-CXXThisExpr 0x557656f9f600 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x557656f9f6b0 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x557656f9f640 <col:16> 'int' lvalue ParmVar 0x557656f8f918 'sec' 'int'
|     `-ImplicitCastExpr 0x557656f9f6c8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x557656f9f660 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656f8f990 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x557656f8fd08 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x557656f8fb78 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x557656f8fbf0 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x557656f9be00 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x557656f9bde0 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x557656f9a248 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x557656f9f6f8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x557656f9f848 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x557656f9f7d0 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x557656f9f760 <col:9> '<bound member function type>' ->assign 0x557656f93bb8
|     | `-CXXThisExpr 0x557656f9f750 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x557656f9f818 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x557656f9f800 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x557656f9f790 <col:16> 'unsigned long' lvalue ParmVar 0x557656f8fb78 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x557656f9f830 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x557656f9f7b0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656f8fbf0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x557656f8ff68 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x557656f8fdd8 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x557656f8fe50 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x557656f9be38 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x557656f9be18 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x557656f9a248 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x557656f9f860 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x557656f9f9b0 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x557656f9f938 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x557656f9f8c8 <col:9> '<bound member function type>' ->assign 0x557656f93bb8
|     | `-CXXThisExpr 0x557656f9f8b8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x557656f9f980 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x557656f9f968 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x557656f9f8f8 <col:16> 'unsigned int' lvalue ParmVar 0x557656f8fdd8 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x557656f9f998 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x557656f9f918 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656f8fe50 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x557656f900c8 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x557656f90038 <col:31> col:37 'double'
|-CXXConstructorDecl 0x557656f90ab0 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x557656f901a0 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x557656f90cd8 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x557656f90be0 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x557656f90e88 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x557656f90dc8 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x557656f9a248 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x557656f9fa50 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x557656f9f9c8 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x557656f90dc8 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x557656f9fab0 <col:19, line:214:5>
|-CXXConstructorDecl 0x557656f910b8 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x557656f90fc8 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x557656f9a248 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x557656f9fac0 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x557656f9fb70 <col:53, line:219:5>
|   `-CStyleCastExpr 0x557656f9fb48 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x557656f9fb18 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x557656f90fc8 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x557656f912a8 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x557656f91220 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x557656dd8770 'Timestamp'
|   | `-CXXRecord 0x557656f8e6c8 'Timestamp'
|   `-ParenType 0x557656f911c0 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x557656f91190 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x557656f8ea10 'Timestamp::seconds_type' sugar
|         |-Typedef 0x557656f8e888 'seconds_type'
|         `-TypedefType 0x557656bcf330 'int32_t' sugar
|           |-Typedef 0x557656ae2328 'int32_t'
|           `-TypedefType 0x557656abb510 '__int32_t' sugar
|             |-Typedef 0x557656abb128 '__int32_t'
|             `-BuiltinType 0x557656a79580 'int'
|-CXXConversionDecl 0x557656f913e8 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x557656f914b8 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x557656f9fc78 <col:37, line:231:5>
|   `-ReturnStmt 0x557656f9fc68 <line:227:9, col:23>
|     `-BinaryOperator 0x557656f9fc48 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x557656f9fc18 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x557656f9fbc8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x557656f99298
|       |   `-MemberExpr 0x557656f9fb98 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x557656f9a248
|       |     `-CXXThisExpr 0x557656f9fb88 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x557656f9fc30 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x557656f9fbf8 <col:23> 'int' 0
|-CXXMethodDecl 0x557656f91578 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x557656f91638 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x557656f916f8 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x557656f917b8 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x557656f91878 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x557656f919e8 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x557656f91928 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x557656f91b30 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x557656f91aa0 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656f91bf8 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x557656f91c98 <col:54> "" ""
|-CXXMethodDecl 0x557656f91d28 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x557656f91dc8 <col:54> "" ""
|-CXXMethodDecl 0x557656f91e58 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x557656f91ef8 <col:54> "" ""
|-CXXMethodDecl 0x557656f91ff8 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x557656f920c8 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x557656f921f8 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x557656f922f0 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x557656f92428 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x557656f9fe90 <col:39, line:271:5>
|   `-ReturnStmt 0x557656f9fe80 <line:267:9, col:61>
|     `-CallExpr 0x557656f9fe20 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x557656f9fe08 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x557656f9fc90 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x557656f9a578 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x557656f9fe50 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x557656f9fcf0 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x557656f99298
|       |   `-MemberExpr 0x557656f9fcc0 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x557656f9a248
|       |     `-CXXThisExpr 0x557656f9fcb0 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x557656f9fe68 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x557656f9fd90 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x557656f9fd60 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x557656f9fd20 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8f070 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x557656f9fd78 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x557656f9fd40 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8efe0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x557656f924e8 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x557656fa0050 <col:39, line:279:5>
|   `-ReturnStmt 0x557656fa0040 <line:275:9, col:61>
|     `-CallExpr 0x557656f9ffe0 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x557656f9ffc8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x557656f9fea8 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x557656f9a578 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x557656fa0010 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x557656f9ff08 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x557656f99298
|       |   `-MemberExpr 0x557656f9fed8 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x557656f9a248
|       |     `-CXXThisExpr 0x557656f9fec8 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x557656fa0028 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x557656f9ffa8 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x557656f9ff78 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x557656f9ff38 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8f070 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x557656f9ff90 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x557656f9ff58 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8eec0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x557656f925a8 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x557656fa01e8 <col:39, line:287:5>
|   `-ReturnStmt 0x557656fa01d8 <line:283:9, col:53>
|     `-BinaryOperator 0x557656fa01b8 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x557656fa0188 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x557656fa00a8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x557656f99298
|       |   `-MemberExpr 0x557656fa0078 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x557656f9a248
|       |     `-CXXThisExpr 0x557656fa0068 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x557656fa01a0 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x557656fa0168 <col:23, col:53> 'int'
|           `-BinaryOperator 0x557656fa0148 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x557656fa0118 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x557656fa00d8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8ed10 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x557656fa0130 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x557656fa00f8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8f070 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x557656f92698 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x557656fa1880 <col:40, line:293:5>
|   |-DeclStmt 0x557656fa0330 <line:291:9, col:48>
|   | `-VarDecl 0x557656fa0210 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x557656fa0310 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x557656fa02b8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x557656fa0288 <col:22> '<bound member function type>' ->subsec 0x557656f91638
|   |     |   `-CXXThisExpr 0x557656fa0278 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x557656fa02f8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x557656fa02d8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8f140 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x557656fa1870 <line:292:9, col:70>
|     `-ExprWithCleanups 0x557656fa1858 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x557656fa1828 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x557656fa1810 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x557656fa17f0 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x557656fa17c0 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x557656fa1558 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x557656fa1540 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x557656fa0348 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x557656fa0210 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x557656fa1760 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x557656fa1748 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x557656fa1718 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x557656fa1570 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x557656fa14e0 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x557656fa14c8 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x557656fa1478 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x557656f8e618 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x557656fa1418 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x557656fa0378 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x557656fa0368 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x557656fa1460 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x557656fa1448 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x557656fa0838 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x557656fa03a0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x557656fa0430 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x557656fa0400 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x557656fa03c0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8f140 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x557656fa0418 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x557656fa03e0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x557656fa0210 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x557656fa1790 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x557656fa1528 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x557656fa1518 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x557656f92758 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x557656fa1dd8 <col:40, line:302:5>
|   |-DeclStmt 0x557656fa19d0 <line:297:9, col:48>
|   | `-VarDecl 0x557656fa18b0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x557656fa19b0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x557656fa1958 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x557656fa1928 <col:22> '<bound member function type>' ->subsec 0x557656f91638
|   |     |   `-CXXThisExpr 0x557656fa1918 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x557656fa1998 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x557656fa1978 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8f210 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x557656fa1dc8 <line:298:9, col:70>
|     `-ExprWithCleanups 0x557656fa1db0 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x557656fa1d80 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x557656fa1d68 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x557656fa1d48 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x557656fa1d18 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x557656fa1c40 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x557656fa1c28 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x557656fa19e8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x557656fa18b0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x557656fa1cb8 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x557656fa1ca0 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x557656fa1c70 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x557656fa1c58 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x557656fa1bc8 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x557656fa1bb0 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x557656fa1b90 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x557656f8e618 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x557656fa1b30 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x557656fa1a18 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x557656fa1a08 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x557656fa1b78 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x557656fa1b60 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x557656fa1af0 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x557656fa1a40 <col:39> 'int' 0
|               |               `-BinaryOperator 0x557656fa1ad0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x557656fa1aa0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x557656fa1a60 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8f210 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x557656fa1ab8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x557656fa1a80 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x557656fa18b0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x557656fa1ce8 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x557656fa1c10 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x557656fa1c00 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x557656f92818 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x557656fa1e60 <col:40, line:306:5>
|   `-ReturnStmt 0x557656fa1e50 <line:305:9, col:17>
|     `-CXXConstructExpr 0x557656fa1e20 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x557656fa1e08 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x557656fa1df8 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x557656f929b8 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x557656f928c8 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x557656f92b88 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x557656f92a90 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x557656f92c78 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x557656f92de8 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x557656f92d28 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x557656fa1fa8 <col:56, line:320:5>
|   `-ReturnStmt 0x557656fa1f98 <line:319:9, col:32>
|     `-ExprWithCleanups 0x557656fa1f80 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x557656fa1f50 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x557656fa1f38 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x557656fa1ef8 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x557656fa1ec8 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x557656fa1e88 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x557656f92d28 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x557656fa1ee0 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x557656fa1ea8 <col:31> 'int' 0
|-CXXMethodDecl 0x557656f93028 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x557656f92ea0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x557656f92f18 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x557656fa2178 <col:72, line:326:5>
|   `-ReturnStmt 0x557656fa2168 <line:325:9, col:51>
|     `-ExprWithCleanups 0x557656fa2150 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x557656fa2120 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x557656fa2108 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x557656fa20c8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x557656fa20b0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x557656fa1fd0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x557656f92ea0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x557656fa2070 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x557656fa2058 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x557656fa1ff0 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x557656f989f0 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x557656fa2098 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x557656fa2010 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656f92f18 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656f931d8 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x557656f930e8 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x557656fa2840 <col:56, line:337:5>
|   |-DeclStmt 0x557656fa2478 <line:329:9, col:51>
|   | `-VarDecl 0x557656fa21a0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x557656fa2460 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x557656fa2430 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x557656fa2418 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x557656fa2400 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x557656fa23d0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x557656fa23b8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x557656fa23a0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x557656fa2290 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x557656fa2630 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x557656fa24e0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x557656f99298
|   | | `-MemberExpr 0x557656fa24b0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x557656f9a248
|   | |   `-DeclRefExpr 0x557656fa2490 <col:9> 'Timestamp' lvalue Var 0x557656fa21a0 't' 'Timestamp'
|   | `-BinaryOperator 0x557656fa2610 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x557656fa25e0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x557656fa2510 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x557656f930e8 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x557656fa25f8 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x557656fa25c0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x557656fa25a0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x557656fa2570 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x557656fa2530 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8f070 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x557656fa2588 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x557656fa2550 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8efe0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x557656fa2828 <line:336:9, col:16>
|     `-CXXConstructExpr 0x557656fa27f8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x557656fa27e0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x557656fa27c0 <col:16> 'Timestamp' lvalue Var 0x557656fa21a0 't' 'Timestamp'
|-CXXMethodDecl 0x557656f933a0 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x557656f93290 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x557656f93308 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x557656fa29f8 <col:72, line:343:5>
|   `-ReturnStmt 0x557656fa29e8 <line:342:9, col:51>
|     `-ExprWithCleanups 0x557656fa29d0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x557656fa29a0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x557656fa2988 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x557656fa2948 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x557656fa2930 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x557656fa2878 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x557656f93290 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x557656fa28f0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x557656fa28d8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x557656fa2898 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x557656f98b38 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x557656fa2918 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x557656fa28b8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656f93308 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656f934f0 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x557656f93460 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x557656fa2e40 <col:56, line:354:5>
|   |-DeclStmt 0x557656fa2be8 <line:346:9, col:51>
|   | `-VarDecl 0x557656fa2a20 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x557656fa2bd0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x557656fa2ba0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x557656fa2b88 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x557656fa2b70 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x557656fa2b40 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x557656fa2b28 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x557656fa2b10 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x557656fa2ae0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x557656fa2da0 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x557656fa2c50 <col:9, col:14> 'int64_t':'long' lvalue .x 0x557656f99298
|   | | `-MemberExpr 0x557656fa2c20 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x557656f9a248
|   | |   `-DeclRefExpr 0x557656fa2c00 <col:9> 'Timestamp' lvalue Var 0x557656fa2a20 't' 'Timestamp'
|   | `-BinaryOperator 0x557656fa2d80 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x557656fa2d50 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x557656fa2c80 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x557656f93460 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x557656fa2d68 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x557656fa2d30 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x557656fa2d10 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x557656fa2ce0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x557656fa2ca0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8f070 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x557656fa2cf8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x557656fa2cc0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8eec0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x557656fa2e28 <line:353:9, col:16>
|     `-CXXConstructExpr 0x557656fa2df8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x557656fa2de0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x557656fa2dc0 <col:16> 'Timestamp' lvalue Var 0x557656fa2a20 't' 'Timestamp'
|-CXXMethodDecl 0x557656f936b8 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x557656f935a8 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x557656f93620 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x557656fa2ff8 <col:72, line:360:5>
|   `-ReturnStmt 0x557656fa2fe8 <line:359:9, col:51>
|     `-ExprWithCleanups 0x557656fa2fd0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x557656fa2fa0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x557656fa2f88 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x557656fa2f48 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x557656fa2f30 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x557656fa2e78 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x557656f935a8 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x557656fa2ef0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x557656fa2ed8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x557656fa2e98 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x557656f98c80 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x557656fa2f18 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x557656fa2eb8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656f93620 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656f93808 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x557656f93778 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x557656fac928 <col:56, line:371:5>
|   |-DeclStmt 0x557656fa31e8 <line:363:9, col:51>
|   | `-VarDecl 0x557656fa3020 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x557656fa31d0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x557656fa31a0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x557656fa3188 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x557656fa3170 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x557656fa3140 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x557656fa3128 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x557656fa3110 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x557656fa30e0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x557656fac888 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x557656fac710 <col:9, col:14> 'int64_t':'long' lvalue .x 0x557656f99298
|   | | `-MemberExpr 0x557656fac6e0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x557656f9a248
|   | |   `-DeclRefExpr 0x557656fa3200 <col:9> 'Timestamp' lvalue Var 0x557656fa3020 't' 'Timestamp'
|   | `-CallExpr 0x557656fac828 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x557656fac810 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x557656fac740 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x557656f9a578 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x557656fac858 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x557656fac760 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x557656f93778 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x557656fac870 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x557656fac7f0 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x557656fac7c0 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x557656fac780 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8ed10 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x557656fac7d8 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x557656fac7a0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8f070 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x557656fac910 <line:370:9, col:16>
|     `-CXXConstructExpr 0x557656fac8e0 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x557656fac8c8 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x557656fac8a8 <col:16> 'Timestamp' lvalue Var 0x557656fa3020 't' 'Timestamp'
|-CXXMethodDecl 0x557656f938f8 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x557656faca68 <col:39, line:377:5>
|   `-ReturnStmt 0x557656faca58 <line:376:9, col:30>
|     `-ExprWithCleanups 0x557656faca40 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x557656faca10 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x557656fac9f8 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x557656fac9b8 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x557656fac960 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x557656fac9a0 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x557656fac980 <col:29> 'int' 1
|-CXXMethodDecl 0x557656f939b8 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x557656facb48 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x557656facb00 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x557656faca90 <col:9> '<bound member function type>' ->assign 0x557656f93bb8
|     | `-CXXThisExpr 0x557656faca80 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x557656facac0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x557656facb30 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x557656facae0 <col:19> 'int' 0
|-CXXMethodDecl 0x557656f93bb8 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x557656f93a68 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x557656f93ae0 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x557656f9be70 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x557656f9be50 <col:60> 'int' 0
| `-CompoundStmt 0x557656facd40 <col:63, line:395:5>
|   `-BinaryOperator 0x557656facd20 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x557656facba0 <col:9, col:12> 'int64_t':'long' lvalue .x 0x557656f99298
|     | `-MemberExpr 0x557656facb70 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x557656f9a248
|     |   `-CXXThisExpr 0x557656facb60 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x557656facd00 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x557656facc90 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x557656facc30 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x557656facc18 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x557656facc00 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x557656facbd0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x557656f93a68 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x557656facc78 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x557656facc58 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8f070 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x557656facce8 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x557656faccd0 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x557656faccb0 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656f93ae0 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656f93d88 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x557656f93c78 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x557656f93cf0 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x557656face98 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x557656face50 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x557656facd68 <col:9> '<bound member function type>' ->assign 0x557656f93bb8
|     | `-CXXThisExpr 0x557656facd58 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x557656face80 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x557656facd98 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x557656f93c78 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x557656face10 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x557656facdf8 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x557656facdb8 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x557656f98b38 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x557656face38 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x557656facdd8 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656f93cf0 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656f93f58 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x557656f93e48 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x557656f93ec0 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x557656facff0 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x557656facfa8 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x557656facec0 <col:9> '<bound member function type>' ->assign 0x557656f93bb8
|     | `-CXXThisExpr 0x557656faceb0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x557656facfd8 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x557656facef0 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x557656f93e48 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x557656facf68 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x557656facf50 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x557656facf10 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x557656f98c80 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x557656facf90 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x557656facf30 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656f93ec0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656f94128 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x557656f94018 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x557656f94090 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x557656f9bea8 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x557656f9be88 <col:57> 'int' 0
| `-DeprecatedAttr 0x557656f941d8 <col:75> "" ""
|-CXXMethodDecl 0x557656f94368 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x557656f94258 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x557656f942d0 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x557656f94418 <col:74> "" ""
|-CXXMethodDecl 0x557656f945a8 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x557656f94498 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x557656f94510 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x557656f94658 <col:74> "" ""
|-CXXMethodDecl 0x557656f946e8 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x557656f94788 <col:42> "" ""
|-CXXMethodDecl 0x557656f94930 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x557656f94810 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x557656f94890 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x557656f94a00 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x557656f98230 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x557656f982d0 <col:20>
| `-OptimizeNoneAttr 0x557656f98328 <col:30>
|-CXXMethodDecl 0x557656f98370 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x557656f98430 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x557656f984f0 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x557656f985b0 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x557656f98670 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x557656f98730 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x557656f987f0 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x557656f988b0 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x557656f989f0 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x557656f98960 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x557656fad138 <col:58, line:512:5>
|   `-ReturnStmt 0x557656fad128 <line:511:9, col:53>
|     `-BinaryOperator 0x557656fad108 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x557656fad0d8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x557656fad008 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656f98960 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x557656fad0f0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x557656fad0b8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x557656fad098 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x557656fad068 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x557656fad028 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8f070 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x557656fad080 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x557656fad048 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8efe0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x557656f98b38 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x557656f98aa8 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x557656fad280 <col:58, line:516:5>
|   `-ReturnStmt 0x557656fad270 <line:515:9, col:53>
|     `-BinaryOperator 0x557656fad250 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x557656fad220 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x557656fad150 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656f98aa8 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x557656fad238 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x557656fad200 <col:23, col:53> 'int'
|           `-BinaryOperator 0x557656fad1e0 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x557656fad1b0 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x557656fad170 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8f070 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x557656fad1c8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x557656fad190 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8eec0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x557656f98c80 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x557656f98bf0 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x557656fad3c8 <col:58, line:520:5>
|   `-ReturnStmt 0x557656fad3b8 <line:519:9, col:53>
|     `-BinaryOperator 0x557656fad398 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x557656fad368 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x557656fad298 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656f98bf0 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x557656fad380 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x557656fad348 <col:23, col:53> 'int'
|           `-BinaryOperator 0x557656fad328 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x557656fad2f8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x557656fad2b8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8ed10 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x557656fad310 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x557656fad2d8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8f070 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x557656f98dc8 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x557656f98d38 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x557656fad510 <col:60, line:524:5>
|   `-ReturnStmt 0x557656fad500 <line:523:9, col:55>
|     `-BinaryOperator 0x557656fad4e0 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x557656fad4b0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x557656fad3e0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656f98d38 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x557656fad4c8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x557656fad490 <col:25, col:55> 'int'
|           `-BinaryOperator 0x557656fad470 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x557656fad440 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x557656fad400 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8f070 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x557656fad458 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x557656fad420 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8efe0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x557656f98f10 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x557656f98e80 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x557656fad658 <col:60, line:528:5>
|   `-ReturnStmt 0x557656fad648 <line:527:9, col:55>
|     `-BinaryOperator 0x557656fad628 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x557656fad5f8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x557656fad528 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656f98e80 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x557656fad610 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x557656fad5d8 <col:25, col:55> 'int'
|           `-BinaryOperator 0x557656fad5b8 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x557656fad588 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x557656fad548 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8f070 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x557656fad5a0 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x557656fad568 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8eec0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x557656f99058 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x557656f98fc8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x557656fad7a0 <col:60, line:532:5>
|   `-ReturnStmt 0x557656fad790 <line:531:9, col:55>
|     `-BinaryOperator 0x557656fad770 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x557656fad740 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x557656fad670 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656f98fc8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x557656fad758 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x557656fad720 <col:25, col:55> 'int'
|           `-BinaryOperator 0x557656fad700 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x557656fad6d0 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x557656fad690 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8ed10 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x557656fad6e8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x557656fad6b0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656f8f070 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x557656f99100 prev 0x557656f8f510 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x557656f991f8 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x557656f99298 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x557656f9bef8 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x557656f9f2f8 <col:11>
| |-CXXConstructorDecl 0x557656f9bfd0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x557656f9c0b8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x557656f9fa40 <col:11>
| |-CXXConstructorDecl 0x557656f9c158 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x557656f9f288 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x557656fa1698 <col:11>
| |-CXXDestructorDecl 0x557656fa05a8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55765706be68 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55765706bf78 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x55765706c840 <col:11>
| |   `-ReturnStmt 0x55765706c830 <col:11>
| |     `-UnaryOperator 0x55765706c818 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55765706c808 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x55765706bfe8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x55765706c0f8 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x5576570b7020 <col:11>
|     `-ReturnStmt 0x5576570b7010 <col:11>
|       `-UnaryOperator 0x5576570b6ff8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5576570b6fe8 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x557656f99300 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x557656f99400 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x557656f99600 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557656f993e0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x557656f993c0 <col:21> 'int' 0
| |-EnumConstantDecl 0x557656f99490 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x557656f99618 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557656f99470 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x557656f99450 <col:23> 'int' 1
| |-EnumConstantDecl 0x557656f99520 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x557656f99630 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557656f99500 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x557656f994e0 <col:23> 'int' 2
| `-EnumConstantDecl 0x557656f995b0 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x557656f99648 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x557656f99590 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x557656f99570 <col:27> 'int' 3
|-CXXMethodDecl 0x557656f99688 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x557656f99750 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x557656f99958 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x557656f99800 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x557656f99880 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x557656f9bec0 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x557656f99b68 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x557656f99a18 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x557656f99a90 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x557656f99c38 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x557656f99cf8 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x557656f99e68 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x557656f99da8 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x557656f99f30 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x557656f99ff0 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x557656f9a0b0 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x557656f9a170 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x557656f9a210 <line:670:3, col:10> col:3 private
|-FieldDecl 0x557656f9a248 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x557656f9a2b8 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x557656fad7b8 <col:27, line:684:5>
|-CXXMethodDecl 0x557656f9a378 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x557656fad7c8 <col:27, line:696:5>
|-CXXMethodDecl 0x557656f9a578 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x557656f9a428 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x557656f9a4a0 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x557656fad950 <col:66, line:700:5>
|   `-ReturnStmt 0x557656fad940 <line:699:9, col:31>
|     `-CallExpr 0x557656fad8e0 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x557656fad8c8 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x557656fad878 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x557656e1d948 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x557656fad910 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x557656fad838 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x557656f9a428 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x557656fad928 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x557656fad858 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656f9a4a0 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656f9a8e8 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x557656f9a638 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x557656f9a6b0 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x557656f9a728 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x557656f9a7a0 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x557656fadca0 <col:64, line:707:5>
|   |-DeclStmt 0x557656fad9e0 <line:704:9, col:24>
|   | `-VarDecl 0x557656fad978 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x557656fadbf0 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x557656fad9f8 <col:9> 'int32_t':'int' lvalue ParmVar 0x557656f9a6b0 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x557656fadbd8 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x557656fadb70 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x557656fadb58 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557656fadad8 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x557656e22c28 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x557656fadba8 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x557656fada78 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x557656f9a728 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x557656fadbc0 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x557656fada98 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656f9a7a0 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x557656fadab8 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x557656fad978 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x557656fadc80 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x557656fadc10 <col:9> 'int32_t':'int' lvalue ParmVar 0x557656f9a638 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x557656fadc68 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x557656fadc50 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x557656fadc30 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x557656fad978 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x557656f9ab88 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x557656f9a9b8 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x557656f9aa30 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x557656f9aaa8 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x557656f9ae28 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x557656f9ac50 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x557656f9acc8 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x557656f9ad40 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x557656f9afb8 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x557656f9aef0 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x557656f9b1b8 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x557656f9b070 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x557656f9b0e8 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x557656f9b488 <line:717:5, col:73> col:24
| `-FunctionDecl 0x557656f9b3c8 parent 0x557656a79488 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x557656f9b278 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x557656f9b2f0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x557656f9b6a8 <line:718:5, col:72> col:24
| `-FunctionDecl 0x557656f9b5e8 parent 0x557656a79488 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x557656f9b4d8 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x557656f9b550 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x557656f9b870 <line:719:5, col:57> col:29
| `-FunctionDecl 0x557656f9b7b8 parent 0x557656a79488 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x557656f9b6f8 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x557656f9baf8 <line:720:5, col:73> col:30
| `-FunctionDecl 0x557656f9ba38 parent 0x557656a79488 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x557656f9b8e8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x557656f9b960 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x557656f9bd18 <line:721:5, col:73> col:30
| `-FunctionDecl 0x557656f9bc58 parent 0x557656a79488 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x557656f9bb48 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x557656f9bbc0 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x557656fa0450 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x557656fa0538 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x557656f9a248 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x557656fa13a8 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x557656fa1360 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x557656f9a248
| |     `-DeclRefExpr 0x557656fa1340 <col:7> 'const Timestamp' lvalue ParmVar 0x557656fa0538 '' 'const Timestamp &'
| `-CompoundStmt 0x557656fa1408 <col:7>
|-CXXConstructorDecl 0x557656fa06b8 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x557656fa07c8 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x557656f9a248 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x557656fa16a8 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x557656fa1650 <col:7> 'Timestamp::rep_t' xvalue ._t 0x557656f9a248
| |     `-CXXStaticCastExpr 0x557656fa1620 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x557656fa15f0 <col:7> 'Timestamp' lvalue ParmVar 0x557656fa07c8 '' 'Timestamp &&'
| `-CompoundStmt 0x557656fa1708 <col:7>
|-CXXDestructorDecl 0x557656fa0878 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55765706bcc0 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x55765706bdc8 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x55765706c8b8 <col:7>
|   |-CXXMemberCallExpr 0x55765706c858 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x55765706c798 <col:7> '<bound member function type>' .operator= 0x55765706be68
|   | | `-MemberExpr 0x55765706c6a8 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x557656f9a248
|   | |   `-CXXThisExpr 0x55765706c698 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x55765706c768 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x557656f9a248
|   |   `-DeclRefExpr 0x55765706c748 <col:7> 'const Timestamp' lvalue ParmVar 0x55765706bdc8 '' 'const Timestamp &'
|   `-ReturnStmt 0x55765706c8a8 <col:7>
|     `-UnaryOperator 0x55765706c890 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55765706c880 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x55765706c168 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55765706c278 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x5576570b7098 <col:7>
    |-CXXMemberCallExpr 0x5576570b7038 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x5576570b6fa0 <col:7> '<bound member function type>' .operator= 0x55765706bfe8
    | | `-MemberExpr 0x5576570b6e70 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x557656f9a248
    | |   `-CXXThisExpr 0x5576570b6e60 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x5576570b6f70 <col:7> 'Timestamp::rep_t' xvalue ._t 0x557656f9a248
    |   `-CXXStaticCastExpr 0x5576570b6f40 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x5576570b6f10 <col:7> 'Timestamp' lvalue ParmVar 0x55765706c278 '' 'Timestamp &&'
    `-ReturnStmt 0x5576570b7088 <col:7>
      `-UnaryOperator 0x5576570b7070 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5576570b7060 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576570b4078 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5576570b41a8 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x5576570b4c98 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576570b08b8 prev 0x557657088d90 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 referenced class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5576570b09b0 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x5576570b0a40 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x5576570b0aa0 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x5576570b0b48 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5576570b0c68 <col:5, col:12> col:12 implicit struct do_nothing_t
| |-CXXConstructorDecl 0x5576570d4f60 <col:12> col:12 implicit constexpr do_nothing_t 'void ()' inline default trivial noexcept-unevaluated 0x5576570d4f60
| |-CXXConstructorDecl 0x5576570d5040 <col:12> col:12 implicit constexpr do_nothing_t 'void (const Timer::do_nothing_t &)' inline default trivial noexcept-unevaluated 0x5576570d5040
| | `-ParmVarDecl 0x5576570d5128 <col:12> col:12 'const Timer::do_nothing_t &'
| `-CXXConstructorDecl 0x5576570d51c8 <col:12> col:12 implicit constexpr do_nothing_t 'void (Timer::do_nothing_t &&)' inline default trivial noexcept-unevaluated 0x5576570d51c8
|   `-ParmVarDecl 0x5576570d52d8 <col:12> col:12 'Timer::do_nothing_t &&'
|-CXXConstructorDecl 0x5576570b0e08 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x5576570b0d48 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x5576570b1058 <line:38:5, col:43> col:5 Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x5576570b0ec8 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x5576570b0f48 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x5576570b11e8 <line:43:5, col:27> col:5 used Timer 'void (Element *)'
| `-ParmVarDecl 0x5576570b1120 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x5576570b1368 <line:47:5, col:21> col:5 Timer 'void (Task *)'
| `-ParmVarDecl 0x5576570b12a8 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x5576570b1518 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x5576570b1458 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x5576570b1610 <line:55:5, line:58:5> line:55:12 used ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x5576570b4e70 <col:21, line:58:5>
|   `-IfStmt 0x5576570b4e58 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x5576570b4dc0 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x5576570b4d90 <col:6> '<bound member function type>' ->scheduled 0x5576570b1e68
|     |   `-ImplicitCastExpr 0x5576570b4de0 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x5576570b4d80 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x5576570b4e38 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x5576570b4e08 <col:6> '<bound member function type>' ->unschedule 0x5576570b3520
|         `-CXXThisExpr 0x5576570b4df8 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x5576570b1710 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x5576570b5010 <col:26, line:65:5>
|   |-BinaryOperator 0x5576570b4f30 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5576570b4ec8 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5576570b41a8
|   | | `-MemberExpr 0x5576570b4e98 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5576570b4268
|   | |   `-CXXThisExpr 0x5576570b4e88 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5576570b4f18 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5576570b4ef8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5576570b46c8 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5576570b4ff0 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x5576570b4f60 <col:2> 'void *' lvalue ->_thunk 0x5576570b42e8
|     | `-CXXThisExpr 0x5576570b4f50 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x5576570b4fc8 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x5576570b4f90 <col:20> 'int' 1
|-CXXMethodDecl 0x5576570b1850 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x5576570b17c0 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x5576570b5170 <col:52, line:71:5>
|   |-CStyleCastExpr 0x5576570b5060 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x5576570b5030 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x5576570b17c0 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x5576570b5150 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x5576570b5120 <col:2> '<bound member function type>' ->assign 0x5576570b1710
|       `-CXXThisExpr 0x5576570b5110 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x5576570b1a20 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x5576570b1908 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x5576570b1988 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x5576570b52f0 <col:58, line:79:5>
|   |-BinaryOperator 0x5576570b5238 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5576570b51d0 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5576570b41a8
|   | | `-MemberExpr 0x5576570b51a0 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5576570b4268
|   | |   `-CXXThisExpr 0x5576570b5190 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5576570b5220 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x5576570b5200 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x5576570b1908 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x5576570b52d0 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5576570b5268 <col:2> 'void *' lvalue ->_thunk 0x5576570b42e8
|     | `-CXXThisExpr 0x5576570b5258 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5576570b52b8 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x5576570b5298 <col:11> 'void *' lvalue ParmVar 0x5576570b1988 'user_data' 'void *'
|-CXXMethodDecl 0x5576570b1b70 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x5576570b1ae0 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x5576570b5488 <col:35, line:87:5>
|   |-BinaryOperator 0x5576570b53b8 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5576570b5350 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5576570b41a8
|   | | `-MemberExpr 0x5576570b5320 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5576570b4268
|   | |   `-CXXThisExpr 0x5576570b5310 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5576570b53a0 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5576570b5380 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5576570b48a0 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5576570b5468 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5576570b53e8 <col:2> 'void *' lvalue ->_thunk 0x5576570b42e8
|     | `-CXXThisExpr 0x5576570b53d8 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5576570b5450 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5576570b5438 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x5576570b5418 <col:11> 'Element *' lvalue ParmVar 0x5576570b1ae0 'element' 'Element *'
|-CXXMethodDecl 0x5576570b1cb8 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x5576570b1c28 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x5576570b5620 <col:29, line:94:5>
|   |-BinaryOperator 0x5576570b5550 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5576570b54e8 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5576570b41a8
|   | | `-MemberExpr 0x5576570b54b8 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5576570b4268
|   | |   `-CXXThisExpr 0x5576570b54a8 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5576570b5538 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5576570b5518 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5576570b4a78 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5576570b5600 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5576570b5580 <col:2> 'void *' lvalue ->_thunk 0x5576570b42e8
|     | `-CXXThisExpr 0x5576570b5570 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5576570b55e8 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5576570b55d0 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x5576570b55b0 <col:11> 'Task *' lvalue ParmVar 0x5576570b1c28 'task' 'Task *'
|-CXXMethodDecl 0x5576570b1da8 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x5576570b5700 <col:37, line:100:5>
|   `-ReturnStmt 0x5576570b56f0 <line:99:2, col:19>
|     `-BinaryOperator 0x5576570b56d0 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x5576570b56a0 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x5576570b5650 <col:9> 'Element *const' lvalue ->_owner 0x5576570b4348
|       |   `-CXXThisExpr 0x5576570b5640 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x5576570b56b8 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x5576570b5680 <col:19> 'int' 0
|-CXXMethodDecl 0x5576570b1e68 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x5576570b57c0 <col:35, line:105:5>
|   `-ReturnStmt 0x5576570b57b0 <line:104:2, col:23>
|     `-BinaryOperator 0x5576570b5790 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x5576570b5778 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x5576570b5728 <col:9> 'const int' lvalue ->_schedpos1 0x5576570b3fc8
|       |   `-CXXThisExpr 0x5576570b5718 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x5576570b5758 <col:23> 'int' 0
|-CXXMethodDecl 0x5576570b1f28 <line:116:5, line:118:5> line:116:29 expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x5576570b5828 <col:51, line:118:5>
|   `-ReturnStmt 0x5576570b5818 <line:117:2, col:9>
|     `-MemberExpr 0x5576570b57e8 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x5576570b4028
|       `-CXXThisExpr 0x5576570b57d8 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5576570b1fe8 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x5576570b5d80 <col:37, line:136:5>
|   `-IfStmt 0x5576570b5d58 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x5576570b58e8 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x5576570b58d0 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x5576570b58b0 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x5576570b5880 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x557656f913e8
|     |       `-MemberExpr 0x5576570b5850 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x5576570b4028
|     |         `-CXXThisExpr 0x5576570b5840 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x5576570b5cc8 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x5576570b5cb0 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x5576570b5c80 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x5576570b5c68 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x5576570b5c30 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x5576570b5c18 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x5576570b5bf8 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x557656e7ab20 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x5576570b5b98 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x5576570b5b80 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x5576570b5aa8 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x5576570b5a90 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x5576570b5a70 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x557656e7a7e0 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x5576570b5a10 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x5576570b5910 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x5576570b4028
|     |         |     |   `-CXXThisExpr 0x5576570b5900 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x5576570b5a58 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x5576570b5a40 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x5576570b59f0 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x5576570b59d8 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x5576570b5978 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x557656fb0230 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x5576570b5be0 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x5576570b5bc8 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x5576570b5b60 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x5576570b5b48 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x5576570b5b18 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x557656c81590 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x5576570b5d48 <line:135:6, col:13>
|       `-CXXConstructExpr 0x5576570b5d18 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x5576570b5ce8 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x5576570b4028
|           `-CXXThisExpr 0x5576570b5cd8 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x5576570b20a8 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x5576570b5e68 <col:35, line:141:5>
|   `-ReturnStmt 0x5576570b5e58 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x5576570b5e20 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x5576570b5df0 <col:9, col:17> '<bound member function type>' ->router 0x5576570a9ea0
|         `-ImplicitCastExpr 0x5576570b5e40 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x5576570b5dd8 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x5576570b5da8 <col:9> 'Element *const' lvalue ->_owner 0x5576570b4348
|               `-CXXThisExpr 0x5576570b5d98 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5576570b2168 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x5576570b5ee8 <col:37, line:146:5>
|   `-ReturnStmt 0x5576570b5ed8 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x5576570b5ec0 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x5576570b5e90 <col:9> 'Element *const' lvalue ->_owner 0x5576570b4348
|         `-CXXThisExpr 0x5576570b5e80 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5576570b2228 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x5576570b5f68 <col:41, line:151:5>
|   `-ReturnStmt 0x5576570b5f58 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x5576570b5f40 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x5576570b5f10 <col:9> 'RouterThread *const' lvalue ->_thread 0x5576570b43a8
|         `-CXXThisExpr 0x5576570b5f00 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5576570b22f0 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x5576570b2540 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x5576570b23a0 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x5576570b2418 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5576570b4c88 <col:50> 'bool' false
|-CXXMethodDecl 0x5576570b26c8 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x5576570b2600 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x5576570b2810 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x5576570b2780 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x5576570b2958 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x5576570b28c8 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x5576570b2aa0 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5576570b2a10 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x5576570b2be8 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5576570b2b58 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x5576570b2cb0 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x5576570b60d0 <col:32, line:223:5>
|   `-ExprWithCleanups 0x5576570b60b8 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x5576570b6060 <col:2, col:47> 'void'
|       |-MemberExpr 0x5576570b5f90 <col:2> '<bound member function type>' ->schedule_at_steady 0x5576570b2810
|       | `-CXXThisExpr 0x5576570b5f80 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5576570b60a0 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5576570b6088 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x5576570b6040 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x5576570b6028 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x5576570b5ff8 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x557656c81590 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x5576570b2df0 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x5576570b2d60 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x5576570b2f38 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5576570b2ea8 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5576570b6258 <col:56, line:241:5>
|   `-ExprWithCleanups 0x5576570b6240 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x5576570b61e8 <col:2, col:40> 'void'
|       |-MemberExpr 0x5576570b60f8 <col:2> '<bound member function type>' ->schedule_after 0x5576570b2df0
|       | `-CXXThisExpr 0x5576570b60e8 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5576570b6228 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5576570b6210 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x5576570b61a8 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x5576570b6178 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x5576570b6138 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x5576570b2ea8 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x5576570b6190 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5576570b6158 <col:38> 'int' 0
|-CXXMethodDecl 0x5576570b3080 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5576570b2ff0 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5576570b64c8 <col:58, line:249:5>
|   `-ExprWithCleanups 0x5576570b64b0 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x5576570b6458 <col:2, col:49> 'void'
|       |-MemberExpr 0x5576570b6280 <col:2> '<bound member function type>' ->schedule_after 0x5576570b2df0
|       | `-CXXThisExpr 0x5576570b6270 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5576570b6498 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5576570b6480 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x5576570b6400 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x5576570b63e8 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5576570b6358 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x557656f931d8 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x5576570b6440 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x5576570b6428 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5576570b6338 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x5576570b2ff0 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576570b31c8 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x5576570b3138 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x5576570b66a8 <col:58, line:261:5>
|   `-ExprWithCleanups 0x5576570b6690 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x5576570b6638 <col:2, col:38> 'void'
|       |-MemberExpr 0x5576570b64f0 <col:2> '<bound member function type>' ->schedule_at_steady 0x5576570b2810
|       | `-CXXThisExpr 0x5576570b64e0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5576570b6678 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5576570b6660 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x5576570b6600 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5576570b65e8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5576570b65c8 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x557656e7a7e0 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x5576570b6598 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x5576570b6580 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x5576570b6530 <col:21> 'Timestamp' lvalue ->_expiry_s 0x5576570b4028
|             |     `-CXXThisExpr 0x5576570b6520 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x5576570b6560 <col:33> 'const Timestamp' lvalue ParmVar 0x5576570b3138 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x5576570b3310 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5576570b3280 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5576570b6980 <col:58, line:270:5>
|   `-ExprWithCleanups 0x5576570b6968 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x5576570b6910 <col:2, col:79> 'void'
|       |-MemberExpr 0x5576570b66d0 <col:2> '<bound member function type>' ->schedule_at_steady 0x5576570b2810
|       | `-CXXThisExpr 0x5576570b66c0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5576570b6950 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5576570b6938 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x5576570b68d0 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x5576570b6808 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x5576570b67f0 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x5576570b6780 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x5576570b6750 <col:31, col:41> '<bound member function type>' .sec 0x557656c83088
|             | |     `-ImplicitCastExpr 0x5576570b67a0 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x5576570b6720 <col:31> 'Timestamp' lvalue ->_expiry_s 0x5576570b4028
|             | |         `-CXXThisExpr 0x5576570b6710 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x5576570b67d8 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x5576570b67b8 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5576570b3280 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x5576570b6898 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x5576570b6868 <col:60, col:70> '<bound member function type>' .subsec 0x557656c83780
|                 `-ImplicitCastExpr 0x5576570b68b8 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x5576570b6838 <col:60> 'Timestamp' lvalue ->_expiry_s 0x5576570b4028
|                     `-CXXThisExpr 0x5576570b6828 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x5576570b3458 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5576570b33c8 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5576570b6cb8 <col:60, line:279:5>
|   `-ExprWithCleanups 0x5576570b6ca0 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x5576570b6c48 <col:2, col:65> 'void'
|       |-MemberExpr 0x5576570b69a8 <col:2> '<bound member function type>' ->schedule_at_steady 0x5576570b2810
|       | `-CXXThisExpr 0x5576570b6998 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5576570b6c88 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5576570b6c70 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x5576570b6c10 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x5576570b6bf8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5576570b6bd8 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x557656e7a7e0 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x5576570b6b78 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x5576570b6b60 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x5576570b69e8 <col:21> 'Timestamp' lvalue ->_expiry_s 0x5576570b4028
|             |     `-CXXThisExpr 0x5576570b69d8 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x5576570b6bc0 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x5576570b6ba8 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x5576570b6b08 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x5576570b6af0 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x5576570b6ac0 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x557656f931d8 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x5576570b6b48 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x5576570b6b30 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x5576570b6aa0 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x5576570b33c8 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576570b3520 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x5576570b35e0 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x5576570b7180 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x5576570b6d10 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x5576570b6ce0 <col:2> '<bound member function type>' ->unschedule 0x5576570b3520
|   |   `-CXXThisExpr 0x5576570b6cd0 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x5576570b7168 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x5576570b7130 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x5576570b7118 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5576570b6dc8 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x55765706c168 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x5576570b6d40 <col:2> 'Timestamp' lvalue ->_expiry_s 0x5576570b4028
|       | `-CXXThisExpr 0x5576570b6d30 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5576570b6db0 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x5576570b6d80 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x5576570b36a0 <line:304:5, line:310:5> line:304:29 adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x5576570b74d8 <col:42, line:310:5>
|   |-IfStmt 0x5576570b7320 <line:306:2, line:307:23>
|   | |-CallExpr 0x5576570b7250 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x5576570b7238 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x5576570b71d8 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x557656fae6a0 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x5576570b7310 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x5576570b72f8 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x5576570b72c8 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5576570b72b0 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x5576570b7280 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x5576570b74c8 <line:309:2, col:33>
|     `-ExprWithCleanups 0x5576570b74b0 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x5576570b7480 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5576570b7468 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x5576570b7428 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5576570b7410 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5576570b73e0 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x557656f934f0 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x5576570b7450 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x5576570b73c0 <col:30> 'int' 500
|-CXXMethodDecl 0x5576570b37e0 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x5576570b3750 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5576570b3888 <col:69> "" ""
|-CXXMethodDecl 0x5576570b3998 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x5576570b3908 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5576570b3a40 <col:70> "" ""
|-CXXMethodDecl 0x5576570b3b50 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x5576570b3ac0 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5576570b3bf8 <col:71> "" ""
|-CXXMethodDecl 0x5576570b3d08 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x5576570b3c78 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5576570b3db0 <col:72> "" ""
|-EnumDecl 0x5576570b3e20 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x5576570b3f20 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x5576570b3f70 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576570b3f00 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x5576570b3ee0 <col:25> 'int' 1
|-AccessSpecDecl 0x5576570b3f88 <line:339:3, col:10> col:3 private
|-FieldDecl 0x5576570b3fc8 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x5576570b4028 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x5576570b4078 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5576570b41a8 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x5576570b4c98 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x5576570b4268 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x5576570b42e8 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x5576570b4348 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x5576570b43a8 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x5576570b44f8 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x5576570b4408 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x5576570b46c8 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5576570b45b0 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x5576570b4630 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x5576570b48a0 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5576570b4788 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x5576570b4808 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x5576570b4a78 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5576570b4960 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x5576570b49e0 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x5576570b4c48 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557656dae4c0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x557656dae5d8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x557656dae678 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x557656dae6d8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x557656dae738 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x557656dae7e8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557656daeaf0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x557656daec08 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x557656daecb0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x557656daed18 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x557656daeda8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x557656db4ca0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x557656db50d8 <col:12>
|-CXXConstructorDecl 0x557656db4da8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x557656db4eb8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x557656daecb0 'data' 'const char *'
| | `-ImplicitCastExpr 0x557656db7660 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x557656db7630 <col:12> 'const char *const' lvalue .data 0x557656daecb0
| |     `-DeclRefExpr 0x557656db7610 <col:12> 'const String::rep_t' lvalue ParmVar 0x557656db4eb8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x557656daed18 'length' 'int'
| | `-ImplicitCastExpr 0x557656db76f0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x557656db76c0 <col:12> 'const int' lvalue .length 0x557656daed18
| |     `-DeclRefExpr 0x557656db76a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x557656db4eb8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x557656daeda8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x557656db7780 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x557656db7750 <col:12> 'String::memo_t *const' lvalue .memo 0x557656daeda8
| |     `-DeclRefExpr 0x557656db7730 <col:12> 'const String::rep_t' lvalue ParmVar 0x557656db4eb8 '' 'const String::rep_t &'
| `-CompoundStmt 0x557656db77d8 <col:12>
|-CXXConstructorDecl 0x557656db4f58 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x557656db4f58
| `-ParmVarDecl 0x557656db5068 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x557656dba550 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x557656dc5f88 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x557656dc6098 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x557656dc65b0 <col:12>
|   |-BinaryOperator 0x557656dc63c8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x557656dc6380 <col:12> 'const char *' lvalue ->data 0x557656daecb0
|   | | `-CXXThisExpr 0x557656dc6370 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x557656dc63b0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x557656dc6340 <col:12> 'const char *const' lvalue .data 0x557656daecb0
|   |     `-DeclRefExpr 0x557656dc6320 <col:12> 'const String::rep_t' lvalue ParmVar 0x557656dc6098 '' 'const String::rep_t &'
|   |-BinaryOperator 0x557656dc6490 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x557656dc6448 <col:12> 'int' lvalue ->length 0x557656daed18
|   | | `-CXXThisExpr 0x557656dc6438 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x557656dc6478 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x557656dc6408 <col:12> 'const int' lvalue .length 0x557656daed18
|   |     `-DeclRefExpr 0x557656dc63e8 <col:12> 'const String::rep_t' lvalue ParmVar 0x557656dc6098 '' 'const String::rep_t &'
|   |-BinaryOperator 0x557656dc6558 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x557656dc6510 <col:12> 'String::memo_t *' lvalue ->memo 0x557656daeda8
|   | | `-CXXThisExpr 0x557656dc6500 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x557656dc6540 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x557656dc64d0 <col:12> 'String::memo_t *const' lvalue .memo 0x557656daeda8
|   |     `-DeclRefExpr 0x557656dc64b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x557656dc6098 '' 'const String::rep_t &'
|   `-ReturnStmt 0x557656dc65a0 <col:12>
|     `-UnaryOperator 0x557656dc6588 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x557656dc6578 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x557656dc6108 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x557656dc6108
  `-ParmVarDecl 0x557656dc6218 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557656da59a0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x557656da5ab8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x557656da5b48 <col:16, col:22> col:16 public
|-TypedefDecl 0x557656da5b88 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x557656a79fd0 'const char *'
|   `-QualType 0x557656a79521 'const char' const
|     `-BuiltinType 0x557656a79520 'char'
|-TypedefDecl 0x557656da5c10 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x557656da5be0 'String::const_iterator' sugar
|   |-Typedef 0x557656da5b88 'const_iterator'
|   `-PointerType 0x557656a79fd0 'const char *'
|     `-QualType 0x557656a79521 'const char' const
|       `-BuiltinType 0x557656a79520 'char'
|-TypedefDecl 0x557656da5d80 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x557656da5cf0 'int (String::*)() const'
|   |-RecordType 0x557656da5a30 'String'
|   | `-CXXRecord 0x557656da59a0 'String'
|   `-ParenType 0x557656da5c90 'int () const' sugar
|     `-FunctionProtoType 0x557656d7a870 'int () const' const cdecl
|       `-BuiltinType 0x557656a79580 'int'
|-TypedefDecl 0x557656da5de8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x557656bcf4f0 'int64_t' sugar
|   |-Typedef 0x557656ae2390 'int64_t'
|   `-TypedefType 0x557656abb630 '__int64_t' sugar
|     |-Typedef 0x557656abb208 '__int64_t'
|     `-BuiltinType 0x557656a795a0 'long'
|-TypedefDecl 0x557656da5e50 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x557656bcf410 'uint64_t' sugar
|   |-Typedef 0x557656ae2530 'uint64_t'
|   `-TypedefType 0x557656abb6c0 '__uint64_t' sugar
|     |-Typedef 0x557656abb278 '__uint64_t'
|     `-BuiltinType 0x557656a79640 'unsigned long'
|-TypedefDecl 0x557656da5ee0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x557656da5eb0 'String::intmax_t' sugar
|   |-Typedef 0x557656da5de8 'intmax_t'
|   `-TypedefType 0x557656bcf4f0 'int64_t' sugar
|     |-Typedef 0x557656ae2390 'int64_t'
|     `-TypedefType 0x557656abb630 '__int64_t' sugar
|       |-Typedef 0x557656abb208 '__int64_t'
|       `-BuiltinType 0x557656a795a0 'long'
|-TypedefDecl 0x557656da5f70 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x557656da5f40 'String::uintmax_t' sugar
|   |-Typedef 0x557656da5e50 'uintmax_t'
|   `-TypedefType 0x557656bcf410 'uint64_t' sugar
|     |-Typedef 0x557656ae2530 'uint64_t'
|     `-TypedefType 0x557656abb6c0 '__uint64_t' sugar
|       |-Typedef 0x557656abb278 '__uint64_t'
|       `-BuiltinType 0x557656a79640 'unsigned long'
|-CXXConstructorDecl 0x557656da6030 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x557656da61d8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x557656da6118 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x557656da6388 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x557656da62c8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x557656da64e0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x557656da6450 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x557656da66f8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x557656da65a8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x557656da6628 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x557656da6918 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x557656da67c8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x557656da6848 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x557656da6b38 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x557656da69e8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x557656da6a68 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x557656da6d58 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x557656da6c08 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x557656da6c88 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x557656da6ee8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x557656da6e20 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x557656da7068 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x557656da6fa8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x557656da71f8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x557656da7130 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x557656da7350 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x557656da72c0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x557656da74a8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x557656da7418 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x557656da7600 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x557656da7570 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x557656da7788 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x557656da76c8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x557656da7918 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x557656da7850 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x557656da7aa8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x557656da79e0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x557656da7c38 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x557656da7b70 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x557656da7d30 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x557656da7e58 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x557656da7fd8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x557656da7f10 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x557656da8128 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x557656da8098 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x557656da81d0 <col:63> "" ""
|-CXXMethodDecl 0x557656da8318 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x557656da8258 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x557656da8528 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x557656da83d8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x557656da8458 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x557656da8798 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x557656da85f0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x557656da86c0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x557656da8a78 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x557656da8858 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x557656da88d8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x557656db4770 <col:55> 'int' 10
| `-ParmVarDecl 0x557656da8950 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x557656db4790 <col:76> 'bool' true
|-CXXMethodDecl 0x557656da8d58 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x557656da8b40 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x557656da8bc0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x557656db47a0 <col:56> 'int' 10
| `-ParmVarDecl 0x557656da8c38 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x557656db47c0 <col:77> 'bool' true
|-CXXMethodDecl 0x557656da8e60 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x557656da8f28 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x557656da8ff0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x557656da9090 <col:20>
| `-OptimizeNoneAttr 0x557656da90e8 <col:30>
|-CXXConversionDecl 0x557656da91d8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x557656da92a8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x557656da9368 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x557656da9458 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x557656da9518 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x557656da9698 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x557656da95d0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x557656da97e8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x557656da9758 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x557656da98d8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x557656da9998 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x557656da9be8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x557656da9a50 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x557656da9ad0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x557656da9e48 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x557656da9cb0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x557656da9d30 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x557656da9f18 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x557656daa128 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x557656da9fd0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x557656daa050 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x557656daa348 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x557656daa1f0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x557656daa270 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x557656daa4d8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x557656daa410 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x557656daa5c8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x557656daa738 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x557656daa678 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x557656daa948 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x557656daa7f8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x557656daa878 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x557656daab60 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x557656daaa08 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x557656daaa80 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x557656daacf0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x557656daac20 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x557656daaf10 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x557656daadb0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x557656daae30 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x557656dab060 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x557656daafd0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x557656dab238 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x557656dab120 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x557656dab1a0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x557656dab388 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x557656dab2f8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x557656dab5a0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x557656dab440 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x557656dab4c0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x557656db47d0 <col:39> 'int' 0
|-CXXMethodDecl 0x557656dab7c0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x557656dab660 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x557656dab6e0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x557656db47f0 <col:48> 'int' 0
|-CXXMethodDecl 0x557656dab9a0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x557656dab880 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x557656dab900 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x557656db4810 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x557656daba70 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x557656dabb30 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x557656dabbf0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x557656dabcb0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x557656dabd70 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x557656dabf18 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x557656dabe20 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x557656dac098 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x557656dabfd0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x557656dac218 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x557656dac158 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x557656dac398 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x557656dac2d0 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x557656dac4e0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x557656dac450 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x557656dac6d0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x557656dac5a0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x557656dac8a8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x557656dac790 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x557656dac810 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x557656daca88 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x557656dac970 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x557656dac9f0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x557656dacbd8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x557656dacb48 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x557656dacde8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x557656dacc98 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x557656dacd18 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x557656dacf48 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x557656daceb0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x557656dad0a0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x557656dad008 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x557656dad148 <col:57> "" ""
|-CXXMethodDecl 0x557656dad258 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x557656dad1c8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x557656dad3a8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x557656dad318 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x557656dad528 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x557656dad460 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x557656dad5f0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x557656dad6b0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x557656dad770 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x557656dad810 <col:49> "" ""
|-CXXMethodDecl 0x557656dad8a0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x557656dad960 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x557656dada50 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x557656dadb18 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x557656dadbd8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x557656dadc98 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x557656dadd90 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x557656dade58 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x557656dadf20 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x557656dae0f8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x557656dadfd8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x557656dae058 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x557656dae320 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x557656dae1c0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x557656dae240 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x557656dae430 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x557656dae498 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x557656dae4c0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x557656dae5d8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x557656dae678 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x557656dae6d8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x557656dae738 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x557656dae7e8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x557656dae850 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x557656daea88 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x557656daead8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x557656daea68 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x557656dae978 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x557656dae920 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x557656dae960 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x557656dae940 <col:32> 'int' 8
|-CXXRecordDecl 0x557656daeaf0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x557656daec08 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x557656daecb0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x557656daed18 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x557656daeda8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x557656db4ca0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x557656db50d8 <col:12>
| |-CXXConstructorDecl 0x557656db4da8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x557656db4eb8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x557656daecb0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x557656db7660 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x557656db7630 <col:12> 'const char *const' lvalue .data 0x557656daecb0
| | |     `-DeclRefExpr 0x557656db7610 <col:12> 'const String::rep_t' lvalue ParmVar 0x557656db4eb8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x557656daed18 'length' 'int'
| | | `-ImplicitCastExpr 0x557656db76f0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x557656db76c0 <col:12> 'const int' lvalue .length 0x557656daed18
| | |     `-DeclRefExpr 0x557656db76a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x557656db4eb8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x557656daeda8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x557656db7780 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x557656db7750 <col:12> 'String::memo_t *const' lvalue .memo 0x557656daeda8
| | |     `-DeclRefExpr 0x557656db7730 <col:12> 'const String::rep_t' lvalue ParmVar 0x557656db4eb8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x557656db77d8 <col:12>
| |-CXXConstructorDecl 0x557656db4f58 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x557656db4f58
| | `-ParmVarDecl 0x557656db5068 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x557656dba550 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x557656dc5f88 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x557656dc6098 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x557656dc65b0 <col:12>
| |   |-BinaryOperator 0x557656dc63c8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x557656dc6380 <col:12> 'const char *' lvalue ->data 0x557656daecb0
| |   | | `-CXXThisExpr 0x557656dc6370 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x557656dc63b0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x557656dc6340 <col:12> 'const char *const' lvalue .data 0x557656daecb0
| |   |     `-DeclRefExpr 0x557656dc6320 <col:12> 'const String::rep_t' lvalue ParmVar 0x557656dc6098 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x557656dc6490 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x557656dc6448 <col:12> 'int' lvalue ->length 0x557656daed18
| |   | | `-CXXThisExpr 0x557656dc6438 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x557656dc6478 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x557656dc6408 <col:12> 'const int' lvalue .length 0x557656daed18
| |   |     `-DeclRefExpr 0x557656dc63e8 <col:12> 'const String::rep_t' lvalue ParmVar 0x557656dc6098 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x557656dc6558 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x557656dc6510 <col:12> 'String::memo_t *' lvalue ->memo 0x557656daeda8
| |   | | `-CXXThisExpr 0x557656dc6500 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x557656dc6540 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x557656dc64d0 <col:12> 'String::memo_t *const' lvalue .memo 0x557656daeda8
| |   |     `-DeclRefExpr 0x557656dc64b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x557656dc6098 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x557656dc65a0 <col:12>
| |     `-UnaryOperator 0x557656dc6588 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x557656dc6578 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x557656dc6108 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x557656dc6108
|   `-ParmVarDecl 0x557656dc6218 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x557656daee20 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x557656daf068 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x557656daee88 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x557656daef08 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x557656daef80 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x557656db4c60 <col:79, line:261:5>
|   |-BinaryOperator 0x557656db48d8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x557656db4870 <col:2, col:5> 'const char *' lvalue .data 0x557656daecb0
|   | | `-MemberExpr 0x557656db4840 <col:2> 'String::rep_t' lvalue ->_r 0x557656daee20
|   | |   `-CXXThisExpr 0x557656db4830 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x557656db48c0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x557656db48a0 <col:12> 'const char *' lvalue ParmVar 0x557656daee88 'data' 'const char *'
|   |-BinaryOperator 0x557656db49a0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x557656db4938 <col:2, col:5> 'int' lvalue .length 0x557656daed18
|   | | `-MemberExpr 0x557656db4908 <col:2> 'String::rep_t' lvalue ->_r 0x557656daee20
|   | |   `-CXXThisExpr 0x557656db48f8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x557656db4988 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x557656db4968 <col:14> 'int' lvalue ParmVar 0x557656daef08 'length' 'int'
|   `-IfStmt 0x557656db4c48 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x557656db4ac0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x557656db4aa8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x557656db4a88 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x557656db4a68 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x557656db4a00 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x557656daeda8
|     |       | `-MemberExpr 0x557656db49d0 <col:7> 'String::rep_t' lvalue ->_r 0x557656daee20
|     |       |   `-CXXThisExpr 0x557656db49c0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x557656db4a50 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x557656db4a30 <col:17> 'String::memo_t *' lvalue ParmVar 0x557656daef80 'memo' 'String::memo_t *'
|     `-CallExpr 0x557656db4c20 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x557656db4c08 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x557656db4b10 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x557656d9fa60 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x557656db4b78 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x557656dae678
|         `-ImplicitCastExpr 0x557656db4b60 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x557656db4b40 <col:27> 'String::memo_t *' lvalue ParmVar 0x557656daef80 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x557656daf318 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x557656daf138 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x557656daf1b8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x557656daf230 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x557656daee20 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x557656db50e8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x557656db5278 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x557656db51e0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x557656db5150 <col:2> '<bound member function type>' ->assign_memo 0x557656daf068
|     | `-ImplicitCastExpr 0x557656db5218 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x557656db5140 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x557656db5230 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x557656db5180 <col:14> 'const char *' lvalue ParmVar 0x557656daf138 'data' 'const char *'
|     |-ImplicitCastExpr 0x557656db5248 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x557656db51a0 <col:20> 'int' lvalue ParmVar 0x557656daf1b8 'length' 'int'
|     `-ImplicitCastExpr 0x557656db5260 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x557656db51c0 <col:28> 'String::memo_t *' lvalue ParmVar 0x557656daf230 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x557656daf4a8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x557656daf3e8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x557656db54d0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x557656db5450 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x557656db52a0 <col:2> '<bound member function type>' ->assign_memo 0x557656daf068
|     | `-CXXThisExpr 0x557656db5290 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x557656db5488 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x557656db5320 <col:14, col:19> 'const char *' lvalue .data 0x557656daecb0
|     |   `-MemberExpr 0x557656db52f0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x557656daee20
|     |     `-DeclRefExpr 0x557656db52d0 <col:14> 'const String' lvalue ParmVar 0x557656daf3e8 'x' 'const String &'
|     |-ImplicitCastExpr 0x557656db54a0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x557656db53a0 <col:25, col:30> 'int' lvalue .length 0x557656daed18
|     |   `-MemberExpr 0x557656db5370 <col:25, col:27> 'String::rep_t' lvalue ._r 0x557656daee20
|     |     `-DeclRefExpr 0x557656db5350 <col:25> 'const String' lvalue ParmVar 0x557656daf3e8 'x' 'const String &'
|     `-ImplicitCastExpr 0x557656db54b8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x557656db5420 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x557656daeda8
|         `-MemberExpr 0x557656db53f0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x557656daee20
|           `-DeclRefExpr 0x557656db53d0 <col:38> 'const String' lvalue ParmVar 0x557656daf3e8 'x' 'const String &'
|-CXXMethodDecl 0x557656daf570 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x557656db5e90 <col:31, line:278:5>
|   `-IfStmt 0x557656db5e78 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x557656db5570 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x557656db5558 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x557656db5528 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x557656daeda8
|     |     `-MemberExpr 0x557656db54f8 <col:6> 'String::rep_t' lvalue ->_r 0x557656daee20
|     |       `-CXXThisExpr 0x557656db54e8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x557656db5e50 <col:15, line:277:2>
|       |-ParenExpr 0x557656db5a20 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x557656db59f0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x557656db5680 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x557656db5668 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x557656db5650 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x557656db5610 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x557656dae678
|       |   |       `-ImplicitCastExpr 0x557656db55f8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x557656db55c8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x557656daeda8
|       |   |           `-MemberExpr 0x557656db5598 <col:27> 'String::rep_t' lvalue ->_r 0x557656daee20
|       |   |             `-CXXThisExpr 0x557656db5588 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x557656db56e0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x557656db56c0 <col:54> 'int' 0
|       |   `-CallExpr 0x557656db5950 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x557656db5938 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x557656db58b8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x557656b15d00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x557656db5990 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x557656db57c8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x557656db59a8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x557656db57f8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x557656db59c0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x557656db5830 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x557656db59d8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x557656db58a0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x557656db5888 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x557656db5850 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x557656db5d70 <line:274:6, line:275:22>
|       | |-CallExpr 0x557656db5c30 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x557656db5c18 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x557656db5b90 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x557656da0ea0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x557656db5b60 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x557656dae678
|       | |   `-ImplicitCastExpr 0x557656db5b48 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x557656db5b18 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x557656daeda8
|       | |       `-MemberExpr 0x557656db5ae8 <col:40> 'String::rep_t' lvalue ->_r 0x557656daee20
|       | |         `-CXXThisExpr 0x557656db5ad8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x557656db5d30 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x557656db5d18 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x557656db5c58 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x557656db0248 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x557656db5d58 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x557656db5cb8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x557656daeda8
|       |       `-MemberExpr 0x557656db5c88 <col:15> 'String::rep_t' lvalue ->_r 0x557656daee20
|       |         `-CXXThisExpr 0x557656db5c78 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x557656db5e30 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x557656db5dc8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x557656daeda8
|         | `-MemberExpr 0x557656db5d98 <col:6> 'String::rep_t' lvalue ->_r 0x557656daee20
|         |   `-CXXThisExpr 0x557656db5d88 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x557656db5e18 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x557656db5df8 <col:16> 'int' 0
|-CXXMethodDecl 0x557656daf808 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x557656daf628 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x557656daf6a8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x557656daf720 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x557656daf8e0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x557656dafb30 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x557656daf998 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x557656dafa18 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x557656dafa90 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x557656dafd18 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x557656dafc00 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x557656dafc80 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x557656dafe18 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x557656db5f68 <col:41, line:286:5>
|   `-ReturnStmt 0x557656db5f58 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x557656db5f28 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x557656db5ef0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x557656db5ed8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x557656db5eb8 <col:46> 'int' 1
|-CXXMethodDecl 0x557656db00b8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x557656dafed0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x557656daff50 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x557656daffd0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x557656db0248 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x557656db0180 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x557656db0318 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x557656db04e8 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x557656db03d0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x557656db0450 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x557656db05a8 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x557656db3fd0 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x557656db40d8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x557656db4150 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x557656db41c8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x557656db4230 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x557656db4330 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x557656db4380 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x557656db4310 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x557656db42f0 <col:22> 'int' 14
|-CXXMethodDecl 0x557656db4598 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x557656db43b0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x557656db4430 <col:38> col:41 'int'
| `-ParmVarDecl 0x557656db44b0 <col:43> col:46 'int'
|-FriendDecl 0x557656db46a0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x557656db4730 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576570c90c8 <../elements/local/bufconv.hh:21:1, line:49:1> line:21:7 class BufferConverter definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5576570c9228 <col:1, col:7> col:7 implicit referenced class BufferConverter
|-VarDecl 0x5576570c92d0 <line:22:3, col:38> col:20 packet_tx_delay 'const int' static cinit
| `-IntegerLiteral 0x5576570c9338 <col:38> 'int' 5
|-CXXMethodDecl 0x5576570c9508 <line:24:3, col:53> col:17 data_read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5576570c93c0 <col:35, col:44> col:44 e 'Element *'
| `-ParmVarDecl 0x5576570c9440 <col:47, col:52> col:53 'void *'
|-CXXMethodDecl 0x5576570c97e8 <line:25:3, line:26:55> line:25:14 data_write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5576570c95c8 <line:26:6, col:19> col:20 'const String &'
| |-ParmVarDecl 0x5576570c9640 <col:22, col:30> col:31 'Element *'
| |-ParmVarDecl 0x5576570c96c0 <col:33, col:38> col:39 'void *'
| `-ParmVarDecl 0x5576570c9738 <col:41, col:54> col:55 'ErrorHandler *'
|-FieldDecl 0x5576570c98b8 <line:28:3, col:9> col:9 _timer 'Timer'
|-FieldDecl 0x5576570c9920 <line:29:3, col:7> col:7 _mtu 'int'
|-FieldDecl 0x5576570c9980 <line:30:3, col:10> col:10 _obuf 'String'
|-CXXMethodDecl 0x5576570c9a18 <line:32:3, col:15> col:10 iput 'String ()'
|-CXXMethodDecl 0x5576570c9b58 <line:33:3, col:27> col:8 oput 'void (const String &)'
| `-ParmVarDecl 0x5576570c9ac8 <col:13, col:26> col:27 'const String &'
|-AccessSpecDecl 0x5576570c9c00 <line:35:1, col:7> col:1 public
|-CXXConstructorDecl 0x5576570c9c60 <line:36:3, col:19> col:3 BufferConverter 'void ()'
|-CXXDestructorDecl 0x5576570c9d50 <line:37:3, col:20> col:3 ~BufferConverter 'void ()' noexcept-unevaluated 0x5576570c9d50
| `-Overrides: [ 0x557657089428 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x5576570c9e80 <line:39:3, col:62> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55765709a510 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5576570d4c88 <col:34, col:62>
|   `-ReturnStmt 0x5576570d4c78 <col:36, col:43>
|     `-ImplicitCastExpr 0x5576570d4c60 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5576570d4c38 <col:43> 'const char [16]' lvalue "BufferConverter"
|-CXXMethodDecl 0x5576570c9f48 <line:40:3, col:50> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55765709a5d8 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5576570d4ce8 <col:34, col:50>
|   `-ReturnStmt 0x5576570d4cd8 <col:36, col:43>
|     `-ImplicitCastExpr 0x5576570d4cc0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5576570d4ca0 <col:43> 'const char [4]' lvalue "2/1"
|-CXXMethodDecl 0x5576570ca010 <line:41:3, col:51> col:15 processing 'const char *() const'
| |-Overrides: [ 0x55765709a978 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x5576570d4dc0 <col:34, col:51>
|   `-ReturnStmt 0x5576570d4db0 <col:36, col:43>
|     `-ImplicitCastExpr 0x5576570d4d98 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5576570d4d78 <col:43> 'const char [5]' lvalue "lh/h"
|-CXXMethodDecl 0x5576570ca158 <line:43:3, col:32> col:7 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x55765709be90 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x5576570ca0c0 <col:18, col:31> col:32 'ErrorHandler *'
|-CXXMethodDecl 0x5576570ca430 <line:44:3, col:57> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55765709bc40 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5576570ca2e0 <col:17, col:33> col:33 conf 'Vector<String> &'
| `-ParmVarDecl 0x5576570ca358 <col:39, col:53> col:53 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5576570d4628 <line:46:3, col:27> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x5576570896f8 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x5576570ca4f8 <col:13> col:16 'int'
| `-ParmVarDecl 0x5576570d4590 <col:18, col:26> col:26 p 'Packet *'
|-CXXMethodDecl 0x5576570d4778 <line:47:3, col:25> col:8 run_timer 'void (Timer *)'
| |-Overrides: [ 0x557657089da8 Element::run_timer 'void (Timer *)' ]
| `-ParmVarDecl 0x5576570d46e8 <col:18, col:24> col:25 'Timer *'
|-CXXMethodDecl 0x5576570d4840 <line:48:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x55765709bd10 Element::add_handlers 'void ()' ]
|-CXXConstructorDecl 0x5576570d4908 <line:21:7> col:7 implicit BufferConverter 'void (const BufferConverter &)' inline default_delete noexcept-unevaluated 0x5576570d4908
| `-ParmVarDecl 0x5576570d4a18 <col:7> col:7 'const BufferConverter &'
`-CXXMethodDecl 0x5576570d4ab8 <col:7> col:7 implicit operator= 'BufferConverter &(const BufferConverter &)' inline default_delete noexcept-unevaluated 0x5576570d4ab8
  `-ParmVarDecl 0x5576570d4bc8 <col:7> col:7 'const BufferConverter &'

Layout: <CGRecordLayout
  LLVMType:%class.BufferConverter = type { %class.Element.base, %class.Timer, i32, %class.String }
  NonVirtualBaseLLVMType:%class.BufferConverter = type { %class.Element.base, %class.Timer, i32, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x557656df7f70 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x557656df8148 prev 0x557656df7f70 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x557656df81d8 <col:46, col:52> col:46 public
|-TypedefDecl 0x557656df8200 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x557656a79580 'int'
|-TypedefDecl 0x557656dfa300 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x557656dfa2b0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x557656dfa290 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x557656df8418 'type'
|     `-SubstTemplateTypeParmType 0x557656df83e0 'String' sugar
|       |-TemplateTypeParmType 0x557656d6a520 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x557656d6a4d0 'T'
|       `-RecordType 0x557656da5a30 'String'
|         `-CXXRecord 0x557656da59a0 'String'
|-TypedefDecl 0x557656dfa3b8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x557656dfa380 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x557656dfa360 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x557656dfa300 'type'
|     `-ElaboratedType 0x557656dfa2b0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x557656dfa290 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x557656df8418 'type'
|         `-SubstTemplateTypeParmType 0x557656df83e0 'String' sugar
|           |-TemplateTypeParmType 0x557656d6a520 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x557656d6a4d0 'T'
|           `-RecordType 0x557656da5a30 'String'
|             `-CXXRecord 0x557656da59a0 'String'
|-CXXMethodDecl 0x557656dfa538 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x557656dfa448 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x557656dfa628 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x557656dfa708 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x557656dfa708
|-CXXMethodDecl 0x557656dfa9d8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x557656dfa8e0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x557656dfac18 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x557656dfaa90 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x557656dfab08 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x557656dfade8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x557656dfacd8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x557656dfad50 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x557656dfaf48 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x557656dfb018 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x557656dfb268 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x557656dfb0d8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x557656dfb150 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x557656dfb4c8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x557656dfb338 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x557656dfb3b0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x557656dfb688 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x557656dfb598 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x557656dfb848 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x557656dfb750 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x557656dfb900 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x557656dfb9b0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x557656dfbbe8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x557656dfba60 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x557656dfbad8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x557656dfbe88 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x557656dfbd90 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x557656dfbf50 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x557656dfbfa0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x557656dfbff0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x557656dd9dd0 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x557656df69d8 prev 0x557656dd9dd0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x557656df7ee0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x557656df7e90 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x557656df7e70 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x557656df7d20 'type'
|     `-SubstTemplateTypeParmType 0x557656df7bb0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x557656c93d90 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x557656c93d38 'F'
|       `-RecordType 0x557656df7810 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x557656df7730 'typed_array_memory'
|-FieldDecl 0x557656dfc040 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x557656dfc090 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x557656dfc0c8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x557656df6a70 'String' sugar
|   |-TemplateTypeParmType 0x557656d77250 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x557656d771f8 'T'
|   `-RecordType 0x557656da5a30 'String'
|     `-CXXRecord 0x557656da59a0 'String'
|-TypedefDecl 0x557656dfc158 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x557656dfc120 'String &'
|   `-SubstTemplateTypeParmType 0x557656df6a70 'String' sugar
|     |-TemplateTypeParmType 0x557656d77250 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x557656d771f8 'T'
|     `-RecordType 0x557656da5a30 'String'
|       `-CXXRecord 0x557656da59a0 'String'
|-TypedefDecl 0x557656dfc1e8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x557656dfc1b0 'const String &'
|   `-QualType 0x557656df6a71 'const String' const
|     `-SubstTemplateTypeParmType 0x557656df6a70 'String' sugar
|       |-TemplateTypeParmType 0x557656d77250 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x557656d771f8 'T'
|       `-RecordType 0x557656da5a30 'String'
|         `-CXXRecord 0x557656da59a0 'String'
|-TypedefDecl 0x557656dfc278 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x557656dfc240 'String *'
|   `-SubstTemplateTypeParmType 0x557656df6a70 'String' sugar
|     |-TemplateTypeParmType 0x557656d77250 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x557656d771f8 'T'
|     `-RecordType 0x557656da5a30 'String'
|       `-CXXRecord 0x557656da59a0 'String'
|-TypedefDecl 0x557656dfc308 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x557656dfc2d0 'const String *'
|   `-QualType 0x557656df6a71 'const String' const
|     `-SubstTemplateTypeParmType 0x557656df6a70 'String' sugar
|       |-TemplateTypeParmType 0x557656d77250 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x557656d771f8 'T'
|       `-RecordType 0x557656da5a30 'String'
|         `-CXXRecord 0x557656da59a0 'String'
|-TypedefDecl 0x557656dfcf60 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x557656dfcf10 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x557656dfcef0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x557656dfce28 'type'
|     `-LValueReferenceType 0x557656dfcdf0 'const String &'
|       `-QualType 0x557656dfcb91 'const String' const
|         `-SubstTemplateTypeParmType 0x557656dfcb90 'String' sugar
|           |-TemplateTypeParmType 0x557656c9c080 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x557656c9c028 'T'
|           `-RecordType 0x557656da5a30 'String'
|             `-CXXRecord 0x557656da59a0 'String'
|-TypedefDecl 0x557656dfcfc8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x557656dfc1b0 'const String &'
|   `-QualType 0x557656df6a71 'const String' const
|     `-SubstTemplateTypeParmType 0x557656df6a70 'String' sugar
|       |-TemplateTypeParmType 0x557656d77250 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x557656d771f8 'T'
|       `-RecordType 0x557656da5a30 'String'
|         `-CXXRecord 0x557656da59a0 'String'
|-TypedefDecl 0x557656dfd020 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x557656a79580 'int'
|-TypedefDecl 0x557656dfd088 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x557656dfc240 'String *'
|   `-SubstTemplateTypeParmType 0x557656df6a70 'String' sugar
|     |-TemplateTypeParmType 0x557656d77250 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x557656d771f8 'T'
|     `-RecordType 0x557656da5a30 'String'
|       `-CXXRecord 0x557656da59a0 'String'
|-TypedefDecl 0x557656dfd0f0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x557656dfc2d0 'const String *'
|   `-QualType 0x557656df6a71 'const String' const
|     `-SubstTemplateTypeParmType 0x557656df6a70 'String' sugar
|       |-TemplateTypeParmType 0x557656d77250 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x557656d771f8 'T'
|       `-RecordType 0x557656da5a30 'String'
|         `-CXXRecord 0x557656da59a0 'String'
|-EnumDecl 0x557656dfd148 <line:134:5> col:5
| `-EnumConstantDecl 0x557656dfd240 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x557656dfd220 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x557656d78c38 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x557656d78c10 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x557656d78bf0 <col:40> 'int' 1
|-CXXConstructorDecl 0x557656dfd2c8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x557656dfd558 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x557656dfd380 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x557656dfd420 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x557656dfd7e8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x557656dfd6d0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x557656dfdaa8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x557656dfd990 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x557656dfe790 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x557656dfe670 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x557656dfeaa0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x557656dfe980 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x557656dfed90 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x557656dfebd8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x557656dfec50 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x557656dfeeb8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x557656dfef68 <col:20> Inherited
| `-OptimizeNoneAttr 0x557656dfefc0 <col:30> Inherited
|-CXXMethodDecl 0x557656dff008 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x557656dff0b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x557656dff110 <col:30> Inherited
|-CXXMethodDecl 0x557656dff1d8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x557656dff288 <col:20> Inherited
| `-OptimizeNoneAttr 0x557656dff2e0 <col:30> Inherited
|-CXXMethodDecl 0x557656dff328 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x557656dff3d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x557656dff430 <col:30> Inherited
|-CXXMethodDecl 0x557656dff478 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x557656dff528 <col:20> Inherited
| `-OptimizeNoneAttr 0x557656dff580 <col:30> Inherited
|-CXXMethodDecl 0x557656dff5c8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x557656dff678 <col:20> Inherited
| `-OptimizeNoneAttr 0x557656dff6d0 <col:30> Inherited
|-CXXMethodDecl 0x557656dff6f8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x557656dff7a8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x557656dff858 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x557656dffa18 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x557656dff908 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x557656dff980 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x557656dffb68 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x557656dffad8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x557656dffd18 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x557656dffc20 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x557656dffdd0 <col:20>
| `-OptimizeNoneAttr 0x557656dffe28 <col:30>
|-CXXMethodDecl 0x557656dfff48 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x557656dffe50 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x557656e00000 <col:20>
| `-OptimizeNoneAttr 0x557656e00058 <col:30>
|-CXXMethodDecl 0x557656e00110 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x557656e00080 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x557656e00258 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x557656e001c8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x557656e00388 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x557656e004b8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x557656e00588 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x557656e00658 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x557656e00798 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x557656e00708 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x557656e008e0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x557656e00850 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x557656e00a28 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x557656e00998 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x557656e00ae0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x557656e00be0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x557656e00b50 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x557656e00c98 <col:60> Inherited "" ""
|-CXXMethodDecl 0x557656e00d58 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x557656e00e58 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x557656e00fd8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x557656e00f18 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x557656e01798 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x557656e01090 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x557656e016f8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x557656e015f8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x557656e01878 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x557656e019c8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x557656e01938 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x557656e01a80 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x557656e01cc8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x557656e01b40 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x557656e01bb8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x557656e01e58 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x557656e01d98 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x557656e02068 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x557656e01f20 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x557656e01f98 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x557656e02128 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x557656e02388 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x557656e02290 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x557656e02458 <line:111:7> col:7 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x557656e02458

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576570b87f0 prev 0x557657088f80 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5576570b88e8 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5576570b8978 <col:22, col:28> col:22 public
|-EnumDecl 0x5576570b89a0 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5576570b8ab8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5576570b8a98 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5576570b8a80 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5576570b8a60 <col:14> 'int' 999
| |-EnumConstantDecl 0x5576570b8b60 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5576570b8b40 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5576570b8b28 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5576570b8b08 <col:14> 'int' 1
| |-EnumConstantDecl 0x5576570b8bf0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5576570b8bd0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5576570b8bb0 <col:17> 'int' 0
| |-EnumConstantDecl 0x5576570b8c80 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5576570b8c60 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5576570b8c40 <col:13> 'int' 1
| |-EnumConstantDecl 0x5576570b8d10 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5576570b8cf0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5576570b8cd0 <col:16> 'int' 2
| |-EnumConstantDecl 0x5576570b8da0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5576570b8d80 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5576570b8d60 <col:13> 'int' 3
| |-EnumConstantDecl 0x5576570b8e30 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5576570b8e10 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5576570b8df0 <col:15> 'int' 4
| |-EnumConstantDecl 0x5576570b8ec0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5576570b8ea0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5576570b8e80 <col:14> 'int' 5
| |-EnumConstantDecl 0x5576570b8f50 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5576570b8f30 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5576570b8f10 <col:12> 'int' 6
| `-EnumConstantDecl 0x5576570b8fe0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5576570b8fc0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5576570b8fa0 <col:13> 'int' 7
|-VarDecl 0x5576570b9050 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5576570b90d8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5576570b9160 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5576570b91e8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5576570b9270 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5576570b92f8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5576570b9380 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5576570b9408 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5576570b9490 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5576570b9518 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5576570b95a0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5576570b96a0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5576570be998 '_nerrors' 'int'
| | `-IntegerLiteral 0x5576570bf128 <line:128:13> 'int' 0
| `-CompoundStmt 0x5576570bf198 <col:16, line:129:5>
|-CXXDestructorDecl 0x5576570b9790 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5576570bf1a8 <col:29, line:132:5>
|-CXXMethodDecl 0x5576570b9948 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5576570b9880 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5576570b9a10 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5576570b9af8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5576570bf200 <col:44, line:161:5>
|   `-ReturnStmt 0x5576570bf1f0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5576570bf1d8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5576570bf1b8 <col:9> 'ErrorHandler *' lvalue Var 0x5576570be9f8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5576570b9c38 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5576570b9ba8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5576570b9d00 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5576570bf260 <col:43, line:173:5>
|   `-ReturnStmt 0x5576570bf250 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5576570bf238 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5576570bf218 <col:9> 'ErrorHandler *' lvalue Var 0x5576570bea70 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5576570b9db8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5576570b9e38 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5576570b9f48 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5576570b9eb8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5576570ba098 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5576570ba008 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5576570ba1f0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5576570ba158 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5576570ba348 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x5576570ba2b0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5576570ba4a0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5576570ba408 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5576570ba6c0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5576570ba568 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5576570ba5e8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5576570ba898 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5576570ba780 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5576570ba800 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5576570baab8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5576570ba958 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5576570ba9d8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5576570bac98 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5576570bab78 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5576570babf8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5576570bae78 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5576570bad58 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5576570badd8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5576570bb000 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5576570baf38 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5576570bb1d0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5576570bb0b8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5576570bb130 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5576570bf4b8 <col:57, line:234:5>
|   `-ReturnStmt 0x5576570bf4a8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5576570bf490 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5576570bf438 <col:9, col:41> 'int'
|         |-MemberExpr 0x5576570bf408 <col:9> '<bound member function type>' ->xmessage 0x5576570bb000
|         | `-CXXThisExpr 0x5576570bf3f8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5576570bf478 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5576570bf460 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5576570bf3d8 <col:18, col:40> 'String' (CXXTemporary 0x5576570bf3d8)
|               `-CallExpr 0x5576570bf3a0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5576570bf388 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5576570bf300 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5576570bd1c8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5576570bf320 <col:31> 'const String' lvalue ParmVar 0x5576570bb130 'str' 'const String &'
|                 `-DeclRefExpr 0x5576570bf340 <col:36> 'const String' lvalue ParmVar 0x5576570bb0b8 'anno' 'const String &'
|-CXXMethodDecl 0x5576570bb4b0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5576570bb290 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5576570bb310 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5576570bb388 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5576570bf748 <col:68, line:243:5>
|   `-ReturnStmt 0x5576570bf738 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5576570bf720 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5576570bf6c0 <col:9, col:41> 'int'
|         |-MemberExpr 0x5576570bf690 <col:9> '<bound member function type>' ->xmessage 0x5576570bb1d0
|         | `-CXXThisExpr 0x5576570bf680 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5576570bf558 <col:18> 'const String' lvalue ParmVar 0x5576570bb290 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5576570bf708 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5576570bf6f0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5576570bf660 <col:24, col:40> 'String' (CXXTemporary 0x5576570bf660)
|               `-CXXMemberCallExpr 0x5576570bf5f8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5576570bf588 <col:24> '<bound member function type>' ->vformat 0x5576570bc690
|                 | `-CXXThisExpr 0x5576570bf578 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5576570bf628 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5576570bf5b8 <col:32> 'const char *' lvalue ParmVar 0x5576570bb310 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5576570bf640 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5576570bf5d8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5576570bb388 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5576570bb750 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5576570bb578 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5576570bb5f0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5576570bb668 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5576570bfa88 <col:23, line:254:5>
|   `-ReturnStmt 0x5576570bfa78 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5576570bfa60 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5576570bfa00 <col:9, col:71> 'int'
|         |-MemberExpr 0x5576570bf9d0 <col:9> '<bound member function type>' ->xmessage 0x5576570bb1d0
|         | `-CXXThisExpr 0x5576570bf9c0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5576570bfa48 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5576570bfa30 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5576570bf980 <col:18, col:65> 'String' (CXXTemporary 0x5576570bf980)
|         |     `-CallExpr 0x5576570bf918 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5576570bf900 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5576570bf7e8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5576570bd1c8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5576570bf808 <col:31> 'const String' lvalue ParmVar 0x5576570bb5f0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5576570bf960 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5576570bf948 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5576570bf8e0 <col:37, col:64> 'String' (CXXTemporary 0x5576570bf8e0)
|         |             `-CallExpr 0x5576570bf8b0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5576570bf898 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5576570bf828 <col:37> 'String (const String &)' lvalue CXXMethod 0x5576570bd818 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5576570bf848 <col:56> 'const String' lvalue ParmVar 0x5576570bb578 'landmark' 'const String &'
|         `-DeclRefExpr 0x5576570bf9a0 <col:68> 'const String' lvalue ParmVar 0x5576570bb668 'str' 'const String &'
|-CXXMethodDecl 0x5576570bbad0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5576570bb818 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5576570bb890 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5576570bb910 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5576570bb988 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5576570bfd40 <col:34, line:267:5>
|   `-ReturnStmt 0x5576570bfd30 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5576570bfd18 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5576570bfcb0 <col:9, col:51> 'int'
|         |-MemberExpr 0x5576570bfc80 <col:9> '<bound member function type>' ->xmessage 0x5576570bb750
|         | `-CXXThisExpr 0x5576570bfc70 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5576570bfb28 <col:18> 'const String' lvalue ParmVar 0x5576570bb818 'landmark' 'const String &'
|         |-DeclRefExpr 0x5576570bfb48 <col:28> 'const String' lvalue ParmVar 0x5576570bb890 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5576570bfd00 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5576570bfce8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5576570bfc50 <col:34, col:50> 'String' (CXXTemporary 0x5576570bfc50)
|               `-CXXMemberCallExpr 0x5576570bfbe8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5576570bfb78 <col:34> '<bound member function type>' ->vformat 0x5576570bc690
|                 | `-CXXThisExpr 0x5576570bfb68 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5576570bfc18 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5576570bfba8 <col:42> 'const char *' lvalue ParmVar 0x5576570bb910 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5576570bfc30 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5576570bfbc8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5576570bb988 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5576570bbbe0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5576570bfdc0 <col:25, line:288:5>
|   `-ReturnStmt 0x5576570bfdb0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5576570bfd98 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5576570bfd68 <col:9> 'const int' lvalue ->_nerrors 0x5576570be998
|         `-CXXThisExpr 0x5576570bfd58 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5576570bbdf0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5576570bbc98 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5576570bbd18 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5576570bc0d8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5576570bbeb8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5576570bbf38 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5576570bbfb0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5576570bc270 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5576570bc1a8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5576570bc4b8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5576570bc330 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5576570bc3a8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5576570c0020 <col:58, line:357:5>
|   `-ReturnStmt 0x5576570c0010 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5576570bfff8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5576570bffc8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5576570bffb0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5576570bff90 <col:9, col:29> 'String' (CXXTemporary 0x5576570bff90)
|             `-CallExpr 0x5576570bff20 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5576570bff08 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5576570bfe88 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5576570bc0d8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5576570bfe28 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5576570bff58 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5576570bfe48 <col:21> 'const char *' lvalue ParmVar 0x5576570bc330 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5576570bff70 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5576570bfe68 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5576570bc3a8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5576570bc690 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5576570bc580 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5576570bc5f8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5576570bc7e8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5576570bc758 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5576570bc930 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5576570bc8a0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5576570bcbd0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5576570bc9e8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5576570bca68 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5576570bcae0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5576570bcd30 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5576570bcca0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5576570c0138 <col:37, line:441:5>
|   `-IfStmt 0x5576570c0120 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5576570c00a8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5576570c0078 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5576570c0038 <col:6> 'int' lvalue ParmVar 0x5576570bcca0 'level' 'int'
|     | `-ImplicitCastExpr 0x5576570c0090 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5576570c0058 <col:15> 'ErrorHandler::Level' EnumConstant 0x5576570b8da0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5576570c0108 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5576570c00d8 <col:8> 'int' lvalue ->_nerrors 0x5576570be998
|         `-CXXThisExpr 0x5576570c00c8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5576570bcdf8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5576570c01d0 <col:26, line:448:5>
|   `-BinaryOperator 0x5576570c01b0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5576570c0160 <col:2> 'int' lvalue ->_nerrors 0x5576570be998
|     | `-CXXThisExpr 0x5576570c0150 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5576570c0190 <col:13> 'int' 0
|-CXXMethodDecl 0x5576570bcfc0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5576570bceb0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5576570bcf28 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5576570bd1c8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5576570bd080 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5576570bd0f8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5576570bd478 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5576570bd288 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5576570bd308 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5576570bd388 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5576570bd530 <col:59> 0 0
|-CXXMethodDecl 0x5576570bd6c8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5576570bd5a8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5576570bd628 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5576570c0840 <col:70, line:534:5>
|   |-DeclStmt 0x5576570c0340 <line:528:2, col:20>
|   | |-VarDecl 0x5576570c01f8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5576570c0260 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5576570c0298 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5576570c0300 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5576570c0410 <line:529:2, col:23>
|   | `-VarDecl 0x5576570c0370 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5576570c03f8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5576570c03d8 <col:18> 'const char *' lvalue ParmVar 0x5576570bd5a8 'begin' 'const char *'
|   |-DoStmt 0x5576570c07d8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5576570c0708 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5576570c06f0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5576570c06d0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5576570c0428 <col:6> 'const char *' lvalue Var 0x5576570c0370 'x' 'const char *'
|   | |     `-CallExpr 0x5576570c0620 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5576570c0608 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5576570c05c0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5576570bee70 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5576570c0688 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5576570c0670 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5576570c04e0 <col:20, col:27> 'String' (CXXTemporary 0x5576570c04e0)
|   | |       |     `-CXXTemporaryObjectExpr 0x5576570c04a8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5576570c06a0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5576570c0500 <col:30> 'const char *' lvalue Var 0x5576570c0370 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5576570c06b8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5576570c0520 <col:33> 'const char *' lvalue ParmVar 0x5576570bd628 'end' 'const char *'
|   | |       |-UnaryOperator 0x5576570c0560 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5576570c0540 <col:39> 'String' lvalue Var 0x5576570c01f8 'name' 'String'
|   | |       |-UnaryOperator 0x5576570c0598 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5576570c0578 <col:46> 'String' lvalue Var 0x5576570c0298 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5576570c05b0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5576570c07c0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5576570c07a8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5576570c0788 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5576570c0758 <col:11> '<bound member function type>' .operator int (String::*)() const 0x557656da91d8
|   |         `-ImplicitCastExpr 0x5576570c0740 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5576570c0720 <col:11> 'String' lvalue Var 0x5576570c01f8 'name' 'String'
|   `-ReturnStmt 0x5576570c0830 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5576570c0818 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5576570c07f8 <col:9> 'const char *' lvalue Var 0x5576570c0370 'x' 'const char *'
|-CXXMethodDecl 0x5576570bd818 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5576570bd788 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5576570c0e48 <col:55, line:550:5>
|   `-IfStmt 0x5576570c0e20 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5576570c0a80 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5576570c0a68 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5576570c0a50 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5576570c0a30 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5576570c0a00 <col:6> '<bound member function type>' .operator int (String::*)() const 0x557656da91d8
|     | |       `-DeclRefExpr 0x5576570c08a0 <col:6> 'const String' lvalue ParmVar 0x5576570bd788 'x' 'const String &'
|     | `-BinaryOperator 0x5576570c09e0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5576570c09b0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5576570c0960 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5576570c0948 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5576570c0900 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x557656dc2870 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5576570c08c0 <col:11> 'const String' lvalue ParmVar 0x5576570bd788 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5576570c08e0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5576570c09c8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5576570c0998 <col:19> 'char' 123
|     |-ReturnStmt 0x5576570c0af0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5576570c0ac0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5576570c0aa0 <col:13> 'const String' lvalue ParmVar 0x5576570bd788 'x' 'const String &'
|     `-IfStmt 0x5576570c0df8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5576570c0b88 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5576570c0b70 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5576570c0b50 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5576570c0b20 <col:11> '<bound member function type>' .operator int (String::*)() const 0x557656da91d8
|       |       `-DeclRefExpr 0x5576570c0b00 <col:11> 'const String' lvalue ParmVar 0x5576570bd788 'x' 'const String &'
|       |-ReturnStmt 0x5576570c0d10 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5576570c0cf8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5576570c0cc8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5576570c0cb0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5576570c0c90 <col:13, col:29> 'String' (CXXTemporary 0x5576570c0c90)
|       |         `-CallExpr 0x5576570c0c40 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5576570c0c28 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5576570c0ba0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5576570bcfc0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5576570c0c70 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5576570c0bc0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5576570c0be0 <col:28> 'const String' lvalue ParmVar 0x5576570bd788 'x' 'const String &'
|       `-ReturnStmt 0x5576570c0de8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5576570c0dd0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5576570c0da0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5576570c0d88 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5576570c0d68 <col:13, col:20> 'String' (CXXTemporary 0x5576570c0d68)
|                 `-CXXTemporaryObjectExpr 0x5576570c0d30 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5576570bd9e0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5576570bd8d0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5576570bd948 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5576570bf118 <col:71> 'bool' false
|-CXXRecordDecl 0x5576570bda90 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5576570bdd88 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5576570bdd20 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5576570bdcc0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5576570bdc80 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x557656da5a30 'String'
|       | `-CXXRecord 0x557656da59a0 'String'
|       |-BuiltinType 0x557656a79580 'int'
|       `-DecayedType 0x557656fc4590 '__va_list_tag *' sugar
|         |-TypedefType 0x557656fc4560 'va_list' sugar
|         | |-Typedef 0x557656cc3cf0 'va_list'
|         | `-TypedefType 0x557656cc3ca0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x557656cbca98 '__gnuc_va_list'
|         |   `-TypedefType 0x557656cbca00 '__builtin_va_list' sugar
|         |     |-Typedef 0x557656abad38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x557656abace0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x557656a7a2d0 '__va_list_tag'
|         |         `-CXXRecord 0x557656a7a238 '__va_list_tag'
|         `-PointerType 0x557656cc99f0 '__va_list_tag *'
|           `-RecordType 0x557656a7a2d0 '__va_list_tag'
|             `-CXXRecord 0x557656a7a238 '__va_list_tag'
|-EnumDecl 0x5576570bdde0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5576570bdee0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5576570be440 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576570bdec0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5576570bdea0 <col:16> 'int' 1
| |-EnumConstantDecl 0x5576570bdf70 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5576570be458 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576570bdf50 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5576570bdf30 <col:21> 'int' 2
| |-EnumConstantDecl 0x5576570be000 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5576570be470 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576570bdfe0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5576570bdfc0 <col:22> 'int' 4
| |-EnumConstantDecl 0x5576570be090 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5576570be488 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576570be070 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5576570be050 <col:17> 'int' 8
| |-EnumConstantDecl 0x5576570be120 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5576570be4a0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576570be100 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5576570be0e0 <col:22> 'int' 16
| |-EnumConstantDecl 0x5576570be1b0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5576570be4b8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576570be190 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5576570be170 <col:19> 'int' 32
| |-EnumConstantDecl 0x5576570be240 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5576570be4d0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576570be220 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5576570be200 <col:17> 'int' 64
| |-EnumConstantDecl 0x5576570be2d0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5576570be4e8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576570be2b0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5576570be290 <col:14> 'int' 128
| |-EnumConstantDecl 0x5576570be360 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5576570be500 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576570be340 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5576570be320 <col:16> 'int' 256
| `-EnumConstantDecl 0x5576570be3f0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5576570be518 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576570be3d0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5576570be3b0 <col:12> 'int' 1024
|-CXXMethodDecl 0x5576570be728 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5576570be540 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5576570be5e0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5576570be8b0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5576570be7e8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5576570be958 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5576570be998 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5576570be9f8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5576570bea70 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5576570bee70 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5576570beae8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5576570beb68 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5576570bebe8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5576570bec60 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5576570becd8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5576570bed50 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5576570bef98 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5576570bef98
| `-ParmVarDecl 0x5576570bf0a8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5576570c11a8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5576570c11a8
  `-ParmVarDecl 0x5576570c12b8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557656fc35d0 prev 0x557656fc2138 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x557656fc36c8 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x557656fc3758 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x557656fc3898 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x557656fc3790 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x557656fc4ce0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x557656fc4cc0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x557656fc4860 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x557656fc4d70 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x557656fc4d30 <col:17> 'ErrorHandler *' lvalue ParmVar 0x557656fc3790 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x557656fc48c8 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x557656fc4df0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x557656fc4db0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x557656fc4928 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x557656fc4e30 <col:54> 'bool' false
| `-CompoundStmt 0x557656fc4f38 <col:61, line:38:5>
|   `-BinaryOperator 0x557656fc4f18 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x557656fc4eb0 <col:9> 'const Element *' lvalue ->_context 0x557656fc4800
|     | `-CXXThisExpr 0x557656fc4ea0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x557656fc4f00 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x557656fc4ee0 <col:20> 'int' 0
|-CXXConstructorDecl 0x557656fc3aa8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x557656fc3958 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x557656fc39d0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x557656fc4d18 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x557656fc4cf8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x557656fc4800 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x557656fc4f90 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x557656fc4f50 <col:20> 'const Element *' lvalue ParmVar 0x557656fc3958 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x557656fc4860 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x557656fc5010 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x557656fc4fd0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x557656fc39d0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x557656fc48c8 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x557656fc5090 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x557656fc5050 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x557656fc4928 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x557656fc50d0 <col:73> 'bool' false
| `-CompoundStmt 0x557656fc5148 <col:80, line:46:5>
|-CXXMethodDecl 0x557656fc3bd8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x557656fc51c0 <col:36, line:51:5>
|   `-ReturnStmt 0x557656fc51b0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x557656fc5198 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x557656fc5168 <col:16> 'const Element *const' lvalue ->_context 0x557656fc4800
|         `-CXXThisExpr 0x557656fc5158 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x557656fc3cc8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x557656fc5240 <col:32, line:57:5>
|   `-ReturnStmt 0x557656fc5230 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x557656fc5218 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x557656fc51e8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x557656fc4860
|         `-CXXThisExpr 0x557656fc51d8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x557656fc3d88 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x557656fc3f10 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x557656fc3e40 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x557656fc4060 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x557656fc3fd0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x557656fc41b0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x557656fc4120 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x557656fc43b8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x557656fc4268 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x557656fc42e0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x557656fc4710 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x557656fc4478 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x557656fc44f8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x557656fc45c0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x557656fc47c8 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x557656fc4800 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x557656fc4860 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x557656fc48c8 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x557656fc4928 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x557656fc4978 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x557656fc4978
| `-ParmVarDecl 0x557656fc4a88 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x557656fc4b28 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x557656fc4b28
| `-ParmVarDecl 0x557656fc4c38 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5576570d60a8 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x557656fe4860 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x557656fe4a38 prev 0x557656fe4860 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x557656fe4ac8 <col:46, col:52> col:46 public
|-TypedefDecl 0x557656fe4af0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x557656a79580 'int'
|-TypedefDecl 0x557656fe66c0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x557656fe6670 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x557656fe4fa0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x557656fe4ea0 'type'
|     `-TemplateSpecializationType 0x557656fe4e30 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x557656fe4d10 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x557656fe4cf0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x557656fe4cd0 <col:24> 'unsigned long' 4
|       `-RecordType 0x557656fe4e10 'char_array<4>'
|         `-ClassTemplateSpecialization 0x557656fe4d30 'char_array'
|-TypedefDecl 0x557656fe93b8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x557656fe9380 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x557656fe9360 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x557656fe66c0 'type'
|     `-ElaboratedType 0x557656fe6670 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x557656fe4fa0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x557656fe4ea0 'type'
|         `-TemplateSpecializationType 0x557656fe4e30 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x557656fe4d10 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x557656fe4cf0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x557656fe4cd0 <col:24> 'unsigned long' 4
|           `-RecordType 0x557656fe4e10 'char_array<4>'
|             `-ClassTemplateSpecialization 0x557656fe4d30 'char_array'
|-CXXMethodDecl 0x557656fe9538 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x557656fe9448 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x557656fe9628 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x557656fe9708 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x557656fe99d8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x557656fe98e0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x557656fe9c18 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x557656fe9a90 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x557656fe9b08 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x557656fe9de8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x557656fe9cd8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x557656fe9d50 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x557656fe9f48 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x557656fea018 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x557656fea268 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x557656fea0d8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x557656fea150 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x557656fea4c8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x557656fea338 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x557656fea3b0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x557656fea688 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x557656fea598 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x557656fea848 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x557656fea750 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x557656fea900 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x557656fea9b0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x557656feabe8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x557656feaa60 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x557656feaad8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x557656feae88 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x557656fead90 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x557656feaf50 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x557656feafa0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x557656feaff0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x557656fe3268 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x557656fe3478 prev 0x557656fe3268 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x557656fe47d0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x557656fe4780 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x557656fe4760 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x557656fe4610 'type'
|     `-SubstTemplateTypeParmType 0x557656fe4430 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x557656c93610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x557656c935b8 'T'
|       `-RecordType 0x557656fe3f80 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x557656fe3e98 'sized_array_memory'
|-FieldDecl 0x557656feb040 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x557656feb090 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x557656feb0c8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x557656fe3510 'int' sugar
|   |-TemplateTypeParmType 0x557656d77250 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x557656d771f8 'T'
|   `-BuiltinType 0x557656a79580 'int'
|-TypedefDecl 0x557656feb158 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x557656feb120 'int &'
|   `-SubstTemplateTypeParmType 0x557656fe3510 'int' sugar
|     |-TemplateTypeParmType 0x557656d77250 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x557656d771f8 'T'
|     `-BuiltinType 0x557656a79580 'int'
|-TypedefDecl 0x557656feb218 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x557656feb1e0 'const int &'
|   `-QualType 0x557656fe3511 'const int' const
|     `-SubstTemplateTypeParmType 0x557656fe3510 'int' sugar
|       |-TemplateTypeParmType 0x557656d77250 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x557656d771f8 'T'
|       `-BuiltinType 0x557656a79580 'int'
|-TypedefDecl 0x557656feb2a8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x557656feb270 'int *'
|   `-SubstTemplateTypeParmType 0x557656fe3510 'int' sugar
|     |-TemplateTypeParmType 0x557656d77250 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x557656d771f8 'T'
|     `-BuiltinType 0x557656a79580 'int'
|-TypedefDecl 0x557656feb338 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x557656feb300 'const int *'
|   `-QualType 0x557656fe3511 'const int' const
|     `-SubstTemplateTypeParmType 0x557656fe3510 'int' sugar
|       |-TemplateTypeParmType 0x557656d77250 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x557656d771f8 'T'
|       `-BuiltinType 0x557656a79580 'int'
|-TypedefDecl 0x557656febf20 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x557656febed0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x557656febeb0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x557656febe40 'type'
|     `-SubstTemplateTypeParmType 0x557656febc00 'int' sugar
|       |-TemplateTypeParmType 0x557656c9d9c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x557656c9d970 'T'
|       `-BuiltinType 0x557656a79580 'int'
|-TypedefDecl 0x557656febf88 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x557656feb1e0 'const int &'
|   `-QualType 0x557656fe3511 'const int' const
|     `-SubstTemplateTypeParmType 0x557656fe3510 'int' sugar
|       |-TemplateTypeParmType 0x557656d77250 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x557656d771f8 'T'
|       `-BuiltinType 0x557656a79580 'int'
|-TypedefDecl 0x557656febfe0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x557656a79580 'int'
|-TypedefDecl 0x557656fec048 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x557656feb270 'int *'
|   `-SubstTemplateTypeParmType 0x557656fe3510 'int' sugar
|     |-TemplateTypeParmType 0x557656d77250 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x557656d771f8 'T'
|     `-BuiltinType 0x557656a79580 'int'
|-TypedefDecl 0x557656fec0b0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x557656feb300 'const int *'
|   `-QualType 0x557656fe3511 'const int' const
|     `-SubstTemplateTypeParmType 0x557656fe3510 'int' sugar
|       |-TemplateTypeParmType 0x557656d77250 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x557656d771f8 'T'
|       `-BuiltinType 0x557656a79580 'int'
|-EnumDecl 0x557656fec108 <line:134:5> col:5
| `-EnumConstantDecl 0x557656fec200 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x557656fec1e0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x557656d78c38 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x557656d78c10 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x557656d78bf0 <col:40> 'int' 1
|-CXXConstructorDecl 0x557656fec288 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x557656fec4d8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x557656fec340 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x557656fec3e0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x557656fec798 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x557656fec680 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x557656feca58 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x557656fec940 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x557656fecda0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x557656fecc80 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x557656fed0b0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x557656fecf90 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x557656fede28 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x557656fed1e8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x557656fed260 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x557656fedf58 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x557656fee038 <col:20> Inherited
| `-OptimizeNoneAttr 0x557656fee090 <col:30> Inherited
|-CXXMethodDecl 0x557656fee0d8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x557656fee188 <col:20> Inherited
| `-OptimizeNoneAttr 0x557656fee1e0 <col:30> Inherited
|-CXXMethodDecl 0x557656fee2a8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x557656fee358 <col:20> Inherited
| `-OptimizeNoneAttr 0x557656fee3b0 <col:30> Inherited
|-CXXMethodDecl 0x557656fee3f8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x557656fee4a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x557656fee500 <col:30> Inherited
|-CXXMethodDecl 0x557656fee548 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x557656fee5f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x557656fee650 <col:30> Inherited
|-CXXMethodDecl 0x557656fee698 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x557656fee748 <col:20> Inherited
| `-OptimizeNoneAttr 0x557656fee7a0 <col:30> Inherited
|-CXXMethodDecl 0x557656fee7c8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x557656fee878 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x557656fee928 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x557656feeae8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x557656fee9d8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x557656feea50 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x557656feec38 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x557656feeba8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x557656feede8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x557656feecf0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x557656feeea0 <col:20>
| `-OptimizeNoneAttr 0x557656feeef8 <col:30>
|-CXXMethodDecl 0x557656fef018 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x557656feef20 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x557656fef0d0 <col:20>
| `-OptimizeNoneAttr 0x557656fef128 <col:30>
|-CXXMethodDecl 0x557656fef1e0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x557656fef150 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x557656fef328 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x557656fef298 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x557656fef458 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x557656fef588 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x557656fef658 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x557656fef728 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x557656fef868 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x557656fef7d8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x557656fef9b0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x557656fef920 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x557656fefaf8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x557656fefa68 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x557656fefbb0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x557656fefcb0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x557656fefc20 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x557656fefd68 <col:60> Inherited "" ""
|-CXXMethodDecl 0x557656fefe28 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x557656feff28 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x557656ff00a8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x557656feffe8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x557656ff0868 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x557656ff0160 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x557656ff07c8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x557656ff06c8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x557656ff0948 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x557656ff0a98 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x557656ff0a08 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x557656ff0b50 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x557656ff0d98 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x557656ff0c10 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x557656ff0c88 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x557656ff0f58 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x557656ff0e68 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x557656ff11a8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x557656ff1020 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x557656ff1098 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x557656ff1268 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x557656ff14c8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x557656ff13d0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x557656ff1598 <line:111:7> col:7 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557656fdb408 prev 0x557656fca0b8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x557656fdb500 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x557656fdb5f0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x557657005480 <col:16, line:828:9>
|-CXXDestructorDecl 0x557656fdb6e0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x557657005490 <col:25, line:830:9>
|-CXXMethodDecl 0x557656fdb7e0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x557656fdb890 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x557656fdb938 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x557656fdb938
| `-ParmVarDecl 0x557656fdba48 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x557656fdc208 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x557656fdc208
  `-ParmVarDecl 0x557656fdc318 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557656fc9ec8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x557656fca028 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x557656fca0b8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x557656fca170 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x557656fca278 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x557656fca1a8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x557656ff31c8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x557656ff31a8 <col:31> 'int' 0
|-CXXConstructorDecl 0x557656fca598 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x557656fca410 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x557656fca488 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x557656ff3200 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x557656ff31e0 <col:59> 'int' 0
|-CXXConstructorDecl 0x557656fca770 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x557656fca660 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x557656fca6d8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x557656ff3238 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x557656ff3218 <col:55> 'int' 0
|-CXXConstructorDecl 0x557656fcab28 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x557656fca910 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x557656fca988 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x557656fcaa00 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x557656ff3270 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x557656ff3250 <col:31> 'int' 0
|-CXXConstructorDecl 0x557656fcace8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x557656fcac28 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x557656fcade0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x557656fcafc8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x557656fcaed0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x557656fcb0b8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x557656ff3660 <col:24, line:291:5>
|   `-ReturnStmt 0x557656ff3650 <line:290:9, col:79>
|     `-BinaryOperator 0x557656ff3630 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x557656ff34c8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x557656ff3420 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x557656ff3400 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x557656ff32f8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x557656ff32e0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x557656ff32c8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x557656ff3298 <col:18> 'Vector<String> *const' lvalue ->_conf 0x557656fe3200
|       | |   |       `-CXXThisExpr 0x557656ff3288 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x557656ff33e8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x557656ff33d0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x557656ff3398 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x557656ff3368 <col:28, col:35> '<bound member function type>' ->size 0x557656dff6f8
|       | |           `-ImplicitCastExpr 0x557656ff33b8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x557656ff3350 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x557656ff3320 <col:28> 'Vector<String> *const' lvalue ->_conf 0x557656fe3200
|       | |                 `-CXXThisExpr 0x557656ff3310 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x557656ff34b0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x557656ff3498 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x557656ff3480 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x557656ff3450 <col:47> 'Args::Slot *const' lvalue ->_slots 0x557656ff16e0
|       |         `-CXXThisExpr 0x557656ff3440 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x557656ff3610 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x557656ff35f8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x557656ff35e0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x557656ff35a0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x557656ff3588 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x557656ff34f8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x557656ff1808
|         |     |   `-CXXThisExpr 0x557656ff34e8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x557656ff3528 <col:73> 'int' 0
|         `-IntegerLiteral 0x557656ff35c0 <col:79> 'int' 0
|-CXXMethodDecl 0x557656fcb178 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x557656ff3838 <col:32, line:296:5>
|   `-ReturnStmt 0x557656ff3828 <line:295:9, col:49>
|     `-BinaryOperator 0x557656ff3808 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x557656ff36e8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x557656ff36d0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x557656ff36b8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x557656ff3688 <col:17> 'Args::Slot *const' lvalue ->_slots 0x557656ff16e0
|       |       `-CXXThisExpr 0x557656ff3678 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x557656ff37e8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x557656ff37d0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x557656ff37b8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x557656ff3778 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x557656ff3760 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x557656ff3710 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x557656ff1808
|         |     |   `-CXXThisExpr 0x557656ff3700 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x557656ff3740 <col:43> 'int' 0
|         `-IntegerLiteral 0x557656ff3798 <col:49> 'int' 0
|-CXXMethodDecl 0x557656fcb268 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x557656ff3a48 <col:19, line:306:5>
|   |-IfStmt 0x557656ff3968 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x557656ff38a8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x557656ff3890 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x557656ff3860 <col:13> 'Vector<String> *' lvalue ->_conf 0x557656fe3200
|   | |     `-CXXThisExpr 0x557656ff3850 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x557656ff3948 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x557656ff3918 <col:13, col:20> '<bound member function type>' ->clear 0x557656e02128
|   |     `-ImplicitCastExpr 0x557656ff3900 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x557656ff38d0 <col:13> 'Vector<String> *' lvalue ->_conf 0x557656fe3200
|   |         `-CXXThisExpr 0x557656ff38c0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x557656ff39f0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x557656ff39c0 <col:9, col:16> '<bound member function type>' .clear 0x557656ff1268
|   |   `-MemberExpr 0x557656ff3990 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x557656ff1680
|   |     `-CXXThisExpr 0x557656ff3980 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x557656ff3a38 <line:305:9, col:17>
|     `-UnaryOperator 0x557656ff3a20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x557656ff3a10 <col:17> 'Args *' this
|-CXXMethodDecl 0x557656fcb4e8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x557656fcb3f0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x557656fcb668 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x557656fcb5a0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x557656fcb9e8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x557656fcb710 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x557656fcb948 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x557656fcb7b8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x557656fcb830 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x557656ff3d58 <col:67, line:327:5>
|     |-WhileStmt 0x557656ff3d08 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x557656ff3b20 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x557656ff3ab0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x557656e161e0 0x557656dd42d0 0x557656dd3f80 0x557656dd3870 0x557656da4af0 0x557656d60df0
|     | | |-DeclRefExpr 0x557656ff3a70 <col:16> 'Iter' lvalue ParmVar 0x557656fcb7b8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x557656ff3a90 <col:25> 'Iter' lvalue ParmVar 0x557656fcb830 'end' 'Iter'
|     | `-CompoundStmt 0x557656ff3ce8 <col:30, line:325:9>
|     |   |-CallExpr 0x557656ff3c88 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x557656ff3b68 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x557656ff3c58 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x557656ff3be8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x557656e7d388 0x557656e7cfa8 0x557656e7cbd8 0x557656e7c7f8 0x557656e7c418 0x557656e7c048
|     |   |   `-DeclRefExpr 0x557656ff3bc8 <col:24> 'Iter' lvalue ParmVar 0x557656fcb7b8 'begin' 'Iter'
|     |   `-UnaryOperator 0x557656ff3cd0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x557656ff3cb0 <col:15> 'Iter' lvalue ParmVar 0x557656fcb7b8 'begin' 'Iter'
|     `-ReturnStmt 0x557656ff3d48 <line:326:9, col:17>
|       `-UnaryOperator 0x557656ff3d30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x557656ff3d20 <col:17> 'Args *' this
|-CXXMethodDecl 0x557656fcbaf0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x557656fcba60 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x557656fcbc38 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x557656fcbba8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x557656fcbd00 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x557656ff3e38 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x557656ff3dd8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x557656ff3d88 <col:9> '<bound member function type>' ->reset_from 0x557656ff1b88
|   | | `-CXXThisExpr 0x557656ff3d78 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x557656ff3db8 <col:20> 'int' 0
|   `-ReturnStmt 0x557656ff3e28 <line:352:9, col:17>
|     `-UnaryOperator 0x557656ff3e10 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x557656ff3e00 <col:17> 'Args *' this
|-VarDecl 0x557656fcbdb8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x557656fcbe20 <col:38> 'int' 1
|-VarDecl 0x557656fcbeb0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x557656fcbf18 <col:39> 'int' 2
|-VarDecl 0x557656fcbfa8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x557656fcc010 <col:39> 'int' 4
|-VarDecl 0x557656fcc0a0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x557656fcc108 <col:39> 'int' 8
|-FunctionTemplateDecl 0x557656fcc488 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x557656fcc180 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x557656fcc3e8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x557656fcc230 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fcc2d8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x557656ff3f90 <col:43, line:371:5>
|     `-ReturnStmt 0x557656ff3f80 <line:370:9, col:34>
|       `-CallExpr 0x557656ff3f48 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff3e68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff3ee8 <col:21> 'const char *' lvalue ParmVar 0x557656fcc230 'keyword' 'const char *'
|         |-IntegerLiteral 0x557656ff3f08 <col:30> 'int' 0
|         `-DeclRefExpr 0x557656ff3f28 <col:33> 'T' lvalue ParmVar 0x557656fcc2d8 'x' 'T &'
|-FunctionTemplateDecl 0x557656fcc7d0 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x557656fcc4f0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x557656fcc730 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x557656fcc5a0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fcc648 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x557656ff40e0 <col:45, line:375:5>
|     `-ReturnStmt 0x557656ff40d0 <line:374:9, col:42>
|       `-CallExpr 0x557656ff4098 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff3fb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff4038 <col:21> 'const char *' lvalue ParmVar 0x557656fcc5a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x557656ff4058 <col:30> 'const int' lvalue Var 0x557656fcbdb8 'mandatory' 'const int'
|         `-DeclRefExpr 0x557656ff4078 <col:41> 'T' lvalue ParmVar 0x557656fcc648 'x' 'T &'
|-FunctionTemplateDecl 0x557656fccb08 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x557656fcc838 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x557656fcca68 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x557656fcc8f0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fcc998 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x557656ff4230 <col:45, line:379:5>
|     `-ReturnStmt 0x557656ff4220 <line:378:9, col:43>
|       `-CallExpr 0x557656ff41e8 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff4108 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff4188 <col:21> 'const char *' lvalue ParmVar 0x557656fcc8f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x557656ff41a8 <col:30> 'const int' lvalue Var 0x557656fcbeb0 'positional' 'const int'
|         `-DeclRefExpr 0x557656ff41c8 <col:42> 'T' lvalue ParmVar 0x557656fcc998 'x' 'T &'
|-FunctionTemplateDecl 0x557656fcce38 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x557656fccb70 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x557656fccd98 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x557656fccc20 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x557656fcccc8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x557656ff4430 <col:46, line:383:5>
| |   `-ReturnStmt 0x557656ff4420 <line:382:9, col:55>
| |     `-CallExpr 0x557656ff43e8 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x557656ff4258 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x557656ff42d8 <col:21> 'const char *' lvalue ParmVar 0x557656fccc20 'keyword' 'const char *'
| |       |-BinaryOperator 0x557656ff43a8 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x557656ff4358 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x557656ff4338 <col:30> 'const int' lvalue Var 0x557656fcbdb8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x557656ff4390 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x557656ff4370 <col:42> 'const int' lvalue Var 0x557656fcbeb0 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x557656ff43c8 <col:54> 'T' lvalue ParmVar 0x557656fcccc8 'x' 'T &'
| `-CXXMethodDecl 0x5576570d6538 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x5576570d6358 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x5576570d6428 <col:40, col:43> col:43 x 'int &'
|-FunctionTemplateDecl 0x557656fcd238 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x557656fccea0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x557656fcd198 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x557656fccf50 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fccfd0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x557656fcd078 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x557656ff4570 <col:54, line:388:5>
|     |-CallExpr 0x557656ff44f8 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x557656ff4448 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x557656ff4488 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x557656ff4498 <col:30> 'const char *' lvalue ParmVar 0x557656fccf50 'keyword' 'const char *'
|     | |-DeclRefExpr 0x557656ff44b8 <col:39> 'int' lvalue ParmVar 0x557656fccfd0 'flags' 'int'
|     | `-DeclRefExpr 0x557656ff44d8 <col:46> 'T' lvalue ParmVar 0x557656fcd078 'x' 'T &'
|     `-ReturnStmt 0x557656ff4560 <line:387:9, col:17>
|       `-UnaryOperator 0x557656ff4548 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x557656ff4538 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x557656fcd6e8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x557656fcd2a8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x557656fcd328 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x557656fcd648 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x557656fcd3e8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fcd488 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x557656fcd528 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x557656ff46e0 <col:74, line:403:5>
|     `-ReturnStmt 0x557656ff46d0 <line:402:9, col:56>
|       `-CallExpr 0x557656ff4690 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff45a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff4610 <col:28> 'const char *' lvalue ParmVar 0x557656fcd3e8 'keyword' 'const char *'
|         |-IntegerLiteral 0x557656ff4630 <col:37> 'int' 0
|         |-DeclRefExpr 0x557656ff4650 <col:40> 'T' lvalue ParmVar 0x557656fcd488 'x' 'T &'
|         `-DeclRefExpr 0x557656ff4670 <col:43> 'const V' lvalue ParmVar 0x557656fcd528 'default_value' 'const V &'
|-FunctionTemplateDecl 0x557656fcdb58 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x557656fcd758 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x557656fcd7d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x557656fcdab8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x557656fcd898 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fcd938 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x557656fcd9d8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x557656ff4848 <col:76, line:407:5>
|     `-ReturnStmt 0x557656ff4838 <line:406:9, col:65>
|       `-CallExpr 0x557656ff47f8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff4708 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff4778 <col:28> 'const char *' lvalue ParmVar 0x557656fcd898 'keyword' 'const char *'
|         |-DeclRefExpr 0x557656ff4798 <col:37> 'const int' lvalue Var 0x557656fcbeb0 'positional' 'const int'
|         |-DeclRefExpr 0x557656ff47b8 <col:49> 'T' lvalue ParmVar 0x557656fcd938 'x' 'T &'
|         `-DeclRefExpr 0x557656ff47d8 <col:52> 'const V' lvalue ParmVar 0x557656fcd9d8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x557656fce0a8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x557656fcdbc8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x557656fcdc48 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x557656fce008 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x557656fcdd08 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fcdd88 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x557656fcde28 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x557656fcdec8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x557656ff49b0 <col:85, line:412:5>
|     |-CallExpr 0x557656ff4930 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x557656ff4860 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x557656ff48a0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x557656ff48b0 <col:37> 'const char *' lvalue ParmVar 0x557656fcdd08 'keyword' 'const char *'
|     | |-DeclRefExpr 0x557656ff48d0 <col:46> 'int' lvalue ParmVar 0x557656fcdd88 'flags' 'int'
|     | |-DeclRefExpr 0x557656ff48f0 <col:53> 'T' lvalue ParmVar 0x557656fcde28 'x' 'T &'
|     | `-DeclRefExpr 0x557656ff4910 <col:56> 'const V' lvalue ParmVar 0x557656fcdec8 'default_value' 'const V &'
|     `-ReturnStmt 0x557656ff49a0 <line:411:9, col:17>
|       `-UnaryOperator 0x557656ff4988 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x557656ff4978 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x557656fce538 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x557656fce120 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fce198 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557656fce498 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x557656fce258 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fce2d0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x557656fce378 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x557656ff4b30 <col:53, line:425:5>
|     `-ReturnStmt 0x557656ff4b20 <line:424:9, col:42>
|       `-CallExpr 0x557656ff4ae0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff49e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff4a60 <col:21> 'const char *' lvalue ParmVar 0x557656fce258 'keyword' 'const char *'
|         |-IntegerLiteral 0x557656ff4a80 <col:30> 'int' 0
|         |-DeclRefExpr 0x557656ff4aa0 <col:33> 'P' lvalue ParmVar 0x557656fce2d0 'parser' 'P'
|         `-DeclRefExpr 0x557656ff4ac0 <col:41> 'T' lvalue ParmVar 0x557656fce378 'x' 'T &'
|-FunctionTemplateDecl 0x557656fce988 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x557656fce5a8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fce628 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557656fce8e8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x557656fce6e8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fce760 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x557656fce808 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x557656ff4ca8 <col:55, line:429:5>
|     `-ReturnStmt 0x557656ff4c98 <line:428:9, col:50>
|       `-CallExpr 0x557656ff4c58 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff4b58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff4bd8 <col:21> 'const char *' lvalue ParmVar 0x557656fce6e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x557656ff4bf8 <col:30> 'const int' lvalue Var 0x557656fcbdb8 'mandatory' 'const int'
|         |-DeclRefExpr 0x557656ff4c18 <col:41> 'P' lvalue ParmVar 0x557656fce760 'parser' 'P'
|         `-DeclRefExpr 0x557656ff4c38 <col:49> 'T' lvalue ParmVar 0x557656fce808 'x' 'T &'
|-FunctionTemplateDecl 0x557656fcedd8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x557656fce9f8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fcea78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557656fced38 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x557656fceb38 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fcebb0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x557656fcec58 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x557656ff4e20 <col:55, line:433:5>
|     `-ReturnStmt 0x557656ff4e10 <line:432:9, col:51>
|       `-CallExpr 0x557656ff4dd0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff4cd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff4d50 <col:21> 'const char *' lvalue ParmVar 0x557656fceb38 'keyword' 'const char *'
|         |-DeclRefExpr 0x557656ff4d70 <col:30> 'const int' lvalue Var 0x557656fcbeb0 'positional' 'const int'
|         |-DeclRefExpr 0x557656ff4d90 <col:42> 'P' lvalue ParmVar 0x557656fcebb0 'parser' 'P'
|         `-DeclRefExpr 0x557656ff4db0 <col:50> 'T' lvalue ParmVar 0x557656fcec58 'x' 'T &'
|-FunctionTemplateDecl 0x557656fcf228 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x557656fcee48 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fceec8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557656fcf188 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x557656fcef88 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fcf000 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x557656fcf0a8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x557656ff5048 <col:56, line:437:5>
|     `-ReturnStmt 0x557656ff5038 <line:436:9, col:63>
|       `-CallExpr 0x557656ff4ff8 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff4e48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff4ec8 <col:21> 'const char *' lvalue ParmVar 0x557656fcef88 'keyword' 'const char *'
|         |-BinaryOperator 0x557656ff4f98 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x557656ff4f48 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x557656ff4f28 <col:30> 'const int' lvalue Var 0x557656fcbdb8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x557656ff4f80 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x557656ff4f60 <col:42> 'const int' lvalue Var 0x557656fcbeb0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x557656ff4fb8 <col:54> 'P' lvalue ParmVar 0x557656fcf000 'parser' 'P'
|         `-DeclRefExpr 0x557656ff4fd8 <col:62> 'T' lvalue ParmVar 0x557656fcf0a8 'x' 'T &'
|-FunctionTemplateDecl 0x557656fcf758 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x557656fcf298 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fcf318 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557656fcf6b8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x557656fcf3d8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fcf458 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x557656fcf4d0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x557656fcf578 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x557656ff51b0 <col:64, line:442:5>
|     |-CallExpr 0x557656ff5130 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x557656ff5060 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x557656ff50a0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x557656ff50b0 <col:30> 'const char *' lvalue ParmVar 0x557656fcf3d8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x557656ff50d0 <col:39> 'int' lvalue ParmVar 0x557656fcf458 'flags' 'int'
|     | |-DeclRefExpr 0x557656ff50f0 <col:46> 'P' lvalue ParmVar 0x557656fcf4d0 'parser' 'P'
|     | `-DeclRefExpr 0x557656ff5110 <col:54> 'T' lvalue ParmVar 0x557656fcf578 'x' 'T &'
|     `-ReturnStmt 0x557656ff51a0 <line:441:9, col:17>
|       `-UnaryOperator 0x557656ff5188 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x557656ff5178 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x557656fcfd58 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x557656fcf7d0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fcf848 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x557656fcf8c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x557656fcfcb8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x557656fcf990 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fcfa08 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x557656fcfaa8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x557656fcfb78 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x557656ff5348 <col:84, line:458:5>
|     `-ReturnStmt 0x557656ff5338 <line:457:9, col:64>
|       `-CallExpr 0x557656ff52f0 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff51e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff5250 <col:28> 'const char *' lvalue ParmVar 0x557656fcf990 'keyword' 'const char *'
|         |-IntegerLiteral 0x557656ff5270 <col:37> 'int' 0
|         |-DeclRefExpr 0x557656ff5290 <col:40> 'P' lvalue ParmVar 0x557656fcfa08 'parser' 'P'
|         |-DeclRefExpr 0x557656ff52b0 <col:48> 'T' lvalue ParmVar 0x557656fcfaa8 'x' 'T &'
|         `-DeclRefExpr 0x557656ff52d0 <col:51> 'const V' lvalue ParmVar 0x557656fcfb78 'default_value' 'const V &'
|-FunctionTemplateDecl 0x557656fd02d8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x557656fcfdd0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fcfe48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x557656fcfec8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x557656fd0238 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x557656fcff90 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd0008 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x557656fd00a8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x557656fd0148 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x557656ff54d8 <col:86, line:462:5>
|     `-ReturnStmt 0x557656ff54c8 <line:461:9, col:73>
|       `-CallExpr 0x557656ff5480 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff5370 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff53e0 <col:28> 'const char *' lvalue ParmVar 0x557656fcff90 'keyword' 'const char *'
|         |-DeclRefExpr 0x557656ff5400 <col:37> 'const int' lvalue Var 0x557656fcbeb0 'positional' 'const int'
|         |-DeclRefExpr 0x557656ff5420 <col:49> 'P' lvalue ParmVar 0x557656fd0008 'parser' 'P'
|         |-DeclRefExpr 0x557656ff5440 <col:57> 'T' lvalue ParmVar 0x557656fd00a8 'x' 'T &'
|         `-DeclRefExpr 0x557656ff5460 <col:60> 'const V' lvalue ParmVar 0x557656fd0148 'default_value' 'const V &'
|-FunctionTemplateDecl 0x557656fd0968 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x557656fd0350 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fd03c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x557656fd0448 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x557656fd08c8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x557656fd0510 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd0590 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x557656fd0608 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x557656fd06a8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x557656fd0778 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x557656ff5668 <col:95, line:467:5>
|     |-CallExpr 0x557656ff55e0 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x557656ff54f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x557656ff5530 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x557656ff5540 <col:37> 'const char *' lvalue ParmVar 0x557656fd0510 'keyword' 'const char *'
|     | |-DeclRefExpr 0x557656ff5560 <col:46> 'int' lvalue ParmVar 0x557656fd0590 'flags' 'int'
|     | |-DeclRefExpr 0x557656ff5580 <col:53> 'P' lvalue ParmVar 0x557656fd0608 'parser' 'P'
|     | |-DeclRefExpr 0x557656ff55a0 <col:61> 'T' lvalue ParmVar 0x557656fd06a8 'x' 'T &'
|     | `-DeclRefExpr 0x557656ff55c0 <col:64> 'const V' lvalue ParmVar 0x557656fd0778 'default_value' 'const V &'
|     `-ReturnStmt 0x557656ff5658 <line:466:9, col:17>
|       `-UnaryOperator 0x557656ff5640 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x557656ff5630 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x557656fd0f48 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x557656fd09e8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fd0a68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x557656fd0ae8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x557656fd0ea8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x557656fd0bb0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd0c28 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x557656fd0cc8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x557656fd0d68 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x557656ff5810 <col:63, line:481:5>
|     `-ReturnStmt 0x557656ff5800 <line:480:9, col:47>
|       `-CallExpr 0x557656ff57b8 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff5698 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff5718 <col:21> 'const char *' lvalue ParmVar 0x557656fd0bb0 'keyword' 'const char *'
|         |-IntegerLiteral 0x557656ff5738 <col:30> 'int' 0
|         |-DeclRefExpr 0x557656ff5758 <col:33> 'P' lvalue ParmVar 0x557656fd0c28 'parser' 'P'
|         |-DeclRefExpr 0x557656ff5778 <col:41> 'T1' lvalue ParmVar 0x557656fd0cc8 'x1' 'T1 &'
|         `-DeclRefExpr 0x557656ff5798 <col:45> 'T2' lvalue ParmVar 0x557656fd0d68 'x2' 'T2 &'
|-FunctionTemplateDecl 0x557656fd14c8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x557656fd0fc0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fd1038 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x557656fd10b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x557656fd1428 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x557656fd1180 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd11f8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x557656fd1298 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x557656fd1338 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x557656ff59b0 <col:65, line:485:5>
|     `-ReturnStmt 0x557656ff59a0 <line:484:9, col:55>
|       `-CallExpr 0x557656ff5958 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff5838 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff58b8 <col:21> 'const char *' lvalue ParmVar 0x557656fd1180 'keyword' 'const char *'
|         |-DeclRefExpr 0x557656ff58d8 <col:30> 'const int' lvalue Var 0x557656fcbdb8 'mandatory' 'const int'
|         |-DeclRefExpr 0x557656ff58f8 <col:41> 'P' lvalue ParmVar 0x557656fd11f8 'parser' 'P'
|         |-DeclRefExpr 0x557656ff5918 <col:49> 'T1' lvalue ParmVar 0x557656fd1298 'x1' 'T1 &'
|         `-DeclRefExpr 0x557656ff5938 <col:53> 'T2' lvalue ParmVar 0x557656fd1338 'x2' 'T2 &'
|-FunctionTemplateDecl 0x557656fd1a48 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x557656fd1540 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fd15b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x557656fd1638 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x557656fd19a8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x557656fd1700 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd1778 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x557656fd1818 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x557656fd18b8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x557656ff5b50 <col:65, line:489:5>
|     `-ReturnStmt 0x557656ff5b40 <line:488:9, col:56>
|       `-CallExpr 0x557656ff5af8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff59d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff5a58 <col:21> 'const char *' lvalue ParmVar 0x557656fd1700 'keyword' 'const char *'
|         |-DeclRefExpr 0x557656ff5a78 <col:30> 'const int' lvalue Var 0x557656fcbeb0 'positional' 'const int'
|         |-DeclRefExpr 0x557656ff5a98 <col:42> 'P' lvalue ParmVar 0x557656fd1778 'parser' 'P'
|         |-DeclRefExpr 0x557656ff5ab8 <col:50> 'T1' lvalue ParmVar 0x557656fd1818 'x1' 'T1 &'
|         `-DeclRefExpr 0x557656ff5ad8 <col:54> 'T2' lvalue ParmVar 0x557656fd18b8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x557656fd1fc8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x557656fd1ac0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fd1b38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x557656fd1bb8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x557656fd1f28 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x557656fd1c80 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd1cf8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x557656fd1d98 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x557656fd1e38 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x557656ff5da0 <col:66, line:493:5>
|     `-ReturnStmt 0x557656ff5d90 <line:492:9, col:68>
|       `-CallExpr 0x557656ff5d48 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff5b78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff5bf8 <col:21> 'const char *' lvalue ParmVar 0x557656fd1c80 'keyword' 'const char *'
|         |-BinaryOperator 0x557656ff5cc8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x557656ff5c78 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x557656ff5c58 <col:30> 'const int' lvalue Var 0x557656fcbdb8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x557656ff5cb0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x557656ff5c90 <col:42> 'const int' lvalue Var 0x557656fcbeb0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x557656ff5ce8 <col:54> 'P' lvalue ParmVar 0x557656fd1cf8 'parser' 'P'
|         |-DeclRefExpr 0x557656ff5d08 <col:62> 'T1' lvalue ParmVar 0x557656fd1d98 'x1' 'T1 &'
|         `-DeclRefExpr 0x557656ff5d28 <col:66> 'T2' lvalue ParmVar 0x557656fd1e38 'x2' 'T2 &'
|-FunctionTemplateDecl 0x557656fd2628 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x557656fd2040 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fd20b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x557656fd2138 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x557656fd2588 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x557656fd2200 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd2280 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x557656fd22f8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x557656fd2398 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x557656fd2438 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x557656ff5f30 <col:74, line:498:5>
|     |-CallExpr 0x557656ff5ea8 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x557656ff5db8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x557656ff5df8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x557656ff5e08 <col:30> 'const char *' lvalue ParmVar 0x557656fd2200 'keyword' 'const char *'
|     | |-DeclRefExpr 0x557656ff5e28 <col:39> 'int' lvalue ParmVar 0x557656fd2280 'flags' 'int'
|     | |-DeclRefExpr 0x557656ff5e48 <col:46> 'P' lvalue ParmVar 0x557656fd22f8 'parser' 'P'
|     | |-DeclRefExpr 0x557656ff5e68 <col:54> 'T1' lvalue ParmVar 0x557656fd2398 'x1' 'T1 &'
|     | `-DeclRefExpr 0x557656ff5e88 <col:58> 'T2' lvalue ParmVar 0x557656fd2438 'x2' 'T2 &'
|     `-ReturnStmt 0x557656ff5f20 <line:497:9, col:17>
|       `-UnaryOperator 0x557656ff5f08 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x557656ff5ef8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x557656fd2988 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x557656fd26a8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x557656fd28e8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x557656fd2760 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd27d8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x557656ff6078 <col:52, line:509:5>
|     `-ReturnStmt 0x557656ff6068 <line:508:9, col:44>
|       `-CallExpr 0x557656ff6030 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff5f60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff5fd0 <col:26> 'const char *' lvalue ParmVar 0x557656fd2760 'keyword' 'const char *'
|         |-IntegerLiteral 0x557656ff5ff0 <col:35> 'int' 0
|         `-DeclRefExpr 0x557656ff6010 <col:38> 'P' lvalue ParmVar 0x557656fd27d8 'parser' 'P'
|-FunctionTemplateDecl 0x557656fd2c88 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x557656fd29f0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x557656fd2be8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x557656fd2aa0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd2b18 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x557656ff61b8 <col:54, line:513:5>
|     `-ReturnStmt 0x557656ff61a8 <line:512:9, col:52>
|       `-CallExpr 0x557656ff6170 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff60a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff6110 <col:26> 'const char *' lvalue ParmVar 0x557656fd2aa0 'keyword' 'const char *'
|         |-DeclRefExpr 0x557656ff6130 <col:35> 'const int' lvalue Var 0x557656fcbdb8 'mandatory' 'const int'
|         `-DeclRefExpr 0x557656ff6150 <col:46> 'P' lvalue ParmVar 0x557656fd2b18 'parser' 'P'
|-FunctionTemplateDecl 0x557656fd2f88 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x557656fd2cf0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x557656fd2ee8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x557656fd2da0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd2e18 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x557656ff62f8 <col:54, line:517:5>
|     `-ReturnStmt 0x557656ff62e8 <line:516:9, col:53>
|       `-CallExpr 0x557656ff62b0 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff61e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff6250 <col:26> 'const char *' lvalue ParmVar 0x557656fd2da0 'keyword' 'const char *'
|         |-DeclRefExpr 0x557656ff6270 <col:35> 'const int' lvalue Var 0x557656fcbeb0 'positional' 'const int'
|         `-DeclRefExpr 0x557656ff6290 <col:47> 'P' lvalue ParmVar 0x557656fd2e18 'parser' 'P'
|-FunctionTemplateDecl 0x557656fd3288 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x557656fd2ff0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x557656fd31e8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x557656fd30a0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd3118 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x557656ff7be8 <col:55, line:521:5>
|     `-ReturnStmt 0x557656ff7bd8 <line:520:9, col:65>
|       `-CallExpr 0x557656ff7ba0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff7a20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff7a90 <col:26> 'const char *' lvalue ParmVar 0x557656fd30a0 'keyword' 'const char *'
|         |-BinaryOperator 0x557656ff7b60 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x557656ff7b10 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x557656ff7af0 <col:35> 'const int' lvalue Var 0x557656fcbdb8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x557656ff7b48 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x557656ff7b28 <col:47> 'const int' lvalue Var 0x557656fcbeb0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x557656ff7b80 <col:59> 'P' lvalue ParmVar 0x557656fd3118 'parser' 'P'
|-FunctionTemplateDecl 0x557656fd3658 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x557656fd32f0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x557656fd35b8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x557656fd33a0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd3420 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x557656fd3498 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x557656ff7d28 <col:63, line:526:5>
|     |-CallExpr 0x557656ff7cb0 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x557656ff7c00 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x557656ff7c40 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x557656ff7c50 <col:35> 'const char *' lvalue ParmVar 0x557656fd33a0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x557656ff7c70 <col:44> 'int' lvalue ParmVar 0x557656fd3420 'flags' 'int'
|     | `-DeclRefExpr 0x557656ff7c90 <col:51> 'P' lvalue ParmVar 0x557656fd3498 'parser' 'P'
|     `-ReturnStmt 0x557656ff7d18 <line:525:9, col:17>
|       `-UnaryOperator 0x557656ff7d00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x557656ff7cf0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x557656fd3aa8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x557656fd36c8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fd3748 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557656fd3a08 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x557656fd3808 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd3880 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x557656fd3928 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x557656ff7e80 <col:58, line:541:5>
|     `-ReturnStmt 0x557656ff7e70 <line:540:9, col:39>
|       `-CallExpr 0x557656ff7e38 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff7d58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff7dd8 <col:21> 'const char *' lvalue ParmVar 0x557656fd3808 'keyword' 'const char *'
|         |-DeclRefExpr 0x557656ff7df8 <col:30> 'P' lvalue ParmVar 0x557656fd3880 'parser' 'P'
|         `-DeclRefExpr 0x557656ff7e18 <col:38> 'T' lvalue ParmVar 0x557656fd3928 'x' 'T &'
|-FunctionTemplateDecl 0x557656fd3ef8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x557656fd3b18 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fd3b98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557656fd3e58 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x557656fd3c58 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd3cd0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x557656fd3d78 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x557656ff7fb8 <col:60, line:545:5>
|     `-ReturnStmt 0x557656ff7fa8 <line:544:9, col:41>
|       `-CallExpr 0x557656ff7f70 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff7ea8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff7f10 <col:23> 'const char *' lvalue ParmVar 0x557656fd3c58 'keyword' 'const char *'
|         |-DeclRefExpr 0x557656ff7f30 <col:32> 'P' lvalue ParmVar 0x557656fd3cd0 'parser' 'P'
|         `-DeclRefExpr 0x557656ff7f50 <col:40> 'T' lvalue ParmVar 0x557656fd3d78 'x' 'T &'
|-FunctionTemplateDecl 0x557656fd4348 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x557656fd3f68 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fd3fe8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557656fd42a8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x557656fd40a8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd4120 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x557656fd41c8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x557656ff80f0 <col:60, line:549:5>
|     `-ReturnStmt 0x557656ff80e0 <line:548:9, col:41>
|       `-CallExpr 0x557656ff80a8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff7fe0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff8048 <col:23> 'const char *' lvalue ParmVar 0x557656fd40a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x557656ff8068 <col:32> 'P' lvalue ParmVar 0x557656fd4120 'parser' 'P'
|         `-DeclRefExpr 0x557656ff8088 <col:40> 'T' lvalue ParmVar 0x557656fd41c8 'x' 'T &'
|-FunctionTemplateDecl 0x557656fd47f0 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x557656fd43b8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fd4438 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557656fd4750 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x557656fd44f8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd4570 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x557656fd4618 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x557656ff8228 <col:61, line:553:5>
|     `-ReturnStmt 0x557656ff8218 <line:552:9, col:42>
|       `-CallExpr 0x557656ff81e0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff8118 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff8180 <col:24> 'const char *' lvalue ParmVar 0x557656fd44f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x557656ff81a0 <col:33> 'P' lvalue ParmVar 0x557656fd4570 'parser' 'P'
|         `-DeclRefExpr 0x557656ff81c0 <col:41> 'T' lvalue ParmVar 0x557656fd4618 'x' 'T &'
|-FunctionTemplateDecl 0x557656fd4cc8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x557656fd4860 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fd48d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557656fd4c28 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x557656fd4998 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd4a18 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x557656fd4a90 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x557656fd4b38 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x557656ff83a0 <col:69, line:557:5>
|     `-ReturnStmt 0x557656ff8390 <line:556:9, col:46>
|       `-CallExpr 0x557656ff8350 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff8250 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff82d0 <col:21> 'const char *' lvalue ParmVar 0x557656fd4998 'keyword' 'const char *'
|         |-DeclRefExpr 0x557656ff82f0 <col:30> 'int' lvalue ParmVar 0x557656fd4a18 'flags' 'int'
|         |-DeclRefExpr 0x557656ff8310 <col:37> 'P' lvalue ParmVar 0x557656fd4a90 'parser' 'P'
|         `-DeclRefExpr 0x557656ff8330 <col:45> 'T' lvalue ParmVar 0x557656fd4b38 'x' 'T &'
|-FunctionTemplateDecl 0x557656fd4fd8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x557656fd4d40 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x557656fd4f38 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x557656fd4df0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd4e68 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x557656ff84e0 <col:56, line:571:5>
|     `-ReturnStmt 0x557656ff84d0 <line:570:9, col:48>
|       `-CallExpr 0x557656ff8498 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff83c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff8438 <col:30> 'const char *' lvalue ParmVar 0x557656fd4df0 'keyword' 'const char *'
|         |-IntegerLiteral 0x557656ff8458 <col:39> 'int' 0
|         `-DeclRefExpr 0x557656ff8478 <col:42> 'P' lvalue ParmVar 0x557656fd4e68 'parser' 'P'
|-FunctionTemplateDecl 0x557656fd5368 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x557656fd5040 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x557656fd52c8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x557656fd50f0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd5170 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x557656fd51e8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x557656ff86b0 <col:67, line:576:5>
|     |-CallExpr 0x557656ff8638 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x557656ff84f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x557656ff8538 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x557656ff8548 <col:39> 'const char *' lvalue ParmVar 0x557656fd50f0 'keyword' 'const char *'
|     | |-BinaryOperator 0x557656ff85f8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x557656ff85a8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x557656ff8568 <col:48> 'int' lvalue ParmVar 0x557656fd5170 'flags' 'int'
|     | | `-ImplicitCastExpr 0x557656ff85e0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x557656ff85c0 <col:56> 'const int' lvalue Var 0x557656fcc0a0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x557656ff8618 <col:68> 'P' lvalue ParmVar 0x557656fd51e8 'parser' 'P'
|     `-ReturnStmt 0x557656ff86a0 <line:575:9, col:17>
|       `-UnaryOperator 0x557656ff8688 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x557656ff8678 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x557656fd57b8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x557656fd53d8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fd5458 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557656fd5718 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x557656fd5518 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd5590 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x557656fd5638 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x557656ff8820 <col:62, line:592:5>
|     `-ReturnStmt 0x557656ff8810 <line:591:9, col:51>
|       `-CallExpr 0x557656ff87d0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff86e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff8750 <col:30> 'const char *' lvalue ParmVar 0x557656fd5518 'keyword' 'const char *'
|         |-IntegerLiteral 0x557656ff8770 <col:39> 'int' 0
|         |-DeclRefExpr 0x557656ff8790 <col:42> 'P' lvalue ParmVar 0x557656fd5590 'parser' 'P'
|         `-DeclRefExpr 0x557656ff87b0 <col:50> 'T' lvalue ParmVar 0x557656fd5638 'x' 'T &'
|-FunctionTemplateDecl 0x557656fd5c98 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x557656fd5828 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fd58a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557656fd5bf8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x557656fd5968 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd59e8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x557656fd5a60 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x557656fd5b08 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x557656ff8a18 <col:73, line:597:5>
|     |-CallExpr 0x557656ff8998 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x557656ff8838 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x557656ff8878 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x557656ff8888 <col:39> 'const char *' lvalue ParmVar 0x557656fd5968 'keyword' 'const char *'
|     | |-BinaryOperator 0x557656ff8938 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x557656ff88e8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x557656ff88a8 <col:48> 'int' lvalue ParmVar 0x557656fd59e8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x557656ff8920 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x557656ff8900 <col:56> 'const int' lvalue Var 0x557656fcc0a0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x557656ff8958 <col:68> 'P' lvalue ParmVar 0x557656fd5a60 'parser' 'P'
|     | `-DeclRefExpr 0x557656ff8978 <col:76> 'T' lvalue ParmVar 0x557656fd5b08 'x' 'T &'
|     `-ReturnStmt 0x557656ff8a08 <line:596:9, col:17>
|       `-UnaryOperator 0x557656ff89f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x557656ff89e0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x557656fd6248 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x557656fd5d10 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fd5d88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557656fd61a8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x557656fd5e48 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd5ec0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x557656fd6080 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x557656ff8b88 <col:65, line:614:5>
|     `-ReturnStmt 0x557656ff8b78 <line:613:9, col:46>
|       `-CallExpr 0x557656ff8b38 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff8a48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff8ab8 <col:25> 'const char *' lvalue ParmVar 0x557656fd5e48 'keyword' 'const char *'
|         |-IntegerLiteral 0x557656ff8ad8 <col:34> 'int' 0
|         |-DeclRefExpr 0x557656ff8af8 <col:37> 'P' lvalue ParmVar 0x557656fd5ec0 'parser' 'P'
|         `-DeclRefExpr 0x557656ff8b18 <col:45> 'Vector<T>' lvalue ParmVar 0x557656fd6080 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x557656fd6678 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x557656fd62b8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x557656fd65d8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x557656fd6370 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd64c0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x557656ff8da0 <col:55, line:618:5>
|     `-ReturnStmt 0x557656ff8d90 <line:617:9, col:55>
|       `-CallExpr 0x557656ff8d50 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff8bb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff8c20 <col:25> 'const char *' lvalue ParmVar 0x557656fd6370 'keyword' 'const char *'
|         |-IntegerLiteral 0x557656ff8c40 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x557656ff8d10 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x557656ff8d30 <col:54> 'Vector<T>' lvalue ParmVar 0x557656fd64c0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x557656fd6c48 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x557656fd66e0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fd6758 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557656fd6ba8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x557656fd6818 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd6898 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x557656fd6910 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x557656fd6a60 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x557656ff8f98 <col:76, line:623:5>
|     |-CallExpr 0x557656ff8f18 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x557656ff8db8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x557656ff8df8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x557656ff8e08 <col:34> 'const char *' lvalue ParmVar 0x557656fd6818 'keyword' 'const char *'
|     | |-BinaryOperator 0x557656ff8eb8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x557656ff8e68 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x557656ff8e28 <col:43> 'int' lvalue ParmVar 0x557656fd6898 'flags' 'int'
|     | | `-ImplicitCastExpr 0x557656ff8ea0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x557656ff8e80 <col:51> 'const int' lvalue Var 0x557656fcc0a0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x557656ff8ed8 <col:63> 'P' lvalue ParmVar 0x557656fd6910 'parser' 'P'
|     | `-DeclRefExpr 0x557656ff8ef8 <col:71> 'Vector<T>' lvalue ParmVar 0x557656fd6a60 'x' 'Vector<T> &'
|     `-ReturnStmt 0x557656ff8f88 <line:622:9, col:17>
|       `-UnaryOperator 0x557656ff8f70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x557656ff8f60 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x557656fd7188 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x557656fd6cc0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fd6d38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557656fd70e8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x557656fd6df8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd6e78 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x557656fd6fc0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x557656ff9200 <col:66, line:627:5>
|     `-ReturnStmt 0x557656ff91f0 <line:626:9, col:59>
|       `-CallExpr 0x557656ff91b0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557656ff8fc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557656ff9038 <col:25> 'const char *' lvalue ParmVar 0x557656fd6df8 'keyword' 'const char *'
|         |-DeclRefExpr 0x557656ff9058 <col:34> 'int' lvalue ParmVar 0x557656fd6e78 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x557656ff9170 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x557656ff9190 <col:58> 'Vector<T>' lvalue ParmVar 0x557656fd6fc0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x557656fd7218 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x557656ff9280 <col:25, line:633:5>
|   `-ReturnStmt 0x557656ff9270 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x557656ff9258 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x557656ff9228 <col:16> 'const bool' lvalue ->_status 0x557656fe3068
|         `-CXXThisExpr 0x557656ff9218 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x557656fd73c8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x557656fd7300 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x557656ff9368 <col:27, line:639:5>
|   |-BinaryOperator 0x557656ff9310 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x557656ff9298 <col:9> 'bool' lvalue ParmVar 0x557656fd7300 'x' 'bool &'
|   | `-ImplicitCastExpr 0x557656ff92f8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x557656ff92c8 <col:13> 'bool' lvalue ->_status 0x557656fe3068
|   |     `-CXXThisExpr 0x557656ff92b8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x557656ff9358 <line:638:9, col:17>
|     `-UnaryOperator 0x557656ff9340 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x557656ff9330 <col:17> 'Args *' this
|-CXXMethodDecl 0x557656fd7548 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x557656fd7488 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x557656ff9458 <col:39, line:644:5>
|   |-BinaryOperator 0x557656ff9400 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x557656ff9388 <col:9> 'bool' lvalue ParmVar 0x557656fd7488 'x' 'bool &'
|   | `-ImplicitCastExpr 0x557656ff93e8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x557656ff93b8 <col:13> 'const bool' lvalue ->_status 0x557656fe3068
|   |     `-CXXThisExpr 0x557656ff93a8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x557656ff9448 <line:643:9, col:17>
|     `-UnaryOperator 0x557656ff9430 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x557656ff9420 <col:17> 'const Args *' this
|-CXXMethodDecl 0x557656fd7610 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x557656ff9500 <col:30, line:651:5>
|   `-ReturnStmt 0x557656ff94f0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x557656ff94d8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x557656ff94a8 <col:16> 'bool' lvalue ->_read_status 0x557656fc4928
|         `-ImplicitCastExpr 0x557656ff9488 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x557656ff9478 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x557656fd7758 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x557656fd76c8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x557656ff9608 <col:32, line:658:5>
|   |-BinaryOperator 0x557656ff95b0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x557656ff9518 <col:9> 'bool' lvalue ParmVar 0x557656fd76c8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x557656ff9598 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x557656ff9568 <col:13> 'bool' lvalue ->_read_status 0x557656fc4928
|   |     `-ImplicitCastExpr 0x557656ff9548 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x557656ff9538 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x557656ff95f8 <line:657:9, col:17>
|     `-UnaryOperator 0x557656ff95e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x557656ff95d0 <col:17> 'Args *' this
|-CXXMethodDecl 0x557656fd78a8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x557656fd7818 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x557656ff9718 <col:44, line:663:5>
|   |-BinaryOperator 0x557656ff96c0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x557656ff9628 <col:9> 'bool' lvalue ParmVar 0x557656fd7818 'x' 'bool &'
|   | `-ImplicitCastExpr 0x557656ff96a8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x557656ff9678 <col:13> 'bool' lvalue ->_read_status 0x557656fc4928
|   |     `-ImplicitCastExpr 0x557656ff9658 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x557656ff9648 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x557656ff9708 <line:662:9, col:17>
|     `-UnaryOperator 0x557656ff96f0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x557656ff96e0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x557656fd7970 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x557656fd7a38 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x557656fd7b00 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x557656fd7bc8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x557656fd7ed8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x557656fd7c68 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x557656fd7e38 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x557656fd7d48 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x557656ff9a70 <col:19, line:706:5>
|     `-IfStmt 0x557656ff9a48 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x557656ff9818 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x557656ff9978 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x557656ff9948 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x557656ff9908 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x557656ff9870 <col:42> '<bound member function type>' ->simple_slot 0x557656ff2e30
|       |     | `-CXXThisExpr 0x557656ff9860 <col:42> 'Args *' implicit this
|       |     |-UnaryOperator 0x557656ff98c0 <col:54, col:55> '<dependent type>' prefix '&' cannot overflow
|       |     | `-DeclRefExpr 0x557656ff98a0 <col:55> 'T' lvalue ParmVar 0x557656fd7d48 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x557656ff98e8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x557656ff9a38 <line:705:13, col:34>
|         `-CallExpr 0x557656ff9a10 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x557656ff9998 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x557656ff99f0 <col:33> 'T' lvalue ParmVar 0x557656fd7d48 'x' 'T &'
|-FunctionTemplateDecl 0x557656fd81a8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x557656fd7f38 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x557656fd8108 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x557656fd8018 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x557656ff9e50 <col:31, line:717:5>
|     |-DeclStmt 0x557656ff9bb0 <line:713:9, col:23>
|     | `-VarDecl 0x557656ff9a98 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x557656ff9b88 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x557656ff9b10 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x557656ff9b68 <col:21> 'T' lvalue ParmVar 0x557656fd8018 'x' 'T &'
|     |-IfStmt 0x557656ff9e00 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x557656ff9ca8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x557656ff9de0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x557656ff9d80 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x557656ff9d10 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x557656e7d388 0x557656e7cfa8 0x557656e7cbd8 0x557656e7c7f8 0x557656e7c418 0x557656e7c048
|     |   | `-DeclRefExpr 0x557656ff9cf0 <col:14> 'T *' lvalue Var 0x557656ff9a98 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x557656ff9dc0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x557656ff9e38 <line:716:9, col:16>
|       `-DeclRefExpr 0x557656ff9e18 <col:16> 'T *' lvalue Var 0x557656ff9a98 's' 'T *'
|-FunctionTemplateDecl 0x557656fd85b8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x557656fd8208 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x557656fd8288 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x557656fd8518 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x557656fd8368 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x557656fd8408 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x557656ffa160 <col:37, line:726:5>
|     |-IfStmt 0x557656ffa0f0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x557656ffa110 <line:723:13, col:26>
|     | | `-VarDecl 0x557656ff9eb8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x557656ff9fa8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x557656ff9f30 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x557656ff9f88 <col:25> 'T' lvalue ParmVar 0x557656fd8368 'x' 'T &'
|     | |-DeclRefExpr 0x557656ff9fd0 <col:16> 'T *' lvalue Var 0x557656ff9eb8 's' 'T *'
|     | `-BinaryOperator 0x557656ffa0d0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x557656ffa080 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x557656ffa010 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x557656e7d388 0x557656e7cfa8 0x557656e7cbd8 0x557656e7c7f8 0x557656e7c418 0x557656e7c048
|     |   | `-DeclRefExpr 0x557656ff9ff0 <col:14> 'T *' lvalue Var 0x557656ff9eb8 's' 'T *'
|     |   `-DeclRefExpr 0x557656ffa0b0 <col:18> 'const V' lvalue ParmVar 0x557656fd8408 'value' 'const V &'
|     `-ReturnStmt 0x557656ffa150 <line:725:9, col:17>
|       `-UnaryOperator 0x557656ffa138 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x557656ffa128 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x557656fd89c8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x557656fd8620 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x557656fd8928 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x557656fd86d0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd8760 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x557656fd8808 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x557656ffaf80 <col:65, line:737:5>
|     |-DeclStmt 0x557656ffa1f8 <line:732:9, col:26>
|     | `-VarDecl 0x557656ffa190 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x557656ffaf48 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x557656ffaf68 <line:733:13, col:58>
|       | `-VarDecl 0x557656ffa220 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x557656ffa400 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x557656ffa3d0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x557656ffa3b8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x557656ffa398 <col:26, col:58> 'String' (CXXTemporary 0x557656ffa398)
|       |           `-CXXMemberCallExpr 0x557656ffa328 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x557656ffa298 <col:26> '<bound member function type>' ->find 0x557656ff2448
|       |             | `-CXXThisExpr 0x557656ffa288 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x557656ffa360 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x557656ffa2c8 <col:31> 'const char *' lvalue ParmVar 0x557656fd86d0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x557656ffa378 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x557656ffa2e8 <col:40> 'int' lvalue ParmVar 0x557656fd8760 'flags' 'int'
|       |             `-DeclRefExpr 0x557656ffa308 <col:47> 'Args::Slot *' lvalue Var 0x557656ffa190 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x557656ffa4b8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x557656ffa4a0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x557656ffa480 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x557656ffa450 <col:20> '<bound member function type>' .operator int (String::*)() const 0x557656da91d8
|       |       `-ImplicitCastExpr 0x557656ffa438 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x557656ffa418 <col:20> 'String' lvalue Var 0x557656ffa220 'str' 'String'
|       `-CompoundStmt 0x557656ffaf28 <col:61, line:736:9>
|         |-DeclStmt 0x557656ffa970 <line:734:13, col:76>
|         | `-VarDecl 0x557656ffa508 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x557656ffa940 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x557656ffa8b0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x557656ffa8f8 <col:60> 'T' lvalue ParmVar 0x557656fd8808 'variable' 'T &'
|         |     `-UnaryOperator 0x557656ffa928 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x557656ffa918 <col:71> 'Args *' this
|         `-CallExpr 0x557656ffaef8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x557656ffa998 <col:13> '<bound member function type>' ->postparse 0x557656ff2658
|           | `-CXXThisExpr 0x557656ffa988 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x557656ffaeb8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x557656ffa9c8 <col:23> 'T *' lvalue Var 0x557656ffa508 's' 'T *'
|           | `-CallExpr 0x557656ffae78 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x557656ffac50 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x557656ffad50 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x557656ffad70 <col:86> 'String' lvalue Var 0x557656ffa220 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x557656ffae20 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x557656ffadb0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x557656e7d388 0x557656e7cfa8 0x557656e7cbd8 0x557656e7c7f8 0x557656e7c418 0x557656e7c048
|           |   | `-DeclRefExpr 0x557656ffad90 <col:92> 'T *' lvalue Var 0x557656ffa508 's' 'T *'
|           |   `-UnaryOperator 0x557656ffae60 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x557656ffae50 <col:96> 'Args *' this
|           `-DeclRefExpr 0x557656ffaed8 <col:103> 'Args::Slot *' lvalue Var 0x557656ffa190 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x557656fd8f18 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x557656fd8a38 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x557656fd8ab8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x557656fd8e78 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x557656fd8b78 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd8bf8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x557656fd8c98 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x557656fd8d38 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x557656ffe240 <col:88, line:745:5>
|     |-DeclStmt 0x557656ffb018 <line:741:9, col:26>
|     | `-VarDecl 0x557656ffafb0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x557656ffb238 <line:742:9, col:55>
|     | `-VarDecl 0x557656ffb040 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x557656ffb220 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x557656ffb1f0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x557656ffb1d8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x557656ffb1b8 <col:22, col:54> 'String' (CXXTemporary 0x557656ffb1b8)
|     |           `-CXXMemberCallExpr 0x557656ffb148 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x557656ffb0b8 <col:22> '<bound member function type>' ->find 0x557656ff2448
|     |             | `-CXXThisExpr 0x557656ffb0a8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x557656ffb180 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x557656ffb0e8 <col:27> 'const char *' lvalue ParmVar 0x557656fd8b78 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x557656ffb198 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x557656ffb108 <col:36> 'int' lvalue ParmVar 0x557656fd8bf8 'flags' 'int'
|     |             `-DeclRefExpr 0x557656ffb128 <col:43> 'Args::Slot *' lvalue Var 0x557656ffafb0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x557656ffb610 <line:743:9, col:72>
|     | `-VarDecl 0x557656ffb288 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x557656ffb5e0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x557656ffb550 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x557656ffb598 <col:56> 'T' lvalue ParmVar 0x557656fd8c98 'variable' 'T &'
|     |     `-UnaryOperator 0x557656ffb5c8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x557656ffb5b8 <col:67> 'Args *' this
|     `-CallExpr 0x557656ffe210 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x557656ffb638 <col:9> '<bound member function type>' ->postparse 0x557656ff2658
|       | `-CXXThisExpr 0x557656ffb628 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x557656ffe1d0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x557656ffb668 <col:19> 'T *' lvalue Var 0x557656ffb288 's' 'T *'
|       | `-ParenExpr 0x557656ffe1b0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x557656ffe180 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x557656ffe168 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x557656ffe150 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x557656ffe130 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x557656ffe100 <col:25> '<bound member function type>' .operator int (String::*)() const 0x557656da91d8
|       |     |       `-ImplicitCastExpr 0x557656ffe0e8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x557656ffb688 <col:25> 'String' lvalue Var 0x557656ffb040 'str' 'String'
|       |     |-CallExpr 0x557656ffdf58 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x557656ffb910 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x557656ffde30 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x557656ffde50 <col:89> 'String' lvalue Var 0x557656ffb040 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x557656ffdf00 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x557656ffde90 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x557656e7d388 0x557656e7cfa8 0x557656e7cbd8 0x557656e7c7f8 0x557656e7c418 0x557656e7c048
|       |     | | `-DeclRefExpr 0x557656ffde70 <col:95> 'T *' lvalue Var 0x557656ffb288 's' 'T *'
|       |     | `-UnaryOperator 0x557656ffdf40 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x557656ffdf30 <col:99> 'Args *' this
|       |     `-ParenExpr 0x557656ffe0c8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x557656ffe0a8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x557656ffe078 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x557656ffe028 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x557656ffdfb8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x557656e7d388 0x557656e7cfa8 0x557656e7cbd8 0x557656e7c7f8 0x557656e7c418 0x557656e7c048
|       |         | | `-DeclRefExpr 0x557656ffdf98 <col:109> 'T *' lvalue Var 0x557656ffb288 's' 'T *'
|       |         | `-DeclRefExpr 0x557656ffe058 <col:113> 'const V' lvalue ParmVar 0x557656fd8d38 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x557656ffe098 <col:120> 'bool' true
|       `-DeclRefExpr 0x557656ffe1f0 <col:128> 'Args::Slot *' lvalue Var 0x557656ffafb0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x557656fd9448 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x557656fd8f90 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fd9008 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557656fd93a8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x557656fd90c8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd9148 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x557656fd91c0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x557656fd9268 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x557656ffee38 <col:75, line:754:5>
|     |-DeclStmt 0x557656ffe2e8 <line:749:9, col:26>
|     | `-VarDecl 0x557656ffe280 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x557656ffee00 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x557656ffee20 <line:750:13, col:58>
|       | `-VarDecl 0x557656ffe310 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x557656ffe4f0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x557656ffe4c0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x557656ffe4a8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x557656ffe488 <col:26, col:58> 'String' (CXXTemporary 0x557656ffe488)
|       |           `-CXXMemberCallExpr 0x557656ffe418 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x557656ffe388 <col:26> '<bound member function type>' ->find 0x557656ff2448
|       |             | `-CXXThisExpr 0x557656ffe378 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x557656ffe450 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x557656ffe3b8 <col:31> 'const char *' lvalue ParmVar 0x557656fd90c8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x557656ffe468 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x557656ffe3d8 <col:40> 'int' lvalue ParmVar 0x557656fd9148 'flags' 'int'
|       |             `-DeclRefExpr 0x557656ffe3f8 <col:47> 'Args::Slot *' lvalue Var 0x557656ffe280 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x557656ffe5a8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x557656ffe590 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x557656ffe570 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x557656ffe540 <col:20> '<bound member function type>' .operator int (String::*)() const 0x557656da91d8
|       |       `-ImplicitCastExpr 0x557656ffe528 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x557656ffe508 <col:20> 'String' lvalue Var 0x557656ffe310 'str' 'String'
|       `-CompoundStmt 0x557656ffede0 <col:61, line:753:9>
|         |-DeclStmt 0x557656ffe980 <line:751:13, col:63>
|         | `-VarDecl 0x557656ffe5f8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x557656ffe950 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x557656ffe8c0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x557656ffe908 <col:47> 'T' lvalue ParmVar 0x557656fd9268 'variable' 'T &'
|         |     `-UnaryOperator 0x557656ffe938 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x557656ffe928 <col:58> 'Args *' this
|         `-CallExpr 0x557656ffedb0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x557656ffe9a8 <col:13> '<bound member function type>' ->postparse 0x557656ff2658
|           | `-CXXThisExpr 0x557656ffe998 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x557656ffed70 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x557656ffe9d8 <col:23> 'T *' lvalue Var 0x557656ffe5f8 's' 'T *'
|           | `-CallExpr 0x557656ffed30 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x557656ffebc0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x557656ffec08 <col:56> 'P' lvalue ParmVar 0x557656fd91c0 'parser' 'P'
|           |   |-DeclRefExpr 0x557656ffec28 <col:64> 'String' lvalue Var 0x557656ffe310 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x557656ffecd8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x557656ffec68 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x557656e7d388 0x557656e7cfa8 0x557656e7cbd8 0x557656e7c7f8 0x557656e7c418 0x557656e7c048
|           |   | `-DeclRefExpr 0x557656ffec48 <col:70> 'T *' lvalue Var 0x557656ffe5f8 's' 'T *'
|           |   `-UnaryOperator 0x557656ffed18 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x557656ffed08 <col:74> 'Args *' this
|           `-DeclRefExpr 0x557656ffed90 <col:81> 'Args::Slot *' lvalue Var 0x557656ffe280 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x557656fd9aa8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x557656fd94c0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x557656fd9538 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x557656fd95b8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x557656fd9a08 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x557656fd9680 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd9700 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x557656fd9778 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x557656fd9818 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x557656fd98b8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x557656fffbc8 <col:98, line:762:5>
|     |-DeclStmt 0x557656ffeed0 <line:758:9, col:26>
|     | `-VarDecl 0x557656ffee68 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x557656fff0f0 <line:759:9, col:55>
|     | `-VarDecl 0x557656ffeef8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x557656fff0d8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x557656fff0a8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x557656fff090 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x557656fff070 <col:22, col:54> 'String' (CXXTemporary 0x557656fff070)
|     |           `-CXXMemberCallExpr 0x557656fff000 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x557656ffef70 <col:22> '<bound member function type>' ->find 0x557656ff2448
|     |             | `-CXXThisExpr 0x557656ffef60 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x557656fff038 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x557656ffefa0 <col:27> 'const char *' lvalue ParmVar 0x557656fd9680 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x557656fff050 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x557656ffefc0 <col:36> 'int' lvalue ParmVar 0x557656fd9700 'flags' 'int'
|     |             `-DeclRefExpr 0x557656ffefe0 <col:43> 'Args::Slot *' lvalue Var 0x557656ffee68 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x557656fff510 <line:760:9, col:59>
|     | `-VarDecl 0x557656fff148 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x557656fff4e0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x557656fff450 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x557656fff498 <col:43> 'T' lvalue ParmVar 0x557656fd9818 'variable' 'T &'
|     |     `-UnaryOperator 0x557656fff4c8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x557656fff4b8 <col:54> 'Args *' this
|     `-CallExpr 0x557656fffb98 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x557656fff538 <col:9> '<bound member function type>' ->postparse 0x557656ff2658
|       | `-CXXThisExpr 0x557656fff528 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x557656fffb58 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x557656fff568 <col:19> 'T *' lvalue Var 0x557656fff148 's' 'T *'
|       | `-ParenExpr 0x557656fffb38 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x557656fffb08 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x557656fffaf0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x557656fffad8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x557656fffab8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x557656fffa88 <col:25> '<bound member function type>' .operator int (String::*)() const 0x557656da91d8
|       |     |       `-ImplicitCastExpr 0x557656fffa70 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x557656fff588 <col:25> 'String' lvalue Var 0x557656ffeef8 'str' 'String'
|       |     |-CallExpr 0x557656fff8e0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x557656fff770 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x557656fff7b8 <col:59> 'P' lvalue ParmVar 0x557656fd9778 'parser' 'P'
|       |     | |-DeclRefExpr 0x557656fff7d8 <col:67> 'String' lvalue Var 0x557656ffeef8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x557656fff888 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x557656fff818 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x557656e7d388 0x557656e7cfa8 0x557656e7cbd8 0x557656e7c7f8 0x557656e7c418 0x557656e7c048
|       |     | | `-DeclRefExpr 0x557656fff7f8 <col:73> 'T *' lvalue Var 0x557656fff148 's' 'T *'
|       |     | `-UnaryOperator 0x557656fff8c8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x557656fff8b8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x557656fffa50 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x557656fffa30 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x557656fffa00 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x557656fff9b0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x557656fff940 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x557656e7d388 0x557656e7cfa8 0x557656e7cbd8 0x557656e7c7f8 0x557656e7c418 0x557656e7c048
|       |         | | `-DeclRefExpr 0x557656fff920 <col:87> 'T *' lvalue Var 0x557656fff148 's' 'T *'
|       |         | `-DeclRefExpr 0x557656fff9e0 <col:91> 'const V' lvalue ParmVar 0x557656fd98b8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x557656fffa20 <col:98> 'bool' true
|       `-DeclRefExpr 0x557656fffb78 <col:106> 'Args::Slot *' lvalue Var 0x557656ffee68 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x557656fda118 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x557656fd9b28 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fd9ba8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x557656fd9c28 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x557656fda078 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x557656fd9cf0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fd9d70 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x557656fd9de8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x557656fd9e88 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x557656fd9f28 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x557657000ba8 <col:60, line:773:5>
|     |-DeclStmt 0x557656fffc70 <line:767:9, col:26>
|     | `-VarDecl 0x557656fffc08 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x557657000b70 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x557657000b90 <line:768:13, col:58>
|       | `-VarDecl 0x557656fffc98 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x557656fffe78 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x557656fffe48 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x557656fffe30 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x557656fffe10 <col:26, col:58> 'String' (CXXTemporary 0x557656fffe10)
|       |           `-CXXMemberCallExpr 0x557656fffda0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x557656fffd10 <col:26> '<bound member function type>' ->find 0x557656ff2448
|       |             | `-CXXThisExpr 0x557656fffd00 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x557656fffdd8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x557656fffd40 <col:31> 'const char *' lvalue ParmVar 0x557656fd9cf0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x557656fffdf0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x557656fffd60 <col:40> 'int' lvalue ParmVar 0x557656fd9d70 'flags' 'int'
|       |             `-DeclRefExpr 0x557656fffd80 <col:47> 'Args::Slot *' lvalue Var 0x557656fffc08 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x557656ffff30 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x557656ffff18 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x557656fffef8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x557656fffec8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x557656da91d8
|       |       `-ImplicitCastExpr 0x557656fffeb0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x557656fffe90 <col:20> 'String' lvalue Var 0x557656fffc98 'str' 'String'
|       `-CompoundStmt 0x557657000b48 <col:61, line:772:9>
|         |-DeclStmt 0x557657000270 <line:769:13, col:66>
|         | `-VarDecl 0x557656ffff88 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x557657000240 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5576570001b0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5576570001f8 <col:49> 'T1' lvalue ParmVar 0x557656fd9e88 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x557657000228 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x557657000218 <col:61> 'Args *' this
|         |-DeclStmt 0x5576570005e0 <line:770:13, col:66>
|         | `-VarDecl 0x5576570002f8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5576570005b0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x557657000520 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x557657000568 <col:49> 'T2' lvalue ParmVar 0x557656fd9f28 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x557657000598 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x557657000588 <col:61> 'Args *' this
|         `-CallExpr 0x557657000b18 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x557657000608 <col:13> '<bound member function type>' ->postparse 0x557656ff2658
|           | `-CXXThisExpr 0x5576570005f8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x557657000ad8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x557657000678 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x557657000638 <col:23> 'T1 *' lvalue Var 0x557656ffff88 's1' 'T1 *'
|           | | `-DeclRefExpr 0x557657000658 <col:29> 'T2 *' lvalue Var 0x5576570002f8 's2' 'T2 *'
|           | `-CallExpr 0x557657000a90 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x557657000860 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5576570008a8 <col:63> 'P' lvalue ParmVar 0x557656fd9de8 'parser' 'P'
|           |   |-DeclRefExpr 0x5576570008c8 <col:71> 'String' lvalue Var 0x557656fffc98 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x557657000978 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x557657000908 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x557656e7d388 0x557656e7cfa8 0x557656e7cbd8 0x557656e7c7f8 0x557656e7c418 0x557656e7c048
|           |   | `-DeclRefExpr 0x5576570008e8 <col:77> 'T1 *' lvalue Var 0x557656ffff88 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x557657000a38 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5576570009c8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x557656e7d388 0x557656e7cfa8 0x557656e7cbd8 0x557656e7c7f8 0x557656e7c418 0x557656e7c048
|           |   | `-DeclRefExpr 0x5576570009a8 <col:82> 'T2 *' lvalue Var 0x5576570002f8 's2' 'T2 *'
|           |   `-UnaryOperator 0x557657000a78 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x557657000a68 <col:87> 'Args *' this
|           `-DeclRefExpr 0x557657000af8 <col:94> 'Args::Slot *' lvalue Var 0x557656fffc08 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x557656fda508 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x557656fda198 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x557656fda468 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x557656fda250 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fda2d0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x557656fda348 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5576570010c0 <col:67, line:780:5>
|     |-DeclStmt 0x557657000c40 <line:777:9, col:26>
|     | `-VarDecl 0x557657000bd8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x557657001088 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5576570010a8 <line:778:13, col:58>
|       | `-VarDecl 0x557657000c68 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x557657000e48 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x557657000e18 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x557657000e00 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x557657000de0 <col:26, col:58> 'String' (CXXTemporary 0x557657000de0)
|       |           `-CXXMemberCallExpr 0x557657000d70 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x557657000ce0 <col:26> '<bound member function type>' ->find 0x557656ff2448
|       |             | `-CXXThisExpr 0x557657000cd0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x557657000da8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x557657000d10 <col:31> 'const char *' lvalue ParmVar 0x557656fda250 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x557657000dc0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x557657000d30 <col:40> 'int' lvalue ParmVar 0x557656fda2d0 'flags' 'int'
|       |             `-DeclRefExpr 0x557657000d50 <col:47> 'Args::Slot *' lvalue Var 0x557657000bd8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x557657000f00 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x557657000ee8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x557657000ec8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x557657000e98 <col:20> '<bound member function type>' .operator int (String::*)() const 0x557656da91d8
|       |       `-ImplicitCastExpr 0x557657000e80 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x557657000e60 <col:20> 'String' lvalue Var 0x557657000c68 'str' 'String'
|       `-CallExpr 0x557657001058 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x557657000f28 <col:13> '<bound member function type>' ->postparse 0x557656ff2658
|         | `-CXXThisExpr 0x557657000f18 <col:13> 'Args *' implicit this
|         |-CallExpr 0x557657001008 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x557657000f78 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x557657000f58 <col:23> 'P' lvalue ParmVar 0x557656fda348 'parser' 'P'
|         | |-DeclRefExpr 0x557657000fc0 <col:36> 'String' lvalue Var 0x557657000c68 'str' 'String'
|         | `-UnaryOperator 0x557657000ff0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x557657000fe0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x557657001038 <col:49> 'Args::Slot *' lvalue Var 0x557657000bd8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x557656fda8a8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x557656fda578 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x557656fda808 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x557656fda630 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fda6b0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x557656fda728 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x557657001a30 <col:71, line:792:5>
|     |-DeclStmt 0x557657001158 <line:784:9, col:26>
|     | `-VarDecl 0x5576570010f0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x557657001228 <line:785:9, col:29>
|     | `-VarDecl 0x557657001188 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x557657001210 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5576570011f0 <col:28> 'int' 1
|     |-WhileStmt 0x5576570018e0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x557657001900 <line:786:16, col:61>
|     | | `-VarDecl 0x557657001250 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x557657001430 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x557657001400 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5576570013e8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5576570013c8 <col:29, col:61> 'String' (CXXTemporary 0x5576570013c8)
|     | |           `-CXXMemberCallExpr 0x557657001358 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5576570012c8 <col:29> '<bound member function type>' ->find 0x557656ff2448
|     | |             | `-CXXThisExpr 0x5576570012b8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x557657001390 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5576570012f8 <col:34> 'const char *' lvalue ParmVar 0x557656fda630 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5576570013a8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x557657001318 <col:43> 'int' lvalue ParmVar 0x557656fda6b0 'flags' 'int'
|     | |             `-DeclRefExpr 0x557657001338 <col:50> 'Args::Slot *' lvalue Var 0x5576570010f0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5576570014e8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5576570014d0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5576570014b0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x557657001480 <col:23> '<bound member function type>' .operator int (String::*)() const 0x557656da91d8
|     | |       `-ImplicitCastExpr 0x557657001468 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x557657001448 <col:23> 'String' lvalue Var 0x557657001250 'str' 'String'
|     | `-CompoundStmt 0x5576570018b8 <col:64, line:790:9>
|     |   |-CallExpr 0x557657001640 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x557657001510 <col:13> '<bound member function type>' ->postparse 0x557656ff2658
|     |   | | `-CXXThisExpr 0x557657001500 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5576570015f0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x557657001560 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x557657001540 <col:23> 'P' lvalue ParmVar 0x557656fda728 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5576570015a8 <col:36> 'String' lvalue Var 0x557657001250 'str' 'String'
|     |   | | `-UnaryOperator 0x5576570015d8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5576570015c8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x557657001620 <col:49> 'Args::Slot *' lvalue Var 0x5576570010f0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5576570017d8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x557657001670 <col:13> 'int' lvalue Var 0x557657001188 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5576570017c0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5576570017a0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x557657001708 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5576570016e8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5576570016d0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x557657001690 <col:28> 'int' lvalue Var 0x557657001188 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5576570016b0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x557657001788 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x557657001758 <col:49> 'bool' lvalue ->_read_status 0x557656fc4928
|     |   |         `-ImplicitCastExpr 0x557657001738 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x557657001728 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x557657001888 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5576570017f8 <col:13> 'int' lvalue ParmVar 0x557656fda6b0 'flags' 'int'
|     |     `-UnaryOperator 0x557657001870 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x557657001858 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x557657001838 <col:23> 'const int' lvalue Var 0x557656fcbdb8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x557657001a10 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x557657001948 <col:9> 'bool' lvalue ->_read_status 0x557656fc4928
|       | `-ImplicitCastExpr 0x557657001928 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x557657001918 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5576570019f0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5576570019d0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5576570019b8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x557657001978 <col:25> 'int' lvalue Var 0x557657001188 'read_status' 'int'
|           `-IntegerLiteral 0x557657001998 <col:40> 'int' 1
|-FunctionTemplateDecl 0x557656fdad88 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x557656fda918 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fda998 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557656fdace8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x557656fdaa58 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fdaad8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x557656fdab50 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x557656fdabf8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x557657004640 <col:84, line:805:5>
|     |-DeclStmt 0x557657001ad8 <line:796:9, col:26>
|     | `-VarDecl 0x557657001a70 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x557657001ba8 <line:797:9, col:29>
|     | `-VarDecl 0x557657001b08 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x557657001b90 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x557657001b70 <col:28> 'int' 1
|     |-DeclStmt 0x557657003b60 <line:798:9, col:71>
|     | `-VarDecl 0x557657001bf8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x557657003b30 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x557657003aa0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x557657003ae8 <col:55> 'T' lvalue ParmVar 0x557656fdabf8 'variable' 'T &'
|     |     `-UnaryOperator 0x557657003b18 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x557657003b08 <col:66> 'Args *' this
|     |-WhileStmt 0x5576570044f0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x557657004510 <line:799:16, col:61>
|     | | `-VarDecl 0x557657003b88 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x557657003d68 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x557657003d38 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x557657003d20 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x557657003d00 <col:29, col:61> 'String' (CXXTemporary 0x557657003d00)
|     | |           `-CXXMemberCallExpr 0x557657003c90 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x557657003c00 <col:29> '<bound member function type>' ->find 0x557656ff2448
|     | |             | `-CXXThisExpr 0x557657003bf0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x557657003cc8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x557657003c30 <col:34> 'const char *' lvalue ParmVar 0x557656fdaa58 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x557657003ce0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x557657003c50 <col:43> 'int' lvalue ParmVar 0x557656fdaad8 'flags' 'int'
|     | |             `-DeclRefExpr 0x557657003c70 <col:50> 'Args::Slot *' lvalue Var 0x557657001a70 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x557657003e20 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x557657003e08 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x557657003de8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x557657003db8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x557656da91d8
|     | |       `-ImplicitCastExpr 0x557657003da0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x557657003d80 <col:23> 'String' lvalue Var 0x557657003b88 'str' 'String'
|     | `-CompoundStmt 0x5576570044c8 <col:64, line:803:9>
|     |   |-CallExpr 0x557657004250 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x557657003e48 <col:13> '<bound member function type>' ->postparse 0x557656ff2658
|     |   | | `-CXXThisExpr 0x557657003e38 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x557657004210 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x557657003e78 <col:23> 'T *' lvalue Var 0x557657001bf8 's' 'T *'
|     |   | | `-CallExpr 0x5576570041d0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x557657004060 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5576570040a8 <col:56> 'P' lvalue ParmVar 0x557656fdab50 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5576570040c8 <col:64> 'String' lvalue Var 0x557657003b88 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x557657004178 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x557657004108 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x557656e7d388 0x557656e7cfa8 0x557656e7cbd8 0x557656e7c7f8 0x557656e7c418 0x557656e7c048
|     |   | |   | `-DeclRefExpr 0x5576570040e8 <col:70> 'T *' lvalue Var 0x557657001bf8 's' 'T *'
|     |   | |   `-UnaryOperator 0x5576570041b8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5576570041a8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x557657004230 <col:81> 'Args::Slot *' lvalue Var 0x557657001a70 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5576570043e8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x557657004280 <col:13> 'int' lvalue Var 0x557657001b08 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5576570043d0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5576570043b0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x557657004318 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5576570042f8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5576570042e0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5576570042a0 <col:28> 'int' lvalue Var 0x557657001b08 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5576570042c0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x557657004398 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x557657004368 <col:49> 'bool' lvalue ->_read_status 0x557656fc4928
|     |   |         `-ImplicitCastExpr 0x557657004348 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x557657004338 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x557657004498 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x557657004408 <col:13> 'int' lvalue ParmVar 0x557656fdaad8 'flags' 'int'
|     |     `-UnaryOperator 0x557657004480 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x557657004468 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x557657004448 <col:23> 'const int' lvalue Var 0x557656fcbdb8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x557657004620 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x557657004558 <col:9> 'bool' lvalue ->_read_status 0x557656fc4928
|       | `-ImplicitCastExpr 0x557657004538 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x557657004528 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x557657004600 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5576570045e0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5576570045c8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x557657004588 <col:25> 'int' lvalue Var 0x557657001b08 'read_status' 'int'
|           `-IntegerLiteral 0x5576570045a8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x557656fdb368 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x557656fdae00 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656fdae78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557656fdb2c8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x557656fdaf38 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656fdafb8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x557656fdb030 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x557656fdb180 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x557657005448 <col:87, line:821:5>
|     |-DeclStmt 0x5576570046f0 <line:809:9, col:26>
|     | `-VarDecl 0x557657004688 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5576570047c0 <line:810:9, col:29>
|     | `-VarDecl 0x557657004720 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5576570047a8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x557657004788 <col:28> 'int' 1
|     |-DeclStmt 0x557657004a08 <line:811:9, col:38>
|     | `-VarDecl 0x5576570048f0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5576570049e0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x557657004968 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5576570049c0 <col:29> 'Vector<T>' lvalue ParmVar 0x557656fdb180 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5576570052f8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x557657005318 <line:812:16, col:61>
|     | | `-VarDecl 0x557657004a30 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x557657004c10 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x557657004be0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x557657004bc8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x557657004ba8 <col:29, col:61> 'String' (CXXTemporary 0x557657004ba8)
|     | |           `-CXXMemberCallExpr 0x557657004b38 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x557657004aa8 <col:29> '<bound member function type>' ->find 0x557656ff2448
|     | |             | `-CXXThisExpr 0x557657004a98 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x557657004b70 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x557657004ad8 <col:34> 'const char *' lvalue ParmVar 0x557656fdaf38 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x557657004b88 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x557657004af8 <col:43> 'int' lvalue ParmVar 0x557656fdafb8 'flags' 'int'
|     | |             `-DeclRefExpr 0x557657004b18 <col:50> 'Args::Slot *' lvalue Var 0x557657004688 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x557657004cc8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x557657004cb0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x557657004c90 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x557657004c60 <col:23> '<bound member function type>' .operator int (String::*)() const 0x557656da91d8
|     | |       `-ImplicitCastExpr 0x557657004c48 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x557657004c28 <col:23> 'String' lvalue Var 0x557657004a30 'str' 'String'
|     | `-CompoundStmt 0x5576570052c0 <col:64, line:819:9>
|     |   |-DeclStmt 0x557657004d88 <line:813:13, col:23>
|     |   | `-VarDecl 0x557657004cf0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x557657004d68 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x557657004f08 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x557657004db0 <col:13> '<bound member function type>' ->postparse 0x557656ff2658
|     |   | | `-CXXThisExpr 0x557657004da0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x557657004eb0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x557657004e00 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x557657004de0 <col:23> 'P' lvalue ParmVar 0x557656fdb030 'parser' 'P'
|     |   | | |-DeclRefExpr 0x557657004e48 <col:36> 'String' lvalue Var 0x557657004a30 'str' 'String'
|     |   | | |-DeclRefExpr 0x557657004e68 <col:41> 'T' lvalue Var 0x557657004cf0 'sx' 'T'
|     |   | | `-UnaryOperator 0x557657004e98 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x557657004e88 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x557657004ee8 <col:53> 'Args::Slot *' lvalue Var 0x557657004688 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x557657005060 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x557657004f98 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x557657004f68 <col:17> 'bool' lvalue ->_read_status 0x557656fc4928
|     |   | |   `-ImplicitCastExpr 0x557657004f48 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x557657004f38 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x557657005038 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x557657004fd0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x557657004fb0 <col:17> 'Vector<T> *' lvalue Var 0x5576570048f0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x557657005018 <col:30> 'T' lvalue Var 0x557657004cf0 'sx' 'T'
|     |   |-BinaryOperator 0x5576570051e0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x557657005078 <col:13> 'int' lvalue Var 0x557657004720 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5576570051c8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5576570051a8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x557657005110 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5576570050f0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5576570050d8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x557657005098 <col:28> 'int' lvalue Var 0x557657004720 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5576570050b8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x557657005190 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x557657005160 <col:49> 'bool' lvalue ->_read_status 0x557656fc4928
|     |   |         `-ImplicitCastExpr 0x557657005140 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x557657005130 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x557657005290 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x557657005200 <col:13> 'int' lvalue ParmVar 0x557656fdafb8 'flags' 'int'
|     |     `-UnaryOperator 0x557657005278 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x557657005260 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x557657005240 <col:23> 'const int' lvalue Var 0x557656fcbdb8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x557657005428 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x557657005360 <col:9> 'bool' lvalue ->_read_status 0x557656fc4928
|       | `-ImplicitCastExpr 0x557657005340 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x557657005330 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x557657005408 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5576570053e8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5576570053d0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x557657005390 <col:25> 'int' lvalue Var 0x557657004720 'read_status' 'int'
|           `-IntegerLiteral 0x5576570053b0 <col:40> 'int' 1
|-AccessSpecDecl 0x557656fdb3e0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x557656fdb408 prev 0x557656fca0b8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x557656fdb500 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x557656fdb5f0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x557657005480 <col:16, line:828:9>
| |-CXXDestructorDecl 0x557656fdb6e0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x557657005490 <col:25, line:830:9>
| |-CXXMethodDecl 0x557656fdb7e0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x557656fdb890 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x557656fdb938 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x557656fdb938
| | `-ParmVarDecl 0x557656fdba48 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x557656fdc208 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x557656fdc208
|   `-ParmVarDecl 0x557656fdc318 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x557656fdbab8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x557656fdbc18 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x557656fdbe10 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x557656fdbcc0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x557656fdbd38 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5576570056a0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x557656fdc0c8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5576570054e0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5576570054a0 <col:20> 'void *' lvalue ParmVar 0x557656fdbcc0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x557656fdc130 '_slot' 'char *'
| | | `-CXXNewExpr 0x557657005598 <col:32, col:45> 'char *' array Function 0x557656bccef8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x557657005550 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x557657005520 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x557656fdbd38 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x557656fdc190 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x557657005660 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x557657005620 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x557656fdbd38 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x557657005720 <col:61, line:838:9>
| |-CXXDestructorDecl 0x557656fdbf10 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x557656fdb6e0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5576570057a8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x557657005788 <line:840:13, col:22> 'void' array Function 0x557656bcd258 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x557657005770 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x557657005740 <col:22> 'char *' lvalue ->_slot 0x557656fdc130
| |         `-CXXThisExpr 0x557657005730 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x557656fdc010 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x557656fdb7e0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x557657005998 <col:22, line:844:9>
| |   `-CallExpr 0x557657005900 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5576570058e8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5576570058c8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x557656d05198 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x557657005938 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x557657005818 <col:20> 'void *' lvalue ->_ptr 0x557656fdc0c8
| |     |   `-CXXThisExpr 0x557657005808 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x557657005968 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x557657005950 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x557657005858 <col:26> 'char *' lvalue ->_slot 0x557656fdc130
| |     |     `-CXXThisExpr 0x557657005848 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x557657005980 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x557657005898 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x557656fdc190
| |         `-CXXThisExpr 0x557657005888 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x557656fdc0c8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x557656fdc130 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x557656fdc190 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x557656fdc388 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x557656fdc388
| | `-ParmVarDecl 0x557656fdc498 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x557656fdc538 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x557656fdc538
|   `-ParmVarDecl 0x557656fdc648 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x557656fe27c0 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x557656fdc6b8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x557656fe2730 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x557656fe2a50 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x557656fe2c48 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x557656fe2b18 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x557656fe2dc8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5576570059d0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5576570059b0 <col:20> 'T *' lvalue ParmVar 0x557656fe2b18 'ptr' 'T *'
|   | `-CompoundStmt 0x557657005a20 <col:25, line:854:9>
|   |-CXXMethodDecl 0x557656fe2d18 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x557656fdb7e0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x557657005bd0 <col:22, line:857:9>
|   |   `-CallExpr 0x557657005ba0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x557657005a30 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x557656d913c8 0x557656cba8f8
|   |     |-CXXOperatorCallExpr 0x557657005b30 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x557657005ac0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x557656e7d388 0x557656e7cfa8 0x557656e7cbd8 0x557656e7c7f8 0x557656e7c418 0x557656e7c048
|   |     | `-MemberExpr 0x557657005a90 <col:29> 'T *' lvalue ->_ptr 0x557656fe2dc8
|   |     |   `-CXXThisExpr 0x557657005a80 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x557657005b70 <col:35> 'T' lvalue ->_slot 0x557656fe2e28
|   |       `-CXXThisExpr 0x557657005b60 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x557656fe2dc8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x557656fe2e28 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x557656fe2e90 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x557656fe2f90 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x557656fe2fe0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x557656fe2f70 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x557656fe2f50 <col:31> 'int' 48
|-FieldDecl 0x557656fe3008 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x557656fe3068 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x557656fe30c8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x557656fe3200 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x557656ff1680 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x557656ff16e0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x557656ff1808 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x557656ff1a38 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x557656ff1940 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x557656ff1b88 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x557656ff1af8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x557656ff2448 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x557656ff1c48 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x557656ff1cc8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x557656ff2360 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x557656ff2658 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x557656ff2510 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x557656ff2588 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x557656ff2728 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x557656ff2878 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x557656ff27e0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x557656ff2c08 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x557656ff2938 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x557656ff29b8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x557656ff2a60 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x557656ff2b18 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x557656ff2e30 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x557656ff2ce0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x557656ff2d58 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x557656ff3148 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x557656ff2ee0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x557656ff30a8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x557656ff2fb8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557656d9a0d0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x557656d9a1e8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x557656d9a278 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x557656d9a348 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x557656d9a430 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x557656d9a648 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x557656d9a4f0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656d9a7f8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x557656d9a700 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x557656d9a940 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x557656d9a8b0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x557656d9aa88 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x557656d9a9f8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656d9abd0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x557656d9ab40 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656d9ac98 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x557656d9ade0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x557656d9ad50 <col:28> col:31 'int'
|-CXXMethodDecl 0x557656d9aea8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x557656d9aff0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x557656d9af60 <col:28> col:31 'int'
|-CXXMethodDecl 0x557656d9b168 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x557656d9b0a8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656d9b2b0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x557656d9b220 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656d9b378 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x557656d9b538 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x557656d9b428 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x557656d9b4a0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656d9b788 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x557656d9b5f8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x557656d9b670 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x557656d9b838 <col:86> "" ""
|-CXXMethodDecl 0x557656d9baa8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x557656d9b918 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x557656d9b990 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656d9bc58 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x557656d9bb68 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x557656d9be08 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x557656d9bd10 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x557656d9c0d8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x557656d9bec0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x557656d9bf38 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x557656d9bfb0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656d9c3b8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x557656d9c1a0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x557656d9c218 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x557656d9c290 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x557656d9c470 <col:115> "" ""
|-AccessSpecDecl 0x557656d9c4e0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x557656d9c518 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656d9c9c8 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x557656d9c9c8
| `-ParmVarDecl 0x557656d9cad8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x557656d9cb78 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x557656d9cb78
| `-ParmVarDecl 0x557656d9cc88 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x557656dd3978 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x557657064fd0 <col:7>
|-CXXConstructorDecl 0x557656dd3a50 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x557656dd3a50
| `-ParmVarDecl 0x557656dd3b68 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x557656dd3bd8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x557656dd3bd8
| `-ParmVarDecl 0x557656dd3ce8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x557657067940 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557657052b70 prev 0x557657042900 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x557657052c68 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x557657052d58 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x557657052e08 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x557657052f88 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x557657053108 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x557657053288 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x557657065138 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5576570659a8 <col:11>
|-CXXDestructorDecl 0x557657065210 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x557657065348 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x557657065348
| `-ParmVarDecl 0x557657065458 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5576570654f8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5576570654f8
| `-ParmVarDecl 0x557657065608 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x557657068338 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x557657068448 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5576570686c8 <col:11>
|   `-ReturnStmt 0x5576570686b8 <col:11>
|     `-UnaryOperator 0x5576570686a0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x557657068690 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5576570684b8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5576570684b8
  `-ParmVarDecl 0x5576570685c8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576570532f0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x557657053408 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5576570534a8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x557657053510 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x557657053578 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5576570535e0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x557657053640 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x557657053700 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x557657053760 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5576570537c0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x557657065048 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5576570534a8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5576570659b8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x557657065a10 <col:12>
|-CXXConstructorDecl 0x557657065678 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x557657065678
| `-ParmVarDecl 0x557657065788 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x557657065828 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x557657065828
| `-ParmVarDecl 0x557657065938 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x557657067a20 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55765703bfc0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55765703c0d8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55765703c168 <col:16, col:22> col:16 public
|-EnumDecl 0x55765703c190 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55765703c290 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55765703c370 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55765703c270 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55765703c250 <col:21> 'int' 28
| `-EnumConstantDecl 0x55765703c320 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55765703c388 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55765703c300 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55765703c2e0 <col:22> 'int' 64
|-CXXMethodDecl 0x55765703c6c8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55765703c3b0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55765703c430 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55765703c4a8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55765703c520 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55765703c788 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55765703c988 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55765703c800 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55765703c878 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55765703ca38 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55765703cb98 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55765703caa8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55765703cc40 <col:72> warn_unused_result ""
|-TypedefDecl 0x55765703cf70 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55765703cf00 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55765703cea0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55765703ce60 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x557656a794e0 'void'
|       |-PointerType 0x557656d4e290 'unsigned char *'
|       | `-BuiltinType 0x557656a795e0 'unsigned char'
|       |-TypedefType 0x557656b1efa0 'size_t' sugar
|       | |-Typedef 0x557656ae9be0 'size_t'
|       | `-BuiltinType 0x557656a79640 'unsigned long'
|       `-PointerType 0x557656a79ce0 'void *'
|         `-BuiltinType 0x557656a794e0 'void'
|-CXXMethodDecl 0x55765703d3e8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55765703cfe0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55765703d058 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55765703d0f0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55765703d170 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x557657054c50 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x557657054c38 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x557657054c00 <col:58> 'int' 0
| |-ParmVarDecl 0x55765703d1f0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x557657054c78 <col:76> 'int' 0
| |-ParmVarDecl 0x55765703d270 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x557657054c98 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55765703d4b8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55765703d538 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55765703d5f8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55765703d698 <col:20>
| `-OptimizeNoneAttr 0x55765703d6f0 <col:30>
|-CXXMethodDecl 0x55765703d768 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55765703d808 <col:20>
| `-OptimizeNoneAttr 0x55765703d860 <col:30>
|-CXXMethodDecl 0x55765703d8d8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55765703d978 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55765703da28 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55765703dac8 <col:20>
| |-OptimizeNoneAttr 0x55765703db20 <col:30>
| `-WarnUnusedResultAttr 0x55765703db48 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55765703dba0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55765703dc40 <col:20>
| `-OptimizeNoneAttr 0x55765703dc98 <col:30>
|-CXXMethodDecl 0x55765703dce8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55765703dd88 <col:20>
| `-OptimizeNoneAttr 0x55765703dde0 <col:30>
|-CXXMethodDecl 0x55765703de28 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55765703dec8 <col:20>
| `-OptimizeNoneAttr 0x55765703df20 <col:30>
|-CXXMethodDecl 0x55765703df68 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55765703e028 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55765703e0f0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55765703e1b8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55765703e278 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55765703e398 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x557657054d60 <col:54, line:99:5>
|   `-ReturnStmt 0x557657054d50 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x557657054d38 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x557657054d08 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x557657053af8
|         `-CXXThisExpr 0x557657054cf8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55765703e538 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55765703e448 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x557657054e10 <col:67, line:103:5>
|   `-BinaryOperator 0x557657054df0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x557657054d88 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x557657053af8
|     | `-CXXThisExpr 0x557657054d78 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x557657054dd8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x557657054db8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55765703e448 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55765703e630 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x557657054e90 <col:33, line:107:5>
|   `-ReturnStmt 0x557657054e80 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x557657054e68 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x557657054e38 <col:16> 'void *' lvalue ->_destructor_argument 0x557657053b60
|         `-CXXThisExpr 0x557657054e28 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55765703e6f0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5576570554c0 <col:25, line:113:5>
|   |-ParenExpr 0x557657055208 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5576570551d8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x557657054f48 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x557657054f20 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x557657054ee8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x557657054eb8 <col:24> '<bound member function type>' ->shared 0x55765703d768
|   |   |       `-ImplicitCastExpr 0x557657054f08 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x557657054ea8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x557657054fa8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557657054f88 <col:42> 'int' 0
|   |   `-CallExpr 0x557657055138 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x557657055120 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557657055100 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x557656b15d00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557657055178 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557657055018 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x557657055190 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557657055040 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5576570551a8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557657055078 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5576570551c0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5576570550e8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5576570550d0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557657055098 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x557657055408 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x557657055238 <col:2> 'unsigned char *' lvalue ->_head 0x557657053900
|   | | `-CXXThisExpr 0x557657055228 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5576570553f0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5576570553d0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x557657055278 <col:10> 'unsigned char *' lvalue ->_data 0x557657053968
|   |     | `-CXXThisExpr 0x557657055268 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5576570553b8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x557657055398 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5576570552b8 <col:18> 'unsigned char *' lvalue ->_tail 0x5576570539d0
|   |         | `-CXXThisExpr 0x5576570552a8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x557657055380 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x557657055360 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5576570552f8 <col:26> 'unsigned char *' lvalue ->_end 0x557657053a38
|   |             | `-CXXThisExpr 0x5576570552e8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x557657055348 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x557657055328 <col:33> 'int' 0
|   `-BinaryOperator 0x5576570554a0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x557657055438 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x557657053af8
|     | `-CXXThisExpr 0x557657055428 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x557657055488 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x557657055468 <col:16> 'int' 0
|-CXXMethodDecl 0x55765703e830 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55765703e7a0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55765703e8d8 <col:20>
| |-OptimizeNoneAttr 0x55765703e930 <col:30>
| `-WarnUnusedResultAttr 0x55765703e958 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55765703ea28 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55765703e998 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55765703ead0 <col:20>
| |-OptimizeNoneAttr 0x55765703eb28 <col:30>
| `-WarnUnusedResultAttr 0x55765703eb50 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55765703ec88 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55765703eb90 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55765703ed30 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55765703ee30 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55765703eda0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55765703eed8 <col:20>
| `-OptimizeNoneAttr 0x55765703ef30 <col:30>
|-CXXMethodDecl 0x55765703eff8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55765703ef68 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55765703f0a0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55765703f1a0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55765703f110 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55765703f248 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55765703f348 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55765703f2b8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55765703f3f0 <col:20>
| `-OptimizeNoneAttr 0x55765703f448 <col:30>
|-CXXMethodDecl 0x55765703f5d8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55765703f488 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55765703f500 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x557657054cb8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55765703f688 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55765703f888 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55765703f700 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55765703f778 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55765703fb20 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55765703f948 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55765703f9c0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55765703fd38 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55765703fbe0 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55765703fc60 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x557657054cc8 <col:39> 'int' 0
|-CXXMethodDecl 0x55765703fe08 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55765703fed0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55765703ff98 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x557657040058 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x557657040120 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x557657040268 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5576570401d8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x557657040438 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x557657040328 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5576570403a0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557657040508 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5576570405c8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x557657040668 <col:20>
| `-OptimizeNoneAttr 0x5576570406c0 <col:30>
|-CXXMethodDecl 0x557657040710 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5576570407b0 <col:20>
| `-OptimizeNoneAttr 0x557657040808 <col:30>
|-CXXMethodDecl 0x557657040858 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x557657040918 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5576570409e0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x557657040a80 <col:20>
| `-OptimizeNoneAttr 0x557657040ad8 <col:30>
|-CXXMethodDecl 0x557657040c28 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x557657040b18 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x557657040b90 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557657040d78 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x557657040ce8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557657040e40 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x557657040f00 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x557657040fa0 <col:20>
| `-OptimizeNoneAttr 0x557657040ff8 <col:30>
|-CXXMethodDecl 0x557657041048 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5576570410e8 <col:20>
| `-OptimizeNoneAttr 0x557657041140 <col:30>
|-CXXMethodDecl 0x557657041190 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x557657041258 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5576570412f8 <col:20>
| `-OptimizeNoneAttr 0x557657041350 <col:30>
|-CXXMethodDecl 0x557657041398 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5576570414b8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x557657041628 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x557657041568 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x557657041718 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5576570417b8 <col:20>
| `-OptimizeNoneAttr 0x557657041810 <col:30>
|-CXXMethodDecl 0x557657041860 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x557657041920 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x557657041b58 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5576570419d0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x557657041a48 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x557657041c08 <col:20>
| `-OptimizeNoneAttr 0x557657041c60 <col:30>
|-CXXMethodDecl 0x557657041d08 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x557657041da8 <col:20>
| `-OptimizeNoneAttr 0x557657041e00 <col:30>
|-CXXMethodDecl 0x557657041e50 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x557657041ef0 <col:20>
| `-OptimizeNoneAttr 0x557657041f48 <col:30>
|-CXXMethodDecl 0x557657041f90 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x557657042030 <col:20>
| `-OptimizeNoneAttr 0x557657042088 <col:30>
|-CXXMethodDecl 0x557657042188 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5576570420c0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x557657042230 <col:20>
| `-OptimizeNoneAttr 0x557657042288 <col:30>
|-CXXMethodDecl 0x557657042448 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5576570422c0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x557657042338 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5576570424f8 <col:20>
| `-OptimizeNoneAttr 0x557657042550 <col:30>
|-CXXMethodDecl 0x5576570425f8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x557657042718 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x557657042838 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5576570428d8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x557657042900 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x557657042a28 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x557657042ac8 <col:20>
| `-OptimizeNoneAttr 0x557657042b20 <col:30>
|-CXXMethodDecl 0x557657042bc8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x557657042c68 <col:20>
| `-OptimizeNoneAttr 0x557657042cc0 <col:30>
|-AccessSpecDecl 0x557657042ce8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x557657042d10 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x557657042e10 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x557657042e60 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x557657042df0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x557657042dd0 <col:14> 'int' 48
|-CXXMethodDecl 0x557657042ec8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x557657042f68 <col:20>
| `-OptimizeNoneAttr 0x557657042fc0 <col:30>
|-CXXMethodDecl 0x557657043038 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5576570430d8 <col:20>
| `-OptimizeNoneAttr 0x557657043130 <col:30>
|-CXXMethodDecl 0x5576570431f8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x557657043168 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x557657043398 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x557657043538 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x557657043448 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5576570435e0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5576570436e0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x557657043a90 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576570436c0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5576570436a0 <col:9> 'int' 0
| |-EnumConstantDecl 0x557657043770 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x557657043aa8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557657043750 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x557657043730 <col:14> 'int' 1
| |-EnumConstantDecl 0x557657043800 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x557657043ac0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576570437e0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5576570437c0 <col:14> 'int' 2
| |-EnumConstantDecl 0x557657043890 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x557657043ad8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557657043870 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x557657043850 <col:14> 'int' 3
| |-EnumConstantDecl 0x557657043920 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x557657043af0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557657043900 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5576570438e0 <col:13> 'int' 4
| |-EnumConstantDecl 0x5576570439b0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x557657043b08 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557657043990 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x557657043970 <col:13> 'int' 5
| `-EnumConstantDecl 0x557657043a40 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x557657043b20 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x557657043a20 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x557657043a00 <col:14> 'int' 6
|-CXXMethodDecl 0x557657043b88 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x557657043c28 <col:20>
| `-OptimizeNoneAttr 0x557657043c80 <col:30>
|-CXXMethodDecl 0x557657043d78 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x557657043cb8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x557657043e20 <col:20>
| `-OptimizeNoneAttr 0x557657043e78 <col:30>
|-CXXMethodDecl 0x557657043ee8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x557657044010 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x557657044188 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5576570440c0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x557657044250 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x557657044318 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x557657044458 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5576570443c8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x557657044500 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x557657044600 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x557657044800 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576570445e0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5576570445c0 <col:23> 'int' 0
| |-EnumConstantDecl 0x557657044690 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x557657044818 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557657044670 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x557657044650 <col:45> 'int' 4
| |-EnumConstantDecl 0x557657044720 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x557657044830 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557657044700 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5576570446e0 <col:24> 'int' 0
| `-EnumConstantDecl 0x5576570447b0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x557657044848 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x557657044790 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x557657044770 <col:47> 'int' 16
|-CXXMethodDecl 0x5576570448a8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x557657044a18 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x557657044958 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x557657044ac0 <col:20>
| `-OptimizeNoneAttr 0x557657044b18 <col:30>
|-CXXMethodDecl 0x557657044b68 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5576570555e0 <col:18, col:36>
|   `-ReturnStmt 0x5576570555d0 <col:20, col:33>
|     `-ImplicitCastExpr 0x5576570555b8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x557657055598 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x557657055568 <col:27> '<bound member function type>' ->xanno 0x557657042bc8
|           `-CXXThisExpr 0x557657055558 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x557657044c60 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5576570556f0 <col:30, col:48>
|   `-ReturnStmt 0x5576570556e0 <col:32, col:45>
|     `-ImplicitCastExpr 0x5576570556c8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5576570556a8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x557657055678 <col:39> '<bound member function type>' ->xanno 0x557657042a28
|           `-CXXThisExpr 0x557657055668 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x557657044d48 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x557657055888 <col:24, col:50>
|   `-ReturnStmt 0x557657055878 <col:26, col:47>
|     `-UnaryOperator 0x557657055860 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x557657055840 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x557657055828 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5576570557d8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x557657052e08
|         |   `-CXXMemberCallExpr 0x5576570557b8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x557657055788 <col:34> '<bound member function type>' ->xanno 0x557657042bc8
|         |       `-CXXThisExpr 0x557657055778 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x557657055808 <col:46> 'int' 0
|-CXXMethodDecl 0x557657044e38 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x557657055a20 <col:36, col:62>
|   `-ReturnStmt 0x557657055a10 <col:38, col:59>
|     `-UnaryOperator 0x5576570559f8 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5576570559d8 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5576570559c0 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x557657055970 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x557657052e08
|         |   `-CXXMemberCallExpr 0x557657055950 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x557657055920 <col:46> '<bound member function type>' ->xanno 0x557657042a28
|         |       `-CXXThisExpr 0x557657055910 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5576570559a0 <col:58> 'int' 0
|-CXXMethodDecl 0x557657044f58 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x557657055bb8 <col:26, col:53>
|   `-ReturnStmt 0x557657055ba8 <col:28, col:50>
|     `-UnaryOperator 0x557657055b90 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x557657055b70 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x557657055b58 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x557657055b08 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x557657053108
|         |   `-CXXMemberCallExpr 0x557657055ae8 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x557657055ab8 <col:36> '<bound member function type>' ->xanno 0x557657042bc8
|         |       `-CXXThisExpr 0x557657055aa8 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x557657055b38 <col:49> 'int' 0
|-CXXMethodDecl 0x557657045078 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x557657055d88 <col:38, col:65>
|   `-ReturnStmt 0x557657055d78 <col:40, col:62>
|     `-UnaryOperator 0x557657055d60 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x557657055d40 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x557657055d28 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x557657055ca0 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x557657053108
|         |   `-CXXMemberCallExpr 0x557657055c80 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x557657055c50 <col:48> '<bound member function type>' ->xanno 0x557657042a28
|         |       `-CXXThisExpr 0x557657055c40 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x557657055cd0 <col:61> 'int' 0
|-CXXMethodDecl 0x557657045228 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x557657045130 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x557657056458 <col:34, line:463:5>
|   |-ParenExpr 0x5576570562a0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x557657056270 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x557657055ed8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557657055ea8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557657055df8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557657055de0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x557657055da0 <col:23> 'int' lvalue ParmVar 0x557657045130 'i' 'int'
|   |   |   | `-IntegerLiteral 0x557657055dc0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x557657055e88 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x557657055e58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557657055e18 <col:33> 'int' lvalue ParmVar 0x557657045130 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x557657055e70 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x557657055e38 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x557657042e10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x557657055f38 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557657055f18 <col:56> 'int' 0
|   |   `-CallExpr 0x5576570561d0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5576570561b8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557657056198 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x557656b15d00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557657056210 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557657056028 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x557657056228 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557657056058 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557657056240 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557657056090 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x557657056258 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557657056180 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557657056168 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557657056128 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x557657056448 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x557657056430 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x557657056410 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5576570563e0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x557657056390 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x557657052e08
|         |   `-CXXMemberCallExpr 0x557657056370 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x557657056340 <col:9> '<bound member function type>' ->xanno 0x557657042a28
|         |       `-CXXThisExpr 0x557657056330 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5576570563f8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5576570563c0 <col:21> 'int' lvalue ParmVar 0x557657045130 'i' 'int'
|-CXXMethodDecl 0x557657045478 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5576570452e8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x557657045360 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x557657056ae8 <col:40, line:472:5>
|   |-ParenExpr 0x557657056900 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5576570568d0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5576570565b0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557657056580 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5576570564d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5576570564b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x557657056478 <col:23> 'int' lvalue ParmVar 0x5576570452e8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x557657056498 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x557657056560 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x557657056530 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5576570564f0 <col:33> 'int' lvalue ParmVar 0x5576570452e8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x557657056548 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x557657056510 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x557657042e10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x557657056610 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5576570565f0 <col:56> 'int' 0
|   |   `-CallExpr 0x557657056830 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x557657056818 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5576570567f8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x557656b15d00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557657056870 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557657056680 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x557657056888 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576570566b0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5576570568a0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5576570566e8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5576570568b8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5576570567e0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5576570567c8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557657056788 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x557657056ac8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x557657056a70 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x557657056a40 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5576570569f0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x557657052e08
|     | |   `-CXXMemberCallExpr 0x5576570569d0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5576570569a0 <col:2> '<bound member function type>' ->xanno 0x557657042bc8
|     | |       `-CXXThisExpr 0x557657056990 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x557657056a58 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x557657056a20 <col:14> 'int' lvalue ParmVar 0x5576570452e8 'i' 'int'
|     `-ImplicitCastExpr 0x557657056ab0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x557657056a90 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x557657045360 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x557657045638 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x557657045540 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x557657057268 <col:36, line:485:5>
|   |-ParenExpr 0x557657056fd0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x557657056fa0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x557657056c80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557657056c50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557657056b60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557657056b48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x557657056b08 <col:23> 'int' lvalue ParmVar 0x557657045540 'i' 'int'
|   |   |   | `-IntegerLiteral 0x557657056b28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x557657056c30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x557657056c18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557657056b80 <col:33> 'int' lvalue ParmVar 0x557657045540 'i' 'int'
|   |   |     `-BinaryOperator 0x557657056bf8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x557657056be0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557657056ba0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x557657042e10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x557657056bc0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x557657056ce0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557657056cc0 <col:60> 'int' 0
|   |   `-CallExpr 0x557657056f00 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x557657056ee8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557657056ec8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x557656b15d00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557657056f40 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557657056d50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x557657056f58 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557657056d88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557657056f70 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557657056dc0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x557657056f88 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557657056eb0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557657056e98 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557657056e58 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x557657057258 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x557657057240 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x557657057228 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5576570571f8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x557657057198 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x557657057168 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5576570570e0 <col:61, col:70> 'char const[48]' lvalue ->c 0x557657052d58
|             |   `-CXXMemberCallExpr 0x5576570570c0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x557657057090 <col:61> '<bound member function type>' ->xanno 0x557657042a28
|             |       `-CXXThisExpr 0x557657057080 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x557657057180 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x557657057110 <col:74> 'int' lvalue ParmVar 0x557657045540 'i' 'int'
|-CXXMethodDecl 0x557657045888 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5576570456f8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x557657045770 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x557657060dc8 <col:42, line:500:5>
|   |-ParenExpr 0x557657060b60 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x557657060b30 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x557657057400 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5576570573d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5576570572e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5576570572c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x557657057288 <col:23> 'int' lvalue ParmVar 0x5576570456f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5576570572a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5576570573b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x557657057398 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557657057300 <col:33> 'int' lvalue ParmVar 0x5576570456f8 'i' 'int'
|   |   |     `-BinaryOperator 0x557657057378 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x557657057360 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557657057320 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x557657042e10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x557657057340 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x557657057460 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557657057440 <col:60> 'int' 0
|   |   `-CallExpr 0x557657060a90 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x557657060a78 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557657060a58 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x557656b15d00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557657060ad0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576570608d8 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x557657060ae8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557657060910 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557657060b00 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557657060948 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x557657060b18 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557657060a40 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557657060a28 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576570609e8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x557657060da8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x557657060d58 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x557657060d28 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x557657060cd0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x557657060ca0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x557657060c50 <col:48, col:57> 'char [48]' lvalue ->c 0x557657052d58
|     |     |   `-CXXMemberCallExpr 0x557657060c30 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x557657060c00 <col:48> '<bound member function type>' ->xanno 0x557657042bc8
|     |     |       `-CXXThisExpr 0x557657060bf0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x557657060cb8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x557657060c80 <col:61> 'int' lvalue ParmVar 0x5576570456f8 'i' 'int'
|     `-ImplicitCastExpr 0x557657060d90 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x557657060d70 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x557657045770 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x557657045a48 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x557657045950 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x557657061528 <col:35, line:513:5>
|   |-ParenExpr 0x557657061238 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x557657061208 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x557657060f60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557657060f30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557657060e40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557657060e28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x557657060de8 <col:23> 'int' lvalue ParmVar 0x557657045950 'i' 'int'
|   |   |   | `-IntegerLiteral 0x557657060e08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x557657060f10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x557657060ef8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557657060e60 <col:33> 'int' lvalue ParmVar 0x557657045950 'i' 'int'
|   |   |     `-BinaryOperator 0x557657060ed8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x557657060ec0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557657060e80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x557657042e10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x557657060ea0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x557657060fc0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557657060fa0 <col:60> 'int' 0
|   |   `-CallExpr 0x557657061168 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x557657061150 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557657061130 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x557656b15d00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5576570611a8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557657061030 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5576570611c0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557657061068 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5576570611d8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5576570610a0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5576570611f0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557657061118 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557657061100 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576570610c0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x557657061518 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x557657061500 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5576570614e8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5576570614b8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x557657061430 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x557657061400 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5576570613b0 <col:60, col:69> 'char const[48]' lvalue ->c 0x557657052d58
|             |   `-CXXMemberCallExpr 0x557657061390 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x557657061360 <col:60> '<bound member function type>' ->xanno 0x557657042a28
|             |       `-CXXThisExpr 0x557657061350 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x557657061418 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5576570613e0 <col:73> 'int' lvalue ParmVar 0x557657045950 'i' 'int'
|-CXXMethodDecl 0x557657045c98 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x557657045b08 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x557657045b80 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x557657061c08 <col:41, line:528:5>
|   |-ParenExpr 0x557657061998 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x557657061968 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5576570616c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557657061690 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5576570615a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557657061588 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x557657061548 <col:23> 'int' lvalue ParmVar 0x557657045b08 'i' 'int'
|   |   |   | `-IntegerLiteral 0x557657061568 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x557657061670 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x557657061658 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5576570615c0 <col:33> 'int' lvalue ParmVar 0x557657045b08 'i' 'int'
|   |   |     `-BinaryOperator 0x557657061638 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x557657061620 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5576570615e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x557657042e10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x557657061600 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x557657061720 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557657061700 <col:60> 'int' 0
|   |   `-CallExpr 0x5576570618c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5576570618b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557657061890 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x557656b15d00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557657061908 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557657061790 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x557657061920 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576570617c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557657061938 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557657061800 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x557657061950 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557657061878 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557657061860 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557657061820 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x557657061be8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x557657061b98 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x557657061b68 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x557657061b08 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x557657061ad8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x557657061a88 <col:47, col:56> 'char [48]' lvalue ->c 0x557657052d58
|     |     |   `-CXXMemberCallExpr 0x557657061a68 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x557657061a38 <col:47> '<bound member function type>' ->xanno 0x557657042bc8
|     |     |       `-CXXThisExpr 0x557657061a28 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x557657061af0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x557657061ab8 <col:60> 'int' lvalue ParmVar 0x557657045b08 'i' 'int'
|     `-ImplicitCastExpr 0x557657061bd0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x557657061bb0 <col:65> 'int16_t':'short' lvalue ParmVar 0x557657045b80 'x' 'int16_t':'short'
|-CXXMethodDecl 0x557657045e58 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x557657045d60 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5576570622d8 <col:36, line:541:5>
|   |-ParenExpr 0x557657062078 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x557657062048 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x557657061da0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557657061d70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557657061c80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557657061c68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x557657061c28 <col:23> 'int' lvalue ParmVar 0x557657045d60 'i' 'int'
|   |   |   | `-IntegerLiteral 0x557657061c48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x557657061d50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x557657061d38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557657061ca0 <col:33> 'int' lvalue ParmVar 0x557657045d60 'i' 'int'
|   |   |     `-BinaryOperator 0x557657061d18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x557657061d00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557657061cc0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x557657042e10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x557657061ce0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x557657061e00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557657061de0 <col:60> 'int' 0
|   |   `-CallExpr 0x557657061fa8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x557657061f90 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557657061f70 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x557656b15d00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557657061fe8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557657061e70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x557657062000 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557657061ea8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557657062018 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557657061ee0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x557657062030 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557657061f58 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557657061f40 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557657061f00 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5576570622c8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5576570622b0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x557657062298 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x557657062268 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x557657062210 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5576570621e0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x557657062190 <col:61, col:70> 'char const[48]' lvalue ->c 0x557657052d58
|             |   `-CXXMemberCallExpr 0x557657062170 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x557657062140 <col:61> '<bound member function type>' ->xanno 0x557657042a28
|             |       `-CXXThisExpr 0x557657062130 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5576570621f8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5576570621c0 <col:74> 'int' lvalue ParmVar 0x557657045d60 'i' 'int'
|-CXXMethodDecl 0x557657046028 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x557657045f18 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x557657045f90 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5576570460d8 <col:20>
| `-OptimizeNoneAttr 0x557657046130 <col:30>
|-CXXMethodDecl 0x557657046268 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x557657046170 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5576570629a8 <col:35, line:562:5>
|   |-ParenExpr 0x557657062748 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x557657062718 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x557657062470 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557657062440 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557657062350 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557657062338 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5576570622f8 <col:23> 'int' lvalue ParmVar 0x557657046170 'i' 'int'
|   |   |   | `-IntegerLiteral 0x557657062318 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x557657062420 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x557657062408 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557657062370 <col:33> 'int' lvalue ParmVar 0x557657046170 'i' 'int'
|   |   |     `-BinaryOperator 0x5576570623e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5576570623d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557657062390 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x557657042e10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5576570623b0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5576570624d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5576570624b0 <col:60> 'int' 0
|   |   `-CallExpr 0x557657062678 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x557657062660 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557657062640 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x557656b15d00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5576570626b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557657062540 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5576570626d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557657062578 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5576570626e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5576570625b0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x557657062700 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557657062628 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557657062610 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576570625d0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x557657062998 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x557657062980 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x557657062968 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x557657062938 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5576570628e0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5576570628b0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x557657062860 <col:60, col:69> 'char const[48]' lvalue ->c 0x557657052d58
|             |   `-CXXMemberCallExpr 0x557657062840 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x557657062810 <col:60> '<bound member function type>' ->xanno 0x557657042a28
|             |       `-CXXThisExpr 0x557657062800 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5576570628c8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x557657062890 <col:73> 'int' lvalue ParmVar 0x557657046170 'i' 'int'
|-CXXMethodDecl 0x557657046478 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x557657046328 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5576570463a0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x557657063088 <col:41, line:577:5>
|   |-ParenExpr 0x557657062e18 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x557657062de8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x557657062b40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557657062b10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557657062a20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557657062a08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5576570629c8 <col:23> 'int' lvalue ParmVar 0x557657046328 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5576570629e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x557657062af0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x557657062ad8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557657062a40 <col:33> 'int' lvalue ParmVar 0x557657046328 'i' 'int'
|   |   |     `-BinaryOperator 0x557657062ab8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x557657062aa0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557657062a60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x557657042e10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x557657062a80 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x557657062ba0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557657062b80 <col:60> 'int' 0
|   |   `-CallExpr 0x557657062d48 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x557657062d30 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557657062d10 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x557656b15d00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557657062d88 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557657062c10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x557657062da0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557657062c48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557657062db8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557657062c80 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x557657062dd0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557657062cf8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557657062ce0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557657062ca0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x557657063068 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x557657063018 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x557657062fe8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x557657062f88 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x557657062f58 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x557657062f08 <col:47, col:56> 'char [48]' lvalue ->c 0x557657052d58
|     |     |   `-CXXMemberCallExpr 0x557657062ee8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x557657062eb8 <col:47> '<bound member function type>' ->xanno 0x557657042bc8
|     |     |       `-CXXThisExpr 0x557657062ea8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x557657062f70 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x557657062f38 <col:60> 'int' lvalue ParmVar 0x557657046328 'i' 'int'
|     `-ImplicitCastExpr 0x557657063050 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x557657063030 <col:65> 'int32_t':'int' lvalue ParmVar 0x5576570463a0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x557657046638 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x557657046540 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5576570637b8 <col:36, line:591:5>
|   |-ParenExpr 0x5576570634f8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5576570634c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x557657063220 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5576570631f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557657063100 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5576570630e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5576570630a8 <col:23> 'int' lvalue ParmVar 0x557657046540 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5576570630c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5576570631d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5576570631b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557657063120 <col:33> 'int' lvalue ParmVar 0x557657046540 'i' 'int'
|   |   |     `-BinaryOperator 0x557657063198 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x557657063180 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557657063140 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x557657042e10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x557657063160 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x557657063280 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557657063260 <col:60> 'int' 0
|   |   `-CallExpr 0x557657063428 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x557657063410 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5576570633f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x557656b15d00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557657063468 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576570632f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x557657063480 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557657063328 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557657063498 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557657063360 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5576570634b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5576570633d8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5576570633c0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557657063380 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5576570637a8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x557657063790 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x557657063778 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x557657063748 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5576570636c0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x557657063690 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x557657063640 <col:61, col:70> 'char const[48]' lvalue ->c 0x557657052d58
|             |   `-CXXMemberCallExpr 0x557657063620 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5576570635f0 <col:61> '<bound member function type>' ->xanno 0x557657042a28
|             |       `-CXXThisExpr 0x5576570635e0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5576570636a8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x557657063670 <col:74> 'int' lvalue ParmVar 0x557657046540 'i' 'int'
|-CXXMethodDecl 0x557657046888 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5576570466f8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x557657046770 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x557657063e98 <col:42, line:606:5>
|   |-ParenExpr 0x557657063c28 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x557657063bf8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x557657063950 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557657063920 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557657063830 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557657063818 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5576570637d8 <col:23> 'int' lvalue ParmVar 0x5576570466f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5576570637f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x557657063900 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5576570638e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557657063850 <col:33> 'int' lvalue ParmVar 0x5576570466f8 'i' 'int'
|   |   |     `-BinaryOperator 0x5576570638c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5576570638b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557657063870 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x557657042e10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x557657063890 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5576570639b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557657063990 <col:60> 'int' 0
|   |   `-CallExpr 0x557657063b58 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x557657063b40 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557657063b20 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x557656b15d00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557657063b98 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557657063a20 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x557657063bb0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557657063a58 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557657063bc8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557657063a90 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x557657063be0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557657063b08 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557657063af0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557657063ab0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x557657063e78 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x557657063e28 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x557657063df8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x557657063d98 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x557657063d68 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x557657063d18 <col:48, col:57> 'char [48]' lvalue ->c 0x557657052d58
|     |     |   `-CXXMemberCallExpr 0x557657063cf8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x557657063cc8 <col:48> '<bound member function type>' ->xanno 0x557657042bc8
|     |     |       `-CXXThisExpr 0x557657063cb8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x557657063d80 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x557657063d48 <col:61> 'int' lvalue ParmVar 0x5576570466f8 'i' 'int'
|     `-ImplicitCastExpr 0x557657063e60 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x557657063e40 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x557657046770 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x557657046a20 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x557657046950 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x557657064708 <col:33, line:620:5>
|   |-ParenExpr 0x557657064480 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x557657064450 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5576570640a0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557657064070 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557657063f10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557657063ef8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x557657063eb8 <col:23> 'int' lvalue ParmVar 0x557657046950 'i' 'int'
|   |   |   | `-IntegerLiteral 0x557657063ed8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x557657064050 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x557657064038 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557657063f30 <col:33> 'int' lvalue ParmVar 0x557657046950 'i' 'int'
|   |   |     `-BinaryOperator 0x557657064018 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x557657064000 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557657063f50 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x557657042e10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x557657063fd8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x557657063fc0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x557657063f88 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x557657064100 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5576570640e0 <col:79> 'int' 0
|   |   `-CallExpr 0x5576570643b0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x557657064398 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557657064378 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x557656b15d00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5576570643f0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576570641e8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x557657064408 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557657064230 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557657064420 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557657064268 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x557657064438 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557657064360 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557657064348 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557657064308 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5576570646f8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5576570646e0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5576570646c8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x557657064698 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x557657064610 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5576570645e0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x557657064590 <col:67, col:76> 'char const[48]' lvalue ->c 0x557657052d58
|             |   `-CXXMemberCallExpr 0x557657064570 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x557657064540 <col:67> '<bound member function type>' ->xanno 0x557657042a28
|             |       `-CXXThisExpr 0x557657064530 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5576570645f8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5576570645c0 <col:80> 'int' lvalue ParmVar 0x557657046950 'i' 'int'
|-CXXMethodDecl 0x557657046c38 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x557657046ae0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x557657046b60 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x557657064f30 <col:45, line:635:5>
|   |-ParenExpr 0x557657064c78 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x557657064c48 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x557657064910 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5576570648e0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557657064780 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557657064768 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x557657064728 <col:23> 'int' lvalue ParmVar 0x557657046ae0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x557657064748 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5576570648c0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5576570648a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5576570647a0 <col:33> 'int' lvalue ParmVar 0x557657046ae0 'i' 'int'
|   |   |     `-BinaryOperator 0x557657064888 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x557657064870 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5576570647c0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x557657042e10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x557657064848 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x557657064830 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5576570647f8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x557657064970 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557657064950 <col:79> 'int' 0
|   |   `-CallExpr 0x557657064ba8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x557657064b90 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557657064b70 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x557656b15d00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557657064be8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576570649e0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x557657064c00 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557657064a28 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557657064c18 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557657064a60 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x557657064c30 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557657064b58 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557657064b40 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557657064af8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x557657064f10 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x557657064e78 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x557657064e48 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x557657064de8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x557657064db8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x557657064d68 <col:54, col:63> 'char [48]' lvalue ->c 0x557657052d58
|     |     |   `-CXXMemberCallExpr 0x557657064d48 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x557657064d18 <col:54> '<bound member function type>' ->xanno 0x557657042bc8
|     |     |       `-CXXThisExpr 0x557657064d08 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x557657064dd0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x557657064d98 <col:67> 'int' lvalue ParmVar 0x557657046ae0 'i' 'int'
|     `-CXXConstCastExpr 0x557657064ee0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x557657064ec8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x557657064e90 <col:91> 'const void *' lvalue ParmVar 0x557657046b60 'x' 'const void *'
|-CXXMethodDecl 0x557657046d08 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x557657064fb8 <col:34, line:640:5>
|   `-ReturnStmt 0x557657064fa8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x557657064f90 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x557657064f60 <col:16> 'Packet *' lvalue ->_data_packet 0x557657053898
|         `-CXXThisExpr 0x557657064f50 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x557657046e48 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x557657046db8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x557657054ce8 <col:46> 'bool' true
|-CXXMethodDecl 0x557657046fc8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x557657046f00 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x557657047070 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x557657047820 <line:660:22> "" ""
| |-EnumConstantDecl 0x557657047170 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x557657047890 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557657047150 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x557657047130 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55765703c290 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x557657047200 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5576570478a8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576570471e0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5576570471c0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55765703c320 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x557657047290 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5576570478c0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557657047270 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x557657047250 <col:21> 'int' 0
| |-EnumConstantDecl 0x557657047320 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5576570478d8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557657047300 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5576570472e0 <col:19> 'int' 16
| |-EnumConstantDecl 0x5576570473b0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5576570478f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557657047390 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x557657047370 <col:21> 'int' 16
| |-EnumConstantDecl 0x557657047440 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x557657047908 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557657047420 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x557657047400 <col:19> 'int' 32
| |-EnumConstantDecl 0x5576570474d0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x557657047920 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576570474b0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x557657047490 <col:19> 'int' EnumConstant 0x557657047320 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x557657047560 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x557657047938 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557657047540 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x557657047520 <col:19> 'int' EnumConstant 0x557657047440 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x557657047630 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x557657047950 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557657047610 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5576570475f0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5576570475b0 <col:23> 'int' EnumConstant 0x557657047560 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5576570475d0 <col:40> 'int' 2
| |-EnumConstantDecl 0x557657047700 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x557657047968 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576570476e0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5576570476c0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x557657047680 <col:23> 'int' EnumConstant 0x557657047560 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5576570476a0 <col:40> 'int' 4
| `-EnumConstantDecl 0x5576570477d0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x557657047980 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576570477b0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x557657047790 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x557657047750 <col:23> 'int' EnumConstant 0x557657047560 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x557657047770 <col:40> 'int' 8
|-CXXMethodDecl 0x5576570479c0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x557657047a60 <col:68> "" ""
|-CXXMethodDecl 0x55765704f4c0 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55765704f560 <col:45> "" ""
|-CXXMethodDecl 0x55765704f5f8 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55765704f698 <col:57> "" ""
|-CXXMethodDecl 0x55765704f730 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55765704f7d0 <col:45> "" ""
|-CXXMethodDecl 0x55765704f868 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55765704f908 <col:57> "" ""
|-CXXMethodDecl 0x55765704f998 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55765704fa38 <col:51> "" ""
|-CXXMethodDecl 0x55765704fac8 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55765704fb68 <col:63> "" ""
|-CXXMethodDecl 0x55765704fbf8 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55765704fc98 <col:53> "" ""
|-CXXMethodDecl 0x55765704fd28 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55765704fdc8 <col:65> "" ""
|-CXXMethodDecl 0x55765704fee0 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55765704fe50 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55765704ff88 <col:61> "" ""
|-CXXMethodDecl 0x557657050120 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x557657050010 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x557657050088 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5576570501d0 <col:67> "" ""
|-CXXMethodDecl 0x5576570502e8 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x557657050258 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x557657050390 <col:63> "" ""
|-CXXMethodDecl 0x557657050528 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x557657050418 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x557657050490 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5576570505d8 <col:69> "" ""
|-CXXMethodDecl 0x5576570506f0 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x557657050660 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x557657050798 <col:63> "" ""
|-CXXMethodDecl 0x557657050930 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x557657050820 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x557657050898 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5576570509e0 <col:69> "" ""
|-CXXMethodDecl 0x557657050af8 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x557657050a68 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x557657050ba0 <col:62> "" ""
|-CXXMethodDecl 0x557657050d38 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x557657050c28 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x557657050ca0 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x557657050de8 <col:68> "" ""
|-CXXMethodDecl 0x557657050f00 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x557657050e70 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x557657050fa8 <col:63> "" ""
|-CXXMethodDecl 0x557657051140 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x557657051030 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5576570510a8 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5576570511f0 <col:69> "" ""
|-CXXMethodDecl 0x557657051280 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x557657051320 <col:64> "" ""
|-CXXMethodDecl 0x5576570513b0 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x557657051450 <col:52> "" ""
|-CXXMethodDecl 0x5576570514e0 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x557657051580 <col:67> "" ""
|-CXXMethodDecl 0x557657051610 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5576570516b0 <col:55> "" ""
|-CXXMethodDecl 0x5576570517c8 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x557657051738 <col:32> col:35 'int'
| `-DeprecatedAttr 0x557657051870 <col:58> "" ""
|-CXXMethodDecl 0x557657051a08 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5576570518f8 <col:33> col:36 'int'
| |-ParmVarDecl 0x557657051970 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x557657051ab8 <col:62> "" ""
|-CXXMethodDecl 0x557657051bd0 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x557657051b40 <col:32> col:35 'int'
| `-DeprecatedAttr 0x557657051c78 <col:58> "" ""
|-CXXMethodDecl 0x557657051e10 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x557657051d00 <col:33> col:36 'int'
| |-ParmVarDecl 0x557657051d78 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x557657051ec0 <col:62> "" ""
|-CXXMethodDecl 0x557657051fd8 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x557657051f48 <col:34> col:37 'int'
| `-DeprecatedAttr 0x557657052080 <col:60> "" ""
|-CXXMethodDecl 0x557657052218 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x557657052108 <col:34> col:37 'int'
| |-ParmVarDecl 0x557657052180 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5576570522c8 <col:64> "" ""
|-CXXMethodDecl 0x5576570523e0 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x557657052350 <col:32> col:35 'int'
| `-DeprecatedAttr 0x557657052488 <col:58> "" ""
|-CXXMethodDecl 0x557657052620 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x557657052510 <col:33> col:36 'int'
| |-ParmVarDecl 0x557657052588 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5576570526d0 <col:62> "" ""
|-CXXMethodDecl 0x5576570527e8 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x557657052758 <col:33> col:36 'int'
| `-DeprecatedAttr 0x557657052890 <col:59> "" ""
|-CXXMethodDecl 0x557657052a28 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x557657052918 <col:33> col:36 'int'
| |-ParmVarDecl 0x557657052990 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x557657052ad8 <col:63> "" ""
|-AccessSpecDecl 0x557657052b48 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x557657052b70 prev 0x557657042900 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x557657052c68 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x557657052d58 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x557657052e08 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x557657052f88 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x557657053108 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x557657053288 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x557657065138 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5576570659a8 <col:11>
| |-CXXDestructorDecl 0x557657065210 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x557657065348 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x557657065348
| | `-ParmVarDecl 0x557657065458 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5576570654f8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5576570654f8
| | `-ParmVarDecl 0x557657065608 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x557657068338 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x557657068448 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5576570686c8 <col:11>
| |   `-ReturnStmt 0x5576570686b8 <col:11>
| |     `-UnaryOperator 0x5576570686a0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x557657068690 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5576570684b8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5576570684b8
|   `-ParmVarDecl 0x5576570685c8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5576570532f0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x557657053408 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5576570534a8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x557657053510 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x557657053578 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5576570535e0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x557657053640 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x557657053700 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x557657053760 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5576570537c0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x557657065048 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5576570534a8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5576570659b8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x557657065a10 <col:12>
| |-CXXConstructorDecl 0x557657065678 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x557657065678
| | `-ParmVarDecl 0x557657065788 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x557657065828 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x557657065828
| | `-ParmVarDecl 0x557657065938 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x557657067a20 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x557657053838 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x557657053898 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x557657053900 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x557657053968 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5576570539d0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x557657053a38 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x557657053a98 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x557657053af8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x557657053b60 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x557657053be8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x557657053838 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x557657064fe0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x557657053a98 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x557657065a20 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x557657065a80 <col:21, line:755:5>
|-CXXConstructorDecl 0x557657053d88 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x557657053cc8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x557657053e80 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x557657054068 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x557657053f70 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x557657054338 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x557657054120 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x557657054198 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x557657054210 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557657054558 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x557657054408 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x557657054480 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x557657054828 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x557657054618 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x557657054690 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x557657054708 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x557657054980 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5576570548f0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557657054ac8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x557657054a38 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x557657054bc0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_tcp
         0 |   uint16_t th_sport
         2 |   uint16_t th_dport
         4 |   tcp_seq_t th_seq
         8 |   tcp_seq_t th_ack
    12:0-3 |   unsigned int th_flags2
    12:4-7 |   unsigned int th_off
        13 |   uint8_t th_flags
        14 |   uint16_t th_win
        16 |   uint16_t th_sum
        18 |   uint16_t th_urp
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557656d41fe8 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x557656d42108 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x557656d421d0 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x557657032e60 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x557657034f88 <col:8>
|-CXXConstructorDecl 0x557657032f68 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x557657032f68
| `-ParmVarDecl 0x557657033078 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x557657033118 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x557657033228 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x557656d421d0 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x5576570351a0 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x557657035170 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x557656d421d0
| |     `-CXXStaticCastExpr 0x557657035140 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x557657035110 <col:8> 'in_addr' lvalue ParmVar 0x557657033228 '' 'in_addr &&'
| `-CompoundStmt 0x5576570351e8 <col:8>
`-CXXDestructorDecl 0x557657035420 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557657027b40 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x557657027c58 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x557657027d40 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x557657027d20 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x557657027ce8 <col:22> 'int' 4
|-FieldDecl 0x557657027de8 <line:29:5, col:21> col:14 referenced ip_v 'unsigned int'
| `-ConstantExpr 0x557657027dc8 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x557657027d90 <col:21> 'int' 4
|-FieldDecl 0x557657027e48 <line:33:5, col:13> col:13 referenced ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x557657027ea8 <line:40:5, col:14> col:14 referenced ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x557657027f08 <line:41:5, col:14> col:14 referenced ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x557657027f68 <line:42:5, col:14> col:14 referenced ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x557657027fc8 <line:47:5, col:13> col:13 referenced ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x557657028028 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x557657028088 <line:49:5, col:14> col:14 referenced ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x5576570280f8 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x557657028168 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55765702a6b8 <../dummy_inc/clicknet/tcp.h:24:1, line:51:1> line:24:8 struct click_tcp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55765702a7d8 <col:1, col:8> col:8 implicit struct click_tcp
|-FieldDecl 0x55765702a878 <line:25:5, col:14> col:14 th_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x55765702a8d8 <line:26:5, col:14> col:14 th_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x55765702a960 <line:27:5, col:15> col:15 th_seq 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x55765702a9c0 <line:28:5, col:15> col:15 th_ack 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x55765702aa68 <line:30:5, col:26> col:14 th_flags2 'unsigned int'
| `-ConstantExpr 0x55765702aa48 <col:26> 'int' Int: 4
|   `-IntegerLiteral 0x55765702aa10 <col:26> 'int' 4
|-FieldDecl 0x55765702ab10 <line:31:5, col:23> col:14 referenced th_off 'unsigned int'
| `-ConstantExpr 0x55765702aaf0 <col:23> 'int' Int: 4
|   `-IntegerLiteral 0x55765702aab8 <col:23> 'int' 4
|-FieldDecl 0x55765702ab70 <line:39:5, col:13> col:13 referenced th_flags 'uint8_t':'unsigned char'
|-FieldDecl 0x55765702abd0 <line:48:5, col:14> col:14 referenced th_win 'uint16_t':'unsigned short'
|-FieldDecl 0x55765702ac30 <line:49:5, col:14> col:14 referenced th_sum 'uint16_t':'unsigned short'
`-FieldDecl 0x55765702ac90 <line:50:5, col:14> col:14 referenced th_urp 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557657065a90 prev 0x55765703bf10 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x557657065bc8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x557657065c58 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x557657065d00 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x557657065da0 <col:20>
| `-OptimizeNoneAttr 0x557657065df8 <col:30>
|-CXXMethodDecl 0x557657065e48 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x557657065ee8 <col:20>
| `-OptimizeNoneAttr 0x557657065f40 <col:30>
|-CXXMethodDecl 0x557657065f90 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x557657066058 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x557657066120 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x557657066238 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x557657066300 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x5576570663a0 <col:20>
| `-OptimizeNoneAttr 0x5576570663f8 <col:30>
|-CXXMethodDecl 0x557657066468 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x557657066508 <col:20>
| `-OptimizeNoneAttr 0x557657066560 <col:30>
|-CXXMethodDecl 0x557657066608 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x5576570666a8 <col:20>
| `-OptimizeNoneAttr 0x557657066700 <col:30>
|-CXXMethodDecl 0x557657066750 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x557657066868 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x557657066988 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x557657066aa8 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x557657066b70 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x557657066c10 <col:62> "" ""
|-AccessSpecDecl 0x557657066c80 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x557657066ce0 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x5576570678d8 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x557657067b00 <col:29, col:31>
|-CXXMethodDecl 0x557657066da8 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x557657066ee8 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x557657066e58 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x557657066fe0 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x557657067b10 <col:23, col:25>
|-CXXMethodDecl 0x557657067198 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x5576570670d0 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x557657067468 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x557657067250 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5576570672c8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x557657067340 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576570675f8 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x557657067530 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x5576570676f0 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x557657067758 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x557657067758
  `-ParmVarDecl 0x557657067868 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct uninitialized_type (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557656bceec8 <../dummy_inc/click/config.h:317:1, line:318:1> line:317:8 referenced struct uninitialized_type definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x557656bcefe8 <col:1, col:8> col:8 implicit struct uninitialized_type
|-CXXConstructorDecl 0x557656fa0f20 <col:8> col:8 implicit referenced constexpr uninitialized_type 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x557656fa1000 <col:8> col:8 implicit constexpr uninitialized_type 'void (const uninitialized_type &)' inline default trivial noexcept-unevaluated 0x557656fa1000
| `-ParmVarDecl 0x557656fa10e8 <col:8> col:8 'const uninitialized_type &'
|-CXXConstructorDecl 0x557656fa1188 <col:8> col:8 implicit constexpr uninitialized_type 'void (uninitialized_type &&)' inline default trivial noexcept-unevaluated 0x557656fa1188
| `-ParmVarDecl 0x557656fa1298 <col:8> col:8 'uninitialized_type &&'
`-CXXDestructorDecl 0x557656fa22c0 <col:8> col:8 implicit referenced ~uninitialized_type 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.uninitialized_type = type { i8 }
  NonVirtualBaseLLVMType:%struct.uninitialized_type = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55765700e2b0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55765700e3c8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55765700e458 <col:16, col:22> col:16 public
|-EnumDecl 0x55765700e480 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55765700e580 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55765700e7d0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55765700e560 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55765700e540 <col:21> 'int' 0
| |-EnumConstantDecl 0x55765700e610 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55765700e7e8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55765700e5f0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55765700e5d0 <col:24> 'int' 22
| |-EnumConstantDecl 0x55765700e6a0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55765700e800 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55765700e680 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55765700e660 <col:24> 'int' 34
| |-EnumConstantDecl 0x55765700e730 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55765700e818 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55765700e710 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55765700e6f0 <col:25> 'int' 95
| `-EnumConstantDecl 0x55765700e780 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x557657010190 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5576570105c8 <col:7>
|-CXXConstructorDecl 0x557657010298 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x557657010298
| `-ParmVarDecl 0x5576570103a8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x557657010448 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x557657010558 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x557657138260 <col:7>
`-CXXDestructorDecl 0x5576570126b8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55765700e848 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55765700e9a8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55765700ea38 <col:32, col:38> col:32 public
|-TypedefDecl 0x55765700ea70 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x557656bcf250 'uint32_t' sugar
|   |-Typedef 0x557656ae24c8 'uint32_t'
|   `-TypedefType 0x557656abb5a0 '__uint32_t' sugar
|     |-Typedef 0x557656abb198 '__uint32_t'
|     `-BuiltinType 0x557656a79620 'unsigned int'
|-CXXConstructorDecl 0x55765700ebb8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55765700eae0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x557657010098 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5576570105d8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55765700f950 'base' 'int'
| | `-ImplicitCastExpr 0x557657010138 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5576570100f8 <col:16> 'int' lvalue ParmVar 0x55765700eae0 'b' 'int'
| `-CompoundStmt 0x557657010648 <col:19, line:1046:5>
|-CXXMethodDecl 0x55765700f0b0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55765700ec80 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55765700ed00 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55765700ed78 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55765700edf8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55765700eeb8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55765700ef38 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55765700f508 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55765700f180 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55765700f468 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55765700f228 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55765700f2c8 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55765700f340 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5576570100b8 <col:82> 'const ArgContext' lvalue Var 0x557657005bf8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x557657011568 <col:94, line:1067:5>
| |   |-DeclStmt 0x5576570107d8 <line:1054:9, col:64>
| |   | `-VarDecl 0x557657010668 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x557657010790 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x5576570109f8 <line:1055:9, col:91>
| |   | `-VarDecl 0x557657010808 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x5576570109d0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x5576570109b0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x557657010960 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x557657010940 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x5576570108e8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x557657010898 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x5576570108c8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x557657010928 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x557657010908 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x557657010990 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x557657010b58 <line:1056:9, col:27>
| |   | `-VarDecl 0x557657010af0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x557657010f90 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x557657010ec0 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x557657010e50 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x557656e161e0 0x557656dd42d0 0x557656dd3f80 0x557656dd3870 0x557656da4af0 0x557656d60df0
| |   | | |-CallExpr 0x557657010d90 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x557657010b80 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x557657010c30 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x557657010c00 <col:19, col:23> '<bound member function type>' .begin 0x557656dc1c88
| |   | | | |   `-DeclRefExpr 0x557657010be0 <col:19> 'const String' lvalue ParmVar 0x55765700f228 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x557657010ca0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x557657010c70 <col:32, col:36> '<bound member function type>' .end 0x557656dc1ea0
| |   | | | |   `-DeclRefExpr 0x557657010c50 <col:32> 'const String' lvalue ParmVar 0x55765700f228 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x557657010cc0 <col:43> 'const bool' lvalue Var 0x557657010668 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x557657010d28 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x557657010d08 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x557657010d50 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x557657010af0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x557657010d70 <col:73> 'const int' lvalue Var 0x557657010808 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x557657010e30 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x557657010e00 <col:16, col:20> '<bound member function type>' .end 0x557656dc1ea0
| |   | |     `-DeclRefExpr 0x557657010de0 <col:16> 'const String' lvalue ParmVar 0x55765700f228 'str' 'const String &'
| |   | `-BinaryOperator 0x557657010f70 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x557657010f08 <col:13> 'int' lvalue ->status 0x55765700f9b8
| |   |   | `-CXXThisExpr 0x557657010ef8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x557657010f58 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x557657010f38 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55765700e610 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x5576570111e0 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x5576570110c8 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x5576570110b0 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x557657011098 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x557657010fb8 <col:13> 'int' lvalue ->status 0x55765700f9b8
| |   | | |     `-CXXThisExpr 0x557657010fa8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x557657011078 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x557657011048 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x557657010ff8 <col:23> 'int' lvalue ->status 0x55765700f9b8
| |   | |   |   `-CXXThisExpr 0x557657010fe8 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x557657011060 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x557657011028 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55765700e6a0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x5576570111c0 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x557657011160 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x557657011108 <col:13, col:18> '<bound member function type>' .error 0x557656fc3f10
| |   |   | | `-DeclRefExpr 0x5576570110e8 <col:13> 'const ArgContext' lvalue ParmVar 0x55765700f340 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x557657011188 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x557657011138 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x5576570111b0 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x5576570111a0 <col:20> 'bool' false
| |   |-DeclStmt 0x5576570113b8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x557657011360 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x5576570112f0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x557657011518 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x5576570113d0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x557656cb7328
| |   | |-DeclRefExpr 0x557657011418 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x557657010af0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x5576570114e8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x557657011460 <col:64> 'V' lvalue ParmVar 0x55765700f2c8 'result' 'V &'
| |   `-ReturnStmt 0x557657011558 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x557657011548 <col:16> 'bool' true
| `-CXXMethodDecl 0x55765713b908 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55765713b6e0 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55765713b7b8 <col:46, col:49> col:49 used result 'int &'
|   |-ParmVarDecl 0x55765713b820 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55765713d690 <col:94, line:1067:5>
|     |-DeclStmt 0x55765713c118 <line:1054:9, col:64>
|     | `-VarDecl 0x55765713bf38 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55765713c0a8 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55765713c078 <col:36, col:55> 'const bool' lvalue Var 0x557656ca8678 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55765713c2f8 <line:1055:9, col:91>
|     | `-VarDecl 0x55765713c130 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55765713c278 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55765713c260 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55765713c240 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55765713c220 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55765713c200 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55765713c1c8 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55765713c1a8 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x5576570108c8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55765713c1e8 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x557657010908 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x557657010990 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55765713c490 <line:1056:9, col:27>
|     | `-VarDecl 0x55765713c428 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55765713c908 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55765713c8b0 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55765713c768 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55765713c738 <col:13> '<bound member function type>' ->parse 0x55765700f0b0
|     | | | | `-CXXThisExpr 0x55765713c728 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55765713c5c8 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55765713c598 <col:19, col:23> '<bound member function type>' .begin 0x557656dc1c88
|     | | | |   `-DeclRefExpr 0x55765713c578 <col:19> 'const String' lvalue ParmVar 0x55765713b6e0 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55765713c638 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55765713c608 <col:32, col:36> '<bound member function type>' .end 0x557656dc1ea0
|     | | | |   `-DeclRefExpr 0x55765713c5e8 <col:32> 'const String' lvalue ParmVar 0x55765713b6e0 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55765713c7d8 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55765713c7b8 <col:43> 'const bool' lvalue Var 0x55765713bf38 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55765713c6c0 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55765713c6a8 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55765713c688 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
|     | | | |-ImplicitCastExpr 0x55765713c7f0 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55765713c6e8 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55765713c428 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55765713c828 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55765713c808 <col:73> 'const int' lvalue Var 0x55765713c130 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55765713c890 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55765713c860 <col:16, col:20> '<bound member function type>' .end 0x557656dc1ea0
|     | |     `-DeclRefExpr 0x55765713c840 <col:16> 'const String' lvalue ParmVar 0x55765713b6e0 'str' 'const String &'
|     | `-BinaryOperator 0x55765713c8e8 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x557657010f08 <col:13> 'int' lvalue ->status 0x55765700f9b8
|     |   | `-CXXThisExpr 0x557657010ef8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55765713c8d0 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x557657010f38 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55765700e610 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55765713ca80 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55765713c9a0 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55765713c988 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55765713c970 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x557657010fb8 <col:13> 'int' lvalue ->status 0x55765700f9b8
|     | | |     `-CXXThisExpr 0x557657010fa8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55765713c950 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55765713c920 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x557657010ff8 <col:23> 'int' lvalue ->status 0x55765700f9b8
|     | |   |   `-CXXThisExpr 0x557657010fe8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55765713c938 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x557657011028 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55765700e6a0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55765713ca60 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55765713ca10 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55765713c9e0 <col:13, col:18> '<bound member function type>' .error 0x557656fc3f10
|     |   | | `-DeclRefExpr 0x55765713c9c0 <col:13> 'const ArgContext' lvalue ParmVar 0x55765713b820 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55765713ca38 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x557657011138 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55765713ca50 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x5576570111a0 <col:20> 'bool' false
|     |-DeclStmt 0x55765713cfc8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55765713cf70 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
|     |   `-ElaboratedType 0x55765713cf20 'typename make_unsigned<int>::type' sugar
|     |     `-TypedefType 0x55765713cf00 'make_unsigned<int>::type' sugar
|     |       |-Typedef 0x55765713ce90 'type'
|     |       `-ElaboratedType 0x55765713ce40 'typename integer_traits<int>::unsigned_type' sugar
|     |         `-TypedefType 0x55765713ce20 'integer_traits<int>::unsigned_type' sugar
|     |           |-Typedef 0x557656ca87d0 'unsigned_type'
|     |           `-BuiltinType 0x557656a79620 'unsigned int'
|     |-CallExpr 0x55765713d620 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55765713d608 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55765713d588 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55765713d468 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x557656cb7328 'extract_integer')
|     | |-ImplicitCastExpr 0x55765713d668 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55765713d650 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55765713d028 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55765713c428 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55765713d0f8 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
|     |   `-DeclRefExpr 0x55765713d0a8 <col:64> 'int':'int' lvalue ParmVar 0x55765713b7b8 'result' 'int &'
|     `-ReturnStmt 0x55765713d680 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x557657011548 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55765700f8c8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55765700f578 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55765700f828 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55765700f628 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55765700f6c8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55765700f740 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5576570100d8 <col:71> 'const ArgContext' lvalue Var 0x557657005bf8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x557657011cd8 <col:83, line:1083:5>
| |   |-DeclStmt 0x557657011630 <line:1071:9, col:12>
| |   | `-VarDecl 0x5576570115c8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x557657011cb0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5576570118c0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x557657011748 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x557657011710 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x557657011658 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x5576570116b0 <col:31> 'const String' lvalue ParmVar 0x55765700f628 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5576570116d0 <col:36> 'V' lvalue Var 0x5576570115c8 'x' 'V'
| |     | |   `-DeclRefExpr 0x5576570116f0 <col:39> 'const ArgContext' lvalue ParmVar 0x55765700f740 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5576570118a0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x557657011880 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x557657011868 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x557657011850 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x557657011770 <col:17> 'int' lvalue ->status 0x55765700f9b8
| |     |     |     `-CXXThisExpr 0x557657011760 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x557657011830 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x557657011800 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5576570117b0 <col:27> 'int' lvalue ->status 0x55765700f9b8
| |     |       |   `-CXXThisExpr 0x5576570117a0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x557657011818 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5576570117e0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55765700e6a0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5576570118f0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5576570118e0 <col:20> 'bool' false
| |     `-IfStmt 0x557657011c88 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x557657011990 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x557657011960 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x557657011910 <col:18> 'int' lvalue ->status 0x55765700f9b8
| |       | |   `-CXXThisExpr 0x557657011900 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x557657011978 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x557657011940 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55765700e6a0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x557657011bc8 <col:42, line:1079:9>
| |       | |-CallExpr 0x557657011b70 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x5576570119c0 <line:1076:13> '<bound member function type>' ->range_error 0x55765700ffc8
| |       | | | `-CXXThisExpr 0x5576570119b0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5576570119f0 <col:25> 'const ArgContext' lvalue ParmVar 0x55765700f740 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x557657011ad0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x557657011b48 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x557657011b28 <col:43> 'V' lvalue Var 0x5576570115c8 'x' 'V'
| |       | `-ReturnStmt 0x557657011bb8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x557657011ba8 <col:20> 'bool' false
| |       `-CompoundStmt 0x557657011c68 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x557657011c28 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x557657011be8 <col:13> 'V' lvalue ParmVar 0x55765700f6c8 'result' 'V &'
| |         | `-DeclRefExpr 0x557657011c08 <col:22> 'V' lvalue Var 0x5576570115c8 'x' 'V'
| |         `-ReturnStmt 0x557657011c58 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x557657011c48 <col:20> 'bool' true
| `-CXXMethodDecl 0x55765713b2c8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55765713b0a0 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55765713b178 <col:35, col:38> col:38 used result 'int &'
|   |-ParmVarDecl 0x55765713b1e0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x55765713bf18 <col:83, line:1083:5>
|     |-DeclStmt 0x55765713b550 <line:1071:9, col:12>
|     | `-VarDecl 0x55765713b4e8 <col:9, col:11> col:11 used x 'int':'int'
|     `-IfStmt 0x55765713bef0 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55765713bb80 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55765713baa8 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55765713ba70 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55765713ba28 <col:14> '<bound member function type>' ->parse_saturating 0x55765713b908
|       | |   | `-CXXThisExpr 0x55765713ba18 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55765713b5c0 <col:31> 'const String' lvalue ParmVar 0x55765713b0a0 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55765713b5e0 <col:36> 'int':'int' lvalue Var 0x55765713b4e8 'x' 'int':'int'
|       | |   `-DeclRefExpr 0x55765713b600 <col:39> 'const ArgContext' lvalue ParmVar 0x55765713b1e0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55765713bb60 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55765713bb40 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55765713bb28 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55765713bb10 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x557657011770 <col:17> 'int' lvalue ->status 0x55765700f9b8
|       |     |     `-CXXThisExpr 0x557657011760 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55765713baf0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55765713bac0 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x5576570117b0 <col:27> 'int' lvalue ->status 0x55765700f9b8
|       |       |   `-CXXThisExpr 0x5576570117a0 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55765713bad8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x5576570117e0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55765700e6a0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55765713bba0 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x5576570118e0 <col:20> 'bool' false
|       `-IfStmt 0x55765713bec8 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55765713bbe0 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55765713bbb0 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x557657011910 <col:18> 'int' lvalue ->status 0x55765700f9b8
|         | |   `-CXXThisExpr 0x557657011900 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55765713bbc8 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x557657011940 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55765700e6a0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55765713be00 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55765713bd70 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x5576570119c0 <line:1076:13> '<bound member function type>' ->range_error 0x55765700ffc8
|         | | | `-CXXThisExpr 0x5576570119b0 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55765713bc00 <col:25> 'const ArgContext' lvalue ParmVar 0x55765713b1e0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55765713bdd8 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55765713bda8 <col:31, col:50> 'const bool' lvalue Var 0x557656ca8678 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55765713bd48 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55765713bd30 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55765713bd18 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55765713bcf8 <col:43> 'int':'int' lvalue Var 0x55765713b4e8 'x' 'int':'int'
|         | `-ReturnStmt 0x55765713bdf0 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x557657011ba8 <col:20> 'bool' false
|         `-CompoundStmt 0x55765713bea8 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55765713be78 <line:1080:13, col:22> 'int':'int' lvalue '='
|           | |-DeclRefExpr 0x55765713be20 <col:13> 'int':'int' lvalue ParmVar 0x55765713b178 'result' 'int &'
|           | `-ImplicitCastExpr 0x55765713be60 <col:22> 'int':'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x55765713be40 <col:22> 'int':'int' lvalue Var 0x55765713b4e8 'x' 'int':'int'
|           `-ReturnStmt 0x55765713be98 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x557657011c48 <col:20> 'bool' true
|-FieldDecl 0x55765700f950 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55765700f9b8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55765700fa08 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55765700fcc0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55765700fa48 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55765700fac8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55765700fb40 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55765700fbc0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55765700ffc8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55765700fd90 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55765700fe08 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55765700fea0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x557657012538 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x557657012538
| `-ParmVarDecl 0x557657012648 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x5576570127c8 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5576570128d8 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x557657138270 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x557657138240 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x557657138210 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5576571381e0 <col:7> 'IntArg' lvalue ParmVar 0x5576570128d8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55765700f950 'base' 'int'
| | `-ImplicitCastExpr 0x557657138368 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x557657138338 <col:7> 'int' xvalue .base 0x55765700f950
| |     `-CXXStaticCastExpr 0x557657138308 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5576571382d8 <col:7> 'IntArg' lvalue ParmVar 0x5576570128d8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55765700f9b8 'status' 'int'
| | `-ImplicitCastExpr 0x557657138438 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x557657138408 <col:7> 'int' xvalue .status 0x55765700f9b8
| |     `-CXXStaticCastExpr 0x5576571383d8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5576571383a8 <col:7> 'IntArg' lvalue ParmVar 0x5576570128d8 '' 'IntArg &&'
| `-CompoundStmt 0x557657138490 <col:7>
`-CXXDestructorDecl 0x557657137390 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x557657016e90 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5576570170e8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5576571372b8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x557657137830 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x557657137810 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5576571378a0 <col:19>
|-CXXConstructorDecl 0x557657137498 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x557657137498
| `-ParmVarDecl 0x5576571375a8 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x557657137648 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x557657137758 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5576571384a0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5576571381c0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x557657138190 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x557657138160 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x557657137758 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x557657138510 <col:19>
`-CXXDestructorDecl 0x5576571378e0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
