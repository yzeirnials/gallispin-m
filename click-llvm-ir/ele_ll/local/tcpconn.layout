
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct TimerSet::heap_element
         0 |   class Timestamp expiry_s
         0 |     union Timestamp::rep_t _t
         0 |       int64_t x
         8 |   class Timer * t
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct pollfd
         0 |   int fd
         4 |   short events
         6 |   short revents
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct SelectSet::SelectorInfo
         0 |   class Element * read
         8 |   class Element * write
        16 |   int pollfd
           | [sizeof=24, dsize=20, align=8,
           |  nvsize=20, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Router::Port
         0 |   int idx
         4 |   int port
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct Router::element_landmark_t
         0 |   uint32_t first_landmarkid
         8 |   class String filename
         8 |     struct String::rep_t _r
         8 |       const char * data
        16 |       int length
        24 |       struct String::memo_t * memo
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Router::Connection
         0 |   struct Router::Port [2] p
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0e9a748 prev 0x5611b0e91f98 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5611b0e9a840 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5611b0e9a8d0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5611b0e9a948 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5611b0e9aa08 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5611b0e9aad0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5611b0e9ac48 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5611b0e9ab80 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5611b0e9acf0 <col:24>
| `-OptimizeNoneAttr 0x5611b0e9ad48 <col:34>
|-CXXMethodDecl 0x5611b0e9ad90 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5611b0e9b048 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5611b0e9ae40 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5611b0e9aeb8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5611b0e9af38 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5611b0e9b100 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5611b0e9b138 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5611b0e9b1a0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5611b0e9b228 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5611b0e9b548 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5611b0e9b2e0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5611b0e9b358 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5611b0e9b3d0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5611b0e9b450 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5611b0e9b660 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5611b0ea1f58 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5611b0ea1f58
| `-ParmVarDecl 0x5611b0ea2068 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5611b0ea2108 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5611b0ea2108
| `-ParmVarDecl 0x5611b0ea2218 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5611b102fec8 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<8> >
         0 |   vector_memory<class sized_array_memory<8> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class Element *>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<unsigned int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<struct Router::element_landmark_t> >
         0 |   vector_memory<class typed_array_memory<struct Router::element_landmark_t> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct Router::element_landmark_t>
         0 |   class vector_memory<class typed_array_memory<struct Router::element_landmark_t> > vm_
         0 |     vector_memory<class typed_array_memory<struct Router::element_landmark_t> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<16> >
         0 |   vector_memory<class sized_array_memory<16> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct Router::Connection>
         0 |   class vector_memory<class sized_array_memory<16> > vm_
         0 |     vector_memory<class sized_array_memory<16> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<void *>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Router
         0 |   class Master * _master
         8 |   class atomic_uint32_t _runcount
         8 |     uint32_t _val
        12 |   volatile int _state
    16:0-0 |   _Bool _have_connections
    16:1-1 |   _Bool _conn_sorted
    16:2-2 |   _Bool _have_configuration
        20 |   volatile int _running
        24 |   class atomic_uint32_t _refcount
        24 |     uint32_t _val
        32 |   class Vector<class Element *> _elements
        32 |     class vector_memory<class sized_array_memory<8> > vm_
        32 |       vector_memory<class sized_array_memory<8> >::type * l_
        40 |       vector_memory::size_type n_
        44 |       vector_memory::size_type capacity_
        48 |   class Vector<class String> _element_names
        48 |     class vector_memory<class typed_array_memory<class String> > vm_
        48 |       vector_memory<class typed_array_memory<class String> >::type * l_
        56 |       vector_memory::size_type n_
        60 |       vector_memory::size_type capacity_
        64 |   class Vector<class String> _element_configurations
        64 |     class vector_memory<class typed_array_memory<class String> > vm_
        64 |       vector_memory<class typed_array_memory<class String> >::type * l_
        72 |       vector_memory::size_type n_
        76 |       vector_memory::size_type capacity_
        80 |   class Vector<unsigned int> _element_landmarkids
        80 |     class vector_memory<class sized_array_memory<4> > vm_
        80 |       vector_memory<class sized_array_memory<4> >::type * l_
        88 |       vector_memory::size_type n_
        92 |       vector_memory::size_type capacity_
        96 |   class Vector<int> _element_home_thread_ids
        96 |     class vector_memory<class sized_array_memory<4> > vm_
        96 |       vector_memory<class sized_array_memory<4> >::type * l_
       104 |       vector_memory::size_type n_
       108 |       vector_memory::size_type capacity_
       112 |   class Vector<struct Router::element_landmark_t> _element_landmarks
       112 |     class vector_memory<class typed_array_memory<struct Router::element_landmark_t> > vm_
       112 |       vector_memory<class typed_array_memory<struct Router::element_landmark_t> >::type * l_
       120 |       vector_memory::size_type n_
       124 |       vector_memory::size_type capacity_
       128 |   uint32_t _last_landmarkid
       136 |   class Vector<int> _element_name_sorter
       136 |     class vector_memory<class sized_array_memory<4> > vm_
       136 |       vector_memory<class sized_array_memory<4> >::type * l_
       144 |       vector_memory::size_type n_
       148 |       vector_memory::size_type capacity_
       152 |   Vector<int> [2] _element_gport_offset
       184 |   class Vector<int> _element_configure_order
       184 |     class vector_memory<class sized_array_memory<4> > vm_
       184 |       vector_memory<class sized_array_memory<4> >::type * l_
       192 |       vector_memory::size_type n_
       196 |       vector_memory::size_type capacity_
       200 |   class Vector<struct Router::Connection> _conn
       200 |     class vector_memory<class sized_array_memory<16> > vm_
       200 |       vector_memory<class sized_array_memory<16> >::type * l_
       208 |       vector_memory::size_type n_
       212 |       vector_memory::size_type capacity_
       216 |   class Vector<int> _conn_output_sorter
       216 |     class vector_memory<class sized_array_memory<4> > vm_
       216 |       vector_memory<class sized_array_memory<4> >::type * l_
       224 |       vector_memory::size_type n_
       228 |       vector_memory::size_type capacity_
       232 |   class Vector<class String> _requirements
       232 |     class vector_memory<class typed_array_memory<class String> > vm_
       232 |       vector_memory<class typed_array_memory<class String> >::type * l_
       240 |       vector_memory::size_type n_
       244 |       vector_memory::size_type capacity_
       248 |   class Vector<int> _ehandler_first_by_element
       248 |     class vector_memory<class sized_array_memory<4> > vm_
       248 |       vector_memory<class sized_array_memory<4> >::type * l_
       256 |       vector_memory::size_type n_
       260 |       vector_memory::size_type capacity_
       264 |   class Vector<int> _ehandler_to_handler
       264 |     class vector_memory<class sized_array_memory<4> > vm_
       264 |       vector_memory<class sized_array_memory<4> >::type * l_
       272 |       vector_memory::size_type n_
       276 |       vector_memory::size_type capacity_
       280 |   class Vector<int> _ehandler_next
       280 |     class vector_memory<class sized_array_memory<4> > vm_
       280 |       vector_memory<class sized_array_memory<4> >::type * l_
       288 |       vector_memory::size_type n_
       292 |       vector_memory::size_type capacity_
       296 |   class Vector<int> _handler_first_by_name
       296 |     class vector_memory<class sized_array_memory<4> > vm_
       296 |       vector_memory<class sized_array_memory<4> >::type * l_
       304 |       vector_memory::size_type n_
       308 |       vector_memory::size_type capacity_
       312 |   class Handler ** _handler_bufs
       320 |   int _nhandlers_bufs
       324 |   int _free_handler
       328 |   class Vector<class String> _attachment_names
       328 |     class vector_memory<class typed_array_memory<class String> > vm_
       328 |       vector_memory<class typed_array_memory<class String> >::type * l_
       336 |       vector_memory::size_type n_
       340 |       vector_memory::size_type capacity_
       344 |   class Vector<void *> _attachments
       344 |     class vector_memory<class sized_array_memory<8> > vm_
       344 |       vector_memory<class sized_array_memory<8> >::type * l_
       352 |       vector_memory::size_type n_
       356 |       vector_memory::size_type capacity_
       360 |   class Element * _root_element
       368 |   class String _configuration
       368 |     struct String::rep_t _r
       368 |       const char * data
       376 |       int length
       384 |       struct String::memo_t * memo
       392 |   struct Router::notifier_signals_t * _notifier_signals
       400 |   class HashMap_ArenaFactory * _arena_factory
       408 |   class Router * _hotswap_router
       416 |   class ThreadSched * _thread_sched
       424 |   class NameInfo * _name_info
       432 |   class Vector<int> _flow_code_override_eindex
       432 |     class vector_memory<class sized_array_memory<4> > vm_
       432 |       vector_memory<class sized_array_memory<4> >::type * l_
       440 |       vector_memory::size_type n_
       444 |       vector_memory::size_type capacity_
       448 |   class Vector<class String> _flow_code_override
       448 |     class vector_memory<class typed_array_memory<class String> > vm_
       448 |       vector_memory<class typed_array_memory<class String> >::type * l_
       456 |       vector_memory::size_type n_
       460 |       vector_memory::size_type capacity_
       464 |   class Router * _next_router
           | [sizeof=472, dsize=472, align=8,
           |  nvsize=472, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0b7b3b0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5611b0b7b4c8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5611b0b7b558 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5611b0b7b628 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5611b0b7b710 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5611b0b7b928 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5611b0b7b7d0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0b7bad8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5611b0b7b9e0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5611b0b7bc20 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5611b0b7bb90 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5611b0b7bd68 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5611b0b7bcd8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0b7beb0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5611b0b7be20 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0b7bf78 <line:67:5, col:28> col:17 used operator++ 'void ()' inline
|-CXXMethodDecl 0x5611b0b7c0c0 <line:68:5, col:31> col:17 used operator++ 'void (int)' inline
| `-ParmVarDecl 0x5611b0b7c030 <col:28> col:31 'int'
|-CXXMethodDecl 0x5611b0b7c188 <line:69:5, col:28> col:17 used operator-- 'void ()' inline
|-CXXMethodDecl 0x5611b0b7c2d0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5611b0b7c240 <col:28> col:31 'int'
|-CXXMethodDecl 0x5611b0b7c448 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5611b0b7c388 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0b7c590 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5611b0b7c500 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0b7c658 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5611b0b7c818 <line:75:5, col:69> col:21 used compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5611b0b7c708 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5611b0b7c780 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0b7ca68 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5611b0b7c8d8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5611b0b7c950 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5611b0b7cb18 <col:86> "" ""
|-CXXMethodDecl 0x5611b0b7cd88 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5611b0b7cbf8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5611b0b7cc70 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0b7cf38 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5611b0b7ce48 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5611b0b7d0e8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5611b0b7cff0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5611b0b7d3b8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5611b0b7d1a0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5611b0b7d218 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5611b0b7d290 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0b7d698 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5611b0b7d480 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5611b0b7d4f8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5611b0b7d570 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5611b0b7d750 <col:115> "" ""
|-AccessSpecDecl 0x5611b0b7d7c0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5611b0b7d7f8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0b7dca8 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5611b0b7dca8
| `-ParmVarDecl 0x5611b0b7ddb8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5611b0b7de58 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5611b0b7de58
| `-ParmVarDecl 0x5611b0b7df68 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5611b0bb4c58 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5611b0e5eda0 <col:7>
|-CXXConstructorDecl 0x5611b0bb4d30 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5611b0bb4d30
| `-ParmVarDecl 0x5611b0bb4e48 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5611b0bb4eb8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5611b0bb4eb8
| `-ParmVarDecl 0x5611b0bb4fc8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5611b0e617a0 <col:7> col:7 implicit referenced ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5611b0eb8260 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<8>'
|-CXXRecordDecl 0x5611b0eb8438 prev 0x5611b0eb8260 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5611b0eb84c8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5611b0eb84f0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0eba0c0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<8>::type':'char_array<8>'
| `-ElaboratedType 0x5611b0eba070 'typename sized_array_memory<8>::type' sugar
|   `-TypedefType 0x5611b0eb89a0 'sized_array_memory<8>::type' sugar
|     |-Typedef 0x5611b0eb88a0 'type'
|     `-TemplateSpecializationType 0x5611b0eb8830 'char_array<8UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5611b0eb8710 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|       |   `-SubstNonTypeTemplateParmExpr 0x5611b0eb86f0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5611b0eb86d0 <col:24> 'unsigned long' 8
|       `-RecordType 0x5611b0eb8810 'char_array<8>'
|         `-ClassTemplateSpecialization 0x5611b0eb8730 'char_array'
|-TypedefDecl 0x5611b0eba178 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<8> >::type *'
| `-PointerType 0x5611b0eba140 'vector_memory<sized_array_memory<8> >::type *'
|   `-TypedefType 0x5611b0eba120 'vector_memory<sized_array_memory<8> >::type' sugar
|     |-Typedef 0x5611b0eba0c0 'type'
|     `-ElaboratedType 0x5611b0eba070 'typename sized_array_memory<8>::type' sugar
|       `-TypedefType 0x5611b0eb89a0 'sized_array_memory<8>::type' sugar
|         |-Typedef 0x5611b0eb88a0 'type'
|         `-TemplateSpecializationType 0x5611b0eb8830 'char_array<8UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5611b0eb8710 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|           |   `-SubstNonTypeTemplateParmExpr 0x5611b0eb86f0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5611b0eb86d0 <col:24> 'unsigned long' 8
|           `-RecordType 0x5611b0eb8810 'char_array<8>'
|             `-ClassTemplateSpecialization 0x5611b0eb8730 'char_array'
|-CXXMethodDecl 0x5611b0eba2f8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<8> >::type *) const' inline
| `-ParmVarDecl 0x5611b0eba208 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXConstructorDecl 0x5611b0eba3e8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5611b0eba4c8 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5611b0eba798 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x5611b0eba6a0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<8> > &'
|-CXXMethodDecl 0x5611b0eba9d8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x5611b0eba850 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5611b0eba8c8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5611b0ebaba8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x5611b0ebaa98 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5611b0ebab10 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5611b0ebad08 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x5611b0ebadd8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x5611b0ebb028 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x5611b0ebae98 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x5611b0ebaf10 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5611b0ebb288 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, vector_memory<sized_array_memory<8> >::iterator)'
| |-ParmVarDecl 0x5611b0ebb0f8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x5611b0ebb170 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5611b0ebb448 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x5611b0ebb358 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5611b0ebb608 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x5611b0ebb510 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5611b0ebb6c0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5611b0ebb770 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5611b0ebb9a8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x5611b0ebb820 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5611b0ebb898 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5611b0ebbc48 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x5611b0ebbb50 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<8> > &'
|-FieldDecl 0x5611b0ebbd10 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<8> >::type *'
|-FieldDecl 0x5611b0ebbd60 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5611b0ebbdb0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5611b0eb69e8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Element *'
|-CXXRecordDecl 0x5611b0eb7090 prev 0x5611b0eb69e8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5611b0eb81d0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<Element *>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x5611b0eb8180 'typename array_memory<Element *>::type' sugar
|   `-TypedefType 0x5611b0eb8160 'conditional<true, sized_array_memory<8>, typed_array_memory<Element *> >::type' sugar
|     |-Typedef 0x5611b0eb8010 'type'
|     `-SubstTemplateTypeParmType 0x5611b0eb7e30 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x5611b0a748b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0a74858 'T'
|       `-RecordType 0x5611b0eb7980 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x5611b0eb7898 'sized_array_memory'
|-FieldDecl 0x5611b0ebbe00 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Element *>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x5611b0ebbe50 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5611b0ebbe88 <line:118:5, col:15> col:15 value_type 'Element *':'Element *'
| `-SubstTemplateTypeParmType 0x5611b0eb7120 'Element *' sugar
|   |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5611b0b584d8 'T'
|   `-PointerType 0x5611b0bc7ab0 'Element *'
|     `-RecordType 0x5611b0bb9b00 'Element'
|       `-CXXRecord 0x5611b0e8d9e0 'Element'
|-TypedefDecl 0x5611b0ebbf18 <line:119:5, col:16> col:16 reference 'Element *&'
| `-LValueReferenceType 0x5611b0ebbee0 'Element *&'
|   `-SubstTemplateTypeParmType 0x5611b0eb7120 'Element *' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-PointerType 0x5611b0bc7ab0 'Element *'
|       `-RecordType 0x5611b0bb9b00 'Element'
|         `-CXXRecord 0x5611b0e8d9e0 'Element'
|-TypedefDecl 0x5611b0ebbfd8 <line:120:5, col:22> col:22 const_reference 'Element *const &'
| `-LValueReferenceType 0x5611b0ebbfa0 'Element *const &'
|   `-QualType 0x5611b0eb7121 'Element *const' const
|     `-SubstTemplateTypeParmType 0x5611b0eb7120 'Element *' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-PointerType 0x5611b0bc7ab0 'Element *'
|         `-RecordType 0x5611b0bb9b00 'Element'
|           `-CXXRecord 0x5611b0e8d9e0 'Element'
|-TypedefDecl 0x5611b0ebc068 <line:121:5, col:16> col:16 pointer 'Element **'
| `-PointerType 0x5611b0ebc030 'Element **'
|   `-SubstTemplateTypeParmType 0x5611b0eb7120 'Element *' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-PointerType 0x5611b0bc7ab0 'Element *'
|       `-RecordType 0x5611b0bb9b00 'Element'
|         `-CXXRecord 0x5611b0e8d9e0 'Element'
|-TypedefDecl 0x5611b0ebc128 <line:122:5, col:22> col:22 const_pointer 'Element *const *'
| `-PointerType 0x5611b0ebc0f0 'Element *const *'
|   `-QualType 0x5611b0eb7121 'Element *const' const
|     `-SubstTemplateTypeParmType 0x5611b0eb7120 'Element *' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-PointerType 0x5611b0bc7ab0 'Element *'
|         `-RecordType 0x5611b0bb9b00 'Element'
|           `-CXXRecord 0x5611b0e8d9e0 'Element'
|-TypedefDecl 0x5611b0ebd740 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<Element *>::type':'Element *'
| `-ElaboratedType 0x5611b0ebd6f0 'typename fast_argument<Element *>::type' sugar
|   `-TypedefType 0x5611b0ebd6d0 'fast_argument<Element *, false>::type' sugar
|     |-Typedef 0x5611b0ebd660 'type'
|     `-SubstTemplateTypeParmType 0x5611b0ebc9e0 'Element *' sugar
|       |-TemplateTypeParmType 0x5611b0a7eca0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0a7ec50 'T'
|       `-PointerType 0x5611b0bc7ab0 'Element *'
|         `-RecordType 0x5611b0bb9b00 'Element'
|           `-CXXRecord 0x5611b0e8d9e0 'Element'
|-TypedefDecl 0x5611b0ebd7a8 <line:126:5, col:22> col:22 const_access_type 'Element *const &'
| `-LValueReferenceType 0x5611b0ebbfa0 'Element *const &'
|   `-QualType 0x5611b0eb7121 'Element *const' const
|     `-SubstTemplateTypeParmType 0x5611b0eb7120 'Element *' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-PointerType 0x5611b0bc7ab0 'Element *'
|         `-RecordType 0x5611b0bb9b00 'Element'
|           `-CXXRecord 0x5611b0e8d9e0 'Element'
|-TypedefDecl 0x5611b0ebd800 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0ebd868 <line:130:5, col:16> col:16 iterator 'Element **'
| `-PointerType 0x5611b0ebc030 'Element **'
|   `-SubstTemplateTypeParmType 0x5611b0eb7120 'Element *' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-PointerType 0x5611b0bc7ab0 'Element *'
|       `-RecordType 0x5611b0bb9b00 'Element'
|         `-CXXRecord 0x5611b0e8d9e0 'Element'
|-TypedefDecl 0x5611b0ebd8d0 <line:131:5, col:22> col:22 referenced const_iterator 'Element *const *'
| `-PointerType 0x5611b0ebc0f0 'Element *const *'
|   `-QualType 0x5611b0eb7121 'Element *const' const
|     `-SubstTemplateTypeParmType 0x5611b0eb7120 'Element *' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-PointerType 0x5611b0bc7ab0 'Element *'
|         `-RecordType 0x5611b0bb9b00 'Element'
|           `-CXXRecord 0x5611b0e8d9e0 'Element'
|-EnumDecl 0x5611b0ebd928 <line:134:5> col:5
| `-EnumConstantDecl 0x5611b0ebda20 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Element *>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5611b0ebda00 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5611b0b59f18 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5611b0b59ef0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5611b0b59ed0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5611b0ebdaa8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5611b0ebdd38 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Element *>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0ebdb60 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0ebdc00 <col:41, col:61> col:61 v 'Vector<Element *>::value_argument_type':'Element *'
|-CXXConstructorDecl 0x5611b0ebdfc8 <line:139:5, col:37> col:12 Vector 'void (const Vector<Element *> &)' inline
| `-ParmVarDecl 0x5611b0ebdeb0 <col:19, col:36> col:36 x 'const Vector<Element *> &'
|-CXXConstructorDecl 0x5611b0ebe288 <line:141:5, col:32> col:12 Vector 'void (Vector<Element *> &&)' inline
| `-ParmVarDecl 0x5611b0ebe170 <col:19, col:31> col:31 x 'Vector<Element *> &&'
|-CXXMethodDecl 0x5611b0ebe5d0 <line:144:5, col:51> col:23 operator= 'Vector<Element *> &(const Vector<Element *> &)' inline
| `-ParmVarDecl 0x5611b0ebe4b0 <col:33, col:50> col:50 x 'const Vector<Element *> &'
|-CXXMethodDecl 0x5611b0ebe8e0 <line:146:5, col:46> col:23 operator= 'Vector<Element *> &(Vector<Element *> &&)' inline
| `-ParmVarDecl 0x5611b0ebe7c0 <col:33, col:45> col:45 x 'Vector<Element *> &&'
|-CXXMethodDecl 0x5611b0ebebd0 <line:148:5, col:70> col:23 assign 'Vector<Element *> &(Vector::size_type, Vector<Element *>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0ebea18 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0ebea90 <col:43, col:69> col:63 v 'Vector<Element *>::value_argument_type':'Element *'
|-CXXMethodDecl 0x5611b0ebed28 <line:150:5, col:55> col:49 begin 'Vector<Element *>::iterator ()'
| |-NoInlineAttr 0x5611b0ebee08 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0ebee60 <col:30> Inherited
|-CXXMethodDecl 0x5611b0ebeea8 <line:151:5, col:53> col:49 end 'Vector<Element *>::iterator ()'
| |-NoInlineAttr 0x5611b0ebef58 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0ebefb0 <col:30> Inherited
|-CXXMethodDecl 0x5611b0ebf078 <line:152:5, col:63> col:55 used begin 'Vector<Element *>::const_iterator () const'
| |-NoInlineAttr 0x5611b0ebf128 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0ebf180 <col:30> Inherited
|-CXXMethodDecl 0x5611b0ebf1c8 <line:153:5, col:61> col:55 used end 'Vector<Element *>::const_iterator () const'
| |-NoInlineAttr 0x5611b0ebf278 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0ebf2d0 <col:30> Inherited
|-CXXMethodDecl 0x5611b0ebf318 <line:154:5, col:64> col:55 cbegin 'Vector<Element *>::const_iterator () const'
| |-NoInlineAttr 0x5611b0ebf3c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0ebf420 <col:30> Inherited
|-CXXMethodDecl 0x5611b0ebf468 <line:155:5, col:62> col:55 cend 'Vector<Element *>::const_iterator () const'
| |-NoInlineAttr 0x5611b0ebf518 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0ebf570 <col:30> Inherited
|-CXXMethodDecl 0x5611b0ebf598 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5611b0ebf648 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5611b0ebf6f8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5611b0ebf8b8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Element *>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0ebf7a8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0ebf820 <col:37, col:63> col:57 v 'Vector<Element *>::value_argument_type':'Element *'
|-CXXMethodDecl 0x5611b0ebfa08 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0ebf978 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0ebfbb8 <line:163:5, col:65> col:43 operator[] 'Element *&(Vector::size_type)'
| |-ParmVarDecl 0x5611b0ebfac0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5611b0ebfc70 <col:20>
| `-OptimizeNoneAttr 0x5611b0ebfcc8 <col:30>
|-CXXMethodDecl 0x5611b0ebfde8 <line:164:5, col:73> col:49 used operator[] 'Element *const &(Vector::size_type) const'
| |-ParmVarDecl 0x5611b0ebfcf0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5611b0ebfea0 <col:20>
| `-OptimizeNoneAttr 0x5611b0ebfef8 <col:30>
|-CXXMethodDecl 0x5611b0ebffb0 <line:165:5, col:29> col:15 at 'Element *&(Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0ebff20 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0ec00f8 <line:166:5, col:37> col:21 at 'Element *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5611b0ec0068 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0ec0228 <line:167:5, col:21> col:15 front 'Element *&()' inline
|-CXXMethodDecl 0x5611b0ec0358 <line:168:5, col:29> col:21 front 'Element *const &() const' inline
|-CXXMethodDecl 0x5611b0ec0428 <line:169:5, col:20> col:15 back 'Element *&()' inline
|-CXXMethodDecl 0x5611b0ec04f8 <line:170:5, col:28> col:21 back 'Element *const &() const' inline
|-CXXMethodDecl 0x5611b0ec0638 <line:172:5, col:39> col:15 unchecked_at 'Element *&(Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0ec05a8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0ec0780 <line:173:5, col:47> col:21 unchecked_at 'Element *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5611b0ec06f0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0ec08c8 <line:174:5, col:59> col:15 at_u 'Element *&(Vector::size_type)' inline
| |-ParmVarDecl 0x5611b0ec0838 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5611b0ec0980 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5611b0ec0a80 <line:175:5, col:71> col:21 at_u 'Element *const &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5611b0ec09f0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5611b0ec0b38 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5611b0ec0bf8 <line:177:5, col:20> col:15 data 'Element **()' inline
|-CXXMethodDecl 0x5611b0ec0cf8 <line:178:5, col:28> col:21 data 'Element *const *() const' inline
|-CXXMethodDecl 0x5611b0ec0ea8 <line:180:5, col:48> col:17 used push_back 'void (Vector<Element *>::value_argument_type)' inline
| `-ParmVarDecl 0x5611b0ec0db8 <col:27, col:47> col:47 v 'Vector<Element *>::value_argument_type':'Element *'
|-FunctionTemplateDecl 0x5611b0ec1668 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5611b0ec0f60 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Element *>':'fast_argument<Element *, false>'
| `-CXXMethodDecl 0x5611b0ec15c8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Element *&&)' inline
|   `-ParmVarDecl 0x5611b0ec14c8 <col:58, col:62> col:62 v 'Element *&&'
|-CXXMethodDecl 0x5611b0ec1748 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5611b0ec1898 <line:186:5, col:49> col:17 push_front 'void (Vector<Element *>::value_argument_type)' inline
| `-ParmVarDecl 0x5611b0ec1808 <col:28, col:48> col:48 v 'Vector<Element *>::value_argument_type':'Element *'
|-CXXMethodDecl 0x5611b0ec1950 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5611b0ec1b98 <line:189:5, col:62> col:21 insert 'Vector<Element *>::iterator (Vector<Element *>::iterator, Vector<Element *>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0ec1a10 <col:28, col:37> col:37 it 'Vector<Element *>::iterator':'Element **'
| `-ParmVarDecl 0x5611b0ec1a88 <col:41, col:61> col:61 v 'Vector<Element *>::value_argument_type':'Element *'
|-CXXMethodDecl 0x5611b0ec1d58 <line:190:5, col:38> col:21 erase 'Vector<Element *>::iterator (Vector<Element *>::iterator)' inline
| `-ParmVarDecl 0x5611b0ec1c68 <col:27, col:36> col:36 it 'Vector<Element *>::iterator':'Element **'
|-CXXMethodDecl 0x5611b0ec1fa8 <line:191:5, col:49> col:21 erase 'Vector<Element *>::iterator (Vector<Element *>::iterator, Vector<Element *>::iterator)' inline
| |-ParmVarDecl 0x5611b0ec1e20 <col:27, col:36> col:36 a 'Vector<Element *>::iterator':'Element **'
| `-ParmVarDecl 0x5611b0ec1e98 <col:39, col:48> col:48 b 'Vector<Element *>::iterator':'Element **'
|-CXXMethodDecl 0x5611b0ec2068 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5611b0ec22c8 <line:195:5, col:34> col:17 swap 'void (Vector<Element *> &)' inline
| `-ParmVarDecl 0x5611b0ec21d0 <col:22, col:33> col:33 x 'Vector<Element *> &'
`-CXXDestructorDecl 0x5611b0ec2398 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x5611b0eca600 <col:29>

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0b8f7a0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5611b0b8f8b8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5611b0b8f958 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5611b0b8f9b8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5611b0b8fa18 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5611b0b8fac8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0b8fdd0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5611b0b8fee8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5611b0b8ff90 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5611b0b8fff8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5611b0b90088 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5611b0b95f80 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5611b0b963b8 <col:12>
|-CXXConstructorDecl 0x5611b0b96088 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5611b0b96198 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5611b0b8ff90 'data' 'const char *'
| | `-ImplicitCastExpr 0x5611b0b98940 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5611b0b98910 <col:12> 'const char *const' lvalue .data 0x5611b0b8ff90
| |     `-DeclRefExpr 0x5611b0b988f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5611b0b96198 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5611b0b8fff8 'length' 'int'
| | `-ImplicitCastExpr 0x5611b0b989d0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5611b0b989a0 <col:12> 'const int' lvalue .length 0x5611b0b8fff8
| |     `-DeclRefExpr 0x5611b0b98980 <col:12> 'const String::rep_t' lvalue ParmVar 0x5611b0b96198 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5611b0b90088 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5611b0b98a60 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5611b0b98a30 <col:12> 'String::memo_t *const' lvalue .memo 0x5611b0b90088
| |     `-DeclRefExpr 0x5611b0b98a10 <col:12> 'const String::rep_t' lvalue ParmVar 0x5611b0b96198 '' 'const String::rep_t &'
| `-CompoundStmt 0x5611b0b98ab8 <col:12>
|-CXXConstructorDecl 0x5611b0b96238 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5611b0b96238
| `-ParmVarDecl 0x5611b0b96348 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5611b0b9b830 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5611b0ba7268 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5611b0ba7378 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5611b0ba7890 <col:12>
|   |-BinaryOperator 0x5611b0ba76a8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5611b0ba7660 <col:12> 'const char *' lvalue ->data 0x5611b0b8ff90
|   | | `-CXXThisExpr 0x5611b0ba7650 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5611b0ba7690 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5611b0ba7620 <col:12> 'const char *const' lvalue .data 0x5611b0b8ff90
|   |     `-DeclRefExpr 0x5611b0ba7600 <col:12> 'const String::rep_t' lvalue ParmVar 0x5611b0ba7378 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5611b0ba7770 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5611b0ba7728 <col:12> 'int' lvalue ->length 0x5611b0b8fff8
|   | | `-CXXThisExpr 0x5611b0ba7718 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5611b0ba7758 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5611b0ba76e8 <col:12> 'const int' lvalue .length 0x5611b0b8fff8
|   |     `-DeclRefExpr 0x5611b0ba76c8 <col:12> 'const String::rep_t' lvalue ParmVar 0x5611b0ba7378 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5611b0ba7838 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5611b0ba77f0 <col:12> 'String::memo_t *' lvalue ->memo 0x5611b0b90088
|   | | `-CXXThisExpr 0x5611b0ba77e0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5611b0ba7820 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5611b0ba77b0 <col:12> 'String::memo_t *const' lvalue .memo 0x5611b0b90088
|   |     `-DeclRefExpr 0x5611b0ba7790 <col:12> 'const String::rep_t' lvalue ParmVar 0x5611b0ba7378 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5611b0ba7880 <col:12>
|     `-UnaryOperator 0x5611b0ba7868 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5611b0ba7858 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5611b0ba73e8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5611b0ba73e8
  `-ParmVarDecl 0x5611b0ba74f8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0b86c80 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5611b0b86d98 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5611b0b86e28 <col:16, col:22> col:16 public
|-TypedefDecl 0x5611b0b86e68 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5611b0855fd0 'const char *'
|   `-QualType 0x5611b0855521 'const char' const
|     `-BuiltinType 0x5611b0855520 'char'
|-TypedefDecl 0x5611b0b86ef0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5611b0b86ec0 'String::const_iterator' sugar
|   |-Typedef 0x5611b0b86e68 'const_iterator'
|   `-PointerType 0x5611b0855fd0 'const char *'
|     `-QualType 0x5611b0855521 'const char' const
|       `-BuiltinType 0x5611b0855520 'char'
|-TypedefDecl 0x5611b0b87060 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5611b0b86fd0 'int (String::*)() const'
|   |-RecordType 0x5611b0b86d10 'String'
|   | `-CXXRecord 0x5611b0b86c80 'String'
|   `-ParenType 0x5611b0b86f70 'int () const' sugar
|     `-FunctionProtoType 0x5611b0b5bb50 'int () const' const cdecl
|       `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0b870c8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5611b09b07a0 'int64_t' sugar
|   |-Typedef 0x5611b08be390 'int64_t'
|   `-TypedefType 0x5611b0897630 '__int64_t' sugar
|     |-Typedef 0x5611b0897208 '__int64_t'
|     `-BuiltinType 0x5611b08555a0 'long'
|-TypedefDecl 0x5611b0b87130 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5611b09b06c0 'uint64_t' sugar
|   |-Typedef 0x5611b08be530 'uint64_t'
|   `-TypedefType 0x5611b08976c0 '__uint64_t' sugar
|     |-Typedef 0x5611b0897278 '__uint64_t'
|     `-BuiltinType 0x5611b0855640 'unsigned long'
|-TypedefDecl 0x5611b0b871c0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5611b0b87190 'String::intmax_t' sugar
|   |-Typedef 0x5611b0b870c8 'intmax_t'
|   `-TypedefType 0x5611b09b07a0 'int64_t' sugar
|     |-Typedef 0x5611b08be390 'int64_t'
|     `-TypedefType 0x5611b0897630 '__int64_t' sugar
|       |-Typedef 0x5611b0897208 '__int64_t'
|       `-BuiltinType 0x5611b08555a0 'long'
|-TypedefDecl 0x5611b0b87250 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5611b0b87220 'String::uintmax_t' sugar
|   |-Typedef 0x5611b0b87130 'uintmax_t'
|   `-TypedefType 0x5611b09b06c0 'uint64_t' sugar
|     |-Typedef 0x5611b08be530 'uint64_t'
|     `-TypedefType 0x5611b08976c0 '__uint64_t' sugar
|       |-Typedef 0x5611b0897278 '__uint64_t'
|       `-BuiltinType 0x5611b0855640 'unsigned long'
|-CXXConstructorDecl 0x5611b0b87310 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5611b0b874b8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5611b0b873f8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5611b0b87668 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5611b0b875a8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5611b0b877c0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5611b0b87730 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5611b0b879d8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5611b0b87888 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5611b0b87908 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5611b0b87bf8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5611b0b87aa8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5611b0b87b28 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5611b0b87e18 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5611b0b87cc8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5611b0b87d48 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5611b0b88038 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5611b0b87ee8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5611b0b87f68 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5611b0b881c8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5611b0b88100 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5611b0b88348 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5611b0b88288 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5611b0b884d8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5611b0b88410 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5611b0b88630 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5611b0b885a0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5611b0b88788 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5611b0b886f8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5611b0b888e0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5611b0b88850 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5611b0b88a68 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5611b0b889a8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5611b0b88bf8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5611b0b88b30 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5611b0b88d88 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5611b0b88cc0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5611b0b88f18 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5611b0b88e50 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5611b0b89010 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5611b0b89138 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5611b0b892b8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5611b0b891f0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5611b0b89408 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5611b0b89378 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5611b0b894b0 <col:63> "" ""
|-CXXMethodDecl 0x5611b0b895f8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5611b0b89538 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5611b0b89808 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5611b0b896b8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5611b0b89738 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5611b0b89a78 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5611b0b898d0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5611b0b899a0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5611b0b89d58 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5611b0b89b38 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5611b0b89bb8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5611b0b95a50 <col:55> 'int' 10
| `-ParmVarDecl 0x5611b0b89c30 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5611b0b95a70 <col:76> 'bool' true
|-CXXMethodDecl 0x5611b0b8a038 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5611b0b89e20 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5611b0b89ea0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5611b0b95a80 <col:56> 'int' 10
| `-ParmVarDecl 0x5611b0b89f18 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5611b0b95aa0 <col:77> 'bool' true
|-CXXMethodDecl 0x5611b0b8a140 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5611b0b8a208 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5611b0b8a2d0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5611b0b8a370 <col:20>
| `-OptimizeNoneAttr 0x5611b0b8a3c8 <col:30>
|-CXXConversionDecl 0x5611b0b8a4b8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5611b0b8a588 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5611b0b8a648 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5611b0b8a738 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5611b0b8a7f8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5611b0b8a978 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5611b0b8a8b0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5611b0b8aac8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5611b0b8aa38 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5611b0b8abb8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5611b0b8ac78 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5611b0b8aec8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5611b0b8ad30 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5611b0b8adb0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5611b0b8b128 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5611b0b8af90 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5611b0b8b010 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5611b0b8b1f8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5611b0b8b408 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5611b0b8b2b0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5611b0b8b330 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5611b0b8b628 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5611b0b8b4d0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5611b0b8b550 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5611b0b8b7b8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5611b0b8b6f0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5611b0b8b8a8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5611b0b8ba18 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5611b0b8b958 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5611b0b8bc28 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5611b0b8bad8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5611b0b8bb58 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5611b0b8be40 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5611b0b8bce8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5611b0b8bd60 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5611b0b8bfd0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5611b0b8bf00 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5611b0b8c1f0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5611b0b8c090 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5611b0b8c110 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5611b0b8c340 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5611b0b8c2b0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5611b0b8c518 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5611b0b8c400 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5611b0b8c480 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5611b0b8c668 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5611b0b8c5d8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5611b0b8c880 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5611b0b8c720 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5611b0b8c7a0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5611b0b95ab0 <col:39> 'int' 0
|-CXXMethodDecl 0x5611b0b8caa0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5611b0b8c940 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5611b0b8c9c0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5611b0b95ad0 <col:48> 'int' 0
|-CXXMethodDecl 0x5611b0b8cc80 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5611b0b8cb60 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5611b0b8cbe0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5611b0b95af0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5611b0b8cd50 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5611b0b8ce10 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5611b0b8ced0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5611b0b8cf90 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5611b0b8d050 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5611b0b8d1f8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5611b0b8d100 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5611b0b8d378 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5611b0b8d2b0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5611b0b8d4f8 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5611b0b8d438 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5611b0b8d678 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5611b0b8d5b0 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5611b0b8d7c0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5611b0b8d730 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5611b0b8d9b0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5611b0b8d880 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5611b0b8db88 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5611b0b8da70 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5611b0b8daf0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5611b0b8dd68 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5611b0b8dc50 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5611b0b8dcd0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5611b0b8deb8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5611b0b8de28 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5611b0b8e0c8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5611b0b8df78 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5611b0b8dff8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5611b0b8e228 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5611b0b8e190 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5611b0b8e380 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5611b0b8e2e8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5611b0b8e428 <col:57> "" ""
|-CXXMethodDecl 0x5611b0b8e538 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5611b0b8e4a8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5611b0b8e688 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5611b0b8e5f8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5611b0b8e808 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5611b0b8e740 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5611b0b8e8d0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5611b0b8e990 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5611b0b8ea50 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5611b0b8eaf0 <col:49> "" ""
|-CXXMethodDecl 0x5611b0b8eb80 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5611b0b8ec40 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5611b0b8ed30 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5611b0b8edf8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5611b0b8eeb8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5611b0b8ef78 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5611b0b8f070 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5611b0b8f138 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5611b0b8f200 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5611b0b8f3d8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5611b0b8f2b8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5611b0b8f338 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5611b0b8f600 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5611b0b8f4a0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5611b0b8f520 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5611b0b8f710 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5611b0b8f778 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5611b0b8f7a0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5611b0b8f8b8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5611b0b8f958 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5611b0b8f9b8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5611b0b8fa18 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5611b0b8fac8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5611b0b8fb30 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5611b0b8fd68 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5611b0b8fdb8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0b8fd48 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5611b0b8fc58 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5611b0b8fc00 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5611b0b8fc40 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5611b0b8fc20 <col:32> 'int' 8
|-CXXRecordDecl 0x5611b0b8fdd0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5611b0b8fee8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5611b0b8ff90 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5611b0b8fff8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5611b0b90088 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5611b0b95f80 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5611b0b963b8 <col:12>
| |-CXXConstructorDecl 0x5611b0b96088 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5611b0b96198 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5611b0b8ff90 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5611b0b98940 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5611b0b98910 <col:12> 'const char *const' lvalue .data 0x5611b0b8ff90
| | |     `-DeclRefExpr 0x5611b0b988f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5611b0b96198 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5611b0b8fff8 'length' 'int'
| | | `-ImplicitCastExpr 0x5611b0b989d0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5611b0b989a0 <col:12> 'const int' lvalue .length 0x5611b0b8fff8
| | |     `-DeclRefExpr 0x5611b0b98980 <col:12> 'const String::rep_t' lvalue ParmVar 0x5611b0b96198 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5611b0b90088 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5611b0b98a60 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5611b0b98a30 <col:12> 'String::memo_t *const' lvalue .memo 0x5611b0b90088
| | |     `-DeclRefExpr 0x5611b0b98a10 <col:12> 'const String::rep_t' lvalue ParmVar 0x5611b0b96198 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5611b0b98ab8 <col:12>
| |-CXXConstructorDecl 0x5611b0b96238 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5611b0b96238
| | `-ParmVarDecl 0x5611b0b96348 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5611b0b9b830 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5611b0ba7268 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5611b0ba7378 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5611b0ba7890 <col:12>
| |   |-BinaryOperator 0x5611b0ba76a8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5611b0ba7660 <col:12> 'const char *' lvalue ->data 0x5611b0b8ff90
| |   | | `-CXXThisExpr 0x5611b0ba7650 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5611b0ba7690 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5611b0ba7620 <col:12> 'const char *const' lvalue .data 0x5611b0b8ff90
| |   |     `-DeclRefExpr 0x5611b0ba7600 <col:12> 'const String::rep_t' lvalue ParmVar 0x5611b0ba7378 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5611b0ba7770 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5611b0ba7728 <col:12> 'int' lvalue ->length 0x5611b0b8fff8
| |   | | `-CXXThisExpr 0x5611b0ba7718 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5611b0ba7758 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5611b0ba76e8 <col:12> 'const int' lvalue .length 0x5611b0b8fff8
| |   |     `-DeclRefExpr 0x5611b0ba76c8 <col:12> 'const String::rep_t' lvalue ParmVar 0x5611b0ba7378 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5611b0ba7838 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5611b0ba77f0 <col:12> 'String::memo_t *' lvalue ->memo 0x5611b0b90088
| |   | | `-CXXThisExpr 0x5611b0ba77e0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5611b0ba7820 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5611b0ba77b0 <col:12> 'String::memo_t *const' lvalue .memo 0x5611b0b90088
| |   |     `-DeclRefExpr 0x5611b0ba7790 <col:12> 'const String::rep_t' lvalue ParmVar 0x5611b0ba7378 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5611b0ba7880 <col:12>
| |     `-UnaryOperator 0x5611b0ba7868 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5611b0ba7858 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5611b0ba73e8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5611b0ba73e8
|   `-ParmVarDecl 0x5611b0ba74f8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5611b0b90100 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5611b0b90348 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5611b0b90168 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5611b0b901e8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5611b0b90260 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5611b0b95f40 <col:79, line:261:5>
|   |-BinaryOperator 0x5611b0b95bb8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5611b0b95b50 <col:2, col:5> 'const char *' lvalue .data 0x5611b0b8ff90
|   | | `-MemberExpr 0x5611b0b95b20 <col:2> 'String::rep_t' lvalue ->_r 0x5611b0b90100
|   | |   `-CXXThisExpr 0x5611b0b95b10 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5611b0b95ba0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5611b0b95b80 <col:12> 'const char *' lvalue ParmVar 0x5611b0b90168 'data' 'const char *'
|   |-BinaryOperator 0x5611b0b95c80 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5611b0b95c18 <col:2, col:5> 'int' lvalue .length 0x5611b0b8fff8
|   | | `-MemberExpr 0x5611b0b95be8 <col:2> 'String::rep_t' lvalue ->_r 0x5611b0b90100
|   | |   `-CXXThisExpr 0x5611b0b95bd8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5611b0b95c68 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5611b0b95c48 <col:14> 'int' lvalue ParmVar 0x5611b0b901e8 'length' 'int'
|   `-IfStmt 0x5611b0b95f28 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5611b0b95da0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5611b0b95d88 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5611b0b95d68 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5611b0b95d48 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5611b0b95ce0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5611b0b90088
|     |       | `-MemberExpr 0x5611b0b95cb0 <col:7> 'String::rep_t' lvalue ->_r 0x5611b0b90100
|     |       |   `-CXXThisExpr 0x5611b0b95ca0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5611b0b95d30 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5611b0b95d10 <col:17> 'String::memo_t *' lvalue ParmVar 0x5611b0b90260 'memo' 'String::memo_t *'
|     `-CallExpr 0x5611b0b95f00 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5611b0b95ee8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5611b0b95df0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5611b0b80d40 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5611b0b95e58 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5611b0b8f958
|         `-ImplicitCastExpr 0x5611b0b95e40 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5611b0b95e20 <col:27> 'String::memo_t *' lvalue ParmVar 0x5611b0b90260 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5611b0b905f8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5611b0b90418 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5611b0b90498 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5611b0b90510 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5611b0b90100 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5611b0b963c8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5611b0b96558 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5611b0b964c0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5611b0b96430 <col:2> '<bound member function type>' ->assign_memo 0x5611b0b90348
|     | `-ImplicitCastExpr 0x5611b0b964f8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5611b0b96420 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5611b0b96510 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5611b0b96460 <col:14> 'const char *' lvalue ParmVar 0x5611b0b90418 'data' 'const char *'
|     |-ImplicitCastExpr 0x5611b0b96528 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5611b0b96480 <col:20> 'int' lvalue ParmVar 0x5611b0b90498 'length' 'int'
|     `-ImplicitCastExpr 0x5611b0b96540 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5611b0b964a0 <col:28> 'String::memo_t *' lvalue ParmVar 0x5611b0b90510 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5611b0b90788 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5611b0b906c8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5611b0b967b0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5611b0b96730 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5611b0b96580 <col:2> '<bound member function type>' ->assign_memo 0x5611b0b90348
|     | `-CXXThisExpr 0x5611b0b96570 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5611b0b96768 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5611b0b96600 <col:14, col:19> 'const char *' lvalue .data 0x5611b0b8ff90
|     |   `-MemberExpr 0x5611b0b965d0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5611b0b90100
|     |     `-DeclRefExpr 0x5611b0b965b0 <col:14> 'const String' lvalue ParmVar 0x5611b0b906c8 'x' 'const String &'
|     |-ImplicitCastExpr 0x5611b0b96780 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5611b0b96680 <col:25, col:30> 'int' lvalue .length 0x5611b0b8fff8
|     |   `-MemberExpr 0x5611b0b96650 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5611b0b90100
|     |     `-DeclRefExpr 0x5611b0b96630 <col:25> 'const String' lvalue ParmVar 0x5611b0b906c8 'x' 'const String &'
|     `-ImplicitCastExpr 0x5611b0b96798 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5611b0b96700 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5611b0b90088
|         `-MemberExpr 0x5611b0b966d0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5611b0b90100
|           `-DeclRefExpr 0x5611b0b966b0 <col:38> 'const String' lvalue ParmVar 0x5611b0b906c8 'x' 'const String &'
|-CXXMethodDecl 0x5611b0b90850 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5611b0b97170 <col:31, line:278:5>
|   `-IfStmt 0x5611b0b97158 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5611b0b96850 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5611b0b96838 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5611b0b96808 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5611b0b90088
|     |     `-MemberExpr 0x5611b0b967d8 <col:6> 'String::rep_t' lvalue ->_r 0x5611b0b90100
|     |       `-CXXThisExpr 0x5611b0b967c8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5611b0b97130 <col:15, line:277:2>
|       |-ParenExpr 0x5611b0b96d00 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5611b0b96cd0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5611b0b96960 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5611b0b96948 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5611b0b96930 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5611b0b968f0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5611b0b8f958
|       |   |       `-ImplicitCastExpr 0x5611b0b968d8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5611b0b968a8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5611b0b90088
|       |   |           `-MemberExpr 0x5611b0b96878 <col:27> 'String::rep_t' lvalue ->_r 0x5611b0b90100
|       |   |             `-CXXThisExpr 0x5611b0b96868 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5611b0b969c0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5611b0b969a0 <col:54> 'int' 0
|       |   `-CallExpr 0x5611b0b96c30 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5611b0b96c18 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5611b0b96b98 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5611b08f6fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5611b0b96c70 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5611b0b96aa8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5611b0b96c88 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5611b0b96ad8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5611b0b96ca0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5611b0b96b10 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5611b0b96cb8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5611b0b96b80 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5611b0b96b68 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5611b0b96b30 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5611b0b97050 <line:274:6, line:275:22>
|       | |-CallExpr 0x5611b0b96f10 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5611b0b96ef8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5611b0b96e70 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5611b0b82180 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5611b0b96e40 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5611b0b8f958
|       | |   `-ImplicitCastExpr 0x5611b0b96e28 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5611b0b96df8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5611b0b90088
|       | |       `-MemberExpr 0x5611b0b96dc8 <col:40> 'String::rep_t' lvalue ->_r 0x5611b0b90100
|       | |         `-CXXThisExpr 0x5611b0b96db8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5611b0b97010 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5611b0b96ff8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5611b0b96f38 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5611b0b91528 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5611b0b97038 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5611b0b96f98 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5611b0b90088
|       |       `-MemberExpr 0x5611b0b96f68 <col:15> 'String::rep_t' lvalue ->_r 0x5611b0b90100
|       |         `-CXXThisExpr 0x5611b0b96f58 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5611b0b97110 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5611b0b970a8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5611b0b90088
|         | `-MemberExpr 0x5611b0b97078 <col:6> 'String::rep_t' lvalue ->_r 0x5611b0b90100
|         |   `-CXXThisExpr 0x5611b0b97068 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5611b0b970f8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5611b0b970d8 <col:16> 'int' 0
|-CXXMethodDecl 0x5611b0b90ae8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5611b0b90908 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5611b0b90988 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5611b0b90a00 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5611b0b90bc0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5611b0b90e10 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5611b0b90c78 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5611b0b90cf8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5611b0b90d70 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5611b0b90ff8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5611b0b90ee0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5611b0b90f60 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5611b0b910f8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5611b0b97248 <col:41, line:286:5>
|   `-ReturnStmt 0x5611b0b97238 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5611b0b97208 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5611b0b971d0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5611b0b971b8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5611b0b97198 <col:46> 'int' 1
|-CXXMethodDecl 0x5611b0b91398 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5611b0b911b0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5611b0b91230 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5611b0b912b0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5611b0b91528 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5611b0b91460 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5611b0b915f8 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5611b0b917c8 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5611b0b916b0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5611b0b91730 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5611b0b91888 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5611b0b952b0 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5611b0b953b8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5611b0b95430 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5611b0b954a8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5611b0b95510 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5611b0b95610 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5611b0b95660 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0b955f0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5611b0b955d0 <col:22> 'int' 14
|-CXXMethodDecl 0x5611b0b95878 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5611b0b95690 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5611b0b95710 <col:38> col:41 'int'
| `-ParmVarDecl 0x5611b0b95790 <col:43> col:46 'int'
|-FriendDecl 0x5611b0b95980 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5611b0b95a10 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5611b0bd9250 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5611b0bd9428 prev 0x5611b0bd9250 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5611b0bd94b8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5611b0bd94e0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0bdb5e0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5611b0bdb590 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5611b0bdb570 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5611b0bd96f8 'type'
|     `-SubstTemplateTypeParmType 0x5611b0bd96c0 'String' sugar
|       |-TemplateTypeParmType 0x5611b0b4b800 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b4b7b0 'T'
|       `-RecordType 0x5611b0b86d10 'String'
|         `-CXXRecord 0x5611b0b86c80 'String'
|-TypedefDecl 0x5611b0bdb698 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5611b0bdb660 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5611b0bdb640 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5611b0bdb5e0 'type'
|     `-ElaboratedType 0x5611b0bdb590 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5611b0bdb570 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5611b0bd96f8 'type'
|         `-SubstTemplateTypeParmType 0x5611b0bd96c0 'String' sugar
|           |-TemplateTypeParmType 0x5611b0b4b800 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5611b0b4b7b0 'T'
|           `-RecordType 0x5611b0b86d10 'String'
|             `-CXXRecord 0x5611b0b86c80 'String'
|-CXXMethodDecl 0x5611b0bdb818 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5611b0bdb728 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5611b0bdb908 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5611b0bdb9e8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5611b0bdb9e8
|-CXXMethodDecl 0x5611b0bdbcb8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5611b0bdbbc0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5611b0bdbef8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5611b0bdbd70 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5611b0bdbde8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5611b0bdc0c8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5611b0bdbfb8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5611b0bdc030 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5611b0bdc228 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5611b0bdc2f8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5611b0bdc548 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5611b0bdc3b8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5611b0bdc430 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5611b0bdc7a8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5611b0bdc618 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5611b0bdc690 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5611b0bdc968 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5611b0bdc878 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5611b0bdcb28 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5611b0bdca30 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5611b0bdcbe0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5611b0bdcc90 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5611b0bdcec8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5611b0bdcd40 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5611b0bdcdb8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5611b0bdd168 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5611b0bdd070 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5611b0bdd230 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5611b0bdd280 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5611b0bdd2d0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5611b0bbb0b0 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5611b0bd7cb8 prev 0x5611b0bbb0b0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5611b0bd91c0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5611b0bd9170 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5611b0bd9150 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5611b0bd9000 'type'
|     `-SubstTemplateTypeParmType 0x5611b0bd8e90 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5611b0a75030 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5611b0a74fd8 'F'
|       `-RecordType 0x5611b0bd8af0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5611b0bd8a10 'typed_array_memory'
|-FieldDecl 0x5611b0bdd320 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5611b0bdd370 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5611b0bdd3a8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5611b0bd7d50 'String' sugar
|   |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5611b0b584d8 'T'
|   `-RecordType 0x5611b0b86d10 'String'
|     `-CXXRecord 0x5611b0b86c80 'String'
|-TypedefDecl 0x5611b0bdd438 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5611b0bdd400 'String &'
|   `-SubstTemplateTypeParmType 0x5611b0bd7d50 'String' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-RecordType 0x5611b0b86d10 'String'
|       `-CXXRecord 0x5611b0b86c80 'String'
|-TypedefDecl 0x5611b0bdd4c8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5611b0bdd490 'const String &'
|   `-QualType 0x5611b0bd7d51 'const String' const
|     `-SubstTemplateTypeParmType 0x5611b0bd7d50 'String' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-RecordType 0x5611b0b86d10 'String'
|         `-CXXRecord 0x5611b0b86c80 'String'
|-TypedefDecl 0x5611b0bdd558 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5611b0bdd520 'String *'
|   `-SubstTemplateTypeParmType 0x5611b0bd7d50 'String' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-RecordType 0x5611b0b86d10 'String'
|       `-CXXRecord 0x5611b0b86c80 'String'
|-TypedefDecl 0x5611b0bdd5e8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5611b0bdd5b0 'const String *'
|   `-QualType 0x5611b0bd7d51 'const String' const
|     `-SubstTemplateTypeParmType 0x5611b0bd7d50 'String' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-RecordType 0x5611b0b86d10 'String'
|         `-CXXRecord 0x5611b0b86c80 'String'
|-TypedefDecl 0x5611b0bde240 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5611b0bde1f0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5611b0bde1d0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5611b0bde108 'type'
|     `-LValueReferenceType 0x5611b0bde0d0 'const String &'
|       `-QualType 0x5611b0bdde71 'const String' const
|         `-SubstTemplateTypeParmType 0x5611b0bdde70 'String' sugar
|           |-TemplateTypeParmType 0x5611b0a7d360 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5611b0a7d308 'T'
|           `-RecordType 0x5611b0b86d10 'String'
|             `-CXXRecord 0x5611b0b86c80 'String'
|-TypedefDecl 0x5611b0bde2a8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5611b0bdd490 'const String &'
|   `-QualType 0x5611b0bd7d51 'const String' const
|     `-SubstTemplateTypeParmType 0x5611b0bd7d50 'String' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-RecordType 0x5611b0b86d10 'String'
|         `-CXXRecord 0x5611b0b86c80 'String'
|-TypedefDecl 0x5611b0bde300 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0bde368 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5611b0bdd520 'String *'
|   `-SubstTemplateTypeParmType 0x5611b0bd7d50 'String' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-RecordType 0x5611b0b86d10 'String'
|       `-CXXRecord 0x5611b0b86c80 'String'
|-TypedefDecl 0x5611b0bde3d0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5611b0bdd5b0 'const String *'
|   `-QualType 0x5611b0bd7d51 'const String' const
|     `-SubstTemplateTypeParmType 0x5611b0bd7d50 'String' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-RecordType 0x5611b0b86d10 'String'
|         `-CXXRecord 0x5611b0b86c80 'String'
|-EnumDecl 0x5611b0bde428 <line:134:5> col:5
| `-EnumConstantDecl 0x5611b0bde520 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5611b0bde500 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5611b0b59f18 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5611b0b59ef0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5611b0b59ed0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5611b0bde5a8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5611b0bde838 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0bde660 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0bde700 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5611b0bdeac8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5611b0bde9b0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5611b0bded88 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5611b0bdec70 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5611b0bdfa70 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5611b0bdf950 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5611b0bdfd80 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5611b0bdfc60 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5611b0be0070 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0bdfeb8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0bdff30 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5611b0be0198 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5611b0be0248 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0be02a0 <col:30> Inherited
|-CXXMethodDecl 0x5611b0be02e8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5611b0be0398 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0be03f0 <col:30> Inherited
|-CXXMethodDecl 0x5611b0be04b8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5611b0be0568 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0be05c0 <col:30> Inherited
|-CXXMethodDecl 0x5611b0be0608 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5611b0be06b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0be0710 <col:30> Inherited
|-CXXMethodDecl 0x5611b0be0758 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5611b0be0808 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0be0860 <col:30> Inherited
|-CXXMethodDecl 0x5611b0be08a8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5611b0be0958 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0be09b0 <col:30> Inherited
|-CXXMethodDecl 0x5611b0be09d8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5611b0be0a88 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5611b0be0b38 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5611b0be0cf8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0be0be8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0be0c60 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5611b0be0e48 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0be0db8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0be0ff8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5611b0be0f00 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5611b0be10b0 <col:20>
| `-OptimizeNoneAttr 0x5611b0be1108 <col:30>
|-CXXMethodDecl 0x5611b0be1228 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5611b0be1130 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5611b0be12e0 <col:20>
| `-OptimizeNoneAttr 0x5611b0be1338 <col:30>
|-CXXMethodDecl 0x5611b0be13f0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0be1360 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0be1538 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5611b0be14a8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0be1668 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5611b0be1798 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5611b0be1868 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5611b0be1938 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5611b0be1a78 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0be19e8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0be1bc0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5611b0be1b30 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0be1d08 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5611b0be1c78 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5611b0be1dc0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5611b0be1ec0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5611b0be1e30 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5611b0be1f78 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5611b0be2038 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5611b0be2138 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5611b0be22b8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5611b0be21f8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5611b0be2a78 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5611b0be2370 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5611b0be29d8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5611b0be28d8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5611b0be2b58 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5611b0be2ca8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5611b0be2c18 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5611b0be2d60 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5611b0be2fa8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0be2e20 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5611b0be2e98 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5611b0be3138 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5611b0be3078 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5611b0be3348 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5611b0be3200 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5611b0be3278 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5611b0be3408 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5611b0be3668 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5611b0be3570 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5611b0be3738 <line:111:7> col:7 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5611b0be3738

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5611b0de5b40 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5611b0de5d18 prev 0x5611b0de5b40 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5611b0de5da8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5611b0de5dd0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0de79a0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5611b0de7950 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5611b0de6280 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5611b0de6180 'type'
|     `-TemplateSpecializationType 0x5611b0de6110 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5611b0de5ff0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5611b0de5fd0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5611b0de5fb0 <col:24> 'unsigned long' 4
|       `-RecordType 0x5611b0de60f0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5611b0de6010 'char_array'
|-TypedefDecl 0x5611b0dea698 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5611b0dea660 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5611b0dea640 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5611b0de79a0 'type'
|     `-ElaboratedType 0x5611b0de7950 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5611b0de6280 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5611b0de6180 'type'
|         `-TemplateSpecializationType 0x5611b0de6110 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5611b0de5ff0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5611b0de5fd0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5611b0de5fb0 <col:24> 'unsigned long' 4
|           `-RecordType 0x5611b0de60f0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5611b0de6010 'char_array'
|-CXXMethodDecl 0x5611b0dea818 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5611b0dea728 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5611b0dea908 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5611b0dea9e8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5611b0dea9e8
|-CXXMethodDecl 0x5611b0deacb8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5611b0deabc0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5611b0deaef8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5611b0dead70 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5611b0deade8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5611b0deb0c8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5611b0deafb8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5611b0deb030 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5611b0deb228 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5611b0deb2f8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5611b0deb548 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5611b0deb3b8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5611b0deb430 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5611b0deb7a8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5611b0deb618 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5611b0deb690 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5611b0deb968 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5611b0deb878 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5611b0debb28 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5611b0deba30 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5611b0debbe0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5611b0debc90 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5611b0debec8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5611b0debd40 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5611b0debdb8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5611b0dec168 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5611b0dec070 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5611b0dec230 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5611b0dec280 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5611b0dec2d0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.3 = type { %struct.char_array.4*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.3 = type { %struct.char_array.4*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5611b0f71750 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x5611b0f71958 prev 0x5611b0f71750 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5611b0f72970 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<unsigned int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5611b0f72920 'typename array_memory<unsigned int>::type' sugar
|   `-TypedefType 0x5611b0f72900 'conditional<true, sized_array_memory<4>, typed_array_memory<unsigned int> >::type' sugar
|     |-Typedef 0x5611b0f727b0 'type'
|     `-SubstTemplateTypeParmType 0x5611b0de5710 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x5611b0a748b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0a74858 'T'
|       `-RecordType 0x5611b0de5260 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5611b0de5178 'sized_array_memory'
|-FieldDecl 0x5611b0f72a70 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<unsigned int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5611b0f72ac0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5611b0f72af8 <line:118:5, col:15> col:15 value_type 'unsigned int':'unsigned int'
| `-SubstTemplateTypeParmType 0x5611b0f719f0 'unsigned int' sugar
|   |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5611b0b584d8 'T'
|   `-BuiltinType 0x5611b0855620 'unsigned int'
|-TypedefDecl 0x5611b0f72b88 <line:119:5, col:16> col:16 reference 'unsigned int &'
| `-LValueReferenceType 0x5611b0f72b50 'unsigned int &'
|   `-SubstTemplateTypeParmType 0x5611b0f719f0 'unsigned int' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-BuiltinType 0x5611b0855620 'unsigned int'
|-TypedefDecl 0x5611b0f72c48 <line:120:5, col:22> col:22 const_reference 'const unsigned int &'
| `-LValueReferenceType 0x5611b0f72c10 'const unsigned int &'
|   `-QualType 0x5611b0f719f1 'const unsigned int' const
|     `-SubstTemplateTypeParmType 0x5611b0f719f0 'unsigned int' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-BuiltinType 0x5611b0855620 'unsigned int'
|-TypedefDecl 0x5611b0f72cd8 <line:121:5, col:16> col:16 pointer 'unsigned int *'
| `-PointerType 0x5611b0f72ca0 'unsigned int *'
|   `-SubstTemplateTypeParmType 0x5611b0f719f0 'unsigned int' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-BuiltinType 0x5611b0855620 'unsigned int'
|-TypedefDecl 0x5611b0f72d68 <line:122:5, col:22> col:22 const_pointer 'const unsigned int *'
| `-PointerType 0x5611b0f72d30 'const unsigned int *'
|   `-QualType 0x5611b0f719f1 'const unsigned int' const
|     `-SubstTemplateTypeParmType 0x5611b0f719f0 'unsigned int' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-BuiltinType 0x5611b0855620 'unsigned int'
|-TypedefDecl 0x5611b0f73950 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<unsigned int>::type':'unsigned int'
| `-ElaboratedType 0x5611b0f73900 'typename fast_argument<unsigned int>::type' sugar
|   `-TypedefType 0x5611b0f738e0 'fast_argument<unsigned int, false>::type' sugar
|     |-Typedef 0x5611b0f73870 'type'
|     `-SubstTemplateTypeParmType 0x5611b0f73630 'unsigned int' sugar
|       |-TemplateTypeParmType 0x5611b0a7eca0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0a7ec50 'T'
|       `-BuiltinType 0x5611b0855620 'unsigned int'
|-TypedefDecl 0x5611b0f739b8 <line:126:5, col:22> col:22 const_access_type 'const unsigned int &'
| `-LValueReferenceType 0x5611b0f72c10 'const unsigned int &'
|   `-QualType 0x5611b0f719f1 'const unsigned int' const
|     `-SubstTemplateTypeParmType 0x5611b0f719f0 'unsigned int' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-BuiltinType 0x5611b0855620 'unsigned int'
|-TypedefDecl 0x5611b0f73a10 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0f73a78 <line:130:5, col:16> col:16 iterator 'unsigned int *'
| `-PointerType 0x5611b0f72ca0 'unsigned int *'
|   `-SubstTemplateTypeParmType 0x5611b0f719f0 'unsigned int' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-BuiltinType 0x5611b0855620 'unsigned int'
|-TypedefDecl 0x5611b0f73ae0 <line:131:5, col:22> col:22 const_iterator 'const unsigned int *'
| `-PointerType 0x5611b0f72d30 'const unsigned int *'
|   `-QualType 0x5611b0f719f1 'const unsigned int' const
|     `-SubstTemplateTypeParmType 0x5611b0f719f0 'unsigned int' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-BuiltinType 0x5611b0855620 'unsigned int'
|-EnumDecl 0x5611b0f73b38 <line:134:5> col:5
| `-EnumConstantDecl 0x5611b0f73c30 <col:12, col:40> col:12 RESERVE_GROW 'Vector<unsigned int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5611b0f73c10 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5611b0b59f18 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5611b0b59ef0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5611b0b59ed0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5611b0f73cb8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5611b0f73f08 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<unsigned int>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0f73d70 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0f73e10 <col:41, col:61> col:61 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXConstructorDecl 0x5611b0f741c8 <line:139:5, col:37> col:12 Vector 'void (const Vector<unsigned int> &)' inline
| `-ParmVarDecl 0x5611b0f740b0 <col:19, col:36> col:36 x 'const Vector<unsigned int> &'
|-CXXConstructorDecl 0x5611b0f74488 <line:141:5, col:32> col:12 Vector 'void (Vector<unsigned int> &&)' inline
| `-ParmVarDecl 0x5611b0f74370 <col:19, col:31> col:31 x 'Vector<unsigned int> &&'
|-CXXMethodDecl 0x5611b0f747d0 <line:144:5, col:51> col:23 operator= 'Vector<unsigned int> &(const Vector<unsigned int> &)' inline
| `-ParmVarDecl 0x5611b0f746b0 <col:33, col:50> col:50 x 'const Vector<unsigned int> &'
|-CXXMethodDecl 0x5611b0f74ae0 <line:146:5, col:46> col:23 operator= 'Vector<unsigned int> &(Vector<unsigned int> &&)' inline
| `-ParmVarDecl 0x5611b0f749c0 <col:33, col:45> col:45 x 'Vector<unsigned int> &&'
|-CXXMethodDecl 0x5611b0f74dd0 <line:148:5, col:70> col:23 assign 'Vector<unsigned int> &(Vector::size_type, Vector<unsigned int>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0f74c18 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0f74c90 <col:43, col:69> col:63 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXMethodDecl 0x5611b0f74ef8 <line:150:5, col:55> col:49 begin 'Vector<unsigned int>::iterator ()'
| |-NoInlineAttr 0x5611b0f74fd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f75030 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f75078 <line:151:5, col:53> col:49 end 'Vector<unsigned int>::iterator ()'
| |-NoInlineAttr 0x5611b0f75128 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f75180 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f75218 <line:152:5, col:63> col:55 begin 'Vector<unsigned int>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f752c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f75320 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f75368 <line:153:5, col:61> col:55 end 'Vector<unsigned int>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f75418 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f75470 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f754b8 <line:154:5, col:64> col:55 cbegin 'Vector<unsigned int>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f75568 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f755c0 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f75608 <line:155:5, col:62> col:55 cend 'Vector<unsigned int>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f756b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f75710 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f75738 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5611b0f757e8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5611b0f75898 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5611b0f75a58 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<unsigned int>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0f75948 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0f759c0 <col:37, col:63> col:57 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXMethodDecl 0x5611b0f75ba8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0f75b18 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f75d58 <line:163:5, col:65> col:43 operator[] 'unsigned int &(Vector::size_type)'
| |-ParmVarDecl 0x5611b0f75c60 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5611b0f75e10 <col:20>
| `-OptimizeNoneAttr 0x5611b0f75e68 <col:30>
|-CXXMethodDecl 0x5611b0f75f88 <line:164:5, col:73> col:49 operator[] 'const unsigned int &(Vector::size_type) const'
| |-ParmVarDecl 0x5611b0f75e90 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5611b0f76040 <col:20>
| `-OptimizeNoneAttr 0x5611b0f76098 <col:30>
|-CXXMethodDecl 0x5611b0f76150 <line:165:5, col:29> col:15 at 'unsigned int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0f760c0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f76780 <line:166:5, col:37> col:21 at 'const unsigned int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5611b0f76208 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f768b8 <line:167:5, col:21> col:15 front 'unsigned int &()' inline
|-CXXMethodDecl 0x5611b0f769e8 <line:168:5, col:29> col:21 front 'const unsigned int &() const' inline
|-CXXMethodDecl 0x5611b0f76ab8 <line:169:5, col:20> col:15 back 'unsigned int &()' inline
|-CXXMethodDecl 0x5611b0f76b88 <line:170:5, col:28> col:21 back 'const unsigned int &() const' inline
|-CXXMethodDecl 0x5611b0f76cc8 <line:172:5, col:39> col:15 unchecked_at 'unsigned int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0f76c38 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f76e10 <line:173:5, col:47> col:21 unchecked_at 'const unsigned int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5611b0f76d80 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f76f58 <line:174:5, col:59> col:15 at_u 'unsigned int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5611b0f76ec8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5611b0f77010 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5611b0f77110 <line:175:5, col:71> col:21 at_u 'const unsigned int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5611b0f77080 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5611b0f771c8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5611b0f77288 <line:177:5, col:20> col:15 data 'unsigned int *()' inline
|-CXXMethodDecl 0x5611b0f77388 <line:178:5, col:28> col:21 data 'const unsigned int *() const' inline
|-CXXMethodDecl 0x5611b0f77508 <line:180:5, col:48> col:17 push_back 'void (Vector<unsigned int>::value_argument_type)' inline
| `-ParmVarDecl 0x5611b0f77448 <col:27, col:47> col:47 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-FunctionTemplateDecl 0x5611b0f77cc8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5611b0f775c0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<unsigned int>':'fast_argument<unsigned int, false>'
| `-CXXMethodDecl 0x5611b0f77c28 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (unsigned int &&)' inline
|   `-ParmVarDecl 0x5611b0f77b28 <col:58, col:62> col:62 v 'unsigned int &&'
|-CXXMethodDecl 0x5611b0f77da8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5611b0f77ef8 <line:186:5, col:49> col:17 push_front 'void (Vector<unsigned int>::value_argument_type)' inline
| `-ParmVarDecl 0x5611b0f77e68 <col:28, col:48> col:48 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXMethodDecl 0x5611b0f77fb0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5611b0f781f8 <line:189:5, col:62> col:21 insert 'Vector<unsigned int>::iterator (Vector<unsigned int>::iterator, Vector<unsigned int>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0f78070 <col:28, col:37> col:37 it 'Vector<unsigned int>::iterator':'unsigned int *'
| `-ParmVarDecl 0x5611b0f780e8 <col:41, col:61> col:61 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXMethodDecl 0x5611b0f783b8 <line:190:5, col:38> col:21 erase 'Vector<unsigned int>::iterator (Vector<unsigned int>::iterator)' inline
| `-ParmVarDecl 0x5611b0f782c8 <col:27, col:36> col:36 it 'Vector<unsigned int>::iterator':'unsigned int *'
|-CXXMethodDecl 0x5611b0f78608 <line:191:5, col:49> col:21 erase 'Vector<unsigned int>::iterator (Vector<unsigned int>::iterator, Vector<unsigned int>::iterator)' inline
| |-ParmVarDecl 0x5611b0f78480 <col:27, col:36> col:36 a 'Vector<unsigned int>::iterator':'unsigned int *'
| `-ParmVarDecl 0x5611b0f784f8 <col:39, col:48> col:48 b 'Vector<unsigned int>::iterator':'unsigned int *'
|-CXXMethodDecl 0x5611b0f786c8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5611b0f78928 <line:195:5, col:34> col:17 swap 'void (Vector<unsigned int> &)' inline
| `-ParmVarDecl 0x5611b0f78830 <col:22, col:33> col:33 x 'Vector<unsigned int> &'
`-CXXDestructorDecl 0x5611b0f789f8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5611b0f789f8

Layout: <CGRecordLayout
  LLVMType:%class.Vector.2 = type { %class.vector_memory.3 }
  NonVirtualBaseLLVMType:%class.Vector.2 = type { %class.vector_memory.3 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5611b0de4548 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5611b0de4758 prev 0x5611b0de4548 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5611b0de5ab0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5611b0de5a60 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5611b0de5a40 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5611b0de58f0 'type'
|     `-SubstTemplateTypeParmType 0x5611b0de5710 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x5611b0a748b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0a74858 'T'
|       `-RecordType 0x5611b0de5260 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5611b0de5178 'sized_array_memory'
|-FieldDecl 0x5611b0dec320 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5611b0dec370 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5611b0dec3a8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5611b0de47f0 'int' sugar
|   |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5611b0b584d8 'T'
|   `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0dec438 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5611b0dec400 'int &'
|   `-SubstTemplateTypeParmType 0x5611b0de47f0 'int' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0dec4f8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5611b0dec4c0 'const int &'
|   `-QualType 0x5611b0de47f1 'const int' const
|     `-SubstTemplateTypeParmType 0x5611b0de47f0 'int' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0dec588 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5611b0dec550 'int *'
|   `-SubstTemplateTypeParmType 0x5611b0de47f0 'int' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0dec618 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5611b0dec5e0 'const int *'
|   `-QualType 0x5611b0de47f1 'const int' const
|     `-SubstTemplateTypeParmType 0x5611b0de47f0 'int' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0ded200 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5611b0ded1b0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5611b0ded190 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5611b0ded120 'type'
|     `-SubstTemplateTypeParmType 0x5611b0decee0 'int' sugar
|       |-TemplateTypeParmType 0x5611b0a7eca0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0a7ec50 'T'
|       `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0ded268 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5611b0dec4c0 'const int &'
|   `-QualType 0x5611b0de47f1 'const int' const
|     `-SubstTemplateTypeParmType 0x5611b0de47f0 'int' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0ded2c0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0ded328 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5611b0dec550 'int *'
|   `-SubstTemplateTypeParmType 0x5611b0de47f0 'int' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0ded390 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5611b0dec5e0 'const int *'
|   `-QualType 0x5611b0de47f1 'const int' const
|     `-SubstTemplateTypeParmType 0x5611b0de47f0 'int' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-BuiltinType 0x5611b0855580 'int'
|-EnumDecl 0x5611b0ded3e8 <line:134:5> col:5
| `-EnumConstantDecl 0x5611b0ded4e0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5611b0ded4c0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5611b0b59f18 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5611b0b59ef0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5611b0b59ed0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5611b0ded568 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5611b0ded7b8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0ded620 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0ded6c0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5611b0deda78 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5611b0ded960 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5611b0dedd38 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5611b0dedc20 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5611b0dee080 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5611b0dedf60 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5611b0dee390 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5611b0dee270 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5611b0def108 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0dee4c8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0dee540 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5611b0def238 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5611b0def318 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0def370 <col:30> Inherited
|-CXXMethodDecl 0x5611b0def3b8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5611b0def468 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0def4c0 <col:30> Inherited
|-CXXMethodDecl 0x5611b0def588 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5611b0def638 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0def690 <col:30> Inherited
|-CXXMethodDecl 0x5611b0def6d8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5611b0def788 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0def7e0 <col:30> Inherited
|-CXXMethodDecl 0x5611b0def828 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5611b0def8d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0def930 <col:30> Inherited
|-CXXMethodDecl 0x5611b0def978 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5611b0defa28 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0defa80 <col:30> Inherited
|-CXXMethodDecl 0x5611b0defaa8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5611b0defb58 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5611b0defc08 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5611b0defdc8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0defcb8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0defd30 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5611b0deff18 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0defe88 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0df00c8 <line:163:5, col:65> col:43 used operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5611b0deffd0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5611b0df0180 <col:20>
| `-OptimizeNoneAttr 0x5611b0df01d8 <col:30>
|-CXXMethodDecl 0x5611b0df02f8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5611b0df0200 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5611b0df03b0 <col:20>
| `-OptimizeNoneAttr 0x5611b0df0408 <col:30>
|-CXXMethodDecl 0x5611b0df04c0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0df0430 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0df0608 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5611b0df0578 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0df0738 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5611b0df0868 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5611b0df0938 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5611b0df0a08 <line:170:5, col:28> col:21 used back 'const int &() const' inline
|-CXXMethodDecl 0x5611b0df0b48 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0df0ab8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0df0c90 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5611b0df0c00 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0df0dd8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5611b0df0d48 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5611b0df0e90 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5611b0df0f90 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5611b0df0f00 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5611b0df1048 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5611b0df1108 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5611b0df1208 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5611b0df1388 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5611b0df12c8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5611b0df1b48 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5611b0df1440 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5611b0df1aa8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5611b0df19a8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5611b0df1c28 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5611b0df1d78 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5611b0df1ce8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5611b0df1e30 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5611b0df2078 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0df1ef0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5611b0df1f68 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5611b0df2238 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5611b0df2148 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5611b0df2488 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5611b0df2300 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5611b0df2378 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5611b0df2548 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5611b0df27a8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5611b0df26b0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5611b0df2878 <line:111:7> col:7 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5611b0df2878

Layout: <CGRecordLayout
  LLVMType:%class.Vector.5 = type { %class.vector_memory.3 }
  NonVirtualBaseLLVMType:%class.Vector.5 = type { %class.vector_memory.3 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0f78c40 <../dummy_inc/click/router.hh:247:5, line:250:5> line:247:12 referenced struct element_landmark_t definition
|-DefinitionData aggregate standard_layout has_mutable_fields
| |-DefaultConstructor exists non_trivial needs_implicit
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-CXXRecordDecl 0x5611b0f78d58 <col:5, col:12> col:12 implicit struct element_landmark_t
|-FieldDecl 0x5611b0f78df8 <line:248:9, col:18> col:18 first_landmarkid 'uint32_t':'unsigned int'
|-FieldDecl 0x5611b0f78e58 <line:249:9, col:16> col:16 filename 'String'
|-CXXConstructorDecl 0x5611b0f78ef0 <line:247:12> col:12 implicit element_landmark_t 'void (const Router::element_landmark_t &)' inline default noexcept-unevaluated 0x5611b0f78ef0
| `-ParmVarDecl 0x5611b0f79008 <col:12> col:12 'const Router::element_landmark_t &'
|-CXXConstructorDecl 0x5611b0f790a8 <col:12> col:12 implicit element_landmark_t 'void (Router::element_landmark_t &&)' inline default noexcept-unevaluated 0x5611b0f790a8
| `-ParmVarDecl 0x5611b0f791b8 <col:12> col:12 'Router::element_landmark_t &&'
|-CXXMethodDecl 0x5611b0f79258 <col:12> col:12 implicit operator= 'Router::element_landmark_t &(const Router::element_landmark_t &)' inline default noexcept-unevaluated 0x5611b0f79258
| `-ParmVarDecl 0x5611b0f79368 <col:12> col:12 'const Router::element_landmark_t &'
|-CXXMethodDecl 0x5611b0f793d8 <col:12> col:12 implicit operator= 'Router::element_landmark_t &(Router::element_landmark_t &&)' inline default noexcept-unevaluated 0x5611b0f793d8
| `-ParmVarDecl 0x5611b0f794e8 <col:12> col:12 'Router::element_landmark_t &&'
`-CXXDestructorDecl 0x5611b0f79570 <col:12> col:12 implicit ~element_landmark_t 'void ()' inline default noexcept-unevaluated 0x5611b0f79570

Layout: <CGRecordLayout
  LLVMType:%"struct.Router::element_landmark_t" = type { i32, %class.String }
  NonVirtualBaseLLVMType:%"struct.Router::element_landmark_t" = type { i32, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5611b0f7ab00 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<Router::element_landmark_t>'
|-CXXRecordDecl 0x5611b0f7acd8 prev 0x5611b0f7ab00 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5611b0f7ad68 <col:46, col:52> col:46 public
|-TypedefDecl 0x5611b0f7ad90 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0f7c750 <line:13:5, col:31> col:31 type 'typename typed_array_memory<element_landmark_t>::type':'Router::element_landmark_t'
| `-ElaboratedType 0x5611b0f7c700 'typename typed_array_memory<element_landmark_t>::type' sugar
|   `-TypedefType 0x5611b0f7c6e0 'typed_array_memory<Router::element_landmark_t>::type' sugar
|     |-Typedef 0x5611b0f7afa8 'type'
|     `-SubstTemplateTypeParmType 0x5611b0f7af70 'Router::element_landmark_t' sugar
|       |-TemplateTypeParmType 0x5611b0b4b800 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b4b7b0 'T'
|       `-RecordType 0x5611b0f78cd0 'Router::element_landmark_t'
|         `-CXXRecord 0x5611b0f78c40 'element_landmark_t'
|-TypedefDecl 0x5611b0f7c808 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
| `-PointerType 0x5611b0f7c7d0 'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|   `-TypedefType 0x5611b0f7c7b0 'vector_memory<typed_array_memory<Router::element_landmark_t> >::type' sugar
|     |-Typedef 0x5611b0f7c750 'type'
|     `-ElaboratedType 0x5611b0f7c700 'typename typed_array_memory<element_landmark_t>::type' sugar
|       `-TypedefType 0x5611b0f7c6e0 'typed_array_memory<Router::element_landmark_t>::type' sugar
|         |-Typedef 0x5611b0f7afa8 'type'
|         `-SubstTemplateTypeParmType 0x5611b0f7af70 'Router::element_landmark_t' sugar
|           |-TemplateTypeParmType 0x5611b0b4b800 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5611b0b4b7b0 'T'
|           `-RecordType 0x5611b0f78cd0 'Router::element_landmark_t'
|             `-CXXRecord 0x5611b0f78c40 'element_landmark_t'
|-CXXMethodDecl 0x5611b0f7c988 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *) const' inline
| `-ParmVarDecl 0x5611b0f7c898 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXConstructorDecl 0x5611b0f7ca78 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5611b0f7cb58 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5611b0f7cb58
|-CXXMethodDecl 0x5611b0f7ce28 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<Router::element_landmark_t> > &)'
| `-ParmVarDecl 0x5611b0f7cd30 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<Router::element_landmark_t> > &'
|-CXXMethodDecl 0x5611b0f7d068 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *)'
| |-ParmVarDecl 0x5611b0f7cee0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5611b0f7cf58 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x5611b0f7d238 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *)'
| |-ParmVarDecl 0x5611b0f7d128 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5611b0f7d1a0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x5611b0f7d398 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator ()'
|-CXXMethodDecl 0x5611b0f7d468 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator ()'
|-CXXMethodDecl 0x5611b0f7d6b8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator (vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator, const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *)'
| |-ParmVarDecl 0x5611b0f7d528 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator':'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
| `-ParmVarDecl 0x5611b0f7d5a0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x5611b0f7d918 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator (vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator, vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator)'
| |-ParmVarDecl 0x5611b0f7d788 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator':'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
| `-ParmVarDecl 0x5611b0f7d800 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator':'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x5611b0f7dad8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *)' inline
| `-ParmVarDecl 0x5611b0f7d9e8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x5611b0f7dc98 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<Router::element_landmark_t> >::type *)' inline
| `-ParmVarDecl 0x5611b0f7dba0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x5611b0f7dd50 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5611b0f7de00 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5611b0f7e038 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *)'
| |-ParmVarDecl 0x5611b0f7deb0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5611b0f7df28 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x5611b0f7e2d8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<Router::element_landmark_t> > &)'
| `-ParmVarDecl 0x5611b0f7e1e0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<Router::element_landmark_t> > &'
|-FieldDecl 0x5611b0f7e3a0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-FieldDecl 0x5611b0f7e3f0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5611b0f7e440 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.7 = type { %"struct.Router::element_landmark_t"*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.7 = type { %"struct.Router::element_landmark_t"*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5611b0f79660 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Router::element_landmark_t'
|-CXXRecordDecl 0x5611b0f79868 prev 0x5611b0f79660 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5611b0f7aa70 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<element_landmark_t>::type':'typed_array_memory<Router::element_landmark_t>'
| `-ElaboratedType 0x5611b0f7aa20 'typename array_memory<element_landmark_t>::type' sugar
|   `-TypedefType 0x5611b0f7aa00 'conditional<false, sized_array_memory<32>, typed_array_memory<Router::element_landmark_t> >::type' sugar
|     |-Typedef 0x5611b0f7a8b0 'type'
|     `-SubstTemplateTypeParmType 0x5611b0f7a740 'typed_array_memory<Router::element_landmark_t>' sugar
|       |-TemplateTypeParmType 0x5611b0a75030 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5611b0a74fd8 'F'
|       `-RecordType 0x5611b0f7a3a0 'typed_array_memory<Router::element_landmark_t>'
|         `-ClassTemplateSpecialization 0x5611b0f7a2c0 'typed_array_memory'
|-FieldDecl 0x5611b0f7e490 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Router::element_landmark_t>::array_memory_type>':'vector_memory<typed_array_memory<Router::element_landmark_t> >' mutable
|-AccessSpecDecl 0x5611b0f7e4e0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5611b0f7e518 <line:118:5, col:15> col:15 value_type 'Router::element_landmark_t':'Router::element_landmark_t'
| `-SubstTemplateTypeParmType 0x5611b0f79900 'Router::element_landmark_t' sugar
|   |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5611b0b584d8 'T'
|   `-RecordType 0x5611b0f78cd0 'Router::element_landmark_t'
|     `-CXXRecord 0x5611b0f78c40 'element_landmark_t'
|-TypedefDecl 0x5611b0f7e5a8 <line:119:5, col:16> col:16 reference 'Router::element_landmark_t &'
| `-LValueReferenceType 0x5611b0f7e570 'Router::element_landmark_t &'
|   `-SubstTemplateTypeParmType 0x5611b0f79900 'Router::element_landmark_t' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-RecordType 0x5611b0f78cd0 'Router::element_landmark_t'
|       `-CXXRecord 0x5611b0f78c40 'element_landmark_t'
|-TypedefDecl 0x5611b0f7e638 <line:120:5, col:22> col:22 const_reference 'const Router::element_landmark_t &'
| `-LValueReferenceType 0x5611b0f7e600 'const Router::element_landmark_t &'
|   `-QualType 0x5611b0f79901 'const Router::element_landmark_t' const
|     `-SubstTemplateTypeParmType 0x5611b0f79900 'Router::element_landmark_t' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-RecordType 0x5611b0f78cd0 'Router::element_landmark_t'
|         `-CXXRecord 0x5611b0f78c40 'element_landmark_t'
|-TypedefDecl 0x5611b0f7e6c8 <line:121:5, col:16> col:16 pointer 'Router::element_landmark_t *'
| `-PointerType 0x5611b0f7e690 'Router::element_landmark_t *'
|   `-SubstTemplateTypeParmType 0x5611b0f79900 'Router::element_landmark_t' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-RecordType 0x5611b0f78cd0 'Router::element_landmark_t'
|       `-CXXRecord 0x5611b0f78c40 'element_landmark_t'
|-TypedefDecl 0x5611b0f80970 <line:122:5, col:22> col:22 const_pointer 'const Router::element_landmark_t *'
| `-PointerType 0x5611b0f7e720 'const Router::element_landmark_t *'
|   `-QualType 0x5611b0f79901 'const Router::element_landmark_t' const
|     `-SubstTemplateTypeParmType 0x5611b0f79900 'Router::element_landmark_t' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-RecordType 0x5611b0f78cd0 'Router::element_landmark_t'
|         `-CXXRecord 0x5611b0f78c40 'element_landmark_t'
|-TypedefDecl 0x5611b0f815d0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<element_landmark_t>::type':'const Router::element_landmark_t &'
| `-ElaboratedType 0x5611b0f81580 'typename fast_argument<element_landmark_t>::type' sugar
|   `-TypedefType 0x5611b0f81560 'fast_argument<Router::element_landmark_t, true>::type' sugar
|     |-Typedef 0x5611b0f81498 'type'
|     `-LValueReferenceType 0x5611b0f81460 'const Router::element_landmark_t &'
|       `-QualType 0x5611b0f81201 'const Router::element_landmark_t' const
|         `-SubstTemplateTypeParmType 0x5611b0f81200 'Router::element_landmark_t' sugar
|           |-TemplateTypeParmType 0x5611b0a7d360 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5611b0a7d308 'T'
|           `-RecordType 0x5611b0f78cd0 'Router::element_landmark_t'
|             `-CXXRecord 0x5611b0f78c40 'element_landmark_t'
|-TypedefDecl 0x5611b0f81638 <line:126:5, col:22> col:22 const_access_type 'const Router::element_landmark_t &'
| `-LValueReferenceType 0x5611b0f7e600 'const Router::element_landmark_t &'
|   `-QualType 0x5611b0f79901 'const Router::element_landmark_t' const
|     `-SubstTemplateTypeParmType 0x5611b0f79900 'Router::element_landmark_t' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-RecordType 0x5611b0f78cd0 'Router::element_landmark_t'
|         `-CXXRecord 0x5611b0f78c40 'element_landmark_t'
|-TypedefDecl 0x5611b0f81690 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0f816f8 <line:130:5, col:16> col:16 iterator 'Router::element_landmark_t *'
| `-PointerType 0x5611b0f7e690 'Router::element_landmark_t *'
|   `-SubstTemplateTypeParmType 0x5611b0f79900 'Router::element_landmark_t' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-RecordType 0x5611b0f78cd0 'Router::element_landmark_t'
|       `-CXXRecord 0x5611b0f78c40 'element_landmark_t'
|-TypedefDecl 0x5611b0f81760 <line:131:5, col:22> col:22 const_iterator 'const Router::element_landmark_t *'
| `-PointerType 0x5611b0f7e720 'const Router::element_landmark_t *'
|   `-QualType 0x5611b0f79901 'const Router::element_landmark_t' const
|     `-SubstTemplateTypeParmType 0x5611b0f79900 'Router::element_landmark_t' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-RecordType 0x5611b0f78cd0 'Router::element_landmark_t'
|         `-CXXRecord 0x5611b0f78c40 'element_landmark_t'
|-EnumDecl 0x5611b0f817b8 <line:134:5> col:5
| `-EnumConstantDecl 0x5611b0f818b0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Router::element_landmark_t>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5611b0f81890 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5611b0b59f18 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5611b0b59ef0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5611b0b59ed0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5611b0f81938 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5611b0f81bc8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Router::element_landmark_t>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0f819f0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0f81a90 <col:41, col:61> col:61 v 'Vector<Router::element_landmark_t>::value_argument_type':'const Router::element_landmark_t &'
|-CXXConstructorDecl 0x5611b0f81e88 <line:139:5, col:37> col:12 Vector 'void (const Vector<Router::element_landmark_t> &)' inline
| `-ParmVarDecl 0x5611b0f81d70 <col:19, col:36> col:36 x 'const Vector<Router::element_landmark_t> &'
|-CXXConstructorDecl 0x5611b0f82148 <line:141:5, col:32> col:12 Vector 'void (Vector<Router::element_landmark_t> &&)' inline
| `-ParmVarDecl 0x5611b0f82030 <col:19, col:31> col:31 x 'Vector<Router::element_landmark_t> &&'
|-CXXMethodDecl 0x5611b0f82490 <line:144:5, col:51> col:23 operator= 'Vector<Router::element_landmark_t> &(const Vector<Router::element_landmark_t> &)' inline
| `-ParmVarDecl 0x5611b0f82370 <col:33, col:50> col:50 x 'const Vector<Router::element_landmark_t> &'
|-CXXMethodDecl 0x5611b0f827a0 <line:146:5, col:46> col:23 operator= 'Vector<Router::element_landmark_t> &(Vector<Router::element_landmark_t> &&)' inline
| `-ParmVarDecl 0x5611b0f82680 <col:33, col:45> col:45 x 'Vector<Router::element_landmark_t> &&'
|-CXXMethodDecl 0x5611b0f82a90 <line:148:5, col:70> col:23 assign 'Vector<Router::element_landmark_t> &(Vector::size_type, Vector<Router::element_landmark_t>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0f828d8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0f82950 <col:43, col:69> col:63 v 'Vector<Router::element_landmark_t>::value_argument_type':'const Router::element_landmark_t &'
|-CXXMethodDecl 0x5611b0f82bb8 <line:150:5, col:55> col:49 begin 'Vector<Router::element_landmark_t>::iterator ()'
| |-NoInlineAttr 0x5611b0f82c98 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f82cf0 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f82d38 <line:151:5, col:53> col:49 end 'Vector<Router::element_landmark_t>::iterator ()'
| |-NoInlineAttr 0x5611b0f82de8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f82e40 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f82f08 <line:152:5, col:63> col:55 begin 'Vector<Router::element_landmark_t>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f82fb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f83010 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f83058 <line:153:5, col:61> col:55 end 'Vector<Router::element_landmark_t>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f83108 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f83160 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f831a8 <line:154:5, col:64> col:55 cbegin 'Vector<Router::element_landmark_t>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f83258 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f832b0 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f832f8 <line:155:5, col:62> col:55 cend 'Vector<Router::element_landmark_t>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f833a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f83400 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f83428 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5611b0f834d8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5611b0f83588 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5611b0f83748 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Router::element_landmark_t>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0f83638 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0f836b0 <col:37, col:63> col:57 v 'Vector<Router::element_landmark_t>::value_argument_type':'const Router::element_landmark_t &'
|-CXXMethodDecl 0x5611b0f83898 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0f83808 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f83a48 <line:163:5, col:65> col:43 operator[] 'Router::element_landmark_t &(Vector::size_type)'
| |-ParmVarDecl 0x5611b0f83950 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5611b0f83b00 <col:20>
| `-OptimizeNoneAttr 0x5611b0f83b58 <col:30>
|-CXXMethodDecl 0x5611b0f83c78 <line:164:5, col:73> col:49 operator[] 'const Router::element_landmark_t &(Vector::size_type) const'
| |-ParmVarDecl 0x5611b0f83b80 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5611b0f83d30 <col:20>
| `-OptimizeNoneAttr 0x5611b0f83d88 <col:30>
|-CXXMethodDecl 0x5611b0f83e40 <line:165:5, col:29> col:15 at 'Router::element_landmark_t &(Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0f83db0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f83f88 <line:166:5, col:37> col:21 at 'const Router::element_landmark_t &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5611b0f83ef8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f840b8 <line:167:5, col:21> col:15 front 'Router::element_landmark_t &()' inline
|-CXXMethodDecl 0x5611b0f841e8 <line:168:5, col:29> col:21 front 'const Router::element_landmark_t &() const' inline
|-CXXMethodDecl 0x5611b0f842b8 <line:169:5, col:20> col:15 back 'Router::element_landmark_t &()' inline
|-CXXMethodDecl 0x5611b0f84388 <line:170:5, col:28> col:21 back 'const Router::element_landmark_t &() const' inline
|-CXXMethodDecl 0x5611b0f844c8 <line:172:5, col:39> col:15 unchecked_at 'Router::element_landmark_t &(Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0f84438 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f84610 <line:173:5, col:47> col:21 unchecked_at 'const Router::element_landmark_t &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5611b0f84580 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f84758 <line:174:5, col:59> col:15 at_u 'Router::element_landmark_t &(Vector::size_type)' inline
| |-ParmVarDecl 0x5611b0f846c8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5611b0f84810 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5611b0f84910 <line:175:5, col:71> col:21 at_u 'const Router::element_landmark_t &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5611b0f84880 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5611b0f849c8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5611b0f84a88 <line:177:5, col:20> col:15 data 'Router::element_landmark_t *()' inline
|-CXXMethodDecl 0x5611b0f84b88 <line:178:5, col:28> col:21 data 'const Router::element_landmark_t *() const' inline
|-CXXMethodDecl 0x5611b0f84d08 <line:180:5, col:48> col:17 push_back 'void (Vector<Router::element_landmark_t>::value_argument_type)' inline
| `-ParmVarDecl 0x5611b0f84c48 <col:27, col:47> col:47 v 'Vector<Router::element_landmark_t>::value_argument_type':'const Router::element_landmark_t &'
|-FunctionTemplateDecl 0x5611b0f85498 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5611b0f84dc0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Router::element_landmark_t>':'fast_argument<Router::element_landmark_t, true>'
| `-CXXMethodDecl 0x5611b0f853f8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Router::element_landmark_t &&)' inline
|   `-ParmVarDecl 0x5611b0f852f8 <col:58, col:62> col:62 v 'Router::element_landmark_t &&'
|-CXXMethodDecl 0x5611b0f85578 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5611b0f856c8 <line:186:5, col:49> col:17 push_front 'void (Vector<Router::element_landmark_t>::value_argument_type)' inline
| `-ParmVarDecl 0x5611b0f85638 <col:28, col:48> col:48 v 'Vector<Router::element_landmark_t>::value_argument_type':'const Router::element_landmark_t &'
|-CXXMethodDecl 0x5611b0f85780 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5611b0f859c8 <line:189:5, col:62> col:21 insert 'Vector<Router::element_landmark_t>::iterator (Vector<Router::element_landmark_t>::iterator, Vector<Router::element_landmark_t>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0f85840 <col:28, col:37> col:37 it 'Vector<Router::element_landmark_t>::iterator':'Router::element_landmark_t *'
| `-ParmVarDecl 0x5611b0f858b8 <col:41, col:61> col:61 v 'Vector<Router::element_landmark_t>::value_argument_type':'const Router::element_landmark_t &'
|-CXXMethodDecl 0x5611b0f85b58 <line:190:5, col:38> col:21 erase 'Vector<Router::element_landmark_t>::iterator (Vector<Router::element_landmark_t>::iterator)' inline
| `-ParmVarDecl 0x5611b0f85a98 <col:27, col:36> col:36 it 'Vector<Router::element_landmark_t>::iterator':'Router::element_landmark_t *'
|-CXXMethodDecl 0x5611b0f85d68 <line:191:5, col:49> col:21 erase 'Vector<Router::element_landmark_t>::iterator (Vector<Router::element_landmark_t>::iterator, Vector<Router::element_landmark_t>::iterator)' inline
| |-ParmVarDecl 0x5611b0f85c20 <col:27, col:36> col:36 a 'Vector<Router::element_landmark_t>::iterator':'Router::element_landmark_t *'
| `-ParmVarDecl 0x5611b0f85c98 <col:39, col:48> col:48 b 'Vector<Router::element_landmark_t>::iterator':'Router::element_landmark_t *'
|-CXXMethodDecl 0x5611b0f85e28 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5611b0f86088 <line:195:5, col:34> col:17 swap 'void (Vector<Router::element_landmark_t> &)' inline
| `-ParmVarDecl 0x5611b0f85f90 <col:22, col:33> col:33 x 'Vector<Router::element_landmark_t> &'
`-CXXDestructorDecl 0x5611b0f86158 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5611b0f86158

Layout: <CGRecordLayout
  LLVMType:%class.Vector.6 = type { %class.vector_memory.7 }
  NonVirtualBaseLLVMType:%class.Vector.6 = type { %class.vector_memory.7 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5611b0ee8cd0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<16>'
|-CXXRecordDecl 0x5611b0ee8ea8 prev 0x5611b0ee8cd0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5611b0ee8f38 <col:46, col:52> col:46 public
|-TypedefDecl 0x5611b0ee8f60 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0ef4ba0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<16>::type':'char_array<16>'
| `-ElaboratedType 0x5611b0ef4b50 'typename sized_array_memory<16>::type' sugar
|   `-TypedefType 0x5611b0ee9410 'sized_array_memory<16>::type' sugar
|     |-Typedef 0x5611b0ee9310 'type'
|     `-TemplateSpecializationType 0x5611b0ee92a0 'char_array<16UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5611b0ee9180 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|       |   `-SubstNonTypeTemplateParmExpr 0x5611b0ee9160 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5611b0ee9140 <col:24> 'unsigned long' 16
|       `-RecordType 0x5611b0ee9280 'char_array<16>'
|         `-ClassTemplateSpecialization 0x5611b0ee91a0 'char_array'
|-TypedefDecl 0x5611b0ef4c58 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<16> >::type *'
| `-PointerType 0x5611b0ef4c20 'vector_memory<sized_array_memory<16> >::type *'
|   `-TypedefType 0x5611b0ef4c00 'vector_memory<sized_array_memory<16> >::type' sugar
|     |-Typedef 0x5611b0ef4ba0 'type'
|     `-ElaboratedType 0x5611b0ef4b50 'typename sized_array_memory<16>::type' sugar
|       `-TypedefType 0x5611b0ee9410 'sized_array_memory<16>::type' sugar
|         |-Typedef 0x5611b0ee9310 'type'
|         `-TemplateSpecializationType 0x5611b0ee92a0 'char_array<16UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5611b0ee9180 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|           |   `-SubstNonTypeTemplateParmExpr 0x5611b0ee9160 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5611b0ee9140 <col:24> 'unsigned long' 16
|           `-RecordType 0x5611b0ee9280 'char_array<16>'
|             `-ClassTemplateSpecialization 0x5611b0ee91a0 'char_array'
|-CXXMethodDecl 0x5611b0ef4dd8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<16> >::type *) const' inline
| `-ParmVarDecl 0x5611b0ef4ce8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXConstructorDecl 0x5611b0ef4ec8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5611b0ef4fa8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5611b0ef4fa8
|-CXXMethodDecl 0x5611b0ef5278 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x5611b0ef5180 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<16> > &'
|-CXXMethodDecl 0x5611b0ef54b8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5611b0ef5330 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5611b0ef53a8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5611b0ef5688 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5611b0ef5578 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5611b0ef55f0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5611b0ef57e8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x5611b0ef58b8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x5611b0ef5b08 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5611b0ef5978 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x5611b0ef59f0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5611b0ef5d68 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, vector_memory<sized_array_memory<16> >::iterator)'
| |-ParmVarDecl 0x5611b0ef5bd8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x5611b0ef5c50 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5611b0ef5f28 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x5611b0ef5e38 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5611b0ef60e8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x5611b0ef5ff0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5611b0ef61a0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5611b0ef6250 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5611b0ef6488 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5611b0ef6300 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5611b0ef6378 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5611b0ef6728 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x5611b0ef6630 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<16> > &'
|-FieldDecl 0x5611b0ef67f0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<16> >::type *'
|-FieldDecl 0x5611b0ef6840 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5611b0ef6890 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.9 = type { %struct.char_array.10*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.9 = type { %struct.char_array.10*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5611b0f86870 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Router::Connection'
|-CXXRecordDecl 0x5611b0f86a78 prev 0x5611b0f86870 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5611b0f87b40 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<Connection>::type':'sized_array_memory<16>'
| `-ElaboratedType 0x5611b0f87af0 'typename array_memory<Connection>::type' sugar
|   `-TypedefType 0x5611b0f87ad0 'conditional<true, sized_array_memory<16>, typed_array_memory<Router::Connection> >::type' sugar
|     |-Typedef 0x5611b0f87980 'type'
|     `-SubstTemplateTypeParmType 0x5611b0ee88a0 'sized_array_memory<16>' sugar
|       |-TemplateTypeParmType 0x5611b0a748b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0a74858 'T'
|       `-RecordType 0x5611b0ee83f0 'sized_array_memory<16>'
|         `-ClassTemplateSpecialization 0x5611b0ee8308 'sized_array_memory'
|-FieldDecl 0x5611b0f87c40 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Router::Connection>::array_memory_type>':'vector_memory<sized_array_memory<16> >' mutable
|-AccessSpecDecl 0x5611b0f87c90 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5611b0f87cc8 <line:118:5, col:15> col:15 value_type 'Router::Connection':'Router::Connection'
| `-SubstTemplateTypeParmType 0x5611b0f86b10 'Router::Connection' sugar
|   |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5611b0b584d8 'T'
|   `-RecordType 0x5611b0f6fbf0 'Router::Connection'
|     `-CXXRecord 0x5611b0f6fb60 'Connection'
|-TypedefDecl 0x5611b0f87d88 <line:119:5, col:16> col:16 reference 'Router::Connection &'
| `-LValueReferenceType 0x5611b0f87d50 'Router::Connection &'
|   `-SubstTemplateTypeParmType 0x5611b0f86b10 'Router::Connection' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-RecordType 0x5611b0f6fbf0 'Router::Connection'
|       `-CXXRecord 0x5611b0f6fb60 'Connection'
|-TypedefDecl 0x5611b0f87e18 <line:120:5, col:22> col:22 const_reference 'const Router::Connection &'
| `-LValueReferenceType 0x5611b0f87de0 'const Router::Connection &'
|   `-QualType 0x5611b0f86b11 'const Router::Connection' const
|     `-SubstTemplateTypeParmType 0x5611b0f86b10 'Router::Connection' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-RecordType 0x5611b0f6fbf0 'Router::Connection'
|         `-CXXRecord 0x5611b0f6fb60 'Connection'
|-TypedefDecl 0x5611b0f87ea8 <line:121:5, col:16> col:16 pointer 'Router::Connection *'
| `-PointerType 0x5611b0f87e70 'Router::Connection *'
|   `-SubstTemplateTypeParmType 0x5611b0f86b10 'Router::Connection' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-RecordType 0x5611b0f6fbf0 'Router::Connection'
|       `-CXXRecord 0x5611b0f6fb60 'Connection'
|-TypedefDecl 0x5611b0f87f38 <line:122:5, col:22> col:22 const_pointer 'const Router::Connection *'
| `-PointerType 0x5611b0f87f00 'const Router::Connection *'
|   `-QualType 0x5611b0f86b11 'const Router::Connection' const
|     `-SubstTemplateTypeParmType 0x5611b0f86b10 'Router::Connection' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-RecordType 0x5611b0f6fbf0 'Router::Connection'
|         `-CXXRecord 0x5611b0f6fb60 'Connection'
|-TypedefDecl 0x5611b0f89eb0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<Connection>::type':'const Router::Connection &'
| `-ElaboratedType 0x5611b0f89e60 'typename fast_argument<Connection>::type' sugar
|   `-TypedefType 0x5611b0f89e40 'fast_argument<Router::Connection, true>::type' sugar
|     |-Typedef 0x5611b0f89d78 'type'
|     `-LValueReferenceType 0x5611b0f89d40 'const Router::Connection &'
|       `-QualType 0x5611b0f887c1 'const Router::Connection' const
|         `-SubstTemplateTypeParmType 0x5611b0f887c0 'Router::Connection' sugar
|           |-TemplateTypeParmType 0x5611b0a7d360 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5611b0a7d308 'T'
|           `-RecordType 0x5611b0f6fbf0 'Router::Connection'
|             `-CXXRecord 0x5611b0f6fb60 'Connection'
|-TypedefDecl 0x5611b0f89f18 <line:126:5, col:22> col:22 const_access_type 'const Router::Connection &'
| `-LValueReferenceType 0x5611b0f87de0 'const Router::Connection &'
|   `-QualType 0x5611b0f86b11 'const Router::Connection' const
|     `-SubstTemplateTypeParmType 0x5611b0f86b10 'Router::Connection' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-RecordType 0x5611b0f6fbf0 'Router::Connection'
|         `-CXXRecord 0x5611b0f6fb60 'Connection'
|-TypedefDecl 0x5611b0f89f70 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0f89fd8 <line:130:5, col:16> col:16 iterator 'Router::Connection *'
| `-PointerType 0x5611b0f87e70 'Router::Connection *'
|   `-SubstTemplateTypeParmType 0x5611b0f86b10 'Router::Connection' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-RecordType 0x5611b0f6fbf0 'Router::Connection'
|       `-CXXRecord 0x5611b0f6fb60 'Connection'
|-TypedefDecl 0x5611b0f8a040 <line:131:5, col:22> col:22 const_iterator 'const Router::Connection *'
| `-PointerType 0x5611b0f87f00 'const Router::Connection *'
|   `-QualType 0x5611b0f86b11 'const Router::Connection' const
|     `-SubstTemplateTypeParmType 0x5611b0f86b10 'Router::Connection' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-RecordType 0x5611b0f6fbf0 'Router::Connection'
|         `-CXXRecord 0x5611b0f6fb60 'Connection'
|-EnumDecl 0x5611b0f8a098 <line:134:5> col:5
| `-EnumConstantDecl 0x5611b0f8a190 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Router::Connection>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5611b0f8a170 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5611b0b59f18 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5611b0b59ef0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5611b0b59ed0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5611b0f8a218 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5611b0f8a4a8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Router::Connection>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0f8a2d0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0f8a370 <col:41, col:61> col:61 v 'Vector<Router::Connection>::value_argument_type':'const Router::Connection &'
|-CXXConstructorDecl 0x5611b0f8a768 <line:139:5, col:37> col:12 Vector 'void (const Vector<Router::Connection> &)' inline
| `-ParmVarDecl 0x5611b0f8a650 <col:19, col:36> col:36 x 'const Vector<Router::Connection> &'
|-CXXConstructorDecl 0x5611b0f8aa28 <line:141:5, col:32> col:12 Vector 'void (Vector<Router::Connection> &&)' inline
| `-ParmVarDecl 0x5611b0f8a910 <col:19, col:31> col:31 x 'Vector<Router::Connection> &&'
|-CXXMethodDecl 0x5611b0f8ad70 <line:144:5, col:51> col:23 operator= 'Vector<Router::Connection> &(const Vector<Router::Connection> &)' inline
| `-ParmVarDecl 0x5611b0f8ac50 <col:33, col:50> col:50 x 'const Vector<Router::Connection> &'
|-CXXMethodDecl 0x5611b0f8b080 <line:146:5, col:46> col:23 operator= 'Vector<Router::Connection> &(Vector<Router::Connection> &&)' inline
| `-ParmVarDecl 0x5611b0f8af60 <col:33, col:45> col:45 x 'Vector<Router::Connection> &&'
|-CXXMethodDecl 0x5611b0f8b370 <line:148:5, col:70> col:23 assign 'Vector<Router::Connection> &(Vector::size_type, Vector<Router::Connection>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0f8b1b8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0f8b230 <col:43, col:69> col:63 v 'Vector<Router::Connection>::value_argument_type':'const Router::Connection &'
|-CXXMethodDecl 0x5611b0f8b4c8 <line:150:5, col:55> col:49 begin 'Vector<Router::Connection>::iterator ()'
| |-NoInlineAttr 0x5611b0f8b5a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f8b600 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f8b648 <line:151:5, col:53> col:49 end 'Vector<Router::Connection>::iterator ()'
| |-NoInlineAttr 0x5611b0f8b6f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f8b750 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f8b818 <line:152:5, col:63> col:55 begin 'Vector<Router::Connection>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f8b8c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f8b920 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f8b968 <line:153:5, col:61> col:55 end 'Vector<Router::Connection>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f8ba18 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f8ba70 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f8bab8 <line:154:5, col:64> col:55 cbegin 'Vector<Router::Connection>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f8bb68 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f8bbc0 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f8bc08 <line:155:5, col:62> col:55 cend 'Vector<Router::Connection>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f8bcb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f8bd10 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f8bd38 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5611b0f8bde8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5611b0f8be98 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5611b0f8c058 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Router::Connection>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0f8bf48 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0f8bfc0 <col:37, col:63> col:57 v 'Vector<Router::Connection>::value_argument_type':'const Router::Connection &'
|-CXXMethodDecl 0x5611b0f8c1a8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0f8c118 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f8c358 <line:163:5, col:65> col:43 operator[] 'Router::Connection &(Vector::size_type)'
| |-ParmVarDecl 0x5611b0f8c260 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5611b0f8c410 <col:20>
| `-OptimizeNoneAttr 0x5611b0f8c468 <col:30>
|-CXXMethodDecl 0x5611b0f8c588 <line:164:5, col:73> col:49 operator[] 'const Router::Connection &(Vector::size_type) const'
| |-ParmVarDecl 0x5611b0f8c490 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5611b0f8c640 <col:20>
| `-OptimizeNoneAttr 0x5611b0f8c698 <col:30>
|-CXXMethodDecl 0x5611b0f8c750 <line:165:5, col:29> col:15 at 'Router::Connection &(Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0f8c6c0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f8c898 <line:166:5, col:37> col:21 at 'const Router::Connection &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5611b0f8c808 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f8c9c8 <line:167:5, col:21> col:15 front 'Router::Connection &()' inline
|-CXXMethodDecl 0x5611b0f8caf8 <line:168:5, col:29> col:21 front 'const Router::Connection &() const' inline
|-CXXMethodDecl 0x5611b0f8cbc8 <line:169:5, col:20> col:15 back 'Router::Connection &()' inline
|-CXXMethodDecl 0x5611b0f8cc98 <line:170:5, col:28> col:21 back 'const Router::Connection &() const' inline
|-CXXMethodDecl 0x5611b0f8cdd8 <line:172:5, col:39> col:15 unchecked_at 'Router::Connection &(Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0f8cd48 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f8cf20 <line:173:5, col:47> col:21 unchecked_at 'const Router::Connection &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5611b0f8ce90 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f8d068 <line:174:5, col:59> col:15 at_u 'Router::Connection &(Vector::size_type)' inline
| |-ParmVarDecl 0x5611b0f8cfd8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5611b0f8d120 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5611b0f8d220 <line:175:5, col:71> col:21 at_u 'const Router::Connection &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5611b0f8d190 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5611b0f8d2d8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5611b0f8d398 <line:177:5, col:20> col:15 data 'Router::Connection *()' inline
|-CXXMethodDecl 0x5611b0f8d498 <line:178:5, col:28> col:21 data 'const Router::Connection *() const' inline
|-CXXMethodDecl 0x5611b0f8d648 <line:180:5, col:48> col:17 push_back 'void (Vector<Router::Connection>::value_argument_type)' inline
| `-ParmVarDecl 0x5611b0f8d558 <col:27, col:47> col:47 v 'Vector<Router::Connection>::value_argument_type':'const Router::Connection &'
|-FunctionTemplateDecl 0x5611b0f8de08 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5611b0f8d700 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Router::Connection>':'fast_argument<Router::Connection, true>'
| `-CXXMethodDecl 0x5611b0f8dd68 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Router::Connection &&)' inline
|   `-ParmVarDecl 0x5611b0f8dc68 <col:58, col:62> col:62 v 'Router::Connection &&'
|-CXXMethodDecl 0x5611b0f8dee8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5611b0f8e038 <line:186:5, col:49> col:17 push_front 'void (Vector<Router::Connection>::value_argument_type)' inline
| `-ParmVarDecl 0x5611b0f8dfa8 <col:28, col:48> col:48 v 'Vector<Router::Connection>::value_argument_type':'const Router::Connection &'
|-CXXMethodDecl 0x5611b0f8e0f0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5611b0f8e338 <line:189:5, col:62> col:21 insert 'Vector<Router::Connection>::iterator (Vector<Router::Connection>::iterator, Vector<Router::Connection>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0f8e1b0 <col:28, col:37> col:37 it 'Vector<Router::Connection>::iterator':'Router::Connection *'
| `-ParmVarDecl 0x5611b0f8e228 <col:41, col:61> col:61 v 'Vector<Router::Connection>::value_argument_type':'const Router::Connection &'
|-CXXMethodDecl 0x5611b0f8e4f8 <line:190:5, col:38> col:21 erase 'Vector<Router::Connection>::iterator (Vector<Router::Connection>::iterator)' inline
| `-ParmVarDecl 0x5611b0f8e408 <col:27, col:36> col:36 it 'Vector<Router::Connection>::iterator':'Router::Connection *'
|-CXXMethodDecl 0x5611b0f8e748 <line:191:5, col:49> col:21 erase 'Vector<Router::Connection>::iterator (Vector<Router::Connection>::iterator, Vector<Router::Connection>::iterator)' inline
| |-ParmVarDecl 0x5611b0f8e5c0 <col:27, col:36> col:36 a 'Vector<Router::Connection>::iterator':'Router::Connection *'
| `-ParmVarDecl 0x5611b0f8e638 <col:39, col:48> col:48 b 'Vector<Router::Connection>::iterator':'Router::Connection *'
|-CXXMethodDecl 0x5611b0f8e808 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5611b0f8ea68 <line:195:5, col:34> col:17 swap 'void (Vector<Router::Connection> &)' inline
| `-ParmVarDecl 0x5611b0f8e970 <col:22, col:33> col:33 x 'Vector<Router::Connection> &'
`-CXXDestructorDecl 0x5611b0f8eb38 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5611b0f8eb38

Layout: <CGRecordLayout
  LLVMType:%class.Vector.8 = type { %class.vector_memory.9 }
  NonVirtualBaseLLVMType:%class.Vector.8 = type { %class.vector_memory.9 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Handler::(anonymous at ../dummy_inc/click/handler.hh:290:5)
         0 |   HandlerCallback h
         0 |   ReadHandlerCallback r
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | union Handler::(anonymous at ../dummy_inc/click/handler.hh:294:5)
         0 |   HandlerCallback h
         0 |   WriteHandlerCallback w
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Handler
         0 |   class String _name
         0 |     struct String::rep_t _r
         0 |       const char * data
         8 |       int length
        16 |       struct String::memo_t * memo
        24 |   union Handler::(anonymous at ../dummy_inc/click/handler.hh:290:5) _read_hook
        24 |     HandlerCallback h
        24 |     ReadHandlerCallback r
        32 |   union Handler::(anonymous at ../dummy_inc/click/handler.hh:294:5) _write_hook
        32 |     HandlerCallback h
        32 |     WriteHandlerCallback w
        40 |   void * _read_user_data
        48 |   void * _write_user_data
        56 |   uint32_t _flags
        60 |   int _use_count
        64 |   int _next_by_name
           | [sizeof=72, dsize=68, align=8,
           |  nvsize=68, nvalign=8]

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0fa8a60 prev 0x5611b0e8d810 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5611b0fa8b58 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5611b0fa8be8 <col:22, col:28> col:22 public
|-EnumDecl 0x5611b0fa8c10 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5611b0fa8d28 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5611b0fa8d08 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5611b0fa8cf0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5611b0fa8cd0 <col:14> 'int' 999
| |-EnumConstantDecl 0x5611b0fa8dd0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5611b0fa8db0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5611b0fa8d98 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5611b0fa8d78 <col:14> 'int' 1
| |-EnumConstantDecl 0x5611b0fa8e60 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5611b0fa8e40 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5611b0fa8e20 <col:17> 'int' 0
| |-EnumConstantDecl 0x5611b0fa8ef0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5611b0fa8ed0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5611b0fa8eb0 <col:13> 'int' 1
| |-EnumConstantDecl 0x5611b0fa8f80 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5611b0fa8f60 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5611b0fa8f40 <col:16> 'int' 2
| |-EnumConstantDecl 0x5611b0fa9010 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5611b0fa8ff0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5611b0fa8fd0 <col:13> 'int' 3
| |-EnumConstantDecl 0x5611b0fa90a0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5611b0fa9080 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5611b0fa9060 <col:15> 'int' 4
| |-EnumConstantDecl 0x5611b0fa9130 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5611b0fa9110 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5611b0fa90f0 <col:14> 'int' 5
| |-EnumConstantDecl 0x5611b0fa91c0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5611b0fa91a0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5611b0fa9180 <col:12> 'int' 6
| `-EnumConstantDecl 0x5611b0fa9250 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5611b0fa9230 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5611b0fa9210 <col:13> 'int' 7
|-VarDecl 0x5611b0fa92c0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5611b0fa9348 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5611b0fa93d0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5611b0fa9458 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5611b0fa94e0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5611b0fa9568 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5611b0fa95f0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5611b0fa9678 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5611b0fa9700 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5611b0fa9788 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5611b0fa9810 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5611b0fa9910 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5611b0faebf8 '_nerrors' 'int'
| | `-IntegerLiteral 0x5611b0fb03d8 <line:128:13> 'int' 0
| `-CompoundStmt 0x5611b0fb0448 <col:16, line:129:5>
|-CXXDestructorDecl 0x5611b0fa9a00 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5611b0fb0458 <col:29, line:132:5>
|-CXXMethodDecl 0x5611b0fa9bb8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5611b0fa9af0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5611b0fa9c80 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5611b0fa9d68 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5611b0fb04b0 <col:44, line:161:5>
|   `-ReturnStmt 0x5611b0fb04a0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5611b0fb0488 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5611b0fb0468 <col:9> 'ErrorHandler *' lvalue Var 0x5611b0faec58 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5611b0fa9ea8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5611b0fa9e18 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5611b0fa9f70 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5611b0fb0510 <col:43, line:173:5>
|   `-ReturnStmt 0x5611b0fb0500 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5611b0fb04e8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5611b0fb04c8 <col:9> 'ErrorHandler *' lvalue Var 0x5611b0faecd0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5611b0faa028 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5611b0faa0a8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5611b0faa1b8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5611b0faa128 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5611b0faa308 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5611b0faa278 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5611b0faa460 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5611b0faa3c8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5611b0faa5b8 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x5611b0faa520 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5611b0faa710 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5611b0faa678 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5611b0faa920 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5611b0faa7c8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5611b0faa848 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5611b0faaaf8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5611b0faa9e0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5611b0faaa60 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5611b0faad18 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5611b0faabb8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5611b0faac38 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5611b0faaef8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5611b0faadd8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5611b0faae58 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5611b0fab0d8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5611b0faafb8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5611b0fab038 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5611b0fab260 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5611b0fab198 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5611b0fab430 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5611b0fab318 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5611b0fab390 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5611b0fb0768 <col:57, line:234:5>
|   `-ReturnStmt 0x5611b0fb0758 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5611b0fb0740 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5611b0fb06e8 <col:9, col:41> 'int'
|         |-MemberExpr 0x5611b0fb06b8 <col:9> '<bound member function type>' ->xmessage 0x5611b0fab260
|         | `-CXXThisExpr 0x5611b0fb06a8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5611b0fb0728 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5611b0fb0710 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5611b0fb0688 <col:18, col:40> 'String' (CXXTemporary 0x5611b0fb0688)
|               `-CallExpr 0x5611b0fb0650 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5611b0fb0638 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5611b0fb05b0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5611b0fad428 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5611b0fb05d0 <col:31> 'const String' lvalue ParmVar 0x5611b0fab390 'str' 'const String &'
|                 `-DeclRefExpr 0x5611b0fb05f0 <col:36> 'const String' lvalue ParmVar 0x5611b0fab318 'anno' 'const String &'
|-CXXMethodDecl 0x5611b0fab710 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5611b0fab4f0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5611b0fab570 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5611b0fab5e8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5611b0fb09f8 <col:68, line:243:5>
|   `-ReturnStmt 0x5611b0fb09e8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5611b0fb09d0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5611b0fb0970 <col:9, col:41> 'int'
|         |-MemberExpr 0x5611b0fb0940 <col:9> '<bound member function type>' ->xmessage 0x5611b0fab430
|         | `-CXXThisExpr 0x5611b0fb0930 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5611b0fb0808 <col:18> 'const String' lvalue ParmVar 0x5611b0fab4f0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5611b0fb09b8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5611b0fb09a0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5611b0fb0910 <col:24, col:40> 'String' (CXXTemporary 0x5611b0fb0910)
|               `-CXXMemberCallExpr 0x5611b0fb08a8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5611b0fb0838 <col:24> '<bound member function type>' ->vformat 0x5611b0fac8f0
|                 | `-CXXThisExpr 0x5611b0fb0828 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5611b0fb08d8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5611b0fb0868 <col:32> 'const char *' lvalue ParmVar 0x5611b0fab570 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5611b0fb08f0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5611b0fb0888 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5611b0fab5e8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5611b0fab9b0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5611b0fab7d8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5611b0fab850 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5611b0fab8c8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5611b0fb0d38 <col:23, line:254:5>
|   `-ReturnStmt 0x5611b0fb0d28 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5611b0fb0d10 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5611b0fb0cb0 <col:9, col:71> 'int'
|         |-MemberExpr 0x5611b0fb0c80 <col:9> '<bound member function type>' ->xmessage 0x5611b0fab430
|         | `-CXXThisExpr 0x5611b0fb0c70 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5611b0fb0cf8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5611b0fb0ce0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5611b0fb0c30 <col:18, col:65> 'String' (CXXTemporary 0x5611b0fb0c30)
|         |     `-CallExpr 0x5611b0fb0bc8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5611b0fb0bb0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5611b0fb0a98 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5611b0fad428 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5611b0fb0ab8 <col:31> 'const String' lvalue ParmVar 0x5611b0fab850 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5611b0fb0c10 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5611b0fb0bf8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5611b0fb0b90 <col:37, col:64> 'String' (CXXTemporary 0x5611b0fb0b90)
|         |             `-CallExpr 0x5611b0fb0b60 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5611b0fb0b48 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5611b0fb0ad8 <col:37> 'String (const String &)' lvalue CXXMethod 0x5611b0fada78 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5611b0fb0af8 <col:56> 'const String' lvalue ParmVar 0x5611b0fab7d8 'landmark' 'const String &'
|         `-DeclRefExpr 0x5611b0fb0c50 <col:68> 'const String' lvalue ParmVar 0x5611b0fab8c8 'str' 'const String &'
|-CXXMethodDecl 0x5611b0fabd30 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5611b0faba78 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5611b0fabaf0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5611b0fabb70 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5611b0fabbe8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5611b0fb0ff0 <col:34, line:267:5>
|   `-ReturnStmt 0x5611b0fb0fe0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5611b0fb0fc8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5611b0fb0f60 <col:9, col:51> 'int'
|         |-MemberExpr 0x5611b0fb0f30 <col:9> '<bound member function type>' ->xmessage 0x5611b0fab9b0
|         | `-CXXThisExpr 0x5611b0fb0f20 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5611b0fb0dd8 <col:18> 'const String' lvalue ParmVar 0x5611b0faba78 'landmark' 'const String &'
|         |-DeclRefExpr 0x5611b0fb0df8 <col:28> 'const String' lvalue ParmVar 0x5611b0fabaf0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5611b0fb0fb0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5611b0fb0f98 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5611b0fb0f00 <col:34, col:50> 'String' (CXXTemporary 0x5611b0fb0f00)
|               `-CXXMemberCallExpr 0x5611b0fb0e98 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5611b0fb0e28 <col:34> '<bound member function type>' ->vformat 0x5611b0fac8f0
|                 | `-CXXThisExpr 0x5611b0fb0e18 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5611b0fb0ec8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5611b0fb0e58 <col:42> 'const char *' lvalue ParmVar 0x5611b0fabb70 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5611b0fb0ee0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5611b0fb0e78 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5611b0fabbe8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5611b0fabe40 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5611b0fb1070 <col:25, line:288:5>
|   `-ReturnStmt 0x5611b0fb1060 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5611b0fb1048 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5611b0fb1018 <col:9> 'const int' lvalue ->_nerrors 0x5611b0faebf8
|         `-CXXThisExpr 0x5611b0fb1008 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5611b0fac050 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5611b0fabef8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5611b0fabf78 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5611b0fac338 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5611b0fac118 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5611b0fac198 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5611b0fac210 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5611b0fac4d0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5611b0fac408 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5611b0fac718 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5611b0fac590 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5611b0fac608 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5611b0fb12d0 <col:58, line:357:5>
|   `-ReturnStmt 0x5611b0fb12c0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5611b0fb12a8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5611b0fb1278 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5611b0fb1260 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5611b0fb1240 <col:9, col:29> 'String' (CXXTemporary 0x5611b0fb1240)
|             `-CallExpr 0x5611b0fb11d0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5611b0fb11b8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5611b0fb1138 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5611b0fac338 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5611b0fb10d8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5611b0fb1208 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5611b0fb10f8 <col:21> 'const char *' lvalue ParmVar 0x5611b0fac590 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5611b0fb1220 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5611b0fb1118 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5611b0fac608 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5611b0fac8f0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5611b0fac7e0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5611b0fac858 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5611b0faca48 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5611b0fac9b8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5611b0facb90 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5611b0facb00 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5611b0face30 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5611b0facc48 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5611b0faccc8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5611b0facd40 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5611b0facf90 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5611b0facf00 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5611b0fb13e8 <col:37, line:441:5>
|   `-IfStmt 0x5611b0fb13d0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5611b0fb1358 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5611b0fb1328 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5611b0fb12e8 <col:6> 'int' lvalue ParmVar 0x5611b0facf00 'level' 'int'
|     | `-ImplicitCastExpr 0x5611b0fb1340 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5611b0fb1308 <col:15> 'ErrorHandler::Level' EnumConstant 0x5611b0fa9010 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5611b0fb13b8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5611b0fb1388 <col:8> 'int' lvalue ->_nerrors 0x5611b0faebf8
|         `-CXXThisExpr 0x5611b0fb1378 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5611b0fad058 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5611b0fb1480 <col:26, line:448:5>
|   `-BinaryOperator 0x5611b0fb1460 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5611b0fb1410 <col:2> 'int' lvalue ->_nerrors 0x5611b0faebf8
|     | `-CXXThisExpr 0x5611b0fb1400 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5611b0fb1440 <col:13> 'int' 0
|-CXXMethodDecl 0x5611b0fad220 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5611b0fad110 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5611b0fad188 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5611b0fad428 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5611b0fad2e0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5611b0fad358 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5611b0fad6d8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5611b0fad4e8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5611b0fad568 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5611b0fad5e8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5611b0fad790 <col:59> 0 0
|-CXXMethodDecl 0x5611b0fad928 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5611b0fad808 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5611b0fad888 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5611b0fb1af0 <col:70, line:534:5>
|   |-DeclStmt 0x5611b0fb15f0 <line:528:2, col:20>
|   | |-VarDecl 0x5611b0fb14a8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5611b0fb1510 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5611b0fb1548 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5611b0fb15b0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5611b0fb16c0 <line:529:2, col:23>
|   | `-VarDecl 0x5611b0fb1620 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5611b0fb16a8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5611b0fb1688 <col:18> 'const char *' lvalue ParmVar 0x5611b0fad808 'begin' 'const char *'
|   |-DoStmt 0x5611b0fb1a88 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5611b0fb19b8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5611b0fb19a0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5611b0fb1980 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5611b0fb16d8 <col:6> 'const char *' lvalue Var 0x5611b0fb1620 'x' 'const char *'
|   | |     `-CallExpr 0x5611b0fb18d0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5611b0fb18b8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5611b0fb1870 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5611b0fb0120 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5611b0fb1938 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5611b0fb1920 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5611b0fb1790 <col:20, col:27> 'String' (CXXTemporary 0x5611b0fb1790)
|   | |       |     `-CXXTemporaryObjectExpr 0x5611b0fb1758 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5611b0fb1950 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5611b0fb17b0 <col:30> 'const char *' lvalue Var 0x5611b0fb1620 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5611b0fb1968 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5611b0fb17d0 <col:33> 'const char *' lvalue ParmVar 0x5611b0fad888 'end' 'const char *'
|   | |       |-UnaryOperator 0x5611b0fb1810 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5611b0fb17f0 <col:39> 'String' lvalue Var 0x5611b0fb14a8 'name' 'String'
|   | |       |-UnaryOperator 0x5611b0fb1848 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5611b0fb1828 <col:46> 'String' lvalue Var 0x5611b0fb1548 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5611b0fb1860 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5611b0fb1a70 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5611b0fb1a58 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5611b0fb1a38 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5611b0fb1a08 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5611b0b8a4b8
|   |         `-ImplicitCastExpr 0x5611b0fb19f0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5611b0fb19d0 <col:11> 'String' lvalue Var 0x5611b0fb14a8 'name' 'String'
|   `-ReturnStmt 0x5611b0fb1ae0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5611b0fb1ac8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5611b0fb1aa8 <col:9> 'const char *' lvalue Var 0x5611b0fb1620 'x' 'const char *'
|-CXXMethodDecl 0x5611b0fada78 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5611b0fad9e8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5611b0fb20f8 <col:55, line:550:5>
|   `-IfStmt 0x5611b0fb20d0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5611b0fb1d30 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5611b0fb1d18 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5611b0fb1d00 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5611b0fb1ce0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5611b0fb1cb0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5611b0b8a4b8
|     | |       `-DeclRefExpr 0x5611b0fb1b50 <col:6> 'const String' lvalue ParmVar 0x5611b0fad9e8 'x' 'const String &'
|     | `-BinaryOperator 0x5611b0fb1c90 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5611b0fb1c60 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5611b0fb1c10 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5611b0fb1bf8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5611b0fb1bb0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5611b0ba3b50 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5611b0fb1b70 <col:11> 'const String' lvalue ParmVar 0x5611b0fad9e8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5611b0fb1b90 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5611b0fb1c78 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5611b0fb1c48 <col:19> 'char' 123
|     |-ReturnStmt 0x5611b0fb1da0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5611b0fb1d70 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5611b0fb1d50 <col:13> 'const String' lvalue ParmVar 0x5611b0fad9e8 'x' 'const String &'
|     `-IfStmt 0x5611b0fb20a8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5611b0fb1e38 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5611b0fb1e20 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5611b0fb1e00 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5611b0fb1dd0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5611b0b8a4b8
|       |       `-DeclRefExpr 0x5611b0fb1db0 <col:11> 'const String' lvalue ParmVar 0x5611b0fad9e8 'x' 'const String &'
|       |-ReturnStmt 0x5611b0fb1fc0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5611b0fb1fa8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5611b0fb1f78 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5611b0fb1f60 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5611b0fb1f40 <col:13, col:29> 'String' (CXXTemporary 0x5611b0fb1f40)
|       |         `-CallExpr 0x5611b0fb1ef0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5611b0fb1ed8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5611b0fb1e50 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5611b0fad220 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5611b0fb1f20 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5611b0fb1e70 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5611b0fb1e90 <col:28> 'const String' lvalue ParmVar 0x5611b0fad9e8 'x' 'const String &'
|       `-ReturnStmt 0x5611b0fb2098 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5611b0fb2080 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5611b0fb2050 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5611b0fb2038 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5611b0fb2018 <col:13, col:20> 'String' (CXXTemporary 0x5611b0fb2018)
|                 `-CXXTemporaryObjectExpr 0x5611b0fb1fe0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5611b0fadc40 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5611b0fadb30 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5611b0fadba8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5611b0fb03c8 <col:71> 'bool' false
|-CXXRecordDecl 0x5611b0fadcf0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5611b0fadfe8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5611b0fadf80 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5611b0fadf20 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5611b0fadee0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5611b0b86d10 'String'
|       | `-CXXRecord 0x5611b0b86c80 'String'
|       |-BuiltinType 0x5611b0855580 'int'
|       `-DecayedType 0x5611b0dc5870 '__va_list_tag *' sugar
|         |-TypedefType 0x5611b0dc5840 'va_list' sugar
|         | |-Typedef 0x5611b0aa4fd0 'va_list'
|         | `-TypedefType 0x5611b0aa4f80 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5611b0a9dd78 '__gnuc_va_list'
|         |   `-TypedefType 0x5611b0a9dce0 '__builtin_va_list' sugar
|         |     |-Typedef 0x5611b0896d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5611b0896ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5611b08562d0 '__va_list_tag'
|         |         `-CXXRecord 0x5611b0856238 '__va_list_tag'
|         `-PointerType 0x5611b0aaacd0 '__va_list_tag *'
|           `-RecordType 0x5611b08562d0 '__va_list_tag'
|             `-CXXRecord 0x5611b0856238 '__va_list_tag'
|-EnumDecl 0x5611b0fae040 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5611b0fae140 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5611b0fae6a0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0fae120 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5611b0fae100 <col:16> 'int' 1
| |-EnumConstantDecl 0x5611b0fae1d0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5611b0fae6b8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0fae1b0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5611b0fae190 <col:21> 'int' 2
| |-EnumConstantDecl 0x5611b0fae260 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5611b0fae6d0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0fae240 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5611b0fae220 <col:22> 'int' 4
| |-EnumConstantDecl 0x5611b0fae2f0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5611b0fae6e8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0fae2d0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5611b0fae2b0 <col:17> 'int' 8
| |-EnumConstantDecl 0x5611b0fae380 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5611b0fae700 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0fae360 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5611b0fae340 <col:22> 'int' 16
| |-EnumConstantDecl 0x5611b0fae410 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5611b0fae718 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0fae3f0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5611b0fae3d0 <col:19> 'int' 32
| |-EnumConstantDecl 0x5611b0fae4a0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5611b0fae730 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0fae480 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5611b0fae460 <col:17> 'int' 64
| |-EnumConstantDecl 0x5611b0fae530 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5611b0fae748 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0fae510 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5611b0fae4f0 <col:14> 'int' 128
| |-EnumConstantDecl 0x5611b0fae5c0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5611b0fae760 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0fae5a0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5611b0fae580 <col:16> 'int' 256
| `-EnumConstantDecl 0x5611b0fae650 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5611b0fae778 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0fae630 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5611b0fae610 <col:12> 'int' 1024
|-CXXMethodDecl 0x5611b0fae988 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5611b0fae7a0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5611b0fae840 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5611b0faeb10 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5611b0faea48 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5611b0faebb8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5611b0faebf8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5611b0faec58 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5611b0faecd0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5611b0fb0120 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5611b0faed48 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5611b0faedc8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5611b0faee48 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5611b0faeec0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5611b0faef38 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5611b0fb0000 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5611b0fb0248 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5611b0fb0248
| `-ParmVarDecl 0x5611b0fb0358 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5611b0fb2458 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5611b0fb2458
  `-ParmVarDecl 0x5611b0fb2568 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0d65ad0 <../dummy_inc/click/handler.hh:290:5, line:293:5> line:290:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5611b0d65c20 <line:291:2, col:18> col:18 h 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
|-FieldDecl 0x5611b0d65ca0 <line:292:2, col:22> col:22 referenced r 'ReadHandlerCallback':'String (*)(Element *, void *)'
|-CXXConstructorDecl 0x5611b0d669d8 <line:290:5> col:5 implicit constexpr  'void (const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &)' inline default trivial noexcept-unevaluated 0x5611b0d669d8
| `-ParmVarDecl 0x5611b0d66ae8 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &'
|-CXXConstructorDecl 0x5611b0d66b88 <col:5> col:5 implicit constexpr  'void (Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&)' inline default trivial noexcept-unevaluated 0x5611b0d66b88
| `-ParmVarDecl 0x5611b0d66c98 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&'
|-CXXDestructorDecl 0x5611b0d66d08 <col:5> col:5 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x5611b0d66d08
|-CXXMethodDecl 0x5611b0d675d8 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &(const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &)' inline default trivial noexcept-unevaluated 0x5611b0d675d8
| `-ParmVarDecl 0x5611b0d676e8 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &'
|-CXXMethodDecl 0x5611b0d67758 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &(Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&)' inline default trivial noexcept-unevaluated 0x5611b0d67758
| `-ParmVarDecl 0x5611b0d67868 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&'
`-CXXConstructorDecl 0x5611b0fa85f0 <col:5> col:5 implicit used  'void () noexcept' inline default trivial
  `-CompoundStmt 0x5611b0fa86d0 <col:5>

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { i32 (i32, %class.String*, %class.Element*, %class.Handler*, %class.ErrorHandler*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0d65dd0 <../dummy_inc/click/handler.hh:294:5, line:297:5> line:294:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5611b0d65ef8 <line:295:2, col:18> col:18 h 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
|-FieldDecl 0x5611b0d65f80 <line:296:2, col:23> col:23 referenced w 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
|-CXXConstructorDecl 0x5611b0d66e38 <line:294:5> col:5 implicit constexpr  'void (const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &)' inline default trivial noexcept-unevaluated 0x5611b0d66e38
| `-ParmVarDecl 0x5611b0d66f48 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &'
|-CXXConstructorDecl 0x5611b0d66fe8 <col:5> col:5 implicit constexpr  'void (Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&)' inline default trivial noexcept-unevaluated 0x5611b0d66fe8
| `-ParmVarDecl 0x5611b0d670f8 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&'
|-CXXDestructorDecl 0x5611b0d67168 <col:5> col:5 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x5611b0d67168
|-CXXMethodDecl 0x5611b0d67908 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &(const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &)' inline default trivial noexcept-unevaluated 0x5611b0d67908
| `-ParmVarDecl 0x5611b0d67a18 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &'
|-CXXMethodDecl 0x5611b0d67a88 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &(Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&)' inline default trivial noexcept-unevaluated 0x5611b0d67a88
| `-ParmVarDecl 0x5611b0d67b98 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&'
`-CXXConstructorDecl 0x5611b0fa8730 <col:5> col:5 implicit used  'void () noexcept' inline default trivial
  `-CompoundStmt 0x5611b0fa8810 <col:5>

Layout: <CGRecordLayout
  LLVMType:%union.anon.11 = type { i32 (i32, %class.String*, %class.Element*, %class.Handler*, %class.ErrorHandler*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0d61498 prev 0x5611b0d60a38 <../dummy_inc/click/handler.hh:19:1, line:313:1> line:19:7 class Handler definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-CXXRecordDecl 0x5611b0d61590 <col:1, col:7> col:7 implicit referenced class Handler
|-AccessSpecDecl 0x5611b0d61620 <col:17, col:23> col:17 public
|-EnumDecl 0x5611b0d61648 <line:21:5, line:59:5> line:21:10 Flags
| |-EnumConstantDecl 0x5611b0d61750 <line:22:2, col:11> col:2 referenced f_read 'Handler::Flags'
| | `-ImplicitCastExpr 0x5611b0d624a0 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d61730 <col:11> 'int' Int: 1
| |     `-IntegerLiteral 0x5611b0d61710 <col:11> 'int' 1
| |-EnumConstantDecl 0x5611b0d617e0 <line:23:2, col:12> col:2 referenced f_write 'Handler::Flags'
| | `-ImplicitCastExpr 0x5611b0d624b8 <col:12> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d617c0 <col:12> 'int' Int: 2
| |     `-IntegerLiteral 0x5611b0d617a0 <col:12> 'int' 2
| |-EnumConstantDecl 0x5611b0d61870 <line:24:2, col:17> col:2 referenced f_read_param 'Handler::Flags'
| | `-ImplicitCastExpr 0x5611b0d624d0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d61850 <col:17> 'int' Int: 4
| |     `-IntegerLiteral 0x5611b0d61830 <col:17> 'int' 4
| |-EnumConstantDecl 0x5611b0d61900 <line:25:2, col:16> col:2 referenced f_exclusive 'Handler::Flags'
| | `-ImplicitCastExpr 0x5611b0d624e8 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d618e0 <col:16> 'int' Int: 0
| |     `-IntegerLiteral 0x5611b0d618c0 <col:16> 'int' 0
| |-EnumConstantDecl 0x5611b0d61990 <line:28:2, col:19> col:2 referenced f_nonexclusive 'Handler::Flags'
| | `-ImplicitCastExpr 0x5611b0d62500 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d61970 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5611b0d61950 <col:19> 'int' 32
| |-EnumConstantDecl 0x5611b0d61a20 <line:31:2, col:10> col:2 referenced f_raw 'Handler::Flags'
| | `-ImplicitCastExpr 0x5611b0d62518 <col:10> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d61a00 <col:10> 'int' Int: 64
| |     `-IntegerLiteral 0x5611b0d619e0 <col:10> 'int' 64
| |-EnumConstantDecl 0x5611b0d61ab0 <line:32:2, col:19> col:2 referenced f_read_private 'Handler::Flags'
| | `-ImplicitCastExpr 0x5611b0d62530 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d61a90 <col:19> 'int' Int: 128
| |     `-IntegerLiteral 0x5611b0d61a70 <col:19> 'int' 128
| |-EnumConstantDecl 0x5611b0d61b40 <line:34:2, col:20> col:2 referenced f_write_private 'Handler::Flags'
| | `-ImplicitCastExpr 0x5611b0d62548 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d61b20 <col:20> 'int' Int: 256
| |     `-IntegerLiteral 0x5611b0d61b00 <col:20> 'int' 256
| |-EnumConstantDecl 0x5611b0d61bd0 <line:36:2, col:17> col:2 referenced f_deprecated 'Handler::Flags'
| | `-ImplicitCastExpr 0x5611b0d62560 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d61bb0 <col:17> 'int' Int: 512
| |     `-IntegerLiteral 0x5611b0d61b90 <col:17> 'int' 512
| |-EnumConstantDecl 0x5611b0d61c60 <line:38:2, col:15> col:2 referenced f_uncommon 'Handler::Flags'
| | `-ImplicitCastExpr 0x5611b0d62578 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d61c40 <col:15> 'int' Int: 1024
| |     `-IntegerLiteral 0x5611b0d61c20 <col:15> 'int' 1024
| |-EnumConstantDecl 0x5611b0d61cf0 <line:40:2, col:11> col:2 referenced f_calm 'Handler::Flags'
| | `-ImplicitCastExpr 0x5611b0d62590 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d61cd0 <col:11> 'int' Int: 2048
| |     `-IntegerLiteral 0x5611b0d61cb0 <col:11> 'int' 2048
| |-EnumConstantDecl 0x5611b0d61d80 <line:41:2, col:16> col:2 referenced f_expensive 'Handler::Flags'
| | `-ImplicitCastExpr 0x5611b0d625a8 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d61d60 <col:16> 'int' Int: 4096
| |     `-IntegerLiteral 0x5611b0d61d40 <col:16> 'int' 4096
| |-EnumConstantDecl 0x5611b0d61e10 <line:42:2, col:13> col:2 referenced f_button 'Handler::Flags'
| | `-ImplicitCastExpr 0x5611b0d625c0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d61df0 <col:13> 'int' Int: 8192
| |     `-IntegerLiteral 0x5611b0d61dd0 <col:13> 'int' 8192
| |-EnumConstantDecl 0x5611b0d61ea0 <line:43:2, col:15> col:2 referenced f_checkbox 'Handler::Flags'
| | `-ImplicitCastExpr 0x5611b0d625d8 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d61e80 <col:15> 'int' Int: 16384
| |     `-IntegerLiteral 0x5611b0d61e60 <col:15> 'int' 16384
| |-EnumConstantDecl 0x5611b0d61f70 <line:45:2, col:20> col:2 referenced f_driver0 'Handler::Flags'
| | `-ConstantExpr 0x5611b0d61f50 <col:14, col:20> 'unsigned int' Int: 67108864
| |   `-BinaryOperator 0x5611b0d61f30 <col:14, col:20> 'unsigned int' '<<'
| |     |-IntegerLiteral 0x5611b0d61ef0 <col:14> 'unsigned int' 1
| |     `-IntegerLiteral 0x5611b0d61f10 <col:20> 'int' 26
| |-EnumConstantDecl 0x5611b0d62040 <line:46:9, col:27> col:9 referenced f_driver1 'Handler::Flags'
| | `-ConstantExpr 0x5611b0d62020 <col:21, col:27> 'unsigned int' Int: 134217728
| |   `-BinaryOperator 0x5611b0d62000 <col:21, col:27> 'unsigned int' '<<'
| |     |-IntegerLiteral 0x5611b0d61fc0 <col:21> 'unsigned int' 1
| |     `-IntegerLiteral 0x5611b0d61fe0 <col:27> 'int' 27
| |-EnumConstantDecl 0x5611b0d620d0 <line:48:2, col:17> col:2 referenced f_user_shift 'Handler::Flags'
| | `-ImplicitCastExpr 0x5611b0d625f0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d620b0 <col:17> 'int' Int: 28
| |     `-IntegerLiteral 0x5611b0d62090 <col:17> 'int' 28
| |-EnumConstantDecl 0x5611b0d621a0 <line:49:2, col:18> col:2 referenced f_user0 'Handler::Flags'
| | `-ConstantExpr 0x5611b0d62180 <col:12, col:18> 'unsigned int' Int: 268435456
| |   `-BinaryOperator 0x5611b0d62160 <col:12, col:18> 'unsigned int' '<<'
| |     |-IntegerLiteral 0x5611b0d62120 <col:12> 'unsigned int' 1
| |     `-DeclRefExpr 0x5611b0d62140 <col:18> 'int' EnumConstant 0x5611b0d620d0 'f_user_shift' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d62230 <line:54:2, col:25> col:2 referenced f_read_comprehensive 'Handler::Flags'
| | `-ImplicitCastExpr 0x5611b0d62608 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d62210 <col:25> 'int' Int: 8
| |     `-IntegerLiteral 0x5611b0d621f0 <col:25> 'int' 8
| |-EnumConstantDecl 0x5611b0d622c0 <line:55:2, col:26> col:2 referenced f_write_comprehensive 'Handler::Flags'
| | `-ImplicitCastExpr 0x5611b0d62620 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d622a0 <col:26> 'int' Int: 16
| |     `-IntegerLiteral 0x5611b0d62280 <col:26> 'int' 16
| `-EnumConstantDecl 0x5611b0d62450 <line:56:2, col:71> col:2 referenced f_special 'Handler::Flags'
|   `-ImplicitCastExpr 0x5611b0d62638 <col:14, col:71> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0d62430 <col:14, col:71> 'int' Int: 31
|       `-BinaryOperator 0x5611b0d62410 <col:14, col:71> 'int' '|'
|         |-BinaryOperator 0x5611b0d623d0 <col:14, col:48> 'int' '|'
|         | |-BinaryOperator 0x5611b0d62390 <col:14, col:33> 'int' '|'
|         | | |-BinaryOperator 0x5611b0d62350 <col:14, col:23> 'int' '|'
|         | | | |-DeclRefExpr 0x5611b0d62310 <col:14> 'int' EnumConstant 0x5611b0d61750 'f_read' 'Handler::Flags'
|         | | | `-DeclRefExpr 0x5611b0d62330 <col:23> 'int' EnumConstant 0x5611b0d617e0 'f_write' 'Handler::Flags'
|         | | `-DeclRefExpr 0x5611b0d62370 <col:33> 'int' EnumConstant 0x5611b0d61870 'f_read_param' 'Handler::Flags'
|         | `-DeclRefExpr 0x5611b0d623b0 <col:48> 'int' EnumConstant 0x5611b0d62230 'f_read_comprehensive' 'Handler::Flags'
|         `-DeclRefExpr 0x5611b0d623f0 <col:71> 'int' EnumConstant 0x5611b0d622c0 'f_write_comprehensive' 'Handler::Flags'
|-CXXMethodDecl 0x5611b0d62670 <line:62:5, line:64:5> line:62:26 name 'const String &() const' inline
| `-CompoundStmt 0x5611b0d67fb8 <col:39, line:64:5>
|   `-ReturnStmt 0x5611b0d67fa8 <line:63:2, col:9>
|     `-MemberExpr 0x5611b0d67f78 <col:9> 'const String' lvalue ->_name 0x5611b0d65a80
|       `-CXXThisExpr 0x5611b0d67f68 <col:9> 'const Handler *' implicit this
|-CXXMethodDecl 0x5611b0d62730 <line:69:5, line:71:5> line:69:21 flags 'uint32_t () const' inline
| `-CompoundStmt 0x5611b0d68038 <col:35, line:71:5>
|   `-ReturnStmt 0x5611b0d68028 <line:70:2, col:9>
|     `-ImplicitCastExpr 0x5611b0d68010 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5611b0d67fe0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5611b0d66190
|         `-CXXThisExpr 0x5611b0d67fd0 <col:9> 'const Handler *' implicit this
|-CXXMethodDecl 0x5611b0d62880 <line:75:5, line:77:5> line:75:18 user_data 'void *(int) const' inline
| |-ParmVarDecl 0x5611b0d627e8 <col:28, col:32> col:32 used op 'int'
| `-CompoundStmt 0x5611b0d681b8 <col:42, line:77:5>
|   `-ReturnStmt 0x5611b0d681a8 <line:76:2, col:44>
|     `-ImplicitCastExpr 0x5611b0d68190 <col:9, col:44> 'void *' <LValueToRValue>
|       `-ConditionalOperator 0x5611b0d68160 <col:9, col:44> 'void *const' lvalue
|         |-BinaryOperator 0x5611b0d680c0 <col:9, col:15> 'bool' '=='
|         | |-ImplicitCastExpr 0x5611b0d68090 <col:9> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5611b0d68050 <col:9> 'int' lvalue ParmVar 0x5611b0d627e8 'op' 'int'
|         | `-ImplicitCastExpr 0x5611b0d680a8 <col:15> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x5611b0d68070 <col:15> 'Handler::Flags' EnumConstant 0x5611b0d617e0 'f_write' 'Handler::Flags'
|         |-MemberExpr 0x5611b0d680f0 <col:25> 'void *const' lvalue ->_write_user_data 0x5611b0d66130
|         | `-CXXThisExpr 0x5611b0d680e0 <col:25> 'const Handler *' implicit this
|         `-MemberExpr 0x5611b0d68130 <col:44> 'void *const' lvalue ->_read_user_data 0x5611b0d660c8
|           `-CXXThisExpr 0x5611b0d68120 <col:44> 'const Handler *' implicit this
|-CXXMethodDecl 0x5611b0d62950 <line:80:5, line:82:5> line:80:18 read_user_data 'void *() const' inline
| `-CompoundStmt 0x5611b0d68238 <col:41, line:82:5>
|   `-ReturnStmt 0x5611b0d68228 <line:81:2, col:9>
|     `-ImplicitCastExpr 0x5611b0d68210 <col:9> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5611b0d681e0 <col:9> 'void *const' lvalue ->_read_user_data 0x5611b0d660c8
|         `-CXXThisExpr 0x5611b0d681d0 <col:9> 'const Handler *' implicit this
|-CXXMethodDecl 0x5611b0d62a18 <line:85:5, line:87:5> line:85:18 write_user_data 'void *() const' inline
| `-CompoundStmt 0x5611b0d682b8 <col:42, line:87:5>
|   `-ReturnStmt 0x5611b0d682a8 <line:86:2, col:9>
|     `-ImplicitCastExpr 0x5611b0d68290 <col:9> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5611b0d68260 <col:9> 'void *const' lvalue ->_write_user_data 0x5611b0d66130
|         `-CXXThisExpr 0x5611b0d68250 <col:9> 'const Handler *' implicit this
|-CXXMethodDecl 0x5611b0d62ae0 <line:90:5, col:63> col:18 user_data1 'void *() const' inline
| `-DeprecatedAttr 0x5611b0d62b80 <col:52> "" ""
|-CXXMethodDecl 0x5611b0d62c18 <line:91:5, col:63> col:18 user_data2 'void *() const' inline
| `-DeprecatedAttr 0x5611b0d62cb8 <col:52> "" ""
|-CXXMethodDecl 0x5611b0d62d48 <line:96:5, line:98:5> line:96:17 readable 'bool () const' inline
| `-CompoundStmt 0x5611b0d683a8 <col:34, line:98:5>
|   `-ReturnStmt 0x5611b0d68398 <line:97:2, col:18>
|     `-ImplicitCastExpr 0x5611b0d68380 <col:9, col:18> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5611b0d68360 <col:9, col:18> 'unsigned int' '&'
|         |-ImplicitCastExpr 0x5611b0d68330 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-MemberExpr 0x5611b0d682e0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5611b0d66190
|         |   `-CXXThisExpr 0x5611b0d682d0 <col:9> 'const Handler *' implicit this
|         `-ImplicitCastExpr 0x5611b0d68348 <col:18> 'unsigned int' <IntegralCast>
|           `-DeclRefExpr 0x5611b0d68310 <col:18> 'Handler::Flags' EnumConstant 0x5611b0d61750 'f_read' 'Handler::Flags'
|-CXXMethodDecl 0x5611b0d62e08 <line:102:5, line:104:5> line:102:17 read_param 'bool () const' inline
| `-CompoundStmt 0x5611b0d68498 <col:36, line:104:5>
|   `-ReturnStmt 0x5611b0d68488 <line:103:2, col:18>
|     `-ImplicitCastExpr 0x5611b0d68470 <col:9, col:18> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5611b0d68450 <col:9, col:18> 'unsigned int' '&'
|         |-ImplicitCastExpr 0x5611b0d68420 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-MemberExpr 0x5611b0d683d0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5611b0d66190
|         |   `-CXXThisExpr 0x5611b0d683c0 <col:9> 'const Handler *' implicit this
|         `-ImplicitCastExpr 0x5611b0d68438 <col:18> 'unsigned int' <IntegralCast>
|           `-DeclRefExpr 0x5611b0d68400 <col:18> 'Handler::Flags' EnumConstant 0x5611b0d61870 'f_read_param' 'Handler::Flags'
|-CXXMethodDecl 0x5611b0d62ec8 <line:111:5, line:113:5> line:111:17 used read_visible 'bool () const' inline
| `-CompoundStmt 0x5611b0e8bbf8 <col:38, line:113:5>
|   `-ReturnStmt 0x5611b0e8bbe8 <line:112:2, col:49>
|     `-BinaryOperator 0x5611b0e8bbc8 <col:9, col:49> 'bool' '=='
|       |-ParenExpr 0x5611b0e8bb70 <col:9, col:44> 'unsigned int'
|       | `-BinaryOperator 0x5611b0e8bb50 <col:10, col:43> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5611b0e8bb20 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5611b0d684c0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5611b0d66190
|       |   |   `-CXXThisExpr 0x5611b0d684b0 <col:10> 'const Handler *' implicit this
|       |   `-ImplicitCastExpr 0x5611b0e8bb38 <col:19, col:43> 'unsigned int' <IntegralCast>
|       |     `-ParenExpr 0x5611b0e8bb00 <col:19, col:43> 'int'
|       |       `-BinaryOperator 0x5611b0e8bae0 <col:20, col:29> 'int' '|'
|       |         |-ImplicitCastExpr 0x5611b0d68530 <col:20> 'int' <IntegralCast>
|       |         | `-DeclRefExpr 0x5611b0d684f0 <col:20> 'Handler::Flags' EnumConstant 0x5611b0d61750 'f_read' 'Handler::Flags'
|       |         `-ImplicitCastExpr 0x5611b0d68548 <col:29> 'int' <IntegralCast>
|       |           `-DeclRefExpr 0x5611b0d68510 <col:29> 'Handler::Flags' EnumConstant 0x5611b0d61ab0 'f_read_private' 'Handler::Flags'
|       `-ImplicitCastExpr 0x5611b0e8bbb0 <col:49> 'unsigned int' <IntegralCast>
|         `-DeclRefExpr 0x5611b0e8bb90 <col:49> 'Handler::Flags' EnumConstant 0x5611b0d61750 'f_read' 'Handler::Flags'
|-CXXMethodDecl 0x5611b0d62f88 <line:116:5, line:118:5> line:116:17 writable 'bool () const' inline
| `-CompoundStmt 0x5611b0e8bce8 <col:34, line:118:5>
|   `-ReturnStmt 0x5611b0e8bcd8 <line:117:2, col:18>
|     `-ImplicitCastExpr 0x5611b0e8bcc0 <col:9, col:18> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5611b0e8bca0 <col:9, col:18> 'unsigned int' '&'
|         |-ImplicitCastExpr 0x5611b0e8bc70 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-MemberExpr 0x5611b0e8bc20 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5611b0d66190
|         |   `-CXXThisExpr 0x5611b0e8bc10 <col:9> 'const Handler *' implicit this
|         `-ImplicitCastExpr 0x5611b0e8bc88 <col:18> 'unsigned int' <IntegralCast>
|           `-DeclRefExpr 0x5611b0e8bc50 <col:18> 'Handler::Flags' EnumConstant 0x5611b0d617e0 'f_write' 'Handler::Flags'
|-CXXMethodDecl 0x5611b0d63048 <line:125:5, line:127:5> line:125:17 used write_visible 'bool () const' inline
| `-CompoundStmt 0x5611b0e8bec8 <col:39, line:127:5>
|   `-ReturnStmt 0x5611b0e8beb8 <line:126:2, col:51>
|     `-BinaryOperator 0x5611b0e8be98 <col:9, col:51> 'bool' '=='
|       |-ParenExpr 0x5611b0e8be40 <col:9, col:46> 'unsigned int'
|       | `-BinaryOperator 0x5611b0e8be20 <col:10, col:45> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5611b0e8bdf0 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5611b0e8bd10 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5611b0d66190
|       |   |   `-CXXThisExpr 0x5611b0e8bd00 <col:10> 'const Handler *' implicit this
|       |   `-ImplicitCastExpr 0x5611b0e8be08 <col:19, col:45> 'unsigned int' <IntegralCast>
|       |     `-ParenExpr 0x5611b0e8bdd0 <col:19, col:45> 'int'
|       |       `-BinaryOperator 0x5611b0e8bdb0 <col:20, col:30> 'int' '|'
|       |         |-ImplicitCastExpr 0x5611b0e8bd80 <col:20> 'int' <IntegralCast>
|       |         | `-DeclRefExpr 0x5611b0e8bd40 <col:20> 'Handler::Flags' EnumConstant 0x5611b0d617e0 'f_write' 'Handler::Flags'
|       |         `-ImplicitCastExpr 0x5611b0e8bd98 <col:30> 'int' <IntegralCast>
|       |           `-DeclRefExpr 0x5611b0e8bd60 <col:30> 'Handler::Flags' EnumConstant 0x5611b0d61b40 'f_write_private' 'Handler::Flags'
|       `-ImplicitCastExpr 0x5611b0e8be80 <col:51> 'unsigned int' <IntegralCast>
|         `-DeclRefExpr 0x5611b0e8be60 <col:51> 'Handler::Flags' EnumConstant 0x5611b0d617e0 'f_write' 'Handler::Flags'
|-CXXMethodDecl 0x5611b0d63108 <line:130:5, line:132:5> line:130:17 visible 'bool () const' inline
| `-CompoundStmt 0x5611b0e8bfd0 <col:33, line:132:5>
|   `-ReturnStmt 0x5611b0e8bfc0 <line:131:2, col:41>
|     `-BinaryOperator 0x5611b0e8bfa0 <col:9, col:41> 'bool' '||'
|       |-CXXMemberCallExpr 0x5611b0e8bf20 <col:9, col:22> 'bool'
|       | `-MemberExpr 0x5611b0e8bef0 <col:9> '<bound member function type>' ->read_visible 0x5611b0d62ec8
|       |   `-CXXThisExpr 0x5611b0e8bee0 <col:9> 'const Handler *' implicit this
|       `-CXXMemberCallExpr 0x5611b0e8bf80 <col:27, col:41> 'bool'
|         `-MemberExpr 0x5611b0e8bf50 <col:27> '<bound member function type>' ->write_visible 0x5611b0d63048
|           `-CXXThisExpr 0x5611b0e8bf40 <col:27> 'const Handler *' implicit this
|-CXXMethodDecl 0x5611b0d631c8 <line:136:5, line:138:5> line:136:17 allow_concurrent_handlers 'bool () const' inline
| `-CompoundStmt 0x5611b0e8c0e0 <col:51, line:138:5>
|   `-ReturnStmt 0x5611b0e8c0d0 <line:137:9, col:40>
|     `-ImplicitCastExpr 0x5611b0e8c0b8 <col:16, col:40> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x5611b0e8c098 <col:16, col:40> 'unsigned int'
|         `-BinaryOperator 0x5611b0e8c078 <col:17, col:26> 'unsigned int' '&'
|           |-ImplicitCastExpr 0x5611b0e8c048 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|           | `-MemberExpr 0x5611b0e8bff8 <col:17> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5611b0d66190
|           |   `-CXXThisExpr 0x5611b0e8bfe8 <col:17> 'const Handler *' implicit this
|           `-ImplicitCastExpr 0x5611b0e8c060 <col:26> 'unsigned int' <IntegralCast>
|             `-DeclRefExpr 0x5611b0e8c028 <col:26> 'Handler::Flags' EnumConstant 0x5611b0d61990 'f_nonexclusive' 'Handler::Flags'
|-CXXMethodDecl 0x5611b0d63288 <line:142:5, line:144:5> line:142:17 allow_concurrent_threads 'bool () const' inline
| `-CompoundStmt 0x5611b0e8c1f0 <col:50, line:144:5>
|   `-ReturnStmt 0x5611b0e8c1e0 <line:143:9, col:40>
|     `-ImplicitCastExpr 0x5611b0e8c1c8 <col:16, col:40> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x5611b0e8c1a8 <col:16, col:40> 'unsigned int'
|         `-BinaryOperator 0x5611b0e8c188 <col:17, col:26> 'unsigned int' '&'
|           |-ImplicitCastExpr 0x5611b0e8c158 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|           | `-MemberExpr 0x5611b0e8c108 <col:17> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5611b0d66190
|           |   `-CXXThisExpr 0x5611b0e8c0f8 <col:17> 'const Handler *' implicit this
|           `-ImplicitCastExpr 0x5611b0e8c170 <col:26> 'unsigned int' <IntegralCast>
|             `-DeclRefExpr 0x5611b0e8c138 <col:26> 'Handler::Flags' EnumConstant 0x5611b0d61990 'f_nonexclusive' 'Handler::Flags'
|-CXXMethodDecl 0x5611b0d63348 <line:164:5, line:166:5> line:164:17 raw 'bool () const' inline
| `-CompoundStmt 0x5611b0e8c2e0 <col:29, line:166:5>
|   `-ReturnStmt 0x5611b0e8c2d0 <line:165:2, col:18>
|     `-ImplicitCastExpr 0x5611b0e8c2b8 <col:9, col:18> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5611b0e8c298 <col:9, col:18> 'unsigned int' '&'
|         |-ImplicitCastExpr 0x5611b0e8c268 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-MemberExpr 0x5611b0e8c218 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5611b0d66190
|         |   `-CXXThisExpr 0x5611b0e8c208 <col:9> 'const Handler *' implicit this
|         `-ImplicitCastExpr 0x5611b0e8c280 <col:18> 'unsigned int' <IntegralCast>
|           `-DeclRefExpr 0x5611b0e8c248 <col:18> 'Handler::Flags' EnumConstant 0x5611b0d61a20 'f_raw' 'Handler::Flags'
|-CXXMethodDecl 0x5611b0d635c8 <line:177:5, col:75> col:12 used call_read 'String (Element *, const String &, ErrorHandler *) const'
| |-ParmVarDecl 0x5611b0d633f8 <col:22, col:31> col:31 e 'Element *'
| |-ParmVarDecl 0x5611b0d63470 <col:34, col:48> col:48 param 'const String &'
| `-ParmVarDecl 0x5611b0d634e8 <col:55, col:69> col:69 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5611b0d637d8 <line:186:5, line:188:5> line:186:19 call_read 'String (Element *, ErrorHandler *) const' inline
| |-ParmVarDecl 0x5611b0d63690 <col:29, col:38> col:38 used e 'Element *'
| |-ParmVarDecl 0x5611b0d63708 <col:41, col:62> col:55 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5611b0d67ea0 <col:62> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5611b0d67e80 <col:62> 'int' 0
| `-CompoundStmt 0x5611b0e8c580 <col:71, line:188:5>
|   `-ReturnStmt 0x5611b0e8c570 <line:187:2, col:36>
|     `-ExprWithCleanups 0x5611b0e8c558 <col:9, col:36> 'String'
|       `-CXXConstructExpr 0x5611b0e8c528 <col:9, col:36> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5611b0e8c510 <col:9, col:36> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5611b0e8c4f0 <col:9, col:36> 'String' (CXXTemporary 0x5611b0e8c4f0)
|             `-CXXMemberCallExpr 0x5611b0e8c450 <col:9, col:36> 'String'
|               |-MemberExpr 0x5611b0e8c420 <col:9> '<bound member function type>' ->call_read 0x5611b0d635c8
|               | `-CXXThisExpr 0x5611b0e8c410 <col:9> 'const Handler *' implicit this
|               |-ImplicitCastExpr 0x5611b0e8c488 <col:19> 'Element *' <LValueToRValue>
|               | `-DeclRefExpr 0x5611b0e8c368 <col:19> 'Element *' lvalue ParmVar 0x5611b0d63690 'e' 'Element *'
|               |-MaterializeTemporaryExpr 0x5611b0e8c4b8 <col:22, col:29> 'const String' lvalue
|               | `-ImplicitCastExpr 0x5611b0e8c4a0 <col:22, col:29> 'const String' <NoOp>
|               |   `-CXXBindTemporaryExpr 0x5611b0e8c3d0 <col:22, col:29> 'String' (CXXTemporary 0x5611b0e8c3d0)
|               |     `-CXXTemporaryObjectExpr 0x5611b0e8c398 <col:22, col:29> 'String' 'void ()'
|               `-ImplicitCastExpr 0x5611b0e8c4d0 <col:32> 'ErrorHandler *' <LValueToRValue>
|                 `-DeclRefExpr 0x5611b0e8c3f0 <col:32> 'ErrorHandler *' lvalue ParmVar 0x5611b0d63708 'errh' 'ErrorHandler *'
|-CXXMethodDecl 0x5611b0d63a70 <line:198:5, col:73> col:9 call_write 'int (const String &, Element *, ErrorHandler *) const'
| |-ParmVarDecl 0x5611b0d63898 <col:20, col:34> col:34 value 'const String &'
| |-ParmVarDecl 0x5611b0d63910 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5611b0d63988 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5611b0d63bf8 <line:207:5, col:37> col:12 unparse_name 'String (Element *) const'
| `-ParmVarDecl 0x5611b0d63b38 <col:25, col:34> col:34 e 'Element *'
|-CXXMethodDecl 0x5611b0d63e28 <line:216:5, col:63> col:19 unparse_name 'String (Element *, const String &)' static
| |-ParmVarDecl 0x5611b0d63cb0 <col:32, col:41> col:41 e 'Element *'
| `-ParmVarDecl 0x5611b0d63d28 <col:44, col:58> col:58 hname 'const String &'
|-CXXMethodDecl 0x5611b0d63f28 <line:223:5, line:225:5> line:223:34 blank_handler 'const Handler *()' static inline
| `-CompoundStmt 0x5611b0e8c5e0 <col:50, line:225:5>
|   `-ReturnStmt 0x5611b0e8c5d0 <line:224:2, col:9>
|     `-ImplicitCastExpr 0x5611b0e8c5b8 <col:9> 'const Handler *' <LValueToRValue>
|       `-DeclRefExpr 0x5611b0e8c598 <col:9> 'const Handler *' lvalue Var 0x5611b0d662c0 'the_blank_handler' 'const Handler *'
|-EnumDecl 0x5611b0d63fc8 <line:229:5, line:251:5> line:229:5
| |-EnumConstantDecl 0x5611b0d640d0 <line:230:2, col:11> col:2 h_read 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5611b0d64c60 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d640b0 <col:11> 'Handler::Flags' Int: 1
| |     `-DeclRefExpr 0x5611b0d64090 <col:11> 'Handler::Flags' EnumConstant 0x5611b0d61750 'f_read' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d64160 <line:231:2, col:12> col:2 h_write 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5611b0d64c78 <col:12> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d64140 <col:12> 'Handler::Flags' Int: 2
| |     `-DeclRefExpr 0x5611b0d64120 <col:12> 'Handler::Flags' EnumConstant 0x5611b0d617e0 'f_write' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d641f0 <line:232:2, col:17> col:2 h_read_param 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5611b0d64c90 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d641d0 <col:17> 'Handler::Flags' Int: 4
| |     `-DeclRefExpr 0x5611b0d641b0 <col:17> 'Handler::Flags' EnumConstant 0x5611b0d61870 'f_read_param' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d64280 <line:233:2, col:16> col:2 h_exclusive 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5611b0d64ca8 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d64260 <col:16> 'Handler::Flags' Int: 0
| |     `-DeclRefExpr 0x5611b0d64240 <col:16> 'Handler::Flags' EnumConstant 0x5611b0d61900 'f_exclusive' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d64310 <line:234:2, col:19> col:2 h_nonexclusive 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5611b0d64cc0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d642f0 <col:19> 'Handler::Flags' Int: 32
| |     `-DeclRefExpr 0x5611b0d642d0 <col:19> 'Handler::Flags' EnumConstant 0x5611b0d61990 'f_nonexclusive' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d643a0 <line:235:2, col:10> col:2 h_raw 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5611b0d64cd8 <col:10> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d64380 <col:10> 'Handler::Flags' Int: 64
| |     `-DeclRefExpr 0x5611b0d64360 <col:10> 'Handler::Flags' EnumConstant 0x5611b0d61a20 'f_raw' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d64430 <line:236:2, col:19> col:2 h_read_private 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5611b0d64cf0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d64410 <col:19> 'Handler::Flags' Int: 128
| |     `-DeclRefExpr 0x5611b0d643f0 <col:19> 'Handler::Flags' EnumConstant 0x5611b0d61ab0 'f_read_private' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d644c0 <line:237:2, col:20> col:2 h_write_private 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5611b0d64d08 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d644a0 <col:20> 'Handler::Flags' Int: 256
| |     `-DeclRefExpr 0x5611b0d64480 <col:20> 'Handler::Flags' EnumConstant 0x5611b0d61b40 'f_write_private' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d64550 <line:238:2, col:17> col:2 h_deprecated 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5611b0d64d20 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d64530 <col:17> 'Handler::Flags' Int: 512
| |     `-DeclRefExpr 0x5611b0d64510 <col:17> 'Handler::Flags' EnumConstant 0x5611b0d61bd0 'f_deprecated' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d645e0 <line:239:2, col:15> col:2 h_uncommon 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5611b0d64d38 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d645c0 <col:15> 'Handler::Flags' Int: 1024
| |     `-DeclRefExpr 0x5611b0d645a0 <col:15> 'Handler::Flags' EnumConstant 0x5611b0d61c60 'f_uncommon' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d64670 <line:240:2, col:11> col:2 h_calm 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5611b0d64d50 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d64650 <col:11> 'Handler::Flags' Int: 2048
| |     `-DeclRefExpr 0x5611b0d64630 <col:11> 'Handler::Flags' EnumConstant 0x5611b0d61cf0 'f_calm' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d64700 <line:241:2, col:16> col:2 h_expensive 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5611b0d64d68 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d646e0 <col:16> 'Handler::Flags' Int: 4096
| |     `-DeclRefExpr 0x5611b0d646c0 <col:16> 'Handler::Flags' EnumConstant 0x5611b0d61d80 'f_expensive' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d64790 <line:242:2, col:13> col:2 h_button 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5611b0d64d80 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d64770 <col:13> 'Handler::Flags' Int: 8192
| |     `-DeclRefExpr 0x5611b0d64750 <col:13> 'Handler::Flags' EnumConstant 0x5611b0d61e10 'f_button' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d64820 <line:243:2, col:15> col:2 h_checkbox 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5611b0d64d98 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d64800 <col:15> 'Handler::Flags' Int: 16384
| |     `-DeclRefExpr 0x5611b0d647e0 <col:15> 'Handler::Flags' EnumConstant 0x5611b0d61ea0 'f_checkbox' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d648b0 <line:244:2, col:20> col:2 h_driver_flag_0 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5611b0d64db0 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d64890 <col:20> 'Handler::Flags' Int: 67108864
| |     `-DeclRefExpr 0x5611b0d64870 <col:20> 'Handler::Flags' EnumConstant 0x5611b0d61f70 'f_driver0' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d64940 <line:245:9, col:27> col:9 h_driver_flag_1 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5611b0d64dc8 <col:27> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d64920 <col:27> 'Handler::Flags' Int: 134217728
| |     `-DeclRefExpr 0x5611b0d64900 <col:27> 'Handler::Flags' EnumConstant 0x5611b0d62040 'f_driver1' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d649d0 <line:246:2, col:22> col:2 h_user_flag_shift 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5611b0d64de0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d649b0 <col:22> 'Handler::Flags' Int: 28
| |     `-DeclRefExpr 0x5611b0d64990 <col:22> 'Handler::Flags' EnumConstant 0x5611b0d620d0 'f_user_shift' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d64a60 <line:247:2, col:18> col:2 h_user_flag_0 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5611b0d64df8 <col:18> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d64a40 <col:18> 'Handler::Flags' Int: 268435456
| |     `-DeclRefExpr 0x5611b0d64a20 <col:18> 'Handler::Flags' EnumConstant 0x5611b0d621a0 'f_user0' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d64af0 <line:248:2, col:25> col:2 h_read_comprehensive 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5611b0d64e10 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d64ad0 <col:25> 'Handler::Flags' Int: 8
| |     `-DeclRefExpr 0x5611b0d64ab0 <col:25> 'Handler::Flags' EnumConstant 0x5611b0d62230 'f_read_comprehensive' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d64b80 <line:249:2, col:26> col:2 h_write_comprehensive 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5611b0d64e28 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d64b60 <col:26> 'Handler::Flags' Int: 16
| |     `-DeclRefExpr 0x5611b0d64b40 <col:26> 'Handler::Flags' EnumConstant 0x5611b0d622c0 'f_write_comprehensive' 'Handler::Flags'
| `-EnumConstantDecl 0x5611b0d64c10 <line:250:2, col:20> col:2 h_special_flags 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
|   `-ImplicitCastExpr 0x5611b0d64e40 <col:20> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0d64bf0 <col:20> 'Handler::Flags' Int: 31
|       `-DeclRefExpr 0x5611b0d64bd0 <col:20> 'Handler::Flags' EnumConstant 0x5611b0d62450 'f_special' 'Handler::Flags'
|-EnumDecl 0x5611b0d64e58 <line:252:5, line:267:5> line:252:10 DeprecatedFlags
| |-EnumConstantDecl 0x5611b0d64f60 <line:253:2, col:12> col:2 OP_READ 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5611b0d654c0 <col:12> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d64f40 <col:12> 'Handler::Flags' Int: 1
| |     `-DeclRefExpr 0x5611b0d64f20 <col:12> 'Handler::Flags' EnumConstant 0x5611b0d61750 'f_read' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d64ff0 <line:254:2, col:13> col:2 OP_WRITE 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5611b0d654d8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d64fd0 <col:13> 'Handler::Flags' Int: 2
| |     `-DeclRefExpr 0x5611b0d64fb0 <col:13> 'Handler::Flags' EnumConstant 0x5611b0d617e0 'f_write' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d65080 <line:255:2, col:15> col:2 READ_PARAM 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5611b0d654f0 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d65060 <col:15> 'Handler::Flags' Int: 4
| |     `-DeclRefExpr 0x5611b0d65040 <col:15> 'Handler::Flags' EnumConstant 0x5611b0d61870 'f_read_param' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d65110 <line:256:2, col:8> col:2 RAW 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5611b0d65508 <col:8> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d650f0 <col:8> 'Handler::Flags' Int: 64
| |     `-DeclRefExpr 0x5611b0d650d0 <col:8> 'Handler::Flags' EnumConstant 0x5611b0d61a20 'f_raw' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d651a0 <line:261:2, col:9> col:2 CALM 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5611b0d65520 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d65180 <col:9> 'Handler::Flags' Int: 2048
| |     `-DeclRefExpr 0x5611b0d65160 <col:9> 'Handler::Flags' EnumConstant 0x5611b0d61cf0 'f_calm' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d65230 <line:262:2, col:14> col:2 EXPENSIVE 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5611b0d65538 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d65210 <col:14> 'Handler::Flags' Int: 4096
| |     `-DeclRefExpr 0x5611b0d651f0 <col:14> 'Handler::Flags' EnumConstant 0x5611b0d61d80 'f_expensive' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d652c0 <line:263:2, col:11> col:2 BUTTON 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5611b0d65550 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d652a0 <col:11> 'Handler::Flags' Int: 8192
| |     `-DeclRefExpr 0x5611b0d65280 <col:11> 'Handler::Flags' EnumConstant 0x5611b0d61e10 'f_button' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d65350 <line:264:2, col:13> col:2 CHECKBOX 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5611b0d65568 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d65330 <col:13> 'Handler::Flags' Int: 16384
| |     `-DeclRefExpr 0x5611b0d65310 <col:13> 'Handler::Flags' EnumConstant 0x5611b0d61ea0 'f_checkbox' 'Handler::Flags'
| |-EnumConstantDecl 0x5611b0d653e0 <line:265:2, col:20> col:2 USER_FLAG_SHIFT 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5611b0d65580 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d653c0 <col:20> 'Handler::Flags' Int: 28
| |     `-DeclRefExpr 0x5611b0d653a0 <col:20> 'Handler::Flags' EnumConstant 0x5611b0d620d0 'f_user_shift' 'Handler::Flags'
| `-EnumConstantDecl 0x5611b0d65470 <line:266:2, col:16> col:2 USER_FLAG_0 'Handler::DeprecatedFlags'
|   `-ImplicitCastExpr 0x5611b0d65598 <col:16> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0d65450 <col:16> 'Handler::Flags' Int: 268435456
|       `-DeclRefExpr 0x5611b0d65430 <col:16> 'Handler::Flags' EnumConstant 0x5611b0d621a0 'f_user0' 'Handler::Flags'
|-EnumDecl 0x5611b0d655b0 <line:268:5, line:271:5> line:268:5
| |-DeprecatedAttr 0x5611b0d65670 <col:25> "" ""
| |-EnumConstantDecl 0x5611b0d65720 <line:269:2, col:14> col:2 EXCLUSIVE 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:268:5)'
| | `-ImplicitCastExpr 0x5611b0d65800 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d65700 <col:14> 'Handler::Flags' Int: 0
| |     `-DeclRefExpr 0x5611b0d656e0 <col:14> 'Handler::Flags' EnumConstant 0x5611b0d61900 'f_exclusive' 'Handler::Flags'
| `-EnumConstantDecl 0x5611b0d657b0 <line:270:2, col:17> col:2 NONEXCLUSIVE 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:268:5)'
|   `-ImplicitCastExpr 0x5611b0d65818 <col:17> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0d65790 <col:17> 'Handler::Flags' Int: 32
|       `-DeclRefExpr 0x5611b0d65770 <col:17> 'Handler::Flags' EnumConstant 0x5611b0d61990 'f_nonexclusive' 'Handler::Flags'
|-CXXMethodDecl 0x5611b0d65998 <line:281:5, line:284:5> line:281:19 __call_read 'String (Element *, void *) const' inline
| |-ParmVarDecl 0x5611b0d65840 <col:31, col:40> col:40 used e 'Element *'
| |-ParmVarDecl 0x5611b0d658c0 <col:43, col:49> col:49 used new_user_data 'void *'
| `-CompoundStmt 0x5611b0e8cca0 <col:70, line:284:5>
|   |-ParenExpr 0x5611b0e8cac0 <line:282:2, col:233> 'void'
|   | `-ConditionalOperator 0x5611b0e8ca90 <col:3, col:232> 'void'
|   |   |-CXXStaticCastExpr 0x5611b0e8c7c0 <col:3, col:75> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5611b0e8c790 <col:23, col:69> 'bool' '=='
|   |   |   |-ParenExpr 0x5611b0e8c738 <col:23, col:64> 'unsigned int'
|   |   |   | `-BinaryOperator 0x5611b0e8c718 <col:24, col:63> 'unsigned int' '&'
|   |   |   |   |-ImplicitCastExpr 0x5611b0e8c6e8 <col:24> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   |   |   | `-MemberExpr 0x5611b0e8c608 <col:24> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5611b0d66190
|   |   |   |   |   `-CXXThisExpr 0x5611b0e8c5f8 <col:24> 'const Handler *' implicit this
|   |   |   |   `-ImplicitCastExpr 0x5611b0e8c700 <col:33, col:63> 'unsigned int' <IntegralCast>
|   |   |   |     `-ParenExpr 0x5611b0e8c6c8 <col:33, col:63> 'int'
|   |   |   |       `-BinaryOperator 0x5611b0e8c6a8 <col:34, col:43> 'int' '|'
|   |   |   |         |-ImplicitCastExpr 0x5611b0e8c678 <col:34> 'int' <IntegralCast>
|   |   |   |         | `-DeclRefExpr 0x5611b0e8c638 <col:34> 'Handler::Flags' EnumConstant 0x5611b0d61750 'f_read' 'Handler::Flags'
|   |   |   |         `-ImplicitCastExpr 0x5611b0e8c690 <col:43> 'int' <IntegralCast>
|   |   |   |           `-DeclRefExpr 0x5611b0e8c658 <col:43> 'Handler::Flags' EnumConstant 0x5611b0d62230 'f_read_comprehensive' 'Handler::Flags'
|   |   |   `-ImplicitCastExpr 0x5611b0e8c778 <col:69> 'unsigned int' <IntegralCast>
|   |   |     `-DeclRefExpr 0x5611b0e8c758 <col:69> 'Handler::Flags' EnumConstant 0x5611b0d61750 'f_read' 'Handler::Flags'
|   |   |-CXXFunctionalCastExpr 0x5611b0e8c820 <col:79, col:86> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5611b0e8c800 <col:85> 'int' 0
|   |   `-CallExpr 0x5611b0e8c9f0 <col:90, col:232> 'void'
|   |     |-ImplicitCastExpr 0x5611b0e8c9d8 <col:90> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5611b0e8c9b8 <col:90> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5611b08f6fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5611b0e8ca30 <col:105> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e8c890 <col:105> 'const char [53]' lvalue "(_flags & (f_read | f_read_comprehensive)) == f_read"
|   |     |-ImplicitCastExpr 0x5611b0e8ca48 <col:161> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e8c8e0 <col:161> 'const char [30]' lvalue "../dummy_inc/click/handler.hh"
|   |     |-ImplicitCastExpr 0x5611b0e8ca60 <col:194> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5611b0e8c918 <col:194> 'int' 282
|   |     `-ImplicitCastExpr 0x5611b0e8ca78 <col:199, col:213> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5611b0e8c9a0 <col:199, col:213> 'const char [53]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5611b0e8c988 <col:213> 'const char [53]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5611b0e8c938 <col:213> 'const char [53]' lvalue "String Handler::__call_read(Element *, void *) const"
|   `-ReturnStmt 0x5611b0e8cc90 <line:283:2, col:38>
|     `-ExprWithCleanups 0x5611b0e8cc78 <col:9, col:38> 'String'
|       `-CXXConstructExpr 0x5611b0e8cc48 <col:9, col:38> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5611b0e8cc30 <col:9, col:38> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5611b0e8cc10 <col:9, col:38> 'String' (CXXTemporary 0x5611b0e8cc10)
|             `-CallExpr 0x5611b0e8cba8 <col:9, col:38> 'String'
|               |-ImplicitCastExpr 0x5611b0e8cb90 <col:9, col:20> 'ReadHandlerCallback':'String (*)(Element *, void *)' <LValueToRValue>
|               | `-MemberExpr 0x5611b0e8cb20 <col:9, col:20> 'const ReadHandlerCallback':'String (*const)(Element *, void *)' lvalue .r 0x5611b0d65ca0
|               |   `-MemberExpr 0x5611b0e8caf0 <col:9> 'const union (anonymous union at ../dummy_inc/click/handler.hh:290:5)':'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5)' lvalue ->_read_hook 0x5611b0d65d68
|               |     `-CXXThisExpr 0x5611b0e8cae0 <col:9> 'const Handler *' implicit this
|               |-ImplicitCastExpr 0x5611b0e8cbd8 <col:22> 'Element *' <LValueToRValue>
|               | `-DeclRefExpr 0x5611b0e8cb50 <col:22> 'Element *' lvalue ParmVar 0x5611b0d65840 'e' 'Element *'
|               `-ImplicitCastExpr 0x5611b0e8cbf0 <col:25> 'void *' <LValueToRValue>
|                 `-DeclRefExpr 0x5611b0e8cb70 <col:25> 'void *' lvalue ParmVar 0x5611b0d658c0 'new_user_data' 'void *'
|-AccessSpecDecl 0x5611b0d65a48 <line:287:3, col:10> col:3 private
|-FieldDecl 0x5611b0d65a80 <line:289:5, col:12> col:12 referenced _name 'String'
|-CXXRecordDecl 0x5611b0d65ad0 <line:290:5, line:293:5> line:290:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5611b0d65c20 <line:291:2, col:18> col:18 h 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-FieldDecl 0x5611b0d65ca0 <line:292:2, col:22> col:22 referenced r 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-CXXConstructorDecl 0x5611b0d669d8 <line:290:5> col:5 implicit constexpr  'void (const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &)' inline default trivial noexcept-unevaluated 0x5611b0d669d8
| | `-ParmVarDecl 0x5611b0d66ae8 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &'
| |-CXXConstructorDecl 0x5611b0d66b88 <col:5> col:5 implicit constexpr  'void (Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&)' inline default trivial noexcept-unevaluated 0x5611b0d66b88
| | `-ParmVarDecl 0x5611b0d66c98 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&'
| |-CXXDestructorDecl 0x5611b0d66d08 <col:5> col:5 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x5611b0d66d08
| |-CXXMethodDecl 0x5611b0d675d8 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &(const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &)' inline default trivial noexcept-unevaluated 0x5611b0d675d8
| | `-ParmVarDecl 0x5611b0d676e8 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &'
| |-CXXMethodDecl 0x5611b0d67758 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &(Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&)' inline default trivial noexcept-unevaluated 0x5611b0d67758
| | `-ParmVarDecl 0x5611b0d67868 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&'
| `-CXXConstructorDecl 0x5611b0fa85f0 <col:5> col:5 implicit used  'void () noexcept' inline default trivial
|   `-CompoundStmt 0x5611b0fa86d0 <col:5>
|-FieldDecl 0x5611b0d65d68 <col:5, line:293:7> col:7 referenced _read_hook 'union (anonymous union at ../dummy_inc/click/handler.hh:290:5)':'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5)'
|-CXXRecordDecl 0x5611b0d65dd0 <line:294:5, line:297:5> line:294:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5611b0d65ef8 <line:295:2, col:18> col:18 h 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-FieldDecl 0x5611b0d65f80 <line:296:2, col:23> col:23 referenced w 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-CXXConstructorDecl 0x5611b0d66e38 <line:294:5> col:5 implicit constexpr  'void (const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &)' inline default trivial noexcept-unevaluated 0x5611b0d66e38
| | `-ParmVarDecl 0x5611b0d66f48 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &'
| |-CXXConstructorDecl 0x5611b0d66fe8 <col:5> col:5 implicit constexpr  'void (Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&)' inline default trivial noexcept-unevaluated 0x5611b0d66fe8
| | `-ParmVarDecl 0x5611b0d670f8 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&'
| |-CXXDestructorDecl 0x5611b0d67168 <col:5> col:5 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x5611b0d67168
| |-CXXMethodDecl 0x5611b0d67908 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &(const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &)' inline default trivial noexcept-unevaluated 0x5611b0d67908
| | `-ParmVarDecl 0x5611b0d67a18 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &'
| |-CXXMethodDecl 0x5611b0d67a88 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &(Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&)' inline default trivial noexcept-unevaluated 0x5611b0d67a88
| | `-ParmVarDecl 0x5611b0d67b98 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&'
| `-CXXConstructorDecl 0x5611b0fa8730 <col:5> col:5 implicit used  'void () noexcept' inline default trivial
|   `-CompoundStmt 0x5611b0fa8810 <col:5>
|-FieldDecl 0x5611b0d66048 <col:5, line:297:7> col:7 referenced _write_hook 'union (anonymous union at ../dummy_inc/click/handler.hh:294:5)':'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5)'
|-FieldDecl 0x5611b0d660c8 <line:298:5, col:11> col:11 referenced _read_user_data 'void *'
|-FieldDecl 0x5611b0d66130 <line:299:5, col:11> col:11 referenced _write_user_data 'void *'
|-FieldDecl 0x5611b0d66190 <line:300:5, col:14> col:14 referenced _flags 'uint32_t':'unsigned int'
|-FieldDecl 0x5611b0d661f8 <line:301:5, col:9> col:9 _use_count 'int'
|-FieldDecl 0x5611b0d66260 <line:302:5, col:9> col:9 _next_by_name 'int'
|-VarDecl 0x5611b0d662c0 <line:304:5, col:27> col:27 used the_blank_handler 'const Handler *' static
|-CXXConstructorDecl 0x5611b0d663e0 <line:306:5, col:38> col:5 Handler 'void (const String &)'
| `-ParmVarDecl 0x5611b0d66338 <col:13, col:37> col:28 'const String &' cinit
|   `-ExprWithCleanups 0x5611b0d67f50 <col:30, col:37> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5611b0d67f38 <col:30, col:37> 'const String' lvalue
|       `-ImplicitCastExpr 0x5611b0d67f20 <col:30, col:37> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5611b0d67f00 <col:30, col:37> 'String' (CXXTemporary 0x5611b0d67f00)
|           `-CXXTemporaryObjectExpr 0x5611b0d67ec8 <col:30, col:37> 'String' 'void ()'
|-CXXMethodDecl 0x5611b0d66588 <line:308:5, col:41> col:17 combine 'void (const Handler &)' inline
| `-ParmVarDecl 0x5611b0d664c8 <col:25, col:40> col:40 x 'const Handler &'
|-CXXMethodDecl 0x5611b0d66708 <line:309:5, col:46> col:17 compatible 'bool (const Handler &) const' inline
| `-ParmVarDecl 0x5611b0d66640 <col:28, col:43> col:43 x 'const Handler &'
|-FriendDecl 0x5611b0d66800 <line:311:5, col:18> col:12 'class Router':'Router'
|-CXXConstructorDecl 0x5611b0d66840 <line:19:7> col:7 implicit Handler 'void (const Handler &)' inline default noexcept-unevaluated 0x5611b0d66840
| `-ParmVarDecl 0x5611b0d66928 <col:7> col:7 'const Handler &'
|-CXXConstructorDecl 0x5611b0d67278 <col:7> col:7 implicit Handler 'void (Handler &&)' inline default noexcept-unevaluated 0x5611b0d67278
| `-ParmVarDecl 0x5611b0d67388 <col:7> col:7 'Handler &&'
|-CXXMethodDecl 0x5611b0d67428 <col:7> col:7 implicit operator= 'Handler &(const Handler &)' inline default noexcept-unevaluated 0x5611b0d67428
| `-ParmVarDecl 0x5611b0d67538 <col:7> col:7 'const Handler &'
|-CXXMethodDecl 0x5611b0d67c08 <col:7> col:7 implicit operator= 'Handler &(Handler &&)' inline default noexcept-unevaluated 0x5611b0d67c08
| `-ParmVarDecl 0x5611b0d67d18 <col:7> col:7 'Handler &&'
`-CXXDestructorDecl 0x5611b0d67da0 <col:7> col:7 implicit ~Handler 'void ()' inline default noexcept-unevaluated 0x5611b0d67da0

Layout: <CGRecordLayout
  LLVMType:%class.Handler = type <{ %class.String, %union.anon, %union.anon.11, i8*, i8*, i32, i32, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Handler.base = type <{ %class.String, %union.anon, %union.anon.11, i8*, i8*, i32, i32, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5611b0f8f6a8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'void *'
|-CXXRecordDecl 0x5611b0f8f8b8 prev 0x5611b0f8f6a8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5611b0f908d0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<void *>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x5611b0f90880 'typename array_memory<void *>::type' sugar
|   `-TypedefType 0x5611b0f90860 'conditional<true, sized_array_memory<8>, typed_array_memory<void *> >::type' sugar
|     |-Typedef 0x5611b0f90710 'type'
|     `-SubstTemplateTypeParmType 0x5611b0eb7e30 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x5611b0a748b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0a74858 'T'
|       `-RecordType 0x5611b0eb7980 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x5611b0eb7898 'sized_array_memory'
|-FieldDecl 0x5611b0f909d0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<void *>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x5611b0f90a20 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5611b0f90a58 <line:118:5, col:15> col:15 value_type 'void *':'void *'
| `-SubstTemplateTypeParmType 0x5611b0f8f950 'void *' sugar
|   |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5611b0b584d8 'T'
|   `-PointerType 0x5611b0855ce0 'void *'
|     `-BuiltinType 0x5611b08554e0 'void'
|-TypedefDecl 0x5611b0f90ae8 <line:119:5, col:16> col:16 reference 'void *&'
| `-LValueReferenceType 0x5611b0f90ab0 'void *&'
|   `-SubstTemplateTypeParmType 0x5611b0f8f950 'void *' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-PointerType 0x5611b0855ce0 'void *'
|       `-BuiltinType 0x5611b08554e0 'void'
|-TypedefDecl 0x5611b0f90ba8 <line:120:5, col:22> col:22 const_reference 'void *const &'
| `-LValueReferenceType 0x5611b0f90b70 'void *const &'
|   `-QualType 0x5611b0f8f951 'void *const' const
|     `-SubstTemplateTypeParmType 0x5611b0f8f950 'void *' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-PointerType 0x5611b0855ce0 'void *'
|         `-BuiltinType 0x5611b08554e0 'void'
|-TypedefDecl 0x5611b0f90c38 <line:121:5, col:16> col:16 pointer 'void **'
| `-PointerType 0x5611b0f90c00 'void **'
|   `-SubstTemplateTypeParmType 0x5611b0f8f950 'void *' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-PointerType 0x5611b0855ce0 'void *'
|       `-BuiltinType 0x5611b08554e0 'void'
|-TypedefDecl 0x5611b0f90cc8 <line:122:5, col:22> col:22 const_pointer 'void *const *'
| `-PointerType 0x5611b0f90c90 'void *const *'
|   `-QualType 0x5611b0f8f951 'void *const' const
|     `-SubstTemplateTypeParmType 0x5611b0f8f950 'void *' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-PointerType 0x5611b0855ce0 'void *'
|         `-BuiltinType 0x5611b08554e0 'void'
|-TypedefDecl 0x5611b0f918b0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<void *>::type':'void *'
| `-ElaboratedType 0x5611b0f91860 'typename fast_argument<void *>::type' sugar
|   `-TypedefType 0x5611b0f91840 'fast_argument<void *, false>::type' sugar
|     |-Typedef 0x5611b0f917d0 'type'
|     `-SubstTemplateTypeParmType 0x5611b0f91590 'void *' sugar
|       |-TemplateTypeParmType 0x5611b0a7eca0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0a7ec50 'T'
|       `-PointerType 0x5611b0855ce0 'void *'
|         `-BuiltinType 0x5611b08554e0 'void'
|-TypedefDecl 0x5611b0f91918 <line:126:5, col:22> col:22 const_access_type 'void *const &'
| `-LValueReferenceType 0x5611b0f90b70 'void *const &'
|   `-QualType 0x5611b0f8f951 'void *const' const
|     `-SubstTemplateTypeParmType 0x5611b0f8f950 'void *' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-PointerType 0x5611b0855ce0 'void *'
|         `-BuiltinType 0x5611b08554e0 'void'
|-TypedefDecl 0x5611b0f91970 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0f919d8 <line:130:5, col:16> col:16 iterator 'void **'
| `-PointerType 0x5611b0f90c00 'void **'
|   `-SubstTemplateTypeParmType 0x5611b0f8f950 'void *' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-PointerType 0x5611b0855ce0 'void *'
|       `-BuiltinType 0x5611b08554e0 'void'
|-TypedefDecl 0x5611b0f91a40 <line:131:5, col:22> col:22 const_iterator 'void *const *'
| `-PointerType 0x5611b0f90c90 'void *const *'
|   `-QualType 0x5611b0f8f951 'void *const' const
|     `-SubstTemplateTypeParmType 0x5611b0f8f950 'void *' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-PointerType 0x5611b0855ce0 'void *'
|         `-BuiltinType 0x5611b08554e0 'void'
|-EnumDecl 0x5611b0f91a98 <line:134:5> col:5
| `-EnumConstantDecl 0x5611b0f91b90 <col:12, col:40> col:12 RESERVE_GROW 'Vector<void *>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5611b0f91b70 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5611b0b59f18 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5611b0b59ef0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5611b0b59ed0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5611b0f93420 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5611b0f93668 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<void *>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0f934d8 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0f93570 <col:41, col:61> col:61 v 'Vector<void *>::value_argument_type':'void *'
|-CXXConstructorDecl 0x5611b0f93928 <line:139:5, col:37> col:12 Vector 'void (const Vector<void *> &)' inline
| `-ParmVarDecl 0x5611b0f93810 <col:19, col:36> col:36 x 'const Vector<void *> &'
|-CXXConstructorDecl 0x5611b0f93be8 <line:141:5, col:32> col:12 Vector 'void (Vector<void *> &&)' inline
| `-ParmVarDecl 0x5611b0f93ad0 <col:19, col:31> col:31 x 'Vector<void *> &&'
|-CXXMethodDecl 0x5611b0f93f30 <line:144:5, col:51> col:23 operator= 'Vector<void *> &(const Vector<void *> &)' inline
| `-ParmVarDecl 0x5611b0f93e10 <col:33, col:50> col:50 x 'const Vector<void *> &'
|-CXXMethodDecl 0x5611b0f94240 <line:146:5, col:46> col:23 operator= 'Vector<void *> &(Vector<void *> &&)' inline
| `-ParmVarDecl 0x5611b0f94120 <col:33, col:45> col:45 x 'Vector<void *> &&'
|-CXXMethodDecl 0x5611b0f94530 <line:148:5, col:70> col:23 assign 'Vector<void *> &(Vector::size_type, Vector<void *>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0f94378 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0f943f0 <col:43, col:69> col:63 v 'Vector<void *>::value_argument_type':'void *'
|-CXXMethodDecl 0x5611b0f94688 <line:150:5, col:55> col:49 begin 'Vector<void *>::iterator ()'
| |-NoInlineAttr 0x5611b0f94768 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f947c0 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f94808 <line:151:5, col:53> col:49 end 'Vector<void *>::iterator ()'
| |-NoInlineAttr 0x5611b0f948b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f94910 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f949d8 <line:152:5, col:63> col:55 begin 'Vector<void *>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f94a88 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f94ae0 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f94b28 <line:153:5, col:61> col:55 end 'Vector<void *>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f94bd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f94c30 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f94c78 <line:154:5, col:64> col:55 cbegin 'Vector<void *>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f94d28 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f94d80 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f94dc8 <line:155:5, col:62> col:55 cend 'Vector<void *>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f94e78 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f94ed0 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f94ef8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5611b0f94fa8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5611b0f95058 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5611b0f95218 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<void *>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0f95108 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0f95180 <col:37, col:63> col:57 v 'Vector<void *>::value_argument_type':'void *'
|-CXXMethodDecl 0x5611b0f95368 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0f952d8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f95518 <line:163:5, col:65> col:43 operator[] 'void *&(Vector::size_type)'
| |-ParmVarDecl 0x5611b0f95420 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5611b0f955d0 <col:20>
| `-OptimizeNoneAttr 0x5611b0f95628 <col:30>
|-CXXMethodDecl 0x5611b0f95748 <line:164:5, col:73> col:49 operator[] 'void *const &(Vector::size_type) const'
| |-ParmVarDecl 0x5611b0f95650 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5611b0f95800 <col:20>
| `-OptimizeNoneAttr 0x5611b0f95858 <col:30>
|-CXXMethodDecl 0x5611b0f95910 <line:165:5, col:29> col:15 at 'void *&(Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0f95880 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f95a58 <line:166:5, col:37> col:21 at 'void *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5611b0f959c8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f95b88 <line:167:5, col:21> col:15 front 'void *&()' inline
|-CXXMethodDecl 0x5611b0f95cb8 <line:168:5, col:29> col:21 front 'void *const &() const' inline
|-CXXMethodDecl 0x5611b0f95d88 <line:169:5, col:20> col:15 back 'void *&()' inline
|-CXXMethodDecl 0x5611b0f95e58 <line:170:5, col:28> col:21 back 'void *const &() const' inline
|-CXXMethodDecl 0x5611b0f95f98 <line:172:5, col:39> col:15 unchecked_at 'void *&(Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0f95f08 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f960e0 <line:173:5, col:47> col:21 unchecked_at 'void *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5611b0f96050 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f96228 <line:174:5, col:59> col:15 at_u 'void *&(Vector::size_type)' inline
| |-ParmVarDecl 0x5611b0f96198 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5611b0f962e0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5611b0f963e0 <line:175:5, col:71> col:21 at_u 'void *const &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5611b0f96350 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5611b0f96498 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5611b0f96558 <line:177:5, col:20> col:15 data 'void **()' inline
|-CXXMethodDecl 0x5611b0f96658 <line:178:5, col:28> col:21 data 'void *const *() const' inline
|-CXXMethodDecl 0x5611b0f967d8 <line:180:5, col:48> col:17 push_back 'void (Vector<void *>::value_argument_type)' inline
| `-ParmVarDecl 0x5611b0f96718 <col:27, col:47> col:47 v 'Vector<void *>::value_argument_type':'void *'
|-FunctionTemplateDecl 0x5611b0f96f98 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5611b0f96890 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<void *>':'fast_argument<void *, false>'
| `-CXXMethodDecl 0x5611b0f96ef8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (void *&&)' inline
|   `-ParmVarDecl 0x5611b0f96df8 <col:58, col:62> col:62 v 'void *&&'
|-CXXMethodDecl 0x5611b0f97078 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5611b0f971c8 <line:186:5, col:49> col:17 push_front 'void (Vector<void *>::value_argument_type)' inline
| `-ParmVarDecl 0x5611b0f97138 <col:28, col:48> col:48 v 'Vector<void *>::value_argument_type':'void *'
|-CXXMethodDecl 0x5611b0f97280 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5611b0f974c8 <line:189:5, col:62> col:21 insert 'Vector<void *>::iterator (Vector<void *>::iterator, Vector<void *>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0f97340 <col:28, col:37> col:37 it 'Vector<void *>::iterator':'void **'
| `-ParmVarDecl 0x5611b0f973b8 <col:41, col:61> col:61 v 'Vector<void *>::value_argument_type':'void *'
|-CXXMethodDecl 0x5611b0f97688 <line:190:5, col:38> col:21 erase 'Vector<void *>::iterator (Vector<void *>::iterator)' inline
| `-ParmVarDecl 0x5611b0f97598 <col:27, col:36> col:36 it 'Vector<void *>::iterator':'void **'
|-CXXMethodDecl 0x5611b0f978d8 <line:191:5, col:49> col:21 erase 'Vector<void *>::iterator (Vector<void *>::iterator, Vector<void *>::iterator)' inline
| |-ParmVarDecl 0x5611b0f97750 <col:27, col:36> col:36 a 'Vector<void *>::iterator':'void **'
| `-ParmVarDecl 0x5611b0f977c8 <col:39, col:48> col:48 b 'Vector<void *>::iterator':'void **'
|-CXXMethodDecl 0x5611b0f97998 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5611b0f97bf8 <line:195:5, col:34> col:17 swap 'void (Vector<void *> &)' inline
| `-ParmVarDecl 0x5611b0f97b00 <col:22, col:33> col:33 x 'Vector<void *> &'
`-CXXDestructorDecl 0x5611b0f97cc8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5611b0f97cc8

Layout: <CGRecordLayout
  LLVMType:%class.Vector.12 = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector.12 = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Router::notifier_signals_t
         0 |   class String name
         0 |     struct String::rep_t _r
         0 |       const char * data
         8 |       int length
        16 |       struct String::memo_t * memo
        24 |   int nsig
        28 |   class atomic_uint32_t [128] sig
       544 |   struct Router::notifier_signals_t * next
           | [sizeof=552, dsize=552, align=8,
           |  nvsize=552, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0f97ec0 <../dummy_inc/click/router.hh:280:5, line:290:5> line:280:12 referenced struct notifier_signals_t definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-CXXRecordDecl 0x5611b0f97fd8 <col:5, col:12> col:12 implicit referenced struct notifier_signals_t
|-EnumDecl 0x5611b0f98068 <line:281:9, col:32> col:9
| `-EnumConstantDecl 0x5611b0f98170 <col:16, col:27> col:16 referenced capacity 'Router::notifier_signals_t::(anonymous enum at ../dummy_inc/click/router.hh:281:9)'
|   `-ImplicitCastExpr 0x5611b0f981c0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0f98150 <col:27> 'int' Int: 4096
|       `-IntegerLiteral 0x5611b0f98130 <col:27> 'int' 4096
|-FieldDecl 0x5611b0f981e8 <line:282:9, col:16> col:16 name 'String'
|-FieldDecl 0x5611b0f98250 <line:283:9, col:13> col:13 nsig 'int'
|-FieldDecl 0x5611b0f98448 <line:284:9, col:42> col:25 referenced sig 'atomic_uint32_t [128]'
|-FieldDecl 0x5611b0f984d8 <line:285:9, col:29> col:29 next 'Router::notifier_signals_t *'
|-CXXConstructorDecl 0x5611b0f98698 <line:286:9, line:289:9> line:286:9 notifier_signals_t 'void (const String &, Router::notifier_signals_t *)'
| |-ParmVarDecl 0x5611b0f98538 <col:28, col:42> col:42 used n 'const String &'
| |-ParmVarDecl 0x5611b0f985b0 <col:45, col:65> col:65 used nx 'Router::notifier_signals_t *'
| |-CXXCtorInitializer Field 0x5611b0f981e8 'name' 'String'
| | `-CXXConstructExpr 0x5611b0fa35f8 <line:287:15, col:21> 'String' 'void (const String &)'
| |   `-DeclRefExpr 0x5611b0fa35b8 <col:20> 'const String' lvalue ParmVar 0x5611b0f98538 'n' 'const String &'
| |-CXXCtorInitializer Field 0x5611b0f98250 'nsig' 'int'
| | `-IntegerLiteral 0x5611b0fa3650 <col:29> 'int' 0
| |-CXXCtorInitializer Field 0x5611b0f98448 'sig' 'atomic_uint32_t [128]'
| | `-CXXConstructExpr 0x5611b0fa3738 <line:286:9> 'atomic_uint32_t [128]' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5611b0f984d8 'next' 'Router::notifier_signals_t *'
| | `-ImplicitCastExpr 0x5611b0fa36f8 <line:287:38> 'Router::notifier_signals_t *' <LValueToRValue>
| |   `-DeclRefExpr 0x5611b0fa36b8 <col:38> 'Router::notifier_signals_t *' lvalue ParmVar 0x5611b0f985b0 'nx' 'Router::notifier_signals_t *'
| `-CompoundStmt 0x5611b0fa39c8 <col:42, line:289:9>
|   `-CallExpr 0x5611b0fa3978 <line:288:13, col:43> 'void *'
|     |-ImplicitCastExpr 0x5611b0fa3960 <col:13> 'void *(*)(void *, int, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5611b0fa3940 <col:13> 'void *(void *, int, size_t) throw()' lvalue Function 0x5611b0ae7868 'memset' 'void *(void *, int, size_t) throw()'
|     |-ImplicitCastExpr 0x5611b0fa39b0 <col:20, col:26> 'void *' <BitCast>
|     | `-UnaryOperator 0x5611b0fa3888 <col:20, col:26> 'atomic_uint32_t *' prefix '&' cannot overflow
|     |   `-ArraySubscriptExpr 0x5611b0fa3868 <col:21, col:26> 'atomic_uint32_t' lvalue
|     |     |-ImplicitCastExpr 0x5611b0fa3850 <col:21> 'atomic_uint32_t *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5611b0fa3800 <col:21> 'atomic_uint32_t [128]' lvalue ->sig 0x5611b0f98448
|     |     |   `-CXXThisExpr 0x5611b0fa37f0 <col:21> 'Router::notifier_signals_t *' implicit this
|     |     `-IntegerLiteral 0x5611b0fa3830 <col:25> 'int' 0
|     |-IntegerLiteral 0x5611b0fa38a0 <col:29> 'int' 0
|     `-UnaryExprOrTypeTraitExpr 0x5611b0fa3920 <col:32, col:42> 'unsigned long' sizeof
|       `-ParenExpr 0x5611b0fa3900 <col:38, col:42> 'atomic_uint32_t [128]' lvalue
|         `-MemberExpr 0x5611b0fa38d0 <col:39> 'atomic_uint32_t [128]' lvalue ->sig 0x5611b0f98448 non_odr_use_unevaluated
|           `-CXXThisExpr 0x5611b0fa38c0 <col:39> 'Router::notifier_signals_t *' implicit this
|-CXXConstructorDecl 0x5611b0f98778 <line:280:12> col:12 implicit notifier_signals_t 'void (const Router::notifier_signals_t &)' inline default noexcept-unevaluated 0x5611b0f98778
| `-ParmVarDecl 0x5611b0f98888 <col:12> col:12 'const Router::notifier_signals_t &'
|-CXXConstructorDecl 0x5611b0f98928 <col:12> col:12 implicit notifier_signals_t 'void (Router::notifier_signals_t &&)' inline default noexcept-unevaluated 0x5611b0f98928
| `-ParmVarDecl 0x5611b0f98a38 <col:12> col:12 'Router::notifier_signals_t &&'
|-CXXMethodDecl 0x5611b0f98ad8 <col:12> col:12 implicit operator= 'Router::notifier_signals_t &(const Router::notifier_signals_t &)' inline default noexcept-unevaluated 0x5611b0f98ad8
| `-ParmVarDecl 0x5611b0f98be8 <col:12> col:12 'const Router::notifier_signals_t &'
|-CXXMethodDecl 0x5611b0f98c58 <col:12> col:12 implicit operator= 'Router::notifier_signals_t &(Router::notifier_signals_t &&)' inline default noexcept-unevaluated 0x5611b0f98c58
| `-ParmVarDecl 0x5611b0f98d68 <col:12> col:12 'Router::notifier_signals_t &&'
`-CXXDestructorDecl 0x5611b0f98df0 <col:12> col:12 implicit ~notifier_signals_t 'void ()' inline default noexcept-unevaluated 0x5611b0f98df0

Layout: <CGRecordLayout
  LLVMType:%"struct.Router::notifier_signals_t" = type { %class.String, i32, [128 x %class.atomic_uint32_t], %"struct.Router::notifier_signals_t"* }
  NonVirtualBaseLLVMType:%"struct.Router::notifier_signals_t" = type { %class.String, i32, [128 x %class.atomic_uint32_t], %"struct.Router::notifier_signals_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class HashMap_ArenaFactory
         0 |   (HashMap_ArenaFactory vtable pointer)
         8 |   class HashMap_Arena **[2] _arenas
        24 |   int [2] _narenas
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | class HashMap_Arena
         0 |   struct HashMap_Arena::Link * _free
         8 |   char * _cur_buffer
        16 |   int _buffer_pos
        20 |   uint32_t _element_size
        24 |   char ** _buffers
        32 |   int _nbuffers
        36 |   int _buffers_cap
        40 |   uint32_t _refcount
        44 |   _Bool _detached
           | [sizeof=48, dsize=45, align=8,
           |  nvsize=45, nvalign=8]

*** Dumping AST Record Layout
         0 | struct HashMap_Arena::Link
         0 |   struct HashMap_Arena::Link * next
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0fe3c48 <../dummy_inc/click/bighashmap_arena.hh:21:5, line:23:5> line:21:12 referenced struct Link definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5611b0fe3d68 <col:5, col:12> col:12 implicit referenced struct Link
`-FieldDecl 0x5611b0fe3e38 <line:22:2, col:8> col:8 referenced next 'HashMap_Arena::Link *'

Layout: <CGRecordLayout
  LLVMType:%"struct.HashMap_Arena::Link" = type { %"struct.HashMap_Arena::Link"* }
  NonVirtualBaseLLVMType:%"struct.HashMap_Arena::Link" = type { %"struct.HashMap_Arena::Link"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0fe33c0 prev 0x5611b0fc10e8 <../dummy_inc/click/bighashmap_arena.hh:6:1, line:48:1> line:6:7 referenced class HashMap_Arena definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5611b0fe34b8 <col:1, col:7> col:7 implicit referenced class HashMap_Arena
|-AccessSpecDecl 0x5611b0fe3548 <col:23, col:29> col:23 public
|-CXXConstructorDecl 0x5611b0fe3628 <line:8:5, col:40> col:5 HashMap_Arena 'void (uint32_t)'
| `-ParmVarDecl 0x5611b0fe3580 <col:19, col:28> col:28 element_size 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0fe36f8 <line:10:5, col:31> col:10 referenced use 'void ()'
| `-CompoundStmt 0x5611b0fe49c8 <col:16, col:31>
|   `-UnaryOperator 0x5611b0fe49b0 <col:18, col:27> 'uint32_t':'unsigned int' postfix '++'
|     `-MemberExpr 0x5611b0fe4980 <col:18> 'uint32_t':'unsigned int' lvalue ->_refcount 0x5611b0fe42e0
|       `-CXXThisExpr 0x5611b0fe4970 <col:18> 'HashMap_Arena *' implicit this
|-CXXMethodDecl 0x5611b0fe37b8 <line:11:5, col:16> col:10 unuse 'void ()'
|-CXXMethodDecl 0x5611b0fe38a8 <line:13:5, col:47> col:10 detached 'bool () const'
| `-CompoundStmt 0x5611b0fe4a48 <col:27, col:47>
|   `-ReturnStmt 0x5611b0fe4a38 <col:29, col:36>
|     `-ImplicitCastExpr 0x5611b0fe4a20 <col:36> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5611b0fe49f0 <col:36> 'const bool' lvalue ->_detached 0x5611b0fe4340
|         `-CXXThisExpr 0x5611b0fe49e0 <col:36> 'const HashMap_Arena *' implicit this
|-CXXMethodDecl 0x5611b0fe3968 <line:14:5, col:39> col:10 detach 'void ()'
| `-CompoundStmt 0x5611b0fe4ad0 <col:19, col:39>
|   `-BinaryOperator 0x5611b0fe4ab0 <col:21, col:33> 'bool' lvalue '='
|     |-MemberExpr 0x5611b0fe4a70 <col:21> 'bool' lvalue ->_detached 0x5611b0fe4340
|     | `-CXXThisExpr 0x5611b0fe4a60 <col:21> 'HashMap_Arena *' implicit this
|     `-CXXBoolLiteralExpr 0x5611b0fe4aa0 <col:33> 'bool' true
|-CXXMethodDecl 0x5611b0fe3a30 <line:16:5, col:17> col:11 alloc 'void *()'
|-CXXMethodDecl 0x5611b0fe3b78 <line:17:5, col:21> col:10 free 'void (void *)'
| `-ParmVarDecl 0x5611b0fe3ae8 <col:15, col:20> col:21 'void *'
|-AccessSpecDecl 0x5611b0fe3c20 <line:19:3, col:10> col:3 private
|-CXXRecordDecl 0x5611b0fe3c48 <line:21:5, line:23:5> line:21:12 referenced struct Link definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5611b0fe3d68 <col:5, col:12> col:12 implicit referenced struct Link
| `-FieldDecl 0x5611b0fe3e38 <line:22:2, col:8> col:8 referenced next 'HashMap_Arena::Link *'
|-FieldDecl 0x5611b0fe3eb0 <line:24:5, col:11> col:11 referenced _free 'HashMap_Arena::Link *'
|-EnumDecl 0x5611b0fe3f00 <line:26:5, col:28> col:5
| `-EnumConstantDecl 0x5611b0fe4000 <col:12, col:24> col:12 NELEMENTS 'HashMap_Arena::(anonymous enum at ../dummy_inc/click/bighashmap_arena.hh:26:5)'
|   `-ImplicitCastExpr 0x5611b0fe4050 <col:24> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0fe3fe0 <col:24> 'int' Int: 127
|       `-IntegerLiteral 0x5611b0fe3fc0 <col:24> 'int' 127
|-FieldDecl 0x5611b0fe4080 <line:28:5, col:11> col:11 referenced _cur_buffer 'char *'
|-FieldDecl 0x5611b0fe40e8 <line:29:5, col:9> col:9 referenced _buffer_pos 'int'
|-FieldDecl 0x5611b0fe4148 <line:31:5, col:14> col:14 referenced _element_size 'uint32_t':'unsigned int'
|-FieldDecl 0x5611b0fe41b0 <line:33:5, col:12> col:12 _buffers 'char **'
|-FieldDecl 0x5611b0fe4218 <line:34:5, col:9> col:9 _nbuffers 'int'
|-FieldDecl 0x5611b0fe4280 <line:35:5, col:9> col:9 _buffers_cap 'int'
|-FieldDecl 0x5611b0fe42e0 <line:37:5, col:14> col:14 referenced _refcount 'uint32_t':'unsigned int'
|-FieldDecl 0x5611b0fe4340 <line:38:5, col:10> col:10 referenced _detached 'bool'
|-CXXConstructorDecl 0x5611b0fe4488 <line:40:5, col:40> col:5 HashMap_Arena 'void (const HashMap_Arena &)'
| `-ParmVarDecl 0x5611b0fe43c8 <col:19, col:39> col:40 'const HashMap_Arena &'
|-CXXDestructorDecl 0x5611b0fe4580 <line:41:5, col:20> col:5 used ~HashMap_Arena 'void () noexcept'
|-CXXMethodDecl 0x5611b0fe4768 <line:42:5, col:51> col:20 operator= 'HashMap_Arena &(const HashMap_Arena &)'
| `-ParmVarDecl 0x5611b0fe4670 <col:30, col:50> col:51 'const HashMap_Arena &'
|-CXXMethodDecl 0x5611b0fe4838 <line:44:5, col:22> col:11 used hard_alloc 'void *()'
`-FriendDecl 0x5611b0fe4930 <line:46:5, col:19> col:12 'struct Link':'HashMap_Arena::Link'

Layout: <CGRecordLayout
  LLVMType:%class.HashMap_Arena = type <{ %"struct.HashMap_Arena::Link"*, i8*, i32, i32, i8**, i32, i32, i32, i8, [3 x i8] }>
  NonVirtualBaseLLVMType:%class.HashMap_Arena.base = type <{ %"struct.HashMap_Arena::Link"*, i8*, i32, i32, i8**, i32, i32, i32, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0fe4ae8 prev 0x5611b0fc11a0 <../dummy_inc/click/bighashmap_arena.hh:50:1, line:68:1> line:50:7 referenced class HashMap_ArenaFactory definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5611b0fe5c60 <col:1, col:7> col:7 implicit referenced class HashMap_ArenaFactory
|-AccessSpecDecl 0x5611b0fe5cf0 <col:30, col:36> col:30 public
|-CXXConstructorDecl 0x5611b0fe5d50 <line:52:5, col:26> col:5 HashMap_ArenaFactory 'void ()'
|-CXXDestructorDecl 0x5611b0fe5e40 <line:53:5, col:35> col:13 ~HashMap_ArenaFactory 'void ()' virtual noexcept-unevaluated 0x5611b0fe5e40
|-CXXMethodDecl 0x5611b0fe5f40 <line:55:5, col:35> col:17 static_initialize 'void ()' static
|-CXXMethodDecl 0x5611b0fe6000 <line:56:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5611b0fe6238 <line:58:5, col:72> col:27 referenced get_arena 'HashMap_Arena *(uint32_t, HashMap_ArenaFactory *)' static
| |-ParmVarDecl 0x5611b0fe60b0 <col:37> col:45 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5611b0fe6128 <col:47, col:71> col:70 'HashMap_ArenaFactory *' cinit
|   `-ImplicitCastExpr 0x5611b0fe6908 <col:71> 'HashMap_ArenaFactory *' <NullToPointer>
|     `-IntegerLiteral 0x5611b0fe68e8 <col:71> 'int' 0
|-CXXMethodDecl 0x5611b0fe63e8 <line:59:5, col:51> col:28 get_arena_func 'HashMap_Arena *(uint32_t)' virtual
| `-ParmVarDecl 0x5611b0fe62f8 <col:43> col:51 'uint32_t':'unsigned int'
|-AccessSpecDecl 0x5611b0fe6490 <line:61:3, col:10> col:3 private
|-FieldDecl 0x5611b0fe6590 <line:63:5, col:30> col:21 _arenas 'HashMap_Arena **[2]'
|-FieldDecl 0x5611b0fe6648 <line:64:5, col:19> col:9 _narenas 'int [2]'
|-VarDecl 0x5611b0fe66a8 <line:66:5, col:34> col:34 the_factory 'HashMap_ArenaFactory *' static
`-CXXMethodDecl 0x5611b0fe6768 <line:50:7> col:7 implicit operator= 'HashMap_ArenaFactory &(const HashMap_ArenaFactory &)' inline default noexcept-unevaluated 0x5611b0fe6768
  `-ParmVarDecl 0x5611b0fe6878 <col:7> col:7 'const HashMap_ArenaFactory &'

Layout: <CGRecordLayout
  LLVMType:%class.HashMap_ArenaFactory = type { i32 (...)**, [2 x %class.HashMap_Arena**], [2 x i32] }
  NonVirtualBaseLLVMType:%class.HashMap_ArenaFactory = type { i32 (...)**, [2 x %class.HashMap_Arena**], [2 x i32] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ThreadSched
         0 |   (ThreadSched vtable pointer)
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0f54aa0 <../dummy_inc/click/standard/threadsched.hh:6:1, line:15:1> line:6:7 class ThreadSched definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5611b0f54bb8 <col:1, col:7> col:7 implicit referenced class ThreadSched
|-AccessSpecDecl 0x5611b0f54c48 <col:21, col:27> col:21 public
|-EnumDecl 0x5611b0f54c70 <line:8:5, col:58> col:5
| |-EnumConstantDecl 0x5611b0f54d88 <col:12, col:32> col:12 THREAD_QUIESCENT 'ThreadSched::(anonymous enum at ../dummy_inc/click/standard/threadsched.hh:8:5)'
| | `-ConstantExpr 0x5611b0f54d68 <col:31, col:32> 'int' Int: -1
| |   `-UnaryOperator 0x5611b0f54d50 <col:31, col:32> 'int' prefix '-'
| |     `-IntegerLiteral 0x5611b0f54d30 <col:32> 'int' 1
| `-EnumConstantDecl 0x5611b0f54e30 <col:35, col:53> col:35 THREAD_UNKNOWN 'ThreadSched::(anonymous enum at ../dummy_inc/click/standard/threadsched.hh:8:5)'
|   `-ConstantExpr 0x5611b0f54e10 <col:52, col:53> 'int' Int: -1000
|     `-UnaryOperator 0x5611b0f54df8 <col:52, col:53> 'int' prefix '-'
|       `-IntegerLiteral 0x5611b0f54dd8 <col:53> 'int' 1000
|-CXXConstructorDecl 0x5611b0f54ee0 <line:10:5, col:21> col:5 ThreadSched 'void ()'
| `-CompoundStmt 0x5611b0f66488 <col:19, col:21>
|-CXXDestructorDecl 0x5611b0f54fd0 <line:11:5, col:30> col:13 ~ThreadSched 'void () noexcept' virtual
| `-CompoundStmt 0x5611b0f66498 <col:28, col:30>
|-CXXMethodDecl 0x5611b0f55190 <line:13:5, col:56> col:17 initial_home_thread_id 'int (const Element *)' virtual
| `-ParmVarDecl 0x5611b0f550c0 <col:40, col:55> col:55 e 'const Element *'
`-CXXMethodDecl 0x5611b0f66310 <line:6:7> col:7 implicit operator= 'ThreadSched &(const ThreadSched &)' inline default noexcept-unevaluated 0x5611b0f66310
  `-ParmVarDecl 0x5611b0f66418 <col:7> col:7 'const ThreadSched &'

Layout: <CGRecordLayout
  LLVMType:%class.ThreadSched = type { i32 (...)** }
  NonVirtualBaseLLVMType:%class.ThreadSched = type { i32 (...)** }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0f66a20 prev 0x5611b0f2c850 <../dummy_inc/click/router.hh:23:1, line:352:1> line:23:7 referenced class Router definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-CXXRecordDecl 0x5611b0f66b18 <col:1, col:7> col:7 implicit referenced class Router
|-AccessSpecDecl 0x5611b0f66ba8 <col:16, col:22> col:16 public
|-CXXMethodDecl 0x5611b0f66c18 <line:28:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5611b0f66cd8 <line:31:5, col:31> col:17 used initialized 'bool () const' inline
|-CXXMethodDecl 0x5611b0f66d98 <line:32:5, col:34> col:17 handlers_ready 'bool () const' inline
|-CXXMethodDecl 0x5611b0f66e58 <line:33:5, col:27> col:17 running 'bool () const' inline
|-CXXMethodDecl 0x5611b0f66f18 <line:34:5, col:25> col:17 dying 'bool () const' inline
|-EnumDecl 0x5611b0f66fb8 <line:37:5, col:44> col:5
| `-EnumConstantDecl 0x5611b0f67118 <col:12, col:42> col:12 STOP_RUNCOUNT 'Router::(anonymous enum at ../dummy_inc/click/router.hh:37:5)'
|   `-ConstantExpr 0x5611b0f670f8 <col:28, col:42> 'int' Int: -2147483648
|     `-BinaryOperator 0x5611b0f670d8 <col:28, col:42> 'int' '-'
|       |-UnaryOperator 0x5611b0f670a0 <col:28, col:29> 'int' prefix '-'
|       | `-IntegerLiteral 0x5611b0f67080 <col:29> 'int' 2147483647
|       `-IntegerLiteral 0x5611b0f670b8 <col:42> 'int' 1
|-CXXMethodDecl 0x5611b0f671b8 <line:38:5, col:31> col:20 runcount 'int32_t () const' inline
|-CXXMethodDecl 0x5611b0f67328 <line:39:5, col:39> col:10 used adjust_runcount 'void (int32_t)'
| `-ParmVarDecl 0x5611b0f67268 <col:26, col:34> col:34 delta 'int32_t':'int'
|-CXXMethodDecl 0x5611b0f67470 <line:40:5, col:33> col:10 set_runcount 'void (int32_t)'
| `-ParmVarDecl 0x5611b0f673e0 <col:23, col:31> col:31 rc 'int32_t':'int'
|-CXXMethodDecl 0x5611b0f67538 <line:41:5, col:36> col:17 please_stop_driver 'void ()' inline
|-CXXMethodDecl 0x5611b0f67700 <line:44:5, col:47> col:36 elements 'const Vector<Element *> &() const' inline
|-CXXMethodDecl 0x5611b0f677c8 <line:45:5, col:28> col:16 nelements 'int () const' inline
|-CXXMethodDecl 0x5611b0f67910 <line:46:5, col:36> col:21 element 'Element *(int) const' inline
| `-ParmVarDecl 0x5611b0f67880 <col:29, col:33> col:33 i 'int'
|-CXXMethodDecl 0x5611b0f679d8 <line:47:5, col:36> col:21 root_element 'Element *() const' inline
|-CXXMethodDecl 0x5611b0f67bd8 <line:48:5, col:56> col:21 used element 'Element *(const Router *, int)' static
| |-ParmVarDecl 0x5611b0f67a88 <col:29, col:43> col:43 router 'const Router *'
| `-ParmVarDecl 0x5611b0f67b08 <col:51, col:55> col:55 i 'int'
|-CXXMethodDecl 0x5611b0f67d30 <line:50:5, col:32> col:19 ename 'const String &(int) const'
| `-ParmVarDecl 0x5611b0f67ca0 <col:25, col:29> col:29 i 'int'
|-CXXMethodDecl 0x5611b0f67e80 <line:51:5, col:33> col:12 ename_context 'String (int) const'
| `-ParmVarDecl 0x5611b0f67df0 <col:26, col:30> col:30 i 'int'
|-CXXMethodDecl 0x5611b0f67fd0 <line:52:5, col:29> col:12 elandmark 'String (int) const'
| `-ParmVarDecl 0x5611b0f67f40 <col:22, col:26> col:26 i 'int'
|-CXXMethodDecl 0x5611b0f68120 <line:53:5, col:41> col:19 econfiguration 'const String &(int) const'
| `-ParmVarDecl 0x5611b0f68090 <col:34, col:38> col:38 i 'int'
|-CXXMethodDecl 0x5611b0f682f0 <line:54:5, col:54> col:10 set_econfiguration 'void (int, const String &)'
| |-ParmVarDecl 0x5611b0f681e0 <col:29, col:33> col:33 i 'int'
| `-ParmVarDecl 0x5611b0f68258 <col:36, col:50> col:50 conf 'const String &'
|-CXXMethodDecl 0x5611b0f684f8 <line:56:5, col:63> col:14 find 'Element *(const String &, ErrorHandler *) const'
| |-ParmVarDecl 0x5611b0f683b0 <col:19, col:33> col:33 name 'const String &'
| `-ParmVarDecl 0x5611b0f68428 <col:39, col:60> col:53 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5611b0fa0240 <col:60> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5611b0fa0220 <col:60> 'int' 0
|-CXXMethodDecl 0x5611b0f68788 <line:57:5, col:79> col:14 used find 'Element *(const String &, String, ErrorHandler *) const'
| |-ParmVarDecl 0x5611b0f685b8 <col:19, col:33> col:33 name 'const String &'
| |-ParmVarDecl 0x5611b0f68630 <col:39, col:46> col:46 context 'String' destroyed
| `-ParmVarDecl 0x5611b0f686a8 <col:55, col:76> col:69 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5611b0fa0278 <col:76> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5611b0fa0258 <col:76> 'int' 0
|-CXXMethodDecl 0x5611b0f68a28 <line:58:5, col:87> col:14 find 'Element *(const String &, const Element *, ErrorHandler *) const'
| |-ParmVarDecl 0x5611b0f68850 <col:19, col:33> col:33 name 'const String &'
| |-ParmVarDecl 0x5611b0f688c8 <col:39, col:54> col:54 context 'const Element *'
| `-ParmVarDecl 0x5611b0f68940 <col:63, col:84> col:77 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5611b0fa02b0 <col:84> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5611b0fa0290 <col:84> 'int' 0
|-CXXMethodDecl 0x5611b0f68d60 <line:60:5, col:76> col:9 used visit 'int (Element *, bool, int, RouterVisitor *) const'
| |-ParmVarDecl 0x5611b0f68af0 <col:15, col:24> col:24 e 'Element *'
| |-ParmVarDecl 0x5611b0f68b68 <col:27, col:32> col:32 isoutput 'bool'
| |-ParmVarDecl 0x5611b0f68be8 <col:42, col:46> col:46 port 'int'
| `-ParmVarDecl 0x5611b0f68c60 <col:52, col:67> col:67 visitor 'RouterVisitor *'
|-CXXMethodDecl 0x5611b0f69010 <line:61:5, col:72> col:9 visit_downstream 'int (Element *, int, RouterVisitor *) const'
| |-ParmVarDecl 0x5611b0f68e30 <col:26, col:35> col:35 e 'Element *'
| |-ParmVarDecl 0x5611b0f68eb0 <col:38, col:42> col:42 port 'int'
| `-ParmVarDecl 0x5611b0f68f28 <col:48, col:63> col:63 visitor 'RouterVisitor *'
|-CXXMethodDecl 0x5611b0f69278 <line:62:5, col:70> col:9 visit_upstream 'int (Element *, int, RouterVisitor *) const'
| |-ParmVarDecl 0x5611b0f690d8 <col:24, col:33> col:33 e 'Element *'
| |-ParmVarDecl 0x5611b0f69158 <col:36, col:40> col:40 port 'int'
| `-ParmVarDecl 0x5611b0f691d0 <col:46, col:61> col:61 visitor 'RouterVisitor *'
|-CXXMethodDecl 0x5611b0f69700 <line:64:5, col:126> col:9 downstream_elements 'int (Element *, int, ElementFilter *, Vector<Element *> &)'
| |-ParmVarDecl 0x5611b0f69340 <col:29, col:38> col:38 e 'Element *'
| |-ParmVarDecl 0x5611b0f693c0 <col:41, col:45> col:45 port 'int'
| |-ParmVarDecl 0x5611b0f69468 <col:51, col:66> col:66 filter 'ElementFilter *'
| |-ParmVarDecl 0x5611b0f695b0 <col:74, col:92> col:92 result 'Vector<Element *> &'
| `-DeprecatedAttr 0x5611b0f697c0 <col:115> "" ""
|-CXXMethodDecl 0x5611b0f69b80 <line:65:5, col:124> col:9 upstream_elements 'int (Element *, int, ElementFilter *, Vector<Element *> &)'
| |-ParmVarDecl 0x5611b0f69840 <col:27, col:36> col:36 e 'Element *'
| |-ParmVarDecl 0x5611b0f698c0 <col:39, col:43> col:43 port 'int'
| |-ParmVarDecl 0x5611b0f69938 <col:49, col:64> col:64 filter 'ElementFilter *'
| |-ParmVarDecl 0x5611b0f69a80 <col:72, col:90> col:90 result 'Vector<Element *> &'
| `-DeprecatedAttr 0x5611b0f69c40 <col:113> "" ""
|-CXXMethodDecl 0x5611b0f69d90 <line:67:5, col:55> col:24 flow_code_override 'const char *(int) const' inline
| `-ParmVarDecl 0x5611b0f69cc8 <col:43, col:47> col:47 eindex 'int'
|-CXXMethodDecl 0x5611b0f69f60 <line:68:5, col:68> col:10 set_flow_code_override 'void (int, const String &)'
| |-ParmVarDecl 0x5611b0f69e50 <col:33, col:37> col:37 eindex 'int'
| `-ParmVarDecl 0x5611b0f69ec8 <col:45, col:59> col:59 flow_code 'const String &'
|-CXXMethodDecl 0x5611b0f6a168 <line:72:5, col:72> col:27 handler 'const Handler *(const Element *, const String &)' static
| |-ParmVarDecl 0x5611b0f6a020 <col:35, col:50> col:50 e 'const Element *'
| `-ParmVarDecl 0x5611b0f6a098 <col:53, col:67> col:67 hname 'const String &'
|-CXXMethodDecl 0x5611b0f6a568 <line:73:5, col:138> col:17 add_read_handler 'void (const Element *, const String &, ReadHandlerCallback, void *, uint32_t)' static
| |-ParmVarDecl 0x5611b0f6a228 <col:34, col:49> col:49 e 'const Element *'
| |-ParmVarDecl 0x5611b0f6a2a0 <col:52, col:66> col:66 hname 'const String &'
| |-ParmVarDecl 0x5611b0f6a318 <col:73, col:93> col:93 callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5611b0f6a398 <col:103, col:109> col:109 user_data 'void *'
| `-ParmVarDecl 0x5611b0f6a410 <col:120, col:137> col:129 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5611b0fa02e8 <col:137> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5611b0fa02c8 <col:137> 'int' 0
|-CXXMethodDecl 0x5611b0f6a978 <line:74:5, col:140> col:17 add_write_handler 'void (const Element *, const String &, WriteHandlerCallback, void *, uint32_t)' static
| |-ParmVarDecl 0x5611b0f6a640 <col:35, col:50> col:50 e 'const Element *'
| |-ParmVarDecl 0x5611b0f6a6b8 <col:53, col:67> col:67 hname 'const String &'
| |-ParmVarDecl 0x5611b0f6a730 <col:74, col:95> col:95 callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5611b0f6a7b0 <col:105, col:111> col:111 user_data 'void *'
| `-ParmVarDecl 0x5611b0f6a828 <col:122, col:139> col:131 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5611b0fa0320 <col:139> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5611b0fa0300 <col:139> 'int' 0
|-CXXMethodDecl 0x5611b0f6ae28 <line:75:5, col:161> col:17 set_handler 'void (const Element *, const String &, uint32_t, HandlerCallback, void *, void *)' static
| |-ParmVarDecl 0x5611b0f6aa50 <col:29, col:44> col:44 e 'const Element *'
| |-ParmVarDecl 0x5611b0f6aac8 <col:47, col:61> col:61 hname 'const String &'
| |-ParmVarDecl 0x5611b0f6ab40 <col:68, col:77> col:77 flags 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5611b0f6abb8 <col:84, col:100> col:100 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5611b0f6ac38 <col:110, col:133> col:116 read_user_data 'void *' cinit
| | `-ImplicitCastExpr 0x5611b0fa0358 <col:133> 'void *' <NullToPointer>
| |   `-IntegerLiteral 0x5611b0fa0338 <col:133> 'int' 0
| `-ParmVarDecl 0x5611b0f6acb8 <col:136, col:160> col:142 write_user_data 'void *' cinit
|   `-ImplicitCastExpr 0x5611b0fa0390 <col:160> 'void *' <NullToPointer>
|     `-IntegerLiteral 0x5611b0fa0370 <col:160> 'int' 0
|-CXXMethodDecl 0x5611b0f6b1c0 <line:76:5, col:117> col:16 set_handler_flags 'int (const Element *, const String &, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5611b0f6af08 <col:34, col:49> col:49 e 'const Element *'
| |-ParmVarDecl 0x5611b0f6af80 <col:52, col:66> col:66 hname 'const String &'
| |-ParmVarDecl 0x5611b0f6aff8 <col:73, col:82> col:82 set_flags 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5611b0f6b070 <col:93, col:116> col:102 clear_flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5611b0fa03c8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5611b0fa03a8 <col:116> 'int' 0
|-EnumDecl 0x5611b0f6b280 <line:78:5, col:46> col:5
| `-EnumConstantDecl 0x5611b0f6b380 <col:12, col:35> col:12 FIRST_GLOBAL_HANDLER 'Router::(anonymous enum at ../dummy_inc/click/router.hh:78:5)'
|   `-ImplicitCastExpr 0x5611b0f6b3d0 <col:35> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0f6b360 <col:35> 'int' Int: 1073741824
|       `-IntegerLiteral 0x5611b0f6b340 <col:35> 'int' 1073741824
|-CXXMethodDecl 0x5611b0f6b550 <line:79:5, col:60> col:16 hindex 'int (const Element *, const String &)' static
| |-ParmVarDecl 0x5611b0f6b3f8 <col:23, col:38> col:38 e 'const Element *'
| `-ParmVarDecl 0x5611b0f6b470 <col:41, col:55> col:55 hname 'const String &'
|-CXXMethodDecl 0x5611b0f6b768 <line:80:5, col:67> col:27 handler 'const Handler *(const Router *, int)' static
| |-ParmVarDecl 0x5611b0f6b610 <col:35, col:49> col:49 router 'const Router *'
| `-ParmVarDecl 0x5611b0f6b690 <col:57, col:61> col:61 hindex 'int'
|-CXXMethodDecl 0x5611b0f6ba98 <line:81:5, col:71> col:17 element_hindexes 'void (const Element *, Vector<int> &)' static
| |-ParmVarDecl 0x5611b0f6b828 <col:34, col:49> col:49 e 'const Element *'
| `-ParmVarDecl 0x5611b0f6b980 <col:52, col:65> col:65 result 'Vector<int> &'
|-CXXMethodDecl 0x5611b0f6bc20 <line:84:5, col:43> col:11 attachment 'void *(const String &) const'
| `-ParmVarDecl 0x5611b0f6bb58 <col:22, col:36> col:36 aname 'const String &'
|-CXXMethodDecl 0x5611b0f6bda0 <line:85:5, col:48> col:12 force_attachment 'void *&(const String &)'
| `-ParmVarDecl 0x5611b0f6bcd8 <col:29, col:43> col:43 aname 'const String &'
|-CXXMethodDecl 0x5611b0f6bfb0 <line:86:5, col:58> col:11 set_attachment 'void *(const String &, void *)'
| |-ParmVarDecl 0x5611b0f6be58 <col:26, col:40> col:40 aname 'const String &'
| `-ParmVarDecl 0x5611b0f6bed8 <col:47, col:53> col:53 value 'void *'
|-CXXMethodDecl 0x5611b0f6c138 <line:88:5, col:63> col:19 chatter_channel 'ErrorHandler *(const String &) const'
| `-ParmVarDecl 0x5611b0f6c070 <col:35, col:49> col:49 channel_name 'const String &'
|-CXXMethodDecl 0x5611b0f6c258 <line:89:5, col:43> col:27 arena_factory 'HashMap_ArenaFactory *() const'
|-CXXMethodDecl 0x5611b0f6c348 <line:91:5, col:40> col:25 thread_sched 'ThreadSched *() const' inline
|-CXXMethodDecl 0x5611b0f6c4b8 <line:92:5, col:56> col:17 set_thread_sched 'void (ThreadSched *)' inline
| `-ParmVarDecl 0x5611b0f6c3f8 <col:34, col:47> col:47 scheduler 'ThreadSched *'
|-CXXMethodDecl 0x5611b0f6c640 <line:93:5, col:49> col:16 home_thread_id 'int (const Element *) const' inline
| `-ParmVarDecl 0x5611b0f6c570 <col:31, col:46> col:46 e 'const Element *'
|-CXXMethodDecl 0x5611b0f6c848 <line:94:5, col:69> col:17 set_home_thread_id 'void (const Element *, int)' inline
| |-ParmVarDecl 0x5611b0f6c6f8 <col:36, col:51> col:51 e 'const Element *'
| `-ParmVarDecl 0x5611b0f6c778 <col:54, col:58> col:58 home_thread 'int'
|-CXXMethodDecl 0x5611b0f6c978 <line:98:5, col:34> col:22 name_info 'NameInfo *() const' inline
|-CXXMethodDecl 0x5611b0f6ca68 <line:99:5, col:31> col:15 force_name_info 'NameInfo *()'
|-CXXMethodDecl 0x5611b0f6cb28 <line:103:5, col:35> col:12 configuration_string 'String () const'
|-CXXMethodDecl 0x5611b0f6cd28 <line:104:5, col:68> col:10 unparse 'void (StringAccum &, const String &) const'
| |-ParmVarDecl 0x5611b0f6cbd8 <col:18, col:31> col:31 sa 'StringAccum &'
| `-ParmVarDecl 0x5611b0f6cc50 <col:35, col:65> col:49 indent 'const String &' cinit
|   `-ExprWithCleanups 0x5611b0fa0478 <col:58, col:65> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5611b0fa0460 <col:58, col:65> 'const String' lvalue
|       `-ImplicitCastExpr 0x5611b0fa0448 <col:58, col:65> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5611b0fa0428 <col:58, col:65> 'String' (CXXTemporary 0x5611b0fa0428)
|           `-CXXTemporaryObjectExpr 0x5611b0fa03f0 <col:58, col:65> 'String' 'void ()'
|-CXXMethodDecl 0x5611b0f6cef8 <line:105:5, col:81> col:10 unparse_requirements 'void (StringAccum &, const String &) const'
| |-ParmVarDecl 0x5611b0f6cde8 <col:31, col:44> col:44 sa 'StringAccum &'
| `-ParmVarDecl 0x5611b0f6ce60 <col:48, col:78> col:62 indent 'const String &' cinit
|   `-ExprWithCleanups 0x5611b0fa0528 <col:71, col:78> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5611b0fa0510 <col:71, col:78> 'const String' lvalue
|       `-ImplicitCastExpr 0x5611b0fa04f8 <col:71, col:78> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5611b0fa04d8 <col:71, col:78> 'String' (CXXTemporary 0x5611b0fa04d8)
|           `-CXXTemporaryObjectExpr 0x5611b0fa04a0 <col:71, col:78> 'String' 'void ()'
|-CXXMethodDecl 0x5611b0f6d0c8 <line:106:5, col:81> col:10 unparse_declarations 'void (StringAccum &, const String &) const'
| |-ParmVarDecl 0x5611b0f6cfb8 <col:31, col:44> col:44 sa 'StringAccum &'
| `-ParmVarDecl 0x5611b0f6d030 <col:48, col:78> col:62 indent 'const String &' cinit
|   `-ExprWithCleanups 0x5611b0fa05d8 <col:71, col:78> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5611b0fa05c0 <col:71, col:78> 'const String' lvalue
|       `-ImplicitCastExpr 0x5611b0fa05a8 <col:71, col:78> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5611b0fa0588 <col:71, col:78> 'String' (CXXTemporary 0x5611b0fa0588)
|           `-CXXTemporaryObjectExpr 0x5611b0fa0550 <col:71, col:78> 'String' 'void ()'
|-CXXMethodDecl 0x5611b0f6d298 <line:107:5, col:80> col:10 unparse_connections 'void (StringAccum &, const String &) const'
| |-ParmVarDecl 0x5611b0f6d188 <col:30, col:43> col:43 sa 'StringAccum &'
| `-ParmVarDecl 0x5611b0f6d200 <col:47, col:77> col:61 indent 'const String &' cinit
|   `-ExprWithCleanups 0x5611b0fa0688 <col:70, col:77> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5611b0fa0670 <col:70, col:77> 'const String' lvalue
|       `-ImplicitCastExpr 0x5611b0fa0658 <col:70, col:77> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5611b0fa0638 <col:70, col:77> 'String' (CXXTemporary 0x5611b0fa0638)
|           `-CXXTemporaryObjectExpr 0x5611b0fa0600 <col:70, col:77> 'String' 'void ()'
|-CXXMethodDecl 0x5611b0f6d418 <line:109:5, col:51> col:12 element_ports_string 'String (const Element *) const'
| `-ParmVarDecl 0x5611b0f6d358 <col:33, col:48> col:48 e 'const Element *'
|-CXXConstructorDecl 0x5611b0f6d638 <line:115:5, col:55> col:5 Router 'void (const String &, Master *)'
| |-ParmVarDecl 0x5611b0f6d4d0 <col:12, col:26> col:26 configuration 'const String &'
| `-ParmVarDecl 0x5611b0f6d548 <col:41, col:49> col:49 master 'Master *'
|-CXXDestructorDecl 0x5611b0f6d738 <line:116:5, col:13> col:5 ~Router 'void ()' noexcept-unevaluated 0x5611b0f6d738
|-CXXMethodDecl 0x5611b0f6d840 <line:118:5, col:35> col:17 static_initialize 'void ()' static
|-CXXMethodDecl 0x5611b0f6d900 <line:119:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5611b0f6d9c0 <line:121:5, col:21> col:17 use 'void ()' inline
|-CXXMethodDecl 0x5611b0f6da80 <line:122:5, col:16> col:10 unuse 'void ()'
|-CXXMethodDecl 0x5611b0f6dc78 <line:124:5, col:65> col:10 add_requirement 'void (const String &, const String &)'
| |-ParmVarDecl 0x5611b0f6db30 <col:26, col:40> col:40 type 'const String &'
| `-ParmVarDecl 0x5611b0f6dba8 <col:46, col:60> col:60 value 'const String &'
|-CXXMethodDecl 0x5611b0f6e030 <line:125:5, col:112> col:9 add_element 'int (Element *, const String &, const String &, const String &, unsigned int)'
| |-ParmVarDecl 0x5611b0f6dd38 <col:21, col:30> col:30 e 'Element *'
| |-ParmVarDecl 0x5611b0f6ddb0 <col:33, col:47> col:47 name 'const String &'
| |-ParmVarDecl 0x5611b0f6de28 <col:53, col:67> col:67 conf 'const String &'
| |-ParmVarDecl 0x5611b0f6dea0 <col:73, col:87> col:87 filename 'const String &'
| `-ParmVarDecl 0x5611b0f6df20 <col:97, col:106> col:106 lineno 'unsigned int'
|-CXXMethodDecl 0x5611b0f6e3b0 <line:126:5, col:76> col:9 add_connection 'int (int, int, int, int)'
| |-ParmVarDecl 0x5611b0f6e110 <col:24, col:28> col:28 from_idx 'int'
| |-ParmVarDecl 0x5611b0f6e190 <col:38, col:42> col:42 from_port 'int'
| |-ParmVarDecl 0x5611b0f6e210 <col:53, col:57> col:57 to_idx 'int'
| `-ParmVarDecl 0x5611b0f6e290 <col:65, col:69> col:69 to_port 'int'
|-CXXMethodDecl 0x5611b0f6e490 <line:131:5, col:37> col:20 hotswap_router 'Router *() const' inline
|-CXXMethodDecl 0x5611b0f6e5d0 <line:132:5, col:43> col:10 set_hotswap_router 'void (Router *)'
| `-ParmVarDecl 0x5611b0f6e540 <col:29, col:37> col:37 router 'Router *'
|-CXXMethodDecl 0x5611b0f6e720 <line:134:5, col:38> col:9 initialize 'int (ErrorHandler *)'
| `-ParmVarDecl 0x5611b0f6e688 <col:20, col:34> col:34 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5611b0f6e928 <line:135:5, col:54> col:10 used activate 'void (bool, ErrorHandler *)'
| |-ParmVarDecl 0x5611b0f6e7d8 <col:19, col:24> col:24 foreground 'bool'
| `-ParmVarDecl 0x5611b0f6e850 <col:36, col:50> col:50 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5611b0f6ea78 <line:136:5, col:44> col:17 activate 'void (ErrorHandler *)' inline
| `-ParmVarDecl 0x5611b0f6e9e8 <col:26, col:40> col:40 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5611b0f6ebc0 <line:137:5, col:47> col:17 set_foreground 'void (bool)' inline
| `-ParmVarDecl 0x5611b0f6eb30 <col:32, col:37> col:37 foreground 'bool'
|-CXXMethodDecl 0x5611b0f6ee00 <line:139:5, col:69> col:9 new_notifier_signal 'int (const char *, NotifierSignal &)'
| |-ParmVarDecl 0x5611b0f6ec80 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5611b0f6ed28 <col:47, col:63> col:63 signal 'NotifierSignal &'
|-CXXMethodDecl 0x5611b0f6ef88 <line:140:5, col:64> col:12 notifier_signal_name 'String (const atomic_uint32_t *) const'
| `-ParmVarDecl 0x5611b0f6eec0 <col:33, col:56> col:56 signal 'const atomic_uint32_t *'
|-CXXRecordDecl 0x5611b0f6f030 <line:145:5, line:167:5> line:145:12 referenced struct Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5611b0f6f148 <col:5, col:12> col:12 implicit referenced struct Port
| |-FieldDecl 0x5611b0f6f1f0 <line:146:9, col:13> col:13 referenced idx 'int'
| |-FieldDecl 0x5611b0f6f258 <line:147:9, col:13> col:13 referenced port 'int'
| |-CXXConstructorDecl 0x5611b0f6f310 <line:149:9, line:150:9> line:149:9 used Port 'void ()'
| | `-CompoundStmt 0x5611b0fa06b0 <col:16, line:150:9>
| |-CXXConstructorDecl 0x5611b0f6f4e8 <line:151:9, line:153:9> line:151:9 used Port 'void (int, int)'
| | |-ParmVarDecl 0x5611b0f6f3d0 <col:14, col:18> col:18 used i 'int'
| | |-ParmVarDecl 0x5611b0f6f450 <col:21, col:25> col:25 used p 'int'
| | |-CXXCtorInitializer Field 0x5611b0f6f1f0 'idx' 'int'
| | | `-ImplicitCastExpr 0x5611b0fa0700 <line:152:19> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x5611b0fa06c0 <col:19> 'int' lvalue ParmVar 0x5611b0f6f3d0 'i' 'int'
| | |-CXXCtorInitializer Field 0x5611b0f6f258 'port' 'int'
| | | `-ImplicitCastExpr 0x5611b0fa0780 <col:28> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x5611b0fa0740 <col:28> 'int' lvalue ParmVar 0x5611b0f6f450 'p' 'int'
| | `-CompoundStmt 0x5611b0fa07d0 <col:31, line:153:9>
| |-CXXMethodDecl 0x5611b0f6f6c8 <line:155:9, line:157:9> line:155:14 used operator== 'bool (const Router::Port &) const'
| | |-ParmVarDecl 0x5611b0f6f5d8 <col:25, col:37> col:37 used x 'const Router::Port &'
| | `-CompoundStmt 0x5611b0fa09d0 <col:46, line:157:9>
| |   `-ReturnStmt 0x5611b0fa09c0 <line:156:13, col:46>
| |     `-BinaryOperator 0x5611b0fa09a0 <col:20, col:46> 'bool' '&&'
| |       |-BinaryOperator 0x5611b0fa08a0 <col:20, col:29> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5611b0fa0870 <col:20> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5611b0fa07f0 <col:20> 'const int' lvalue ->idx 0x5611b0f6f1f0
| |       | |   `-CXXThisExpr 0x5611b0fa07e0 <col:20> 'const Router::Port *' implicit this
| |       | `-ImplicitCastExpr 0x5611b0fa0888 <col:27, col:29> 'int' <LValueToRValue>
| |       |   `-MemberExpr 0x5611b0fa0840 <col:27, col:29> 'const int' lvalue .idx 0x5611b0f6f1f0
| |       |     `-DeclRefExpr 0x5611b0fa0820 <col:27> 'const Router::Port' lvalue ParmVar 0x5611b0f6f5d8 'x' 'const Router::Port &'
| |       `-BinaryOperator 0x5611b0fa0980 <col:36, col:46> 'bool' '=='
| |         |-ImplicitCastExpr 0x5611b0fa0950 <col:36> 'int' <LValueToRValue>
| |         | `-MemberExpr 0x5611b0fa08d0 <col:36> 'const int' lvalue ->port 0x5611b0f6f258
| |         |   `-CXXThisExpr 0x5611b0fa08c0 <col:36> 'const Router::Port *' implicit this
| |         `-ImplicitCastExpr 0x5611b0fa0968 <col:44, col:46> 'int' <LValueToRValue>
| |           `-MemberExpr 0x5611b0fa0920 <col:44, col:46> 'const int' lvalue .port 0x5611b0f6f258
| |             `-DeclRefExpr 0x5611b0fa0900 <col:44> 'const Router::Port' lvalue ParmVar 0x5611b0f6f5d8 'x' 'const Router::Port &'
| |-CXXMethodDecl 0x5611b0f6f810 <line:158:9, line:160:9> line:158:14 operator!= 'bool (const Router::Port &) const'
| | |-ParmVarDecl 0x5611b0f6f780 <col:25, col:37> col:37 used x 'const Router::Port &'
| | `-CompoundStmt 0x5611b0fa0bd8 <col:46, line:160:9>
| |   `-ReturnStmt 0x5611b0fa0bc8 <line:159:13, col:46>
| |     `-BinaryOperator 0x5611b0fa0ba8 <col:20, col:46> 'bool' '||'
| |       |-BinaryOperator 0x5611b0fa0aa8 <col:20, col:29> 'bool' '!='
| |       | |-ImplicitCastExpr 0x5611b0fa0a78 <col:20> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5611b0fa09f8 <col:20> 'const int' lvalue ->idx 0x5611b0f6f1f0
| |       | |   `-CXXThisExpr 0x5611b0fa09e8 <col:20> 'const Router::Port *' implicit this
| |       | `-ImplicitCastExpr 0x5611b0fa0a90 <col:27, col:29> 'int' <LValueToRValue>
| |       |   `-MemberExpr 0x5611b0fa0a48 <col:27, col:29> 'const int' lvalue .idx 0x5611b0f6f1f0
| |       |     `-DeclRefExpr 0x5611b0fa0a28 <col:27> 'const Router::Port' lvalue ParmVar 0x5611b0f6f780 'x' 'const Router::Port &'
| |       `-BinaryOperator 0x5611b0fa0b88 <col:36, col:46> 'bool' '!='
| |         |-ImplicitCastExpr 0x5611b0fa0b58 <col:36> 'int' <LValueToRValue>
| |         | `-MemberExpr 0x5611b0fa0ad8 <col:36> 'const int' lvalue ->port 0x5611b0f6f258
| |         |   `-CXXThisExpr 0x5611b0fa0ac8 <col:36> 'const Router::Port *' implicit this
| |         `-ImplicitCastExpr 0x5611b0fa0b70 <col:44, col:46> 'int' <LValueToRValue>
| |           `-MemberExpr 0x5611b0fa0b28 <col:44, col:46> 'const int' lvalue .port 0x5611b0f6f258
| |             `-DeclRefExpr 0x5611b0fa0b08 <col:44> 'const Router::Port' lvalue ParmVar 0x5611b0f6f780 'x' 'const Router::Port &'
| |-CXXMethodDecl 0x5611b0f6f958 <line:161:9, line:163:9> line:161:14 used operator< 'bool (const Router::Port &) const'
| | |-ParmVarDecl 0x5611b0f6f8c8 <col:24, col:36> col:36 used x 'const Router::Port &'
| | `-CompoundStmt 0x5611b0fa0f00 <col:45, line:163:9>
| |   `-ReturnStmt 0x5611b0fa0ef0 <line:162:13, col:65>
| |     `-BinaryOperator 0x5611b0fa0ed0 <col:20, col:65> 'bool' '||'
| |       |-BinaryOperator 0x5611b0fa0cb0 <col:20, col:28> 'bool' '<'
| |       | |-ImplicitCastExpr 0x5611b0fa0c80 <col:20> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5611b0fa0c00 <col:20> 'const int' lvalue ->idx 0x5611b0f6f1f0
| |       | |   `-CXXThisExpr 0x5611b0fa0bf0 <col:20> 'const Router::Port *' implicit this
| |       | `-ImplicitCastExpr 0x5611b0fa0c98 <col:26, col:28> 'int' <LValueToRValue>
| |       |   `-MemberExpr 0x5611b0fa0c50 <col:26, col:28> 'const int' lvalue .idx 0x5611b0f6f1f0
| |       |     `-DeclRefExpr 0x5611b0fa0c30 <col:26> 'const Router::Port' lvalue ParmVar 0x5611b0f6f8c8 'x' 'const Router::Port &'
| |       `-ParenExpr 0x5611b0fa0eb0 <col:35, col:65> 'bool'
| |         `-BinaryOperator 0x5611b0fa0e90 <col:36, col:61> 'bool' '&&'
| |           |-BinaryOperator 0x5611b0fa0d90 <col:36, col:45> 'bool' '=='
| |           | |-ImplicitCastExpr 0x5611b0fa0d60 <col:36> 'int' <LValueToRValue>
| |           | | `-MemberExpr 0x5611b0fa0ce0 <col:36> 'const int' lvalue ->idx 0x5611b0f6f1f0
| |           | |   `-CXXThisExpr 0x5611b0fa0cd0 <col:36> 'const Router::Port *' implicit this
| |           | `-ImplicitCastExpr 0x5611b0fa0d78 <col:43, col:45> 'int' <LValueToRValue>
| |           |   `-MemberExpr 0x5611b0fa0d30 <col:43, col:45> 'const int' lvalue .idx 0x5611b0f6f1f0
| |           |     `-DeclRefExpr 0x5611b0fa0d10 <col:43> 'const Router::Port' lvalue ParmVar 0x5611b0f6f8c8 'x' 'const Router::Port &'
| |           `-BinaryOperator 0x5611b0fa0e70 <col:52, col:61> 'bool' '<'
| |             |-ImplicitCastExpr 0x5611b0fa0e40 <col:52> 'int' <LValueToRValue>
| |             | `-MemberExpr 0x5611b0fa0dc0 <col:52> 'const int' lvalue ->port 0x5611b0f6f258
| |             |   `-CXXThisExpr 0x5611b0fa0db0 <col:52> 'const Router::Port *' implicit this
| |             `-ImplicitCastExpr 0x5611b0fa0e58 <col:59, col:61> 'int' <LValueToRValue>
| |               `-MemberExpr 0x5611b0fa0e10 <col:59, col:61> 'const int' lvalue .port 0x5611b0f6f258
| |                 `-DeclRefExpr 0x5611b0fa0df0 <col:59> 'const Router::Port' lvalue ParmVar 0x5611b0f6f8c8 'x' 'const Router::Port &'
| |-CXXMethodDecl 0x5611b0f6faa0 <line:164:9, line:166:9> line:164:14 operator<= 'bool (const Router::Port &) const'
| | |-ParmVarDecl 0x5611b0f6fa10 <col:25, col:37> col:37 used x 'const Router::Port &'
| | `-CompoundStmt 0x5611b0fa1228 <col:46, line:166:9>
| |   `-ReturnStmt 0x5611b0fa1218 <line:165:13, col:66>
| |     `-BinaryOperator 0x5611b0fa11f8 <col:20, col:66> 'bool' '||'
| |       |-BinaryOperator 0x5611b0fa0fd8 <col:20, col:28> 'bool' '<'
| |       | |-ImplicitCastExpr 0x5611b0fa0fa8 <col:20> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5611b0fa0f28 <col:20> 'const int' lvalue ->idx 0x5611b0f6f1f0
| |       | |   `-CXXThisExpr 0x5611b0fa0f18 <col:20> 'const Router::Port *' implicit this
| |       | `-ImplicitCastExpr 0x5611b0fa0fc0 <col:26, col:28> 'int' <LValueToRValue>
| |       |   `-MemberExpr 0x5611b0fa0f78 <col:26, col:28> 'const int' lvalue .idx 0x5611b0f6f1f0
| |       |     `-DeclRefExpr 0x5611b0fa0f58 <col:26> 'const Router::Port' lvalue ParmVar 0x5611b0f6fa10 'x' 'const Router::Port &'
| |       `-ParenExpr 0x5611b0fa11d8 <col:35, col:66> 'bool'
| |         `-BinaryOperator 0x5611b0fa11b8 <col:36, col:62> 'bool' '&&'
| |           |-BinaryOperator 0x5611b0fa10b8 <col:36, col:45> 'bool' '=='
| |           | |-ImplicitCastExpr 0x5611b0fa1088 <col:36> 'int' <LValueToRValue>
| |           | | `-MemberExpr 0x5611b0fa1008 <col:36> 'const int' lvalue ->idx 0x5611b0f6f1f0
| |           | |   `-CXXThisExpr 0x5611b0fa0ff8 <col:36> 'const Router::Port *' implicit this
| |           | `-ImplicitCastExpr 0x5611b0fa10a0 <col:43, col:45> 'int' <LValueToRValue>
| |           |   `-MemberExpr 0x5611b0fa1058 <col:43, col:45> 'const int' lvalue .idx 0x5611b0f6f1f0
| |           |     `-DeclRefExpr 0x5611b0fa1038 <col:43> 'const Router::Port' lvalue ParmVar 0x5611b0f6fa10 'x' 'const Router::Port &'
| |           `-BinaryOperator 0x5611b0fa1198 <col:52, col:62> 'bool' '<='
| |             |-ImplicitCastExpr 0x5611b0fa1168 <col:52> 'int' <LValueToRValue>
| |             | `-MemberExpr 0x5611b0fa10e8 <col:52> 'const int' lvalue ->port 0x5611b0f6f258
| |             |   `-CXXThisExpr 0x5611b0fa10d8 <col:52> 'const Router::Port *' implicit this
| |             `-ImplicitCastExpr 0x5611b0fa1180 <col:60, col:62> 'int' <LValueToRValue>
| |               `-MemberExpr 0x5611b0fa1138 <col:60, col:62> 'const int' lvalue .port 0x5611b0f6f258
| |                 `-DeclRefExpr 0x5611b0fa1118 <col:60> 'const Router::Port' lvalue ParmVar 0x5611b0f6fa10 'x' 'const Router::Port &'
| |-CXXConstructorDecl 0x5611b0fa1240 <line:145:12> col:12 implicit constexpr Port 'void (const Router::Port &)' inline default trivial noexcept-unevaluated 0x5611b0fa1240
| | `-ParmVarDecl 0x5611b0fa1358 <col:12> col:12 'const Router::Port &'
| |-CXXConstructorDecl 0x5611b0fa13f8 <col:12> col:12 implicit constexpr Port 'void (Router::Port &&)' inline default trivial noexcept-unevaluated 0x5611b0fa13f8
| | `-ParmVarDecl 0x5611b0fa1508 <col:12> col:12 'Router::Port &&'
| |-CXXDestructorDecl 0x5611b0fa15a0 <col:12> col:12 implicit referenced ~Port 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5611b0fa1870 <col:12> col:12 implicit operator= 'Router::Port &(const Router::Port &)' inline default trivial noexcept-unevaluated 0x5611b0fa1870
| | `-ParmVarDecl 0x5611b0fa1978 <col:12> col:12 'const Router::Port &'
| `-CXXMethodDecl 0x5611b0fa19e8 <col:12> col:12 implicit used operator= 'Router::Port &(Router::Port &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x5611b0fa1af8 <col:12> col:12 used 'Router::Port &&'
|   `-CompoundStmt 0x5611b0fa1e18 <col:12>
|     |-BinaryOperator 0x5611b0fa1cb8 <col:12> 'int' lvalue '='
|     | |-MemberExpr 0x5611b0fa1c70 <col:12> 'int' lvalue ->idx 0x5611b0f6f1f0
|     | | `-CXXThisExpr 0x5611b0fa1c60 <col:12> 'Router::Port *' this
|     | `-ImplicitCastExpr 0x5611b0fa1ca0 <col:12> 'int' <LValueToRValue>
|     |   `-MemberExpr 0x5611b0fa1c30 <col:12> 'int' xvalue .idx 0x5611b0f6f1f0
|     |     `-CXXStaticCastExpr 0x5611b0fa1c00 <col:12> 'Router::Port' xvalue static_cast<struct Router::Port &&> <NoOp>
|     |       `-DeclRefExpr 0x5611b0fa1bd0 <col:12> 'Router::Port' lvalue ParmVar 0x5611b0fa1af8 '' 'Router::Port &&'
|     |-BinaryOperator 0x5611b0fa1dc0 <col:12> 'int' lvalue '='
|     | |-MemberExpr 0x5611b0fa1d78 <col:12> 'int' lvalue ->port 0x5611b0f6f258
|     | | `-CXXThisExpr 0x5611b0fa1d68 <col:12> 'Router::Port *' this
|     | `-ImplicitCastExpr 0x5611b0fa1da8 <col:12> 'int' <LValueToRValue>
|     |   `-MemberExpr 0x5611b0fa1d38 <col:12> 'int' xvalue .port 0x5611b0f6f258
|     |     `-CXXStaticCastExpr 0x5611b0fa1d08 <col:12> 'Router::Port' xvalue static_cast<struct Router::Port &&> <NoOp>
|     |       `-DeclRefExpr 0x5611b0fa1cd8 <col:12> 'Router::Port' lvalue ParmVar 0x5611b0fa1af8 '' 'Router::Port &&'
|     `-ReturnStmt 0x5611b0fa1e08 <col:12>
|       `-UnaryOperator 0x5611b0fa1df0 <col:12> 'Router::Port' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5611b0fa1de0 <col:12> 'Router::Port *' this
|-CXXRecordDecl 0x5611b0f6fb60 <line:169:5, line:194:5> line:169:12 referenced struct Connection definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5611b0f6fc78 <col:5, col:12> col:12 implicit referenced struct Connection
| |-FieldDecl 0x5611b0f6fe68 <line:170:9, col:17> col:14 referenced p 'Router::Port [2]'
| |-CXXConstructorDecl 0x5611b0f6ff20 <line:172:9, line:173:9> line:172:9 Connection 'void ()'
| | |-CXXCtorInitializer Field 0x5611b0f6fe68 'p' 'Router::Port [2]'
| | | `-CXXConstructExpr 0x5611b0fa1578 <col:9> 'Router::Port [2]' 'void ()'
| | `-CompoundStmt 0x5611b0fa16b0 <col:22, line:173:9>
| |-CXXConstructorDecl 0x5611b0f70258 <line:174:9, line:177:9> line:174:9 Connection 'void (int, int, int, int)'
| | |-ParmVarDecl 0x5611b0f6ffe0 <col:20, col:24> col:24 used from_idx 'int'
| | |-ParmVarDecl 0x5611b0f70060 <col:34, col:38> col:38 used from_port 'int'
| | |-ParmVarDecl 0x5611b0f700e0 <col:49, col:53> col:53 used to_idx 'int'
| | |-ParmVarDecl 0x5611b0f70160 <col:61, col:65> col:65 used to_port 'int'
| | |-CXXCtorInitializer Field 0x5611b0f6fe68 'p' 'Router::Port [2]'
| | | `-CXXConstructExpr 0x5611b0fa16c0 <col:9> 'Router::Port [2]' 'void ()'
| | `-CompoundStmt 0x5611b0fa20f8 <col:74, line:177:9>
| |   |-ExprWithCleanups 0x5611b0fa1ee8 <line:175:13, col:40> 'Router::Port' lvalue
| |   | `-CXXOperatorCallExpr 0x5611b0fa1eb0 <col:13, col:40> 'Router::Port' lvalue
| |   |   |-ImplicitCastExpr 0x5611b0fa1e98 <col:18> 'Router::Port &(*)(Router::Port &&) noexcept' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x5611b0fa1b80 <col:18> 'Router::Port &(Router::Port &&) noexcept' lvalue CXXMethod 0x5611b0fa19e8 'operator=' 'Router::Port &(Router::Port &&) noexcept'
| |   |   |-ArraySubscriptExpr 0x5611b0fa1790 <col:13, col:16> 'Router::Port' lvalue
| |   |   | |-ImplicitCastExpr 0x5611b0fa1778 <col:13> 'Router::Port *' <ArrayToPointerDecay>
| |   |   | | `-MemberExpr 0x5611b0fa1728 <col:13> 'Router::Port [2]' lvalue ->p 0x5611b0f6fe68
| |   |   | |   `-CXXThisExpr 0x5611b0fa1718 <col:13> 'Router::Connection *' implicit this
| |   |   | `-IntegerLiteral 0x5611b0fa1758 <col:15> 'int' 0
| |   |   `-MaterializeTemporaryExpr 0x5611b0fa1b68 <col:20, col:40> 'Router::Port' xvalue
| |   |     `-CXXTemporaryObjectExpr 0x5611b0fa1830 <col:20, col:40> 'Router::Port' 'void (int, int)'
| |   |       |-ImplicitCastExpr 0x5611b0fa1800 <col:25> 'int' <LValueToRValue>
| |   |       | `-DeclRefExpr 0x5611b0fa17c0 <col:25> 'int' lvalue ParmVar 0x5611b0f700e0 'to_idx' 'int'
| |   |       `-ImplicitCastExpr 0x5611b0fa1818 <col:33> 'int' <LValueToRValue>
| |   |         `-DeclRefExpr 0x5611b0fa17e0 <col:33> 'int' lvalue ParmVar 0x5611b0f70160 'to_port' 'int'
| |   `-ExprWithCleanups 0x5611b0fa20e0 <line:176:13, col:44> 'Router::Port' lvalue
| |     `-CXXOperatorCallExpr 0x5611b0fa20a8 <col:13, col:44> 'Router::Port' lvalue
| |       |-ImplicitCastExpr 0x5611b0fa2090 <col:18> 'Router::Port &(*)(Router::Port &&) noexcept' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5611b0fa2070 <col:18> 'Router::Port &(Router::Port &&) noexcept' lvalue CXXMethod 0x5611b0fa19e8 'operator=' 'Router::Port &(Router::Port &&) noexcept'
| |       |-ArraySubscriptExpr 0x5611b0fa1f78 <col:13, col:16> 'Router::Port' lvalue
| |       | |-ImplicitCastExpr 0x5611b0fa1f60 <col:13> 'Router::Port *' <ArrayToPointerDecay>
| |       | | `-MemberExpr 0x5611b0fa1f10 <col:13> 'Router::Port [2]' lvalue ->p 0x5611b0f6fe68
| |       | |   `-CXXThisExpr 0x5611b0fa1f00 <col:13> 'Router::Connection *' implicit this
| |       | `-IntegerLiteral 0x5611b0fa1f40 <col:15> 'int' 1
| |       `-MaterializeTemporaryExpr 0x5611b0fa2058 <col:20, col:44> 'Router::Port' xvalue
| |         `-CXXTemporaryObjectExpr 0x5611b0fa2018 <col:20, col:44> 'Router::Port' 'void (int, int)'
| |           |-ImplicitCastExpr 0x5611b0fa1fe8 <col:25> 'int' <LValueToRValue>
| |           | `-DeclRefExpr 0x5611b0fa1fa8 <col:25> 'int' lvalue ParmVar 0x5611b0f6ffe0 'from_idx' 'int'
| |           `-ImplicitCastExpr 0x5611b0fa2000 <col:35> 'int' <LValueToRValue>
| |             `-DeclRefExpr 0x5611b0fa1fc8 <col:35> 'int' lvalue ParmVar 0x5611b0f70060 'from_port' 'int'
| |-CXXMethodDecl 0x5611b0f70428 <line:179:9, line:182:9> line:179:21 operator[] 'const Router::Port &(int) const'
| | |-ParmVarDecl 0x5611b0f70338 <col:32, col:36> col:36 used i 'int'
| | `-CompoundStmt 0x5611b0fa26b8 <col:45, line:182:9>
| |   |-ParenExpr 0x5611b0fa2598 <line:180:13, col:169> 'void'
| |   | `-ConditionalOperator 0x5611b0fa2568 <col:14, col:168> 'void'
| |   |   |-CXXStaticCastExpr 0x5611b0fa2238 <col:14, col:49> 'bool' static_cast<_Bool> <NoOp>
| |   |   | `-BinaryOperator 0x5611b0fa2208 <col:34, col:48> 'bool' '&&'
| |   |   |   |-BinaryOperator 0x5611b0fa2170 <col:34, col:39> 'bool' '>='
| |   |   |   | |-ImplicitCastExpr 0x5611b0fa2158 <col:34> 'int' <LValueToRValue>
| |   |   |   | | `-DeclRefExpr 0x5611b0fa2118 <col:34> 'int' lvalue ParmVar 0x5611b0f70338 'i' 'int'
| |   |   |   | `-IntegerLiteral 0x5611b0fa2138 <col:39> 'int' 0
| |   |   |   `-BinaryOperator 0x5611b0fa21e8 <col:44, col:48> 'bool' '<'
| |   |   |     |-ImplicitCastExpr 0x5611b0fa21d0 <col:44> 'int' <LValueToRValue>
| |   |   |     | `-DeclRefExpr 0x5611b0fa2190 <col:44> 'int' lvalue ParmVar 0x5611b0f70338 'i' 'int'
| |   |   |     `-IntegerLiteral 0x5611b0fa21b0 <col:48> 'int' 2
| |   |   |-CXXFunctionalCastExpr 0x5611b0fa2298 <col:53, col:60> 'void' functional cast to void <ToVoid>
| |   |   | `-IntegerLiteral 0x5611b0fa2278 <col:59> 'int' 0
| |   |   `-CallExpr 0x5611b0fa24c8 <col:64, col:168> 'void'
| |   |     |-ImplicitCastExpr 0x5611b0fa24b0 <col:64> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 0x5611b0fa2490 <col:64> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5611b08f6fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
| |   |     |-ImplicitCastExpr 0x5611b0fa2508 <col:79> 'const char *' <ArrayToPointerDecay>
| |   |     | `-StringLiteral 0x5611b0fa2308 <col:79> 'const char [16]' lvalue "i >= 0 && i < 2"
| |   |     |-ImplicitCastExpr 0x5611b0fa2520 <col:98> 'const char *' <ArrayToPointerDecay>
| |   |     | `-StringLiteral 0x5611b0fa2330 <col:98> 'const char [29]' lvalue "../dummy_inc/click/router.hh"
| |   |     |-ImplicitCastExpr 0x5611b0fa2538 <col:130> 'unsigned int' <IntegralCast>
| |   |     | `-IntegerLiteral 0x5611b0fa2368 <col:130> 'int' 180
| |   |     `-ImplicitCastExpr 0x5611b0fa2550 <col:135, col:149> 'const char *' <ArrayToPointerDecay>
| |   |       `-UnaryOperator 0x5611b0fa2478 <col:135, col:149> 'const char [62]' lvalue prefix '__extension__' cannot overflow
| |   |         `-PredefinedExpr 0x5611b0fa2460 <col:149> 'const char [62]' lvalue __PRETTY_FUNCTION__
| |   |           `-StringLiteral 0x5611b0fa2408 <col:149> 'const char [62]' lvalue "const Router::Port &Router::Connection::operator[](int) const"
| |   `-ReturnStmt 0x5611b0fa26a8 <line:181:13, col:23>
| |     `-ArraySubscriptExpr 0x5611b0fa2688 <col:20, col:23> 'const Router::Port' lvalue
| |       |-ImplicitCastExpr 0x5611b0fa2658 <col:20> 'const Router::Port *' <ArrayToPointerDecay>
| |       | `-MemberExpr 0x5611b0fa25c8 <col:20> 'Router::Port const[2]' lvalue ->p 0x5611b0f6fe68
| |       |   `-CXXThisExpr 0x5611b0fa25b8 <col:20> 'const Router::Connection *' implicit this
| |       `-ImplicitCastExpr 0x5611b0fa2670 <col:22> 'int' <LValueToRValue>
| |         `-DeclRefExpr 0x5611b0fa25f8 <col:22> 'int' lvalue ParmVar 0x5611b0f70338 'i' 'int'
| |-CXXMethodDecl 0x5611b0f705d8 <line:183:9, line:186:9> line:183:15 operator[] 'Router::Port &(int)'
| | |-ParmVarDecl 0x5611b0f704e8 <col:26, col:30> col:30 used i 'int'
| | `-CompoundStmt 0x5611b0fa2c30 <col:33, line:186:9>
| |   |-ParenExpr 0x5611b0fa2b50 <line:184:13, col:169> 'void'
| |   | `-ConditionalOperator 0x5611b0fa2b20 <col:14, col:168> 'void'
| |   |   |-CXXStaticCastExpr 0x5611b0fa27f8 <col:14, col:49> 'bool' static_cast<_Bool> <NoOp>
| |   |   | `-BinaryOperator 0x5611b0fa27c8 <col:34, col:48> 'bool' '&&'
| |   |   |   |-BinaryOperator 0x5611b0fa2730 <col:34, col:39> 'bool' '>='
| |   |   |   | |-ImplicitCastExpr 0x5611b0fa2718 <col:34> 'int' <LValueToRValue>
| |   |   |   | | `-DeclRefExpr 0x5611b0fa26d8 <col:34> 'int' lvalue ParmVar 0x5611b0f704e8 'i' 'int'
| |   |   |   | `-IntegerLiteral 0x5611b0fa26f8 <col:39> 'int' 0
| |   |   |   `-BinaryOperator 0x5611b0fa27a8 <col:44, col:48> 'bool' '<'
| |   |   |     |-ImplicitCastExpr 0x5611b0fa2790 <col:44> 'int' <LValueToRValue>
| |   |   |     | `-DeclRefExpr 0x5611b0fa2750 <col:44> 'int' lvalue ParmVar 0x5611b0f704e8 'i' 'int'
| |   |   |     `-IntegerLiteral 0x5611b0fa2770 <col:48> 'int' 2
| |   |   |-CXXFunctionalCastExpr 0x5611b0fa2858 <col:53, col:60> 'void' functional cast to void <ToVoid>
| |   |   | `-IntegerLiteral 0x5611b0fa2838 <col:59> 'int' 0
| |   |   `-CallExpr 0x5611b0fa2a80 <col:64, col:168> 'void'
| |   |     |-ImplicitCastExpr 0x5611b0fa2a68 <col:64> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 0x5611b0fa2a48 <col:64> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5611b08f6fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
| |   |     |-ImplicitCastExpr 0x5611b0fa2ac0 <col:79> 'const char *' <ArrayToPointerDecay>
| |   |     | `-StringLiteral 0x5611b0fa28c8 <col:79> 'const char [16]' lvalue "i >= 0 && i < 2"
| |   |     |-ImplicitCastExpr 0x5611b0fa2ad8 <col:98> 'const char *' <ArrayToPointerDecay>
| |   |     | `-StringLiteral 0x5611b0fa28f0 <col:98> 'const char [29]' lvalue "../dummy_inc/click/router.hh"
| |   |     |-ImplicitCastExpr 0x5611b0fa2af0 <col:130> 'unsigned int' <IntegralCast>
| |   |     | `-IntegerLiteral 0x5611b0fa2928 <col:130> 'int' 184
| |   |     `-ImplicitCastExpr 0x5611b0fa2b08 <col:135, col:149> 'const char *' <ArrayToPointerDecay>
| |   |       `-UnaryOperator 0x5611b0fa2a30 <col:135, col:149> 'const char [50]' lvalue prefix '__extension__' cannot overflow
| |   |         `-PredefinedExpr 0x5611b0fa2a18 <col:149> 'const char [50]' lvalue __PRETTY_FUNCTION__
| |   |           `-StringLiteral 0x5611b0fa29c8 <col:149> 'const char [50]' lvalue "Router::Port &Router::Connection::operator[](int)"
| |   `-ReturnStmt 0x5611b0fa2c20 <line:185:13, col:23>
| |     `-ArraySubscriptExpr 0x5611b0fa2c00 <col:20, col:23> 'Router::Port' lvalue
| |       |-ImplicitCastExpr 0x5611b0fa2bd0 <col:20> 'Router::Port *' <ArrayToPointerDecay>
| |       | `-MemberExpr 0x5611b0fa2b80 <col:20> 'Router::Port [2]' lvalue ->p 0x5611b0f6fe68
| |       |   `-CXXThisExpr 0x5611b0fa2b70 <col:20> 'Router::Connection *' implicit this
| |       `-ImplicitCastExpr 0x5611b0fa2be8 <col:22> 'int' <LValueToRValue>
| |         `-DeclRefExpr 0x5611b0fa2bb0 <col:22> 'int' lvalue ParmVar 0x5611b0f704e8 'i' 'int'
| |-CXXMethodDecl 0x5611b0f70778 <line:188:9, line:190:9> line:188:14 operator== 'bool (const Router::Connection &) const'
| | |-ParmVarDecl 0x5611b0f706b8 <col:25, col:43> col:43 used x 'const Router::Connection &'
| | `-CompoundStmt 0x5611b0fa3008 <col:52, line:190:9>
| |   `-ReturnStmt 0x5611b0fa2ff8 <line:189:13, col:51>
| |     `-BinaryOperator 0x5611b0fa2fd8 <col:20, col:51> 'bool' '&&'
| |       |-CXXOperatorCallExpr 0x5611b0fa2df0 <col:20, col:33> 'bool'
| |       | |-ImplicitCastExpr 0x5611b0fa2dd8 <col:25> 'bool (*)(const Router::Port &) const' <FunctionToPointerDecay>
| |       | | `-DeclRefExpr 0x5611b0fa2d90 <col:25> 'bool (const Router::Port &) const' lvalue CXXMethod 0x5611b0f6f6c8 'operator==' 'bool (const Router::Port &) const'
| |       | |-ArraySubscriptExpr 0x5611b0fa2cc8 <col:20, col:23> 'const Router::Port' lvalue
| |       | | |-ImplicitCastExpr 0x5611b0fa2cb0 <col:20> 'const Router::Port *' <ArrayToPointerDecay>
| |       | | | `-MemberExpr 0x5611b0fa2c60 <col:20> 'Router::Port const[2]' lvalue ->p 0x5611b0f6fe68
| |       | | |   `-CXXThisExpr 0x5611b0fa2c50 <col:20> 'const Router::Connection *' implicit this
| |       | | `-IntegerLiteral 0x5611b0fa2c90 <col:22> 'int' 0
| |       | `-ArraySubscriptExpr 0x5611b0fa2d70 <col:28, col:33> 'const Router::Port' lvalue
| |       |   |-ImplicitCastExpr 0x5611b0fa2d58 <col:28, col:30> 'const Router::Port *' <ArrayToPointerDecay>
| |       |   | `-MemberExpr 0x5611b0fa2d08 <col:28, col:30> 'Router::Port const[2]' lvalue .p 0x5611b0f6fe68
| |       |   |   `-DeclRefExpr 0x5611b0fa2ce8 <col:28> 'const Router::Connection' lvalue ParmVar 0x5611b0f706b8 'x' 'const Router::Connection &'
| |       |   `-IntegerLiteral 0x5611b0fa2d38 <col:32> 'int' 0
| |       `-CXXOperatorCallExpr 0x5611b0fa2fa0 <col:38, col:51> 'bool'
| |         |-ImplicitCastExpr 0x5611b0fa2f88 <col:43> 'bool (*)(const Router::Port &) const' <FunctionToPointerDecay>
| |         | `-DeclRefExpr 0x5611b0fa2f68 <col:43> 'bool (const Router::Port &) const' lvalue CXXMethod 0x5611b0f6f6c8 'operator==' 'bool (const Router::Port &) const'
| |         |-ArraySubscriptExpr 0x5611b0fa2ea0 <col:38, col:41> 'const Router::Port' lvalue
| |         | |-ImplicitCastExpr 0x5611b0fa2e88 <col:38> 'const Router::Port *' <ArrayToPointerDecay>
| |         | | `-MemberExpr 0x5611b0fa2e38 <col:38> 'Router::Port const[2]' lvalue ->p 0x5611b0f6fe68
| |         | |   `-CXXThisExpr 0x5611b0fa2e28 <col:38> 'const Router::Connection *' implicit this
| |         | `-IntegerLiteral 0x5611b0fa2e68 <col:40> 'int' 1
| |         `-ArraySubscriptExpr 0x5611b0fa2f48 <col:46, col:51> 'const Router::Port' lvalue
| |           |-ImplicitCastExpr 0x5611b0fa2f30 <col:46, col:48> 'const Router::Port *' <ArrayToPointerDecay>
| |           | `-MemberExpr 0x5611b0fa2ee0 <col:46, col:48> 'Router::Port const[2]' lvalue .p 0x5611b0f6fe68
| |           |   `-DeclRefExpr 0x5611b0fa2ec0 <col:46> 'const Router::Connection' lvalue ParmVar 0x5611b0f706b8 'x' 'const Router::Connection &'
| |           `-IntegerLiteral 0x5611b0fa2f10 <col:50> 'int' 1
| `-CXXMethodDecl 0x5611b0f708c0 <line:191:9, line:193:9> line:191:14 operator< 'bool (const Router::Connection &) const'
|   |-ParmVarDecl 0x5611b0f70830 <col:24, col:42> col:42 used x 'const Router::Connection &'
|   `-CompoundStmt 0x5611b0fa35a0 <col:51, line:193:9>
|     `-ReturnStmt 0x5611b0fa3590 <line:192:13, col:69>
|       `-BinaryOperator 0x5611b0fa3570 <col:20, col:69> 'bool' '||'
|         |-CXXOperatorCallExpr 0x5611b0fa3198 <col:20, col:32> 'bool'
|         | |-ImplicitCastExpr 0x5611b0fa3180 <col:25> 'bool (*)(const Router::Port &) const' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x5611b0fa3160 <col:25> 'bool (const Router::Port &) const' lvalue CXXMethod 0x5611b0f6f958 'operator<' 'bool (const Router::Port &) const'
|         | |-ArraySubscriptExpr 0x5611b0fa3098 <col:20, col:23> 'const Router::Port' lvalue
|         | | |-ImplicitCastExpr 0x5611b0fa3080 <col:20> 'const Router::Port *' <ArrayToPointerDecay>
|         | | | `-MemberExpr 0x5611b0fa3030 <col:20> 'Router::Port const[2]' lvalue ->p 0x5611b0f6fe68
|         | | |   `-CXXThisExpr 0x5611b0fa3020 <col:20> 'const Router::Connection *' implicit this
|         | | `-IntegerLiteral 0x5611b0fa3060 <col:22> 'int' 0
|         | `-ArraySubscriptExpr 0x5611b0fa3140 <col:27, col:32> 'const Router::Port' lvalue
|         |   |-ImplicitCastExpr 0x5611b0fa3128 <col:27, col:29> 'const Router::Port *' <ArrayToPointerDecay>
|         |   | `-MemberExpr 0x5611b0fa30d8 <col:27, col:29> 'Router::Port const[2]' lvalue .p 0x5611b0f6fe68
|         |   |   `-DeclRefExpr 0x5611b0fa30b8 <col:27> 'const Router::Connection' lvalue ParmVar 0x5611b0f70830 'x' 'const Router::Connection &'
|         |   `-IntegerLiteral 0x5611b0fa3108 <col:31> 'int' 0
|         `-ParenExpr 0x5611b0fa3550 <col:37, col:69> 'bool'
|           `-BinaryOperator 0x5611b0fa3530 <col:38, col:68> 'bool' '&&'
|             |-CXXOperatorCallExpr 0x5611b0fa3348 <col:38, col:51> 'bool'
|             | |-ImplicitCastExpr 0x5611b0fa3330 <col:43> 'bool (*)(const Router::Port &) const' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x5611b0fa3310 <col:43> 'bool (const Router::Port &) const' lvalue CXXMethod 0x5611b0f6f6c8 'operator==' 'bool (const Router::Port &) const'
|             | |-ArraySubscriptExpr 0x5611b0fa3248 <col:38, col:41> 'const Router::Port' lvalue
|             | | |-ImplicitCastExpr 0x5611b0fa3230 <col:38> 'const Router::Port *' <ArrayToPointerDecay>
|             | | | `-MemberExpr 0x5611b0fa31e0 <col:38> 'Router::Port const[2]' lvalue ->p 0x5611b0f6fe68
|             | | |   `-CXXThisExpr 0x5611b0fa31d0 <col:38> 'const Router::Connection *' implicit this
|             | | `-IntegerLiteral 0x5611b0fa3210 <col:40> 'int' 0
|             | `-ArraySubscriptExpr 0x5611b0fa32f0 <col:46, col:51> 'const Router::Port' lvalue
|             |   |-ImplicitCastExpr 0x5611b0fa32d8 <col:46, col:48> 'const Router::Port *' <ArrayToPointerDecay>
|             |   | `-MemberExpr 0x5611b0fa3288 <col:46, col:48> 'Router::Port const[2]' lvalue .p 0x5611b0f6fe68
|             |   |   `-DeclRefExpr 0x5611b0fa3268 <col:46> 'const Router::Connection' lvalue ParmVar 0x5611b0f70830 'x' 'const Router::Connection &'
|             |   `-IntegerLiteral 0x5611b0fa32b8 <col:50> 'int' 0
|             `-CXXOperatorCallExpr 0x5611b0fa34f8 <col:56, col:68> 'bool'
|               |-ImplicitCastExpr 0x5611b0fa34e0 <col:61> 'bool (*)(const Router::Port &) const' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5611b0fa34c0 <col:61> 'bool (const Router::Port &) const' lvalue CXXMethod 0x5611b0f6f958 'operator<' 'bool (const Router::Port &) const'
|               |-ArraySubscriptExpr 0x5611b0fa33f8 <col:56, col:59> 'const Router::Port' lvalue
|               | |-ImplicitCastExpr 0x5611b0fa33e0 <col:56> 'const Router::Port *' <ArrayToPointerDecay>
|               | | `-MemberExpr 0x5611b0fa3390 <col:56> 'Router::Port const[2]' lvalue ->p 0x5611b0f6fe68
|               | |   `-CXXThisExpr 0x5611b0fa3380 <col:56> 'const Router::Connection *' implicit this
|               | `-IntegerLiteral 0x5611b0fa33c0 <col:58> 'int' 1
|               `-ArraySubscriptExpr 0x5611b0fa34a0 <col:63, col:68> 'const Router::Port' lvalue
|                 |-ImplicitCastExpr 0x5611b0fa3488 <col:63, col:65> 'const Router::Port *' <ArrayToPointerDecay>
|                 | `-MemberExpr 0x5611b0fa3438 <col:63, col:65> 'Router::Port const[2]' lvalue .p 0x5611b0f6fe68
|                 |   `-DeclRefExpr 0x5611b0fa3418 <col:63> 'const Router::Connection' lvalue ParmVar 0x5611b0f70830 'x' 'const Router::Connection &'
|                 `-IntegerLiteral 0x5611b0fa3468 <col:67> 'int' 1
|-AccessSpecDecl 0x5611b0f70980 <line:216:3, col:10> col:3 private
|-CXXRecordDecl 0x5611b0f709a8 <line:218:5, col:11> col:11 class RouterContextErrh
|-EnumDecl 0x5611b0f70a60 <line:220:5, line:223:5> line:220:5
| |-EnumConstantDecl 0x5611b0f70b20 <line:221:9> col:9 ROUTER_NEW 'Router::(anonymous enum at ../dummy_inc/click/router.hh:220:5)'
| |-EnumConstantDecl 0x5611b0f70b70 <col:21> col:21 referenced ROUTER_PRECONFIGURE 'Router::(anonymous enum at ../dummy_inc/click/router.hh:220:5)'
| |-EnumConstantDecl 0x5611b0f70bc0 <col:42> col:42 ROUTER_PREINITIALIZE 'Router::(anonymous enum at ../dummy_inc/click/router.hh:220:5)'
| |-EnumConstantDecl 0x5611b0f70c10 <line:222:9> col:9 referenced ROUTER_LIVE 'Router::(anonymous enum at ../dummy_inc/click/router.hh:220:5)'
| `-EnumConstantDecl 0x5611b0f70c60 <col:22> col:22 ROUTER_DEAD 'Router::(anonymous enum at ../dummy_inc/click/router.hh:220:5)'
|-EnumDecl 0x5611b0f70cb0 <line:224:5, line:227:5> line:224:5
| |-EnumConstantDecl 0x5611b0f70dc8 <line:225:9, col:25> col:9 referenced RUNNING_DEAD 'Router::(anonymous enum at ../dummy_inc/click/router.hh:224:5)'
| | `-ConstantExpr 0x5611b0f70da8 <col:24, col:25> 'int' Int: -2
| |   `-UnaryOperator 0x5611b0f70d90 <col:24, col:25> 'int' prefix '-'
| |     `-IntegerLiteral 0x5611b0f70d70 <col:25> 'int' 2
| |-EnumConstantDecl 0x5611b0f70e70 <col:28, col:48> col:28 RUNNING_INACTIVE 'Router::(anonymous enum at ../dummy_inc/click/router.hh:224:5)'
| | `-ConstantExpr 0x5611b0f70e50 <col:47, col:48> 'int' Int: -1
| |   `-UnaryOperator 0x5611b0f70e38 <col:47, col:48> 'int' prefix '-'
| |     `-IntegerLiteral 0x5611b0f70e18 <col:48> 'int' 1
| |-EnumConstantDecl 0x5611b0f70f00 <col:51, col:71> col:51 RUNNING_PREPARING 'Router::(anonymous enum at ../dummy_inc/click/router.hh:224:5)'
| | `-ConstantExpr 0x5611b0f70ee0 <col:71> 'int' Int: 0
| |   `-IntegerLiteral 0x5611b0f70ec0 <col:71> 'int' 0
| |-EnumConstantDecl 0x5611b0f70f90 <line:226:9, col:30> col:9 referenced RUNNING_BACKGROUND 'Router::(anonymous enum at ../dummy_inc/click/router.hh:224:5)'
| | `-ConstantExpr 0x5611b0f70f70 <col:30> 'int' Int: 1
| |   `-IntegerLiteral 0x5611b0f70f50 <col:30> 'int' 1
| `-EnumConstantDecl 0x5611b0f71020 <col:33, col:50> col:33 referenced RUNNING_ACTIVE 'Router::(anonymous enum at ../dummy_inc/click/router.hh:224:5)'
|   `-ConstantExpr 0x5611b0f71000 <col:50> 'int' Int: 2
|     `-IntegerLiteral 0x5611b0f70fe0 <col:50> 'int' 2
|-FieldDecl 0x5611b0f71080 <line:229:5, col:13> col:13 referenced _master 'Master *'
|-FieldDecl 0x5611b0f710e0 <line:231:5, col:21> col:21 referenced _runcount 'atomic_uint32_t'
|-FieldDecl 0x5611b0f71148 <line:233:5, col:18> col:18 referenced _state 'volatile int'
|-FieldDecl 0x5611b0f711e8 <line:234:5, col:30> col:10 _have_connections 'bool'
| `-ConstantExpr 0x5611b0f711c8 <col:30> 'int' Int: 1
|   `-IntegerLiteral 0x5611b0f71198 <col:30> 'int' 1
|-FieldDecl 0x5611b0f71288 <line:235:5, col:33> col:18 _conn_sorted 'bool' mutable
| `-ConstantExpr 0x5611b0f71268 <col:33> 'int' Int: 1
|   `-IntegerLiteral 0x5611b0f71238 <col:33> 'int' 1
|-FieldDecl 0x5611b0f71328 <line:236:5, col:32> col:10 _have_configuration 'bool'
| `-ConstantExpr 0x5611b0f71308 <col:32> 'int' Int: 1
|   `-IntegerLiteral 0x5611b0f712d8 <col:32> 'int' 1
|-FieldDecl 0x5611b0f71390 <line:237:5, col:18> col:18 referenced _running 'volatile int'
|-FieldDecl 0x5611b0f713f0 <line:239:5, col:21> col:21 referenced _refcount 'atomic_uint32_t'
|-FieldDecl 0x5611b0f714f0 <line:241:5, col:23> col:23 referenced _elements 'Vector<Element *>':'Vector<Element *>'
|-FieldDecl 0x5611b0f715f0 <line:242:5, col:20> col:20 _element_names 'Vector<String>':'Vector<String>'
|-FieldDecl 0x5611b0f716f0 <line:243:5, col:20> col:20 _element_configurations 'Vector<String>':'Vector<String>'
|-FieldDecl 0x5611b0f78ae0 <line:244:5, col:22> col:22 _element_landmarkids 'Vector<uint32_t>':'Vector<unsigned int>'
|-FieldDecl 0x5611b0f78bf0 <line:245:5, col:25> col:25 referenced _element_home_thread_ids 'Vector<int>':'Vector<int>' mutable
|-CXXRecordDecl 0x5611b0f78c40 <line:247:5, line:250:5> line:247:12 referenced struct element_landmark_t definition
| |-DefinitionData aggregate standard_layout has_mutable_fields
| | |-DefaultConstructor exists non_trivial needs_implicit
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-CXXRecordDecl 0x5611b0f78d58 <col:5, col:12> col:12 implicit struct element_landmark_t
| |-FieldDecl 0x5611b0f78df8 <line:248:9, col:18> col:18 first_landmarkid 'uint32_t':'unsigned int'
| |-FieldDecl 0x5611b0f78e58 <line:249:9, col:16> col:16 filename 'String'
| |-CXXConstructorDecl 0x5611b0f78ef0 <line:247:12> col:12 implicit element_landmark_t 'void (const Router::element_landmark_t &)' inline default noexcept-unevaluated 0x5611b0f78ef0
| | `-ParmVarDecl 0x5611b0f79008 <col:12> col:12 'const Router::element_landmark_t &'
| |-CXXConstructorDecl 0x5611b0f790a8 <col:12> col:12 implicit element_landmark_t 'void (Router::element_landmark_t &&)' inline default noexcept-unevaluated 0x5611b0f790a8
| | `-ParmVarDecl 0x5611b0f791b8 <col:12> col:12 'Router::element_landmark_t &&'
| |-CXXMethodDecl 0x5611b0f79258 <col:12> col:12 implicit operator= 'Router::element_landmark_t &(const Router::element_landmark_t &)' inline default noexcept-unevaluated 0x5611b0f79258
| | `-ParmVarDecl 0x5611b0f79368 <col:12> col:12 'const Router::element_landmark_t &'
| |-CXXMethodDecl 0x5611b0f793d8 <col:12> col:12 implicit operator= 'Router::element_landmark_t &(Router::element_landmark_t &&)' inline default noexcept-unevaluated 0x5611b0f793d8
| | `-ParmVarDecl 0x5611b0f794e8 <col:12> col:12 'Router::element_landmark_t &&'
| `-CXXDestructorDecl 0x5611b0f79570 <col:12> col:12 implicit ~element_landmark_t 'void ()' inline default noexcept-unevaluated 0x5611b0f79570
|-FieldDecl 0x5611b0f86240 <line:251:5, col:32> col:32 _element_landmarks 'Vector<Router::element_landmark_t>':'Vector<Router::element_landmark_t>'
|-FieldDecl 0x5611b0f862a0 <line:252:5, col:14> col:14 _last_landmarkid 'uint32_t':'unsigned int'
|-FieldDecl 0x5611b0f863b0 <line:254:5, col:25> col:25 _element_name_sorter 'Vector<int>':'Vector<int>' mutable
|-FieldDecl 0x5611b0f86708 <line:255:5, col:40> col:17 referenced _element_gport_offset 'Vector<int> [2]'
|-FieldDecl 0x5611b0f86810 <line:256:5, col:17> col:17 _element_configure_order 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5611b0f8ec20 <line:258:5, col:32> col:32 _conn 'Vector<Router::Connection>':'Vector<Router::Connection>' mutable
|-FieldDecl 0x5611b0f8ed30 <line:259:5, col:25> col:25 _conn_output_sorter 'Vector<int>':'Vector<int>' mutable
|-FieldDecl 0x5611b0f8ee30 <line:261:5, col:20> col:20 _requirements 'Vector<String>':'Vector<String>'
|-FieldDecl 0x5611b0f8ef40 <line:263:5, col:17> col:17 _ehandler_first_by_element 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5611b0f8f050 <line:264:5, col:17> col:17 _ehandler_to_handler 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5611b0f8f160 <line:265:5, col:17> col:17 _ehandler_next 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5611b0f8f270 <line:267:5, col:17> col:17 _handler_first_by_name 'Vector<int>':'Vector<int>'
|-EnumDecl 0x5611b0f8f2c0 <line:269:5, col:33> col:5
| `-EnumConstantDecl 0x5611b0f8f3c0 <col:12, col:29> col:12 HANDLER_BUFSIZ 'Router::(anonymous enum at ../dummy_inc/click/router.hh:269:5)'
|   `-ImplicitCastExpr 0x5611b0f8f410 <col:29> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0f8f3a0 <col:29> 'int' Int: 256
|       `-IntegerLiteral 0x5611b0f8f380 <col:29> 'int' 256
|-FieldDecl 0x5611b0f8f470 <line:270:5, col:15> col:15 _handler_bufs 'Handler **'
|-FieldDecl 0x5611b0f8f4d8 <line:271:5, col:9> col:9 _nhandlers_bufs 'int'
|-FieldDecl 0x5611b0f8f540 <line:272:5, col:9> col:9 _free_handler 'int'
|-FieldDecl 0x5611b0f8f640 <line:274:5, col:20> col:20 _attachment_names 'Vector<String>':'Vector<String>'
|-FieldDecl 0x5611b0f97db0 <line:275:5, col:19> col:19 _attachments 'Vector<void *>':'Vector<void *>'
|-FieldDecl 0x5611b0f97e10 <line:277:5, col:14> col:14 referenced _root_element 'Element *'
|-FieldDecl 0x5611b0f97e70 <line:278:5, col:12> col:12 _configuration 'String'
|-CXXRecordDecl 0x5611b0f97ec0 <line:280:5, line:290:5> line:280:12 referenced struct notifier_signals_t definition
| |-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-CXXRecordDecl 0x5611b0f97fd8 <col:5, col:12> col:12 implicit referenced struct notifier_signals_t
| |-EnumDecl 0x5611b0f98068 <line:281:9, col:32> col:9
| | `-EnumConstantDecl 0x5611b0f98170 <col:16, col:27> col:16 referenced capacity 'Router::notifier_signals_t::(anonymous enum at ../dummy_inc/click/router.hh:281:9)'
| |   `-ImplicitCastExpr 0x5611b0f981c0 <col:27> 'unsigned int' <IntegralCast>
| |     `-ConstantExpr 0x5611b0f98150 <col:27> 'int' Int: 4096
| |       `-IntegerLiteral 0x5611b0f98130 <col:27> 'int' 4096
| |-FieldDecl 0x5611b0f981e8 <line:282:9, col:16> col:16 name 'String'
| |-FieldDecl 0x5611b0f98250 <line:283:9, col:13> col:13 nsig 'int'
| |-FieldDecl 0x5611b0f98448 <line:284:9, col:42> col:25 referenced sig 'atomic_uint32_t [128]'
| |-FieldDecl 0x5611b0f984d8 <line:285:9, col:29> col:29 next 'Router::notifier_signals_t *'
| |-CXXConstructorDecl 0x5611b0f98698 <line:286:9, line:289:9> line:286:9 notifier_signals_t 'void (const String &, Router::notifier_signals_t *)'
| | |-ParmVarDecl 0x5611b0f98538 <col:28, col:42> col:42 used n 'const String &'
| | |-ParmVarDecl 0x5611b0f985b0 <col:45, col:65> col:65 used nx 'Router::notifier_signals_t *'
| | |-CXXCtorInitializer Field 0x5611b0f981e8 'name' 'String'
| | | `-CXXConstructExpr 0x5611b0fa35f8 <line:287:15, col:21> 'String' 'void (const String &)'
| | |   `-DeclRefExpr 0x5611b0fa35b8 <col:20> 'const String' lvalue ParmVar 0x5611b0f98538 'n' 'const String &'
| | |-CXXCtorInitializer Field 0x5611b0f98250 'nsig' 'int'
| | | `-IntegerLiteral 0x5611b0fa3650 <col:29> 'int' 0
| | |-CXXCtorInitializer Field 0x5611b0f98448 'sig' 'atomic_uint32_t [128]'
| | | `-CXXConstructExpr 0x5611b0fa3738 <line:286:9> 'atomic_uint32_t [128]' 'void () noexcept'
| | |-CXXCtorInitializer Field 0x5611b0f984d8 'next' 'Router::notifier_signals_t *'
| | | `-ImplicitCastExpr 0x5611b0fa36f8 <line:287:38> 'Router::notifier_signals_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5611b0fa36b8 <col:38> 'Router::notifier_signals_t *' lvalue ParmVar 0x5611b0f985b0 'nx' 'Router::notifier_signals_t *'
| | `-CompoundStmt 0x5611b0fa39c8 <col:42, line:289:9>
| |   `-CallExpr 0x5611b0fa3978 <line:288:13, col:43> 'void *'
| |     |-ImplicitCastExpr 0x5611b0fa3960 <col:13> 'void *(*)(void *, int, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5611b0fa3940 <col:13> 'void *(void *, int, size_t) throw()' lvalue Function 0x5611b0ae7868 'memset' 'void *(void *, int, size_t) throw()'
| |     |-ImplicitCastExpr 0x5611b0fa39b0 <col:20, col:26> 'void *' <BitCast>
| |     | `-UnaryOperator 0x5611b0fa3888 <col:20, col:26> 'atomic_uint32_t *' prefix '&' cannot overflow
| |     |   `-ArraySubscriptExpr 0x5611b0fa3868 <col:21, col:26> 'atomic_uint32_t' lvalue
| |     |     |-ImplicitCastExpr 0x5611b0fa3850 <col:21> 'atomic_uint32_t *' <ArrayToPointerDecay>
| |     |     | `-MemberExpr 0x5611b0fa3800 <col:21> 'atomic_uint32_t [128]' lvalue ->sig 0x5611b0f98448
| |     |     |   `-CXXThisExpr 0x5611b0fa37f0 <col:21> 'Router::notifier_signals_t *' implicit this
| |     |     `-IntegerLiteral 0x5611b0fa3830 <col:25> 'int' 0
| |     |-IntegerLiteral 0x5611b0fa38a0 <col:29> 'int' 0
| |     `-UnaryExprOrTypeTraitExpr 0x5611b0fa3920 <col:32, col:42> 'unsigned long' sizeof
| |       `-ParenExpr 0x5611b0fa3900 <col:38, col:42> 'atomic_uint32_t [128]' lvalue
| |         `-MemberExpr 0x5611b0fa38d0 <col:39> 'atomic_uint32_t [128]' lvalue ->sig 0x5611b0f98448 non_odr_use_unevaluated
| |           `-CXXThisExpr 0x5611b0fa38c0 <col:39> 'Router::notifier_signals_t *' implicit this
| |-CXXConstructorDecl 0x5611b0f98778 <line:280:12> col:12 implicit notifier_signals_t 'void (const Router::notifier_signals_t &)' inline default noexcept-unevaluated 0x5611b0f98778
| | `-ParmVarDecl 0x5611b0f98888 <col:12> col:12 'const Router::notifier_signals_t &'
| |-CXXConstructorDecl 0x5611b0f98928 <col:12> col:12 implicit notifier_signals_t 'void (Router::notifier_signals_t &&)' inline default noexcept-unevaluated 0x5611b0f98928
| | `-ParmVarDecl 0x5611b0f98a38 <col:12> col:12 'Router::notifier_signals_t &&'
| |-CXXMethodDecl 0x5611b0f98ad8 <col:12> col:12 implicit operator= 'Router::notifier_signals_t &(const Router::notifier_signals_t &)' inline default noexcept-unevaluated 0x5611b0f98ad8
| | `-ParmVarDecl 0x5611b0f98be8 <col:12> col:12 'const Router::notifier_signals_t &'
| |-CXXMethodDecl 0x5611b0f98c58 <col:12> col:12 implicit operator= 'Router::notifier_signals_t &(Router::notifier_signals_t &&)' inline default noexcept-unevaluated 0x5611b0f98c58
| | `-ParmVarDecl 0x5611b0f98d68 <col:12> col:12 'Router::notifier_signals_t &&'
| `-CXXDestructorDecl 0x5611b0f98df0 <col:12> col:12 implicit ~notifier_signals_t 'void ()' inline default noexcept-unevaluated 0x5611b0f98df0
|-FieldDecl 0x5611b0f98ee0 <line:291:5, col:25> col:25 _notifier_signals 'Router::notifier_signals_t *'
|-FieldDecl 0x5611b0f98f40 <line:292:5, col:27> col:27 referenced _arena_factory 'HashMap_ArenaFactory *'
|-FieldDecl 0x5611b0f98fa0 <line:293:5, col:13> col:13 referenced _hotswap_router 'Router *'
|-FieldDecl 0x5611b0f99000 <line:294:5, col:18> col:18 referenced _thread_sched 'ThreadSched *'
|-FieldDecl 0x5611b0f99060 <line:295:5, col:23> col:23 referenced _name_info 'NameInfo *' mutable
|-FieldDecl 0x5611b0f99170 <line:296:5, col:17> col:17 _flow_code_override_eindex 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5611b0f99270 <line:297:5, col:20> col:20 referenced _flow_code_override 'Vector<String>':'Vector<String>'
|-FieldDecl 0x5611b0f992d0 <line:299:5, col:13> col:13 _next_router 'Router *'
|-CXXConstructorDecl 0x5611b0f99418 <line:305:5, col:25> col:5 Router 'void (const Router &)'
| `-ParmVarDecl 0x5611b0f99358 <col:12, col:24> col:25 'const Router &'
|-CXXMethodDecl 0x5611b0f995c8 <line:306:5, col:36> col:13 operator= 'Router &(const Router &)'
| `-ParmVarDecl 0x5611b0f994d8 <col:23, col:35> col:36 'const Router &'
|-CXXMethodDecl 0x5611b0f99710 <line:308:5, col:49> col:17 remove_connection 'Router::Connection *(Router::Connection *)'
| `-ParmVarDecl 0x5611b0f99680 <col:35, col:47> col:47 cp 'Router::Connection *'
|-CXXMethodDecl 0x5611b0f99ab8 <line:309:5, line:310:62> line:309:10 hookup_error 'void (const Router::Port &, bool, const char *, ErrorHandler *, bool)'
| |-ParmVarDecl 0x5611b0f997c8 <col:23, col:35> col:35 p 'const Router::Port &'
| |-ParmVarDecl 0x5611b0f99840 <col:38, col:43> col:43 isoutput 'bool'
| |-ParmVarDecl 0x5611b0f998c0 <col:53, col:65> col:65 message 'const char *'
| |-ParmVarDecl 0x5611b0f99938 <line:310:23, col:37> col:37 errh 'ErrorHandler *'
| `-ParmVarDecl 0x5611b0f999b0 <col:43, col:57> col:48 active 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5611b0fa06a0 <col:57> 'bool' false
|-CXXMethodDecl 0x5611b0f99c28 <line:311:5, col:44> col:9 check_hookup_elements 'int (ErrorHandler *)'
| `-ParmVarDecl 0x5611b0f99b90 <col:31, col:43> col:44 'ErrorHandler *'
|-CXXMethodDecl 0x5611b0f99d78 <line:312:5, col:41> col:9 check_hookup_range 'int (ErrorHandler *)'
| `-ParmVarDecl 0x5611b0f99ce0 <col:28, col:40> col:41 'ErrorHandler *'
|-CXXMethodDecl 0x5611b0f99ec8 <line:313:5, col:48> col:9 check_hookup_completeness 'int (ErrorHandler *)'
| `-ParmVarDecl 0x5611b0f99e30 <col:35, col:47> col:48 'ErrorHandler *'
|-CXXMethodDecl 0x5611b0f9a020 <line:315:5, col:48> col:17 used hard_flow_code_override 'const char *(int) const'
| `-ParmVarDecl 0x5611b0f99f88 <col:41, col:45> col:45 e 'int'
|-CXXMethodDecl 0x5611b0f9a340 <line:316:5, col:74> col:9 processing_error 'int (const Router::Connection &, bool, int, ErrorHandler *)'
| |-ParmVarDecl 0x5611b0f9a0d8 <col:26, col:44> col:44 conn 'const Router::Connection &'
| |-ParmVarDecl 0x5611b0f9a150 <col:50> col:54 'bool'
| |-ParmVarDecl 0x5611b0f9a1d0 <col:56> col:59 'int'
| `-ParmVarDecl 0x5611b0f9a248 <col:61, col:73> col:74 'ErrorHandler *'
|-CXXMethodDecl 0x5611b0f9a4a8 <line:317:5, col:42> col:9 check_push_and_pull 'int (ErrorHandler *)'
| `-ParmVarDecl 0x5611b0f9a410 <col:29, col:41> col:42 'ErrorHandler *'
|-CXXMethodDecl 0x5611b0f9a570 <line:319:5, col:26> col:10 set_connections 'void ()'
|-CXXMethodDecl 0x5611b0f9a630 <line:320:5, col:29> col:10 sort_connections 'void () const'
|-CXXMethodDecl 0x5611b0f9a830 <line:321:5, col:64> col:9 connindex_lower_bound 'int (bool, const Router::Port &) const'
| |-ParmVarDecl 0x5611b0f9a6e0 <col:31, col:36> col:36 isoutput 'bool'
| `-ParmVarDecl 0x5611b0f9a758 <col:46, col:58> col:58 port 'const Router::Port &'
|-CXXMethodDecl 0x5611b0f9a900 <line:323:5, col:22> col:10 make_gports 'void ()'
|-CXXMethodDecl 0x5611b0f9aa48 <line:324:5, line:326:5> line:324:16 ngports 'int (bool) const' inline
| |-ParmVarDecl 0x5611b0f9a9b0 <col:24, col:29> col:29 used isout 'bool'
| `-CompoundStmt 0x5611b0fa3c00 <col:42, line:326:5>
|   `-ReturnStmt 0x5611b0fa3bf0 <line:325:9, col:50>
|     `-ImplicitCastExpr 0x5611b0fa3bd8 <col:16, col:50> 'int':'int' <LValueToRValue>
|       `-CXXMemberCallExpr 0x5611b0fa3bb8 <col:16, col:50> 'const int':'const int' lvalue
|         `-MemberExpr 0x5611b0fa3b88 <col:16, col:45> '<bound member function type>' .back 0x5611b0df0a08
|           `-ArraySubscriptExpr 0x5611b0fa3b08 <col:16, col:43> 'const Vector<int>':'const Vector<int>' lvalue
|             |-ImplicitCastExpr 0x5611b0fa3ad8 <col:16> 'const Vector<int> *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5611b0fa39f0 <col:16> 'Vector<int> const[2]' lvalue ->_element_gport_offset 0x5611b0f86708
|             |   `-CXXThisExpr 0x5611b0fa39e0 <col:16> 'const Router *' implicit this
|             `-ImplicitCastExpr 0x5611b0fa3af0 <col:38> 'bool' <LValueToRValue>
|               `-DeclRefExpr 0x5611b0fa3a20 <col:38> 'bool' lvalue ParmVar 0x5611b0f9a9b0 'isout' 'bool'
|-CXXMethodDecl 0x5611b0f9ac18 <line:327:5, col:55> col:16 gport 'int (bool, const Router::Port &) const' inline
| |-ParmVarDecl 0x5611b0f9ab00 <col:22, col:27> col:27 isoutput 'bool'
| `-ParmVarDecl 0x5611b0f9ab78 <col:37, col:49> col:49 port 'const Router::Port &'
|-CXXMethodDecl 0x5611b0f9ad70 <line:329:5, col:47> col:9 used hard_home_thread_id 'int (const Element *) const'
| `-ParmVarDecl 0x5611b0f9acd8 <col:29, col:44> col:44 e 'const Element *'
|-CXXMethodDecl 0x5611b0f9b018 <line:331:5, col:67> col:9 element_lerror 'int (ErrorHandler *, Element *, const char *, ...) const'
| |-ParmVarDecl 0x5611b0f9ae28 <col:24, col:36> col:37 'ErrorHandler *'
| |-ParmVarDecl 0x5611b0f9aea0 <col:39, col:46> col:47 'Element *'
| `-ParmVarDecl 0x5611b0f9af20 <col:49, col:59> col:60 'const char *'
|-CXXMethodDecl 0x5611b0f9b1f0 <line:334:5, col:40> col:10 initialize_handlers 'void (bool, bool)'
| |-ParmVarDecl 0x5611b0f9b0e0 <col:30> col:34 'bool'
| `-ParmVarDecl 0x5611b0f9b158 <col:36> col:40 'bool'
|-CXXMethodDecl 0x5611b0f9b378 <line:335:5, col:35> col:21 xhandler 'Handler *(int) const' inline
| `-ParmVarDecl 0x5611b0f9b2b8 <col:30> col:33 'int'
|-CXXMethodDecl 0x5611b0f9f1c0 <line:336:5, col:60> col:9 find_ehandler 'int (int, const String &, bool) const'
| |-ParmVarDecl 0x5611b0f9efe8 <col:23> col:26 'int'
| |-ParmVarDecl 0x5611b0f9f060 <col:28, col:40> col:41 'const String &'
| `-ParmVarDecl 0x5611b0f9f0d8 <col:43, col:48> col:48 allow_star 'bool'
|-CXXMethodDecl 0x5611b0f9f3d8 <line:337:5, col:70> col:27 fetch_handler 'Handler (const Element *, const String &)' static inline
| |-ParmVarDecl 0x5611b0f9f288 <col:41, col:54> col:55 'const Element *'
| `-ParmVarDecl 0x5611b0f9f300 <col:57, col:69> col:70 'const String &'
|-CXXMethodDecl 0x5611b0f9f5e8 <line:338:5, col:52> col:10 store_local_handler 'void (int, Handler &)'
| |-ParmVarDecl 0x5611b0f9f4a0 <col:30, col:34> col:34 eindex 'int'
| `-ParmVarDecl 0x5611b0f9f518 <col:42, col:51> col:51 h 'Handler &'
|-CXXMethodDecl 0x5611b0f9f768 <line:339:5, col:48> col:17 store_global_handler 'void (Handler &)' static
| `-ParmVarDecl 0x5611b0f9f6a8 <col:38, col:47> col:47 h 'Handler &'
|-CXXMethodDecl 0x5611b0f9f968 <line:340:5, col:72> col:24 store_handler 'void (const Element *, Handler &)' static inline
| |-ParmVarDecl 0x5611b0f9f820 <col:38, col:53> col:53 element 'const Element *'
| `-ParmVarDecl 0x5611b0f9f898 <col:62, col:71> col:71 h 'Handler &'
|-CXXMethodDecl 0x5611b0f9fb40 <line:343:5, col:66> col:19 router_read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5611b0f9fa28 <col:39, col:48> col:48 e 'Element *'
| `-ParmVarDecl 0x5611b0f9faa8 <col:51, col:57> col:57 user_data 'void *'
|-CXXMethodDecl 0x5611b0f9fe20 <line:344:5, col:103> col:16 router_write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5611b0f9fc00 <col:37, col:51> col:51 str 'const String &'
| |-ParmVarDecl 0x5611b0f9fc78 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x5611b0f9fcf8 <col:68, col:74> col:74 user_data 'void *'
| `-ParmVarDecl 0x5611b0f9fd70 <col:85, col:99> col:99 errh 'ErrorHandler *'
|-FriendDecl 0x5611b0f9ff00 <line:347:5, col:18> col:12 'class Master':'Master'
|-FriendDecl 0x5611b0f9ff60 <line:348:5, col:18> col:12 'class Task':'Task'
`-FriendDecl 0x5611b0fa01e0 <line:349:5, col:44> col:25
  `-CXXMethodDecl 0x5611b0fa00e0 parent 0x5611b0e8d9e0 prev 0x5611b0e9c368 <col:5, col:44> col:25 set_nports 'int (int, int)'
    |-ParmVarDecl 0x5611b0f9ffc0 <col:36> col:39 'int'
    `-ParmVarDecl 0x5611b0fa0040 <col:41> col:44 'int'

Layout: <CGRecordLayout
  LLVMType:%class.Router = type { %class.Master*, %class.atomic_uint32_t, i32, i8, i32, %class.atomic_uint32_t, %class.Vector, %class.Vector.0, %class.Vector.0, %class.Vector.2, %class.Vector.5, %class.Vector.6, i32, %class.Vector.5, [2 x %class.Vector.5], %class.Vector.5, %class.Vector.8, %class.Vector.5, %class.Vector.0, %class.Vector.5, %class.Vector.5, %class.Vector.5, %class.Vector.5, %class.Handler**, i32, i32, %class.Vector.0, %class.Vector.12, %class.Element*, %class.String, %"struct.Router::notifier_signals_t"*, %class.HashMap_ArenaFactory*, %class.Router*, %class.ThreadSched*, %class.NameInfo*, %class.Vector.5, %class.Vector.0, %class.Router* }
  NonVirtualBaseLLVMType:%class.Router = type { %class.Master*, %class.atomic_uint32_t, i32, i8, i32, %class.atomic_uint32_t, %class.Vector, %class.Vector.0, %class.Vector.0, %class.Vector.2, %class.Vector.5, %class.Vector.6, i32, %class.Vector.5, [2 x %class.Vector.5], %class.Vector.5, %class.Vector.8, %class.Vector.5, %class.Vector.0, %class.Vector.5, %class.Vector.5, %class.Vector.5, %class.Vector.5, %class.Handler**, i32, i32, %class.Vector.0, %class.Vector.12, %class.Element*, %class.String, %"struct.Router::notifier_signals_t"*, %class.HashMap_ArenaFactory*, %class.Router*, %class.ThreadSched*, %class.NameInfo*, %class.Vector.5, %class.Vector.0, %class.Router* }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:1 IsSigned:0 StorageSize:8 StorageOffset:16>
    <CGBitFieldInfo Offset:1 Size:1 IsSigned:0 StorageSize:8 StorageOffset:16>
    <CGBitFieldInfo Offset:2 Size:1 IsSigned:0 StorageSize:8 StorageOffset:16>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0e8d9e0 prev 0x5611b0e8d780 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5611b0e8dad8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5611b0e8db68 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5611b0e8dbc8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5611b0e8dcb8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5611b0e8ddb8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5611b0e8df88 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5611b0e8de38 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5611b0e8deb0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5611b0e8e118 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5611b0e8e050 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5611b0e8e1c0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5611b0e8e2f8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5611b0e8e230 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5611b0e8e498 <line:40:5, col:37> col:18 used run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5611b0e8e3d8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5611b0e8e638 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5611b0e8e578 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5611b0e8e6e0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5611b0e8e7e0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5611b0e8e8c0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e8e7c0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5611b0e8e7a0 <col:26> 'int' 1
| `-EnumConstantDecl 0x5611b0e8e870 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5611b0e8e8d8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0e8e850 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5611b0e8e830 <col:44> 'int' 2
|-CXXMethodDecl 0x5611b0e8ea20 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5611b0e8e908 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5611b0e8e988 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5611b0e8eb78 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5611b0e8eae8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5611b0e8ed88 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5611b0e8ec38 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5611b0e8ecb0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5611b0e8ee38 <col:20>
| `-OptimizeNoneAttr 0x5611b0e8ee90 <col:30>
|-CXXMethodDecl 0x5611b0e8ef98 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5611b0e8eed0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5611b0e8f040 <col:20>
| `-OptimizeNoneAttr 0x5611b0e8f098 <col:30>
|-CXXMethodDecl 0x5611b0e8f0e8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5611b0e8f1b0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5611b0e8f298 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5611b0e8f320 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5611b0e8f3a8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5611b0e8f430 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x5611b0e8f4b8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5611b0e8f548 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5611b0e8f608 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5611b0e8f690 <line:63:5, col:28> col:23 used PUSH 'const char []' static
|-VarDecl 0x5611b0e8f718 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5611b0e8f7a0 <line:65:5, col:36> col:23 used PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5611b0e8f828 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5611b0e8f8b0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5611b0e8f940 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5611b0e8fa00 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5611b0e8fa90 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5611b0e8fbe0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5611b0e8fb48 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5611b0e8fd70 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5611b0e8fca0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5611b0e90010 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5611b0e8fe28 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5611b0e8fea8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5611b0e8ff28 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5611b0e900c8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5611b0e901d0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5611b0e90460 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e901b0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5611b0e90190 <col:33> 'int' 0
| |-EnumConstantDecl 0x5611b0e90260 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5611b0e90478 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e90240 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5611b0e90220 <col:32> 'int' 20
| |-EnumConstantDecl 0x5611b0e902f0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5611b0e90490 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e902d0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5611b0e902b0 <col:38> 'int' 90
| |-EnumConstantDecl 0x5611b0e90380 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5611b0e904a8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e90360 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5611b0e90340 <col:35> 'int' 100
| `-EnumConstantDecl 0x5611b0e90410 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5611b0e904c0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0e903f0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5611b0e903d0 <col:32> 'int' 2000
|-CXXMethodDecl 0x5611b0e90500 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5611b0e90810 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5611b0e90680 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5611b0e906f8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5611b0e908e0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5611b0e90a60 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5611b0e90990 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5611b0e90c68 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5611b0e90b18 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5611b0e90b90 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5611b0e90d68 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5611b0e90e08 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5611b0e90ed0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5611b0e90f60 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5611b0e91190 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e90f40 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5611b0e90f20 <col:36> 'int' EnumConstant 0x5611b0e90ed0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5611b0e90fb0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5611b0e91000 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5611b0e91050 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5611b0e910a0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5611b0e910f0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5611b0e91140 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5611b0e91278 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5611b0e911b8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5611b0e91340 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5611b0e91400 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5611b0e914c0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5611b0e91580 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5611b0e91668 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5611b0e91730 <line:117:5, col:25> col:16 used eindex 'int () const' inline
|-CXXMethodDecl 0x5611b0e918b0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5611b0e917e0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5611b0e919d8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5611b0e91bd8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5611b0e91a88 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5611b0e91b08 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5611b0e9e428 <col:54, line:127:5>
|   |-ParenExpr 0x5611b0e9e2d8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5611b0e9e2a8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5611b0e9df90 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5611b0e9df68 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5611b0e9df50 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5611b0e9df38 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5611b0e9df08 <col:31> 'Router *' lvalue ->_router 0x5611b0e9be20
|   |   |         `-CXXThisExpr 0x5611b0e9def8 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5611b0e9dff0 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5611b0e9dfd0 <col:48> 'int' 0
|   |   `-CallExpr 0x5611b0e9e208 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5611b0e9e1f0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5611b0e9e1d0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5611b08f6fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5611b0e9e248 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e9e060 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5611b0e9e260 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e9e080 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5611b0e9e278 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5611b0e9e0b8 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5611b0e9e290 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5611b0e9e1b8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5611b0e9e1a0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5611b0e9e158 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5611b0e9e370 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5611b0e9e308 <col:9> 'Router *' lvalue ->_router 0x5611b0e9be20
|   | | `-CXXThisExpr 0x5611b0e9e2f8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5611b0e9e358 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5611b0e9e338 <col:19> 'Router *' lvalue ParmVar 0x5611b0e91a88 'r' 'Router *'
|   `-BinaryOperator 0x5611b0e9e408 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5611b0e9e3a0 <col:9> 'int' lvalue ->_eindex 0x5611b0e9be88
|     | `-CXXThisExpr 0x5611b0e9e390 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5611b0e9e3f0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5611b0e9e3d0 <col:19> 'int' lvalue ParmVar 0x5611b0e91b08 'eindex' 'int'
|-CXXMethodDecl 0x5611b0e91d60 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5611b0e91c98 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5611b0e91e30 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5611b0e91ef8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5611b0e91f98 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5611b0e921e8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5611b0e92060 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5611b0e920e0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5611b0e92298 <col:20>
| `-OptimizeNoneAttr 0x5611b0e922f0 <col:30>
|-CXXMethodDecl 0x5611b0e923f8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5611b0e92330 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5611b0e924a0 <col:20>
| `-OptimizeNoneAttr 0x5611b0e924f8 <col:30>
|-CXXMethodDecl 0x5611b0e925c8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5611b0e92538 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5611b0e92670 <col:20>
| `-OptimizeNoneAttr 0x5611b0e926c8 <col:30>
|-CXXMethodDecl 0x5611b0e92858 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5611b0e92700 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5611b0e92780 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5611b0e929e8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5611b0e92920 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5611b0e92b38 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5611b0e92aa8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5611b0e92c88 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5611b0e92bf8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5611b0e92dd8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5611b0e92d48 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5611b0e93098 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5611b0e92e90 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5611b0e92f10 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5611b0e92fb8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5611b0e93170 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5611b0e93230 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5611b0e93500 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5611b0e933b0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5611b0e93428 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5611b0e93628 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5611b0e93800 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5611b0e936e0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5611b0e93760 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5611b0e939e8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5611b0e938c8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5611b0e93948 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5611b0e93da8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5611b0e93af0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5611b0e93b68 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5611b0e93be8 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5611b0e9da08 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5611b0e9d9e8 <col:106> 'int' 0
| `-ParmVarDecl 0x5611b0e93c60 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5611b0e9da40 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5611b0e9da20 <col:126> 'int' 0
|-CXXMethodDecl 0x5611b0e94128 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5611b0e93e78 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5611b0e93ef0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5611b0e93f70 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5611b0e93fe8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5611b0e9da78 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5611b0e9da58 <col:114> 'int' 0
|-CXXMethodDecl 0x5611b0e944b8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5611b0e94200 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5611b0e94278 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5611b0e942f8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5611b0e9da90 <col:96> 'int' 0
| `-ParmVarDecl 0x5611b0e94370 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5611b0e9dad0 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5611b0e9dab0 <col:116> 'int' 0
|-CXXMethodDecl 0x5611b0e94838 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5611b0e94588 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5611b0e94600 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5611b0e94680 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5611b0e9db08 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5611b0e9dae8 <col:109> 'int' 0
| `-ParmVarDecl 0x5611b0e946f8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5611b0e9db40 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5611b0e9db20 <col:129> 'int' 0
|-CXXMethodDecl 0x5611b0e94bb8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5611b0e94908 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5611b0e94980 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5611b0e94a00 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5611b0e94a78 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5611b0e9db78 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5611b0e9db58 <col:117> 'int' 0
|-CXXMethodDecl 0x5611b0e94f48 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5611b0e94c90 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5611b0e94d08 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5611b0e94d88 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5611b0e9db90 <col:99> 'int' 0
| `-ParmVarDecl 0x5611b0e94e00 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5611b0e9dbd0 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5611b0e9dbb0 <col:119> 'int' 0
|-CXXMethodDecl 0x5611b0e95368 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5611b0e95018 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5611b0e95098 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5611b0e95110 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5611b0e95190 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5611b0e9dc08 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5611b0e9dbe8 <col:108> 'int' 0
| `-ParmVarDecl 0x5611b0e95210 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5611b0e9dc40 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5611b0e9dc20 <col:141> 'int' 0
|-CXXMethodDecl 0x5611b0e95788 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5611b0e95440 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5611b0e954c0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5611b0e95538 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5611b0e955b8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5611b0e95638 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5611b0e9dc58 <col:121> 'int' 0
|-CXXMethodDecl 0x5611b0e95bb8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5611b0e95868 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5611b0e958e8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5611b0e95960 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5611b0e959e0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5611b0e9dc78 <col:98> 'int' 0
| `-ParmVarDecl 0x5611b0e95a60 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5611b0e9dc98 <col:123> 'int' 0
|-CXXMethodDecl 0x5611b0e95e80 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5611b0e95c90 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5611b0e95d10 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5611b0e95d90 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5611b0e9dcb8 <col:80> 'int' 0
|-EnumDecl 0x5611b0e95f38 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5611b0e96040 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5611b0e962d0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e96020 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5611b0e96000 <col:42> 'int' 1
| |-EnumConstantDecl 0x5611b0e960d0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5611b0e962e8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e960b0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5611b0e96090 <col:40> 'int' 2
| |-EnumConstantDecl 0x5611b0e96160 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5611b0e96300 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e96140 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5611b0e96120 <col:44> 'int' 4
| |-EnumConstantDecl 0x5611b0e961f0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5611b0e96318 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e961d0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5611b0e961b0 <col:36> 'int' 7
| `-EnumConstantDecl 0x5611b0e96280 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5611b0e96330 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0e96260 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5611b0e96240 <col:34> 'int' 6
|-CXXMethodDecl 0x5611b0e965e8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5611b0e96358 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5611b0e963f8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5611b0e96478 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5611b0e964f0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5611b0e9dd70 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5611b0e9dd58 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5611b0e9dd40 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5611b0e9dd20 <col:98, col:105> 'String' (CXXTemporary 0x5611b0e9dd20)
|           `-CXXTemporaryObjectExpr 0x5611b0e9dce8 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5611b0e96888 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5611b0e966b8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5611b0e96730 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5611b0e967a8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5611b0e9de20 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5611b0e9de08 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5611b0e9ddf0 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5611b0e9ddd0 <col:94, col:101> 'String' (CXXTemporary 0x5611b0e9ddd0)
| |         `-CXXTemporaryObjectExpr 0x5611b0e9dd98 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5611b0e9e610 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5611b0e9e588 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5611b0e9e558 <col:9> '<bound member function type>' ->add_task_handlers 0x5611b0e965e8
|     | `-CXXThisExpr 0x5611b0e9e548 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5611b0e9e5c8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5611b0e9e4c8 <col:27> 'Task *' lvalue ParmVar 0x5611b0e966b8 'task' 'Task *'
|     |-ImplicitCastExpr 0x5611b0e9e5e0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5611b0e9e4e8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5611b0e96730 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5611b0e9e5f8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5611b0e9e508 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5611b0e96280 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5611b0e9e528 <col:62> 'const String' lvalue ParmVar 0x5611b0e967a8 'prefix' 'const String &'
|-CXXMethodDecl 0x5611b0e96a98 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5611b0e96950 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5611b0e969c8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5611b0e9ded0 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5611b0e9deb8 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5611b0e9dea0 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5611b0e9de80 <col:70, col:77> 'String' (CXXTemporary 0x5611b0e9de80)
| |         `-CXXTemporaryObjectExpr 0x5611b0e9de48 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5611b0e9e7e8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5611b0e9e760 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5611b0e9e730 <col:9> '<bound member function type>' ->add_task_handlers 0x5611b0e965e8
|     | `-CXXThisExpr 0x5611b0e9e720 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5611b0e9e7a0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5611b0e9e6a0 <col:27> 'Task *' lvalue ParmVar 0x5611b0e96950 'task' 'Task *'
|     |-ImplicitCastExpr 0x5611b0e9e7b8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5611b0e9e6c0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5611b0e9e7d0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5611b0e9e6e0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5611b0e96280 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5611b0e9e700 <col:57> 'const String' lvalue ParmVar 0x5611b0e969c8 'prefix' 'const String &'
|-CXXMethodDecl 0x5611b0e96d78 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5611b0e96b60 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5611b0e96be0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5611b0e96c58 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5611b0e97028 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5611b0e96e48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5611b0e96ec8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5611b0e96f48 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5611b0e97318 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5611b0e970f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5611b0e97178 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5611b0e971f0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5611b0e975c8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5611b0e973e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5611b0e97468 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5611b0e974e8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5611b0e97878 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5611b0e97698 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5611b0e97718 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5611b0e97798 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5611b0e97b28 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5611b0e97948 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5611b0e979c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5611b0e97a40 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5611b0e97dd8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5611b0e97bf8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5611b0e97c78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5611b0e97cf8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5611b0e98088 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5611b0e97ea8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5611b0e97f28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5611b0e97fa8 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5611b0e98338 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5611b0e98158 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5611b0e981d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5611b0e98258 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5611b0e985e8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5611b0e98408 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5611b0e98488 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5611b0e98508 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5611b0e98850 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5611b0e986b8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5611b0e98738 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5611b0e987b0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5611b0e98af8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5611b0e98920 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5611b0e989a0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5611b0e98a18 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5611b0e98da8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5611b0e98bc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5611b0e98c48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5611b0e98cc8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5611b0e99058 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5611b0e98e78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5611b0e98ef8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5611b0e98f70 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5611b0e99308 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5611b0e99128 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5611b0e991a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5611b0e99220 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5611b0e995b8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5611b0e993d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5611b0e99458 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5611b0e994d0 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5611b0e998e8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5611b0e99688 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5611b0e99708 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5611b0e99780 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5611b0e997f8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5611b0e9dee8 <col:93> 'bool' false
|-CXXMethodDecl 0x5611b0e99ad0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5611b0e999b8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5611b0e99a38 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5611b0e99ca8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5611b0e99b90 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5611b0e99c10 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5611b0e99f88 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5611b0e99d68 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5611b0e99de0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5611b0e99e60 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5611b0e99ed8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5611b0e9a278 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5611b0e9a058 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5611b0e9a0d0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5611b0e9a150 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5611b0e9a1c8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5611b0e9a4b0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5611b0e9a350 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5611b0e9a3d0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5611b0e9a698 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5611b0e9a578 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5611b0e9a5f8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5611b0e9a748 prev 0x5611b0e91f98 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5611b0e9a840 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5611b0e9a8d0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5611b0e9a948 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5611b0e9aa08 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5611b0e9aad0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5611b0e9ac48 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5611b0e9ab80 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5611b0e9acf0 <col:24>
| | `-OptimizeNoneAttr 0x5611b0e9ad48 <col:34>
| |-CXXMethodDecl 0x5611b0e9ad90 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5611b0e9b048 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5611b0e9ae40 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5611b0e9aeb8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5611b0e9af38 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5611b0e9b100 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5611b0e9b138 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5611b0e9b1a0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5611b0e9b228 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5611b0e9b548 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5611b0e9b2e0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5611b0e9b358 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5611b0e9b3d0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5611b0e9b450 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5611b0e9b660 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5611b0ea1f58 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5611b0ea1f58
| | `-ParmVarDecl 0x5611b0ea2068 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5611b0ea2108 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5611b0ea2108
| | `-ParmVarDecl 0x5611b0ea2218 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5611b102fec8 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5611b0e9b6d8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5611b0e9b778 <col:38> "" ""
|-CXXMethodDecl 0x5611b0e9b808 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5611b0e9b8a8 <col:44> "" ""
|-AccessSpecDecl 0x5611b0e9b918 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5611b0e9b940 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5611b0e9ba40 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5611b0e9ba90 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0e9ba20 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5611b0e9ba00 <col:27> 'int' 4
|-FieldDecl 0x5611b0e9bb58 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5611b0e9bd08 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5611b0e9bdc0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5611b0e9be20 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5611b0e9be88 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5611b0e9bfd8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5611b0e9bf18 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5611b0e9c188 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5611b0e9c098 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5611b0e9c368 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5611b0e9c248 <col:20> col:23 'int'
| `-ParmVarDecl 0x5611b0e9c2c8 <col:25> col:28 'int'
|-CXXMethodDecl 0x5611b0e9c610 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5611b0e9c430 <col:23> col:26 'int'
| |-ParmVarDecl 0x5611b0e9c4b0 <col:28> col:31 'int'
| `-ParmVarDecl 0x5611b0e9c528 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5611b0e9c6c8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5611b0e9c790 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5611b0e9c7e0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5611b0e9c830 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5611b0e9ca10 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5611b0e9c8c0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5611b0e9c938 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5611b0e9ccb8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5611b0e9cad8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5611b0e9cb58 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5611b0e9cbd0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5611b0e9ced8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5611b0e9cd88 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5611b0e9ce08 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5611b0e9d210 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5611b0e9cf98 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5611b0e9d018 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5611b0e9d090 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5611b0e9d110 <col:57> col:60 'int'
|-CXXMethodDecl 0x5611b0e9d3f8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5611b0e9d2e0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5611b0e9d360 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5611b0e9d548 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5611b0e9d4b8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5611b0e9d8c8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5611b0e9d608 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5611b0e9d688 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5611b0e9d700 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5611b0e9d780 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5611b0e9d9a8 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPFlowID
         0 |   class IPAddress _saddr
         0 |     uint32_t _addr
         4 |   class IPAddress _daddr
         4 |     uint32_t _addr
         8 |   uint16_t _sport
        10 |   uint16_t _dport
           | [sizeof=12, dsize=12, align=4,
           |  nvsize=12, nvalign=4]

*** Dumping AST Record Layout
         0 | class TCPConn
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class TCPDemux * _tcpdemux
       120 |   _Bool _active
       121 |   _Bool _listen
       122 |   _Bool _established
       124 |   unsigned int _seq_nxt
       128 |   class IPFlowID _flow
       128 |     class IPAddress _saddr
       128 |       uint32_t _addr
       132 |     class IPAddress _daddr
       132 |       uint32_t _addr
       136 |     uint16_t _sport
       138 |     uint16_t _dport
           | [sizeof=144, dsize=140, align=8,
           |  nvsize=140, nvalign=8]

*** Dumping AST Record Layout
         0 | class HashMap<class IPFlowID, int>
         0 |   struct HashMap<class IPFlowID, int>::Elt ** _buckets
         8 |   size_t _nbuckets
        16 |   int _default_value
        24 |   size_t _n
        32 |   size_t _capacity
        40 |   class HashMap_Arena * _arena
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class TCPDemux
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class HashMap<class IPFlowID, int> _flows
       112 |     struct HashMap<class IPFlowID, int>::Elt ** _buckets
       120 |     size_t _nbuckets
       128 |     int _default_value
       136 |     size_t _n
       144 |     size_t _capacity
       152 |     class HashMap_Arena * _arena
           | [sizeof=160, dsize=160, align=8,
           |  nvsize=160, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5611b1016820 <../dummy_inc/click/hashmap.hh:25:1, line:116:1> line:26:7 class HashMap definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'IPFlowID'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5611b1016d88 prev 0x5611b1016820 <col:1, col:7> col:7 implicit class HashMap
|-AccessSpecDecl 0x5611b1016e18 <col:17, col:23> col:17 public
|-TypedefDecl 0x5611b1016e78 <line:28:5, col:15> col:15 key_type 'IPFlowID':'IPFlowID'
| `-SubstTemplateTypeParmType 0x5611b1016e40 'IPFlowID' sugar
|   |-TemplateTypeParmType 0x5611b0fc1e50 'K' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5611b0fc1df8 'K'
|   `-RecordType 0x5611b100dda0 'IPFlowID'
|     `-CXXRecord 0x5611b100dd08 'IPFlowID'
|-TypedefDecl 0x5611b1016f08 <line:29:5, col:15> col:15 mapped_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5611b1016ed0 'int' sugar
|   |-TemplateTypeParmType 0x5611b0fc1ed0 'V' dependent depth 0 index 1
|   | `-TemplateTypeParm 0x5611b0fc1e78 'V'
|   `-BuiltinType 0x5611b0855580 'int'
|-CXXRecordDecl 0x5611b1016f60 <line:30:5, col:12> col:12 struct Pair
|-CXXConstructorDecl 0x5611b1017058 <line:32:5, col:13> col:5 HashMap 'void ()'
|-CXXConstructorDecl 0x5611b10172e8 <line:33:5, col:59> col:14 HashMap 'void (const int &, HashMap_ArenaFactory *)'
| |-ParmVarDecl 0x5611b1017148 <col:22, col:30> col:31 'const int &'
| `-ParmVarDecl 0x5611b10171b0 <col:33, col:58> col:56 'HashMap_ArenaFactory *'
|-CXXConstructorDecl 0x5611b10175e8 <line:34:5, col:34> col:5 HashMap 'void (const HashMap<IPFlowID, int> &)'
| `-ParmVarDecl 0x5611b10174d8 <col:13, col:33> col:34 'const HashMap<IPFlowID, int> &'
|-CXXDestructorDecl 0x5611b10176d0 <line:35:5, col:14> col:5 ~HashMap 'void ()' noexcept-unevaluated 0x5611b10176d0
|-CXXMethodDecl 0x5611b1017850 <line:37:3, col:40> col:8 set_arena 'void (HashMap_ArenaFactory *)'
| `-ParmVarDecl 0x5611b10177c0 <col:18, col:39> col:40 'HashMap_ArenaFactory *'
|-CXXMethodDecl 0x5611b1017908 <line:39:3, col:36> col:10 size 'size_t () const'
|-CXXMethodDecl 0x5611b10179b8 <line:40:3, col:40> col:8 empty 'bool () const'
|-CXXMethodDecl 0x5611b1017a68 <line:41:3, col:47> col:10 nbuckets 'size_t () const'
|-CXXMethodDecl 0x5611b1017c78 <line:43:3, col:30> col:9 find_pair 'HashMap<IPFlowID, int>::Pair *(const IPFlowID &) const'
| `-ParmVarDecl 0x5611b1017b88 <col:19, col:27> col:28 'const IPFlowID &'
|-CXXMethodDecl 0x5611b1017e58 <line:44:3, col:58> col:41 findp 'int *(const IPFlowID &) const'
| |-ParmVarDecl 0x5611b1017d68 <col:47, col:55> col:56 'const IPFlowID &'
| |-NoInlineAttr 0x5611b1017f38 <col:18> Inherited
| `-OptimizeNoneAttr 0x5611b1017f90 <col:28> Inherited
|-CXXMethodDecl 0x5611b1018158 <line:45:3, col:46> col:19 find 'const int &(const IPFlowID &, const int &) const' inline
| |-ParmVarDecl 0x5611b1017fc8 <col:24, col:32> col:33 'const IPFlowID &'
| `-ParmVarDecl 0x5611b1018040 <col:35, col:43> col:44 'const int &'
|-CXXMethodDecl 0x5611b1018318 <line:46:3, col:35> col:19 find 'const int &(const IPFlowID &) const' inline
| `-ParmVarDecl 0x5611b1018228 <col:24, col:32> col:33 'const IPFlowID &'
|-CXXMethodDecl 0x5611b1018470 <line:47:3, col:41> col:19 operator[] 'const int &(const IPFlowID &) const' inline
| `-ParmVarDecl 0x5611b10183e0 <col:30, col:38> col:39 'const IPFlowID &'
|-CXXMethodDecl 0x5611b10186c8 <line:49:3, col:45> col:9 find_pair_force 'HashMap<IPFlowID, int>::Pair *(const IPFlowID &, const int &)'
| |-ParmVarDecl 0x5611b1018538 <col:25, col:33> col:34 'const IPFlowID &'
| `-ParmVarDecl 0x5611b10185b0 <col:36, col:44> col:45 'const int &'
|-CXXMethodDecl 0x5611b1018888 <line:50:3, col:82> col:9 find_pair_force 'HashMap<IPFlowID, int>::Pair *(const IPFlowID &)'
| `-ParmVarDecl 0x5611b1018798 <col:25, col:34> col:34 k 'const IPFlowID &'
|-CXXMethodDecl 0x5611b1018ad8 <line:51:3, col:114> col:6 findp_force 'int *(const IPFlowID &, const int &)'
| |-ParmVarDecl 0x5611b1018950 <col:18, col:27> col:27 k 'const IPFlowID &'
| `-ParmVarDecl 0x5611b10189c8 <col:30, col:39> col:39 v 'const int &'
|-CXXMethodDecl 0x5611b1018d68 <line:52:3, col:70> col:6 find_force 'int &(const IPFlowID &, const int &)'
| |-ParmVarDecl 0x5611b1018bd8 <col:17, col:26> col:26 k 'const IPFlowID &'
| `-ParmVarDecl 0x5611b1018c50 <col:29, col:38> col:38 v 'const int &'
|-CXXMethodDecl 0x5611b101bcc8 <line:53:3, col:71> col:6 findp_force 'int *(const IPFlowID &)'
| `-ParmVarDecl 0x5611b1018e38 <col:18, col:27> col:27 k 'const IPFlowID &'
|-CXXMethodDecl 0x5611b101be88 <line:54:3, col:71> col:6 find_force 'int &(const IPFlowID &)'
| `-ParmVarDecl 0x5611b101bd90 <col:17, col:26> col:26 k 'const IPFlowID &'
|-CXXMethodDecl 0x5611b101c0d8 <line:56:3, col:35> col:8 insert 'bool (const IPFlowID &, const int &)'
| |-ParmVarDecl 0x5611b101bf50 <col:15, col:23> col:24 'const IPFlowID &'
| `-ParmVarDecl 0x5611b101bfc8 <col:26, col:34> col:35 'const int &'
|-CXXMethodDecl 0x5611b101c298 <line:57:3, col:23> col:8 erase 'bool (const IPFlowID &)'
| `-ParmVarDecl 0x5611b101c1a8 <col:14, col:22> col:23 'const IPFlowID &'
|-CXXMethodDecl 0x5611b101c3f0 <line:58:3, line:60:3> line:58:8 remove 'bool (const IPFlowID &)'
| `-ParmVarDecl 0x5611b101c360 <col:15, col:24> col:24 key 'const IPFlowID &'
|-CXXMethodDecl 0x5611b101c4a8 <line:61:3, col:14> col:8 clear 'void ()'
|-CXXMethodDecl 0x5611b101c778 <line:63:3, col:28> col:8 swap 'void (HashMap<IPFlowID, int> &)'
| `-ParmVarDecl 0x5611b101c688 <col:13, col:27> col:28 'HashMap<IPFlowID, int> &'
|-TypedefDecl 0x5611b101ca10 <line:66:3, col:41> col:41 const_iterator '_HashMap_const_iterator<IPFlowID, int>':'_HashMap_const_iterator<IPFlowID, int>'
| `-TemplateSpecializationType 0x5611b101c970 '_HashMap_const_iterator<IPFlowID, int>' sugar _HashMap_const_iterator
|   |-TemplateArgument type 'IPFlowID':'IPFlowID'
|   |-TemplateArgument type 'int':'int'
|   `-RecordType 0x5611b101c950 '_HashMap_const_iterator<IPFlowID, int>'
|     `-ClassTemplateSpecialization 0x5611b101c850 '_HashMap_const_iterator'
|-TypedefDecl 0x5611b101cc40 <line:67:3, col:35> col:35 iterator '_HashMap_iterator<IPFlowID, int>':'_HashMap_iterator<IPFlowID, int>'
| `-TemplateSpecializationType 0x5611b101cba0 '_HashMap_iterator<IPFlowID, int>' sugar _HashMap_iterator
|   |-TemplateArgument type 'IPFlowID':'IPFlowID'
|   |-TemplateArgument type 'int':'int'
|   `-RecordType 0x5611b101cb80 '_HashMap_iterator<IPFlowID, int>'
|     `-ClassTemplateSpecialization 0x5611b101ca88 '_HashMap_iterator'
|-CXXMethodDecl 0x5611b101cd38 <line:68:3, col:33> col:25 begin 'HashMap<IPFlowID, int>::const_iterator () const' inline
|-CXXMethodDecl 0x5611b101ce88 <line:69:3, col:25> col:19 begin 'HashMap<IPFlowID, int>::iterator ()' inline
|-CXXMethodDecl 0x5611b101cf58 <line:70:3, col:31> col:25 end 'HashMap<IPFlowID, int>::const_iterator () const' inline
|-CXXMethodDecl 0x5611b101d028 <line:71:3, col:23> col:19 end 'HashMap<IPFlowID, int>::iterator ()' inline
|-CXXMethodDecl 0x5611b101d168 <line:74:3, col:21> col:8 resize 'void (size_t)'
| `-ParmVarDecl 0x5611b101d0d8 <col:15> col:21 'size_t':'unsigned long'
|-CXXMethodDecl 0x5611b101d220 <line:75:3, col:66> col:8 dynamic_resizing 'bool () const'
|-CXXMethodDecl 0x5611b101d360 <line:76:3, col:33> col:8 set_dynamic_resizing 'void (bool)'
| `-ParmVarDecl 0x5611b101d2d0 <col:29> col:33 'bool'
|-CXXMethodDecl 0x5611b101d6f8 <line:78:3, col:49> col:18 operator= 'HashMap<IPFlowID, int> &(const HashMap<IPFlowID, int> &)'
| `-ParmVarDecl 0x5611b101d5c8 <col:28, col:48> col:49 'const HashMap<IPFlowID, int> &'
|-CXXRecordDecl 0x5611b101d7b0 prev 0x5611b1016f60 <line:80:3, col:10> col:10 struct Pair
|-EnumDecl 0x5611b101d850 <line:85:3> col:3
| |-EnumConstantDecl 0x5611b101d940 <col:10, col:25> col:10 MAX_NBUCKETS 'HashMap<IPFlowID, int>::(anonymous enum at ../dummy_inc/click/hashmap.hh:85:3)'
| | `-ImplicitCastExpr 0x5611b101da70 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b101d920 <col:25> 'int' Int: 4194303
| |     `-IntegerLiteral 0x5611b0c80620 <col:25> 'int' 4194303
| |-EnumConstantDecl 0x5611b101d9b0 <line:86:3, col:30> col:3 DEFAULT_INITIAL_NBUCKETS 'HashMap<IPFlowID, int>::(anonymous enum at ../dummy_inc/click/hashmap.hh:85:3)'
| | `-ImplicitCastExpr 0x5611b101da88 <col:30> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b101d990 <col:30> 'int' Int: 127
| |     `-IntegerLiteral 0x5611b0c80690 <col:30> 'int' 127
| `-EnumConstantDecl 0x5611b101da20 <line:87:3, col:30> col:3 DEFAULT_RESIZE_THRESHOLD 'HashMap<IPFlowID, int>::(anonymous enum at ../dummy_inc/click/hashmap.hh:85:3)'
|   `-ImplicitCastExpr 0x5611b101daa0 <col:30> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b101da00 <col:30> 'int' Int: 2
|       `-IntegerLiteral 0x5611b0c80700 <col:30> 'int' 2
|-AccessSpecDecl 0x5611b101dab8 <line:89:2, col:9> col:2 private
|-CXXRecordDecl 0x5611b101dae0 <line:91:5, col:12> col:12 struct Elt
|-FieldDecl 0x5611b101dc10 <line:99:3, col:9> col:9 _buckets 'HashMap<IPFlowID, int>::Elt **'
|-FieldDecl 0x5611b101dc60 <line:100:3, col:10> col:10 _nbuckets 'size_t':'unsigned long'
|-FieldDecl 0x5611b101dcc0 <line:101:3, col:5> col:5 _default_value 'int':'int'
|-FieldDecl 0x5611b101dd10 <line:103:3, col:10> col:10 _n 'size_t':'unsigned long'
|-FieldDecl 0x5611b101dd60 <line:104:3, col:10> col:10 _capacity 'size_t':'unsigned long'
|-FieldDecl 0x5611b101ddb0 <line:106:3, col:18> col:18 _arena 'HashMap_Arena *'
|-CXXMethodDecl 0x5611b101df00 <line:108:3, col:49> col:8 initialize 'void (HashMap_ArenaFactory *, size_t)'
| |-ParmVarDecl 0x5611b101de00 <col:19, col:40> col:41 'HashMap_ArenaFactory *'
| `-ParmVarDecl 0x5611b101de68 <col:43> col:49 'size_t':'unsigned long'
|-CXXMethodDecl 0x5611b101e178 <line:109:3, col:39> col:8 copy_from 'void (const HashMap<IPFlowID, int> &)'
| `-ParmVarDecl 0x5611b101e0b8 <col:18, col:38> col:39 'const HashMap<IPFlowID, int> &'
|-CXXMethodDecl 0x5611b101e2c0 <line:110:3, col:22> col:8 resize0 'void (size_t)'
| `-ParmVarDecl 0x5611b101e230 <col:16> col:22 'size_t':'unsigned long'
|-CXXMethodDecl 0x5611b101e478 <line:111:3, col:28> col:10 bucket 'size_t (const IPFlowID &) const'
| `-ParmVarDecl 0x5611b101e388 <col:17, col:25> col:26 'const IPFlowID &'
|-FriendDecl 0x5611b101e638 <line:113:3, col:38> col:10 'class _HashMap_iterator<IPFlowID, int>':'_HashMap_iterator<IPFlowID, int>'
`-FriendDecl 0x5611b101e788 <line:114:3, col:44> col:10 'class _HashMap_const_iterator<IPFlowID, int>':'_HashMap_const_iterator<IPFlowID, int>'

Layout: <CGRecordLayout
  LLVMType:%class.HashMap = type { %"struct.HashMap<IPFlowID, int>::Elt"**, i64, i32, i64, i64, %class.HashMap_Arena* }
  NonVirtualBaseLLVMType:%class.HashMap = type { %"struct.HashMap<IPFlowID, int>::Elt"**, i64, i32, i64, i64, %class.HashMap_Arena* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b1016a80 <../elements/local/tcpdemux.hh:26:1, line:51:1> line:26:7 class TCPDemux definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5611b1016bd8 <col:1, col:7> col:7 implicit referenced class TCPDemux
|-AccessSpecDecl 0x5611b1016c68 <line:27:1, col:8> col:1 private
|-FieldDecl 0x5611b101e7c8 <line:28:3, col:13> col:13 _flows 'FlowTable':'HashMap<IPFlowID, int>'
|-CXXMethodDecl 0x5611b101e920 <line:29:3, col:26> col:7 find_flow 'int (Packet *)'
| `-ParmVarDecl 0x5611b101e828 <col:17, col:25> col:25 p 'Packet *'
|-AccessSpecDecl 0x5611b101e9c8 <line:31:1, col:7> col:1 public
|-CXXConstructorDecl 0x5611b101ea28 <line:32:3, col:12> col:3 TCPDemux 'void ()'
|-CXXDestructorDecl 0x5611b101eb18 <line:33:3, col:13> col:3 ~TCPDemux 'void ()' noexcept-unevaluated 0x5611b101eb18
| `-Overrides: [ 0x5611b0e8dcb8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x5611b101ec50 <line:35:3, col:55> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x5611b0e8f0e8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5611b101fdf0 <col:34, col:55>
|   `-ReturnStmt 0x5611b101fde0 <col:36, col:43>
|     `-ImplicitCastExpr 0x5611b101fdc8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5611b101fda8 <col:43> 'const char [9]' lvalue "TCPDemux"
|-CXXMethodDecl 0x5611b101ed18 <line:36:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x5611b0e8f1b0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5611b101fe50 <col:34, col:54>
|   `-ReturnStmt 0x5611b101fe40 <col:36, col:43>
|     `-ImplicitCastExpr 0x5611b101fe28 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5611b101fe08 <col:43> 'const char []' lvalue Var 0x5611b0e8f430 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x5611b101ede0 <line:37:3, col:49> col:15 processing 'const char *() const'
| |-Overrides: [ 0x5611b0e8f548 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x5611b101feb0 <col:34, col:49>
|   `-ReturnStmt 0x5611b101fea0 <col:36, col:43>
|     `-ImplicitCastExpr 0x5611b101fe88 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5611b101fe68 <col:43> 'const char []' lvalue Var 0x5611b0e8f690 'PUSH' 'const char []'
|-CXXMethodDecl 0x5611b101f0b0 <line:39:3, col:57> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5611b0e90810 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5611b101ef60 <col:17, col:33> col:33 conf 'Vector<String> &'
| `-ParmVarDecl 0x5611b101efd8 <col:39, col:53> col:53 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5611b101f288 <line:41:3, col:26> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x5611b0e8df88 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x5611b101f178 <col:13> col:16 'int'
| `-ParmVarDecl 0x5611b101f1f0 <col:18, col:25> col:26 'Packet *'
|-CXXMethodDecl 0x5611b101f648 <line:45:3, line:46:63> line:45:8 add_flow 'bool (IPAddress, unsigned short, IPAddress, unsigned short, unsigned int)'
| |-ParmVarDecl 0x5611b101f348 <col:17, col:27> col:27 sa 'IPAddress'
| |-ParmVarDecl 0x5611b101f3c8 <col:31, col:46> col:46 sp 'unsigned short'
| |-ParmVarDecl 0x5611b101f440 <line:46:17, col:27> col:27 da 'IPAddress'
| |-ParmVarDecl 0x5611b101f4c0 <col:31, col:46> col:46 dp 'unsigned short'
| `-ParmVarDecl 0x5611b101f540 <col:50, col:59> col:59 port 'unsigned int'
|-CXXMethodDecl 0x5611b101f988 <line:49:3, line:50:51> line:49:8 remove_flow 'bool (IPAddress, unsigned short, IPAddress, unsigned short)'
| |-ParmVarDecl 0x5611b101f720 <col:20, col:30> col:30 sa 'IPAddress'
| |-ParmVarDecl 0x5611b101f7a0 <col:34, col:49> col:49 sp 'unsigned short'
| |-ParmVarDecl 0x5611b101f818 <line:50:20, col:30> col:30 da 'IPAddress'
| `-ParmVarDecl 0x5611b101f898 <col:34, col:49> col:49 dp 'unsigned short'
|-CXXConstructorDecl 0x5611b101fa78 <line:26:7> col:7 implicit TCPDemux 'void (const TCPDemux &)' inline default_delete noexcept-unevaluated 0x5611b101fa78
| `-ParmVarDecl 0x5611b101fb88 <col:7> col:7 'const TCPDemux &'
`-CXXMethodDecl 0x5611b101fc28 <col:7> col:7 implicit operator= 'TCPDemux &(const TCPDemux &)' inline default_delete noexcept-unevaluated 0x5611b101fc28
  `-ParmVarDecl 0x5611b101fd38 <col:7> col:7 'const TCPDemux &'

Layout: <CGRecordLayout
  LLVMType:%class.TCPDemux = type { %class.Element.base, %class.HashMap }
  NonVirtualBaseLLVMType:%class.TCPDemux = type { %class.Element.base, %class.HashMap }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0e2c3a0 prev 0x5611b0a75c18 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5611b0e2c498 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x5611b0e2c528 <col:19, col:25> col:19 public
|-TypedefDecl 0x5611b0e2c560 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x5611b09b0210 'uninitialized_type'
|   `-CXXRecord 0x5611b09b0178 'uninitialized_type'
|-CXXConstructorDecl 0x5611b0e2c5f0 <line:20:5, line:22:5> line:20:12 used IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x5611b0e2ed10 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5611b0e2edb8 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5611b0e2ed78 <col:10> 'int' 0
| `-CompoundStmt 0x5611b0e2ee00 <col:13, line:22:5>
|-CXXConstructorDecl 0x5611b0e2c740 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x5611b0e2c6b0 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x5611b0e2ed10 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5611b0e2ee50 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x5611b0e2ee10 <col:10> 'unsigned int' lvalue ParmVar 0x5611b0e2c6b0 'x' 'unsigned int'
| `-CompoundStmt 0x5611b0e2ee98 <col:13, line:27:5>
|-CXXConstructorDecl 0x5611b0e2c898 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x5611b0e2c808 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x5611b0e2ed10 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5611b0e2ef00 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5611b0e2eee8 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x5611b0e2eea8 <col:10> 'int' lvalue ParmVar 0x5611b0e2c808 'x' 'int'
| `-CompoundStmt 0x5611b0e2ef48 <col:13, line:31:5>
|-CXXConstructorDecl 0x5611b0e2c9f0 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x5611b0e2c960 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x5611b0e2ed10 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5611b0e2efb0 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5611b0e2ef98 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x5611b0e2ef58 <col:10> 'unsigned long' lvalue ParmVar 0x5611b0e2c960 'x' 'unsigned long'
| `-CompoundStmt 0x5611b0e2eff8 <col:13, line:35:5>
|-CXXConstructorDecl 0x5611b0e2cb48 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x5611b0e2cab8 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x5611b0e2ed10 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5611b0e2f060 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5611b0e2f048 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x5611b0e2f008 <col:10> 'long' lvalue ParmVar 0x5611b0e2cab8 'x' 'long'
| `-CompoundStmt 0x5611b0e2f0a8 <col:13, line:39:5>
|-CXXConstructorDecl 0x5611b0e2cd08 <line:42:5, line:44:5> line:42:12 IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x5611b0e2cc18 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x5611b0e2ed10 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5611b0e2f128 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5611b0e2f0d8 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x5611b0b234b0
| |     `-DeclRefExpr 0x5611b0e2f0b8 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x5611b0e2cc18 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x5611b0e2f170 <col:20, line:44:5>
|-CXXConstructorDecl 0x5611b0e2ce98 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x5611b0e2cdd0 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x5611b0e2f2d8 <col:51, line:56:5>
|   `-BinaryOperator 0x5611b0e2f2b8 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x5611b0e2f190 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x5611b0e2ed10
|     | `-CXXThisExpr 0x5611b0e2f180 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x5611b0e2f2a0 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5611b0e2f288 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x5611b0e2f268 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x5611b0e2f238 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x5611b0e2f220 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x5611b0e2f1c0 <col:47> 'const unsigned char *' lvalue ParmVar 0x5611b0e2cdd0 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x5611b0e2cfe8 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x5611b0e2cf58 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x5611b0e2d138 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x5611b0e2d0a8 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x5611b0e2f348 <col:56, line:68:5>
|   `-CStyleCastExpr 0x5611b0e2f320 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x5611b0e2f2f0 <col:9> 'const uninitialized_type' lvalue ParmVar 0x5611b0e2d0a8 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x5611b0e2d2c8 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x5611b0e2d200 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x5611b0e2d3b8 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x5611b0e2ff08 <col:46, line:83:5>
|   `-ReturnStmt 0x5611b0e2fef8 <line:82:2, col:29>
|     `-ExprWithCleanups 0x5611b0e2fee0 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x5611b0e2feb0 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5611b0e2fd68 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x5611b0e2fc50 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x5611b0e2fb38 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x5611b0e2f370 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x5611b0e2d4a8 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x5611b0e2ffb8 <col:31, line:88:5>
|   `-ReturnStmt 0x5611b0e2ffa8 <line:87:2, col:10>
|     `-UnaryOperator 0x5611b0e2ff90 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x5611b0e2ff78 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x5611b0e2ff60 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x5611b0e2ff30 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5611b0e2ed10
|             `-CXXThisExpr 0x5611b0e2ff20 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x5611b0e2d568 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x5611b0e30038 <col:34, line:93:5>
|   `-ReturnStmt 0x5611b0e30028 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x5611b0e30010 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5611b0e2ffe0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5611b0e2ed10
|         `-CXXThisExpr 0x5611b0e2ffd0 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x5611b0e2d638 <line:99:5, line:101:5> line:99:12 used operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x5611b0e300b8 <col:38, line:101:5>
|   `-ReturnStmt 0x5611b0e300a8 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x5611b0e30090 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5611b0e30060 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5611b0e2ed10
|         `-CXXThisExpr 0x5611b0e30050 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x5611b0e2d708 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x5611b0e30328 <col:38, line:108:5>
|   `-ReturnStmt 0x5611b0e30318 <line:107:2, col:58>
|     `-BinaryOperator 0x5611b0e302f8 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x5611b0e30210 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x5611b0e301f0 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5611b0e301d8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5611b0e300e0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5611b0e2ed10
|       |   |   `-CXXThisExpr 0x5611b0e300d0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x5611b0e301b0 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x5611b0e30198 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5611b0e30178 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x5611b0b2a8d8 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x5611b0e30158 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x5611b0e302d0 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x5611b0e302b8 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5611b0e30298 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x5611b0b2a8d8 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x5611b0e30278 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x5611b0e2d7c8 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x5611b0e30598 <col:39, line:112:5>
|   `-ReturnStmt 0x5611b0e30588 <line:111:2, col:56>
|     `-BinaryOperator 0x5611b0e30568 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x5611b0e30480 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x5611b0e30460 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5611b0e30448 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5611b0e30350 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5611b0e2ed10
|       |   |   `-CXXThisExpr 0x5611b0e30340 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x5611b0e30420 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x5611b0e30408 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5611b0e303e8 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x5611b0b2a8d8 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x5611b0e303c8 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x5611b0e30540 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x5611b0e30528 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5611b0e30508 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x5611b0b2a8d8 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x5611b0e304e8 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x5611b0e2d8f8 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x5611b0e2da00 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x5611b0e2db10 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x5611b0e2dc00 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5611b0e2dcc0 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5611b0e2dd88 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x5611b0e2df88 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x5611b0e2de38 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x5611b0e2deb0 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x5611b0e2e108 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x5611b0e2e048 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x5611b0e2e250 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x5611b0e2e1c0 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x5611b0e2e3f8 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5611b0e2e308 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5611b0e2e540 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5611b0e2e4b0 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5611b0e2e688 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5611b0e2e5f8 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5611b0e2e750 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x5611b0e2e810 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x5611b0e2e988 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x5611b0e2e8c0 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x5611b0e2ea50 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x5611b0e2eb38 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x5611b0e2ebe0 <col:51> "" ""
|-TypedefDecl 0x5611b0e2ec80 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x5611b0a75cb0 'IPAddress'
|   `-CXXRecord 0x5611b0e2c3a0 'IPAddress'
|-AccessSpecDecl 0x5611b0e2ecd8 <line:150:3, col:10> col:3 private
|-FieldDecl 0x5611b0e2ed10 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5611b0e2f3b8 <line:15:7> col:7 implicit used constexpr IPAddress 'void (const IPAddress &) noexcept' inline default trivial
| |-ParmVarDecl 0x5611b0e2f4c8 <col:7> col:7 used 'const IPAddress &'
| |-CXXCtorInitializer Field 0x5611b0e2ed10 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5611b1011588 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5611b1011540 <col:7> 'const uint32_t':'const unsigned int' lvalue ._addr 0x5611b0e2ed10
| |     `-DeclRefExpr 0x5611b1011520 <col:7> 'const IPAddress' lvalue ParmVar 0x5611b0e2f4c8 '' 'const IPAddress &'
| `-CompoundStmt 0x5611b10115d0 <col:7>
|-CXXConstructorDecl 0x5611b0e2f568 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5611b0e2f678 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x5611b0e2ed10 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5611b0e2fe58 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5611b0e2fe10 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x5611b0e2ed10
| |     `-CXXStaticCastExpr 0x5611b0e2fde0 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x5611b0e2fdb0 <col:7> 'IPAddress' lvalue ParmVar 0x5611b0e2f678 '' 'IPAddress &&'
| `-CompoundStmt 0x5611b0e2fea0 <col:7>
|-CXXDestructorDecl 0x5611b0e2fb68 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5611b1011e78 <col:7> col:7 implicit used operator= 'IPAddress &(const IPAddress &) noexcept' inline default trivial
| |-ParmVarDecl 0x5611b1011f88 <col:7> col:7 used 'const IPAddress &'
| `-CompoundStmt 0x5611b10122e0 <col:7>
|   |-BinaryOperator 0x5611b1012288 <col:7> 'uint32_t':'unsigned int' lvalue '='
|   | |-MemberExpr 0x5611b1012240 <col:7> 'uint32_t':'unsigned int' lvalue ->_addr 0x5611b0e2ed10
|   | | `-CXXThisExpr 0x5611b1012230 <col:7> 'IPAddress *' this
|   | `-ImplicitCastExpr 0x5611b1012270 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   `-MemberExpr 0x5611b1012200 <col:7> 'const uint32_t':'const unsigned int' lvalue ._addr 0x5611b0e2ed10
|   |     `-DeclRefExpr 0x5611b10121e0 <col:7> 'const IPAddress' lvalue ParmVar 0x5611b1011f88 '' 'const IPAddress &'
|   `-ReturnStmt 0x5611b10122d0 <col:7>
|     `-UnaryOperator 0x5611b10122b8 <col:7> 'IPAddress' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5611b10122a8 <col:7> 'IPAddress *' this
`-CXXMethodDecl 0x5611b1011ff8 <col:7> col:7 implicit operator= 'IPAddress &(IPAddress &&)' inline default trivial noexcept-unevaluated 0x5611b1011ff8
  `-ParmVarDecl 0x5611b1012108 <col:7> col:7 'IPAddress &&'

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b100dd08 <../dummy_inc/click/ipflowid.hh:9:1, line:143:1> line:9:7 referenced class IPFlowID definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5611b100de28 <col:1, col:7> col:7 implicit referenced class IPFlowID
|-AccessSpecDecl 0x5611b100deb8 <col:18, col:24> col:18 public
|-TypedefDecl 0x5611b100def0 <line:11:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x5611b09b0210 'uninitialized_type'
|   `-CXXRecord 0x5611b09b0178 'uninitialized_type'
|-CXXConstructorDecl 0x5611b100dfb0 <line:17:5, line:19:5> line:17:5 used IPFlowID 'void ()'
| |-CXXCtorInitializer Field 0x5611b100fe98 '_saddr' 'IPAddress'
| | `-CXXConstructExpr 0x5611b10112a8 <line:18:4, col:11> 'IPAddress' 'void ()'
| |-CXXCtorInitializer Field 0x5611b100fef8 '_daddr' 'IPAddress'
| | `-CXXConstructExpr 0x5611b1011310 <col:14, col:21> 'IPAddress' 'void ()'
| |-CXXCtorInitializer Field 0x5611b100ff58 '_sport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x5611b10113a0 <col:31> 'uint16_t':'unsigned short' <IntegralCast>
| |   `-IntegerLiteral 0x5611b1011360 <col:31> 'int' 0
| |-CXXCtorInitializer Field 0x5611b100ffb8 '_dport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x5611b1011420 <col:42> 'uint16_t':'unsigned short' <IntegralCast>
| |   `-IntegerLiteral 0x5611b10113e0 <col:42> 'int' 0
| `-CompoundStmt 0x5611b1011480 <col:45, line:19:5>
|-CXXConstructorDecl 0x5611b100e318 <line:26:5, line:28:5> line:26:5 used IPFlowID 'void (IPAddress, uint16_t, IPAddress, uint16_t)'
| |-ParmVarDecl 0x5611b100e068 <col:14, col:24> col:24 used saddr 'IPAddress'
| |-ParmVarDecl 0x5611b100e0e0 <col:31, col:40> col:40 used sport 'uint16_t':'unsigned short'
| |-ParmVarDecl 0x5611b100e158 <col:47, col:57> col:57 used daddr 'IPAddress'
| |-ParmVarDecl 0x5611b100e1d0 <col:64, col:73> col:73 used dport 'uint16_t':'unsigned short'
| |-CXXCtorInitializer Field 0x5611b100fe98 '_saddr' 'IPAddress'
| | `-CXXConstructExpr 0x5611b10115e0 <line:27:4, col:16> 'IPAddress' 'void (const IPAddress &) noexcept'
| |   `-ImplicitCastExpr 0x5611b10114d0 <col:11> 'const IPAddress' lvalue <NoOp>
| |     `-DeclRefExpr 0x5611b1011490 <col:11> 'IPAddress' lvalue ParmVar 0x5611b100e068 'saddr' 'IPAddress'
| |-CXXCtorInitializer Field 0x5611b100fef8 '_daddr' 'IPAddress'
| | `-CXXConstructExpr 0x5611b1011690 <col:19, col:31> 'IPAddress' 'void (const IPAddress &) noexcept'
| |   `-ImplicitCastExpr 0x5611b1011678 <col:26> 'const IPAddress' lvalue <NoOp>
| |     `-DeclRefExpr 0x5611b1011638 <col:26> 'IPAddress' lvalue ParmVar 0x5611b100e158 'daddr' 'IPAddress'
| |-CXXCtorInitializer Field 0x5611b100ff58 '_sport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x5611b1011728 <col:41> 'uint16_t':'unsigned short' <LValueToRValue>
| |   `-DeclRefExpr 0x5611b10116e8 <col:41> 'uint16_t':'unsigned short' lvalue ParmVar 0x5611b100e0e0 'sport' 'uint16_t':'unsigned short'
| |-CXXCtorInitializer Field 0x5611b100ffb8 '_dport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x5611b10117a8 <col:56> 'uint16_t':'unsigned short' <LValueToRValue>
| |   `-DeclRefExpr 0x5611b1011768 <col:56> 'uint16_t':'unsigned short' lvalue ParmVar 0x5611b100e1d0 'dport' 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5611b1011808 <col:63, line:28:5>
|-CXXConstructorDecl 0x5611b100e538 <line:37:5, col:60> col:14 IPFlowID 'void (const Packet *, bool)'
| |-ParmVarDecl 0x5611b100e3f0 <col:23, col:37> col:37 p 'const Packet *'
| `-ParmVarDecl 0x5611b100e468 <col:40, col:55> col:45 reverse 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5611b1011270 <col:55> 'bool' false
|-CXXConstructorDecl 0x5611b100e748 <line:47:5, col:64> col:14 IPFlowID 'void (const click_ip *, bool)'
| |-ParmVarDecl 0x5611b100e600 <col:23, col:39> col:39 iph 'const click_ip *'
| `-ParmVarDecl 0x5611b100e678 <col:44, col:59> col:49 reverse 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5611b1011280 <col:59> 'bool' false
|-CXXConstructorDecl 0x5611b100e8a0 <line:50:5, line:52:5> line:50:12 IPFlowID 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x5611b100e810 <col:21, col:47> col:47 used unused 'const uninitialized_type &'
| |-CXXCtorInitializer Field 0x5611b100fe98 '_saddr' 'IPAddress'
| | `-CXXConstructExpr 0x5611b1011818 <col:12> 'IPAddress' 'void ()'
| |-CXXCtorInitializer Field 0x5611b100fef8 '_daddr' 'IPAddress'
| | `-CXXConstructExpr 0x5611b1011868 <col:12> 'IPAddress' 'void ()'
| `-CompoundStmt 0x5611b1011920 <col:55, line:52:5>
|   `-CStyleCastExpr 0x5611b10118f8 <line:51:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x5611b10118c8 <col:9> 'const uninitialized_type' lvalue ParmVar 0x5611b100e810 'unused' 'const uninitialized_type &'
|-TypedefDecl 0x5611b100ea58 <line:55:5, col:60> col:35 referenced unspecified_bool_type 'IPAddress (IPFlowID::*)() const'
| `-MemberPointerType 0x5611b100e9d0 'IPAddress (IPFlowID::*)() const'
|   |-RecordType 0x5611b100dda0 'IPFlowID'
|   | `-CXXRecord 0x5611b100dd08 'IPFlowID'
|   `-ParenType 0x5611b100e970 'IPAddress () const' sugar
|     `-FunctionProtoType 0x5611b0e41160 'IPAddress () const' const cdecl
|       `-RecordType 0x5611b0a75cb0 'IPAddress'
|         `-CXXRecord 0x5611b0e2c3a0 'IPAddress'
|-CXXConversionDecl 0x5611b100eb98 <line:57:5, line:59:5> line:57:5 operator IPAddress (IPFlowID::*)() const 'IPFlowID::unspecified_bool_type () const'
| `-CompoundStmt 0x5611b1011bd0 <col:44, line:59:5>
|   `-ReturnStmt 0x5611b1011bc0 <line:58:2, col:47>
|     `-ConditionalOperator 0x5611b1011b90 <col:9, col:47> 'IPAddress (IPFlowID::*)() const'
|       |-BinaryOperator 0x5611b1011ab8 <col:9, col:19> 'bool' '||'
|       | |-ImplicitCastExpr 0x5611b1011a88 <col:9> 'bool' <IntegralToBoolean>
|       | | `-ImplicitCastExpr 0x5611b1011a08 <col:9> 'uint32_t':'unsigned int' <UserDefinedConversion>
|       | |   `-CXXMemberCallExpr 0x5611b10119e8 <col:9> 'uint32_t':'unsigned int'
|       | |     `-MemberExpr 0x5611b10119b8 <col:9> '<bound member function type>' .operator unsigned int 0x5611b0e2d638
|       | |       `-MemberExpr 0x5611b1011948 <col:9> 'const IPAddress' lvalue ->_saddr 0x5611b100fe98
|       | |         `-CXXThisExpr 0x5611b1011938 <col:9> 'const IPFlowID *' implicit this
|       | `-ImplicitCastExpr 0x5611b1011aa0 <col:19> 'bool' <IntegralToBoolean>
|       |   `-ImplicitCastExpr 0x5611b1011a70 <col:19> 'uint32_t':'unsigned int' <UserDefinedConversion>
|       |     `-CXXMemberCallExpr 0x5611b1011a50 <col:19> 'uint32_t':'unsigned int'
|       |       `-MemberExpr 0x5611b1011a20 <col:19> '<bound member function type>' .operator unsigned int 0x5611b0e2d638
|       |         `-MemberExpr 0x5611b1011988 <col:19> 'const IPAddress' lvalue ->_daddr 0x5611b100fef8
|       |           `-CXXThisExpr 0x5611b1011978 <col:19> 'const IPFlowID *' implicit this
|       |-UnaryOperator 0x5611b1011b40 <col:28, col:39> 'IPAddress (IPFlowID::*)() const' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x5611b1011b10 <col:29, col:39> 'IPAddress () const' CXXMethod 0x5611b100ec68 'saddr' 'IPAddress () const'
|       `-ImplicitCastExpr 0x5611b1011b78 <col:47> 'IPAddress (IPFlowID::*)() const' <NullToMemberPointer>
|         `-IntegerLiteral 0x5611b1011b58 <col:47> 'int' 0
|-CXXMethodDecl 0x5611b100ec68 <line:63:5, line:65:5> line:63:15 used saddr 'IPAddress () const'
| `-CompoundStmt 0x5611b1011c68 <col:29, line:65:5>
|   `-ReturnStmt 0x5611b1011c58 <line:64:2, col:9>
|     `-CXXConstructExpr 0x5611b1011c28 <col:9> 'IPAddress' 'void (const IPAddress &) noexcept'
|       `-MemberExpr 0x5611b1011bf8 <col:9> 'const IPAddress' lvalue ->_saddr 0x5611b100fe98
|         `-CXXThisExpr 0x5611b1011be8 <col:9> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x5611b100ed88 <line:67:5, line:69:5> line:67:14 used sport 'uint16_t () const'
| `-CompoundStmt 0x5611b1011ce8 <col:28, line:69:5>
|   `-ReturnStmt 0x5611b1011cd8 <line:68:2, col:9>
|     `-ImplicitCastExpr 0x5611b1011cc0 <col:9> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-MemberExpr 0x5611b1011c90 <col:9> 'const uint16_t':'const unsigned short' lvalue ->_sport 0x5611b100ff58
|         `-CXXThisExpr 0x5611b1011c80 <col:9> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x5611b100ee48 <line:71:5, line:73:5> line:71:15 used daddr 'IPAddress () const'
| `-CompoundStmt 0x5611b1011d80 <col:29, line:73:5>
|   `-ReturnStmt 0x5611b1011d70 <line:72:2, col:9>
|     `-CXXConstructExpr 0x5611b1011d40 <col:9> 'IPAddress' 'void (const IPAddress &) noexcept'
|       `-MemberExpr 0x5611b1011d10 <col:9> 'const IPAddress' lvalue ->_daddr 0x5611b100fef8
|         `-CXXThisExpr 0x5611b1011d00 <col:9> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x5611b100ef08 <line:75:5, line:77:5> line:75:14 used dport 'uint16_t () const'
| `-CompoundStmt 0x5611b1011e00 <col:28, line:77:5>
|   `-ReturnStmt 0x5611b1011df0 <line:76:2, col:9>
|     `-ImplicitCastExpr 0x5611b1011dd8 <col:9> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-MemberExpr 0x5611b1011da8 <col:9> 'const uint16_t':'const unsigned short' lvalue ->_dport 0x5611b100ffb8
|         `-CXXThisExpr 0x5611b1011d98 <col:9> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x5611b100f048 <line:80:5, line:82:5> line:80:10 set_saddr 'void (IPAddress)'
| |-ParmVarDecl 0x5611b100efb8 <col:20, col:30> col:30 used a 'IPAddress'
| `-CompoundStmt 0x5611b10123a8 <col:33, line:82:5>
|   `-CXXOperatorCallExpr 0x5611b1012370 <line:81:2, col:11> 'IPAddress' lvalue
|     |-ImplicitCastExpr 0x5611b1012358 <col:9> 'IPAddress &(*)(const IPAddress &) noexcept' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5611b1012190 <col:9> 'IPAddress &(const IPAddress &) noexcept' lvalue CXXMethod 0x5611b1011e78 'operator=' 'IPAddress &(const IPAddress &) noexcept'
|     |-MemberExpr 0x5611b1011e28 <col:2> 'IPAddress' lvalue ->_saddr 0x5611b100fe98
|     | `-CXXThisExpr 0x5611b1011e18 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x5611b1012178 <col:11> 'const IPAddress' lvalue <NoOp>
|       `-DeclRefExpr 0x5611b1011e58 <col:11> 'IPAddress' lvalue ParmVar 0x5611b100efb8 'a' 'IPAddress'
|-CXXMethodDecl 0x5611b100f1f8 <line:85:5, line:87:5> line:85:10 set_sport 'void (uint16_t)'
| |-ParmVarDecl 0x5611b100f100 <col:20, col:29> col:29 used p 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5611b1012458 <col:32, line:87:5>
|   `-BinaryOperator 0x5611b1012438 <line:86:2, col:11> 'uint16_t':'unsigned short' lvalue '='
|     |-MemberExpr 0x5611b10123d0 <col:2> 'uint16_t':'unsigned short' lvalue ->_sport 0x5611b100ff58
|     | `-CXXThisExpr 0x5611b10123c0 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x5611b1012420 <col:11> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5611b1012400 <col:11> 'uint16_t':'unsigned short' lvalue ParmVar 0x5611b100f100 'p' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5611b100f340 <line:89:5, line:91:5> line:89:10 set_daddr 'void (IPAddress)'
| |-ParmVarDecl 0x5611b100f2b0 <col:20, col:30> col:30 used a 'IPAddress'
| `-CompoundStmt 0x5611b1012558 <col:33, line:91:5>
|   `-CXXOperatorCallExpr 0x5611b1012520 <line:90:2, col:11> 'IPAddress' lvalue
|     |-ImplicitCastExpr 0x5611b1012508 <col:9> 'IPAddress &(*)(const IPAddress &) noexcept' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5611b10124e8 <col:9> 'IPAddress &(const IPAddress &) noexcept' lvalue CXXMethod 0x5611b1011e78 'operator=' 'IPAddress &(const IPAddress &) noexcept'
|     |-MemberExpr 0x5611b1012480 <col:2> 'IPAddress' lvalue ->_daddr 0x5611b100fef8
|     | `-CXXThisExpr 0x5611b1012470 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x5611b10124d0 <col:11> 'const IPAddress' lvalue <NoOp>
|       `-DeclRefExpr 0x5611b10124b0 <col:11> 'IPAddress' lvalue ParmVar 0x5611b100f2b0 'a' 'IPAddress'
|-CXXMethodDecl 0x5611b100f488 <line:94:5, line:96:5> line:94:10 set_dport 'void (uint16_t)'
| |-ParmVarDecl 0x5611b100f3f8 <col:20, col:29> col:29 used p 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5611b1012608 <col:32, line:96:5>
|   `-BinaryOperator 0x5611b10125e8 <line:95:2, col:11> 'uint16_t':'unsigned short' lvalue '='
|     |-MemberExpr 0x5611b1012580 <col:2> 'uint16_t':'unsigned short' lvalue ->_dport 0x5611b100ffb8
|     | `-CXXThisExpr 0x5611b1012570 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x5611b10125d0 <col:11> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5611b10125b0 <col:11> 'uint16_t':'unsigned short' lvalue ParmVar 0x5611b100f3f8 'p' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5611b100f750 <line:103:5, line:108:5> line:103:10 assign 'void (IPAddress, uint16_t, IPAddress, uint16_t)'
| |-ParmVarDecl 0x5611b100f540 <col:17, col:27> col:27 used saddr 'IPAddress'
| |-ParmVarDecl 0x5611b100f5b8 <col:34, col:43> col:43 used sport 'uint16_t':'unsigned short'
| |-ParmVarDecl 0x5611b100f630 <col:50, col:60> col:60 used daddr 'IPAddress'
| |-ParmVarDecl 0x5611b100f6a8 <col:67, col:76> col:76 used dport 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5611b1012920 <col:83, line:108:5>
|   |-CXXOperatorCallExpr 0x5611b10126d0 <line:104:2, col:11> 'IPAddress' lvalue
|   | |-ImplicitCastExpr 0x5611b10126b8 <col:9> 'IPAddress &(*)(const IPAddress &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5611b1012698 <col:9> 'IPAddress &(const IPAddress &) noexcept' lvalue CXXMethod 0x5611b1011e78 'operator=' 'IPAddress &(const IPAddress &) noexcept'
|   | |-MemberExpr 0x5611b1012630 <col:2> 'IPAddress' lvalue ->_saddr 0x5611b100fe98
|   | | `-CXXThisExpr 0x5611b1012620 <col:2> 'IPFlowID *' implicit this
|   | `-ImplicitCastExpr 0x5611b1012680 <col:11> 'const IPAddress' lvalue <NoOp>
|   |   `-DeclRefExpr 0x5611b1012660 <col:11> 'IPAddress' lvalue ParmVar 0x5611b100f540 'saddr' 'IPAddress'
|   |-CXXOperatorCallExpr 0x5611b10127b8 <line:105:2, col:11> 'IPAddress' lvalue
|   | |-ImplicitCastExpr 0x5611b10127a0 <col:9> 'IPAddress &(*)(const IPAddress &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5611b1012780 <col:9> 'IPAddress &(const IPAddress &) noexcept' lvalue CXXMethod 0x5611b1011e78 'operator=' 'IPAddress &(const IPAddress &) noexcept'
|   | |-MemberExpr 0x5611b1012718 <col:2> 'IPAddress' lvalue ->_daddr 0x5611b100fef8
|   | | `-CXXThisExpr 0x5611b1012708 <col:2> 'IPFlowID *' implicit this
|   | `-ImplicitCastExpr 0x5611b1012768 <col:11> 'const IPAddress' lvalue <NoOp>
|   |   `-DeclRefExpr 0x5611b1012748 <col:11> 'IPAddress' lvalue ParmVar 0x5611b100f630 'daddr' 'IPAddress'
|   |-BinaryOperator 0x5611b1012868 <line:106:2, col:11> 'uint16_t':'unsigned short' lvalue '='
|   | |-MemberExpr 0x5611b1012800 <col:2> 'uint16_t':'unsigned short' lvalue ->_sport 0x5611b100ff58
|   | | `-CXXThisExpr 0x5611b10127f0 <col:2> 'IPFlowID *' implicit this
|   | `-ImplicitCastExpr 0x5611b1012850 <col:11> 'uint16_t':'unsigned short' <LValueToRValue>
|   |   `-DeclRefExpr 0x5611b1012830 <col:11> 'uint16_t':'unsigned short' lvalue ParmVar 0x5611b100f5b8 'sport' 'uint16_t':'unsigned short'
|   `-BinaryOperator 0x5611b1012900 <line:107:2, col:11> 'uint16_t':'unsigned short' lvalue '='
|     |-MemberExpr 0x5611b1012898 <col:2> 'uint16_t':'unsigned short' lvalue ->_dport 0x5611b100ffb8
|     | `-CXXThisExpr 0x5611b1012888 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x5611b10128e8 <col:11> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5611b10128c8 <col:11> 'uint16_t':'unsigned short' lvalue ParmVar 0x5611b100f6a8 'dport' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5611b100f858 <line:113:5, line:115:5> line:113:14 used reverse 'IPFlowID () const'
| `-CompoundStmt 0x5611b1013458 <col:30, line:115:5>
|   `-ReturnStmt 0x5611b1013448 <line:114:2, col:48>
|     `-ExprWithCleanups 0x5611b1013430 <col:9, col:48> 'IPFlowID'
|       `-CXXConstructExpr 0x5611b1013400 <col:9, col:48> 'IPFlowID' 'void (IPFlowID &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5611b1012fb8 <col:9, col:48> 'IPFlowID' xvalue
|           `-CXXTemporaryObjectExpr 0x5611b1012e28 <col:9, col:48> 'IPFlowID' 'void (IPAddress, uint16_t, IPAddress, uint16_t)'
|             |-CXXConstructExpr 0x5611b1012d98 <col:18> 'IPAddress' 'void (const IPAddress &) noexcept'
|             | `-MemberExpr 0x5611b1012970 <col:18> 'const IPAddress' lvalue ->_daddr 0x5611b100fef8
|             |   `-CXXThisExpr 0x5611b1012960 <col:18> 'const IPFlowID *' implicit this
|             |-ImplicitCastExpr 0x5611b1012dc8 <col:26> 'uint16_t':'unsigned short' <LValueToRValue>
|             | `-MemberExpr 0x5611b10129b0 <col:26> 'const uint16_t':'const unsigned short' lvalue ->_dport 0x5611b100ffb8
|             |   `-CXXThisExpr 0x5611b10129a0 <col:26> 'const IPFlowID *' implicit this
|             |-CXXConstructExpr 0x5611b1012de0 <col:34> 'IPAddress' 'void (const IPAddress &) noexcept'
|             | `-MemberExpr 0x5611b10129f0 <col:34> 'const IPAddress' lvalue ->_saddr 0x5611b100fe98
|             |   `-CXXThisExpr 0x5611b10129e0 <col:34> 'const IPFlowID *' implicit this
|             `-ImplicitCastExpr 0x5611b1012e10 <col:42> 'uint16_t':'unsigned short' <LValueToRValue>
|               `-MemberExpr 0x5611b1012a30 <col:42> 'const uint16_t':'const unsigned short' lvalue ->_sport 0x5611b100ff58
|                 `-CXXThisExpr 0x5611b1012a20 <col:42> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x5611b100f918 <line:116:5, col:59> col:21 rev 'IPFlowID () const' inline
| `-DeprecatedAttr 0x5611b100f9b8 <col:48> "" ""
|-CXXMethodDecl 0x5611b100fa78 <line:122:5, col:34> col:23 hashcode 'hashcode_t () const' inline
|-CXXMethodDecl 0x5611b100fb38 <line:127:5, col:22> col:12 used unparse 'String () const'
|-CXXConversionDecl 0x5611b100fc08 <line:129:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x5611b100fcb0 <col:51> "" ""
|-CXXMethodDecl 0x5611b100fd50 <line:130:5, col:55> col:19 s 'String () const' inline
| `-DeprecatedAttr 0x5611b100fdf0 <col:44> "" ""
|-AccessSpecDecl 0x5611b100fe60 <line:132:3, col:12> col:3 protected
|-FieldDecl 0x5611b100fe98 <line:135:5, col:15> col:15 referenced _saddr 'IPAddress'
|-FieldDecl 0x5611b100fef8 <line:136:5, col:15> col:15 referenced _daddr 'IPAddress'
|-FieldDecl 0x5611b100ff58 <line:137:5, col:14> col:14 referenced _sport 'uint16_t':'unsigned short'
|-FieldDecl 0x5611b100ffb8 <line:138:5, col:14> col:14 referenced _dport 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5611b1010f30 <line:140:5, col:26> col:9 unparse 'int (char *) const'
| `-ParmVarDecl 0x5611b1010020 <col:17, col:23> col:23 s 'char *'
|-FriendDecl 0x5611b1011218 <line:141:5, col:76> col:25
| `-FunctionDecl 0x5611b1011158 parent 0x5611b0855488 <col:5, col:76> col:25 operator<< 'StringAccum &(StringAccum &, const IPFlowID &)'
|   |-ParmVarDecl 0x5611b1010fe8 <col:36, col:49> col:49 sa 'StringAccum &'
|   `-ParmVarDecl 0x5611b1011088 <col:53, col:69> col:69 flow_id 'const IPFlowID &'
|-CXXConstructorDecl 0x5611b1012a60 <line:9:7> col:7 implicit constexpr IPFlowID 'void (const IPFlowID &)' inline default trivial noexcept-unevaluated 0x5611b1012a60
| `-ParmVarDecl 0x5611b1012b78 <col:7> col:7 'const IPFlowID &'
|-CXXConstructorDecl 0x5611b1012c18 <col:7> col:7 implicit used constexpr IPFlowID 'void (IPFlowID &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5611b1012d28 <col:7> col:7 used 'IPFlowID &&'
| |-CXXCtorInitializer Field 0x5611b100fe98 '_saddr' 'IPAddress'
| | `-CXXConstructExpr 0x5611b10130a8 <col:7> 'IPAddress' 'void (IPAddress &&) noexcept'
| |   `-MemberExpr 0x5611b1013060 <col:7> 'IPAddress' xvalue ._saddr 0x5611b100fe98
| |     `-CXXStaticCastExpr 0x5611b1013030 <col:7> 'IPFlowID' xvalue static_cast<class IPFlowID &&> <NoOp>
| |       `-DeclRefExpr 0x5611b1013000 <col:7> 'IPFlowID' lvalue ParmVar 0x5611b1012d28 '' 'IPFlowID &&'
| |-CXXCtorInitializer Field 0x5611b100fef8 '_daddr' 'IPAddress'
| | `-CXXConstructExpr 0x5611b10131a8 <col:7> 'IPAddress' 'void (IPAddress &&) noexcept'
| |   `-MemberExpr 0x5611b1013160 <col:7> 'IPAddress' xvalue ._daddr 0x5611b100fef8
| |     `-CXXStaticCastExpr 0x5611b1013130 <col:7> 'IPFlowID' xvalue static_cast<class IPFlowID &&> <NoOp>
| |       `-DeclRefExpr 0x5611b1013100 <col:7> 'IPFlowID' lvalue ParmVar 0x5611b1012d28 '' 'IPFlowID &&'
| |-CXXCtorInitializer Field 0x5611b100ff58 '_sport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x5611b10132a8 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |   `-MemberExpr 0x5611b1013260 <col:7> 'uint16_t':'unsigned short' xvalue ._sport 0x5611b100ff58
| |     `-CXXStaticCastExpr 0x5611b1013230 <col:7> 'IPFlowID' xvalue static_cast<class IPFlowID &&> <NoOp>
| |       `-DeclRefExpr 0x5611b1013200 <col:7> 'IPFlowID' lvalue ParmVar 0x5611b1012d28 '' 'IPFlowID &&'
| |-CXXCtorInitializer Field 0x5611b100ffb8 '_dport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x5611b1013390 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |   `-MemberExpr 0x5611b1013348 <col:7> 'uint16_t':'unsigned short' xvalue ._dport 0x5611b100ffb8
| |     `-CXXStaticCastExpr 0x5611b1013318 <col:7> 'IPFlowID' xvalue static_cast<class IPFlowID &&> <NoOp>
| |       `-DeclRefExpr 0x5611b10132e8 <col:7> 'IPFlowID' lvalue ParmVar 0x5611b1012d28 '' 'IPFlowID &&'
| `-CompoundStmt 0x5611b10133f0 <col:7>
`-CXXDestructorDecl 0x5611b1012e78 <col:7> col:7 implicit referenced ~IPFlowID 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPFlowID = type { %class.IPAddress, %class.IPAddress, i16, i16 }
  NonVirtualBaseLLVMType:%class.IPFlowID = type { %class.IPAddress, %class.IPAddress, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b102d858 <../elements/local/tcpconn.hh:26:1, line:65:1> line:26:7 class TCPConn definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5611b102d9b8 <col:1, col:7> col:7 implicit referenced class TCPConn
|-AccessSpecDecl 0x5611b102da48 <line:27:1, col:8> col:1 private
|-FieldDecl 0x5611b102da80 <line:28:3, col:13> col:13 _tcpdemux 'TCPDemux *'
|-FieldDecl 0x5611b102dae0 <line:30:3, col:8> col:8 _active 'bool'
|-FieldDecl 0x5611b102db40 <line:31:3, col:8> col:8 _listen 'bool'
|-FieldDecl 0x5611b102dba0 <line:32:3, col:8> col:8 _established 'bool'
|-FieldDecl 0x5611b102dc08 <line:34:3, col:12> col:12 _seq_nxt 'unsigned int'
|-FieldDecl 0x5611b102dc68 <line:35:3, col:12> col:12 _flow 'IPFlowID'
|-CXXMethodDecl 0x5611b102ddb8 <line:37:3, col:34> col:8 connect_handler 'bool (IPFlowID)'
| `-ParmVarDecl 0x5611b102dcc8 <col:24, col:33> col:33 f 'IPFlowID'
|-CXXMethodDecl 0x5611b102df00 <line:38:3, col:33> col:8 listen_handler 'bool (IPFlowID)'
| `-ParmVarDecl 0x5611b102de70 <col:23, col:32> col:32 f 'IPFlowID'
|-CXXMethodDecl 0x5611b102dfc8 <line:39:3, col:17> col:8 send_syn 'void ()'
|-CXXMethodDecl 0x5611b102e088 <line:41:3, col:14> col:8 reset 'void ()'
|-CXXMethodDecl 0x5611b102e1f8 <line:42:3, col:22> col:8 iput 'bool (Packet *)'
| `-ParmVarDecl 0x5611b102e138 <col:13, col:21> col:21 p 'Packet *'
|-CXXMethodDecl 0x5611b102e340 <line:43:3, col:25> col:11 oput 'Packet *(Packet *)'
| `-ParmVarDecl 0x5611b102e2b0 <col:16, col:24> col:24 p 'Packet *'
|-AccessSpecDecl 0x5611b102e3e8 <line:45:1, col:7> col:1 public
|-CXXConstructorDecl 0x5611b102e448 <line:46:3, col:11> col:3 TCPConn 'void ()'
|-CXXDestructorDecl 0x5611b102e538 <line:47:3, col:12> col:3 ~TCPConn 'void ()' noexcept-unevaluated 0x5611b102e538
| `-Overrides: [ 0x5611b0e8dcb8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x5611b102e670 <line:49:3, col:54> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x5611b0e8f0e8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5611b102fb90 <col:34, col:54>
|   `-ReturnStmt 0x5611b102fb80 <col:36, col:43>
|     `-ImplicitCastExpr 0x5611b102fb68 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5611b102fb48 <col:43> 'const char [8]' lvalue "TCPConn"
|-CXXMethodDecl 0x5611b102e738 <line:50:3, col:50> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x5611b0e8f1b0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5611b102fbf0 <col:34, col:50>
|   `-ReturnStmt 0x5611b102fbe0 <col:36, col:43>
|     `-ImplicitCastExpr 0x5611b102fbc8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5611b102fba8 <col:43> 'const char [4]' lvalue "2/3"
|-CXXMethodDecl 0x5611b102e800 <line:51:3, col:53> col:15 processing 'const char *() const'
| |-Overrides: [ 0x5611b0e8f548 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x5611b102fc50 <col:34, col:53>
|   `-ReturnStmt 0x5611b102fc40 <col:36, col:43>
|     `-ImplicitCastExpr 0x5611b102fc28 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5611b102fc08 <col:43> 'const char [7]' lvalue "hl/hlh"
|-CXXMethodDecl 0x5611b102e948 <line:53:3, col:32> col:7 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x5611b0e90a60 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x5611b102e8b0 <col:18, col:31> col:32 'ErrorHandler *'
|-CXXMethodDecl 0x5611b102ea90 <line:54:3, col:28> col:8 cleanup 'void (Element::CleanupStage)'
| |-Overrides: [ 0x5611b0e91278 Element::cleanup 'void (Element::CleanupStage)' ]
| `-ParmVarDecl 0x5611b102ea00 <col:16> col:28 'Element::CleanupStage'
|-CXXMethodDecl 0x5611b102ed70 <line:55:3, col:57> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5611b0e90810 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5611b102ec20 <col:17, col:33> col:33 conf 'Vector<String> &'
| `-ParmVarDecl 0x5611b102ec98 <col:39, col:53> col:53 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5611b102ef48 <line:57:3, col:26> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x5611b0e8df88 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x5611b102ee38 <col:13> col:16 'int'
| `-ParmVarDecl 0x5611b102eeb0 <col:18, col:25> col:26 'Packet *'
|-CXXMethodDecl 0x5611b102f0a0 <line:58:3, col:19> col:11 pull 'Packet *(int)'
| |-Overrides: [ 0x5611b0e8e118 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x5611b102f010 <col:16> col:19 'int'
|-CXXMethodDecl 0x5611b102f168 <line:59:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x5611b0e908e0 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x5611b102f438 <line:61:3, line:62:55> line:61:14 ctrl_write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5611b102f218 <line:62:6, col:19> col:20 'const String &'
| |-ParmVarDecl 0x5611b102f290 <col:22, col:30> col:31 'Element *'
| |-ParmVarDecl 0x5611b102f310 <col:33, col:38> col:39 'void *'
| `-ParmVarDecl 0x5611b102f388 <col:41, col:54> col:55 'ErrorHandler *'
|-CXXMethodDecl 0x5611b102f728 <line:63:3, line:64:55> line:63:14 reset_write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5611b102f508 <line:64:6, col:19> col:20 'const String &'
| |-ParmVarDecl 0x5611b102f580 <col:22, col:30> col:31 'Element *'
| |-ParmVarDecl 0x5611b102f600 <col:33, col:38> col:39 'void *'
| `-ParmVarDecl 0x5611b102f678 <col:41, col:54> col:55 'ErrorHandler *'
|-CXXConstructorDecl 0x5611b102f818 <line:26:7> col:7 implicit TCPConn 'void (const TCPConn &)' inline default_delete noexcept-unevaluated 0x5611b102f818
| `-ParmVarDecl 0x5611b102f928 <col:7> col:7 'const TCPConn &'
`-CXXMethodDecl 0x5611b102f9c8 <col:7> col:7 implicit operator= 'TCPConn &(const TCPConn &)' inline default_delete noexcept-unevaluated 0x5611b102f9c8
  `-ParmVarDecl 0x5611b102fad8 <col:7> col:7 'const TCPConn &'

Layout: <CGRecordLayout
  LLVMType:%class.TCPConn = type <{ %class.Element.base, [4 x i8], %class.TCPDemux*, i8, i8, i8, i8, i32, %class.IPFlowID, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.TCPConn.base = type <{ %class.Element.base, [4 x i8], %class.TCPDemux*, i8, i8, i8, i8, i32, %class.IPFlowID }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class RouterVisitor
         0 |   (RouterVisitor vtable pointer)
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Bitvector
         0 |   int _max
         8 |   Bitvector::word_type * _data
        16 |   Bitvector::word_type [2] _f
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class ElementTracker
         0 |   class RouterVisitor (primary base)
         0 |     (RouterVisitor vtable pointer)
         8 |   class Bitvector _reached
         8 |     int _max
        16 |     Bitvector::word_type * _data
        24 |     Bitvector::word_type [2] _f
        32 |   class Vector<class Element *> _elements
        32 |     class vector_memory<class sized_array_memory<8> > vm_
        32 |       vector_memory<class sized_array_memory<8> >::type * l_
        40 |       vector_memory::size_type n_
        44 |       vector_memory::size_type capacity_
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class ElementCastTracker
         0 |   class ElementTracker (primary base)
         0 |     class RouterVisitor (primary base)
         0 |       (RouterVisitor vtable pointer)
         8 |     class Bitvector _reached
         8 |       int _max
        16 |       Bitvector::word_type * _data
        24 |       Bitvector::word_type [2] _f
        32 |     class Vector<class Element *> _elements
        32 |       class vector_memory<class sized_array_memory<8> > vm_
        32 |         vector_memory<class sized_array_memory<8> >::type * l_
        40 |         vector_memory::size_type n_
        44 |         vector_memory::size_type capacity_
        48 |   class String _name
        48 |     struct String::rep_t _r
        48 |       const char * data
        56 |       int length
        64 |       struct String::memo_t * memo
           | [sizeof=72, dsize=72, align=8,
           |  nvsize=72, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0eb5b90 <../dummy_inc/click/routervisitor.hh:15:1, line:53:1> line:15:7 referenced class RouterVisitor definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5611b0eb5ca8 <col:1, col:7> col:7 implicit referenced class RouterVisitor
|-AccessSpecDecl 0x5611b0eb5d38 <col:23, col:29> col:23 public
|-CXXConstructorDecl 0x5611b0eb5dc0 <line:18:5, line:19:5> line:18:5 RouterVisitor 'void ()'
| `-CompoundStmt 0x5611b0eb65d8 <col:21, line:19:5>
|-CXXDestructorDecl 0x5611b0eb5eb0 <line:22:5, line:23:5> line:22:13 used ~RouterVisitor 'void () noexcept' virtual
| `-CompoundStmt 0x5611b0eb65e8 <col:30, line:23:5>
|-CXXMethodDecl 0x5611b0eb6328 <line:50:5, line:51:54> line:50:18 visit 'bool (Element *, bool, int, Element *, int, int)' virtual
| |-ParmVarDecl 0x5611b0eb5fa0 <col:24, col:33> col:33 e 'Element *'
| |-ParmVarDecl 0x5611b0eb6018 <col:36, col:41> col:41 isoutput 'bool'
| |-ParmVarDecl 0x5611b0eb6098 <col:51, col:55> col:55 port 'int'
| |-ParmVarDecl 0x5611b0eb6110 <line:51:10, col:19> col:19 from_e 'Element *'
| |-ParmVarDecl 0x5611b0eb6190 <col:27, col:31> col:31 from_port 'int'
| `-ParmVarDecl 0x5611b0eb6210 <col:42, col:46> col:46 distance 'int'
|-CXXMethodDecl 0x5611b0eb6458 <line:15:7> col:7 implicit operator= 'RouterVisitor &(const RouterVisitor &)' inline default noexcept-unevaluated 0x5611b0eb6458
| `-ParmVarDecl 0x5611b0eb6568 <col:7> col:7 'const RouterVisitor &'
`-CXXConstructorDecl 0x5611b0ec2c48 <col:7> col:7 implicit constexpr RouterVisitor 'void (const RouterVisitor &)' inline default noexcept-unevaluated 0x5611b0ec2c48
  `-ParmVarDecl 0x5611b0ec2d58 <col:7> col:7 'const RouterVisitor &'

Layout: <CGRecordLayout
  LLVMType:%class.RouterVisitor = type { i32 (...)** }
  NonVirtualBaseLLVMType:%class.RouterVisitor = type { i32 (...)** }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0ea50f8 prev 0x5611b0e8d8a0 <../dummy_inc/click/bitvector.hh:20:1, line:95:1> line:20:7 referenced class Bitvector definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5611b0ea51f0 <col:1, col:7> col:7 implicit referenced class Bitvector
|-AccessSpecDecl 0x5611b0ea5280 <line:21:3, col:9> col:3 public
|-CXXRecordDecl 0x5611b0ea52a8 <line:23:5, col:11> col:11 referenced class Bit
|-TypedefDecl 0x5611b0ea5468 <line:24:5, col:56> col:31 referenced unspecified_bool_type 'bool (Bitvector::*)() const'
| `-MemberPointerType 0x5611b0ea53e0 'bool (Bitvector::*)() const'
|   |-RecordType 0x5611b0e8d930 'Bitvector'
|   | `-CXXRecord 0x5611b0ea50f8 'Bitvector'
|   `-ParenType 0x5611b0ea5380 'bool () const' sugar
|     `-FunctionProtoType 0x5611b0902f90 'bool () const' const cdecl
|       `-BuiltinType 0x5611b0855500 'bool'
|-TypedefDecl 0x5611b0ea54d0 <line:26:5, col:22> col:22 referenced word_type 'uint32_t':'unsigned int'
| `-TypedefType 0x5611b09b0500 'uint32_t' sugar
|   |-Typedef 0x5611b08be4c8 'uint32_t'
|   `-TypedefType 0x5611b08975a0 '__uint32_t' sugar
|     |-Typedef 0x5611b0897198 '__uint32_t'
|     `-BuiltinType 0x5611b0855620 'unsigned int'
|-EnumDecl 0x5611b0ea5528 <line:27:5, col:47> col:5
| |-EnumConstantDecl 0x5611b0ea5630 <col:12, col:20> col:12 referenced wbits 'Bitvector::(anonymous enum at ../dummy_inc/click/bitvector.hh:27:5)'
| | `-ImplicitCastExpr 0x5611b0ea57a0 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0ea5610 <col:20> 'int' Int: 32
| |     `-IntegerLiteral 0x5611b0ea55f0 <col:20> 'int' 32
| |-EnumConstantDecl 0x5611b0ea56c0 <col:24, col:33> col:24 referenced wshift 'Bitvector::(anonymous enum at ../dummy_inc/click/bitvector.hh:27:5)'
| | `-ImplicitCastExpr 0x5611b0ea57b8 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0ea56a0 <col:33> 'int' Int: 5
| |     `-IntegerLiteral 0x5611b0ea5680 <col:33> 'int' 5
| `-EnumConstantDecl 0x5611b0ea5750 <col:36, col:44> col:36 referenced wmask 'Bitvector::(anonymous enum at ../dummy_inc/click/bitvector.hh:27:5)'
|   `-ImplicitCastExpr 0x5611b0ea57d0 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0ea5730 <col:44> 'int' Int: 31
|       `-IntegerLiteral 0x5611b0ea5710 <col:44> 'int' 31
|-CXXConstructorDecl 0x5611b0ea5820 <line:29:5, col:22> col:12 Bitvector 'void ()' inline
|-CXXConstructorDecl 0x5611b0ea5970 <line:30:5, col:36> col:21 Bitvector 'void (int)' inline
| `-ParmVarDecl 0x5611b0ea58e0 <col:31, col:35> col:35 n 'int'
|-CXXConstructorDecl 0x5611b0ea5ac0 <line:31:5, col:39> col:21 Bitvector 'void (bool)' inline
| `-ParmVarDecl 0x5611b0ea5a30 <col:31, col:36> col:36 bit 'bool'
|-CXXConstructorDecl 0x5611b0ea5cd8 <line:32:5, col:37> col:12 Bitvector 'void (int, bool)' inline
| |-ParmVarDecl 0x5611b0ea5b88 <col:22, col:26> col:26 n 'int'
| `-ParmVarDecl 0x5611b0ea5c00 <col:29, col:34> col:34 bit 'bool'
|-CXXConstructorDecl 0x5611b0ea5e88 <line:33:5, col:40> col:12 used Bitvector 'void (const Bitvector &)' inline
| `-ParmVarDecl 0x5611b0ea5dc8 <col:22, col:39> col:39 x 'const Bitvector &'
|-CXXDestructorDecl 0x5611b0ea5f80 <line:34:5, col:23> col:12 used ~Bitvector 'void () noexcept' inline
|-CXXMethodDecl 0x5611b0ea60b0 <line:36:5, col:23> col:16 used size 'int () const' inline
|-CXXMethodDecl 0x5611b0ea6228 <line:37:5, col:32> col:16 used operator[] 'Bitvector::Bit (int)' inline
| `-ParmVarDecl 0x5611b0ea6168 <col:27, col:31> col:31 i 'int'
|-CXXMethodDecl 0x5611b0ea6378 <line:38:5, col:35> col:17 used operator[] 'bool (int) const' inline
| `-ParmVarDecl 0x5611b0ea62e8 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5611b0ea64c8 <line:39:5, col:31> col:16 force_bit 'Bitvector::Bit (int)' inline
| `-ParmVarDecl 0x5611b0ea6438 <col:26, col:30> col:30 i 'int'
|-CXXMethodDecl 0x5611b0ea6598 <line:41:5, col:28> col:16 used word_size 'int () const' inline
|-CXXMethodDecl 0x5611b0ea6660 <line:42:5, col:27> col:16 max_word 'int () const' inline
|-CXXMethodDecl 0x5611b0ea6798 <line:43:5, col:29> col:23 words 'Bitvector::word_type *()' inline
|-CXXMethodDecl 0x5611b0ea68b8 <line:44:5, col:37> col:29 used words 'const Bitvector::word_type *() const' inline
|-CXXMethodDecl 0x5611b0ea6978 <line:46:5, col:17> col:10 used zero 'bool () const'
|-CXXConversionDecl 0x5611b0ea6ae8 <line:47:5, col:45> col:12 operator bool (Bitvector::*)() const 'Bitvector::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5611b0ea6bb8 <line:48:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5611b0ea6de8 <line:50:5, col:38> col:16 used assign 'Bitvector &(int, bool)'
| |-ParmVarDecl 0x5611b0ea6c70 <col:23, col:27> col:27 n 'int'
| `-ParmVarDecl 0x5611b0ea6ce8 <col:30, col:35> col:35 bit 'bool'
|-CXXMethodDecl 0x5611b0ea6f68 <line:51:5, col:44> col:16 operator= 'Bitvector &(const Bitvector &)'
| `-ParmVarDecl 0x5611b0ea6ea8 <col:26, col:43> col:43 x 'const Bitvector &'
|-CXXMethodDecl 0x5611b0ea7030 <line:52:5, col:16> col:10 used clear 'void ()'
|-CXXMethodDecl 0x5611b0ea7178 <line:53:5, col:22> col:10 used resize 'void (int)'
| `-ParmVarDecl 0x5611b0ea70e8 <col:17, col:21> col:21 n 'int'
|-FriendDecl 0x5611b0ea7438 <line:55:5, col:73> col:24
| `-FunctionDecl 0x5611b0ea7378 parent 0x5611b0855488 <col:5, col:73> col:24 used operator== 'bool (const Bitvector &, const Bitvector &)' inline
|   |-ParmVarDecl 0x5611b0ea7230 <col:35, col:52> col:52 a 'const Bitvector &'
|   `-ParmVarDecl 0x5611b0ea72a8 <col:55, col:72> col:72 b 'const Bitvector &'
|-FriendDecl 0x5611b0ea7658 <line:56:5, col:73> col:24
| `-FunctionDecl 0x5611b0ea7598 parent 0x5611b0855488 <col:5, col:73> col:24 operator!= 'bool (const Bitvector &, const Bitvector &)' inline
|   |-ParmVarDecl 0x5611b0ea7488 <col:35, col:52> col:52 a 'const Bitvector &'
|   `-ParmVarDecl 0x5611b0ea7500 <col:55, col:72> col:72 b 'const Bitvector &'
|-CXXMethodDecl 0x5611b0ea7768 <line:57:5, col:51> col:10 nonzero_intersection 'bool (const Bitvector &) const'
| `-ParmVarDecl 0x5611b0ea76a8 <col:31, col:48> col:48 x 'const Bitvector &'
|-CXXMethodDecl 0x5611b0ea7858 <line:59:5, col:34> col:22 used operator~ 'Bitvector () const' inline
|-FriendDecl 0x5611b0ea7b18 <line:60:5, col:70> col:29
| `-FunctionDecl 0x5611b0ea7a58 parent 0x5611b0855488 <col:5, col:70> col:29 used operator& 'Bitvector (Bitvector, const Bitvector &)' inline
|   |-ParmVarDecl 0x5611b0ea7908 <col:39, col:49> col:49 a 'Bitvector' destroyed
|   `-ParmVarDecl 0x5611b0ea7980 <col:52, col:69> col:69 b 'const Bitvector &'
|-FriendDecl 0x5611b0ea7d38 <line:61:5, col:70> col:29
| `-FunctionDecl 0x5611b0ea7c78 parent 0x5611b0855488 <col:5, col:70> col:29 operator| 'Bitvector (Bitvector, const Bitvector &)' inline
|   |-ParmVarDecl 0x5611b0ea7b68 <col:39, col:49> col:49 a 'Bitvector' destroyed
|   `-ParmVarDecl 0x5611b0ea7be0 <col:52, col:69> col:69 b 'const Bitvector &'
|-FriendDecl 0x5611b0ea7f58 <line:62:5, col:70> col:29
| `-FunctionDecl 0x5611b0ea7e98 parent 0x5611b0855488 <col:5, col:70> col:29 operator^ 'Bitvector (Bitvector, const Bitvector &)' inline
|   |-ParmVarDecl 0x5611b0ea7d88 <col:39, col:49> col:49 a 'Bitvector' destroyed
|   `-ParmVarDecl 0x5611b0ea7e00 <col:52, col:69> col:69 b 'const Bitvector &'
|-FriendDecl 0x5611b0ea8178 <line:63:5, col:70> col:29
| `-FunctionDecl 0x5611b0ea80b8 parent 0x5611b0855488 <col:5, col:70> col:29 operator- 'Bitvector (Bitvector, const Bitvector &)' inline
|   |-ParmVarDecl 0x5611b0ea7fa8 <col:39, col:49> col:49 a 'Bitvector' destroyed
|   `-ParmVarDecl 0x5611b0ea8020 <col:52, col:69> col:69 b 'const Bitvector &'
|-CXXMethodDecl 0x5611b0ea81d8 <line:65:5, col:15> col:10 used flip 'void ()'
|-CXXMethodDecl 0x5611b0ea8298 <line:66:5, col:24> col:17 negate 'void ()' inline
|-CXXMethodDecl 0x5611b0ea83d8 <line:67:5, col:45> col:16 used operator&= 'Bitvector &(const Bitvector &)'
| `-ParmVarDecl 0x5611b0ea8348 <col:27, col:44> col:44 x 'const Bitvector &'
|-CXXMethodDecl 0x5611b0ea8520 <line:68:5, col:45> col:16 used operator|= 'Bitvector &(const Bitvector &)'
| `-ParmVarDecl 0x5611b0ea8490 <col:27, col:44> col:44 x 'const Bitvector &'
|-CXXMethodDecl 0x5611b0ea8668 <line:69:5, col:45> col:16 used operator^= 'Bitvector &(const Bitvector &)'
| `-ParmVarDecl 0x5611b0ea85d8 <col:27, col:44> col:44 x 'const Bitvector &'
|-CXXMethodDecl 0x5611b0ea87b0 <line:70:5, col:52> col:23 operator-= 'Bitvector &(const Bitvector &)' inline
| `-ParmVarDecl 0x5611b0ea8720 <col:34, col:51> col:51 x 'const Bitvector &'
|-CXXMethodDecl 0x5611b0ea89b8 <line:71:5, col:50> col:10 offset_or 'void (const Bitvector &, int)'
| |-ParmVarDecl 0x5611b0ea8868 <col:20, col:37> col:37 x 'const Bitvector &'
| `-ParmVarDecl 0x5611b0ea88e8 <col:40, col:44> col:44 offset 'int'
|-CXXMethodDecl 0x5611b0ea8bc8 <line:72:5, col:70> col:10 or_with_difference 'void (const Bitvector &, Bitvector &)'
| |-ParmVarDecl 0x5611b0ea8a78 <col:29, col:46> col:46 x 'const Bitvector &'
| `-ParmVarDecl 0x5611b0ea8af0 <col:49, col:60> col:60 difference 'Bitvector &'
|-CXXMethodDecl 0x5611b0ea8d48 <line:74:5, col:27> col:10 used swap 'void (Bitvector &)'
| `-ParmVarDecl 0x5611b0ea8c88 <col:15, col:26> col:26 x 'Bitvector &'
|-TypedefDecl 0x5611b0ea8e00 <line:77:5, col:23> col:23 data_word_type 'Bitvector::word_type':'unsigned int'
| |-TypedefType 0x5611b0ea6700 'Bitvector::word_type' sugar
| | |-Typedef 0x5611b0ea54d0 'word_type'
| | `-TypedefType 0x5611b09b0500 'uint32_t' sugar
| |   |-Typedef 0x5611b08be4c8 'uint32_t'
| |   `-TypedefType 0x5611b08975a0 '__uint32_t' sugar
| |     |-Typedef 0x5611b0897198 '__uint32_t'
| |     `-BuiltinType 0x5611b0855620 'unsigned int'
| `-DeprecatedAttr 0x5611b0ea8e58 <col:53> "" ""
|-EnumDecl 0x5611b0ea8ec8 <line:78:5, col:35> col:5
| `-EnumConstantDecl 0x5611b0ea8fd0 <col:12, col:29> col:12 data_word_bits 'Bitvector::(anonymous enum at ../dummy_inc/click/bitvector.hh:78:5)'
|   `-ImplicitCastExpr 0x5611b0ea9020 <col:29> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0ea8fb0 <col:29> 'Bitvector::(anonymous enum at ../dummy_inc/click/bitvector.hh:27:5)' Int: 32
|       `-DeclRefExpr 0x5611b0ea8f90 <col:29> 'Bitvector::(anonymous enum at ../dummy_inc/click/bitvector.hh:27:5)' EnumConstant 0x5611b0ea5630 'wbits' 'Bitvector::(anonymous enum at ../dummy_inc/click/bitvector.hh:27:5)'
|-CXXMethodDecl 0x5611b0ea9058 <line:79:5, col:62> col:23 data_words 'Bitvector::word_type *()' inline
| `-DeprecatedAttr 0x5611b0ea90f8 <col:51> "" ""
|-CXXMethodDecl 0x5611b0ea9188 <line:80:5, col:74> col:29 data_words 'const Bitvector::word_type *() const' inline
| `-DeprecatedAttr 0x5611b0ea9228 <col:63> "" ""
|-AccessSpecDecl 0x5611b0ea9298 <line:83:3, col:10> col:3 private
|-EnumDecl 0x5611b0ea92c0 <line:85:5, col:54> col:5
| |-EnumConstantDecl 0x5611b0ea93c0 <col:12, col:22> col:12 referenced ninline 'Bitvector::(anonymous enum at ../dummy_inc/click/bitvector.hh:85:5)'
| | `-ImplicitCastExpr 0x5611b0ea94f8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0ea93a0 <col:22> 'int' Int: 2
| |     `-IntegerLiteral 0x5611b0ea9380 <col:22> 'int' 2
| `-EnumConstantDecl 0x5611b0ea94a8 <col:25, col:48> col:25 referenced inlinebits 'Bitvector::(anonymous enum at ../dummy_inc/click/bitvector.hh:85:5)'
|   `-ImplicitCastExpr 0x5611b0ea9510 <col:38, col:48> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0ea9488 <col:38, col:48> 'int' Int: 64
|       `-BinaryOperator 0x5611b0ea9468 <col:38, col:48> 'int' '*'
|         |-DeclRefExpr 0x5611b0ea9410 <col:38> 'int' EnumConstant 0x5611b0ea93c0 'ninline' 'Bitvector::(anonymous enum at ../dummy_inc/click/bitvector.hh:85:5)'
|         `-ImplicitCastExpr 0x5611b0ea9450 <col:48> 'int' <IntegralCast>
|           `-DeclRefExpr 0x5611b0ea9430 <col:48> 'Bitvector::(anonymous enum at ../dummy_inc/click/bitvector.hh:27:5)' EnumConstant 0x5611b0ea5630 'wbits' 'Bitvector::(anonymous enum at ../dummy_inc/click/bitvector.hh:27:5)'
|-FieldDecl 0x5611b0ea9540 <line:87:5, col:9> col:9 referenced _max 'int'
|-FieldDecl 0x5611b0ea95a0 <line:88:5, col:16> col:16 referenced _data 'Bitvector::word_type *'
|-FieldDecl 0x5611b0ea9688 <line:89:5, col:25> col:15 referenced _f 'Bitvector::word_type [2]'
|-CXXMethodDecl 0x5611b0ea9778 <line:91:5, col:51> col:10 used finish_copy_constructor 'void (const Bitvector &)'
| `-ParmVarDecl 0x5611b0ea96e8 <col:34, col:50> col:51 'const Bitvector &'
|-CXXMethodDecl 0x5611b0ea9840 <line:92:5, col:28> col:17 clear_last 'void ()' inline
`-CXXMethodDecl 0x5611b0ea9a08 <line:93:5, col:31> col:10 hard_resize 'void (int, bool)'
  |-ParmVarDecl 0x5611b0ea98f8 <col:22> col:25 'int'
  `-ParmVarDecl 0x5611b0ea9970 <col:27> col:31 'bool'

Layout: <CGRecordLayout
  LLVMType:%class.Bitvector = type { i32, i32*, [2 x i32] }
  NonVirtualBaseLLVMType:%class.Bitvector = type { i32, i32*, [2 x i32] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0eb65f8 <../dummy_inc/click/routervisitor.hh:64:1, line:120:1> line:64:7 referenced class ElementTracker definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'RouterVisitor'
|-CXXRecordDecl 0x5611b0eb6758 <col:1, col:7> col:7 implicit referenced class ElementTracker
|-AccessSpecDecl 0x5611b0eb67e8 <col:47, col:53> col:47 public
|-CXXConstructorDecl 0x5611b0eb6928 <line:68:5, col:34> col:5 used ElementTracker 'void (Router *)'
| `-ParmVarDecl 0x5611b0eb6820 <col:20, col:28> col:28 router 'Router *'
|-CXXMethodDecl 0x5611b0eb6c90 <line:71:5, line:73:5> line:71:30 elements 'const Vector<Element *> &() const'
| `-CompoundStmt 0x5611b0ec3570 <col:47, line:73:5>
|   `-ReturnStmt 0x5611b0ec3560 <line:72:2, col:9>
|     `-MemberExpr 0x5611b0ec3530 <col:9> 'const Vector<Element *>':'const Vector<Element *>' lvalue ->_elements 0x5611b0ec2bd0
|       `-CXXThisExpr 0x5611b0ec3520 <col:9> 'const ElementTracker *' implicit this
|-CXXMethodDecl 0x5611b0eb6d58 <line:75:5, line:77:5> line:75:9 used size 'int () const'
| `-CompoundStmt 0x5611b0ec3658 <col:22, line:77:5>
|   `-ReturnStmt 0x5611b0ec3648 <line:76:2, col:24>
|     `-CXXMemberCallExpr 0x5611b0ec35f8 <col:9, col:24> 'Vector::size_type':'int'
|       `-MemberExpr 0x5611b0ec35c8 <col:9, col:19> '<bound member function type>' .size 0x5611b0ebf598
|         `-MemberExpr 0x5611b0ec3598 <col:9> 'const Vector<Element *>':'const Vector<Element *>' lvalue ->_elements 0x5611b0ec2bd0
|           `-CXXThisExpr 0x5611b0ec3588 <col:9> 'const ElementTracker *' implicit this
|-CXXMethodDecl 0x5611b0eb6ed8 <line:81:5, line:83:5> line:81:14 used operator[] 'Element *(int) const'
| |-ParmVarDecl 0x5611b0eb6e10 <col:25, col:29> col:29 used i 'int'
| `-CompoundStmt 0x5611b0ec37e0 <col:38, line:83:5>
|   `-ReturnStmt 0x5611b0ec37d0 <line:82:2, col:20>
|     `-ImplicitCastExpr 0x5611b0ec37b8 <col:9, col:20> 'Element *':'Element *' <LValueToRValue>
|       `-CXXOperatorCallExpr 0x5611b0ec3780 <col:9, col:20> 'Element *const':'Element *const' lvalue
|         |-ImplicitCastExpr 0x5611b0ec3768 <col:18, col:20> 'Element *const &(*)(Vector::size_type) const' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5611b0ec36e8 <col:18, col:20> 'Element *const &(Vector::size_type) const' lvalue CXXMethod 0x5611b0ebfde8 'operator[]' 'Element *const &(Vector::size_type) const'
|         |-MemberExpr 0x5611b0ec3680 <col:9> 'const Vector<Element *>':'const Vector<Element *>' lvalue ->_elements 0x5611b0ec2bd0
|         | `-CXXThisExpr 0x5611b0ec3670 <col:9> 'const ElementTracker *' implicit this
|         `-ImplicitCastExpr 0x5611b0ec36d0 <col:19> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5611b0ec36b0 <col:19> 'int' lvalue ParmVar 0x5611b0eb6e10 'i' 'int'
|-TypedefDecl 0x5611b0ec24f0 <line:86:5, col:47> col:47 referenced const_iterator 'Vector<Element *>::const_iterator':'Element *const *'
| `-ElaboratedType 0x5611b0ec2480 'Vector<Element *>::const_iterator' sugar
|   `-TypedefType 0x5611b0ebefe0 'Vector<Element *>::const_iterator' sugar
|     |-Typedef 0x5611b0ebd8d0 'const_iterator'
|     `-PointerType 0x5611b0ebc0f0 'Element *const *'
|       `-QualType 0x5611b0eb7121 'Element *const' const
|         `-SubstTemplateTypeParmType 0x5611b0eb7120 'Element *' sugar
|           |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5611b0b584d8 'T'
|           `-PointerType 0x5611b0bc7ab0 'Element *'
|             `-RecordType 0x5611b0bb9b00 'Element'
|               `-CXXRecord 0x5611b0e8d9e0 'Element'
|-CXXMethodDecl 0x5611b0ec25b8 <line:88:5, line:90:5> line:88:20 begin 'ElementTracker::const_iterator () const'
| `-CompoundStmt 0x5611b0ec38f8 <col:34, line:90:5>
|   `-ReturnStmt 0x5611b0ec38e8 <line:89:2, col:25>
|     `-CXXMemberCallExpr 0x5611b0ec38c8 <col:9, col:25> 'Vector<Element *>::const_iterator':'Element *const *'
|       `-MemberExpr 0x5611b0ec3898 <col:9, col:19> '<bound member function type>' .begin 0x5611b0ebf078
|         `-MemberExpr 0x5611b0ec3808 <col:9> 'const Vector<Element *>':'const Vector<Element *>' lvalue ->_elements 0x5611b0ec2bd0
|           `-CXXThisExpr 0x5611b0ec37f8 <col:9> 'const ElementTracker *' implicit this
|-CXXMethodDecl 0x5611b0ec2678 <line:92:5, line:94:5> line:92:20 end 'ElementTracker::const_iterator () const'
| `-CompoundStmt 0x5611b0ec3a10 <col:32, line:94:5>
|   `-ReturnStmt 0x5611b0ec3a00 <line:93:2, col:23>
|     `-CXXMemberCallExpr 0x5611b0ec39e0 <col:9, col:23> 'Vector<Element *>::const_iterator':'Element *const *'
|       `-MemberExpr 0x5611b0ec39b0 <col:9, col:19> '<bound member function type>' .end 0x5611b0ebf1c8
|         `-MemberExpr 0x5611b0ec3920 <col:9> 'const Vector<Element *>':'const Vector<Element *>' lvalue ->_elements 0x5611b0ec2bd0
|           `-CXXThisExpr 0x5611b0ec3910 <col:9> 'const ElementTracker *' implicit this
|-CXXMethodDecl 0x5611b0ec27e8 <line:97:5, line:99:5> line:97:10 contains 'bool (const Element *) const'
| |-ParmVarDecl 0x5611b0ec2728 <col:19, col:34> col:34 used e 'const Element *'
| `-CompoundStmt 0x5611b0ec3bf8 <col:43, line:99:5>
|   `-ReturnStmt 0x5611b0ec3be8 <line:98:2, col:29>
|     `-CXXOperatorCallExpr 0x5611b0ec3bb0 <col:9, col:29> 'bool'
|       |-ImplicitCastExpr 0x5611b0ec3b98 <col:17, col:29> 'bool (*)(int) const' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5611b0ec3b50 <col:17, col:29> 'bool (int) const' lvalue CXXMethod 0x5611b0eae100 'operator[]' 'bool (int) const'
|       |-MemberExpr 0x5611b0ec3a38 <col:9> 'const Bitvector' lvalue ->_reached 0x5611b0ec2ad0
|       | `-CXXThisExpr 0x5611b0ec3a28 <col:9> 'const ElementTracker *' implicit this
|       `-CXXMemberCallExpr 0x5611b0ec3b30 <col:18, col:28> 'int'
|         `-MemberExpr 0x5611b0ec3b00 <col:18, col:21> '<bound member function type>' ->eindex 0x5611b0e9ec30
|           `-ImplicitCastExpr 0x5611b0ec3a88 <col:18> 'const Element *' <LValueToRValue>
|             `-DeclRefExpr 0x5611b0ec3a68 <col:18> 'const Element *' lvalue ParmVar 0x5611b0ec2728 'e' 'const Element *'
|-CXXMethodDecl 0x5611b0ec2930 <line:102:5, line:107:5> line:102:10 insert 'void (Element *)'
| |-ParmVarDecl 0x5611b0ec28a0 <col:17, col:26> col:26 used e 'Element *'
| `-CompoundStmt 0x5611b0ec4308 <col:29, line:107:5>
|   `-IfStmt 0x5611b0ec42f0 <line:103:2, line:106:2>
|     |-ExprWithCleanups 0x5611b0ec3ec8 <line:103:6, col:27> 'bool'
|     | `-UnaryOperator 0x5611b0ec3eb0 <col:6, col:27> 'bool' prefix '!' cannot overflow
|     |   `-ImplicitCastExpr 0x5611b0ec3e98 <col:7, col:27> 'bool' <UserDefinedConversion>
|     |     `-CXXMemberCallExpr 0x5611b0ec3e78 <col:7, col:27> 'bool'
|     |       `-MemberExpr 0x5611b0ec3e48 <col:7, col:27> '<bound member function type>' .operator bool 0x5611b0eaa058
|     |         `-ImplicitCastExpr 0x5611b0ec3e30 <col:7, col:27> 'const Bitvector::Bit' lvalue <NoOp>
|     |           `-MaterializeTemporaryExpr 0x5611b0ec3e18 <col:7, col:27> 'Bitvector::Bit':'Bitvector::Bit' lvalue
|     |             `-CXXOperatorCallExpr 0x5611b0ec3de0 <col:7, col:27> 'Bitvector::Bit':'Bitvector::Bit'
|     |               |-ImplicitCastExpr 0x5611b0ec3dc8 <col:15, col:27> 'Bitvector::Bit (*)(int)' <FunctionToPointerDecay>
|     |               | `-DeclRefExpr 0x5611b0ec3d50 <col:15, col:27> 'Bitvector::Bit (int)' lvalue CXXMethod 0x5611b0ead408 'operator[]' 'Bitvector::Bit (int)'
|     |               |-MemberExpr 0x5611b0ec3c20 <col:7> 'Bitvector' lvalue ->_reached 0x5611b0ec2ad0
|     |               | `-CXXThisExpr 0x5611b0ec3c10 <col:7> 'ElementTracker *' implicit this
|     |               `-CXXMemberCallExpr 0x5611b0ec3d18 <col:16, col:26> 'int'
|     |                 `-MemberExpr 0x5611b0ec3ce8 <col:16, col:19> '<bound member function type>' ->eindex 0x5611b0e9ec30
|     |                   `-ImplicitCastExpr 0x5611b0ec3d38 <col:16> 'const Element *' <NoOp>
|     |                     `-ImplicitCastExpr 0x5611b0ec3c70 <col:16> 'Element *' <LValueToRValue>
|     |                       `-DeclRefExpr 0x5611b0ec3c50 <col:16> 'Element *' lvalue ParmVar 0x5611b0ec28a0 'e' 'Element *'
|     `-CompoundStmt 0x5611b0ec42d0 <col:30, line:106:2>
|       |-ExprWithCleanups 0x5611b0ec4188 <line:104:6, col:30> 'Bitvector::Bit':'Bitvector::Bit' lvalue
|       | `-CXXOperatorCallExpr 0x5611b0ec4150 <col:6, col:30> 'Bitvector::Bit':'Bitvector::Bit' lvalue
|       |   |-ImplicitCastExpr 0x5611b0ec4138 <col:28> 'Bitvector::Bit &(*)(bool)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5611b0ec40b8 <col:28> 'Bitvector::Bit &(bool)' lvalue CXXMethod 0x5611b0eb3230 'operator=' 'Bitvector::Bit &(bool)'
|       |   |-MaterializeTemporaryExpr 0x5611b0ec40a0 <col:6, col:26> 'Bitvector::Bit':'Bitvector::Bit' lvalue
|       |   | `-CXXOperatorCallExpr 0x5611b0ec4058 <col:6, col:26> 'Bitvector::Bit':'Bitvector::Bit'
|       |   |   |-ImplicitCastExpr 0x5611b0ec4040 <col:14, col:26> 'Bitvector::Bit (*)(int)' <FunctionToPointerDecay>
|       |   |   | `-DeclRefExpr 0x5611b0ec4020 <col:14, col:26> 'Bitvector::Bit (int)' lvalue CXXMethod 0x5611b0ead408 'operator[]' 'Bitvector::Bit (int)'
|       |   |   |-MemberExpr 0x5611b0ec3ef0 <col:6> 'Bitvector' lvalue ->_reached 0x5611b0ec2ad0
|       |   |   | `-CXXThisExpr 0x5611b0ec3ee0 <col:6> 'ElementTracker *' implicit this
|       |   |   `-CXXMemberCallExpr 0x5611b0ec3fe8 <col:15, col:25> 'int'
|       |   |     `-MemberExpr 0x5611b0ec3fb8 <col:15, col:18> '<bound member function type>' ->eindex 0x5611b0e9ec30
|       |   |       `-ImplicitCastExpr 0x5611b0ec4008 <col:15> 'const Element *' <NoOp>
|       |   |         `-ImplicitCastExpr 0x5611b0ec3f40 <col:15> 'Element *' <LValueToRValue>
|       |   |           `-DeclRefExpr 0x5611b0ec3f20 <col:15> 'Element *' lvalue ParmVar 0x5611b0ec28a0 'e' 'Element *'
|       |   `-CXXBoolLiteralExpr 0x5611b0ec4090 <col:30> 'bool' true
|       `-CXXMemberCallExpr 0x5611b0ec4290 <line:105:6, col:27> 'void'
|         |-MemberExpr 0x5611b0ec4260 <col:6, col:16> '<bound member function type>' .push_back 0x5611b0ec0ea8
|         | `-MemberExpr 0x5611b0ec41b0 <col:6> 'Vector<Element *>':'Vector<Element *>' lvalue ->_elements 0x5611b0ec2bd0
|         |   `-CXXThisExpr 0x5611b0ec41a0 <col:6> 'ElementTracker *' implicit this
|         `-ImplicitCastExpr 0x5611b0ec42b8 <col:26> 'Element *' <LValueToRValue>
|           `-DeclRefExpr 0x5611b0ec4240 <col:26> 'Element *' lvalue ParmVar 0x5611b0ec28a0 'e' 'Element *'
|-CXXMethodDecl 0x5611b0ec29f8 <line:110:5, line:113:5> line:110:10 clear 'void ()'
| `-CompoundStmt 0x5611b0ec4440 <col:18, line:113:5>
|   |-CXXMemberCallExpr 0x5611b0ec4390 <line:111:2, col:17> 'void'
|   | `-MemberExpr 0x5611b0ec4360 <col:2, col:11> '<bound member function type>' .clear 0x5611b0ea7030
|   |   `-MemberExpr 0x5611b0ec4330 <col:2> 'Bitvector' lvalue ->_reached 0x5611b0ec2ad0
|   |     `-CXXThisExpr 0x5611b0ec4320 <col:2> 'ElementTracker *' implicit this
|   `-CXXMemberCallExpr 0x5611b0ec4420 <line:112:2, col:18> 'void'
|     `-MemberExpr 0x5611b0ec43f0 <col:2, col:12> '<bound member function type>' .clear 0x5611b0ec2068
|       `-MemberExpr 0x5611b0ec43c0 <col:2> 'Vector<Element *>':'Vector<Element *>' lvalue ->_elements 0x5611b0ec2bd0
|         `-CXXThisExpr 0x5611b0ec43b0 <col:2> 'ElementTracker *' implicit this
|-AccessSpecDecl 0x5611b0ec2a98 <line:115:3, col:10> col:3 private
|-FieldDecl 0x5611b0ec2ad0 <line:117:5, col:15> col:15 referenced _reached 'Bitvector'
|-FieldDecl 0x5611b0ec2bd0 <line:118:5, col:23> col:23 referenced _elements 'Vector<Element *>':'Vector<Element *>'
|-CXXConstructorDecl 0x5611b0ec2dc8 <line:64:7> col:7 implicit ElementTracker 'void (const ElementTracker &)' inline default noexcept-unevaluated 0x5611b0ec2dc8
| `-ParmVarDecl 0x5611b0ec2ed8 <col:7> col:7 'const ElementTracker &'
|-CXXConstructorDecl 0x5611b0ec2f78 <col:7> col:7 implicit ElementTracker 'void (ElementTracker &&)' inline default noexcept-unevaluated 0x5611b0ec2f78
| `-ParmVarDecl 0x5611b0ec3088 <col:7> col:7 'ElementTracker &&'
|-CXXMethodDecl 0x5611b0ec3128 <col:7> col:7 implicit operator= 'ElementTracker &(const ElementTracker &)' inline default noexcept-unevaluated 0x5611b0ec3128
| `-ParmVarDecl 0x5611b0ec3238 <col:7> col:7 'const ElementTracker &'
|-CXXMethodDecl 0x5611b0ec32a8 <col:7> col:7 implicit operator= 'ElementTracker &(ElementTracker &&)' inline default noexcept-unevaluated 0x5611b0ec32a8
| `-ParmVarDecl 0x5611b0ec33b8 <col:7> col:7 'ElementTracker &&'
`-CXXDestructorDecl 0x5611b0ec3440 <col:7> col:7 implicit used ~ElementTracker 'void () noexcept' inline default
  |-Overrides: [ 0x5611b0eb5eb0 RouterVisitor::~RouterVisitor 'void () noexcept' ]
  `-CompoundStmt 0x5611b0eca610 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.ElementTracker = type { %class.RouterVisitor, %class.Bitvector, %class.Vector }
  NonVirtualBaseLLVMType:%class.ElementTracker = type { %class.RouterVisitor, %class.Bitvector, %class.Vector }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0ec4460 <../dummy_inc/click/routervisitor.hh:139:1, line:155:1> line:139:7 referenced class ElementCastTracker definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'ElementTracker'
|-CXXRecordDecl 0x5611b0ec45b8 <col:1, col:7> col:7 implicit referenced class ElementCastTracker
|-AccessSpecDecl 0x5611b0ec4648 <col:52, col:58> col:52 public
|-CXXConstructorDecl 0x5611b0ec4808 <line:144:5, line:146:5> line:144:5 used ElementCastTracker 'void (Router *, const String &)'
| |-ParmVarDecl 0x5611b0ec4680 <col:24, col:32> col:32 used router 'Router *'
| |-ParmVarDecl 0x5611b0ec46f8 <col:40, col:54> col:54 used name 'const String &'
| |-CXXCtorInitializer 'ElementTracker'
| | `-CXXConstructExpr 0x5611b0ec5538 <line:145:4, col:25> 'ElementTracker' 'void (Router *)'
| |   `-ImplicitCastExpr 0x5611b0ec5520 <col:19> 'Router *' <LValueToRValue>
| |     `-DeclRefExpr 0x5611b0ec54d0 <col:19> 'Router *' lvalue ParmVar 0x5611b0ec4680 'router' 'Router *'
| |-CXXCtorInitializer Field 0x5611b0ec4d00 '_name' 'String'
| | `-CXXConstructExpr 0x5611b0eca598 <col:28, col:38> 'String' 'void (const String &)'
| |   `-DeclRefExpr 0x5611b0eca558 <col:34> 'const String' lvalue ParmVar 0x5611b0ec46f8 'name' 'const String &'
| `-CompoundStmt 0x5611b0eca620 <col:40, line:146:5>
|-CXXMethodDecl 0x5611b0ec4bf8 <line:148:5, line:149:53> line:148:10 visit 'bool (Element *, bool, int, Element *, int, int)'
| |-Overrides: [ 0x5611b0eb6328 RouterVisitor::visit 'bool (Element *, bool, int, Element *, int, int)' ]
| |-ParmVarDecl 0x5611b0ec48d0 <col:16, col:25> col:25 e 'Element *'
| |-ParmVarDecl 0x5611b0ec4948 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5611b0ec49c8 <col:43, col:47> col:47 port 'int'
| |-ParmVarDecl 0x5611b0ec4a40 <line:149:9, col:18> col:18 from_e 'Element *'
| |-ParmVarDecl 0x5611b0ec4ac0 <col:26, col:30> col:30 from_port 'int'
| `-ParmVarDecl 0x5611b0ec4b40 <col:41, col:45> col:45 distance 'int'
|-AccessSpecDecl 0x5611b0ec4cc8 <line:151:3, col:10> col:3 private
|-FieldDecl 0x5611b0ec4d00 <line:153:5, col:12> col:12 _name 'String'
|-CXXConstructorDecl 0x5611b0ec4d78 <line:139:7> col:7 implicit ElementCastTracker 'void (const ElementCastTracker &)' inline default noexcept-unevaluated 0x5611b0ec4d78
| `-ParmVarDecl 0x5611b0ec4e88 <col:7> col:7 'const ElementCastTracker &'
|-CXXConstructorDecl 0x5611b0ec4f28 <col:7> col:7 implicit ElementCastTracker 'void (ElementCastTracker &&)' inline default noexcept-unevaluated 0x5611b0ec4f28
| `-ParmVarDecl 0x5611b0ec5038 <col:7> col:7 'ElementCastTracker &&'
|-CXXMethodDecl 0x5611b0ec50d8 <col:7> col:7 implicit operator= 'ElementCastTracker &(const ElementCastTracker &)' inline default noexcept-unevaluated 0x5611b0ec50d8
| `-ParmVarDecl 0x5611b0ec51e8 <col:7> col:7 'const ElementCastTracker &'
|-CXXMethodDecl 0x5611b0ec5258 <col:7> col:7 implicit operator= 'ElementCastTracker &(ElementCastTracker &&)' inline default noexcept-unevaluated 0x5611b0ec5258
| `-ParmVarDecl 0x5611b0ec5368 <col:7> col:7 'ElementCastTracker &&'
`-CXXDestructorDecl 0x5611b0ec53f0 <col:7> col:7 implicit used ~ElementCastTracker 'void () noexcept' inline default
  |-Overrides: [ 0x5611b0ec3440 ElementTracker::~ElementTracker 'void () noexcept' ]
  `-CompoundStmt 0x5611b103d408 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.ElementCastTracker = type { %class.ElementTracker, %class.String }
  NonVirtualBaseLLVMType:%class.ElementCastTracker = type { %class.ElementTracker, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0e47aa8 prev 0x5611b0e3f1b0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5611b0e47ba0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5611b0e47c90 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5611b0e47d40 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5611b0e47ec8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5611b0e48048 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5611b0e481c8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5611b0e5ef08 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5611b0e5f808 <col:11>
|-CXXDestructorDecl 0x5611b0e5f070 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5611b0e5f1a8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5611b0e5f1a8
| `-ParmVarDecl 0x5611b0e5f2b8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5611b0e5f358 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5611b0e5f358
| `-ParmVarDecl 0x5611b0e5f468 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5611b0e62198 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5611b0e622a8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5611b0e62528 <col:11>
|   `-ReturnStmt 0x5611b0e62518 <col:11>
|     `-UnaryOperator 0x5611b0e62500 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5611b0e624f0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5611b0e62318 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5611b0e62318
  `-ParmVarDecl 0x5611b0e62428 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0e48230 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5611b0e48348 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5611b0e483e8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5611b0e48450 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5611b0e484b8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5611b0e48520 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5611b0e48580 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5611b0e48640 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5611b0e486a0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5611b0e48700 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5611b0e5ee18 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5611b0e483e8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5611b0e5f818 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5611b0e5f870 <col:12>
|-CXXConstructorDecl 0x5611b0e5f4d8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5611b0e5f4d8
| `-ParmVarDecl 0x5611b0e5f5e8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5611b0e5f688 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5611b0e5f688
| `-ParmVarDecl 0x5611b0e5f798 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5611b0e61880 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0e388a0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5611b0e389b8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5611b0e38a48 <col:16, col:22> col:16 public
|-EnumDecl 0x5611b0e38a70 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5611b0e38b70 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5611b0e38c50 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e38b50 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5611b0e38b30 <col:21> 'int' 28
| `-EnumConstantDecl 0x5611b0e38c00 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5611b0e38c68 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0e38be0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5611b0e38bc0 <col:22> 'int' 64
|-CXXMethodDecl 0x5611b0e39008 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5611b0e38c90 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5611b0e38d10 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5611b0e38df0 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5611b0e38e68 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5611b0e390c8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5611b0e392c8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5611b0e39140 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5611b0e391b8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5611b0e39378 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5611b0e394d8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5611b0e393e8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5611b0e39580 <col:72> warn_unused_result ""
|-TypedefDecl 0x5611b0e398b0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5611b0e39840 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5611b0e397e0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5611b0e397a0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5611b08554e0 'void'
|       |-PointerType 0x5611b0b2f570 'unsigned char *'
|       | `-BuiltinType 0x5611b08555e0 'unsigned char'
|       |-TypedefType 0x5611b0900250 'size_t' sugar
|       | |-Typedef 0x5611b08c5be0 'size_t'
|       | `-BuiltinType 0x5611b0855640 'unsigned long'
|       `-PointerType 0x5611b0855ce0 'void *'
|         `-BuiltinType 0x5611b08554e0 'void'
|-CXXMethodDecl 0x5611b0e39d28 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5611b0e39920 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5611b0e39998 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5611b0e39a30 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5611b0e39ab0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5611b0e57e30 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5611b0e57e18 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5611b0e57de0 <col:58> 'int' 0
| |-ParmVarDecl 0x5611b0e39b30 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5611b0e57e58 <col:76> 'int' 0
| |-ParmVarDecl 0x5611b0e39bb0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5611b0e57e78 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5611b0e39df8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5611b0e39e78 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5611b0e39f38 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5611b0e39fd8 <col:20>
| `-OptimizeNoneAttr 0x5611b0e3a030 <col:30>
|-CXXMethodDecl 0x5611b0e3a0a8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5611b0e3a148 <col:20>
| `-OptimizeNoneAttr 0x5611b0e3a1a0 <col:30>
|-CXXMethodDecl 0x5611b0e3a218 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5611b0e3a2b8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5611b0e3a368 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5611b0e3a408 <col:20>
| |-OptimizeNoneAttr 0x5611b0e3a460 <col:30>
| `-WarnUnusedResultAttr 0x5611b0e3a488 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5611b0e3a4e0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5611b0e3a580 <col:20>
| `-OptimizeNoneAttr 0x5611b0e3a5d8 <col:30>
|-CXXMethodDecl 0x5611b0e3a628 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5611b0e3a6c8 <col:20>
| `-OptimizeNoneAttr 0x5611b0e3a720 <col:30>
|-CXXMethodDecl 0x5611b0e3a768 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x5611b0e3a808 <col:20>
| `-OptimizeNoneAttr 0x5611b0e3a860 <col:30>
|-CXXMethodDecl 0x5611b0e3a8a8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5611b0e3a968 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5611b0e3aa30 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5611b0e3aaf8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5611b0e3abb8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5611b0e3acd8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5611b0e57f40 <col:54, line:99:5>
|   `-ReturnStmt 0x5611b0e57f30 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5611b0e57f18 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5611b0e57ee8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5611b0e48a38
|         `-CXXThisExpr 0x5611b0e57ed8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5611b0e3ae78 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5611b0e3ad88 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5611b0e57ff0 <col:67, line:103:5>
|   `-BinaryOperator 0x5611b0e57fd0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5611b0e57f68 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5611b0e48a38
|     | `-CXXThisExpr 0x5611b0e57f58 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5611b0e57fb8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5611b0e57f98 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5611b0e3ad88 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5611b0e3af70 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5611b0e58070 <col:33, line:107:5>
|   `-ReturnStmt 0x5611b0e58060 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5611b0e58048 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5611b0e58018 <col:16> 'void *' lvalue ->_destructor_argument 0x5611b0e48aa0
|         `-CXXThisExpr 0x5611b0e58008 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5611b0e3b030 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5611b0e586a0 <col:25, line:113:5>
|   |-ParenExpr 0x5611b0e583e8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5611b0e583b8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5611b0e58128 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5611b0e58100 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5611b0e580c8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5611b0e58098 <col:24> '<bound member function type>' ->shared 0x5611b0e3a0a8
|   |   |       `-ImplicitCastExpr 0x5611b0e580e8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5611b0e58088 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5611b0e58188 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5611b0e58168 <col:42> 'int' 0
|   |   `-CallExpr 0x5611b0e58318 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5611b0e58300 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5611b0e582e0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5611b08f6fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5611b0e58358 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e581f8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5611b0e58370 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e58220 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5611b0e58388 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5611b0e58258 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5611b0e583a0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5611b0e582c8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5611b0e582b0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5611b0e58278 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5611b0e585e8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5611b0e58418 <col:2> 'unsigned char *' lvalue ->_head 0x5611b0e48840
|   | | `-CXXThisExpr 0x5611b0e58408 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5611b0e585d0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5611b0e585b0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5611b0e58458 <col:10> 'unsigned char *' lvalue ->_data 0x5611b0e488a8
|   |     | `-CXXThisExpr 0x5611b0e58448 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5611b0e58598 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5611b0e58578 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5611b0e58498 <col:18> 'unsigned char *' lvalue ->_tail 0x5611b0e48910
|   |         | `-CXXThisExpr 0x5611b0e58488 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5611b0e58560 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5611b0e58540 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5611b0e584d8 <col:26> 'unsigned char *' lvalue ->_end 0x5611b0e48978
|   |             | `-CXXThisExpr 0x5611b0e584c8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5611b0e58528 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5611b0e58508 <col:33> 'int' 0
|   `-BinaryOperator 0x5611b0e58680 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5611b0e58618 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5611b0e48a38
|     | `-CXXThisExpr 0x5611b0e58608 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5611b0e58668 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5611b0e58648 <col:16> 'int' 0
|-CXXMethodDecl 0x5611b0e3b170 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5611b0e3b0e0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5611b0e3b218 <col:20>
| |-OptimizeNoneAttr 0x5611b0e3b270 <col:30>
| `-WarnUnusedResultAttr 0x5611b0e3b298 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5611b0e3b368 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5611b0e3b2d8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5611b0e3b410 <col:20>
| |-OptimizeNoneAttr 0x5611b0e3b468 <col:30>
| `-WarnUnusedResultAttr 0x5611b0e3b490 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5611b0e3b5c8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5611b0e3b4d0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5611b0e3b670 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5611b0e3b770 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5611b0e3b6e0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5611b0e3b818 <col:20>
| `-OptimizeNoneAttr 0x5611b0e3b870 <col:30>
|-CXXMethodDecl 0x5611b0e3b938 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5611b0e3b8a8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5611b0e3b9e0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5611b0e3bae0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5611b0e3ba50 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5611b0e3bb88 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5611b0e3bc88 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5611b0e3bbf8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5611b0e3bd30 <col:20>
| `-OptimizeNoneAttr 0x5611b0e3bd88 <col:30>
|-CXXMethodDecl 0x5611b0e3bf18 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5611b0e3bdc8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5611b0e3be40 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5611b0e57e98 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5611b0e3bfc8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5611b0e3c1c8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5611b0e3c040 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5611b0e3c0b8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0e3c3d8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5611b0e3c288 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5611b0e3c300 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0e3c5e8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5611b0e3c498 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5611b0e3c518 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5611b0e57ea8 <col:39> 'int' 0
|-CXXMethodDecl 0x5611b0e3c6b8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5611b0e3c780 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5611b0e3c848 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5611b0e3c908 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5611b0e3c9d0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5611b0e3cb18 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5611b0e3ca88 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5611b0e3cce8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5611b0e3cbd8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5611b0e3cc50 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0e3cdb8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5611b0e3ce78 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5611b0e3cf18 <col:20>
| `-OptimizeNoneAttr 0x5611b0e3cf70 <col:30>
|-CXXMethodDecl 0x5611b0e3cfc0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5611b0e3d060 <col:20>
| `-OptimizeNoneAttr 0x5611b0e3d0b8 <col:30>
|-CXXMethodDecl 0x5611b0e3d108 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5611b0e3d1c8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5611b0e3d290 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5611b0e3d330 <col:20>
| `-OptimizeNoneAttr 0x5611b0e3d388 <col:30>
|-CXXMethodDecl 0x5611b0e3d4d8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5611b0e3d3c8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5611b0e3d440 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0e3d628 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5611b0e3d598 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0e3d6f0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5611b0e3d7b0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5611b0e3d850 <col:20>
| `-OptimizeNoneAttr 0x5611b0e3d8a8 <col:30>
|-CXXMethodDecl 0x5611b0e3d8f8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5611b0e3d998 <col:20>
| `-OptimizeNoneAttr 0x5611b0e3d9f0 <col:30>
|-CXXMethodDecl 0x5611b0e3da40 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5611b0e3db08 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5611b0e3dba8 <col:20>
| `-OptimizeNoneAttr 0x5611b0e3dc00 <col:30>
|-CXXMethodDecl 0x5611b0e3dc48 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5611b0e3dd68 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5611b0e3ded8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5611b0e3de18 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5611b0e3dfc8 <line:307:5, col:68> col:56 used ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5611b0e3e068 <col:20>
| `-OptimizeNoneAttr 0x5611b0e3e0c0 <col:30>
|-CXXMethodDecl 0x5611b0e3e110 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5611b0e3e1d0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5611b0e3e408 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5611b0e3e280 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5611b0e3e2f8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5611b0e3e4b8 <col:20>
| `-OptimizeNoneAttr 0x5611b0e3e510 <col:30>
|-CXXMethodDecl 0x5611b0e3e5b8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5611b0e3e658 <col:20>
| `-OptimizeNoneAttr 0x5611b0e3e6b0 <col:30>
|-CXXMethodDecl 0x5611b0e3e700 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5611b0e3e7a0 <col:20>
| `-OptimizeNoneAttr 0x5611b0e3e7f8 <col:30>
|-CXXMethodDecl 0x5611b0e3e840 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5611b0e3e8e0 <col:20>
| `-OptimizeNoneAttr 0x5611b0e3e938 <col:30>
|-CXXMethodDecl 0x5611b0e3ea38 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5611b0e3e970 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5611b0e3eae0 <col:20>
| `-OptimizeNoneAttr 0x5611b0e3eb38 <col:30>
|-CXXMethodDecl 0x5611b0e3ecf8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5611b0e3eb70 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5611b0e3ebe8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5611b0e3eda8 <col:20>
| `-OptimizeNoneAttr 0x5611b0e3ee00 <col:30>
|-CXXMethodDecl 0x5611b0e3eea8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5611b0e3efc8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5611b0e3f0e8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5611b0e3f188 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5611b0e3f1b0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5611b0e3f2d8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5611b0e3f378 <col:20>
| `-OptimizeNoneAttr 0x5611b0e3f3d0 <col:30>
|-CXXMethodDecl 0x5611b0e3f478 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5611b0e3f518 <col:20>
| `-OptimizeNoneAttr 0x5611b0e3f570 <col:30>
|-AccessSpecDecl 0x5611b0e3f598 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5611b0e3f5c0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5611b0e3f6c0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5611b0e3f710 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0e3f6a0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5611b0e3f680 <col:14> 'int' 48
|-CXXMethodDecl 0x5611b0e3f778 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5611b0e3f818 <col:20>
| `-OptimizeNoneAttr 0x5611b0e3f870 <col:30>
|-CXXMethodDecl 0x5611b0e3f8e8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5611b0e3f988 <col:20>
| `-OptimizeNoneAttr 0x5611b0e3f9e0 <col:30>
|-CXXMethodDecl 0x5611b0e3faa8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5611b0e3fa18 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5611b0e3fc48 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5611b0e3fde8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5611b0e3fcf8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5611b0e3fe90 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5611b0e3ff90 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5611b0e40340 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e3ff70 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5611b0e3ff50 <col:9> 'int' 0
| |-EnumConstantDecl 0x5611b0e40020 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5611b0e40358 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e40000 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5611b0e3ffe0 <col:14> 'int' 1
| |-EnumConstantDecl 0x5611b0e400b0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5611b0e40370 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e40090 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5611b0e40070 <col:14> 'int' 2
| |-EnumConstantDecl 0x5611b0e40140 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5611b0e40388 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e40120 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5611b0e40100 <col:14> 'int' 3
| |-EnumConstantDecl 0x5611b0e401d0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5611b0e403a0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e401b0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5611b0e40190 <col:13> 'int' 4
| |-EnumConstantDecl 0x5611b0e40260 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5611b0e403b8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e40240 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5611b0e40220 <col:13> 'int' 5
| `-EnumConstantDecl 0x5611b0e402f0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5611b0e403d0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0e402d0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5611b0e402b0 <col:14> 'int' 6
|-CXXMethodDecl 0x5611b0e40438 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5611b0e404d8 <col:20>
| `-OptimizeNoneAttr 0x5611b0e40530 <col:30>
|-CXXMethodDecl 0x5611b0e40628 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5611b0e40568 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5611b0e406d0 <col:20>
| `-OptimizeNoneAttr 0x5611b0e40728 <col:30>
|-CXXMethodDecl 0x5611b0e40798 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5611b0e408c0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5611b0e40a38 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5611b0e40970 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5611b0e40b00 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5611b0e40bc8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5611b0e40d08 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5611b0e40c78 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5611b0e40e00 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5611b0e40f00 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5611b0e41100 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e40ee0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5611b0e40ec0 <col:23> 'int' 0
| |-EnumConstantDecl 0x5611b0e40f90 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5611b0e41118 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e40f70 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5611b0e40f50 <col:45> 'int' 4
| |-EnumConstantDecl 0x5611b0e41020 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5611b0e41130 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e41000 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5611b0e40fe0 <col:24> 'int' 0
| `-EnumConstantDecl 0x5611b0e410b0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5611b0e41148 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0e41090 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5611b0e41070 <col:47> 'int' 16
|-CXXMethodDecl 0x5611b0e411a8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5611b0e41318 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5611b0e41258 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5611b0e413c0 <col:20>
| `-OptimizeNoneAttr 0x5611b0e41418 <col:30>
|-CXXMethodDecl 0x5611b0e41468 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5611b0e587c0 <col:18, col:36>
|   `-ReturnStmt 0x5611b0e587b0 <col:20, col:33>
|     `-ImplicitCastExpr 0x5611b0e58798 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5611b0e58778 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5611b0e58748 <col:27> '<bound member function type>' ->xanno 0x5611b0e3f478
|           `-CXXThisExpr 0x5611b0e58738 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5611b0e41560 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5611b0e588d0 <col:30, col:48>
|   `-ReturnStmt 0x5611b0e588c0 <col:32, col:45>
|     `-ImplicitCastExpr 0x5611b0e588a8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5611b0e58888 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5611b0e58858 <col:39> '<bound member function type>' ->xanno 0x5611b0e3f2d8
|           `-CXXThisExpr 0x5611b0e58848 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5611b0e41648 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5611b0e58a68 <col:24, col:50>
|   `-ReturnStmt 0x5611b0e58a58 <col:26, col:47>
|     `-UnaryOperator 0x5611b0e58a40 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5611b0e58a20 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5611b0e58a08 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5611b0e589b8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5611b0e47d40
|         |   `-CXXMemberCallExpr 0x5611b0e58998 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5611b0e58968 <col:34> '<bound member function type>' ->xanno 0x5611b0e3f478
|         |       `-CXXThisExpr 0x5611b0e58958 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5611b0e589e8 <col:46> 'int' 0
|-CXXMethodDecl 0x5611b0e41738 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5611b0e58c00 <col:36, col:62>
|   `-ReturnStmt 0x5611b0e58bf0 <col:38, col:59>
|     `-UnaryOperator 0x5611b0e58bd8 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5611b0e58bb8 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5611b0e58ba0 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5611b0e58b50 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5611b0e47d40
|         |   `-CXXMemberCallExpr 0x5611b0e58b30 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5611b0e58b00 <col:46> '<bound member function type>' ->xanno 0x5611b0e3f2d8
|         |       `-CXXThisExpr 0x5611b0e58af0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5611b0e58b80 <col:58> 'int' 0
|-CXXMethodDecl 0x5611b0e41858 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5611b0e58d98 <col:26, col:53>
|   `-ReturnStmt 0x5611b0e58d88 <col:28, col:50>
|     `-UnaryOperator 0x5611b0e58d70 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5611b0e58d50 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5611b0e58d38 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5611b0e58ce8 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5611b0e48048
|         |   `-CXXMemberCallExpr 0x5611b0e58cc8 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5611b0e58c98 <col:36> '<bound member function type>' ->xanno 0x5611b0e3f478
|         |       `-CXXThisExpr 0x5611b0e58c88 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5611b0e58d18 <col:49> 'int' 0
|-CXXMethodDecl 0x5611b0e41978 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5611b0e58f68 <col:38, col:65>
|   `-ReturnStmt 0x5611b0e58f58 <col:40, col:62>
|     `-UnaryOperator 0x5611b0e58f40 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5611b0e58f20 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5611b0e58f08 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5611b0e58e80 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5611b0e48048
|         |   `-CXXMemberCallExpr 0x5611b0e58e60 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5611b0e58e30 <col:48> '<bound member function type>' ->xanno 0x5611b0e3f2d8
|         |       `-CXXThisExpr 0x5611b0e58e20 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5611b0e58eb0 <col:61> 'int' 0
|-CXXMethodDecl 0x5611b0e41b28 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5611b0e41a30 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5611b0e59638 <col:34, line:463:5>
|   |-ParenExpr 0x5611b0e59480 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5611b0e59450 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5611b0e590b8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5611b0e59088 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5611b0e58fd8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5611b0e58fc0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5611b0e58f80 <col:23> 'int' lvalue ParmVar 0x5611b0e41a30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5611b0e58fa0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5611b0e59068 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5611b0e59038 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5611b0e58ff8 <col:33> 'int' lvalue ParmVar 0x5611b0e41a30 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5611b0e59050 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5611b0e59018 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5611b0e3f6c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5611b0e59118 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5611b0e590f8 <col:56> 'int' 0
|   |   `-CallExpr 0x5611b0e593b0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5611b0e59398 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5611b0e59378 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5611b08f6fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5611b0e593f0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e59208 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5611b0e59408 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e59238 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5611b0e59420 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5611b0e59270 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5611b0e59438 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5611b0e59360 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5611b0e59348 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5611b0e59308 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5611b0e59628 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5611b0e59610 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5611b0e595f0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5611b0e595c0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5611b0e59570 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5611b0e47d40
|         |   `-CXXMemberCallExpr 0x5611b0e59550 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5611b0e59520 <col:9> '<bound member function type>' ->xanno 0x5611b0e3f2d8
|         |       `-CXXThisExpr 0x5611b0e59510 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5611b0e595d8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5611b0e595a0 <col:21> 'int' lvalue ParmVar 0x5611b0e41a30 'i' 'int'
|-CXXMethodDecl 0x5611b0e41d78 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5611b0e41be8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5611b0e41c60 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5611b0e59cc8 <col:40, line:472:5>
|   |-ParenExpr 0x5611b0e59ae0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5611b0e59ab0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5611b0e59790 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5611b0e59760 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5611b0e596b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5611b0e59698 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5611b0e59658 <col:23> 'int' lvalue ParmVar 0x5611b0e41be8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5611b0e59678 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5611b0e59740 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5611b0e59710 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5611b0e596d0 <col:33> 'int' lvalue ParmVar 0x5611b0e41be8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5611b0e59728 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5611b0e596f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5611b0e3f6c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5611b0e597f0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5611b0e597d0 <col:56> 'int' 0
|   |   `-CallExpr 0x5611b0e59a10 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5611b0e599f8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5611b0e599d8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5611b08f6fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5611b0e59a50 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e59860 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5611b0e59a68 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e59890 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5611b0e59a80 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5611b0e598c8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5611b0e59a98 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5611b0e599c0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5611b0e599a8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5611b0e59968 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5611b0e59ca8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5611b0e59c50 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5611b0e59c20 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5611b0e59bd0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5611b0e47d40
|     | |   `-CXXMemberCallExpr 0x5611b0e59bb0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5611b0e59b80 <col:2> '<bound member function type>' ->xanno 0x5611b0e3f478
|     | |       `-CXXThisExpr 0x5611b0e59b70 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5611b0e59c38 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5611b0e59c00 <col:14> 'int' lvalue ParmVar 0x5611b0e41be8 'i' 'int'
|     `-ImplicitCastExpr 0x5611b0e59c90 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5611b0e59c70 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5611b0e41c60 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5611b0e41f38 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5611b0e41e40 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5611b0e5a448 <col:36, line:485:5>
|   |-ParenExpr 0x5611b0e5a1b0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5611b0e5a180 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5611b0e59e60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5611b0e59e30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5611b0e59d40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5611b0e59d28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5611b0e59ce8 <col:23> 'int' lvalue ParmVar 0x5611b0e41e40 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5611b0e59d08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5611b0e59e10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5611b0e59df8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5611b0e59d60 <col:33> 'int' lvalue ParmVar 0x5611b0e41e40 'i' 'int'
|   |   |     `-BinaryOperator 0x5611b0e59dd8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5611b0e59dc0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5611b0e59d80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5611b0e3f6c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5611b0e59da0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5611b0e59ec0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5611b0e59ea0 <col:60> 'int' 0
|   |   `-CallExpr 0x5611b0e5a0e0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5611b0e5a0c8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5611b0e5a0a8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5611b08f6fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5611b0e5a120 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e59f30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5611b0e5a138 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e59f68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5611b0e5a150 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5611b0e59fa0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5611b0e5a168 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5611b0e5a090 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5611b0e5a078 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5611b0e5a038 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5611b0e5a438 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5611b0e5a420 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5611b0e5a408 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5611b0e5a3d8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5611b0e5a378 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5611b0e5a348 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5611b0e5a2c0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5611b0e47c90
|             |   `-CXXMemberCallExpr 0x5611b0e5a2a0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5611b0e5a270 <col:61> '<bound member function type>' ->xanno 0x5611b0e3f2d8
|             |       `-CXXThisExpr 0x5611b0e5a260 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5611b0e5a360 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5611b0e5a2f0 <col:74> 'int' lvalue ParmVar 0x5611b0e41e40 'i' 'int'
|-CXXMethodDecl 0x5611b0e42188 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5611b0e41ff8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5611b0e42070 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5611b0e5ab98 <col:42, line:500:5>
|   |-ParenExpr 0x5611b0e5a930 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5611b0e5a900 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5611b0e5a5e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5611b0e5a5b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5611b0e5a4c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5611b0e5a4a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5611b0e5a468 <col:23> 'int' lvalue ParmVar 0x5611b0e41ff8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5611b0e5a488 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5611b0e5a590 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5611b0e5a578 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5611b0e5a4e0 <col:33> 'int' lvalue ParmVar 0x5611b0e41ff8 'i' 'int'
|   |   |     `-BinaryOperator 0x5611b0e5a558 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5611b0e5a540 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5611b0e5a500 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5611b0e3f6c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5611b0e5a520 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5611b0e5a640 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5611b0e5a620 <col:60> 'int' 0
|   |   `-CallExpr 0x5611b0e5a860 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5611b0e5a848 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5611b0e5a828 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5611b08f6fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5611b0e5a8a0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e5a6b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5611b0e5a8b8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e5a6e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5611b0e5a8d0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5611b0e5a720 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5611b0e5a8e8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5611b0e5a810 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5611b0e5a7f8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5611b0e5a7b8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5611b0e5ab78 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5611b0e5ab28 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5611b0e5aaf8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5611b0e5aaa0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5611b0e5aa70 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5611b0e5aa20 <col:48, col:57> 'char [48]' lvalue ->c 0x5611b0e47c90
|     |     |   `-CXXMemberCallExpr 0x5611b0e5aa00 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5611b0e5a9d0 <col:48> '<bound member function type>' ->xanno 0x5611b0e3f478
|     |     |       `-CXXThisExpr 0x5611b0e5a9c0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5611b0e5aa88 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5611b0e5aa50 <col:61> 'int' lvalue ParmVar 0x5611b0e41ff8 'i' 'int'
|     `-ImplicitCastExpr 0x5611b0e5ab60 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5611b0e5ab40 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5611b0e42070 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5611b0e42348 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5611b0e42250 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5611b0e5b2f8 <col:35, line:513:5>
|   |-ParenExpr 0x5611b0e5b008 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5611b0e5afd8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5611b0e5ad30 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5611b0e5ad00 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5611b0e5ac10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5611b0e5abf8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5611b0e5abb8 <col:23> 'int' lvalue ParmVar 0x5611b0e42250 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5611b0e5abd8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5611b0e5ace0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5611b0e5acc8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5611b0e5ac30 <col:33> 'int' lvalue ParmVar 0x5611b0e42250 'i' 'int'
|   |   |     `-BinaryOperator 0x5611b0e5aca8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5611b0e5ac90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5611b0e5ac50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5611b0e3f6c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5611b0e5ac70 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5611b0e5ad90 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5611b0e5ad70 <col:60> 'int' 0
|   |   `-CallExpr 0x5611b0e5af38 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5611b0e5af20 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5611b0e5af00 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5611b08f6fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5611b0e5af78 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e5ae00 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5611b0e5af90 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e5ae38 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5611b0e5afa8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5611b0e5ae70 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5611b0e5afc0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5611b0e5aee8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5611b0e5aed0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5611b0e5ae90 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5611b0e5b2e8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5611b0e5b2d0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5611b0e5b2b8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5611b0e5b288 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5611b0e5b200 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5611b0e5b1d0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5611b0e5b180 <col:60, col:69> 'char const[48]' lvalue ->c 0x5611b0e47c90
|             |   `-CXXMemberCallExpr 0x5611b0e5b160 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5611b0e5b130 <col:60> '<bound member function type>' ->xanno 0x5611b0e3f2d8
|             |       `-CXXThisExpr 0x5611b0e5b120 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5611b0e5b1e8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5611b0e5b1b0 <col:73> 'int' lvalue ParmVar 0x5611b0e42250 'i' 'int'
|-CXXMethodDecl 0x5611b0e42598 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5611b0e42408 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5611b0e42480 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5611b0e5b9d8 <col:41, line:528:5>
|   |-ParenExpr 0x5611b0e5b768 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5611b0e5b738 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5611b0e5b490 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5611b0e5b460 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5611b0e5b370 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5611b0e5b358 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5611b0e5b318 <col:23> 'int' lvalue ParmVar 0x5611b0e42408 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5611b0e5b338 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5611b0e5b440 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5611b0e5b428 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5611b0e5b390 <col:33> 'int' lvalue ParmVar 0x5611b0e42408 'i' 'int'
|   |   |     `-BinaryOperator 0x5611b0e5b408 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5611b0e5b3f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5611b0e5b3b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5611b0e3f6c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5611b0e5b3d0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5611b0e5b4f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5611b0e5b4d0 <col:60> 'int' 0
|   |   `-CallExpr 0x5611b0e5b698 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5611b0e5b680 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5611b0e5b660 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5611b08f6fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5611b0e5b6d8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e5b560 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5611b0e5b6f0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e5b598 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5611b0e5b708 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5611b0e5b5d0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5611b0e5b720 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5611b0e5b648 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5611b0e5b630 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5611b0e5b5f0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5611b0e5b9b8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5611b0e5b968 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5611b0e5b938 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5611b0e5b8d8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5611b0e5b8a8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5611b0e5b858 <col:47, col:56> 'char [48]' lvalue ->c 0x5611b0e47c90
|     |     |   `-CXXMemberCallExpr 0x5611b0e5b838 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5611b0e5b808 <col:47> '<bound member function type>' ->xanno 0x5611b0e3f478
|     |     |       `-CXXThisExpr 0x5611b0e5b7f8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5611b0e5b8c0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5611b0e5b888 <col:60> 'int' lvalue ParmVar 0x5611b0e42408 'i' 'int'
|     `-ImplicitCastExpr 0x5611b0e5b9a0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5611b0e5b980 <col:65> 'int16_t':'short' lvalue ParmVar 0x5611b0e42480 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5611b0e42758 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5611b0e42660 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5611b0e5c0a8 <col:36, line:541:5>
|   |-ParenExpr 0x5611b0e5be48 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5611b0e5be18 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5611b0e5bb70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5611b0e5bb40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5611b0e5ba50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5611b0e5ba38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5611b0e5b9f8 <col:23> 'int' lvalue ParmVar 0x5611b0e42660 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5611b0e5ba18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5611b0e5bb20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5611b0e5bb08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5611b0e5ba70 <col:33> 'int' lvalue ParmVar 0x5611b0e42660 'i' 'int'
|   |   |     `-BinaryOperator 0x5611b0e5bae8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5611b0e5bad0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5611b0e5ba90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5611b0e3f6c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5611b0e5bab0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5611b0e5bbd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5611b0e5bbb0 <col:60> 'int' 0
|   |   `-CallExpr 0x5611b0e5bd78 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5611b0e5bd60 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5611b0e5bd40 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5611b08f6fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5611b0e5bdb8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e5bc40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5611b0e5bdd0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e5bc78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5611b0e5bde8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5611b0e5bcb0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5611b0e5be00 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5611b0e5bd28 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5611b0e5bd10 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5611b0e5bcd0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5611b0e5c098 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5611b0e5c080 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5611b0e5c068 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5611b0e5c038 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5611b0e5bfe0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5611b0e5bfb0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5611b0e5bf60 <col:61, col:70> 'char const[48]' lvalue ->c 0x5611b0e47c90
|             |   `-CXXMemberCallExpr 0x5611b0e5bf40 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5611b0e5bf10 <col:61> '<bound member function type>' ->xanno 0x5611b0e3f2d8
|             |       `-CXXThisExpr 0x5611b0e5bf00 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5611b0e5bfc8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5611b0e5bf90 <col:74> 'int' lvalue ParmVar 0x5611b0e42660 'i' 'int'
|-CXXMethodDecl 0x5611b0e42928 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5611b0e42818 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5611b0e42890 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5611b0e429d8 <col:20>
| `-OptimizeNoneAttr 0x5611b0e42a30 <col:30>
|-CXXMethodDecl 0x5611b0e42b68 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5611b0e42a70 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5611b0e5c778 <col:35, line:562:5>
|   |-ParenExpr 0x5611b0e5c518 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5611b0e5c4e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5611b0e5c240 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5611b0e5c210 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5611b0e5c120 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5611b0e5c108 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5611b0e5c0c8 <col:23> 'int' lvalue ParmVar 0x5611b0e42a70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5611b0e5c0e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5611b0e5c1f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5611b0e5c1d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5611b0e5c140 <col:33> 'int' lvalue ParmVar 0x5611b0e42a70 'i' 'int'
|   |   |     `-BinaryOperator 0x5611b0e5c1b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5611b0e5c1a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5611b0e5c160 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5611b0e3f6c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5611b0e5c180 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5611b0e5c2a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5611b0e5c280 <col:60> 'int' 0
|   |   `-CallExpr 0x5611b0e5c448 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5611b0e5c430 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5611b0e5c410 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5611b08f6fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5611b0e5c488 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e5c310 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5611b0e5c4a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e5c348 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5611b0e5c4b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5611b0e5c380 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5611b0e5c4d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5611b0e5c3f8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5611b0e5c3e0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5611b0e5c3a0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5611b0e5c768 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5611b0e5c750 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5611b0e5c738 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5611b0e5c708 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5611b0e5c6b0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5611b0e5c680 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5611b0e5c630 <col:60, col:69> 'char const[48]' lvalue ->c 0x5611b0e47c90
|             |   `-CXXMemberCallExpr 0x5611b0e5c610 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5611b0e5c5e0 <col:60> '<bound member function type>' ->xanno 0x5611b0e3f2d8
|             |       `-CXXThisExpr 0x5611b0e5c5d0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5611b0e5c698 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5611b0e5c660 <col:73> 'int' lvalue ParmVar 0x5611b0e42a70 'i' 'int'
|-CXXMethodDecl 0x5611b0e42d78 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5611b0e42c28 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5611b0e42ca0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5611b0e5ce58 <col:41, line:577:5>
|   |-ParenExpr 0x5611b0e5cbe8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5611b0e5cbb8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5611b0e5c910 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5611b0e5c8e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5611b0e5c7f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5611b0e5c7d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5611b0e5c798 <col:23> 'int' lvalue ParmVar 0x5611b0e42c28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5611b0e5c7b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5611b0e5c8c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5611b0e5c8a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5611b0e5c810 <col:33> 'int' lvalue ParmVar 0x5611b0e42c28 'i' 'int'
|   |   |     `-BinaryOperator 0x5611b0e5c888 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5611b0e5c870 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5611b0e5c830 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5611b0e3f6c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5611b0e5c850 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5611b0e5c970 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5611b0e5c950 <col:60> 'int' 0
|   |   `-CallExpr 0x5611b0e5cb18 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5611b0e5cb00 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5611b0e5cae0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5611b08f6fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5611b0e5cb58 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e5c9e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5611b0e5cb70 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e5ca18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5611b0e5cb88 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5611b0e5ca50 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5611b0e5cba0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5611b0e5cac8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5611b0e5cab0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5611b0e5ca70 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5611b0e5ce38 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5611b0e5cde8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5611b0e5cdb8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5611b0e5cd58 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5611b0e5cd28 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5611b0e5ccd8 <col:47, col:56> 'char [48]' lvalue ->c 0x5611b0e47c90
|     |     |   `-CXXMemberCallExpr 0x5611b0e5ccb8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5611b0e5cc88 <col:47> '<bound member function type>' ->xanno 0x5611b0e3f478
|     |     |       `-CXXThisExpr 0x5611b0e5cc78 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5611b0e5cd40 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5611b0e5cd08 <col:60> 'int' lvalue ParmVar 0x5611b0e42c28 'i' 'int'
|     `-ImplicitCastExpr 0x5611b0e5ce20 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5611b0e5ce00 <col:65> 'int32_t':'int' lvalue ParmVar 0x5611b0e42ca0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5611b0e42f38 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5611b0e42e40 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5611b0e5d588 <col:36, line:591:5>
|   |-ParenExpr 0x5611b0e5d2c8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5611b0e5d298 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5611b0e5cff0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5611b0e5cfc0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5611b0e5ced0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5611b0e5ceb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5611b0e5ce78 <col:23> 'int' lvalue ParmVar 0x5611b0e42e40 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5611b0e5ce98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5611b0e5cfa0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5611b0e5cf88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5611b0e5cef0 <col:33> 'int' lvalue ParmVar 0x5611b0e42e40 'i' 'int'
|   |   |     `-BinaryOperator 0x5611b0e5cf68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5611b0e5cf50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5611b0e5cf10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5611b0e3f6c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5611b0e5cf30 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5611b0e5d050 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5611b0e5d030 <col:60> 'int' 0
|   |   `-CallExpr 0x5611b0e5d1f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5611b0e5d1e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5611b0e5d1c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5611b08f6fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5611b0e5d238 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e5d0c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5611b0e5d250 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e5d0f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5611b0e5d268 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5611b0e5d130 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5611b0e5d280 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5611b0e5d1a8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5611b0e5d190 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5611b0e5d150 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5611b0e5d578 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5611b0e5d560 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5611b0e5d548 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5611b0e5d518 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5611b0e5d490 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5611b0e5d460 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5611b0e5d410 <col:61, col:70> 'char const[48]' lvalue ->c 0x5611b0e47c90
|             |   `-CXXMemberCallExpr 0x5611b0e5d3f0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5611b0e5d3c0 <col:61> '<bound member function type>' ->xanno 0x5611b0e3f2d8
|             |       `-CXXThisExpr 0x5611b0e5d3b0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5611b0e5d478 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5611b0e5d440 <col:74> 'int' lvalue ParmVar 0x5611b0e42e40 'i' 'int'
|-CXXMethodDecl 0x5611b0e43188 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5611b0e42ff8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5611b0e43070 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5611b0e5dc68 <col:42, line:606:5>
|   |-ParenExpr 0x5611b0e5d9f8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5611b0e5d9c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5611b0e5d720 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5611b0e5d6f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5611b0e5d600 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5611b0e5d5e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5611b0e5d5a8 <col:23> 'int' lvalue ParmVar 0x5611b0e42ff8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5611b0e5d5c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5611b0e5d6d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5611b0e5d6b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5611b0e5d620 <col:33> 'int' lvalue ParmVar 0x5611b0e42ff8 'i' 'int'
|   |   |     `-BinaryOperator 0x5611b0e5d698 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5611b0e5d680 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5611b0e5d640 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5611b0e3f6c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5611b0e5d660 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5611b0e5d780 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5611b0e5d760 <col:60> 'int' 0
|   |   `-CallExpr 0x5611b0e5d928 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5611b0e5d910 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5611b0e5d8f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5611b08f6fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5611b0e5d968 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e5d7f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5611b0e5d980 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e5d828 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5611b0e5d998 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5611b0e5d860 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5611b0e5d9b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5611b0e5d8d8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5611b0e5d8c0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5611b0e5d880 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5611b0e5dc48 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5611b0e5dbf8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5611b0e5dbc8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5611b0e5db68 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5611b0e5db38 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5611b0e5dae8 <col:48, col:57> 'char [48]' lvalue ->c 0x5611b0e47c90
|     |     |   `-CXXMemberCallExpr 0x5611b0e5dac8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5611b0e5da98 <col:48> '<bound member function type>' ->xanno 0x5611b0e3f478
|     |     |       `-CXXThisExpr 0x5611b0e5da88 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5611b0e5db50 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5611b0e5db18 <col:61> 'int' lvalue ParmVar 0x5611b0e42ff8 'i' 'int'
|     `-ImplicitCastExpr 0x5611b0e5dc30 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5611b0e5dc10 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5611b0e43070 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5611b0e43320 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5611b0e43250 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5611b0e5e4d8 <col:33, line:620:5>
|   |-ParenExpr 0x5611b0e5e250 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5611b0e5e220 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5611b0e5de70 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5611b0e5de40 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5611b0e5dce0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5611b0e5dcc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5611b0e5dc88 <col:23> 'int' lvalue ParmVar 0x5611b0e43250 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5611b0e5dca8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5611b0e5de20 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5611b0e5de08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5611b0e5dd00 <col:33> 'int' lvalue ParmVar 0x5611b0e43250 'i' 'int'
|   |   |     `-BinaryOperator 0x5611b0e5dde8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5611b0e5ddd0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5611b0e5dd20 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5611b0e3f6c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5611b0e5dda8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5611b0e5dd90 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5611b0e5dd58 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5611b0e5ded0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5611b0e5deb0 <col:79> 'int' 0
|   |   `-CallExpr 0x5611b0e5e180 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5611b0e5e168 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5611b0e5e148 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5611b08f6fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5611b0e5e1c0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e5dfb8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5611b0e5e1d8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e5e000 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5611b0e5e1f0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5611b0e5e038 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5611b0e5e208 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5611b0e5e130 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5611b0e5e118 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5611b0e5e0d8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5611b0e5e4c8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5611b0e5e4b0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5611b0e5e498 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5611b0e5e468 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5611b0e5e3e0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5611b0e5e3b0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5611b0e5e360 <col:67, col:76> 'char const[48]' lvalue ->c 0x5611b0e47c90
|             |   `-CXXMemberCallExpr 0x5611b0e5e340 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5611b0e5e310 <col:67> '<bound member function type>' ->xanno 0x5611b0e3f2d8
|             |       `-CXXThisExpr 0x5611b0e5e300 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5611b0e5e3c8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5611b0e5e390 <col:80> 'int' lvalue ParmVar 0x5611b0e43250 'i' 'int'
|-CXXMethodDecl 0x5611b0e43538 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5611b0e433e0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5611b0e43460 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5611b0e5ed00 <col:45, line:635:5>
|   |-ParenExpr 0x5611b0e5ea48 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5611b0e5ea18 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5611b0e5e6e0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5611b0e5e6b0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5611b0e5e550 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5611b0e5e538 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5611b0e5e4f8 <col:23> 'int' lvalue ParmVar 0x5611b0e433e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5611b0e5e518 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5611b0e5e690 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5611b0e5e678 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5611b0e5e570 <col:33> 'int' lvalue ParmVar 0x5611b0e433e0 'i' 'int'
|   |   |     `-BinaryOperator 0x5611b0e5e658 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5611b0e5e640 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5611b0e5e590 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5611b0e3f6c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5611b0e5e618 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5611b0e5e600 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5611b0e5e5c8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5611b0e5e740 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5611b0e5e720 <col:79> 'int' 0
|   |   `-CallExpr 0x5611b0e5e978 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5611b0e5e960 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5611b0e5e940 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5611b08f6fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5611b0e5e9b8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e5e7b0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5611b0e5e9d0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5611b0e5e7f8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5611b0e5e9e8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5611b0e5e830 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5611b0e5ea00 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5611b0e5e928 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5611b0e5e910 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5611b0e5e8c8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5611b0e5ece0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5611b0e5ec48 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5611b0e5ec18 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5611b0e5ebb8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5611b0e5eb88 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5611b0e5eb38 <col:54, col:63> 'char [48]' lvalue ->c 0x5611b0e47c90
|     |     |   `-CXXMemberCallExpr 0x5611b0e5eb18 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5611b0e5eae8 <col:54> '<bound member function type>' ->xanno 0x5611b0e3f478
|     |     |       `-CXXThisExpr 0x5611b0e5ead8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5611b0e5eba0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5611b0e5eb68 <col:67> 'int' lvalue ParmVar 0x5611b0e433e0 'i' 'int'
|     `-CXXConstCastExpr 0x5611b0e5ecb0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5611b0e5ec98 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5611b0e5ec60 <col:91> 'const void *' lvalue ParmVar 0x5611b0e43460 'x' 'const void *'
|-CXXMethodDecl 0x5611b0e43608 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5611b0e5ed88 <col:34, line:640:5>
|   `-ReturnStmt 0x5611b0e5ed78 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5611b0e5ed60 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5611b0e5ed30 <col:16> 'Packet *' lvalue ->_data_packet 0x5611b0e487d8
|         `-CXXThisExpr 0x5611b0e5ed20 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5611b0e43748 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5611b0e436b8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5611b0e57ec8 <col:46> 'bool' true
|-CXXMethodDecl 0x5611b0e438c8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5611b0e43800 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5611b0e43970 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5611b0e44120 <line:660:22> "" ""
| |-EnumConstantDecl 0x5611b0e43a70 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5611b0e44190 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e43a50 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5611b0e43a30 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5611b0e38b70 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5611b0e43b00 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5611b0e441a8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e43ae0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5611b0e43ac0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5611b0e38c00 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5611b0e43b90 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5611b0e441c0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e43b70 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5611b0e43b50 <col:21> 'int' 0
| |-EnumConstantDecl 0x5611b0e43c20 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5611b0e441d8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e43c00 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5611b0e43be0 <col:19> 'int' 16
| |-EnumConstantDecl 0x5611b0e43cb0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5611b0e441f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e43c90 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5611b0e43c70 <col:21> 'int' 16
| |-EnumConstantDecl 0x5611b0e43d40 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5611b0e44208 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e43d20 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5611b0e43d00 <col:19> 'int' 32
| |-EnumConstantDecl 0x5611b0e43dd0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5611b0e44220 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e43db0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5611b0e43d90 <col:19> 'int' EnumConstant 0x5611b0e43c20 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5611b0e43e60 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5611b0e44238 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e43e40 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5611b0e43e20 <col:19> 'int' EnumConstant 0x5611b0e43d40 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5611b0e43f30 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5611b0e44250 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e43f10 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5611b0e43ef0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5611b0e43eb0 <col:23> 'int' EnumConstant 0x5611b0e43e60 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5611b0e43ed0 <col:40> 'int' 2
| |-EnumConstantDecl 0x5611b0e44000 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5611b0e44268 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0e43fe0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5611b0e43fc0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5611b0e43f80 <col:23> 'int' EnumConstant 0x5611b0e43e60 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5611b0e43fa0 <col:40> 'int' 4
| `-EnumConstantDecl 0x5611b0e440d0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5611b0e44280 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0e440b0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5611b0e44090 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5611b0e44050 <col:23> 'int' EnumConstant 0x5611b0e43e60 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5611b0e44070 <col:40> 'int' 8
|-CXXMethodDecl 0x5611b0e442c0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5611b0e44360 <col:68> "" ""
|-CXXMethodDecl 0x5611b0e443f8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5611b0e44498 <col:45> "" ""
|-CXXMethodDecl 0x5611b0e44530 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5611b0e445d0 <col:57> "" ""
|-CXXMethodDecl 0x5611b0e44668 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5611b0e44708 <col:45> "" ""
|-CXXMethodDecl 0x5611b0e447a0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5611b0e44840 <col:57> "" ""
|-CXXMethodDecl 0x5611b0e448d0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5611b0e44970 <col:51> "" ""
|-CXXMethodDecl 0x5611b0e44a00 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5611b0e44aa0 <col:63> "" ""
|-CXXMethodDecl 0x5611b0e44b30 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5611b0e44bd0 <col:53> "" ""
|-CXXMethodDecl 0x5611b0e44c60 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5611b0e44d00 <col:65> "" ""
|-CXXMethodDecl 0x5611b0e44e18 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5611b0e44d88 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5611b0e44ec0 <col:61> "" ""
|-CXXMethodDecl 0x5611b0e45058 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5611b0e44f48 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5611b0e44fc0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5611b0e45108 <col:67> "" ""
|-CXXMethodDecl 0x5611b0e45220 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5611b0e45190 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5611b0e452c8 <col:63> "" ""
|-CXXMethodDecl 0x5611b0e45460 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5611b0e45350 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5611b0e453c8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5611b0e45510 <col:69> "" ""
|-CXXMethodDecl 0x5611b0e45628 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5611b0e45598 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5611b0e456d0 <col:63> "" ""
|-CXXMethodDecl 0x5611b0e45868 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5611b0e45758 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5611b0e457d0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5611b0e45918 <col:69> "" ""
|-CXXMethodDecl 0x5611b0e45a30 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5611b0e459a0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5611b0e45ad8 <col:62> "" ""
|-CXXMethodDecl 0x5611b0e45c70 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5611b0e45b60 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5611b0e45bd8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5611b0e45d20 <col:68> "" ""
|-CXXMethodDecl 0x5611b0e45e38 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5611b0e45da8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5611b0e45ee0 <col:63> "" ""
|-CXXMethodDecl 0x5611b0e46078 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5611b0e45f68 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5611b0e45fe0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5611b0e46128 <col:69> "" ""
|-CXXMethodDecl 0x5611b0e461b8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5611b0e46258 <col:64> "" ""
|-CXXMethodDecl 0x5611b0e462e8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5611b0e46388 <col:52> "" ""
|-CXXMethodDecl 0x5611b0e46418 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5611b0e464b8 <col:67> "" ""
|-CXXMethodDecl 0x5611b0e46548 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5611b0e465e8 <col:55> "" ""
|-CXXMethodDecl 0x5611b0e46700 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5611b0e46670 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5611b0e467a8 <col:58> "" ""
|-CXXMethodDecl 0x5611b0e46940 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5611b0e46830 <col:33> col:36 'int'
| |-ParmVarDecl 0x5611b0e468a8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5611b0e469f0 <col:62> "" ""
|-CXXMethodDecl 0x5611b0e46b08 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5611b0e46a78 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5611b0e46bb0 <col:58> "" ""
|-CXXMethodDecl 0x5611b0e46d48 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5611b0e46c38 <col:33> col:36 'int'
| |-ParmVarDecl 0x5611b0e46cb0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5611b0e46df8 <col:62> "" ""
|-CXXMethodDecl 0x5611b0e46f10 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5611b0e46e80 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5611b0e46fb8 <col:60> "" ""
|-CXXMethodDecl 0x5611b0e47150 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5611b0e47040 <col:34> col:37 'int'
| |-ParmVarDecl 0x5611b0e470b8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5611b0e47200 <col:64> "" ""
|-CXXMethodDecl 0x5611b0e47318 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5611b0e47288 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5611b0e473c0 <col:58> "" ""
|-CXXMethodDecl 0x5611b0e47558 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5611b0e47448 <col:33> col:36 'int'
| |-ParmVarDecl 0x5611b0e474c0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5611b0e47608 <col:62> "" ""
|-CXXMethodDecl 0x5611b0e47720 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5611b0e47690 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5611b0e477c8 <col:59> "" ""
|-CXXMethodDecl 0x5611b0e47960 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5611b0e47850 <col:33> col:36 'int'
| |-ParmVarDecl 0x5611b0e478c8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5611b0e47a10 <col:63> "" ""
|-AccessSpecDecl 0x5611b0e47a80 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5611b0e47aa8 prev 0x5611b0e3f1b0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5611b0e47ba0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5611b0e47c90 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5611b0e47d40 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5611b0e47ec8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5611b0e48048 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5611b0e481c8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5611b0e5ef08 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5611b0e5f808 <col:11>
| |-CXXDestructorDecl 0x5611b0e5f070 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5611b0e5f1a8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5611b0e5f1a8
| | `-ParmVarDecl 0x5611b0e5f2b8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5611b0e5f358 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5611b0e5f358
| | `-ParmVarDecl 0x5611b0e5f468 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5611b0e62198 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5611b0e622a8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5611b0e62528 <col:11>
| |   `-ReturnStmt 0x5611b0e62518 <col:11>
| |     `-UnaryOperator 0x5611b0e62500 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5611b0e624f0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5611b0e62318 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5611b0e62318
|   `-ParmVarDecl 0x5611b0e62428 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5611b0e48230 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5611b0e48348 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5611b0e483e8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5611b0e48450 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5611b0e484b8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5611b0e48520 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5611b0e48580 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5611b0e48640 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5611b0e486a0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5611b0e48700 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5611b0e5ee18 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5611b0e483e8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5611b0e5f818 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5611b0e5f870 <col:12>
| |-CXXConstructorDecl 0x5611b0e5f4d8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5611b0e5f4d8
| | `-ParmVarDecl 0x5611b0e5f5e8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5611b0e5f688 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5611b0e5f688
| | `-ParmVarDecl 0x5611b0e5f798 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5611b0e61880 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5611b0e48778 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5611b0e487d8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5611b0e48840 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5611b0e488a8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5611b0e48910 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5611b0e48978 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5611b0e489d8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5611b0e48a38 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5611b0e48aa0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5611b0e48b28 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5611b0e48778 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5611b0e5edb0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5611b0e489d8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5611b0e5f880 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5611b0e5f8e0 <col:21, line:755:5>
|-CXXConstructorDecl 0x5611b0e48cc8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5611b0e48c08 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5611b0e57060 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5611b0e57248 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5611b0e57150 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5611b0e57518 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5611b0e57300 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5611b0e57378 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5611b0e573f0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0e57738 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5611b0e575e8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5611b0e57660 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5611b0e57a08 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5611b0e577f8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5611b0e57870 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5611b0e578e8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5611b0e57b60 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5611b0e57ad0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0e57ca8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5611b0e57c18 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5611b0e57da0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_tcp
         0 |   uint16_t th_sport
         2 |   uint16_t th_dport
         4 |   tcp_seq_t th_seq
         8 |   tcp_seq_t th_ack
    12:0-3 |   unsigned int th_flags2
    12:4-7 |   unsigned int th_off
        13 |   uint8_t th_flags
        14 |   uint16_t th_win
        16 |   uint16_t th_sum
        18 |   uint16_t th_urp
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0e2b998 <../dummy_inc/clicknet/tcp.h:24:1, line:51:1> line:24:8 struct click_tcp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5611b0e2bab8 <col:1, col:8> col:8 implicit struct click_tcp
|-FieldDecl 0x5611b0e2bb58 <line:25:5, col:14> col:14 th_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x5611b0e2bbb8 <line:26:5, col:14> col:14 th_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x5611b0e2bc40 <line:27:5, col:15> col:15 referenced th_seq 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x5611b0e2bca0 <line:28:5, col:15> col:15 th_ack 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x5611b0e2bd48 <line:30:5, col:26> col:14 th_flags2 'unsigned int'
| `-ConstantExpr 0x5611b0e2bd28 <col:26> 'int' Int: 4
|   `-IntegerLiteral 0x5611b0e2bcf0 <col:26> 'int' 4
|-FieldDecl 0x5611b0e2bdf0 <line:31:5, col:23> col:14 referenced th_off 'unsigned int'
| `-ConstantExpr 0x5611b0e2bdd0 <col:23> 'int' Int: 4
|   `-IntegerLiteral 0x5611b0e2bd98 <col:23> 'int' 4
|-FieldDecl 0x5611b0e2be50 <line:39:5, col:13> col:13 referenced th_flags 'uint8_t':'unsigned char'
|-FieldDecl 0x5611b0e2beb0 <line:48:5, col:14> col:14 th_win 'uint16_t':'unsigned short'
|-FieldDecl 0x5611b0e2bf10 <line:49:5, col:14> col:14 th_sum 'uint16_t':'unsigned short'
`-FieldDecl 0x5611b0e2bf70 <line:50:5, col:14> col:14 th_urp 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0e5f8f0 prev 0x5611b0e387f0 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x5611b0e5fa28 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x5611b0e5fab8 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x5611b0e5fb60 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x5611b0e5fc00 <col:20>
| `-OptimizeNoneAttr 0x5611b0e5fc58 <col:30>
|-CXXMethodDecl 0x5611b0e5fca8 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x5611b0e5fd48 <col:20>
| `-OptimizeNoneAttr 0x5611b0e5fda0 <col:30>
|-CXXMethodDecl 0x5611b0e5fdf0 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5611b0e5feb8 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5611b0e5ff80 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5611b0e60098 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x5611b0e60160 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x5611b0e60200 <col:20>
| `-OptimizeNoneAttr 0x5611b0e60258 <col:30>
|-CXXMethodDecl 0x5611b0e602c8 <line:787:5, col:62> col:50 used ip_header 'click_ip *() const'
| |-NoInlineAttr 0x5611b0e60368 <col:20>
| `-OptimizeNoneAttr 0x5611b0e603c0 <col:30>
|-CXXMethodDecl 0x5611b0e60468 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x5611b0e60508 <col:20>
| `-OptimizeNoneAttr 0x5611b0e60560 <col:30>
|-CXXMethodDecl 0x5611b0e605b0 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5611b0e606c8 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x5611b0e607e8 <line:791:5, col:36> col:23 used tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x5611b0e60908 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x5611b0e609d0 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x5611b0e60a70 <col:62> "" ""
|-AccessSpecDecl 0x5611b0e60ae0 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x5611b0e60b40 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x5611b0e61738 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x5611b0e61960 <col:29, col:31>
|-CXXMethodDecl 0x5611b0e60c08 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x5611b0e60d48 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x5611b0e60cb8 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x5611b0e60e40 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x5611b0e61970 <col:23, col:25>
|-CXXMethodDecl 0x5611b0e60ff8 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x5611b0e60f30 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x5611b0e612c8 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5611b0e610b0 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5611b0e61128 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5611b0e611a0 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0e61458 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x5611b0e61390 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x5611b0e61550 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x5611b0e615b8 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x5611b0e615b8
  `-ParmVarDecl 0x5611b0e616c8 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0b232c8 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5611b0b233e8 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x5611b0b234b0 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x5611b0e2f700 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5611b0e31888 <col:8>
|-CXXConstructorDecl 0x5611b0e2f808 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x5611b0e2f808
| `-ParmVarDecl 0x5611b0e2f918 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x5611b0e2f9b8 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5611b0e2fac8 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x5611b0b234b0 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x5611b0e31aa0 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5611b0e31a70 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x5611b0b234b0
| |     `-CXXStaticCastExpr 0x5611b0e31a40 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x5611b0e31a10 <col:8> 'in_addr' lvalue ParmVar 0x5611b0e2fac8 '' 'in_addr &&'
| `-CompoundStmt 0x5611b0e31ae8 <col:8>
`-CXXDestructorDecl 0x5611b0e31d20 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0e28e20 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5611b0e28f38 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x5611b0e29020 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x5611b0e29000 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x5611b0e28fc8 <col:22> 'int' 4
|-FieldDecl 0x5611b0e290c8 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x5611b0e290a8 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x5611b0e29070 <col:21> 'int' 4
|-FieldDecl 0x5611b0e29128 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x5611b0e29188 <line:40:5, col:14> col:14 referenced ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x5611b0e291e8 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x5611b0e29248 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x5611b0e292a8 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x5611b0e29308 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x5611b0e29368 <line:49:5, col:14> col:14 ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x5611b0e293d8 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x5611b0e29448 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0dc48b0 prev 0x5611b0dc3418 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5611b0dc49a8 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5611b0dc4a38 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5611b0dc4b78 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5611b0dc4a70 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5611b0dc5fc0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5611b0dc5fa0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5611b0dc5b40 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5611b0dc6050 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5611b0dc6010 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5611b0dc4a70 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5611b0dc5ba8 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5611b0dc60d0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5611b0dc6090 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5611b0dc5c08 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5611b0dc6110 <col:54> 'bool' false
| `-CompoundStmt 0x5611b0dc6218 <col:61, line:38:5>
|   `-BinaryOperator 0x5611b0dc61f8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x5611b0dc6190 <col:9> 'const Element *' lvalue ->_context 0x5611b0dc5ae0
|     | `-CXXThisExpr 0x5611b0dc6180 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5611b0dc61e0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x5611b0dc61c0 <col:20> 'int' 0
|-CXXConstructorDecl 0x5611b0dc4d88 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5611b0dc4c38 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5611b0dc4cb0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5611b0dc5ff8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5611b0dc5fd8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x5611b0dc5ae0 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5611b0dc6270 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5611b0dc6230 <col:20> 'const Element *' lvalue ParmVar 0x5611b0dc4c38 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5611b0dc5b40 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5611b0dc62f0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5611b0dc62b0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5611b0dc4cb0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5611b0dc5ba8 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5611b0dc6370 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5611b0dc6330 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5611b0dc5c08 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5611b0dc63b0 <col:73> 'bool' false
| `-CompoundStmt 0x5611b0dc6428 <col:80, line:46:5>
|-CXXMethodDecl 0x5611b0dc4eb8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5611b0dc64a0 <col:36, line:51:5>
|   `-ReturnStmt 0x5611b0dc6490 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5611b0dc6478 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5611b0dc6448 <col:16> 'const Element *const' lvalue ->_context 0x5611b0dc5ae0
|         `-CXXThisExpr 0x5611b0dc6438 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5611b0dc4fa8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5611b0dc6520 <col:32, line:57:5>
|   `-ReturnStmt 0x5611b0dc6510 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5611b0dc64f8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5611b0dc64c8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5611b0dc5b40
|         `-CXXThisExpr 0x5611b0dc64b8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5611b0dc5068 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5611b0dc51f0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x5611b0dc5120 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5611b0dc5340 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5611b0dc52b0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5611b0dc5490 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5611b0dc5400 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5611b0dc5698 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5611b0dc5548 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5611b0dc55c0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5611b0dc59f0 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5611b0dc5758 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5611b0dc57d8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x5611b0dc58a0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5611b0dc5aa8 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x5611b0dc5ae0 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5611b0dc5b40 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5611b0dc5ba8 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5611b0dc5c08 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5611b0dc5c58 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5611b0dc5c58
| `-ParmVarDecl 0x5611b0dc5d68 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x5611b0dc5e08 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x5611b0dc5e08
| `-ParmVarDecl 0x5611b0dc5f18 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5611b1082f28 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0ddc6e8 prev 0x5611b0dcb398 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5611b0ddc7e0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x5611b0ddc8d0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5611b0e06760 <col:16, line:828:9>
|-CXXDestructorDecl 0x5611b0ddc9c0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5611b0e06770 <col:25, line:830:9>
|-CXXMethodDecl 0x5611b0ddcac0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5611b0ddcb70 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5611b0ddcc18 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5611b0ddcc18
| `-ParmVarDecl 0x5611b0ddcd28 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5611b0ddd4e8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5611b0ddd4e8
  `-ParmVarDecl 0x5611b0ddd5f8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0dcb1a8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x5611b0dcb308 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x5611b0dcb398 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x5611b0dcb450 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x5611b0dcb558 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x5611b0dcb488 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5611b0df44a8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5611b0df4488 <col:31> 'int' 0
|-CXXConstructorDecl 0x5611b0dcb878 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x5611b0dcb6f0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x5611b0dcb768 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5611b0df44e0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5611b0df44c0 <col:59> 'int' 0
|-CXXConstructorDecl 0x5611b0dcba50 <line:265:5, col:56> col:5 used Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5611b0dcb940 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x5611b0dcb9b8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5611b0df4518 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5611b0df44f8 <col:55> 'int' 0
|-CXXConstructorDecl 0x5611b0dcbe08 <line:271:5, line:272:32> line:271:5 Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5611b0dcbbf0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x5611b0dcbc68 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x5611b0dcbce0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5611b0df4550 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5611b0df4530 <col:31> 'int' 0
|-CXXConstructorDecl 0x5611b0dcbfc8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x5611b0dcbf08 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x5611b0dcc0c0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x5611b0dcc2a8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x5611b0dcc1b0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x5611b0dcc398 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5611b0df4940 <col:24, line:291:5>
|   `-ReturnStmt 0x5611b0df4930 <line:290:9, col:79>
|     `-BinaryOperator 0x5611b0df4910 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5611b0df47a8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5611b0df4700 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5611b0df46e0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5611b0df45d8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5611b0df45c0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5611b0df45a8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5611b0df4578 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5611b0de44e0
|       | |   |       `-CXXThisExpr 0x5611b0df4568 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5611b0df46c8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5611b0df46b0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5611b0df4678 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5611b0df4648 <col:28, col:35> '<bound member function type>' ->size 0x5611b0be09d8
|       | |           `-ImplicitCastExpr 0x5611b0df4698 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5611b0df4630 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5611b0df4600 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5611b0de44e0
|       | |                 `-CXXThisExpr 0x5611b0df45f0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5611b0df4790 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5611b0df4778 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5611b0df4760 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5611b0df4730 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5611b0df29c0
|       |         `-CXXThisExpr 0x5611b0df4720 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5611b0df48f0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5611b0df48d8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5611b0df48c0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5611b0df4880 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5611b0df4868 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5611b0df47d8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5611b0df2ae8
|         |     |   `-CXXThisExpr 0x5611b0df47c8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5611b0df4808 <col:73> 'int' 0
|         `-IntegerLiteral 0x5611b0df48a0 <col:79> 'int' 0
|-CXXMethodDecl 0x5611b0dcc458 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5611b0df4b18 <col:32, line:296:5>
|   `-ReturnStmt 0x5611b0df4b08 <line:295:9, col:49>
|     `-BinaryOperator 0x5611b0df4ae8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5611b0df49c8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5611b0df49b0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5611b0df4998 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5611b0df4968 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5611b0df29c0
|       |       `-CXXThisExpr 0x5611b0df4958 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5611b0df4ac8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5611b0df4ab0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5611b0df4a98 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5611b0df4a58 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5611b0df4a40 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5611b0df49f0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5611b0df2ae8
|         |     |   `-CXXThisExpr 0x5611b0df49e0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5611b0df4a20 <col:43> 'int' 0
|         `-IntegerLiteral 0x5611b0df4a78 <col:49> 'int' 0
|-CXXMethodDecl 0x5611b0dcc548 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5611b0df4d28 <col:19, line:306:5>
|   |-IfStmt 0x5611b0df4c48 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5611b0df4b88 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5611b0df4b70 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5611b0df4b40 <col:13> 'Vector<String> *' lvalue ->_conf 0x5611b0de44e0
|   | |     `-CXXThisExpr 0x5611b0df4b30 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5611b0df4c28 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5611b0df4bf8 <col:13, col:20> '<bound member function type>' ->clear 0x5611b0be3408
|   |     `-ImplicitCastExpr 0x5611b0df4be0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5611b0df4bb0 <col:13> 'Vector<String> *' lvalue ->_conf 0x5611b0de44e0
|   |         `-CXXThisExpr 0x5611b0df4ba0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5611b0df4cd0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5611b0df4ca0 <col:9, col:16> '<bound member function type>' .clear 0x5611b0df2548
|   |   `-MemberExpr 0x5611b0df4c70 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5611b0df2960
|   |     `-CXXThisExpr 0x5611b0df4c60 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5611b0df4d18 <line:305:9, col:17>
|     `-UnaryOperator 0x5611b0df4d00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5611b0df4cf0 <col:17> 'Args *' this
|-CXXMethodDecl 0x5611b0dcc7c8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x5611b0dcc6d0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x5611b0dcc948 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x5611b0dcc880 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x5611b0dcccc8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x5611b0dcc9f0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x5611b0dccc28 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x5611b0dcca98 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x5611b0dccb10 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5611b0df5038 <col:67, line:327:5>
|     |-WhileStmt 0x5611b0df4fe8 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5611b0df4e00 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5611b0df4d90 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5611b0bf74c0 0x5611b0bb55b0 0x5611b0bb5260 0x5611b0bb4b50 0x5611b0b85dd0 0x5611b0b420d0
|     | | |-DeclRefExpr 0x5611b0df4d50 <col:16> 'Iter' lvalue ParmVar 0x5611b0dcca98 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5611b0df4d70 <col:25> 'Iter' lvalue ParmVar 0x5611b0dccb10 'end' 'Iter'
|     | `-CompoundStmt 0x5611b0df4fc8 <col:30, line:325:9>
|     |   |-CallExpr 0x5611b0df4f68 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5611b0df4e48 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5611b0df4f38 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5611b0df4ec8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5611b0c5e668 0x5611b0c5e288 0x5611b0c5deb8 0x5611b0c5dad8 0x5611b0c5d6f8 0x5611b0c5d328
|     |   |   `-DeclRefExpr 0x5611b0df4ea8 <col:24> 'Iter' lvalue ParmVar 0x5611b0dcca98 'begin' 'Iter'
|     |   `-UnaryOperator 0x5611b0df4fb0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5611b0df4f90 <col:15> 'Iter' lvalue ParmVar 0x5611b0dcca98 'begin' 'Iter'
|     `-ReturnStmt 0x5611b0df5028 <line:326:9, col:17>
|       `-UnaryOperator 0x5611b0df5010 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5611b0df5000 <col:17> 'Args *' this
|-CXXMethodDecl 0x5611b0dccdd0 <line:331:5, col:44> col:11 used push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x5611b0dccd40 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x5611b0dccf18 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x5611b0dcce88 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x5611b0dccfe0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5611b0df5118 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5611b0df50b8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5611b0df5068 <col:9> '<bound member function type>' ->reset_from 0x5611b0df2e68
|   | | `-CXXThisExpr 0x5611b0df5058 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5611b0df5098 <col:20> 'int' 0
|   `-ReturnStmt 0x5611b0df5108 <line:352:9, col:17>
|     `-UnaryOperator 0x5611b0df50f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5611b0df50e0 <col:17> 'Args *' this
|-VarDecl 0x5611b0dcd098 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x5611b0dcd100 <col:38> 'int' 1
|-VarDecl 0x5611b0dcd190 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x5611b0dcd1f8 <col:39> 'int' 2
|-VarDecl 0x5611b0dcd288 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x5611b0dcd2f0 <col:39> 'int' 4
|-VarDecl 0x5611b0dcd380 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x5611b0dcd3e8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x5611b0dcd768 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x5611b0dcd460 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5611b0dcd6c8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5611b0dcd510 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dcd5b8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x5611b0df5270 <col:43, line:371:5>
|     `-ReturnStmt 0x5611b0df5260 <line:370:9, col:34>
|       `-CallExpr 0x5611b0df5228 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5611b0df5148 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5611b0df51c8 <col:21> 'const char *' lvalue ParmVar 0x5611b0dcd510 'keyword' 'const char *'
|         |-IntegerLiteral 0x5611b0df51e8 <col:30> 'int' 0
|         `-DeclRefExpr 0x5611b0df5208 <col:33> 'T' lvalue ParmVar 0x5611b0dcd5b8 'x' 'T &'
|-FunctionTemplateDecl 0x5611b0dcdab0 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x5611b0dcd7d0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5611b0dcda10 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5611b0dcd880 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dcd928 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5611b0df53c0 <col:45, line:375:5>
|     `-ReturnStmt 0x5611b0df53b0 <line:374:9, col:42>
|       `-CallExpr 0x5611b0df5378 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5611b0df5298 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5611b0df5318 <col:21> 'const char *' lvalue ParmVar 0x5611b0dcd880 'keyword' 'const char *'
|         |-DeclRefExpr 0x5611b0df5338 <col:30> 'const int' lvalue Var 0x5611b0dcd098 'mandatory' 'const int'
|         `-DeclRefExpr 0x5611b0df5358 <col:41> 'T' lvalue ParmVar 0x5611b0dcd928 'x' 'T &'
|-FunctionTemplateDecl 0x5611b0dcdde8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x5611b0dcdb18 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5611b0dcdd48 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5611b0dcdbd0 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5611b0dcdc78 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x5611b0df5510 <col:45, line:379:5>
| |   `-ReturnStmt 0x5611b0df5500 <line:378:9, col:43>
| |     `-CallExpr 0x5611b0df54c8 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5611b0df53e8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5611b0df5468 <col:21> 'const char *' lvalue ParmVar 0x5611b0dcdbd0 'keyword' 'const char *'
| |       |-DeclRefExpr 0x5611b0df5488 <col:30> 'const int' lvalue Var 0x5611b0dcd190 'positional' 'const int'
| |       `-DeclRefExpr 0x5611b0df54a8 <col:42> 'T' lvalue ParmVar 0x5611b0dcdc78 'x' 'T &'
| `-CXXMethodDecl 0x5611b1084628 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, String &)'
|   |-TemplateArgument type 'String'
|   |-ParmVarDecl 0x5611b1084488 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x5611b1084558 <col:39, col:42> col:42 x 'String &'
|-FunctionTemplateDecl 0x5611b0dce118 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x5611b0dcde50 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5611b0dce078 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5611b0dcdf00 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5611b0dcdfa8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x5611b0df5710 <col:46, line:383:5>
| |   `-ReturnStmt 0x5611b0df5700 <line:382:9, col:55>
| |     `-CallExpr 0x5611b0df56c8 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5611b0df5538 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5611b0df55b8 <col:21> 'const char *' lvalue ParmVar 0x5611b0dcdf00 'keyword' 'const char *'
| |       |-BinaryOperator 0x5611b0df5688 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x5611b0df5638 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5611b0df5618 <col:30> 'const int' lvalue Var 0x5611b0dcd098 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x5611b0df5670 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5611b0df5650 <col:42> 'const int' lvalue Var 0x5611b0dcd190 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x5611b0df56a8 <col:54> 'T' lvalue ParmVar 0x5611b0dcdfa8 'x' 'T &'
| `-CXXMethodDecl 0x5611b1083408 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, String &)'
|   |-TemplateArgument type 'String'
|   |-ParmVarDecl 0x5611b1083228 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x5611b10832f8 <col:40, col:43> col:43 x 'String &'
|-FunctionTemplateDecl 0x5611b0dce518 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x5611b0dce180 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5611b0dce478 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x5611b0dce230 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dce2b0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5611b0dce358 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5611b0df5850 <col:54, line:388:5>
|     |-CallExpr 0x5611b0df57d8 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5611b0df5728 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5611b0df5768 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5611b0df5778 <col:30> 'const char *' lvalue ParmVar 0x5611b0dce230 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5611b0df5798 <col:39> 'int' lvalue ParmVar 0x5611b0dce2b0 'flags' 'int'
|     | `-DeclRefExpr 0x5611b0df57b8 <col:46> 'T' lvalue ParmVar 0x5611b0dce358 'x' 'T &'
|     `-ReturnStmt 0x5611b0df5840 <line:387:9, col:17>
|       `-UnaryOperator 0x5611b0df5828 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5611b0df5818 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5611b0dce9c8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x5611b0dce588 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5611b0dce608 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5611b0dce928 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5611b0dce6c8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dce768 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x5611b0dce808 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5611b0df59c0 <col:74, line:403:5>
|     `-ReturnStmt 0x5611b0df59b0 <line:402:9, col:56>
|       `-CallExpr 0x5611b0df5970 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5611b0df5880 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5611b0df58f0 <col:28> 'const char *' lvalue ParmVar 0x5611b0dce6c8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5611b0df5910 <col:37> 'int' 0
|         |-DeclRefExpr 0x5611b0df5930 <col:40> 'T' lvalue ParmVar 0x5611b0dce768 'x' 'T &'
|         `-DeclRefExpr 0x5611b0df5950 <col:43> 'const V' lvalue ParmVar 0x5611b0dce808 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5611b0dcee38 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5611b0dcea38 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5611b0dceab8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5611b0dced98 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5611b0dceb78 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dcec18 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x5611b0dcecb8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5611b0df5b28 <col:76, line:407:5>
|     `-ReturnStmt 0x5611b0df5b18 <line:406:9, col:65>
|       `-CallExpr 0x5611b0df5ad8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5611b0df59e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5611b0df5a58 <col:28> 'const char *' lvalue ParmVar 0x5611b0dceb78 'keyword' 'const char *'
|         |-DeclRefExpr 0x5611b0df5a78 <col:37> 'const int' lvalue Var 0x5611b0dcd190 'positional' 'const int'
|         |-DeclRefExpr 0x5611b0df5a98 <col:49> 'T' lvalue ParmVar 0x5611b0dcec18 'x' 'T &'
|         `-DeclRefExpr 0x5611b0df5ab8 <col:52> 'const V' lvalue ParmVar 0x5611b0dcecb8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5611b0dcf388 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x5611b0dceea8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5611b0dcef28 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5611b0dcf2e8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5611b0dcefe8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dcf068 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5611b0dcf108 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x5611b0dcf1a8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5611b0df5c90 <col:85, line:412:5>
|     |-CallExpr 0x5611b0df5c10 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5611b0df5b40 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5611b0df5b80 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5611b0df5b90 <col:37> 'const char *' lvalue ParmVar 0x5611b0dcefe8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5611b0df5bb0 <col:46> 'int' lvalue ParmVar 0x5611b0dcf068 'flags' 'int'
|     | |-DeclRefExpr 0x5611b0df5bd0 <col:53> 'T' lvalue ParmVar 0x5611b0dcf108 'x' 'T &'
|     | `-DeclRefExpr 0x5611b0df5bf0 <col:56> 'const V' lvalue ParmVar 0x5611b0dcf1a8 'default_value' 'const V &'
|     `-ReturnStmt 0x5611b0df5c80 <line:411:9, col:17>
|       `-UnaryOperator 0x5611b0df5c68 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5611b0df5c58 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5611b0dcf818 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5611b0dcf400 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0dcf478 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5611b0dcf778 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5611b0dcf538 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dcf5b0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5611b0dcf658 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x5611b0df5e10 <col:53, line:425:5>
|     `-ReturnStmt 0x5611b0df5e00 <line:424:9, col:42>
|       `-CallExpr 0x5611b0df5dc0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5611b0df5cc0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5611b0df5d40 <col:21> 'const char *' lvalue ParmVar 0x5611b0dcf538 'keyword' 'const char *'
|         |-IntegerLiteral 0x5611b0df5d60 <col:30> 'int' 0
|         |-DeclRefExpr 0x5611b0df5d80 <col:33> 'P' lvalue ParmVar 0x5611b0dcf5b0 'parser' 'P'
|         `-DeclRefExpr 0x5611b0df5da0 <col:41> 'T' lvalue ParmVar 0x5611b0dcf658 'x' 'T &'
|-FunctionTemplateDecl 0x5611b0dcfc68 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x5611b0dcf888 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0dcf908 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5611b0dcfbc8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5611b0dcf9c8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dcfa40 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5611b0dcfae8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5611b0df5f88 <col:55, line:429:5>
|     `-ReturnStmt 0x5611b0df5f78 <line:428:9, col:50>
|       `-CallExpr 0x5611b0df5f38 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5611b0df5e38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5611b0df5eb8 <col:21> 'const char *' lvalue ParmVar 0x5611b0dcf9c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5611b0df5ed8 <col:30> 'const int' lvalue Var 0x5611b0dcd098 'mandatory' 'const int'
|         |-DeclRefExpr 0x5611b0df5ef8 <col:41> 'P' lvalue ParmVar 0x5611b0dcfa40 'parser' 'P'
|         `-DeclRefExpr 0x5611b0df5f18 <col:49> 'T' lvalue ParmVar 0x5611b0dcfae8 'x' 'T &'
|-FunctionTemplateDecl 0x5611b0dd00b8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x5611b0dcfcd8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0dcfd58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x5611b0dd0018 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x5611b0dcfe18 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5611b0dcfe90 <col:39, col:41> col:41 referenced parser 'P'
| | |-ParmVarDecl 0x5611b0dcff38 <col:49, col:52> col:52 referenced x 'T &'
| | `-CompoundStmt 0x5611b0df6100 <col:55, line:433:5>
| |   `-ReturnStmt 0x5611b0df60f0 <line:432:9, col:51>
| |     `-CallExpr 0x5611b0df60b0 <col:16, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5611b0df5fb0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5611b0df6030 <col:21> 'const char *' lvalue ParmVar 0x5611b0dcfe18 'keyword' 'const char *'
| |       |-DeclRefExpr 0x5611b0df6050 <col:30> 'const int' lvalue Var 0x5611b0dcd190 'positional' 'const int'
| |       |-DeclRefExpr 0x5611b0df6070 <col:42> 'P' lvalue ParmVar 0x5611b0dcfe90 'parser' 'P'
| |       `-DeclRefExpr 0x5611b0df6090 <col:50> 'T' lvalue ParmVar 0x5611b0dcff38 'x' 'T &'
| `-CXXMethodDecl 0x5611b1084c28 <line:431:5, line:433:5> line:431:11 used read_p 'Args &(const char *, IPPortArg, unsigned short &)'
|   |-TemplateArgument type 'IPPortArg'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x5611b10849d8 <col:18, col:30> col:30 keyword 'const char *'
|   |-ParmVarDecl 0x5611b1084a78 <col:39, col:41> col:41 parser 'IPPortArg':'IPPortArg'
|   `-ParmVarDecl 0x5611b1084b48 <col:49, col:52> col:52 x 'unsigned short &'
|-FunctionTemplateDecl 0x5611b0dd0508 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x5611b0dd0128 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0dd01a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x5611b0dd0468 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x5611b0dd0268 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5611b0dd02e0 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x5611b0dd0388 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x5611b0df6328 <col:56, line:437:5>
| |   `-ReturnStmt 0x5611b0df6318 <line:436:9, col:63>
| |     `-CallExpr 0x5611b0df62d8 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5611b0df6128 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5611b0df61a8 <col:21> 'const char *' lvalue ParmVar 0x5611b0dd0268 'keyword' 'const char *'
| |       |-BinaryOperator 0x5611b0df6278 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x5611b0df6228 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5611b0df6208 <col:30> 'const int' lvalue Var 0x5611b0dcd098 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x5611b0df6260 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5611b0df6240 <col:42> 'const int' lvalue Var 0x5611b0dcd190 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x5611b0df6298 <col:54> 'P' lvalue ParmVar 0x5611b0dd02e0 'parser' 'P'
| |       `-DeclRefExpr 0x5611b0df62b8 <col:62> 'T' lvalue ParmVar 0x5611b0dd0388 'x' 'T &'
| `-CXXMethodDecl 0x5611b1084008 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, IPPortArg, unsigned short &)'
|   |-TemplateArgument type 'IPPortArg'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x5611b1083d70 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x5611b1083e18 <col:40, col:42> col:42 parser 'IPPortArg':'IPPortArg'
|   `-ParmVarDecl 0x5611b1083ee8 <col:50, col:53> col:53 x 'unsigned short &'
|-FunctionTemplateDecl 0x5611b0dd0a38 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x5611b0dd0578 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0dd05f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5611b0dd0998 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5611b0dd06b8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd0738 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5611b0dd07b0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5611b0dd0858 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5611b0df6490 <col:64, line:442:5>
|     |-CallExpr 0x5611b0df6410 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5611b0df6340 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5611b0df6380 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5611b0df6390 <col:30> 'const char *' lvalue ParmVar 0x5611b0dd06b8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5611b0df63b0 <col:39> 'int' lvalue ParmVar 0x5611b0dd0738 'flags' 'int'
|     | |-DeclRefExpr 0x5611b0df63d0 <col:46> 'P' lvalue ParmVar 0x5611b0dd07b0 'parser' 'P'
|     | `-DeclRefExpr 0x5611b0df63f0 <col:54> 'T' lvalue ParmVar 0x5611b0dd0858 'x' 'T &'
|     `-ReturnStmt 0x5611b0df6480 <line:441:9, col:17>
|       `-UnaryOperator 0x5611b0df6468 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5611b0df6458 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5611b0dd1038 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x5611b0dd0ab0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0dd0b28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5611b0dd0ba8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5611b0dd0f98 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5611b0dd0c70 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd0ce8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5611b0dd0d88 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x5611b0dd0e58 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5611b0df6628 <col:84, line:458:5>
|     `-ReturnStmt 0x5611b0df6618 <line:457:9, col:64>
|       `-CallExpr 0x5611b0df65d0 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5611b0df64c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5611b0df6530 <col:28> 'const char *' lvalue ParmVar 0x5611b0dd0c70 'keyword' 'const char *'
|         |-IntegerLiteral 0x5611b0df6550 <col:37> 'int' 0
|         |-DeclRefExpr 0x5611b0df6570 <col:40> 'P' lvalue ParmVar 0x5611b0dd0ce8 'parser' 'P'
|         |-DeclRefExpr 0x5611b0df6590 <col:48> 'T' lvalue ParmVar 0x5611b0dd0d88 'x' 'T &'
|         `-DeclRefExpr 0x5611b0df65b0 <col:51> 'const V' lvalue ParmVar 0x5611b0dd0e58 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5611b0dd15b8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5611b0dd10b0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0dd1128 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5611b0dd11a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5611b0dd1518 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5611b0dd1270 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd12e8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5611b0dd1388 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x5611b0dd1428 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5611b0df67b8 <col:86, line:462:5>
|     `-ReturnStmt 0x5611b0df67a8 <line:461:9, col:73>
|       `-CallExpr 0x5611b0df6760 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5611b0df6650 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5611b0df66c0 <col:28> 'const char *' lvalue ParmVar 0x5611b0dd1270 'keyword' 'const char *'
|         |-DeclRefExpr 0x5611b0df66e0 <col:37> 'const int' lvalue Var 0x5611b0dcd190 'positional' 'const int'
|         |-DeclRefExpr 0x5611b0df6700 <col:49> 'P' lvalue ParmVar 0x5611b0dd12e8 'parser' 'P'
|         |-DeclRefExpr 0x5611b0df6720 <col:57> 'T' lvalue ParmVar 0x5611b0dd1388 'x' 'T &'
|         `-DeclRefExpr 0x5611b0df6740 <col:60> 'const V' lvalue ParmVar 0x5611b0dd1428 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5611b0dd1c48 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x5611b0dd1630 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0dd16a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5611b0dd1728 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5611b0dd1ba8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5611b0dd17f0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd1870 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5611b0dd18e8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x5611b0dd1988 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x5611b0dd1a58 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5611b0df6948 <col:95, line:467:5>
|     |-CallExpr 0x5611b0df68c0 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5611b0df67d0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5611b0df6810 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5611b0df6820 <col:37> 'const char *' lvalue ParmVar 0x5611b0dd17f0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5611b0df6840 <col:46> 'int' lvalue ParmVar 0x5611b0dd1870 'flags' 'int'
|     | |-DeclRefExpr 0x5611b0df6860 <col:53> 'P' lvalue ParmVar 0x5611b0dd18e8 'parser' 'P'
|     | |-DeclRefExpr 0x5611b0df6880 <col:61> 'T' lvalue ParmVar 0x5611b0dd1988 'x' 'T &'
|     | `-DeclRefExpr 0x5611b0df68a0 <col:64> 'const V' lvalue ParmVar 0x5611b0dd1a58 'default_value' 'const V &'
|     `-ReturnStmt 0x5611b0df6938 <line:466:9, col:17>
|       `-UnaryOperator 0x5611b0df6920 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5611b0df6910 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5611b0dd2228 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x5611b0dd1cc8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0dd1d48 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5611b0dd1dc8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5611b0dd2188 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5611b0dd1e90 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd1f08 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5611b0dd1fa8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5611b0dd2048 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5611b0df6af0 <col:63, line:481:5>
|     `-ReturnStmt 0x5611b0df6ae0 <line:480:9, col:47>
|       `-CallExpr 0x5611b0df6a98 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5611b0df6978 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5611b0df69f8 <col:21> 'const char *' lvalue ParmVar 0x5611b0dd1e90 'keyword' 'const char *'
|         |-IntegerLiteral 0x5611b0df6a18 <col:30> 'int' 0
|         |-DeclRefExpr 0x5611b0df6a38 <col:33> 'P' lvalue ParmVar 0x5611b0dd1f08 'parser' 'P'
|         |-DeclRefExpr 0x5611b0df6a58 <col:41> 'T1' lvalue ParmVar 0x5611b0dd1fa8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5611b0df6a78 <col:45> 'T2' lvalue ParmVar 0x5611b0dd2048 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5611b0dd27a8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x5611b0dd22a0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0dd2318 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5611b0dd2398 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5611b0dd2708 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5611b0dd2460 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd24d8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5611b0dd2578 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5611b0dd2618 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5611b0df6c90 <col:65, line:485:5>
|     `-ReturnStmt 0x5611b0df6c80 <line:484:9, col:55>
|       `-CallExpr 0x5611b0df6c38 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5611b0df6b18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5611b0df6b98 <col:21> 'const char *' lvalue ParmVar 0x5611b0dd2460 'keyword' 'const char *'
|         |-DeclRefExpr 0x5611b0df6bb8 <col:30> 'const int' lvalue Var 0x5611b0dcd098 'mandatory' 'const int'
|         |-DeclRefExpr 0x5611b0df6bd8 <col:41> 'P' lvalue ParmVar 0x5611b0dd24d8 'parser' 'P'
|         |-DeclRefExpr 0x5611b0df6bf8 <col:49> 'T1' lvalue ParmVar 0x5611b0dd2578 'x1' 'T1 &'
|         `-DeclRefExpr 0x5611b0df6c18 <col:53> 'T2' lvalue ParmVar 0x5611b0dd2618 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5611b0dd2d28 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x5611b0dd2820 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0dd2898 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5611b0dd2918 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5611b0dd2c88 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5611b0dd29e0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd2a58 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5611b0dd2af8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5611b0dd2b98 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5611b0df6e30 <col:65, line:489:5>
|     `-ReturnStmt 0x5611b0df6e20 <line:488:9, col:56>
|       `-CallExpr 0x5611b0df6dd8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5611b0df6cb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5611b0df6d38 <col:21> 'const char *' lvalue ParmVar 0x5611b0dd29e0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5611b0df6d58 <col:30> 'const int' lvalue Var 0x5611b0dcd190 'positional' 'const int'
|         |-DeclRefExpr 0x5611b0df6d78 <col:42> 'P' lvalue ParmVar 0x5611b0dd2a58 'parser' 'P'
|         |-DeclRefExpr 0x5611b0df6d98 <col:50> 'T1' lvalue ParmVar 0x5611b0dd2af8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5611b0df6db8 <col:54> 'T2' lvalue ParmVar 0x5611b0dd2b98 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5611b0dd32a8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x5611b0dd2da0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0dd2e18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5611b0dd2e98 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5611b0dd3208 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5611b0dd2f60 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd2fd8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5611b0dd3078 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5611b0dd3118 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5611b0df7080 <col:66, line:493:5>
|     `-ReturnStmt 0x5611b0df7070 <line:492:9, col:68>
|       `-CallExpr 0x5611b0df7028 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5611b0df6e58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5611b0df6ed8 <col:21> 'const char *' lvalue ParmVar 0x5611b0dd2f60 'keyword' 'const char *'
|         |-BinaryOperator 0x5611b0df6fa8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5611b0df6f58 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5611b0df6f38 <col:30> 'const int' lvalue Var 0x5611b0dcd098 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5611b0df6f90 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5611b0df6f70 <col:42> 'const int' lvalue Var 0x5611b0dcd190 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5611b0df6fc8 <col:54> 'P' lvalue ParmVar 0x5611b0dd2fd8 'parser' 'P'
|         |-DeclRefExpr 0x5611b0df6fe8 <col:62> 'T1' lvalue ParmVar 0x5611b0dd3078 'x1' 'T1 &'
|         `-DeclRefExpr 0x5611b0df7008 <col:66> 'T2' lvalue ParmVar 0x5611b0dd3118 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5611b0dd3908 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x5611b0dd3320 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0dd3398 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5611b0dd3418 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5611b0dd3868 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5611b0dd34e0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd3560 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5611b0dd35d8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5611b0dd3678 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5611b0dd3718 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5611b0df7210 <col:74, line:498:5>
|     |-CallExpr 0x5611b0df7188 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5611b0df7098 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5611b0df70d8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5611b0df70e8 <col:30> 'const char *' lvalue ParmVar 0x5611b0dd34e0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5611b0df7108 <col:39> 'int' lvalue ParmVar 0x5611b0dd3560 'flags' 'int'
|     | |-DeclRefExpr 0x5611b0df7128 <col:46> 'P' lvalue ParmVar 0x5611b0dd35d8 'parser' 'P'
|     | |-DeclRefExpr 0x5611b0df7148 <col:54> 'T1' lvalue ParmVar 0x5611b0dd3678 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5611b0df7168 <col:58> 'T2' lvalue ParmVar 0x5611b0dd3718 'x2' 'T2 &'
|     `-ReturnStmt 0x5611b0df7200 <line:497:9, col:17>
|       `-UnaryOperator 0x5611b0df71e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5611b0df71d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5611b0dd3c68 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x5611b0dd3988 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5611b0dd3bc8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5611b0dd3a40 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd3ab8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5611b0df7358 <col:52, line:509:5>
|     `-ReturnStmt 0x5611b0df7348 <line:508:9, col:44>
|       `-CallExpr 0x5611b0df7310 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5611b0df7240 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5611b0df72b0 <col:26> 'const char *' lvalue ParmVar 0x5611b0dd3a40 'keyword' 'const char *'
|         |-IntegerLiteral 0x5611b0df72d0 <col:35> 'int' 0
|         `-DeclRefExpr 0x5611b0df72f0 <col:38> 'P' lvalue ParmVar 0x5611b0dd3ab8 'parser' 'P'
|-FunctionTemplateDecl 0x5611b0dd3f68 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x5611b0dd3cd0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5611b0dd3ec8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5611b0dd3d80 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd3df8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5611b0df7498 <col:54, line:513:5>
|     `-ReturnStmt 0x5611b0df7488 <line:512:9, col:52>
|       `-CallExpr 0x5611b0df7450 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5611b0df7380 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5611b0df73f0 <col:26> 'const char *' lvalue ParmVar 0x5611b0dd3d80 'keyword' 'const char *'
|         |-DeclRefExpr 0x5611b0df7410 <col:35> 'const int' lvalue Var 0x5611b0dcd098 'mandatory' 'const int'
|         `-DeclRefExpr 0x5611b0df7430 <col:46> 'P' lvalue ParmVar 0x5611b0dd3df8 'parser' 'P'
|-FunctionTemplateDecl 0x5611b0dd4268 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x5611b0dd3fd0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5611b0dd41c8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5611b0dd4080 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd40f8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5611b0df75d8 <col:54, line:517:5>
|     `-ReturnStmt 0x5611b0df75c8 <line:516:9, col:53>
|       `-CallExpr 0x5611b0df7590 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5611b0df74c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5611b0df7530 <col:26> 'const char *' lvalue ParmVar 0x5611b0dd4080 'keyword' 'const char *'
|         |-DeclRefExpr 0x5611b0df7550 <col:35> 'const int' lvalue Var 0x5611b0dcd190 'positional' 'const int'
|         `-DeclRefExpr 0x5611b0df7570 <col:47> 'P' lvalue ParmVar 0x5611b0dd40f8 'parser' 'P'
|-FunctionTemplateDecl 0x5611b0dd4568 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x5611b0dd42d0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5611b0dd44c8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5611b0dd4380 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd43f8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5611b0df8ec8 <col:55, line:521:5>
|     `-ReturnStmt 0x5611b0df8eb8 <line:520:9, col:65>
|       `-CallExpr 0x5611b0df8e80 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5611b0df8d00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5611b0df8d70 <col:26> 'const char *' lvalue ParmVar 0x5611b0dd4380 'keyword' 'const char *'
|         |-BinaryOperator 0x5611b0df8e40 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5611b0df8df0 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5611b0df8dd0 <col:35> 'const int' lvalue Var 0x5611b0dcd098 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5611b0df8e28 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5611b0df8e08 <col:47> 'const int' lvalue Var 0x5611b0dcd190 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5611b0df8e60 <col:59> 'P' lvalue ParmVar 0x5611b0dd43f8 'parser' 'P'
|-FunctionTemplateDecl 0x5611b0dd4938 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x5611b0dd45d0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5611b0dd4898 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5611b0dd4680 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd4700 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5611b0dd4778 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5611b0df9008 <col:63, line:526:5>
|     |-CallExpr 0x5611b0df8f90 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5611b0df8ee0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5611b0df8f20 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5611b0df8f30 <col:35> 'const char *' lvalue ParmVar 0x5611b0dd4680 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5611b0df8f50 <col:44> 'int' lvalue ParmVar 0x5611b0dd4700 'flags' 'int'
|     | `-DeclRefExpr 0x5611b0df8f70 <col:51> 'P' lvalue ParmVar 0x5611b0dd4778 'parser' 'P'
|     `-ReturnStmt 0x5611b0df8ff8 <line:525:9, col:17>
|       `-UnaryOperator 0x5611b0df8fe0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5611b0df8fd0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5611b0dd4d88 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x5611b0dd49a8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0dd4a28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5611b0dd4ce8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5611b0dd4ae8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd4b60 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x5611b0dd4c08 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5611b0df9160 <col:58, line:541:5>
|     `-ReturnStmt 0x5611b0df9150 <line:540:9, col:39>
|       `-CallExpr 0x5611b0df9118 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5611b0df9038 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5611b0df90b8 <col:21> 'const char *' lvalue ParmVar 0x5611b0dd4ae8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5611b0df90d8 <col:30> 'P' lvalue ParmVar 0x5611b0dd4b60 'parser' 'P'
|         `-DeclRefExpr 0x5611b0df90f8 <col:38> 'T' lvalue ParmVar 0x5611b0dd4c08 'x' 'T &'
|-FunctionTemplateDecl 0x5611b0dd51d8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x5611b0dd4df8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0dd4e78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5611b0dd5138 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5611b0dd4f38 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd4fb0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5611b0dd5058 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5611b0df9298 <col:60, line:545:5>
|     `-ReturnStmt 0x5611b0df9288 <line:544:9, col:41>
|       `-CallExpr 0x5611b0df9250 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5611b0df9188 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5611b0df91f0 <col:23> 'const char *' lvalue ParmVar 0x5611b0dd4f38 'keyword' 'const char *'
|         |-DeclRefExpr 0x5611b0df9210 <col:32> 'P' lvalue ParmVar 0x5611b0dd4fb0 'parser' 'P'
|         `-DeclRefExpr 0x5611b0df9230 <col:40> 'T' lvalue ParmVar 0x5611b0dd5058 'x' 'T &'
|-FunctionTemplateDecl 0x5611b0dd5628 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5611b0dd5248 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0dd52c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5611b0dd5588 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5611b0dd5388 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd5400 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5611b0dd54a8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5611b0df93d0 <col:60, line:549:5>
|     `-ReturnStmt 0x5611b0df93c0 <line:548:9, col:41>
|       `-CallExpr 0x5611b0df9388 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5611b0df92c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5611b0df9328 <col:23> 'const char *' lvalue ParmVar 0x5611b0dd5388 'keyword' 'const char *'
|         |-DeclRefExpr 0x5611b0df9348 <col:32> 'P' lvalue ParmVar 0x5611b0dd5400 'parser' 'P'
|         `-DeclRefExpr 0x5611b0df9368 <col:40> 'T' lvalue ParmVar 0x5611b0dd54a8 'x' 'T &'
|-FunctionTemplateDecl 0x5611b0dd5ad0 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x5611b0dd5698 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0dd5718 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5611b0dd5a30 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5611b0dd57d8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd5850 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x5611b0dd58f8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5611b0df9508 <col:61, line:553:5>
|     `-ReturnStmt 0x5611b0df94f8 <line:552:9, col:42>
|       `-CallExpr 0x5611b0df94c0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5611b0df93f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5611b0df9460 <col:24> 'const char *' lvalue ParmVar 0x5611b0dd57d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5611b0df9480 <col:33> 'P' lvalue ParmVar 0x5611b0dd5850 'parser' 'P'
|         `-DeclRefExpr 0x5611b0df94a0 <col:41> 'T' lvalue ParmVar 0x5611b0dd58f8 'x' 'T &'
|-FunctionTemplateDecl 0x5611b0dd5fa8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x5611b0dd5b40 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0dd5bb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5611b0dd5f08 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5611b0dd5c78 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd5cf8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5611b0dd5d70 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x5611b0dd5e18 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5611b0df9680 <col:69, line:557:5>
|     `-ReturnStmt 0x5611b0df9670 <line:556:9, col:46>
|       `-CallExpr 0x5611b0df9630 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5611b0df9530 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5611b0df95b0 <col:21> 'const char *' lvalue ParmVar 0x5611b0dd5c78 'keyword' 'const char *'
|         |-DeclRefExpr 0x5611b0df95d0 <col:30> 'int' lvalue ParmVar 0x5611b0dd5cf8 'flags' 'int'
|         |-DeclRefExpr 0x5611b0df95f0 <col:37> 'P' lvalue ParmVar 0x5611b0dd5d70 'parser' 'P'
|         `-DeclRefExpr 0x5611b0df9610 <col:45> 'T' lvalue ParmVar 0x5611b0dd5e18 'x' 'T &'
|-FunctionTemplateDecl 0x5611b0dd62b8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x5611b0dd6020 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5611b0dd6218 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5611b0dd60d0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd6148 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5611b0df97c0 <col:56, line:571:5>
|     `-ReturnStmt 0x5611b0df97b0 <line:570:9, col:48>
|       `-CallExpr 0x5611b0df9778 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5611b0df96a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5611b0df9718 <col:30> 'const char *' lvalue ParmVar 0x5611b0dd60d0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5611b0df9738 <col:39> 'int' 0
|         `-DeclRefExpr 0x5611b0df9758 <col:42> 'P' lvalue ParmVar 0x5611b0dd6148 'parser' 'P'
|-FunctionTemplateDecl 0x5611b0dd6648 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x5611b0dd6320 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5611b0dd65a8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5611b0dd63d0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd6450 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5611b0dd64c8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5611b0df9990 <col:67, line:576:5>
|     |-CallExpr 0x5611b0df9918 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5611b0df97d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5611b0df9818 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5611b0df9828 <col:39> 'const char *' lvalue ParmVar 0x5611b0dd63d0 'keyword' 'const char *'
|     | |-BinaryOperator 0x5611b0df98d8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5611b0df9888 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5611b0df9848 <col:48> 'int' lvalue ParmVar 0x5611b0dd6450 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5611b0df98c0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5611b0df98a0 <col:56> 'const int' lvalue Var 0x5611b0dcd380 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5611b0df98f8 <col:68> 'P' lvalue ParmVar 0x5611b0dd64c8 'parser' 'P'
|     `-ReturnStmt 0x5611b0df9980 <line:575:9, col:17>
|       `-UnaryOperator 0x5611b0df9968 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5611b0df9958 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5611b0dd6a98 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x5611b0dd66b8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0dd6738 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5611b0dd69f8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5611b0dd67f8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd6870 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5611b0dd6918 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5611b0df9b00 <col:62, line:592:5>
|     `-ReturnStmt 0x5611b0df9af0 <line:591:9, col:51>
|       `-CallExpr 0x5611b0df9ab0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5611b0df99c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5611b0df9a30 <col:30> 'const char *' lvalue ParmVar 0x5611b0dd67f8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5611b0df9a50 <col:39> 'int' 0
|         |-DeclRefExpr 0x5611b0df9a70 <col:42> 'P' lvalue ParmVar 0x5611b0dd6870 'parser' 'P'
|         `-DeclRefExpr 0x5611b0df9a90 <col:50> 'T' lvalue ParmVar 0x5611b0dd6918 'x' 'T &'
|-FunctionTemplateDecl 0x5611b0dd6f78 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x5611b0dd6b08 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0dd6b88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5611b0dd6ed8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5611b0dd6c48 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd6cc8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5611b0dd6d40 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x5611b0dd6de8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5611b0df9cf8 <col:73, line:597:5>
|     |-CallExpr 0x5611b0df9c78 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5611b0df9b18 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5611b0df9b58 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5611b0df9b68 <col:39> 'const char *' lvalue ParmVar 0x5611b0dd6c48 'keyword' 'const char *'
|     | |-BinaryOperator 0x5611b0df9c18 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5611b0df9bc8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5611b0df9b88 <col:48> 'int' lvalue ParmVar 0x5611b0dd6cc8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5611b0df9c00 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5611b0df9be0 <col:56> 'const int' lvalue Var 0x5611b0dcd380 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5611b0df9c38 <col:68> 'P' lvalue ParmVar 0x5611b0dd6d40 'parser' 'P'
|     | `-DeclRefExpr 0x5611b0df9c58 <col:76> 'T' lvalue ParmVar 0x5611b0dd6de8 'x' 'T &'
|     `-ReturnStmt 0x5611b0df9ce8 <line:596:9, col:17>
|       `-UnaryOperator 0x5611b0df9cd0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5611b0df9cc0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5611b0dd7528 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x5611b0dd6ff0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0dd7068 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5611b0dd7488 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x5611b0dd7128 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd71a0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x5611b0dd7360 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5611b0df9e68 <col:65, line:614:5>
|     `-ReturnStmt 0x5611b0df9e58 <line:613:9, col:46>
|       `-CallExpr 0x5611b0df9e18 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5611b0df9d28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5611b0df9d98 <col:25> 'const char *' lvalue ParmVar 0x5611b0dd7128 'keyword' 'const char *'
|         |-IntegerLiteral 0x5611b0df9db8 <col:34> 'int' 0
|         |-DeclRefExpr 0x5611b0df9dd8 <col:37> 'P' lvalue ParmVar 0x5611b0dd71a0 'parser' 'P'
|         `-DeclRefExpr 0x5611b0df9df8 <col:45> 'Vector<T>' lvalue ParmVar 0x5611b0dd7360 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5611b0dd7958 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x5611b0dd7598 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5611b0dd78b8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x5611b0dd7650 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd77a0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5611b0dfa080 <col:55, line:618:5>
|     `-ReturnStmt 0x5611b0dfa070 <line:617:9, col:55>
|       `-CallExpr 0x5611b0dfa030 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5611b0df9e90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5611b0df9f00 <col:25> 'const char *' lvalue ParmVar 0x5611b0dd7650 'keyword' 'const char *'
|         |-IntegerLiteral 0x5611b0df9f20 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5611b0df9ff0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5611b0dfa010 <col:54> 'Vector<T>' lvalue ParmVar 0x5611b0dd77a0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5611b0dd7f28 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x5611b0dd79c0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0dd7a38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5611b0dd7e88 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5611b0dd7af8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd7b78 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5611b0dd7bf0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5611b0dd7d40 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5611b0dfa278 <col:76, line:623:5>
|     |-CallExpr 0x5611b0dfa1f8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5611b0dfa098 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5611b0dfa0d8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5611b0dfa0e8 <col:34> 'const char *' lvalue ParmVar 0x5611b0dd7af8 'keyword' 'const char *'
|     | |-BinaryOperator 0x5611b0dfa198 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5611b0dfa148 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5611b0dfa108 <col:43> 'int' lvalue ParmVar 0x5611b0dd7b78 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5611b0dfa180 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5611b0dfa160 <col:51> 'const int' lvalue Var 0x5611b0dcd380 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5611b0dfa1b8 <col:63> 'P' lvalue ParmVar 0x5611b0dd7bf0 'parser' 'P'
|     | `-DeclRefExpr 0x5611b0dfa1d8 <col:71> 'Vector<T>' lvalue ParmVar 0x5611b0dd7d40 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5611b0dfa268 <line:622:9, col:17>
|       `-UnaryOperator 0x5611b0dfa250 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5611b0dfa240 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5611b0dd8468 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x5611b0dd7fa0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0dd8018 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5611b0dd83c8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x5611b0dd80d8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd8158 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5611b0dd82a0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5611b0dfa4e0 <col:66, line:627:5>
|     `-ReturnStmt 0x5611b0dfa4d0 <line:626:9, col:59>
|       `-CallExpr 0x5611b0dfa490 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5611b0dfa2a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5611b0dfa318 <col:25> 'const char *' lvalue ParmVar 0x5611b0dd80d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5611b0dfa338 <col:34> 'int' lvalue ParmVar 0x5611b0dd8158 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5611b0dfa450 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5611b0dfa470 <col:58> 'Vector<T>' lvalue ParmVar 0x5611b0dd82a0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x5611b0dd84f8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5611b0dfa560 <col:25, line:633:5>
|   `-ReturnStmt 0x5611b0dfa550 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5611b0dfa538 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5611b0dfa508 <col:16> 'const bool' lvalue ->_status 0x5611b0de4348
|         `-CXXThisExpr 0x5611b0dfa4f8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5611b0dd86a8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x5611b0dd85e0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5611b0dfa648 <col:27, line:639:5>
|   |-BinaryOperator 0x5611b0dfa5f0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5611b0dfa578 <col:9> 'bool' lvalue ParmVar 0x5611b0dd85e0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5611b0dfa5d8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5611b0dfa5a8 <col:13> 'bool' lvalue ->_status 0x5611b0de4348
|   |     `-CXXThisExpr 0x5611b0dfa598 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5611b0dfa638 <line:638:9, col:17>
|     `-UnaryOperator 0x5611b0dfa620 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5611b0dfa610 <col:17> 'Args *' this
|-CXXMethodDecl 0x5611b0dd8828 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5611b0dd8768 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5611b0dfa738 <col:39, line:644:5>
|   |-BinaryOperator 0x5611b0dfa6e0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5611b0dfa668 <col:9> 'bool' lvalue ParmVar 0x5611b0dd8768 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5611b0dfa6c8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5611b0dfa698 <col:13> 'const bool' lvalue ->_status 0x5611b0de4348
|   |     `-CXXThisExpr 0x5611b0dfa688 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5611b0dfa728 <line:643:9, col:17>
|     `-UnaryOperator 0x5611b0dfa710 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5611b0dfa700 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5611b0dd88f0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5611b0dfa7e0 <col:30, line:651:5>
|   `-ReturnStmt 0x5611b0dfa7d0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5611b0dfa7b8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5611b0dfa788 <col:16> 'bool' lvalue ->_read_status 0x5611b0dc5c08
|         `-ImplicitCastExpr 0x5611b0dfa768 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5611b0dfa758 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5611b0dd8a38 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x5611b0dd89a8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5611b0dfa8e8 <col:32, line:658:5>
|   |-BinaryOperator 0x5611b0dfa890 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5611b0dfa7f8 <col:9> 'bool' lvalue ParmVar 0x5611b0dd89a8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5611b0dfa878 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5611b0dfa848 <col:13> 'bool' lvalue ->_read_status 0x5611b0dc5c08
|   |     `-ImplicitCastExpr 0x5611b0dfa828 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5611b0dfa818 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5611b0dfa8d8 <line:657:9, col:17>
|     `-UnaryOperator 0x5611b0dfa8c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5611b0dfa8b0 <col:17> 'Args *' this
|-CXXMethodDecl 0x5611b0dd8b88 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5611b0dd8af8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5611b0dfa9f8 <col:44, line:663:5>
|   |-BinaryOperator 0x5611b0dfa9a0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5611b0dfa908 <col:9> 'bool' lvalue ParmVar 0x5611b0dd8af8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5611b0dfa988 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5611b0dfa958 <col:13> 'bool' lvalue ->_read_status 0x5611b0dc5c08
|   |     `-ImplicitCastExpr 0x5611b0dfa938 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5611b0dfa928 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5611b0dfa9e8 <line:662:9, col:17>
|     `-UnaryOperator 0x5611b0dfa9d0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5611b0dfa9c0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5611b0dd8c50 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x5611b0dd8d18 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x5611b0dd8de0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x5611b0dd8ea8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x5611b0dd91b8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5611b0dd8f48 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5611b0dd9118 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x5611b0dd9028 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5611b0dfad50 <col:19, line:706:5>
|     `-IfStmt 0x5611b0dfad28 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5611b0dfaaf8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5611b0dfac58 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5611b0dfac28 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5611b0dfabe8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5611b0dfab50 <col:42> '<bound member function type>' ->simple_slot 0x5611b0df4110
|       |     | `-CXXThisExpr 0x5611b0dfab40 <col:42> 'Args *' implicit this
|       |     |-UnaryOperator 0x5611b0dfaba0 <col:54, col:55> '<dependent type>' prefix '&' cannot overflow
|       |     | `-DeclRefExpr 0x5611b0dfab80 <col:55> 'T' lvalue ParmVar 0x5611b0dd9028 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5611b0dfabc8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5611b0dfad18 <line:705:13, col:34>
|         `-CallExpr 0x5611b0dfacf0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5611b0dfac78 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5611b0dfacd0 <col:33> 'T' lvalue ParmVar 0x5611b0dd9028 'x' 'T &'
|-FunctionTemplateDecl 0x5611b0dd9488 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x5611b0dd9218 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5611b0dd93e8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x5611b0dd92f8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5611b0dfb130 <col:31, line:717:5>
|     |-DeclStmt 0x5611b0dfae90 <line:713:9, col:23>
|     | `-VarDecl 0x5611b0dfad78 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5611b0dfae68 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5611b0dfadf0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5611b0dfae48 <col:21> 'T' lvalue ParmVar 0x5611b0dd92f8 'x' 'T &'
|     |-IfStmt 0x5611b0dfb0e0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5611b0dfaf88 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5611b0dfb0c0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5611b0dfb060 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5611b0dfaff0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5611b0c5e668 0x5611b0c5e288 0x5611b0c5deb8 0x5611b0c5dad8 0x5611b0c5d6f8 0x5611b0c5d328
|     |   | `-DeclRefExpr 0x5611b0dfafd0 <col:14> 'T *' lvalue Var 0x5611b0dfad78 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5611b0dfb0a0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5611b0dfb118 <line:716:9, col:16>
|       `-DeclRefExpr 0x5611b0dfb0f8 <col:16> 'T *' lvalue Var 0x5611b0dfad78 's' 'T *'
|-FunctionTemplateDecl 0x5611b0dd9898 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x5611b0dd94e8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5611b0dd9568 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5611b0dd97f8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x5611b0dd9648 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x5611b0dd96e8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5611b0dfb440 <col:37, line:726:5>
|     |-IfStmt 0x5611b0dfb3d0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5611b0dfb3f0 <line:723:13, col:26>
|     | | `-VarDecl 0x5611b0dfb198 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5611b0dfb288 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5611b0dfb210 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5611b0dfb268 <col:25> 'T' lvalue ParmVar 0x5611b0dd9648 'x' 'T &'
|     | |-DeclRefExpr 0x5611b0dfb2b0 <col:16> 'T *' lvalue Var 0x5611b0dfb198 's' 'T *'
|     | `-BinaryOperator 0x5611b0dfb3b0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5611b0dfb360 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5611b0dfb2f0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5611b0c5e668 0x5611b0c5e288 0x5611b0c5deb8 0x5611b0c5dad8 0x5611b0c5d6f8 0x5611b0c5d328
|     |   | `-DeclRefExpr 0x5611b0dfb2d0 <col:14> 'T *' lvalue Var 0x5611b0dfb198 's' 'T *'
|     |   `-DeclRefExpr 0x5611b0dfb390 <col:18> 'const V' lvalue ParmVar 0x5611b0dd96e8 'value' 'const V &'
|     `-ReturnStmt 0x5611b0dfb430 <line:725:9, col:17>
|       `-UnaryOperator 0x5611b0dfb418 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5611b0dfb408 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5611b0dd9ca8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x5611b0dd9900 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5611b0dd9c08 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x5611b0dd99b0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd9a40 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5611b0dd9ae8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5611b0dfc260 <col:65, line:737:5>
|     |-DeclStmt 0x5611b0dfb4d8 <line:732:9, col:26>
|     | `-VarDecl 0x5611b0dfb470 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5611b0dfc228 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5611b0dfc248 <line:733:13, col:58>
|       | `-VarDecl 0x5611b0dfb500 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5611b0dfb6e0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5611b0dfb6b0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5611b0dfb698 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5611b0dfb678 <col:26, col:58> 'String' (CXXTemporary 0x5611b0dfb678)
|       |           `-CXXMemberCallExpr 0x5611b0dfb608 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5611b0dfb578 <col:26> '<bound member function type>' ->find 0x5611b0df3728
|       |             | `-CXXThisExpr 0x5611b0dfb568 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5611b0dfb640 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5611b0dfb5a8 <col:31> 'const char *' lvalue ParmVar 0x5611b0dd99b0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5611b0dfb658 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5611b0dfb5c8 <col:40> 'int' lvalue ParmVar 0x5611b0dd9a40 'flags' 'int'
|       |             `-DeclRefExpr 0x5611b0dfb5e8 <col:47> 'Args::Slot *' lvalue Var 0x5611b0dfb470 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5611b0dfb798 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5611b0dfb780 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5611b0dfb760 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5611b0dfb730 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5611b0b8a4b8
|       |       `-ImplicitCastExpr 0x5611b0dfb718 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5611b0dfb6f8 <col:20> 'String' lvalue Var 0x5611b0dfb500 'str' 'String'
|       `-CompoundStmt 0x5611b0dfc208 <col:61, line:736:9>
|         |-DeclStmt 0x5611b0dfbc50 <line:734:13, col:76>
|         | `-VarDecl 0x5611b0dfb7e8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5611b0dfbc20 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5611b0dfbb90 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5611b0dfbbd8 <col:60> 'T' lvalue ParmVar 0x5611b0dd9ae8 'variable' 'T &'
|         |     `-UnaryOperator 0x5611b0dfbc08 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5611b0dfbbf8 <col:71> 'Args *' this
|         `-CallExpr 0x5611b0dfc1d8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5611b0dfbc78 <col:13> '<bound member function type>' ->postparse 0x5611b0df3938
|           | `-CXXThisExpr 0x5611b0dfbc68 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5611b0dfc198 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5611b0dfbca8 <col:23> 'T *' lvalue Var 0x5611b0dfb7e8 's' 'T *'
|           | `-CallExpr 0x5611b0dfc158 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5611b0dfbf30 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5611b0dfc030 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5611b0dfc050 <col:86> 'String' lvalue Var 0x5611b0dfb500 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5611b0dfc100 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5611b0dfc090 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5611b0c5e668 0x5611b0c5e288 0x5611b0c5deb8 0x5611b0c5dad8 0x5611b0c5d6f8 0x5611b0c5d328
|           |   | `-DeclRefExpr 0x5611b0dfc070 <col:92> 'T *' lvalue Var 0x5611b0dfb7e8 's' 'T *'
|           |   `-UnaryOperator 0x5611b0dfc140 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5611b0dfc130 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5611b0dfc1b8 <col:103> 'Args::Slot *' lvalue Var 0x5611b0dfb470 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5611b0dda1f8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5611b0dd9d18 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5611b0dd9d98 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5611b0dda158 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5611b0dd9e58 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dd9ed8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5611b0dd9f78 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x5611b0dda018 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5611b0dff520 <col:88, line:745:5>
|     |-DeclStmt 0x5611b0dfc2f8 <line:741:9, col:26>
|     | `-VarDecl 0x5611b0dfc290 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5611b0dfc518 <line:742:9, col:55>
|     | `-VarDecl 0x5611b0dfc320 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5611b0dfc500 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5611b0dfc4d0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5611b0dfc4b8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5611b0dfc498 <col:22, col:54> 'String' (CXXTemporary 0x5611b0dfc498)
|     |           `-CXXMemberCallExpr 0x5611b0dfc428 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5611b0dfc398 <col:22> '<bound member function type>' ->find 0x5611b0df3728
|     |             | `-CXXThisExpr 0x5611b0dfc388 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5611b0dfc460 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5611b0dfc3c8 <col:27> 'const char *' lvalue ParmVar 0x5611b0dd9e58 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5611b0dfc478 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5611b0dfc3e8 <col:36> 'int' lvalue ParmVar 0x5611b0dd9ed8 'flags' 'int'
|     |             `-DeclRefExpr 0x5611b0dfc408 <col:43> 'Args::Slot *' lvalue Var 0x5611b0dfc290 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5611b0dfc8f0 <line:743:9, col:72>
|     | `-VarDecl 0x5611b0dfc568 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5611b0dfc8c0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5611b0dfc830 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5611b0dfc878 <col:56> 'T' lvalue ParmVar 0x5611b0dd9f78 'variable' 'T &'
|     |     `-UnaryOperator 0x5611b0dfc8a8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5611b0dfc898 <col:67> 'Args *' this
|     `-CallExpr 0x5611b0dff4f0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5611b0dfc918 <col:9> '<bound member function type>' ->postparse 0x5611b0df3938
|       | `-CXXThisExpr 0x5611b0dfc908 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5611b0dff4b0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5611b0dfc948 <col:19> 'T *' lvalue Var 0x5611b0dfc568 's' 'T *'
|       | `-ParenExpr 0x5611b0dff490 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5611b0dff460 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5611b0dff448 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5611b0dff430 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5611b0dff410 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5611b0dff3e0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5611b0b8a4b8
|       |     |       `-ImplicitCastExpr 0x5611b0dff3c8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5611b0dfc968 <col:25> 'String' lvalue Var 0x5611b0dfc320 'str' 'String'
|       |     |-CallExpr 0x5611b0dff238 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5611b0dfcbf0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5611b0dff110 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5611b0dff130 <col:89> 'String' lvalue Var 0x5611b0dfc320 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5611b0dff1e0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5611b0dff170 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5611b0c5e668 0x5611b0c5e288 0x5611b0c5deb8 0x5611b0c5dad8 0x5611b0c5d6f8 0x5611b0c5d328
|       |     | | `-DeclRefExpr 0x5611b0dff150 <col:95> 'T *' lvalue Var 0x5611b0dfc568 's' 'T *'
|       |     | `-UnaryOperator 0x5611b0dff220 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5611b0dff210 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5611b0dff3a8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5611b0dff388 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5611b0dff358 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5611b0dff308 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5611b0dff298 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5611b0c5e668 0x5611b0c5e288 0x5611b0c5deb8 0x5611b0c5dad8 0x5611b0c5d6f8 0x5611b0c5d328
|       |         | | `-DeclRefExpr 0x5611b0dff278 <col:109> 'T *' lvalue Var 0x5611b0dfc568 's' 'T *'
|       |         | `-DeclRefExpr 0x5611b0dff338 <col:113> 'const V' lvalue ParmVar 0x5611b0dda018 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5611b0dff378 <col:120> 'bool' true
|       `-DeclRefExpr 0x5611b0dff4d0 <col:128> 'Args::Slot *' lvalue Var 0x5611b0dfc290 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5611b0dda728 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x5611b0dda270 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0dda2e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5611b0dda688 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5611b0dda3a8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dda428 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5611b0dda4a0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5611b0dda548 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5611b0e00118 <col:75, line:754:5>
|     |-DeclStmt 0x5611b0dff5c8 <line:749:9, col:26>
|     | `-VarDecl 0x5611b0dff560 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5611b0e000e0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5611b0e00100 <line:750:13, col:58>
|       | `-VarDecl 0x5611b0dff5f0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5611b0dff7d0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5611b0dff7a0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5611b0dff788 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5611b0dff768 <col:26, col:58> 'String' (CXXTemporary 0x5611b0dff768)
|       |           `-CXXMemberCallExpr 0x5611b0dff6f8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5611b0dff668 <col:26> '<bound member function type>' ->find 0x5611b0df3728
|       |             | `-CXXThisExpr 0x5611b0dff658 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5611b0dff730 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5611b0dff698 <col:31> 'const char *' lvalue ParmVar 0x5611b0dda3a8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5611b0dff748 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5611b0dff6b8 <col:40> 'int' lvalue ParmVar 0x5611b0dda428 'flags' 'int'
|       |             `-DeclRefExpr 0x5611b0dff6d8 <col:47> 'Args::Slot *' lvalue Var 0x5611b0dff560 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5611b0dff888 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5611b0dff870 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5611b0dff850 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5611b0dff820 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5611b0b8a4b8
|       |       `-ImplicitCastExpr 0x5611b0dff808 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5611b0dff7e8 <col:20> 'String' lvalue Var 0x5611b0dff5f0 'str' 'String'
|       `-CompoundStmt 0x5611b0e000c0 <col:61, line:753:9>
|         |-DeclStmt 0x5611b0dffc60 <line:751:13, col:63>
|         | `-VarDecl 0x5611b0dff8d8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5611b0dffc30 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5611b0dffba0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5611b0dffbe8 <col:47> 'T' lvalue ParmVar 0x5611b0dda548 'variable' 'T &'
|         |     `-UnaryOperator 0x5611b0dffc18 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5611b0dffc08 <col:58> 'Args *' this
|         `-CallExpr 0x5611b0e00090 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5611b0dffc88 <col:13> '<bound member function type>' ->postparse 0x5611b0df3938
|           | `-CXXThisExpr 0x5611b0dffc78 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5611b0e00050 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5611b0dffcb8 <col:23> 'T *' lvalue Var 0x5611b0dff8d8 's' 'T *'
|           | `-CallExpr 0x5611b0e00010 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5611b0dffea0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5611b0dffee8 <col:56> 'P' lvalue ParmVar 0x5611b0dda4a0 'parser' 'P'
|           |   |-DeclRefExpr 0x5611b0dfff08 <col:64> 'String' lvalue Var 0x5611b0dff5f0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5611b0dfffb8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5611b0dfff48 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5611b0c5e668 0x5611b0c5e288 0x5611b0c5deb8 0x5611b0c5dad8 0x5611b0c5d6f8 0x5611b0c5d328
|           |   | `-DeclRefExpr 0x5611b0dfff28 <col:70> 'T *' lvalue Var 0x5611b0dff8d8 's' 'T *'
|           |   `-UnaryOperator 0x5611b0dffff8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5611b0dfffe8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5611b0e00070 <col:81> 'Args::Slot *' lvalue Var 0x5611b0dff560 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5611b0ddad88 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5611b0dda7a0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5611b0dda818 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x5611b0dda898 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5611b0ddace8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5611b0dda960 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0dda9e0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5611b0ddaa58 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x5611b0ddaaf8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5611b0ddab98 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5611b0e00ea8 <col:98, line:762:5>
|     |-DeclStmt 0x5611b0e001b0 <line:758:9, col:26>
|     | `-VarDecl 0x5611b0e00148 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5611b0e003d0 <line:759:9, col:55>
|     | `-VarDecl 0x5611b0e001d8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5611b0e003b8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5611b0e00388 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5611b0e00370 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5611b0e00350 <col:22, col:54> 'String' (CXXTemporary 0x5611b0e00350)
|     |           `-CXXMemberCallExpr 0x5611b0e002e0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5611b0e00250 <col:22> '<bound member function type>' ->find 0x5611b0df3728
|     |             | `-CXXThisExpr 0x5611b0e00240 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5611b0e00318 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5611b0e00280 <col:27> 'const char *' lvalue ParmVar 0x5611b0dda960 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5611b0e00330 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5611b0e002a0 <col:36> 'int' lvalue ParmVar 0x5611b0dda9e0 'flags' 'int'
|     |             `-DeclRefExpr 0x5611b0e002c0 <col:43> 'Args::Slot *' lvalue Var 0x5611b0e00148 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5611b0e007f0 <line:760:9, col:59>
|     | `-VarDecl 0x5611b0e00428 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5611b0e007c0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5611b0e00730 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5611b0e00778 <col:43> 'T' lvalue ParmVar 0x5611b0ddaaf8 'variable' 'T &'
|     |     `-UnaryOperator 0x5611b0e007a8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5611b0e00798 <col:54> 'Args *' this
|     `-CallExpr 0x5611b0e00e78 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5611b0e00818 <col:9> '<bound member function type>' ->postparse 0x5611b0df3938
|       | `-CXXThisExpr 0x5611b0e00808 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5611b0e00e38 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5611b0e00848 <col:19> 'T *' lvalue Var 0x5611b0e00428 's' 'T *'
|       | `-ParenExpr 0x5611b0e00e18 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5611b0e00de8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5611b0e00dd0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5611b0e00db8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5611b0e00d98 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5611b0e00d68 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5611b0b8a4b8
|       |     |       `-ImplicitCastExpr 0x5611b0e00d50 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5611b0e00868 <col:25> 'String' lvalue Var 0x5611b0e001d8 'str' 'String'
|       |     |-CallExpr 0x5611b0e00bc0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5611b0e00a50 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5611b0e00a98 <col:59> 'P' lvalue ParmVar 0x5611b0ddaa58 'parser' 'P'
|       |     | |-DeclRefExpr 0x5611b0e00ab8 <col:67> 'String' lvalue Var 0x5611b0e001d8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5611b0e00b68 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5611b0e00af8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5611b0c5e668 0x5611b0c5e288 0x5611b0c5deb8 0x5611b0c5dad8 0x5611b0c5d6f8 0x5611b0c5d328
|       |     | | `-DeclRefExpr 0x5611b0e00ad8 <col:73> 'T *' lvalue Var 0x5611b0e00428 's' 'T *'
|       |     | `-UnaryOperator 0x5611b0e00ba8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5611b0e00b98 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5611b0e00d30 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5611b0e00d10 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5611b0e00ce0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5611b0e00c90 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5611b0e00c20 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5611b0c5e668 0x5611b0c5e288 0x5611b0c5deb8 0x5611b0c5dad8 0x5611b0c5d6f8 0x5611b0c5d328
|       |         | | `-DeclRefExpr 0x5611b0e00c00 <col:87> 'T *' lvalue Var 0x5611b0e00428 's' 'T *'
|       |         | `-DeclRefExpr 0x5611b0e00cc0 <col:91> 'const V' lvalue ParmVar 0x5611b0ddab98 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5611b0e00d00 <col:98> 'bool' true
|       `-DeclRefExpr 0x5611b0e00e58 <col:106> 'Args::Slot *' lvalue Var 0x5611b0e00148 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5611b0ddb3f8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x5611b0ddae08 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0ddae88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5611b0ddaf08 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5611b0ddb358 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5611b0ddafd0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0ddb050 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5611b0ddb0c8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x5611b0ddb168 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5611b0ddb208 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5611b0e01e88 <col:60, line:773:5>
|     |-DeclStmt 0x5611b0e00f50 <line:767:9, col:26>
|     | `-VarDecl 0x5611b0e00ee8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5611b0e01e50 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5611b0e01e70 <line:768:13, col:58>
|       | `-VarDecl 0x5611b0e00f78 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5611b0e01158 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5611b0e01128 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5611b0e01110 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5611b0e010f0 <col:26, col:58> 'String' (CXXTemporary 0x5611b0e010f0)
|       |           `-CXXMemberCallExpr 0x5611b0e01080 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5611b0e00ff0 <col:26> '<bound member function type>' ->find 0x5611b0df3728
|       |             | `-CXXThisExpr 0x5611b0e00fe0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5611b0e010b8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5611b0e01020 <col:31> 'const char *' lvalue ParmVar 0x5611b0ddafd0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5611b0e010d0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5611b0e01040 <col:40> 'int' lvalue ParmVar 0x5611b0ddb050 'flags' 'int'
|       |             `-DeclRefExpr 0x5611b0e01060 <col:47> 'Args::Slot *' lvalue Var 0x5611b0e00ee8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5611b0e01210 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5611b0e011f8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5611b0e011d8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5611b0e011a8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5611b0b8a4b8
|       |       `-ImplicitCastExpr 0x5611b0e01190 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5611b0e01170 <col:20> 'String' lvalue Var 0x5611b0e00f78 'str' 'String'
|       `-CompoundStmt 0x5611b0e01e28 <col:61, line:772:9>
|         |-DeclStmt 0x5611b0e01550 <line:769:13, col:66>
|         | `-VarDecl 0x5611b0e01268 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5611b0e01520 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5611b0e01490 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5611b0e014d8 <col:49> 'T1' lvalue ParmVar 0x5611b0ddb168 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5611b0e01508 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5611b0e014f8 <col:61> 'Args *' this
|         |-DeclStmt 0x5611b0e018c0 <line:770:13, col:66>
|         | `-VarDecl 0x5611b0e015d8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5611b0e01890 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5611b0e01800 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5611b0e01848 <col:49> 'T2' lvalue ParmVar 0x5611b0ddb208 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5611b0e01878 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5611b0e01868 <col:61> 'Args *' this
|         `-CallExpr 0x5611b0e01df8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5611b0e018e8 <col:13> '<bound member function type>' ->postparse 0x5611b0df3938
|           | `-CXXThisExpr 0x5611b0e018d8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5611b0e01db8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5611b0e01958 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5611b0e01918 <col:23> 'T1 *' lvalue Var 0x5611b0e01268 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5611b0e01938 <col:29> 'T2 *' lvalue Var 0x5611b0e015d8 's2' 'T2 *'
|           | `-CallExpr 0x5611b0e01d70 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5611b0e01b40 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5611b0e01b88 <col:63> 'P' lvalue ParmVar 0x5611b0ddb0c8 'parser' 'P'
|           |   |-DeclRefExpr 0x5611b0e01ba8 <col:71> 'String' lvalue Var 0x5611b0e00f78 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5611b0e01c58 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5611b0e01be8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5611b0c5e668 0x5611b0c5e288 0x5611b0c5deb8 0x5611b0c5dad8 0x5611b0c5d6f8 0x5611b0c5d328
|           |   | `-DeclRefExpr 0x5611b0e01bc8 <col:77> 'T1 *' lvalue Var 0x5611b0e01268 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5611b0e01d18 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5611b0e01ca8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5611b0c5e668 0x5611b0c5e288 0x5611b0c5deb8 0x5611b0c5dad8 0x5611b0c5d6f8 0x5611b0c5d328
|           |   | `-DeclRefExpr 0x5611b0e01c88 <col:82> 'T2 *' lvalue Var 0x5611b0e015d8 's2' 'T2 *'
|           |   `-UnaryOperator 0x5611b0e01d58 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5611b0e01d48 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5611b0e01dd8 <col:94> 'Args::Slot *' lvalue Var 0x5611b0e00ee8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5611b0ddb7e8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x5611b0ddb478 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5611b0ddb748 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5611b0ddb530 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0ddb5b0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5611b0ddb628 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5611b0e023a0 <col:67, line:780:5>
|     |-DeclStmt 0x5611b0e01f20 <line:777:9, col:26>
|     | `-VarDecl 0x5611b0e01eb8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5611b0e02368 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5611b0e02388 <line:778:13, col:58>
|       | `-VarDecl 0x5611b0e01f48 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5611b0e02128 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5611b0e020f8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5611b0e020e0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5611b0e020c0 <col:26, col:58> 'String' (CXXTemporary 0x5611b0e020c0)
|       |           `-CXXMemberCallExpr 0x5611b0e02050 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5611b0e01fc0 <col:26> '<bound member function type>' ->find 0x5611b0df3728
|       |             | `-CXXThisExpr 0x5611b0e01fb0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5611b0e02088 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5611b0e01ff0 <col:31> 'const char *' lvalue ParmVar 0x5611b0ddb530 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5611b0e020a0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5611b0e02010 <col:40> 'int' lvalue ParmVar 0x5611b0ddb5b0 'flags' 'int'
|       |             `-DeclRefExpr 0x5611b0e02030 <col:47> 'Args::Slot *' lvalue Var 0x5611b0e01eb8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5611b0e021e0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5611b0e021c8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5611b0e021a8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5611b0e02178 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5611b0b8a4b8
|       |       `-ImplicitCastExpr 0x5611b0e02160 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5611b0e02140 <col:20> 'String' lvalue Var 0x5611b0e01f48 'str' 'String'
|       `-CallExpr 0x5611b0e02338 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5611b0e02208 <col:13> '<bound member function type>' ->postparse 0x5611b0df3938
|         | `-CXXThisExpr 0x5611b0e021f8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5611b0e022e8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5611b0e02258 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5611b0e02238 <col:23> 'P' lvalue ParmVar 0x5611b0ddb628 'parser' 'P'
|         | |-DeclRefExpr 0x5611b0e022a0 <col:36> 'String' lvalue Var 0x5611b0e01f48 'str' 'String'
|         | `-UnaryOperator 0x5611b0e022d0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5611b0e022c0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5611b0e02318 <col:49> 'Args::Slot *' lvalue Var 0x5611b0e01eb8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5611b0ddbb88 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5611b0ddb858 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5611b0ddbae8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5611b0ddb910 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0ddb990 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5611b0ddba08 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5611b0e02d10 <col:71, line:792:5>
|     |-DeclStmt 0x5611b0e02438 <line:784:9, col:26>
|     | `-VarDecl 0x5611b0e023d0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5611b0e02508 <line:785:9, col:29>
|     | `-VarDecl 0x5611b0e02468 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5611b0e024f0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5611b0e024d0 <col:28> 'int' 1
|     |-WhileStmt 0x5611b0e02bc0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5611b0e02be0 <line:786:16, col:61>
|     | | `-VarDecl 0x5611b0e02530 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5611b0e02710 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5611b0e026e0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5611b0e026c8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5611b0e026a8 <col:29, col:61> 'String' (CXXTemporary 0x5611b0e026a8)
|     | |           `-CXXMemberCallExpr 0x5611b0e02638 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5611b0e025a8 <col:29> '<bound member function type>' ->find 0x5611b0df3728
|     | |             | `-CXXThisExpr 0x5611b0e02598 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5611b0e02670 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5611b0e025d8 <col:34> 'const char *' lvalue ParmVar 0x5611b0ddb910 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5611b0e02688 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5611b0e025f8 <col:43> 'int' lvalue ParmVar 0x5611b0ddb990 'flags' 'int'
|     | |             `-DeclRefExpr 0x5611b0e02618 <col:50> 'Args::Slot *' lvalue Var 0x5611b0e023d0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5611b0e027c8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5611b0e027b0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5611b0e02790 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5611b0e02760 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5611b0b8a4b8
|     | |       `-ImplicitCastExpr 0x5611b0e02748 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5611b0e02728 <col:23> 'String' lvalue Var 0x5611b0e02530 'str' 'String'
|     | `-CompoundStmt 0x5611b0e02b98 <col:64, line:790:9>
|     |   |-CallExpr 0x5611b0e02920 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5611b0e027f0 <col:13> '<bound member function type>' ->postparse 0x5611b0df3938
|     |   | | `-CXXThisExpr 0x5611b0e027e0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5611b0e028d0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5611b0e02840 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5611b0e02820 <col:23> 'P' lvalue ParmVar 0x5611b0ddba08 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5611b0e02888 <col:36> 'String' lvalue Var 0x5611b0e02530 'str' 'String'
|     |   | | `-UnaryOperator 0x5611b0e028b8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5611b0e028a8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5611b0e02900 <col:49> 'Args::Slot *' lvalue Var 0x5611b0e023d0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5611b0e02ab8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5611b0e02950 <col:13> 'int' lvalue Var 0x5611b0e02468 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5611b0e02aa0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5611b0e02a80 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5611b0e029e8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5611b0e029c8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5611b0e029b0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5611b0e02970 <col:28> 'int' lvalue Var 0x5611b0e02468 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5611b0e02990 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5611b0e02a68 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5611b0e02a38 <col:49> 'bool' lvalue ->_read_status 0x5611b0dc5c08
|     |   |         `-ImplicitCastExpr 0x5611b0e02a18 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5611b0e02a08 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5611b0e02b68 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5611b0e02ad8 <col:13> 'int' lvalue ParmVar 0x5611b0ddb990 'flags' 'int'
|     |     `-UnaryOperator 0x5611b0e02b50 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5611b0e02b38 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5611b0e02b18 <col:23> 'const int' lvalue Var 0x5611b0dcd098 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5611b0e02cf0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5611b0e02c28 <col:9> 'bool' lvalue ->_read_status 0x5611b0dc5c08
|       | `-ImplicitCastExpr 0x5611b0e02c08 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5611b0e02bf8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5611b0e02cd0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5611b0e02cb0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5611b0e02c98 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5611b0e02c58 <col:25> 'int' lvalue Var 0x5611b0e02468 'read_status' 'int'
|           `-IntegerLiteral 0x5611b0e02c78 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5611b0ddc068 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5611b0ddbbf8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0ddbc78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5611b0ddbfc8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5611b0ddbd38 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0ddbdb8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5611b0ddbe30 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x5611b0ddbed8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5611b0e05920 <col:84, line:805:5>
|     |-DeclStmt 0x5611b0e02db8 <line:796:9, col:26>
|     | `-VarDecl 0x5611b0e02d50 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5611b0e02e88 <line:797:9, col:29>
|     | `-VarDecl 0x5611b0e02de8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5611b0e02e70 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5611b0e02e50 <col:28> 'int' 1
|     |-DeclStmt 0x5611b0e04e40 <line:798:9, col:71>
|     | `-VarDecl 0x5611b0e02ed8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5611b0e04e10 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5611b0e04d80 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5611b0e04dc8 <col:55> 'T' lvalue ParmVar 0x5611b0ddbed8 'variable' 'T &'
|     |     `-UnaryOperator 0x5611b0e04df8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5611b0e04de8 <col:66> 'Args *' this
|     |-WhileStmt 0x5611b0e057d0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5611b0e057f0 <line:799:16, col:61>
|     | | `-VarDecl 0x5611b0e04e68 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5611b0e05048 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5611b0e05018 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5611b0e05000 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5611b0e04fe0 <col:29, col:61> 'String' (CXXTemporary 0x5611b0e04fe0)
|     | |           `-CXXMemberCallExpr 0x5611b0e04f70 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5611b0e04ee0 <col:29> '<bound member function type>' ->find 0x5611b0df3728
|     | |             | `-CXXThisExpr 0x5611b0e04ed0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5611b0e04fa8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5611b0e04f10 <col:34> 'const char *' lvalue ParmVar 0x5611b0ddbd38 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5611b0e04fc0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5611b0e04f30 <col:43> 'int' lvalue ParmVar 0x5611b0ddbdb8 'flags' 'int'
|     | |             `-DeclRefExpr 0x5611b0e04f50 <col:50> 'Args::Slot *' lvalue Var 0x5611b0e02d50 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5611b0e05100 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5611b0e050e8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5611b0e050c8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5611b0e05098 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5611b0b8a4b8
|     | |       `-ImplicitCastExpr 0x5611b0e05080 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5611b0e05060 <col:23> 'String' lvalue Var 0x5611b0e04e68 'str' 'String'
|     | `-CompoundStmt 0x5611b0e057a8 <col:64, line:803:9>
|     |   |-CallExpr 0x5611b0e05530 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5611b0e05128 <col:13> '<bound member function type>' ->postparse 0x5611b0df3938
|     |   | | `-CXXThisExpr 0x5611b0e05118 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5611b0e054f0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5611b0e05158 <col:23> 'T *' lvalue Var 0x5611b0e02ed8 's' 'T *'
|     |   | | `-CallExpr 0x5611b0e054b0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5611b0e05340 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5611b0e05388 <col:56> 'P' lvalue ParmVar 0x5611b0ddbe30 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5611b0e053a8 <col:64> 'String' lvalue Var 0x5611b0e04e68 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5611b0e05458 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5611b0e053e8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5611b0c5e668 0x5611b0c5e288 0x5611b0c5deb8 0x5611b0c5dad8 0x5611b0c5d6f8 0x5611b0c5d328
|     |   | |   | `-DeclRefExpr 0x5611b0e053c8 <col:70> 'T *' lvalue Var 0x5611b0e02ed8 's' 'T *'
|     |   | |   `-UnaryOperator 0x5611b0e05498 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5611b0e05488 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5611b0e05510 <col:81> 'Args::Slot *' lvalue Var 0x5611b0e02d50 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5611b0e056c8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5611b0e05560 <col:13> 'int' lvalue Var 0x5611b0e02de8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5611b0e056b0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5611b0e05690 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5611b0e055f8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5611b0e055d8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5611b0e055c0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5611b0e05580 <col:28> 'int' lvalue Var 0x5611b0e02de8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5611b0e055a0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5611b0e05678 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5611b0e05648 <col:49> 'bool' lvalue ->_read_status 0x5611b0dc5c08
|     |   |         `-ImplicitCastExpr 0x5611b0e05628 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5611b0e05618 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5611b0e05778 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5611b0e056e8 <col:13> 'int' lvalue ParmVar 0x5611b0ddbdb8 'flags' 'int'
|     |     `-UnaryOperator 0x5611b0e05760 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5611b0e05748 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5611b0e05728 <col:23> 'const int' lvalue Var 0x5611b0dcd098 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5611b0e05900 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5611b0e05838 <col:9> 'bool' lvalue ->_read_status 0x5611b0dc5c08
|       | `-ImplicitCastExpr 0x5611b0e05818 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5611b0e05808 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5611b0e058e0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5611b0e058c0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5611b0e058a8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5611b0e05868 <col:25> 'int' lvalue Var 0x5611b0e02de8 'read_status' 'int'
|           `-IntegerLiteral 0x5611b0e05888 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5611b0ddc648 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5611b0ddc0e0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5611b0ddc158 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5611b0ddc5a8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5611b0ddc218 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5611b0ddc298 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5611b0ddc310 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5611b0ddc460 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5611b0e06728 <col:87, line:821:5>
|     |-DeclStmt 0x5611b0e059d0 <line:809:9, col:26>
|     | `-VarDecl 0x5611b0e05968 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5611b0e05aa0 <line:810:9, col:29>
|     | `-VarDecl 0x5611b0e05a00 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5611b0e05a88 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5611b0e05a68 <col:28> 'int' 1
|     |-DeclStmt 0x5611b0e05ce8 <line:811:9, col:38>
|     | `-VarDecl 0x5611b0e05bd0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5611b0e05cc0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5611b0e05c48 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5611b0e05ca0 <col:29> 'Vector<T>' lvalue ParmVar 0x5611b0ddc460 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5611b0e065d8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5611b0e065f8 <line:812:16, col:61>
|     | | `-VarDecl 0x5611b0e05d10 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5611b0e05ef0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5611b0e05ec0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5611b0e05ea8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5611b0e05e88 <col:29, col:61> 'String' (CXXTemporary 0x5611b0e05e88)
|     | |           `-CXXMemberCallExpr 0x5611b0e05e18 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5611b0e05d88 <col:29> '<bound member function type>' ->find 0x5611b0df3728
|     | |             | `-CXXThisExpr 0x5611b0e05d78 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5611b0e05e50 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5611b0e05db8 <col:34> 'const char *' lvalue ParmVar 0x5611b0ddc218 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5611b0e05e68 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5611b0e05dd8 <col:43> 'int' lvalue ParmVar 0x5611b0ddc298 'flags' 'int'
|     | |             `-DeclRefExpr 0x5611b0e05df8 <col:50> 'Args::Slot *' lvalue Var 0x5611b0e05968 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5611b0e05fa8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5611b0e05f90 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5611b0e05f70 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5611b0e05f40 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5611b0b8a4b8
|     | |       `-ImplicitCastExpr 0x5611b0e05f28 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5611b0e05f08 <col:23> 'String' lvalue Var 0x5611b0e05d10 'str' 'String'
|     | `-CompoundStmt 0x5611b0e065a0 <col:64, line:819:9>
|     |   |-DeclStmt 0x5611b0e06068 <line:813:13, col:23>
|     |   | `-VarDecl 0x5611b0e05fd0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5611b0e06048 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5611b0e061e8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5611b0e06090 <col:13> '<bound member function type>' ->postparse 0x5611b0df3938
|     |   | | `-CXXThisExpr 0x5611b0e06080 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5611b0e06190 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5611b0e060e0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5611b0e060c0 <col:23> 'P' lvalue ParmVar 0x5611b0ddc310 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5611b0e06128 <col:36> 'String' lvalue Var 0x5611b0e05d10 'str' 'String'
|     |   | | |-DeclRefExpr 0x5611b0e06148 <col:41> 'T' lvalue Var 0x5611b0e05fd0 'sx' 'T'
|     |   | | `-UnaryOperator 0x5611b0e06178 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5611b0e06168 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5611b0e061c8 <col:53> 'Args::Slot *' lvalue Var 0x5611b0e05968 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5611b0e06340 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5611b0e06278 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5611b0e06248 <col:17> 'bool' lvalue ->_read_status 0x5611b0dc5c08
|     |   | |   `-ImplicitCastExpr 0x5611b0e06228 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5611b0e06218 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5611b0e06318 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5611b0e062b0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5611b0e06290 <col:17> 'Vector<T> *' lvalue Var 0x5611b0e05bd0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5611b0e062f8 <col:30> 'T' lvalue Var 0x5611b0e05fd0 'sx' 'T'
|     |   |-BinaryOperator 0x5611b0e064c0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5611b0e06358 <col:13> 'int' lvalue Var 0x5611b0e05a00 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5611b0e064a8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5611b0e06488 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5611b0e063f0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5611b0e063d0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5611b0e063b8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5611b0e06378 <col:28> 'int' lvalue Var 0x5611b0e05a00 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5611b0e06398 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5611b0e06470 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5611b0e06440 <col:49> 'bool' lvalue ->_read_status 0x5611b0dc5c08
|     |   |         `-ImplicitCastExpr 0x5611b0e06420 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5611b0e06410 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5611b0e06570 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5611b0e064e0 <col:13> 'int' lvalue ParmVar 0x5611b0ddc298 'flags' 'int'
|     |     `-UnaryOperator 0x5611b0e06558 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5611b0e06540 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5611b0e06520 <col:23> 'const int' lvalue Var 0x5611b0dcd098 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5611b0e06708 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5611b0e06640 <col:9> 'bool' lvalue ->_read_status 0x5611b0dc5c08
|       | `-ImplicitCastExpr 0x5611b0e06620 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5611b0e06610 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5611b0e066e8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5611b0e066c8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5611b0e066b0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5611b0e06670 <col:25> 'int' lvalue Var 0x5611b0e05a00 'read_status' 'int'
|           `-IntegerLiteral 0x5611b0e06690 <col:40> 'int' 1
|-AccessSpecDecl 0x5611b0ddc6c0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5611b0ddc6e8 prev 0x5611b0dcb398 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5611b0ddc7e0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x5611b0ddc8d0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5611b0e06760 <col:16, line:828:9>
| |-CXXDestructorDecl 0x5611b0ddc9c0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5611b0e06770 <col:25, line:830:9>
| |-CXXMethodDecl 0x5611b0ddcac0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5611b0ddcb70 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5611b0ddcc18 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5611b0ddcc18
| | `-ParmVarDecl 0x5611b0ddcd28 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5611b0ddd4e8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5611b0ddd4e8
|   `-ParmVarDecl 0x5611b0ddd5f8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5611b0ddcd98 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5611b0ddcef8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5611b0ddd0f0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x5611b0ddcfa0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5611b0ddd018 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5611b0e06980 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x5611b0ddd3a8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5611b0e067c0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5611b0e06780 <col:20> 'void *' lvalue ParmVar 0x5611b0ddcfa0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5611b0ddd410 '_slot' 'char *'
| | | `-CXXNewExpr 0x5611b0e06878 <col:32, col:45> 'char *' array Function 0x5611b09ae1a8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5611b0e06830 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5611b0e06800 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5611b0ddd018 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5611b0ddd470 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5611b0e06940 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5611b0e06900 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5611b0ddd018 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5611b0e06a00 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5611b0ddd1f0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x5611b0ddc9c0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5611b0e06a88 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5611b0e06a68 <line:840:13, col:22> 'void' array Function 0x5611b09ae508 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5611b0e06a50 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5611b0e06a20 <col:22> 'char *' lvalue ->_slot 0x5611b0ddd410
| |         `-CXXThisExpr 0x5611b0e06a10 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5611b0ddd2f0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x5611b0ddcac0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5611b0e06c78 <col:22, line:844:9>
| |   `-CallExpr 0x5611b0e06be0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5611b0e06bc8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5611b0e06ba8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5611b0ae6478 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5611b0e06c18 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5611b0e06af8 <col:20> 'void *' lvalue ->_ptr 0x5611b0ddd3a8
| |     |   `-CXXThisExpr 0x5611b0e06ae8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5611b0e06c48 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5611b0e06c30 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5611b0e06b38 <col:26> 'char *' lvalue ->_slot 0x5611b0ddd410
| |     |     `-CXXThisExpr 0x5611b0e06b28 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5611b0e06c60 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5611b0e06b78 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5611b0ddd470
| |         `-CXXThisExpr 0x5611b0e06b68 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x5611b0ddd3a8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5611b0ddd410 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5611b0ddd470 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x5611b0ddd668 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5611b0ddd668
| | `-ParmVarDecl 0x5611b0ddd778 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5611b0ddd818 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5611b0ddd818
|   `-ParmVarDecl 0x5611b0ddd928 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x5611b0de3aa0 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x5611b0ddd998 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5611b0de3a10 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5611b0de3d30 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5611b0de3f28 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5611b0de3df8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5611b0de40a8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5611b0e06cb0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5611b0e06c90 <col:20> 'T *' lvalue ParmVar 0x5611b0de3df8 'ptr' 'T *'
|   | `-CompoundStmt 0x5611b0e06d00 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5611b0de3ff8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x5611b0ddcac0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5611b0e06eb0 <col:22, line:857:9>
|   |   `-CallExpr 0x5611b0e06e80 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5611b0e06d10 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5611b0b726a8 0x5611b0a9bbd8
|   |     |-CXXOperatorCallExpr 0x5611b0e06e10 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5611b0e06da0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5611b0c5e668 0x5611b0c5e288 0x5611b0c5deb8 0x5611b0c5dad8 0x5611b0c5d6f8 0x5611b0c5d328
|   |     | `-MemberExpr 0x5611b0e06d70 <col:29> 'T *' lvalue ->_ptr 0x5611b0de40a8
|   |     |   `-CXXThisExpr 0x5611b0e06d60 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5611b0e06e50 <col:35> 'T' lvalue ->_slot 0x5611b0de4108
|   |       `-CXXThisExpr 0x5611b0e06e40 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5611b0de40a8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5611b0de4108 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5611b0de4170 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5611b0de4270 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5611b0de42c0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0de4250 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5611b0de4230 <col:31> 'int' 48
|-FieldDecl 0x5611b0de42e8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5611b0de4348 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5611b0de43a8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5611b0de44e0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5611b0df2960 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5611b0df29c0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5611b0df2ae8 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5611b0df2d18 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5611b0df2c20 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5611b0df2e68 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5611b0df2dd8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5611b0df3728 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5611b0df2f28 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5611b0df2fa8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5611b0df3640 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5611b0df3938 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5611b0df37f0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5611b0df3868 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5611b0df3a08 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5611b0df3b58 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5611b0df3ac0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5611b0df3ee8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5611b0df3c18 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5611b0df3c98 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5611b0df3d40 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5611b0df3df8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5611b0df4110 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5611b0df3fc0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5611b0df4038 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5611b0df4428 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5611b0df41c0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5611b0df4388 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5611b0df4298 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.0*, %class.Vector.5, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.0*, %class.Vector.5, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPPortArg
         0 |   int ip_p
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0e375f0 <../dummy_inc/click/ipaddress.hh:408:1, line:416:1> line:408:7 referenced class IPPortArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5611b0e37708 <col:1, col:7> col:7 implicit referenced class IPPortArg
|-AccessSpecDecl 0x5611b0e37798 <col:19, col:25> col:19 public
|-CXXConstructorDecl 0x5611b0e378a8 <line:409:5, line:412:5> line:409:5 used IPPortArg 'void (int)'
| |-ParmVarDecl 0x5611b0e377d8 <col:15, col:19> col:19 used p 'int'
| |-CXXCtorInitializer Field 0x5611b0e37cd8 'ip_p' 'int'
| | `-ImplicitCastExpr 0x5611b0e37da0 <line:410:9> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5611b0e37d60 <col:9> 'int' lvalue ParmVar 0x5611b0e377d8 'p' 'int'
| `-CompoundStmt 0x5611b0e38368 <col:12, line:412:5>
|   `-ParenExpr 0x5611b0e38348 <line:411:2, col:175> 'void'
|     `-ConditionalOperator 0x5611b0e38318 <col:3, col:174> 'void'
|       |-CXXStaticCastExpr 0x5611b0e37f48 <col:3, col:45> 'bool' static_cast<_Bool> <NoOp>
|       | `-BinaryOperator 0x5611b0e37f18 <col:23, col:42> 'bool' '&&'
|       |   |-BinaryOperator 0x5611b0e37e60 <col:23, col:30> 'bool' '>'
|       |   | |-ImplicitCastExpr 0x5611b0e37e48 <col:23> 'int' <LValueToRValue>
|       |   | | `-MemberExpr 0x5611b0e37df8 <col:23> 'int' lvalue ->ip_p 0x5611b0e37cd8
|       |   | |   `-CXXThisExpr 0x5611b0e37de8 <col:23> 'IPPortArg *' implicit this
|       |   | `-IntegerLiteral 0x5611b0e37e28 <col:30> 'int' 0
|       |   `-BinaryOperator 0x5611b0e37ef8 <col:35, col:42> 'bool' '<'
|       |     |-ImplicitCastExpr 0x5611b0e37ee0 <col:35> 'int' <LValueToRValue>
|       |     | `-MemberExpr 0x5611b0e37e90 <col:35> 'int' lvalue ->ip_p 0x5611b0e37cd8
|       |     |   `-CXXThisExpr 0x5611b0e37e80 <col:35> 'IPPortArg *' implicit this
|       |     `-IntegerLiteral 0x5611b0e37ec0 <col:42> 'int' 256
|       |-CXXFunctionalCastExpr 0x5611b0e37fa8 <col:49, col:56> 'void' functional cast to void <ToVoid>
|       | `-IntegerLiteral 0x5611b0e37f88 <col:55> 'int' 0
|       `-CallExpr 0x5611b0e38278 <col:60, col:174> 'void'
|         |-ImplicitCastExpr 0x5611b0e38260 <col:60> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5611b0e38240 <col:60> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5611b08f6fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|         |-ImplicitCastExpr 0x5611b0e382b8 <col:75> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x5611b0e38098 <col:75> 'const char [23]' lvalue "ip_p > 0 && ip_p < 256"
|         |-ImplicitCastExpr 0x5611b0e382d0 <col:101> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x5611b0e38108 <col:101> 'const char [32]' lvalue "../dummy_inc/click/ipaddress.hh"
|         |-ImplicitCastExpr 0x5611b0e382e8 <col:136> 'unsigned int' <IntegralCast>
|         | `-IntegerLiteral 0x5611b0e38140 <col:136> 'int' 411
|         `-ImplicitCastExpr 0x5611b0e38300 <col:141, col:155> 'const char *' <ArrayToPointerDecay>
|           `-UnaryOperator 0x5611b0e38228 <col:141, col:155> 'const char [26]' lvalue prefix '__extension__' cannot overflow
|             `-PredefinedExpr 0x5611b0e38210 <col:155> 'const char [26]' lvalue __PRETTY_FUNCTION__
|               `-StringLiteral 0x5611b0e381d8 <col:155> 'const char [26]' lvalue "IPPortArg::IPPortArg(int)"
|-CXXMethodDecl 0x5611b0e37c08 <line:413:5, line:414:46> line:413:10 parse 'bool (const String &, uint16_t &, const ArgContext &) const'
| |-ParmVarDecl 0x5611b0e37968 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x5611b0e37a38 <col:35, col:45> col:45 result 'uint16_t &'
| `-ParmVarDecl 0x5611b0e37ab0 <line:414:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5611b0e37d40 <col:34> 'const ArgContext' lvalue Var 0x5611b0e2c108 'blank_args' 'const ArgContext'
|-FieldDecl 0x5611b0e37cd8 <line:415:5, col:9> col:9 referenced ip_p 'int'
|-CXXConstructorDecl 0x5611b10837f8 <line:408:7> col:7 implicit constexpr IPPortArg 'void (const IPPortArg &)' inline default trivial noexcept-unevaluated 0x5611b10837f8
| `-ParmVarDecl 0x5611b1083908 <col:7> col:7 'const IPPortArg &'
|-CXXConstructorDecl 0x5611b10839a8 <col:7> col:7 implicit used constexpr IPPortArg 'void (IPPortArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5611b1083ab8 <col:7> col:7 used 'IPPortArg &&'
| |-CXXCtorInitializer Field 0x5611b0e37cd8 'ip_p' 'int'
| | `-ImplicitCastExpr 0x5611b10842a0 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5611b1084270 <col:7> 'int' xvalue .ip_p 0x5611b0e37cd8
| |     `-CXXStaticCastExpr 0x5611b1084240 <col:7> 'IPPortArg' xvalue static_cast<class IPPortArg &&> <NoOp>
| |       `-DeclRefExpr 0x5611b1084210 <col:7> 'IPPortArg' lvalue ParmVar 0x5611b1083ab8 '' 'IPPortArg &&'
| `-CompoundStmt 0x5611b10842e8 <col:7>
`-CXXDestructorDecl 0x5611b1083b58 <col:7> col:7 implicit referenced ~IPPortArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPPortArg = type { i32 }
  NonVirtualBaseLLVMType:%class.IPPortArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct TaskLink
         0 |   struct TaskLink * _prev
         8 |   struct TaskLink * _next
        16 |   unsigned int _pass
           | [sizeof=24, dsize=20, align=8,
           |  nvsize=20, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0edb060 <../dummy_inc/click/task.hh:31:1, line:47:1> line:31:8 referenced struct TaskLink definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5611b0edb178 <col:1, col:8> col:8 implicit referenced struct TaskLink
|-FieldDecl 0x5611b0edb248 <line:33:5, col:15> col:15 referenced _prev 'TaskLink *'
|-FieldDecl 0x5611b0edb2a8 <line:34:5, col:15> col:15 referenced _next 'TaskLink *'
|-FieldDecl 0x5611b0edb310 <line:37:5, col:14> col:14 referenced _pass 'unsigned int'
|-CXXConstructorDecl 0x5611b0edb398 <line:39:5, line:46:5> line:39:5 used TaskLink 'void ()'
| `-CompoundStmt 0x5611b0edb600 <col:16, line:46:5>
|   |-BinaryOperator 0x5611b0edb548 <line:41:9, col:25> 'TaskLink *' lvalue '='
|   | |-MemberExpr 0x5611b0edb468 <col:9> 'TaskLink *' lvalue ->_prev 0x5611b0edb248
|   | | `-CXXThisExpr 0x5611b0edb458 <col:9> 'TaskLink *' implicit this
|   | `-ImplicitCastExpr 0x5611b0edb530 <col:17, col:25> 'TaskLink *' <LValueToRValue>
|   |   `-BinaryOperator 0x5611b0edb510 <col:17, col:25> 'TaskLink *' lvalue '='
|   |     |-MemberExpr 0x5611b0edb4a8 <col:17> 'TaskLink *' lvalue ->_next 0x5611b0edb2a8
|   |     | `-CXXThisExpr 0x5611b0edb498 <col:17> 'TaskLink *' implicit this
|   |     `-ImplicitCastExpr 0x5611b0edb4f8 <col:25> 'TaskLink *' <NullToPointer>
|   |       `-IntegerLiteral 0x5611b0edb4d8 <col:25> 'int' 0
|   `-BinaryOperator 0x5611b0edb5e0 <line:44:9, col:17> 'unsigned int' lvalue '='
|     |-MemberExpr 0x5611b0edb578 <col:9> 'unsigned int' lvalue ->_pass 0x5611b0edb310
|     | `-CXXThisExpr 0x5611b0edb568 <col:9> 'TaskLink *' implicit this
|     `-ImplicitCastExpr 0x5611b0edb5c8 <col:17> 'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5611b0edb5a8 <col:17> 'int' 0
|-CXXConstructorDecl 0x5611b0f44ed8 <line:31:8> col:8 implicit constexpr TaskLink 'void (const TaskLink &)' inline default trivial noexcept-unevaluated 0x5611b0f44ed8
| `-ParmVarDecl 0x5611b0f44fe8 <col:8> col:8 'const TaskLink &'
|-CXXConstructorDecl 0x5611b0f45088 <col:8> col:8 implicit constexpr TaskLink 'void (TaskLink &&)' inline default trivial noexcept-unevaluated 0x5611b0f45088
| `-ParmVarDecl 0x5611b0f45198 <col:8> col:8 'TaskLink &&'
|-CXXDestructorDecl 0x5611b0f45388 <col:8> col:8 implicit ~TaskLink 'void ()' inline default trivial noexcept-unevaluated 0x5611b0f45388
|-CXXMethodDecl 0x5611b0f45b88 <col:8> col:8 implicit operator= 'TaskLink &(const TaskLink &)' inline default trivial noexcept-unevaluated 0x5611b0f45b88
| `-ParmVarDecl 0x5611b0f45c98 <col:8> col:8 'const TaskLink &'
`-CXXMethodDecl 0x5611b0f45d08 <col:8> col:8 implicit operator= 'TaskLink &(TaskLink &&)' inline default trivial noexcept-unevaluated 0x5611b0f45d08
  `-ParmVarDecl 0x5611b0f45e18 <col:8> col:8 'TaskLink &&'

Layout: <CGRecordLayout
  LLVMType:%struct.TaskLink = type <{ %struct.TaskLink*, %struct.TaskLink*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%struct.TaskLink.base = type <{ %struct.TaskLink*, %struct.TaskLink*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9)
         0 |   int16_t home_thread_id
         2 |   uint8_t is_scheduled
         3 |   uint8_t is_strong_unscheduled
           | [sizeof=4, dsize=4, align=2,
           |  nvsize=4, nvalign=2]

*** Dumping AST Record Layout
         0 | union Task::Status
         0 |   struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
         0 |     int16_t home_thread_id
         2 |     uint8_t is_scheduled
         3 |     uint8_t is_strong_unscheduled
         0 |   uint32_t status
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Task::Pending
         0 |   class Task * t
         0 |   uintptr_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Task
         0 |   struct TaskLink (base)
         0 |     struct TaskLink * _prev
         8 |     struct TaskLink * _next
        16 |     unsigned int _pass
        20 |   unsigned int _stride
        24 |   int _tickets
        28 |   union Task::Status _status
        28 |     struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
        28 |       int16_t home_thread_id
        30 |       uint8_t is_scheduled
        31 |       uint8_t is_strong_unscheduled
        28 |     uint32_t status
        32 |   TaskCallback _hook
        40 |   void * _thunk
        48 |   class RouterThread * _thread
        56 |   class Element * _owner
        64 |   union Task::Pending _pending_nextptr
        64 |     class Task * t
        64 |     uintptr_t x
           | [sizeof=72, dsize=72, align=8,
           |  nvsize=72, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0ee33f8 <../dummy_inc/click/task.hh:315:9, line:319:9> line:315:9 struct definition
|-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5611b0ee3528 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
|-FieldDecl 0x5611b0ee3588 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
|-FieldDecl 0x5611b0ee35e8 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
|-CXXConstructorDecl 0x5611b0f503f8 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x5611b0f504d0 <col:9> col:9 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x5611b0f504d0
|-CXXConstructorDecl 0x5611b0f50788 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x5611b0f50788
| `-ParmVarDecl 0x5611b0f50898 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
`-CXXConstructorDecl 0x5611b0f50938 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x5611b0f50938
  `-ParmVarDecl 0x5611b0f50a48 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'

Layout: <CGRecordLayout
  LLVMType:%struct.anon = type { i16, i8, i8 }
  NonVirtualBaseLLVMType:%struct.anon = type { i16, i8, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0ee3248 <../dummy_inc/click/task.hh:314:5, line:321:5> line:314:11 union Status definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5611b0ee3368 <col:5, col:11> col:11 implicit union Status
|-CXXRecordDecl 0x5611b0ee33f8 <line:315:9, line:319:9> line:315:9 struct definition
| |-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5611b0ee3528 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
| |-FieldDecl 0x5611b0ee3588 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
| |-FieldDecl 0x5611b0ee35e8 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
| |-CXXConstructorDecl 0x5611b0f503f8 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
| |-CXXDestructorDecl 0x5611b0f504d0 <col:9> col:9 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x5611b0f504d0
| |-CXXConstructorDecl 0x5611b0f50788 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x5611b0f50788
| | `-ParmVarDecl 0x5611b0f50898 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
| `-CXXConstructorDecl 0x5611b0f50938 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x5611b0f50938
|   `-ParmVarDecl 0x5611b0f50a48 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'
|-FieldDecl 0x5611b0ee36a8 <col:9> col:9 implicit referenced 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
|-IndirectFieldDecl 0x5611b0ee3708 <line:316:21> col:21 implicit home_thread_id 'int16_t':'short'
| |-Field 0x5611b0ee36a8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x5611b0ee3528 'home_thread_id' 'int16_t':'short'
|-IndirectFieldDecl 0x5611b0ee3760 <line:317:21> col:21 implicit is_scheduled 'uint8_t':'unsigned char'
| |-Field 0x5611b0ee36a8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x5611b0ee3588 'is_scheduled' 'uint8_t':'unsigned char'
|-IndirectFieldDecl 0x5611b0ee37b8 <line:318:21> col:21 implicit is_strong_unscheduled 'uint8_t':'unsigned char'
| |-Field 0x5611b0ee36a8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x5611b0ee35e8 'is_strong_unscheduled' 'uint8_t':'unsigned char'
|-FieldDecl 0x5611b0ee3810 <line:320:9, col:18> col:18 status 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5611b0f50308 <line:314:11> col:11 implicit used Status 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5611b0f50c68 <col:11>
|-CXXConstructorDecl 0x5611b0f505d8 <col:11> col:11 implicit constexpr Status 'void (const Task::Status &)' inline default trivial noexcept-unevaluated 0x5611b0f505d8
| `-ParmVarDecl 0x5611b0f506e8 <col:11> col:11 'const Task::Status &'
`-CXXConstructorDecl 0x5611b0f50ae8 <col:11> col:11 implicit constexpr Status 'void (Task::Status &&)' inline default trivial noexcept-unevaluated 0x5611b0f50ae8
  `-ParmVarDecl 0x5611b0f50bf8 <col:11> col:11 'Task::Status &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Task::Status" = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class Vector<struct TimerSet::heap_element>
         0 |   class vector_memory<class sized_array_memory<16> > vm_
         0 |     vector_memory<class sized_array_memory<16> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class Timer *>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class SimpleSpinlock (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class TimerSet
         0 |   class Timestamp _timer_expiry
         0 |     union Timestamp::rep_t _t
         0 |       int64_t x
         8 |   unsigned int _max_timer_stride
        12 |   unsigned int _timer_stride
        16 |   unsigned int _timer_count
        24 |   class Vector<struct TimerSet::heap_element> _timer_heap
        24 |     class vector_memory<class sized_array_memory<16> > vm_
        24 |       vector_memory<class sized_array_memory<16> >::type * l_
        32 |       vector_memory::size_type n_
        36 |       vector_memory::size_type capacity_
        40 |   class Vector<class Timer *> _timer_runchunk
        40 |     class vector_memory<class sized_array_memory<8> > vm_
        40 |       vector_memory<class sized_array_memory<8> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   class SimpleSpinlock _timer_lock (empty)
        64 |   class Timestamp _timer_check
        64 |     union Timestamp::rep_t _t
        64 |       int64_t x
        72 |   uint32_t _timer_check_reports
           | [sizeof=80, dsize=76, align=8,
           |  nvsize=76, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct pollfd>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<24> >
         0 |   vector_memory<class sized_array_memory<24> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct SelectSet::SelectorInfo>
         0 |   class vector_memory<class sized_array_memory<24> > vm_
         0 |     vector_memory<class sized_array_memory<24> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class SelectSet
         0 |   int [2] _wake_pipe
         8 |   volatile _Bool _wake_pipe_pending
        16 |   class Vector<struct pollfd> _pollfds
        16 |     class vector_memory<class sized_array_memory<8> > vm_
        16 |       vector_memory<class sized_array_memory<8> >::type * l_
        24 |       vector_memory::size_type n_
        28 |       vector_memory::size_type capacity_
        32 |   class Vector<struct SelectSet::SelectorInfo> _selinfo
        32 |     class vector_memory<class sized_array_memory<24> > vm_
        32 |       vector_memory<class sized_array_memory<24> >::type * l_
        40 |       vector_memory::size_type n_
        44 |       vector_memory::size_type capacity_
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class Spinlock (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class SpinlockIRQ (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class RouterThread
         0 |   struct TaskLink _task_link
         0 |     struct TaskLink * _prev
         8 |     struct TaskLink * _next
        16 |     unsigned int _pass
        24 |   volatile _Bool _stop_flag
        32 |   class TimerSet _timers
        32 |     class Timestamp _timer_expiry
        32 |       union Timestamp::rep_t _t
        32 |         int64_t x
        40 |     unsigned int _max_timer_stride
        44 |     unsigned int _timer_stride
        48 |     unsigned int _timer_count
        56 |     class Vector<struct TimerSet::heap_element> _timer_heap
        56 |       class vector_memory<class sized_array_memory<16> > vm_
        56 |         vector_memory<class sized_array_memory<16> >::type * l_
        64 |         vector_memory::size_type n_
        68 |         vector_memory::size_type capacity_
        72 |     class Vector<class Timer *> _timer_runchunk
        72 |       class vector_memory<class sized_array_memory<8> > vm_
        72 |         vector_memory<class sized_array_memory<8> >::type * l_
        80 |         vector_memory::size_type n_
        84 |         vector_memory::size_type capacity_
        88 |     class SimpleSpinlock _timer_lock (empty)
        96 |     class Timestamp _timer_check
        96 |       union Timestamp::rep_t _t
        96 |         int64_t x
       104 |     uint32_t _timer_check_reports
       112 |   class SelectSet _selects
       112 |     int [2] _wake_pipe
       120 |     volatile _Bool _wake_pipe_pending
       128 |     class Vector<struct pollfd> _pollfds
       128 |       class vector_memory<class sized_array_memory<8> > vm_
       128 |         vector_memory<class sized_array_memory<8> >::type * l_
       136 |         vector_memory::size_type n_
       140 |         vector_memory::size_type capacity_
       144 |     class Vector<struct SelectSet::SelectorInfo> _selinfo
       144 |       class vector_memory<class sized_array_memory<24> > vm_
       144 |         vector_memory<class sized_array_memory<24> >::type * l_
       152 |         vector_memory::size_type n_
       156 |         vector_memory::size_type capacity_
       192 |   class Spinlock _task_lock (empty)
       196 |   class atomic_uint32_t _task_blocker
       196 |     uint32_t _val
       200 |   class atomic_uint32_t _task_blocker_waiting
       200 |     uint32_t _val
       208 |   union Task::Pending _pending_head
       208 |     class Task * t
       208 |     uintptr_t x
       216 |   class Task::Pending * _pending_tail
       224 |   class SpinlockIRQ _pending_lock (empty)
       256 |   class Master * _master
       264 |   int _id
       268 |   _Bool _driver_entered
       272 |   unsigned int _tasks_per_iter
       276 |   unsigned int _iters_per_os
           | [sizeof=320, dsize=280, align=64,
           |  nvsize=280, nvalign=64]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0d7a3e0 prev 0x5611b0d707f0 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5611b0d7a4d8 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x5611b0d7a578 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x5611b0d7d1d8 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5611b0d805d8 <col:11>
|-CXXConstructorDecl 0x5611b0d7d2b0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5611b0d7d398 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5611b0d80d20 <col:11>
|-CXXConstructorDecl 0x5611b0d7d438 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5611b0d80568 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x5611b0d82978 <col:11>
|-CXXDestructorDecl 0x5611b0d81888 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5611b0e65ca8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5611b0e65db8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5611b0e66680 <col:11>
|   `-ReturnStmt 0x5611b0e66670 <col:11>
|     `-UnaryOperator 0x5611b0e66658 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5611b0e66648 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x5611b0e65e28 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5611b0e65f38 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x5611b0ed9360 <col:11>
    `-ReturnStmt 0x5611b0ed9350 <col:11>
      `-UnaryOperator 0x5611b0ed9338 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5611b0ed9328 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0d6f9a8 prev 0x5611b0d6f710 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5611b0d6faa0 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x5611b0d6fb30 <col:19, col:25> col:19 public
|-TypedefDecl 0x5611b0d6fb68 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x5611b09b05e0 'int32_t' sugar
|   |-Typedef 0x5611b08be328 'int32_t'
|   `-TypedefType 0x5611b0897510 '__int32_t' sugar
|     |-Typedef 0x5611b0897128 '__int32_t'
|     `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0d6fbd0 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x5611b09b07a0 'int64_t' sugar
|   |-Typedef 0x5611b08be390 'int64_t'
|   `-TypedefType 0x5611b0897630 '__int64_t' sugar
|     |-Typedef 0x5611b0897208 '__int64_t'
|     `-BuiltinType 0x5611b08555a0 'long'
|-EnumDecl 0x5611b0d6fc28 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x5611b0d6fda0 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x5611b0d6fd80 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x5611b0d6fd58 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x5611b0d6fd40 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x5611b0d6fd10 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x5611b0d6fe98 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x5611b0d6fe78 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x5611b0d6fe50 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x5611b0d6fe38 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x5611b0d6fe10 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x5611b0d6fdf0 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x5611b0d6fee8 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x5611b0d6fff0 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5611b0d70540 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d6ffd0 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x5611b0d6ffb0 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x5611b0d70080 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5611b0d70558 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d70060 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5611b0d70040 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x5611b0d70110 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5611b0d70570 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d700f0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5611b0d700d0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5611b0d701a0 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5611b0d70588 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d70180 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5611b0d70160 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x5611b0d70230 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5611b0d705a0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d70210 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5611b0d701f0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5611b0d702c0 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5611b0d705b8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d702a0 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x5611b0d70280 <col:24> 'int' 1000
| |-EnumConstantDecl 0x5611b0d70350 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5611b0d705d0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d70330 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x5611b0d70310 <col:26> 'int' EnumConstant 0x5611b0d6fff0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x5611b0d70420 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5611b0d705e8 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d70400 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x5611b0d703e0 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x5611b0d703a0 <col:27> 'int' EnumConstant 0x5611b0d70350 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x5611b0d703c0 <col:44> 'int' EnumConstant 0x5611b0d702c0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x5611b0d704f0 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x5611b0d70600 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0d704d0 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x5611b0d704b0 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x5611b0d70470 <col:27> 'int' EnumConstant 0x5611b0d70350 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x5611b0d70490 <col:44> 'int' EnumConstant 0x5611b0d701a0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x5611b0d70618 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x5611b0d70720 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x5611b0d70770 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0d70700 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x5611b0d706e0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d70350 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x5611b0d70798 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x5611b09b0210 'uninitialized_type'
|   `-CXXRecord 0x5611b09b0178 'uninitialized_type'
|-CXXRecordDecl 0x5611b0d707f0 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x5611b0d708d8 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x5611b0d7b528 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5611b0d805e8 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5611b0d80708 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x5611b0d806c0 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x5611b0d80650 <col:9> '<bound member function type>' ->assign 0x5611b0d74e98
|     | `-CXXThisExpr 0x5611b0d80640 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5611b0d80680 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5611b0d806f0 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5611b0d806a0 <col:19> 'int' 0
|-CXXConstructorDecl 0x5611b0d70b28 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x5611b0d70998 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x5611b0d70a10 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5611b0d7d070 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5611b0d7d050 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x5611b0d7b528 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5611b0d80720 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5611b0d80870 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x5611b0d807f8 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x5611b0d80788 <col:9> '<bound member function type>' ->assign 0x5611b0d74e98
|     | `-CXXThisExpr 0x5611b0d80778 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5611b0d80840 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5611b0d80828 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5611b0d807b8 <col:16> 'long' lvalue ParmVar 0x5611b0d70998 'sec' 'long'
|     `-ImplicitCastExpr 0x5611b0d80858 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5611b0d807d8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5611b0d70a10 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5611b0d70d88 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5611b0d70bf8 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x5611b0d70c70 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5611b0d7d0a8 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5611b0d7d088 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x5611b0d7b528 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5611b0d80888 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5611b0d809c0 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x5611b0d80960 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x5611b0d808f0 <col:9> '<bound member function type>' ->assign 0x5611b0d74e98
|     | `-CXXThisExpr 0x5611b0d808e0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5611b0d80990 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5611b0d80920 <col:16> 'int' lvalue ParmVar 0x5611b0d70bf8 'sec' 'int'
|     `-ImplicitCastExpr 0x5611b0d809a8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5611b0d80940 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5611b0d70c70 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5611b0d70fe8 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x5611b0d70e58 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x5611b0d70ed0 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5611b0d7d0e0 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5611b0d7d0c0 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x5611b0d7b528 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5611b0d809d8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5611b0d80b28 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x5611b0d80ab0 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x5611b0d80a40 <col:9> '<bound member function type>' ->assign 0x5611b0d74e98
|     | `-CXXThisExpr 0x5611b0d80a30 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5611b0d80af8 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5611b0d80ae0 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5611b0d80a70 <col:16> 'unsigned long' lvalue ParmVar 0x5611b0d70e58 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x5611b0d80b10 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5611b0d80a90 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5611b0d70ed0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5611b0d71248 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x5611b0d710b8 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x5611b0d71130 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5611b0d7d118 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5611b0d7d0f8 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x5611b0d7b528 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5611b0d80b40 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5611b0d80c90 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x5611b0d80c18 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x5611b0d80ba8 <col:9> '<bound member function type>' ->assign 0x5611b0d74e98
|     | `-CXXThisExpr 0x5611b0d80b98 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5611b0d80c60 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5611b0d80c48 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5611b0d80bd8 <col:16> 'unsigned int' lvalue ParmVar 0x5611b0d710b8 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x5611b0d80c78 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5611b0d80bf8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5611b0d71130 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5611b0d713a8 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x5611b0d71318 <col:31> col:37 'double'
|-CXXConstructorDecl 0x5611b0d71d90 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x5611b0d71480 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x5611b0d71fb8 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x5611b0d71ec0 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x5611b0d72168 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x5611b0d720a8 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x5611b0d7b528 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5611b0d80d30 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x5611b0d80ca8 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x5611b0d720a8 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5611b0d80d90 <col:19, line:214:5>
|-CXXConstructorDecl 0x5611b0d72398 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x5611b0d722a8 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x5611b0d7b528 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5611b0d80da0 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5611b0d80e50 <col:53, line:219:5>
|   `-CStyleCastExpr 0x5611b0d80e28 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x5611b0d80df8 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x5611b0d722a8 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x5611b0d72588 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x5611b0d72500 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x5611b0bb9a50 'Timestamp'
|   | `-CXXRecord 0x5611b0d6f9a8 'Timestamp'
|   `-ParenType 0x5611b0d724a0 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x5611b0d72470 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x5611b0d6fcf0 'Timestamp::seconds_type' sugar
|         |-Typedef 0x5611b0d6fb68 'seconds_type'
|         `-TypedefType 0x5611b09b05e0 'int32_t' sugar
|           |-Typedef 0x5611b08be328 'int32_t'
|           `-TypedefType 0x5611b0897510 '__int32_t' sugar
|             |-Typedef 0x5611b0897128 '__int32_t'
|             `-BuiltinType 0x5611b0855580 'int'
|-CXXConversionDecl 0x5611b0d726c8 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5611b0d72798 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x5611b0d80f58 <col:37, line:231:5>
|   `-ReturnStmt 0x5611b0d80f48 <line:227:9, col:23>
|     `-BinaryOperator 0x5611b0d80f28 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x5611b0d80ef8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5611b0d80ea8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5611b0d7a578
|       |   `-MemberExpr 0x5611b0d80e78 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5611b0d7b528
|       |     `-CXXThisExpr 0x5611b0d80e68 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5611b0d80f10 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x5611b0d80ed8 <col:23> 'int' 0
|-CXXMethodDecl 0x5611b0d72858 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x5611b0d72918 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5611b0d729d8 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x5611b0d72a98 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x5611b0d72b58 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5611b0d72cc8 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x5611b0d72c08 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x5611b0d72e10 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x5611b0d72d80 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0d72ed8 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5611b0d72f78 <col:54> "" ""
|-CXXMethodDecl 0x5611b0d73008 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5611b0d730a8 <col:54> "" ""
|-CXXMethodDecl 0x5611b0d73138 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5611b0d731d8 <col:54> "" ""
|-CXXMethodDecl 0x5611b0d732d8 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x5611b0d733a8 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x5611b0d734d8 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x5611b0d735d0 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x5611b0d73708 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5611b0d81170 <col:39, line:271:5>
|   `-ReturnStmt 0x5611b0d81160 <line:267:9, col:61>
|     `-CallExpr 0x5611b0d81100 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5611b0d810e8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5611b0d80f70 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5611b0d7b858 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5611b0d81130 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5611b0d80fd0 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5611b0d7a578
|       |   `-MemberExpr 0x5611b0d80fa0 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5611b0d7b528
|       |     `-CXXThisExpr 0x5611b0d80f90 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5611b0d81148 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5611b0d81070 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5611b0d81040 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5611b0d81000 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d70350 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5611b0d81058 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5611b0d81020 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d702c0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5611b0d737c8 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5611b0d81330 <col:39, line:279:5>
|   `-ReturnStmt 0x5611b0d81320 <line:275:9, col:61>
|     `-CallExpr 0x5611b0d812c0 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5611b0d812a8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5611b0d81188 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5611b0d7b858 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5611b0d812f0 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5611b0d811e8 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5611b0d7a578
|       |   `-MemberExpr 0x5611b0d811b8 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5611b0d7b528
|       |     `-CXXThisExpr 0x5611b0d811a8 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5611b0d81308 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5611b0d81288 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5611b0d81258 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5611b0d81218 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d70350 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5611b0d81270 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5611b0d81238 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d701a0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5611b0d73888 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5611b0d814c8 <col:39, line:287:5>
|   `-ReturnStmt 0x5611b0d814b8 <line:283:9, col:53>
|     `-BinaryOperator 0x5611b0d81498 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x5611b0d81468 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5611b0d81388 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5611b0d7a578
|       |   `-MemberExpr 0x5611b0d81358 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5611b0d7b528
|       |     `-CXXThisExpr 0x5611b0d81348 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5611b0d81480 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x5611b0d81448 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5611b0d81428 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5611b0d813f8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5611b0d813b8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d6fff0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5611b0d81410 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5611b0d813d8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d70350 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5611b0d73978 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5611b0d82b60 <col:40, line:293:5>
|   |-DeclStmt 0x5611b0d81610 <line:291:9, col:48>
|   | `-VarDecl 0x5611b0d814f0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5611b0d815f0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5611b0d81598 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5611b0d81568 <col:22> '<bound member function type>' ->subsec 0x5611b0d72918
|   |     |   `-CXXThisExpr 0x5611b0d81558 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5611b0d815d8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5611b0d815b8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d70420 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5611b0d82b50 <line:292:9, col:70>
|     `-ExprWithCleanups 0x5611b0d82b38 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5611b0d82b08 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5611b0d82af0 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5611b0d82ad0 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5611b0d82aa0 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5611b0d82838 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5611b0d82820 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5611b0d81628 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5611b0d814f0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5611b0d82a40 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5611b0d82a28 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5611b0d829f8 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5611b0d82850 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5611b0d827c0 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5611b0d827a8 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5611b0d82758 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5611b0d6f8f8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5611b0d826f8 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5611b0d81658 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5611b0d81648 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5611b0d82740 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5611b0d82728 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5611b0d81b18 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5611b0d81680 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5611b0d81710 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5611b0d816e0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5611b0d816a0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d70420 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5611b0d816f8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5611b0d816c0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5611b0d814f0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5611b0d82a70 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5611b0d82808 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5611b0d827f8 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5611b0d73a38 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5611b0d830b8 <col:40, line:302:5>
|   |-DeclStmt 0x5611b0d82cb0 <line:297:9, col:48>
|   | `-VarDecl 0x5611b0d82b90 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5611b0d82c90 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5611b0d82c38 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5611b0d82c08 <col:22> '<bound member function type>' ->subsec 0x5611b0d72918
|   |     |   `-CXXThisExpr 0x5611b0d82bf8 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5611b0d82c78 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5611b0d82c58 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d704f0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5611b0d830a8 <line:298:9, col:70>
|     `-ExprWithCleanups 0x5611b0d83090 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5611b0d83060 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5611b0d83048 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5611b0d83028 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5611b0d82ff8 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5611b0d82f20 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5611b0d82f08 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5611b0d82cc8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5611b0d82b90 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5611b0d82f98 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5611b0d82f80 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5611b0d82f50 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5611b0d82f38 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5611b0d82ea8 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5611b0d82e90 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5611b0d82e70 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5611b0d6f8f8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5611b0d82e10 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5611b0d82cf8 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5611b0d82ce8 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5611b0d82e58 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5611b0d82e40 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5611b0d82dd0 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5611b0d82d20 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5611b0d82db0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5611b0d82d80 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5611b0d82d40 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d704f0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5611b0d82d98 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5611b0d82d60 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5611b0d82b90 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5611b0d82fc8 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5611b0d82ef0 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5611b0d82ee0 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5611b0d73af8 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5611b0d83140 <col:40, line:306:5>
|   `-ReturnStmt 0x5611b0d83130 <line:305:9, col:17>
|     `-CXXConstructExpr 0x5611b0d83100 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x5611b0d830e8 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5611b0d830d8 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x5611b0d73c98 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x5611b0d73ba8 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x5611b0d73e68 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x5611b0d73d70 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x5611b0d73f58 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x5611b0d740c8 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x5611b0d74008 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x5611b0d83288 <col:56, line:320:5>
|   `-ReturnStmt 0x5611b0d83278 <line:319:9, col:32>
|     `-ExprWithCleanups 0x5611b0d83260 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x5611b0d83230 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5611b0d83218 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5611b0d831d8 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5611b0d831a8 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5611b0d83168 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5611b0d74008 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x5611b0d831c0 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5611b0d83188 <col:31> 'int' 0
|-CXXMethodDecl 0x5611b0d74308 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5611b0d74180 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5611b0d741f8 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5611b0d83458 <col:72, line:326:5>
|   `-ReturnStmt 0x5611b0d83448 <line:325:9, col:51>
|     `-ExprWithCleanups 0x5611b0d83430 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5611b0d83400 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5611b0d833e8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5611b0d833a8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5611b0d83390 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5611b0d832b0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5611b0d74180 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5611b0d83350 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5611b0d83338 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5611b0d832d0 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5611b0d79cd0 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5611b0d83378 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5611b0d832f0 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5611b0d741f8 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0d744b8 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5611b0d743c8 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5611b0d83b20 <col:56, line:337:5>
|   |-DeclStmt 0x5611b0d83758 <line:329:9, col:51>
|   | `-VarDecl 0x5611b0d83480 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5611b0d83740 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5611b0d83710 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5611b0d836f8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5611b0d836e0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5611b0d836b0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5611b0d83698 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5611b0d83680 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5611b0d83570 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5611b0d83910 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5611b0d837c0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5611b0d7a578
|   | | `-MemberExpr 0x5611b0d83790 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5611b0d7b528
|   | |   `-DeclRefExpr 0x5611b0d83770 <col:9> 'Timestamp' lvalue Var 0x5611b0d83480 't' 'Timestamp'
|   | `-BinaryOperator 0x5611b0d838f0 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5611b0d838c0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5611b0d837f0 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5611b0d743c8 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5611b0d838d8 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5611b0d838a0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5611b0d83880 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5611b0d83850 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5611b0d83810 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d70350 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5611b0d83868 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5611b0d83830 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d702c0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5611b0d83b08 <line:336:9, col:16>
|     `-CXXConstructExpr 0x5611b0d83ad8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5611b0d83ac0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5611b0d83aa0 <col:16> 'Timestamp' lvalue Var 0x5611b0d83480 't' 'Timestamp'
|-CXXMethodDecl 0x5611b0d74680 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5611b0d74570 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5611b0d745e8 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5611b0d83cd8 <col:72, line:343:5>
|   `-ReturnStmt 0x5611b0d83cc8 <line:342:9, col:51>
|     `-ExprWithCleanups 0x5611b0d83cb0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5611b0d83c80 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5611b0d83c68 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5611b0d83c28 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5611b0d83c10 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5611b0d83b58 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5611b0d74570 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5611b0d83bd0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5611b0d83bb8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5611b0d83b78 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5611b0d79e18 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5611b0d83bf8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5611b0d83b98 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5611b0d745e8 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0d747d0 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5611b0d74740 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5611b0d84120 <col:56, line:354:5>
|   |-DeclStmt 0x5611b0d83ec8 <line:346:9, col:51>
|   | `-VarDecl 0x5611b0d83d00 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5611b0d83eb0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5611b0d83e80 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5611b0d83e68 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5611b0d83e50 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5611b0d83e20 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5611b0d83e08 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5611b0d83df0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5611b0d83dc0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5611b0d84080 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5611b0d83f30 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5611b0d7a578
|   | | `-MemberExpr 0x5611b0d83f00 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5611b0d7b528
|   | |   `-DeclRefExpr 0x5611b0d83ee0 <col:9> 'Timestamp' lvalue Var 0x5611b0d83d00 't' 'Timestamp'
|   | `-BinaryOperator 0x5611b0d84060 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5611b0d84030 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5611b0d83f60 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5611b0d74740 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5611b0d84048 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5611b0d84010 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5611b0d83ff0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5611b0d83fc0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5611b0d83f80 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d70350 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5611b0d83fd8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5611b0d83fa0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d701a0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5611b0d84108 <line:353:9, col:16>
|     `-CXXConstructExpr 0x5611b0d840d8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5611b0d840c0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5611b0d840a0 <col:16> 'Timestamp' lvalue Var 0x5611b0d83d00 't' 'Timestamp'
|-CXXMethodDecl 0x5611b0d74998 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5611b0d74888 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5611b0d74900 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5611b0d842d8 <col:72, line:360:5>
|   `-ReturnStmt 0x5611b0d842c8 <line:359:9, col:51>
|     `-ExprWithCleanups 0x5611b0d842b0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5611b0d84280 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5611b0d84268 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5611b0d84228 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5611b0d84210 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5611b0d84158 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5611b0d74888 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5611b0d841d0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5611b0d841b8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5611b0d84178 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5611b0d79f60 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5611b0d841f8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5611b0d84198 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5611b0d74900 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0d74ae8 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5611b0d74a58 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5611b0d8dc08 <col:56, line:371:5>
|   |-DeclStmt 0x5611b0d844c8 <line:363:9, col:51>
|   | `-VarDecl 0x5611b0d84300 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5611b0d844b0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5611b0d84480 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5611b0d84468 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5611b0d84450 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5611b0d84420 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5611b0d84408 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5611b0d843f0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5611b0d843c0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5611b0d8db68 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5611b0d8d9f0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5611b0d7a578
|   | | `-MemberExpr 0x5611b0d8d9c0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5611b0d7b528
|   | |   `-DeclRefExpr 0x5611b0d844e0 <col:9> 'Timestamp' lvalue Var 0x5611b0d84300 't' 'Timestamp'
|   | `-CallExpr 0x5611b0d8db08 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x5611b0d8daf0 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5611b0d8da20 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5611b0d7b858 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x5611b0d8db38 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5611b0d8da40 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x5611b0d74a58 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5611b0d8db50 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x5611b0d8dad0 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x5611b0d8daa0 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x5611b0d8da60 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d6fff0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x5611b0d8dab8 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x5611b0d8da80 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d70350 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5611b0d8dbf0 <line:370:9, col:16>
|     `-CXXConstructExpr 0x5611b0d8dbc0 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5611b0d8dba8 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5611b0d8db88 <col:16> 'Timestamp' lvalue Var 0x5611b0d84300 't' 'Timestamp'
|-CXXMethodDecl 0x5611b0d74bd8 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x5611b0d8dd48 <col:39, line:377:5>
|   `-ReturnStmt 0x5611b0d8dd38 <line:376:9, col:30>
|     `-ExprWithCleanups 0x5611b0d8dd20 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x5611b0d8dcf0 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5611b0d8dcd8 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5611b0d8dc98 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x5611b0d8dc40 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x5611b0d8dc80 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5611b0d8dc60 <col:29> 'int' 1
|-CXXMethodDecl 0x5611b0d74c98 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x5611b0d8de28 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x5611b0d8dde0 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x5611b0d8dd70 <col:9> '<bound member function type>' ->assign 0x5611b0d74e98
|     | `-CXXThisExpr 0x5611b0d8dd60 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5611b0d8dda0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5611b0d8de10 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5611b0d8ddc0 <col:19> 'int' 0
|-CXXMethodDecl 0x5611b0d74e98 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5611b0d74d48 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5611b0d74dc0 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5611b0d7d150 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5611b0d7d130 <col:60> 'int' 0
| `-CompoundStmt 0x5611b0d8e020 <col:63, line:395:5>
|   `-BinaryOperator 0x5611b0d8e000 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x5611b0d8de80 <col:9, col:12> 'int64_t':'long' lvalue .x 0x5611b0d7a578
|     | `-MemberExpr 0x5611b0d8de50 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x5611b0d7b528
|     |   `-CXXThisExpr 0x5611b0d8de40 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x5611b0d8dfe0 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x5611b0d8df70 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x5611b0d8df10 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x5611b0d8def8 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x5611b0d8dee0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x5611b0d8deb0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5611b0d74d48 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x5611b0d8df58 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x5611b0d8df38 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d70350 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x5611b0d8dfc8 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x5611b0d8dfb0 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x5611b0d8df90 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5611b0d74dc0 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0d75068 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5611b0d74f58 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5611b0d74fd0 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5611b0d8e178 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x5611b0d8e130 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x5611b0d8e048 <col:9> '<bound member function type>' ->assign 0x5611b0d74e98
|     | `-CXXThisExpr 0x5611b0d8e038 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5611b0d8e160 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5611b0d8e078 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5611b0d74f58 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5611b0d8e0f0 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5611b0d8e0d8 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5611b0d8e098 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5611b0d79e18 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5611b0d8e118 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5611b0d8e0b8 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5611b0d74fd0 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0d75238 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5611b0d75128 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5611b0d751a0 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5611b0d8e2d0 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x5611b0d8e288 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x5611b0d8e1a0 <col:9> '<bound member function type>' ->assign 0x5611b0d74e98
|     | `-CXXThisExpr 0x5611b0d8e190 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5611b0d8e2b8 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5611b0d8e1d0 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5611b0d75128 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5611b0d8e248 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5611b0d8e230 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5611b0d8e1f0 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5611b0d79f60 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5611b0d8e270 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5611b0d8e210 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5611b0d751a0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0d75408 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5611b0d752f8 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5611b0d75370 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5611b0d7d188 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5611b0d7d168 <col:57> 'int' 0
| `-DeprecatedAttr 0x5611b0d754b8 <col:75> "" ""
|-CXXMethodDecl 0x5611b0d75648 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5611b0d75538 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5611b0d755b0 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5611b0d756f8 <col:74> "" ""
|-CXXMethodDecl 0x5611b0d75888 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5611b0d75778 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5611b0d757f0 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5611b0d75938 <col:74> "" ""
|-CXXMethodDecl 0x5611b0d759c8 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x5611b0d75a68 <col:42> "" ""
|-CXXMethodDecl 0x5611b0d75c10 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x5611b0d75af0 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5611b0d75b70 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x5611b0d75ce0 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x5611b0d79510 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x5611b0d795b0 <col:20>
| `-OptimizeNoneAttr 0x5611b0d79608 <col:30>
|-CXXMethodDecl 0x5611b0d79650 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x5611b0d79710 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x5611b0d797d0 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5611b0d79890 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x5611b0d79950 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5611b0d79a10 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x5611b0d79ad0 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x5611b0d79b90 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x5611b0d79cd0 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5611b0d79c40 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5611b0d8e418 <col:58, line:512:5>
|   `-ReturnStmt 0x5611b0d8e408 <line:511:9, col:53>
|     `-BinaryOperator 0x5611b0d8e3e8 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5611b0d8e3b8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5611b0d8e2e8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5611b0d79c40 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5611b0d8e3d0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5611b0d8e398 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5611b0d8e378 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5611b0d8e348 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5611b0d8e308 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d70350 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5611b0d8e360 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5611b0d8e328 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d702c0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5611b0d79e18 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5611b0d79d88 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5611b0d8e560 <col:58, line:516:5>
|   `-ReturnStmt 0x5611b0d8e550 <line:515:9, col:53>
|     `-BinaryOperator 0x5611b0d8e530 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5611b0d8e500 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5611b0d8e430 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5611b0d79d88 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5611b0d8e518 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5611b0d8e4e0 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5611b0d8e4c0 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5611b0d8e490 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5611b0d8e450 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d70350 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5611b0d8e4a8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5611b0d8e470 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d701a0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5611b0d79f60 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5611b0d79ed0 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5611b0d8e6a8 <col:58, line:520:5>
|   `-ReturnStmt 0x5611b0d8e698 <line:519:9, col:53>
|     `-BinaryOperator 0x5611b0d8e678 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5611b0d8e648 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5611b0d8e578 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5611b0d79ed0 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5611b0d8e660 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5611b0d8e628 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5611b0d8e608 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5611b0d8e5d8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5611b0d8e598 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d6fff0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5611b0d8e5f0 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5611b0d8e5b8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d70350 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5611b0d7a0a8 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5611b0d7a018 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5611b0d8e7f0 <col:60, line:524:5>
|   `-ReturnStmt 0x5611b0d8e7e0 <line:523:9, col:55>
|     `-BinaryOperator 0x5611b0d8e7c0 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5611b0d8e790 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5611b0d8e6c0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5611b0d7a018 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5611b0d8e7a8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5611b0d8e770 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5611b0d8e750 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5611b0d8e720 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5611b0d8e6e0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d70350 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5611b0d8e738 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5611b0d8e700 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d702c0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5611b0d7a1f0 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5611b0d7a160 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5611b0d8e938 <col:60, line:528:5>
|   `-ReturnStmt 0x5611b0d8e928 <line:527:9, col:55>
|     `-BinaryOperator 0x5611b0d8e908 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5611b0d8e8d8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5611b0d8e808 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5611b0d7a160 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5611b0d8e8f0 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5611b0d8e8b8 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5611b0d8e898 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5611b0d8e868 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5611b0d8e828 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d70350 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5611b0d8e880 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5611b0d8e848 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d701a0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5611b0d7a338 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5611b0d7a2a8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5611b0d8ea80 <col:60, line:532:5>
|   `-ReturnStmt 0x5611b0d8ea70 <line:531:9, col:55>
|     `-BinaryOperator 0x5611b0d8ea50 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5611b0d8ea20 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5611b0d8e950 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5611b0d7a2a8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5611b0d8ea38 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5611b0d8ea00 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5611b0d8e9e0 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5611b0d8e9b0 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5611b0d8e970 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d6fff0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5611b0d8e9c8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5611b0d8e990 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5611b0d70350 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x5611b0d7a3e0 prev 0x5611b0d707f0 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5611b0d7a4d8 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x5611b0d7a578 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x5611b0d7d1d8 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5611b0d805d8 <col:11>
| |-CXXConstructorDecl 0x5611b0d7d2b0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5611b0d7d398 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5611b0d80d20 <col:11>
| |-CXXConstructorDecl 0x5611b0d7d438 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x5611b0d80568 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x5611b0d82978 <col:11>
| |-CXXDestructorDecl 0x5611b0d81888 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5611b0e65ca8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5611b0e65db8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5611b0e66680 <col:11>
| |   `-ReturnStmt 0x5611b0e66670 <col:11>
| |     `-UnaryOperator 0x5611b0e66658 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5611b0e66648 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x5611b0e65e28 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x5611b0e65f38 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x5611b0ed9360 <col:11>
|     `-ReturnStmt 0x5611b0ed9350 <col:11>
|       `-UnaryOperator 0x5611b0ed9338 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5611b0ed9328 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x5611b0d7a5e0 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x5611b0d7a6e0 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5611b0d7a8e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d7a6c0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5611b0d7a6a0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5611b0d7a770 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5611b0d7a8f8 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d7a750 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x5611b0d7a730 <col:23> 'int' 1
| |-EnumConstantDecl 0x5611b0d7a800 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5611b0d7a910 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0d7a7e0 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x5611b0d7a7c0 <col:23> 'int' 2
| `-EnumConstantDecl 0x5611b0d7a890 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x5611b0d7a928 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0d7a870 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x5611b0d7a850 <col:27> 'int' 3
|-CXXMethodDecl 0x5611b0d7a968 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x5611b0d7aa30 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x5611b0d7ac38 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x5611b0d7aae0 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x5611b0d7ab60 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x5611b0d7d1a0 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x5611b0d7ae48 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x5611b0d7acf8 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x5611b0d7ad70 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x5611b0d7af18 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x5611b0d7afd8 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x5611b0d7b148 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x5611b0d7b088 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x5611b0d7b210 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5611b0d7b2d0 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x5611b0d7b390 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5611b0d7b450 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x5611b0d7b4f0 <line:670:3, col:10> col:3 private
|-FieldDecl 0x5611b0d7b528 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x5611b0d7b598 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x5611b0d8ea98 <col:27, line:684:5>
|-CXXMethodDecl 0x5611b0d7b658 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x5611b0d8eaa8 <col:27, line:696:5>
|-CXXMethodDecl 0x5611b0d7b858 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5611b0d7b708 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5611b0d7b780 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5611b0d8ec30 <col:66, line:700:5>
|   `-ReturnStmt 0x5611b0d8ec20 <line:699:9, col:31>
|     `-CallExpr 0x5611b0d8ebc0 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x5611b0d8eba8 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5611b0d8eb58 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x5611b0bfec28 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x5611b0d8ebf0 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x5611b0d8eb18 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x5611b0d7b708 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x5611b0d8ec08 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5611b0d8eb38 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x5611b0d7b780 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0d7bbc8 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5611b0d7b918 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x5611b0d7b990 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x5611b0d7ba08 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5611b0d7ba80 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5611b0d8ef80 <col:64, line:707:5>
|   |-DeclStmt 0x5611b0d8ecc0 <line:704:9, col:24>
|   | `-VarDecl 0x5611b0d8ec58 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x5611b0d8eed0 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x5611b0d8ecd8 <col:9> 'int32_t':'int' lvalue ParmVar 0x5611b0d7b990 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x5611b0d8eeb8 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x5611b0d8ee50 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x5611b0d8ee38 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5611b0d8edb8 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x5611b0c03f08 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x5611b0d8ee88 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5611b0d8ed58 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x5611b0d7ba08 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x5611b0d8eea0 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5611b0d8ed78 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x5611b0d7ba80 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x5611b0d8ed98 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x5611b0d8ec58 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x5611b0d8ef60 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x5611b0d8eef0 <col:9> 'int32_t':'int' lvalue ParmVar 0x5611b0d7b918 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x5611b0d8ef48 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x5611b0d8ef30 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x5611b0d8ef10 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x5611b0d8ec58 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x5611b0d7be68 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x5611b0d7bc98 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x5611b0d7bd10 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x5611b0d7bd88 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x5611b0d7c108 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x5611b0d7bf30 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x5611b0d7bfa8 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x5611b0d7c020 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x5611b0d7c298 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x5611b0d7c1d0 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x5611b0d7c498 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x5611b0d7c350 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x5611b0d7c3c8 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x5611b0d7c768 <line:717:5, col:73> col:24
| `-FunctionDecl 0x5611b0d7c6a8 parent 0x5611b0855488 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5611b0d7c558 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x5611b0d7c5d0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5611b0d7c988 <line:718:5, col:72> col:24
| `-FunctionDecl 0x5611b0d7c8c8 parent 0x5611b0855488 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5611b0d7c7b8 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x5611b0d7c830 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x5611b0d7cb50 <line:719:5, col:57> col:29
| `-FunctionDecl 0x5611b0d7ca98 parent 0x5611b0855488 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x5611b0d7c9d8 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x5611b0d7cdd8 <line:720:5, col:73> col:30
| `-FunctionDecl 0x5611b0d7cd18 parent 0x5611b0855488 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5611b0d7cbc8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5611b0d7cc40 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5611b0d7cff8 <line:721:5, col:73> col:30
| `-FunctionDecl 0x5611b0d7cf38 parent 0x5611b0855488 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5611b0d7ce28 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5611b0d7cea0 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x5611b0d81730 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5611b0d81818 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x5611b0d7b528 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5611b0d82688 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x5611b0d82640 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5611b0d7b528
| |     `-DeclRefExpr 0x5611b0d82620 <col:7> 'const Timestamp' lvalue ParmVar 0x5611b0d81818 '' 'const Timestamp &'
| `-CompoundStmt 0x5611b0d826e8 <col:7>
|-CXXConstructorDecl 0x5611b0d81998 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5611b0d81aa8 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x5611b0d7b528 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5611b0d82988 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x5611b0d82930 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5611b0d7b528
| |     `-CXXStaticCastExpr 0x5611b0d82900 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x5611b0d828d0 <col:7> 'Timestamp' lvalue ParmVar 0x5611b0d81aa8 '' 'Timestamp &&'
| `-CompoundStmt 0x5611b0d829e8 <col:7>
|-CXXDestructorDecl 0x5611b0d81b58 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5611b0e65b00 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5611b0e65c08 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x5611b0e666f8 <col:7>
|   |-CXXMemberCallExpr 0x5611b0e66698 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x5611b0e665d8 <col:7> '<bound member function type>' .operator= 0x5611b0e65ca8
|   | | `-MemberExpr 0x5611b0e664e8 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5611b0d7b528
|   | |   `-CXXThisExpr 0x5611b0e664d8 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x5611b0e665a8 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5611b0d7b528
|   |   `-DeclRefExpr 0x5611b0e66588 <col:7> 'const Timestamp' lvalue ParmVar 0x5611b0e65c08 '' 'const Timestamp &'
|   `-ReturnStmt 0x5611b0e666e8 <col:7>
|     `-UnaryOperator 0x5611b0e666d0 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5611b0e666c0 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x5611b0e65fa8 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5611b0e660b8 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x5611b0ed93d8 <col:7>
    |-CXXMemberCallExpr 0x5611b0ed9378 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x5611b0ed92e0 <col:7> '<bound member function type>' .operator= 0x5611b0e65e28
    | | `-MemberExpr 0x5611b0ed91b0 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5611b0d7b528
    | |   `-CXXThisExpr 0x5611b0ed91a0 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x5611b0ed92b0 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5611b0d7b528
    |   `-CXXStaticCastExpr 0x5611b0ed9280 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x5611b0ed9250 <col:7> 'Timestamp' lvalue ParmVar 0x5611b0e660b8 '' 'Timestamp &&'
    `-ReturnStmt 0x5611b0ed93c8 <col:7>
      `-UnaryOperator 0x5611b0ed93b0 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5611b0ed93a0 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5611b0ee7828 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'TimerSet::heap_element'
|-CXXRecordDecl 0x5611b0ee7a38 prev 0x5611b0ee7828 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5611b0ee8c40 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<heap_element>::type':'sized_array_memory<16>'
| `-ElaboratedType 0x5611b0ee8bf0 'typename array_memory<heap_element>::type' sugar
|   `-TypedefType 0x5611b0ee8bd0 'conditional<true, sized_array_memory<16>, typed_array_memory<TimerSet::heap_element> >::type' sugar
|     |-Typedef 0x5611b0ee8a80 'type'
|     `-SubstTemplateTypeParmType 0x5611b0ee88a0 'sized_array_memory<16>' sugar
|       |-TemplateTypeParmType 0x5611b0a748b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0a74858 'T'
|       `-RecordType 0x5611b0ee83f0 'sized_array_memory<16>'
|         `-ClassTemplateSpecialization 0x5611b0ee8308 'sized_array_memory'
|-FieldDecl 0x5611b0ef68e0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<TimerSet::heap_element>::array_memory_type>':'vector_memory<sized_array_memory<16> >' mutable
|-AccessSpecDecl 0x5611b0ef6930 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5611b0ef6968 <line:118:5, col:15> col:15 value_type 'TimerSet::heap_element':'TimerSet::heap_element'
| `-SubstTemplateTypeParmType 0x5611b0ee7ad0 'TimerSet::heap_element' sugar
|   |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5611b0b584d8 'T'
|   `-RecordType 0x5611b0ee6a30 'TimerSet::heap_element'
|     `-CXXRecord 0x5611b0ee69a0 'heap_element'
|-TypedefDecl 0x5611b0ef6a28 <line:119:5, col:16> col:16 reference 'TimerSet::heap_element &'
| `-LValueReferenceType 0x5611b0ef69f0 'TimerSet::heap_element &'
|   `-SubstTemplateTypeParmType 0x5611b0ee7ad0 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-RecordType 0x5611b0ee6a30 'TimerSet::heap_element'
|       `-CXXRecord 0x5611b0ee69a0 'heap_element'
|-TypedefDecl 0x5611b0ef6ab8 <line:120:5, col:22> col:22 const_reference 'const TimerSet::heap_element &'
| `-LValueReferenceType 0x5611b0ef6a80 'const TimerSet::heap_element &'
|   `-QualType 0x5611b0ee7ad1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x5611b0ee7ad0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-RecordType 0x5611b0ee6a30 'TimerSet::heap_element'
|         `-CXXRecord 0x5611b0ee69a0 'heap_element'
|-TypedefDecl 0x5611b0ef6b48 <line:121:5, col:16> col:16 pointer 'TimerSet::heap_element *'
| `-PointerType 0x5611b0ef6b10 'TimerSet::heap_element *'
|   `-SubstTemplateTypeParmType 0x5611b0ee7ad0 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-RecordType 0x5611b0ee6a30 'TimerSet::heap_element'
|       `-CXXRecord 0x5611b0ee69a0 'heap_element'
|-TypedefDecl 0x5611b0ef6c08 <line:122:5, col:22> col:22 const_pointer 'const TimerSet::heap_element *'
| `-PointerType 0x5611b0ef6bd0 'const TimerSet::heap_element *'
|   `-QualType 0x5611b0ee7ad1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x5611b0ee7ad0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-RecordType 0x5611b0ee6a30 'TimerSet::heap_element'
|         `-CXXRecord 0x5611b0ee69a0 'heap_element'
|-TypedefDecl 0x5611b0ef7860 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<heap_element>::type':'const TimerSet::heap_element &'
| `-ElaboratedType 0x5611b0ef7810 'typename fast_argument<heap_element>::type' sugar
|   `-TypedefType 0x5611b0ef77f0 'fast_argument<TimerSet::heap_element, true>::type' sugar
|     |-Typedef 0x5611b0ef7728 'type'
|     `-LValueReferenceType 0x5611b0ef76f0 'const TimerSet::heap_element &'
|       `-QualType 0x5611b0ef7491 'const TimerSet::heap_element' const
|         `-SubstTemplateTypeParmType 0x5611b0ef7490 'TimerSet::heap_element' sugar
|           |-TemplateTypeParmType 0x5611b0a7d360 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5611b0a7d308 'T'
|           `-RecordType 0x5611b0ee6a30 'TimerSet::heap_element'
|             `-CXXRecord 0x5611b0ee69a0 'heap_element'
|-TypedefDecl 0x5611b0ef78c8 <line:126:5, col:22> col:22 const_access_type 'const TimerSet::heap_element &'
| `-LValueReferenceType 0x5611b0ef6a80 'const TimerSet::heap_element &'
|   `-QualType 0x5611b0ee7ad1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x5611b0ee7ad0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-RecordType 0x5611b0ee6a30 'TimerSet::heap_element'
|         `-CXXRecord 0x5611b0ee69a0 'heap_element'
|-TypedefDecl 0x5611b0ef7920 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0ef7988 <line:130:5, col:16> col:16 iterator 'TimerSet::heap_element *'
| `-PointerType 0x5611b0ef6b10 'TimerSet::heap_element *'
|   `-SubstTemplateTypeParmType 0x5611b0ee7ad0 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-RecordType 0x5611b0ee6a30 'TimerSet::heap_element'
|       `-CXXRecord 0x5611b0ee69a0 'heap_element'
|-TypedefDecl 0x5611b0ef79f0 <line:131:5, col:22> col:22 const_iterator 'const TimerSet::heap_element *'
| `-PointerType 0x5611b0ef6bd0 'const TimerSet::heap_element *'
|   `-QualType 0x5611b0ee7ad1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x5611b0ee7ad0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-RecordType 0x5611b0ee6a30 'TimerSet::heap_element'
|         `-CXXRecord 0x5611b0ee69a0 'heap_element'
|-EnumDecl 0x5611b0ef7a48 <line:134:5> col:5
| `-EnumConstantDecl 0x5611b0ef7b40 <col:12, col:40> col:12 RESERVE_GROW 'Vector<TimerSet::heap_element>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5611b0ef7b20 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5611b0b59f18 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5611b0b59ef0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5611b0b59ed0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5611b0ef7bc8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5611b0ef7e58 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0ef7c80 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0ef7d20 <col:41, col:61> col:61 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXConstructorDecl 0x5611b0ef8118 <line:139:5, col:37> col:12 Vector 'void (const Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x5611b0ef8000 <col:19, col:36> col:36 x 'const Vector<TimerSet::heap_element> &'
|-CXXConstructorDecl 0x5611b0ef83d8 <line:141:5, col:32> col:12 Vector 'void (Vector<TimerSet::heap_element> &&)' inline
| `-ParmVarDecl 0x5611b0ef82c0 <col:19, col:31> col:31 x 'Vector<TimerSet::heap_element> &&'
|-CXXMethodDecl 0x5611b0ef8720 <line:144:5, col:51> col:23 operator= 'Vector<TimerSet::heap_element> &(const Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x5611b0ef8600 <col:33, col:50> col:50 x 'const Vector<TimerSet::heap_element> &'
|-CXXMethodDecl 0x5611b0ef8a30 <line:146:5, col:46> col:23 operator= 'Vector<TimerSet::heap_element> &(Vector<TimerSet::heap_element> &&)' inline
| `-ParmVarDecl 0x5611b0ef8910 <col:33, col:45> col:45 x 'Vector<TimerSet::heap_element> &&'
|-CXXMethodDecl 0x5611b0ef8d20 <line:148:5, col:70> col:23 assign 'Vector<TimerSet::heap_element> &(Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0ef8b68 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0ef8be0 <col:43, col:69> col:63 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x5611b0ef8e78 <line:150:5, col:55> col:49 begin 'Vector<TimerSet::heap_element>::iterator ()'
| |-NoInlineAttr 0x5611b0ef8f58 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0ef8fb0 <col:30> Inherited
|-CXXMethodDecl 0x5611b0ef8ff8 <line:151:5, col:53> col:49 end 'Vector<TimerSet::heap_element>::iterator ()'
| |-NoInlineAttr 0x5611b0ef90a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0ef9100 <col:30> Inherited
|-CXXMethodDecl 0x5611b0ef91c8 <line:152:5, col:63> col:55 begin 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x5611b0ef9278 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0ef92d0 <col:30> Inherited
|-CXXMethodDecl 0x5611b0ef9318 <line:153:5, col:61> col:55 end 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x5611b0ef93c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0ef9420 <col:30> Inherited
|-CXXMethodDecl 0x5611b0ef9468 <line:154:5, col:64> col:55 cbegin 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x5611b0ef9518 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0ef9570 <col:30> Inherited
|-CXXMethodDecl 0x5611b0ef95b8 <line:155:5, col:62> col:55 cend 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x5611b0ef9668 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0ef96c0 <col:30> Inherited
|-CXXMethodDecl 0x5611b0ef96e8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5611b0ef9798 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5611b0ef9848 <line:159:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5611b0ef9a08 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0ef98f8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0ef9970 <col:37, col:63> col:57 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x5611b0ef9b58 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0ef9ac8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0ef9d08 <line:163:5, col:65> col:43 operator[] 'TimerSet::heap_element &(Vector::size_type)'
| |-ParmVarDecl 0x5611b0ef9c10 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5611b0ef9dc0 <col:20>
| `-OptimizeNoneAttr 0x5611b0ef9e18 <col:30>
|-CXXMethodDecl 0x5611b0ef9f38 <line:164:5, col:73> col:49 operator[] 'const TimerSet::heap_element &(Vector::size_type) const'
| |-ParmVarDecl 0x5611b0ef9e40 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5611b0ef9ff0 <col:20>
| `-OptimizeNoneAttr 0x5611b0efa048 <col:30>
|-CXXMethodDecl 0x5611b0efa100 <line:165:5, col:29> col:15 at 'TimerSet::heap_element &(Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0efa070 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0efa248 <line:166:5, col:37> col:21 at 'const TimerSet::heap_element &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5611b0efa1b8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0efa378 <line:167:5, col:21> col:15 front 'TimerSet::heap_element &()' inline
|-CXXMethodDecl 0x5611b0efa4a8 <line:168:5, col:29> col:21 front 'const TimerSet::heap_element &() const' inline
|-CXXMethodDecl 0x5611b0efa578 <line:169:5, col:20> col:15 back 'TimerSet::heap_element &()' inline
|-CXXMethodDecl 0x5611b0efa648 <line:170:5, col:28> col:21 back 'const TimerSet::heap_element &() const' inline
|-CXXMethodDecl 0x5611b0efa788 <line:172:5, col:39> col:15 used unchecked_at 'TimerSet::heap_element &(Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0efa6f8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0efa8d0 <line:173:5, col:47> col:21 unchecked_at 'const TimerSet::heap_element &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5611b0efa840 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0efaa18 <line:174:5, col:59> col:15 at_u 'TimerSet::heap_element &(Vector::size_type)' inline
| |-ParmVarDecl 0x5611b0efa988 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5611b0efaad0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5611b0efabd0 <line:175:5, col:71> col:21 at_u 'const TimerSet::heap_element &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5611b0efab40 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5611b0efac88 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5611b0efad48 <line:177:5, col:20> col:15 data 'TimerSet::heap_element *()' inline
|-CXXMethodDecl 0x5611b0efae48 <line:178:5, col:28> col:21 data 'const TimerSet::heap_element *() const' inline
|-CXXMethodDecl 0x5611b0efaff8 <line:180:5, col:48> col:17 push_back 'void (Vector<TimerSet::heap_element>::value_argument_type)' inline
| `-ParmVarDecl 0x5611b0efaf08 <col:27, col:47> col:47 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-FunctionTemplateDecl 0x5611b0efb7b8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5611b0efb0b0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<TimerSet::heap_element>':'fast_argument<TimerSet::heap_element, true>'
| `-CXXMethodDecl 0x5611b0efb718 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (TimerSet::heap_element &&)' inline
|   `-ParmVarDecl 0x5611b0efb618 <col:58, col:62> col:62 v 'TimerSet::heap_element &&'
|-CXXMethodDecl 0x5611b0efb898 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5611b0efb9e8 <line:186:5, col:49> col:17 push_front 'void (Vector<TimerSet::heap_element>::value_argument_type)' inline
| `-ParmVarDecl 0x5611b0efb958 <col:28, col:48> col:48 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x5611b0efbaa0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5611b0efbce8 <line:189:5, col:62> col:21 insert 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0efbb60 <col:28, col:37> col:37 it 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
| `-ParmVarDecl 0x5611b0efbbd8 <col:41, col:61> col:61 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x5611b0efbea8 <line:190:5, col:38> col:21 erase 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator)' inline
| `-ParmVarDecl 0x5611b0efbdb8 <col:27, col:36> col:36 it 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
|-CXXMethodDecl 0x5611b0efc0f8 <line:191:5, col:49> col:21 erase 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator, Vector<TimerSet::heap_element>::iterator)' inline
| |-ParmVarDecl 0x5611b0efbf70 <col:27, col:36> col:36 a 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
| `-ParmVarDecl 0x5611b0efbfe8 <col:39, col:48> col:48 b 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
|-CXXMethodDecl 0x5611b0efc1b8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5611b0efc418 <line:195:5, col:34> col:17 swap 'void (Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x5611b0efc320 <col:22, col:33> col:33 x 'Vector<TimerSet::heap_element> &'
`-CXXDestructorDecl 0x5611b0efc4e8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5611b0efc4e8

Layout: <CGRecordLayout
  LLVMType:%class.Vector.13 = type { %class.vector_memory.9 }
  NonVirtualBaseLLVMType:%class.Vector.13 = type { %class.vector_memory.9 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5611b0efc660 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Timer *'
|-CXXRecordDecl 0x5611b0efc868 prev 0x5611b0efc660 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5611b0efd880 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<Timer *>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x5611b0efd830 'typename array_memory<Timer *>::type' sugar
|   `-TypedefType 0x5611b0efd810 'conditional<true, sized_array_memory<8>, typed_array_memory<Timer *> >::type' sugar
|     |-Typedef 0x5611b0efd6c0 'type'
|     `-SubstTemplateTypeParmType 0x5611b0eb7e30 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x5611b0a748b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0a74858 'T'
|       `-RecordType 0x5611b0eb7980 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x5611b0eb7898 'sized_array_memory'
|-FieldDecl 0x5611b0efd980 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Timer *>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x5611b0efd9d0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5611b0efda08 <line:118:5, col:15> col:15 value_type 'Timer *':'Timer *'
| `-SubstTemplateTypeParmType 0x5611b0efc900 'Timer *' sugar
|   |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5611b0b584d8 'T'
|   `-PointerType 0x5611b0e8e540 'Timer *'
|     `-RecordType 0x5611b0e8d6b0 'Timer'
|       `-CXXRecord 0x5611b0ed0468 'Timer'
|-TypedefDecl 0x5611b0efdac8 <line:119:5, col:16> col:16 reference 'Timer *&'
| `-LValueReferenceType 0x5611b0efda90 'Timer *&'
|   `-SubstTemplateTypeParmType 0x5611b0efc900 'Timer *' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-PointerType 0x5611b0e8e540 'Timer *'
|       `-RecordType 0x5611b0e8d6b0 'Timer'
|         `-CXXRecord 0x5611b0ed0468 'Timer'
|-TypedefDecl 0x5611b0efdb88 <line:120:5, col:22> col:22 const_reference 'Timer *const &'
| `-LValueReferenceType 0x5611b0efdb50 'Timer *const &'
|   `-QualType 0x5611b0efc901 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x5611b0efc900 'Timer *' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-PointerType 0x5611b0e8e540 'Timer *'
|         `-RecordType 0x5611b0e8d6b0 'Timer'
|           `-CXXRecord 0x5611b0ed0468 'Timer'
|-TypedefDecl 0x5611b0efdc48 <line:121:5, col:16> col:16 pointer 'Timer **'
| `-PointerType 0x5611b0efdc10 'Timer **'
|   `-SubstTemplateTypeParmType 0x5611b0efc900 'Timer *' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-PointerType 0x5611b0e8e540 'Timer *'
|       `-RecordType 0x5611b0e8d6b0 'Timer'
|         `-CXXRecord 0x5611b0ed0468 'Timer'
|-TypedefDecl 0x5611b0efdd08 <line:122:5, col:22> col:22 const_pointer 'Timer *const *'
| `-PointerType 0x5611b0efdcd0 'Timer *const *'
|   `-QualType 0x5611b0efc901 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x5611b0efc900 'Timer *' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-PointerType 0x5611b0e8e540 'Timer *'
|         `-RecordType 0x5611b0e8d6b0 'Timer'
|           `-CXXRecord 0x5611b0ed0468 'Timer'
|-TypedefDecl 0x5611b0efe8e0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<Timer *>::type':'Timer *'
| `-ElaboratedType 0x5611b0efe890 'typename fast_argument<Timer *>::type' sugar
|   `-TypedefType 0x5611b0efe870 'fast_argument<Timer *, false>::type' sugar
|     |-Typedef 0x5611b0efe800 'type'
|     `-SubstTemplateTypeParmType 0x5611b0efe5c0 'Timer *' sugar
|       |-TemplateTypeParmType 0x5611b0a7eca0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0a7ec50 'T'
|       `-PointerType 0x5611b0e8e540 'Timer *'
|         `-RecordType 0x5611b0e8d6b0 'Timer'
|           `-CXXRecord 0x5611b0ed0468 'Timer'
|-TypedefDecl 0x5611b0efe948 <line:126:5, col:22> col:22 const_access_type 'Timer *const &'
| `-LValueReferenceType 0x5611b0efdb50 'Timer *const &'
|   `-QualType 0x5611b0efc901 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x5611b0efc900 'Timer *' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-PointerType 0x5611b0e8e540 'Timer *'
|         `-RecordType 0x5611b0e8d6b0 'Timer'
|           `-CXXRecord 0x5611b0ed0468 'Timer'
|-TypedefDecl 0x5611b0efe9a0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0efea08 <line:130:5, col:16> col:16 iterator 'Timer **'
| `-PointerType 0x5611b0efdc10 'Timer **'
|   `-SubstTemplateTypeParmType 0x5611b0efc900 'Timer *' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-PointerType 0x5611b0e8e540 'Timer *'
|       `-RecordType 0x5611b0e8d6b0 'Timer'
|         `-CXXRecord 0x5611b0ed0468 'Timer'
|-TypedefDecl 0x5611b0efea70 <line:131:5, col:22> col:22 const_iterator 'Timer *const *'
| `-PointerType 0x5611b0efdcd0 'Timer *const *'
|   `-QualType 0x5611b0efc901 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x5611b0efc900 'Timer *' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-PointerType 0x5611b0e8e540 'Timer *'
|         `-RecordType 0x5611b0e8d6b0 'Timer'
|           `-CXXRecord 0x5611b0ed0468 'Timer'
|-EnumDecl 0x5611b0efeac8 <line:134:5> col:5
| `-EnumConstantDecl 0x5611b0efebc0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Timer *>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5611b0efeba0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5611b0b59f18 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5611b0b59ef0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5611b0b59ed0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5611b0efec48 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5611b0efeed8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0efed00 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0efeda0 <col:41, col:61> col:61 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXConstructorDecl 0x5611b0eff198 <line:139:5, col:37> col:12 Vector 'void (const Vector<Timer *> &)' inline
| `-ParmVarDecl 0x5611b0eff080 <col:19, col:36> col:36 x 'const Vector<Timer *> &'
|-CXXConstructorDecl 0x5611b0eff458 <line:141:5, col:32> col:12 Vector 'void (Vector<Timer *> &&)' inline
| `-ParmVarDecl 0x5611b0eff340 <col:19, col:31> col:31 x 'Vector<Timer *> &&'
|-CXXMethodDecl 0x5611b0eff7a0 <line:144:5, col:51> col:23 operator= 'Vector<Timer *> &(const Vector<Timer *> &)' inline
| `-ParmVarDecl 0x5611b0eff680 <col:33, col:50> col:50 x 'const Vector<Timer *> &'
|-CXXMethodDecl 0x5611b0effab0 <line:146:5, col:46> col:23 operator= 'Vector<Timer *> &(Vector<Timer *> &&)' inline
| `-ParmVarDecl 0x5611b0eff990 <col:33, col:45> col:45 x 'Vector<Timer *> &&'
|-CXXMethodDecl 0x5611b0effda0 <line:148:5, col:70> col:23 assign 'Vector<Timer *> &(Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0effbe8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0effc60 <col:43, col:69> col:63 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x5611b0effef8 <line:150:5, col:55> col:49 begin 'Vector<Timer *>::iterator ()'
| |-NoInlineAttr 0x5611b0efffd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f00030 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f00078 <line:151:5, col:53> col:49 end 'Vector<Timer *>::iterator ()'
| |-NoInlineAttr 0x5611b0f00128 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f00180 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f00248 <line:152:5, col:63> col:55 begin 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f002f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f00350 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f00398 <line:153:5, col:61> col:55 end 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f00448 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f004a0 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f004e8 <line:154:5, col:64> col:55 cbegin 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f00598 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f005f0 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f00638 <line:155:5, col:62> col:55 cend 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f006e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f00740 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f00768 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5611b0f00818 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5611b0f008c8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5611b0f00a88 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0f00978 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0f009f0 <col:37, col:63> col:57 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x5611b0f00bd8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0f00b48 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f00d88 <line:163:5, col:65> col:43 operator[] 'Timer *&(Vector::size_type)'
| |-ParmVarDecl 0x5611b0f00c90 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5611b0f00e40 <col:20>
| `-OptimizeNoneAttr 0x5611b0f00e98 <col:30>
|-CXXMethodDecl 0x5611b0f00fb8 <line:164:5, col:73> col:49 operator[] 'Timer *const &(Vector::size_type) const'
| |-ParmVarDecl 0x5611b0f00ec0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5611b0f01070 <col:20>
| `-OptimizeNoneAttr 0x5611b0f010c8 <col:30>
|-CXXMethodDecl 0x5611b0f01180 <line:165:5, col:29> col:15 at 'Timer *&(Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0f010f0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f012c8 <line:166:5, col:37> col:21 at 'Timer *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5611b0f01238 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f013f8 <line:167:5, col:21> col:15 front 'Timer *&()' inline
|-CXXMethodDecl 0x5611b0f01528 <line:168:5, col:29> col:21 front 'Timer *const &() const' inline
|-CXXMethodDecl 0x5611b0f015f8 <line:169:5, col:20> col:15 back 'Timer *&()' inline
|-CXXMethodDecl 0x5611b0f016c8 <line:170:5, col:28> col:21 back 'Timer *const &() const' inline
|-CXXMethodDecl 0x5611b0f01808 <line:172:5, col:39> col:15 unchecked_at 'Timer *&(Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0f01778 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f01950 <line:173:5, col:47> col:21 unchecked_at 'Timer *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5611b0f018c0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f01a98 <line:174:5, col:59> col:15 at_u 'Timer *&(Vector::size_type)' inline
| |-ParmVarDecl 0x5611b0f01a08 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5611b0f01b50 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5611b0f01c50 <line:175:5, col:71> col:21 at_u 'Timer *const &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5611b0f01bc0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5611b0f01d08 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5611b0f01dc8 <line:177:5, col:20> col:15 data 'Timer **()' inline
|-CXXMethodDecl 0x5611b0f01ec8 <line:178:5, col:28> col:21 data 'Timer *const *() const' inline
|-CXXMethodDecl 0x5611b0f02048 <line:180:5, col:48> col:17 push_back 'void (Vector<Timer *>::value_argument_type)' inline
| `-ParmVarDecl 0x5611b0f01f88 <col:27, col:47> col:47 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-FunctionTemplateDecl 0x5611b0f02808 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5611b0f02100 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Timer *>':'fast_argument<Timer *, false>'
| `-CXXMethodDecl 0x5611b0f02768 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Timer *&&)' inline
|   `-ParmVarDecl 0x5611b0f02668 <col:58, col:62> col:62 v 'Timer *&&'
|-CXXMethodDecl 0x5611b0f028e8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5611b0f02a38 <line:186:5, col:49> col:17 push_front 'void (Vector<Timer *>::value_argument_type)' inline
| `-ParmVarDecl 0x5611b0f029a8 <col:28, col:48> col:48 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x5611b0f02af0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5611b0f02d38 <line:189:5, col:62> col:21 insert 'Vector<Timer *>::iterator (Vector<Timer *>::iterator, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0f02bb0 <col:28, col:37> col:37 it 'Vector<Timer *>::iterator':'Timer **'
| `-ParmVarDecl 0x5611b0f02c28 <col:41, col:61> col:61 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x5611b0f02ef8 <line:190:5, col:38> col:21 erase 'Vector<Timer *>::iterator (Vector<Timer *>::iterator)' inline
| `-ParmVarDecl 0x5611b0f02e08 <col:27, col:36> col:36 it 'Vector<Timer *>::iterator':'Timer **'
|-CXXMethodDecl 0x5611b0f03148 <line:191:5, col:49> col:21 erase 'Vector<Timer *>::iterator (Vector<Timer *>::iterator, Vector<Timer *>::iterator)' inline
| |-ParmVarDecl 0x5611b0f02fc0 <col:27, col:36> col:36 a 'Vector<Timer *>::iterator':'Timer **'
| `-ParmVarDecl 0x5611b0f03038 <col:39, col:48> col:48 b 'Vector<Timer *>::iterator':'Timer **'
|-CXXMethodDecl 0x5611b0f03208 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5611b0f03468 <line:195:5, col:34> col:17 swap 'void (Vector<Timer *> &)' inline
| `-ParmVarDecl 0x5611b0f03370 <col:22, col:33> col:33 x 'Vector<Timer *> &'
`-CXXDestructorDecl 0x5611b0f03538 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5611b0f03538

Layout: <CGRecordLayout
  LLVMType:%class.Vector.14 = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector.14 = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0eccea0 <../dummy_inc/click/sync.hh:194:1, line:211:1> line:194:7 referenced class SimpleSpinlock definition
|-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5611b0eccfb8 <col:1, col:7> col:7 implicit referenced class SimpleSpinlock
|-AccessSpecDecl 0x5611b0ecd048 <col:24, col:30> col:24 public
|-CXXConstructorDecl 0x5611b0ecd0d0 <line:196:5, col:27> col:12 SimpleSpinlock 'void ()' inline
|-CXXDestructorDecl 0x5611b0ecd1c0 <line:197:5, col:28> col:12 ~SimpleSpinlock 'void () noexcept' inline
|-CXXMethodDecl 0x5611b0ecd2c0 <line:199:5, col:25> col:17 acquire 'void ()' inline
|-CXXMethodDecl 0x5611b0ecd380 <line:200:5, col:25> col:17 release 'void ()' inline
|-CXXMethodDecl 0x5611b0ecd440 <line:201:5, col:25> col:17 attempt 'bool ()' inline
|-CXXConstructorDecl 0x5611b0ecd568 <line:194:7> col:7 implicit constexpr SimpleSpinlock 'void (const SimpleSpinlock &)' inline default trivial noexcept-unevaluated 0x5611b0ecd568
| `-ParmVarDecl 0x5611b0ecd678 <col:7> col:7 'const SimpleSpinlock &'
`-CXXMethodDecl 0x5611b0f042e8 <col:7> col:7 implicit operator= 'SimpleSpinlock &(const SimpleSpinlock &)' inline default trivial noexcept-unevaluated 0x5611b0f042e8
  `-ParmVarDecl 0x5611b0f043f8 <col:7> col:7 'const SimpleSpinlock &'

Layout: <CGRecordLayout
  LLVMType:%class.SimpleSpinlock = type { i8 }
  NonVirtualBaseLLVMType:%class.SimpleSpinlock.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0ee5b20 prev 0x5611b0ed6e68 <../dummy_inc/click/timerset.hh:12:1, line:90:1> line:12:7 referenced class TimerSet definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-CXXRecordDecl 0x5611b0ee5c18 <col:1, col:7> col:7 implicit referenced class TimerSet
|-AccessSpecDecl 0x5611b0ee5ca8 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x5611b0ee5d30 <line:14:5, col:14> col:5 TimerSet 'void ()'
|-CXXMethodDecl 0x5611b0ee5e28 <line:16:5, col:67> col:15 timer_expiry_steady 'Timestamp () const'
| `-CompoundStmt 0x5611b0f04770 <col:43, col:67>
|   `-ReturnStmt 0x5611b0f04760 <col:45, col:52>
|     `-CXXConstructExpr 0x5611b0f04730 <col:52> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-MemberExpr 0x5611b0f04700 <col:52> 'const Timestamp' lvalue ->_timer_expiry 0x5611b0ee7610
|         `-CXXThisExpr 0x5611b0f046f0 <col:52> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x5611b0ee5ee8 <line:17:5, col:53> col:22 timer_expiry_steady_adjusted 'Timestamp () const' inline
|-CXXMethodDecl 0x5611b0ee60f0 <line:19:5, col:64> col:16 next_timer_delay 'int (bool, Timestamp &) const' inline
| |-ParmVarDecl 0x5611b0ee5f98 <col:33, col:38> col:38 more_tasks 'bool'
| `-ParmVarDecl 0x5611b0ee6010 <col:50, col:61> col:61 t 'Timestamp &'
|-CXXMethodDecl 0x5611b0ee61e8 <line:22:5, col:23> col:12 next_timer 'Timer *()'
|-CXXMethodDecl 0x5611b0ee62b0 <line:24:5, col:67> col:14 max_timer_stride 'unsigned int () const'
| `-CompoundStmt 0x5611b0f047f0 <col:39, col:67>
|   `-ReturnStmt 0x5611b0f047e0 <col:41, col:48>
|     `-ImplicitCastExpr 0x5611b0f047c8 <col:48> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5611b0f04798 <col:48> 'const unsigned int' lvalue ->_max_timer_stride 0x5611b0ee76f8
|         `-CXXThisExpr 0x5611b0f04788 <col:48> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x5611b0ee6378 <line:25:5, col:59> col:14 timer_stride 'unsigned int () const'
| `-CompoundStmt 0x5611b0f04870 <col:35, col:59>
|   `-ReturnStmt 0x5611b0f04860 <col:37, col:44>
|     `-ImplicitCastExpr 0x5611b0f04848 <col:44> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5611b0f04818 <col:44> 'const unsigned int' lvalue ->_timer_stride 0x5611b0ee7760
|         `-CXXThisExpr 0x5611b0f04808 <col:44> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x5611b0ee64c0 <line:26:5, col:52> col:10 set_max_timer_stride 'void (unsigned int)'
| `-ParmVarDecl 0x5611b0ee6430 <col:31, col:40> col:40 timer_stride 'unsigned int'
|-CXXMethodDecl 0x5611b0ee6608 <line:28:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x5611b0ee6578 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x5611b0ee6808 <line:30:5, col:57> col:10 run_timers 'void (RouterThread *, Master *)'
| |-ParmVarDecl 0x5611b0ee66c0 <col:21, col:35> col:35 thread 'RouterThread *'
| `-ParmVarDecl 0x5611b0ee6738 <col:43, col:51> col:51 master 'Master *'
|-CXXMethodDecl 0x5611b0ee68d8 <line:32:5, col:23> col:17 fence 'void ()' inline
|-AccessSpecDecl 0x5611b0ee6978 <line:34:3, col:10> col:3 private
|-CXXRecordDecl 0x5611b0ee69a0 <line:36:5, line:45:5> line:36:12 referenced struct heap_element definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5611b0ee6ab8 <col:5, col:12> col:12 implicit referenced struct heap_element
| |-FieldDecl 0x5611b0ee6b58 <line:37:2, col:12> col:12 referenced expiry_s 'Timestamp'
| |-FieldDecl 0x5611b0ee6bb8 <line:38:2, col:9> col:9 referenced t 'Timer *'
| `-CXXConstructorDecl 0x5611b0ee6ce8 <line:42:2, line:44:2> line:42:2 heap_element 'void (Timer *)'
|   |-ParmVarDecl 0x5611b0ee6c18 <col:15, col:22> col:22 used t_ 'Timer *'
|   |-CXXCtorInitializer Field 0x5611b0ee6b58 'expiry_s' 'Timestamp'
|   | `-CXXConstructExpr 0x5611b0f04948 <line:43:8, col:36> 'Timestamp' 'void (const Timestamp &) noexcept'
|   |   `-CXXMemberCallExpr 0x5611b0f048f0 <col:17, col:35> 'const Timestamp' lvalue
|   |     `-MemberExpr 0x5611b0f048c0 <col:17, col:21> '<bound member function type>' ->expiry_steady 0x5611b0ed1aa8
|   |       `-ImplicitCastExpr 0x5611b0f04910 <col:17> 'const Timer *' <NoOp>
|   |         `-ImplicitCastExpr 0x5611b0f048a8 <col:17> 'Timer *' <LValueToRValue>
|   |           `-DeclRefExpr 0x5611b0f04888 <col:17> 'Timer *' lvalue ParmVar 0x5611b0ee6c18 't_' 'Timer *'
|   |-CXXCtorInitializer Field 0x5611b0ee6bb8 't' 'Timer *'
|   | `-ImplicitCastExpr 0x5611b0f049e0 <col:41> 'Timer *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5611b0f049a0 <col:41> 'Timer *' lvalue ParmVar 0x5611b0ee6c18 't_' 'Timer *'
|   `-CompoundStmt 0x5611b0f04a30 <col:45, line:44:2>
|-CXXRecordDecl 0x5611b0ee6db0 <line:46:5, line:50:5> line:46:12 struct heap_less definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5611b0ee6ec8 <col:5, col:12> col:12 implicit struct heap_less
| `-CXXMethodDecl 0x5611b0ee7118 <line:47:2, line:49:2> line:47:14 operator() 'bool (const TimerSet::heap_element &, const TimerSet::heap_element &)' inline
|   |-ParmVarDecl 0x5611b0ee6f98 <col:25, col:45> col:45 used a 'const TimerSet::heap_element &'
|   |-ParmVarDecl 0x5611b0ee7010 <col:48, col:68> col:68 used b 'const TimerSet::heap_element &'
|   `-CompoundStmt 0x5611b0f04b60 <col:71, line:49:2>
|     `-ReturnStmt 0x5611b0f04b50 <line:48:6, col:28>
|       `-CXXOperatorCallExpr 0x5611b0f04b18 <col:13, col:28> 'bool'
|         |-ImplicitCastExpr 0x5611b0f04b00 <col:24> 'bool (*)(const Timestamp &, const Timestamp &)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5611b0f04ae0 <col:24> 'bool (const Timestamp &, const Timestamp &)' lvalue Function 0x5611b0bf77c8 'operator<' 'bool (const Timestamp &, const Timestamp &)'
|         |-MemberExpr 0x5611b0f04a60 <col:13, col:15> 'const Timestamp' lvalue .expiry_s 0x5611b0ee6b58
|         | `-DeclRefExpr 0x5611b0f04a40 <col:13> 'const TimerSet::heap_element' lvalue ParmVar 0x5611b0ee6f98 'a' 'const TimerSet::heap_element &'
|         `-MemberExpr 0x5611b0f04ab0 <col:26, col:28> 'const Timestamp' lvalue .expiry_s 0x5611b0ee6b58
|           `-DeclRefExpr 0x5611b0f04a90 <col:26> 'const TimerSet::heap_element' lvalue ParmVar 0x5611b0ee7010 'b' 'const TimerSet::heap_element &'
|-CXXRecordDecl 0x5611b0ee71e0 <line:51:5, line:55:5> line:51:12 struct heap_place definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5611b0ee72f8 <col:5, col:12> col:12 implicit struct heap_place
| `-CXXMethodDecl 0x5611b0ee7518 <line:52:2, line:54:2> line:52:14 operator() 'void (TimerSet::heap_element *, TimerSet::heap_element *)' inline
|   |-ParmVarDecl 0x5611b0ee7398 <col:25, col:39> col:39 used begin 'TimerSet::heap_element *'
|   |-ParmVarDecl 0x5611b0ee7410 <col:46, col:60> col:60 used t 'TimerSet::heap_element *'
|   `-CompoundStmt 0x5611b0f04d68 <col:63, line:54:2>
|     `-BinaryOperator 0x5611b0f04d48 <line:53:6, col:39> 'int' lvalue '='
|       |-MemberExpr 0x5611b0f04bf8 <col:6, col:12> 'int' lvalue ->_schedpos1 0x5611b0ed6308
|       | `-ImplicitCastExpr 0x5611b0f04be0 <col:6, col:9> 'Timer *' <LValueToRValue>
|       |   `-MemberExpr 0x5611b0f04bb0 <col:6, col:9> 'Timer *' lvalue ->t 0x5611b0ee6bb8
|       |     `-ImplicitCastExpr 0x5611b0f04b98 <col:6> 'TimerSet::heap_element *' <LValueToRValue>
|       |       `-DeclRefExpr 0x5611b0f04b78 <col:6> 'TimerSet::heap_element *' lvalue ParmVar 0x5611b0ee7410 't' 'TimerSet::heap_element *'
|       `-ImplicitCastExpr 0x5611b0f04d30 <col:25, col:39> 'int' <IntegralCast>
|         `-BinaryOperator 0x5611b0f04d10 <col:25, col:39> 'long' '+'
|           |-ParenExpr 0x5611b0f04cb8 <col:25, col:35> 'long'
|           | `-BinaryOperator 0x5611b0f04c98 <col:26, col:30> 'long' '-'
|           |   |-ImplicitCastExpr 0x5611b0f04c68 <col:26> 'TimerSet::heap_element *' <LValueToRValue>
|           |   | `-DeclRefExpr 0x5611b0f04c28 <col:26> 'TimerSet::heap_element *' lvalue ParmVar 0x5611b0ee7410 't' 'TimerSet::heap_element *'
|           |   `-ImplicitCastExpr 0x5611b0f04c80 <col:30> 'TimerSet::heap_element *' <LValueToRValue>
|           |     `-DeclRefExpr 0x5611b0f04c48 <col:30> 'TimerSet::heap_element *' lvalue ParmVar 0x5611b0ee7398 'begin' 'TimerSet::heap_element *'
|           `-ImplicitCastExpr 0x5611b0f04cf8 <col:39> 'long' <IntegralCast>
|             `-IntegerLiteral 0x5611b0f04cd8 <col:39> 'int' 1
|-FieldDecl 0x5611b0ee7610 <line:58:5, col:15> col:15 referenced _timer_expiry 'Timestamp'
| `-AlignedAttr 0x5611b0ee7680 <col:44, col:53> aligned
|   `-ConstantExpr 0x5611b0ee7660 <col:52> 'int' Int: 8
|     `-IntegerLiteral 0x5611b0ee75e0 <col:52> 'int' 8
|-FieldDecl 0x5611b0ee76f8 <line:60:5, col:14> col:14 referenced _max_timer_stride 'unsigned int'
|-FieldDecl 0x5611b0ee7760 <line:61:5, col:14> col:14 referenced _timer_stride 'unsigned int'
|-FieldDecl 0x5611b0ee77c8 <line:62:5, col:14> col:14 _timer_count 'unsigned int'
|-FieldDecl 0x5611b0efc600 <line:63:5, col:26> col:26 referenced _timer_heap 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>'
|-FieldDecl 0x5611b0f03620 <line:64:5, col:21> col:21 _timer_runchunk 'Vector<Timer *>':'Vector<Timer *>'
|-FieldDecl 0x5611b0f03680 <line:65:5, col:20> col:20 _timer_lock 'SimpleSpinlock'
|-FieldDecl 0x5611b0f036e0 <line:71:5, col:15> col:15 _timer_check 'Timestamp'
|-FieldDecl 0x5611b0f03740 <line:72:5, col:14> col:14 _timer_check_reports 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0f03830 <line:74:5, col:38> col:17 run_one_timer 'void (Timer *)' inline
| `-ParmVarDecl 0x5611b0f037a0 <col:31, col:37> col:38 'Timer *'
|-CXXMethodDecl 0x5611b0f038f8 <line:76:5, line:81:5> line:76:10 set_timer_expiry 'void ()'
| `-CompoundStmt 0x5611b0f051c0 <col:29, line:81:5>
|   `-IfStmt 0x5611b0f05198 <line:77:2, line:80:32> has_else
|     |-ImplicitCastExpr 0x5611b0f04e50 <line:77:6, col:23> 'bool' <IntegralToBoolean>
|     | `-CXXMemberCallExpr 0x5611b0f04df0 <col:6, col:23> 'Vector::size_type':'int'
|     |   `-MemberExpr 0x5611b0f04dc0 <col:6, col:18> '<bound member function type>' .size 0x5611b0ef96e8
|     |     `-ImplicitCastExpr 0x5611b0f04e38 <col:6> 'const Vector<TimerSet::heap_element>' lvalue <NoOp>
|     |       `-MemberExpr 0x5611b0f04d90 <col:6> 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>' lvalue ->_timer_heap 0x5611b0efc600
|     |         `-CXXThisExpr 0x5611b0f04d80 <col:6> 'TimerSet *' implicit this
|     |-CXXOperatorCallExpr 0x5611b0f05040 <line:78:6, col:50> 'Timestamp' lvalue
|     | |-ImplicitCastExpr 0x5611b0f05028 <col:20> 'Timestamp &(*)(const Timestamp &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x5611b0f05008 <col:20> 'Timestamp &(const Timestamp &) noexcept' lvalue CXXMethod 0x5611b0e65b00 'operator=' 'Timestamp &(const Timestamp &) noexcept'
|     | |-MemberExpr 0x5611b0f04e78 <col:6> 'Timestamp' lvalue ->_timer_expiry 0x5611b0ee7610
|     | | `-CXXThisExpr 0x5611b0f04e68 <col:6> 'TimerSet *' implicit this
|     | `-ImplicitCastExpr 0x5611b0f04ff0 <col:22, col:50> 'const Timestamp' lvalue <NoOp>
|     |   `-MemberExpr 0x5611b0f04fc0 <col:22, col:50> 'Timestamp' lvalue .expiry_s 0x5611b0ee6b58
|     |     `-CXXMemberCallExpr 0x5611b0f04f98 <col:22, col:48> 'TimerSet::heap_element':'TimerSet::heap_element' lvalue
|     |       |-MemberExpr 0x5611b0f04f68 <col:22, col:34> '<bound member function type>' .unchecked_at 0x5611b0efa788
|     |       | `-MemberExpr 0x5611b0f04eb8 <col:22> 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>' lvalue ->_timer_heap 0x5611b0efc600
|     |       |   `-CXXThisExpr 0x5611b0f04ea8 <col:22> 'TimerSet *' implicit this
|     |       `-IntegerLiteral 0x5611b0f04f48 <col:47> 'int' 0
|     `-ExprWithCleanups 0x5611b0f05180 <line:80:6, col:32> 'Timestamp' lvalue
|       `-CXXOperatorCallExpr 0x5611b0f05148 <col:6, col:32> 'Timestamp' lvalue
|         |-ImplicitCastExpr 0x5611b0f05130 <col:20> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5611b0f05110 <col:20> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x5611b0e65fa8 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|         |-MemberExpr 0x5611b0f05088 <col:6> 'Timestamp' lvalue ->_timer_expiry 0x5611b0ee7610
|         | `-CXXThisExpr 0x5611b0f05078 <col:6> 'TimerSet *' implicit this
|         `-MaterializeTemporaryExpr 0x5611b0f050f8 <col:22, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5611b0f050c8 <col:22, col:32> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x5611b0f03a38 <line:82:5, col:37> col:10 check_timer_expiry 'void (Timer *)'
| `-ParmVarDecl 0x5611b0f039a8 <col:29, col:36> col:36 t 'Timer *'
|-CXXMethodDecl 0x5611b0f03b00 <line:84:5, col:29> col:17 used lock_timers 'void ()' inline
|-CXXMethodDecl 0x5611b0f03bc0 <line:85:5, col:37> col:17 attempt_lock_timers 'bool ()' inline
|-CXXMethodDecl 0x5611b0f03c80 <line:86:5, col:31> col:17 used unlock_timers 'void ()' inline
|-FriendDecl 0x5611b0f03d70 <line:88:5, col:18> col:12 'class Timer':'Timer'
|-CXXConstructorDecl 0x5611b0f03dd8 <line:12:7> col:7 implicit TimerSet 'void (const TimerSet &)' inline default noexcept-unevaluated 0x5611b0f03dd8
| `-ParmVarDecl 0x5611b0f03ee8 <col:7> col:7 'const TimerSet &'
|-CXXConstructorDecl 0x5611b0f03f88 <col:7> col:7 implicit TimerSet 'void (TimerSet &&)' inline default noexcept-unevaluated 0x5611b0f03f88
| `-ParmVarDecl 0x5611b0f04098 <col:7> col:7 'TimerSet &&'
|-CXXMethodDecl 0x5611b0f04138 <col:7> col:7 implicit operator= 'TimerSet &(const TimerSet &)' inline default noexcept-unevaluated 0x5611b0f04138
| `-ParmVarDecl 0x5611b0f04248 <col:7> col:7 'const TimerSet &'
|-CXXMethodDecl 0x5611b0f04468 <col:7> col:7 implicit operator= 'TimerSet &(TimerSet &&)' inline default noexcept-unevaluated 0x5611b0f04468
| `-ParmVarDecl 0x5611b0f04578 <col:7> col:7 'TimerSet &&'
`-CXXDestructorDecl 0x5611b0f04610 <col:7> col:7 implicit ~TimerSet 'void ()' inline default noexcept-unevaluated 0x5611b0f04610

Layout: <CGRecordLayout
  LLVMType:%class.TimerSet = type <{ %class.Timestamp, i32, i32, i32, [4 x i8], %class.Vector.13, %class.Vector.14, %class.SimpleSpinlock, [7 x i8], %class.Timestamp, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.TimerSet.base = type <{ %class.Timestamp, i32, i32, i32, [4 x i8], %class.Vector.13, %class.Vector.14, %class.SimpleSpinlock, [7 x i8], %class.Timestamp, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5611b0f2dcb8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'pollfd'
|-CXXRecordDecl 0x5611b0f2dec8 prev 0x5611b0f2dcb8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5611b0f2efa0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<pollfd>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x5611b0f2ef50 'typename array_memory<pollfd>::type' sugar
|   `-TypedefType 0x5611b0f2ef30 'conditional<true, sized_array_memory<8>, typed_array_memory<pollfd> >::type' sugar
|     |-Typedef 0x5611b0f2ede0 'type'
|     `-SubstTemplateTypeParmType 0x5611b0eb7e30 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x5611b0a748b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0a74858 'T'
|       `-RecordType 0x5611b0eb7980 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x5611b0eb7898 'sized_array_memory'
|-FieldDecl 0x5611b0f2f0a0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<pollfd>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x5611b0f2f0f0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5611b0f2f128 <line:118:5, col:15> col:15 value_type 'pollfd':'pollfd'
| `-SubstTemplateTypeParmType 0x5611b0f2df60 'pollfd' sugar
|   |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5611b0b584d8 'T'
|   `-RecordType 0x5611b0f2bd70 'pollfd'
|     `-CXXRecord 0x5611b0f2bce0 'pollfd'
|-TypedefDecl 0x5611b0f2f1e8 <line:119:5, col:16> col:16 reference 'pollfd &'
| `-LValueReferenceType 0x5611b0f2f1b0 'pollfd &'
|   `-SubstTemplateTypeParmType 0x5611b0f2df60 'pollfd' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-RecordType 0x5611b0f2bd70 'pollfd'
|       `-CXXRecord 0x5611b0f2bce0 'pollfd'
|-TypedefDecl 0x5611b0f2f2a8 <line:120:5, col:22> col:22 const_reference 'const pollfd &'
| `-LValueReferenceType 0x5611b0f2f270 'const pollfd &'
|   `-QualType 0x5611b0f2df61 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x5611b0f2df60 'pollfd' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-RecordType 0x5611b0f2bd70 'pollfd'
|         `-CXXRecord 0x5611b0f2bce0 'pollfd'
|-TypedefDecl 0x5611b0f2f338 <line:121:5, col:16> col:16 pointer 'pollfd *'
| `-PointerType 0x5611b0f2f300 'pollfd *'
|   `-SubstTemplateTypeParmType 0x5611b0f2df60 'pollfd' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-RecordType 0x5611b0f2bd70 'pollfd'
|       `-CXXRecord 0x5611b0f2bce0 'pollfd'
|-TypedefDecl 0x5611b0f2f3f8 <line:122:5, col:22> col:22 const_pointer 'const pollfd *'
| `-PointerType 0x5611b0f2f3c0 'const pollfd *'
|   `-QualType 0x5611b0f2df61 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x5611b0f2df60 'pollfd' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-RecordType 0x5611b0f2bd70 'pollfd'
|         `-CXXRecord 0x5611b0f2bce0 'pollfd'
|-TypedefDecl 0x5611b0f2ffd0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<pollfd>::type':'pollfd'
| `-ElaboratedType 0x5611b0f2ff80 'typename fast_argument<pollfd>::type' sugar
|   `-TypedefType 0x5611b0f2ff60 'fast_argument<pollfd, false>::type' sugar
|     |-Typedef 0x5611b0f2fef0 'type'
|     `-SubstTemplateTypeParmType 0x5611b0f2fcb0 'pollfd' sugar
|       |-TemplateTypeParmType 0x5611b0a7eca0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0a7ec50 'T'
|       `-RecordType 0x5611b0f2bd70 'pollfd'
|         `-CXXRecord 0x5611b0f2bce0 'pollfd'
|-TypedefDecl 0x5611b0f30038 <line:126:5, col:22> col:22 const_access_type 'const pollfd &'
| `-LValueReferenceType 0x5611b0f2f270 'const pollfd &'
|   `-QualType 0x5611b0f2df61 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x5611b0f2df60 'pollfd' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-RecordType 0x5611b0f2bd70 'pollfd'
|         `-CXXRecord 0x5611b0f2bce0 'pollfd'
|-TypedefDecl 0x5611b0f30090 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0f300f8 <line:130:5, col:16> col:16 iterator 'pollfd *'
| `-PointerType 0x5611b0f2f300 'pollfd *'
|   `-SubstTemplateTypeParmType 0x5611b0f2df60 'pollfd' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-RecordType 0x5611b0f2bd70 'pollfd'
|       `-CXXRecord 0x5611b0f2bce0 'pollfd'
|-TypedefDecl 0x5611b0f30160 <line:131:5, col:22> col:22 const_iterator 'const pollfd *'
| `-PointerType 0x5611b0f2f3c0 'const pollfd *'
|   `-QualType 0x5611b0f2df61 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x5611b0f2df60 'pollfd' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-RecordType 0x5611b0f2bd70 'pollfd'
|         `-CXXRecord 0x5611b0f2bce0 'pollfd'
|-EnumDecl 0x5611b0f301b8 <line:134:5> col:5
| `-EnumConstantDecl 0x5611b0f302b0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<pollfd>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5611b0f30290 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5611b0b59f18 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5611b0b59ef0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5611b0b59ed0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5611b0f30338 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5611b0f305c8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0f303f0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0f30490 <col:41, col:61> col:61 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXConstructorDecl 0x5611b0f30888 <line:139:5, col:37> col:12 Vector 'void (const Vector<pollfd> &)' inline
| `-ParmVarDecl 0x5611b0f30770 <col:19, col:36> col:36 x 'const Vector<pollfd> &'
|-CXXConstructorDecl 0x5611b0f30b48 <line:141:5, col:32> col:12 Vector 'void (Vector<pollfd> &&)' inline
| `-ParmVarDecl 0x5611b0f30a30 <col:19, col:31> col:31 x 'Vector<pollfd> &&'
|-CXXMethodDecl 0x5611b0f30f20 <line:144:5, col:51> col:23 operator= 'Vector<pollfd> &(const Vector<pollfd> &)' inline
| `-ParmVarDecl 0x5611b0f30d70 <col:33, col:50> col:50 x 'const Vector<pollfd> &'
|-CXXMethodDecl 0x5611b0f31230 <line:146:5, col:46> col:23 operator= 'Vector<pollfd> &(Vector<pollfd> &&)' inline
| `-ParmVarDecl 0x5611b0f31110 <col:33, col:45> col:45 x 'Vector<pollfd> &&'
|-CXXMethodDecl 0x5611b0f31520 <line:148:5, col:70> col:23 assign 'Vector<pollfd> &(Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0f31368 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0f313e0 <col:43, col:69> col:63 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x5611b0f31678 <line:150:5, col:55> col:49 begin 'Vector<pollfd>::iterator ()'
| |-NoInlineAttr 0x5611b0f31758 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f317b0 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f317f8 <line:151:5, col:53> col:49 end 'Vector<pollfd>::iterator ()'
| |-NoInlineAttr 0x5611b0f318a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f31900 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f319c8 <line:152:5, col:63> col:55 begin 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f31a78 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f31ad0 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f31b18 <line:153:5, col:61> col:55 end 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f31bc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f31c20 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f31c68 <line:154:5, col:64> col:55 cbegin 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f31d18 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f31d70 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f31db8 <line:155:5, col:62> col:55 cend 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f31e68 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f31ec0 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f31ee8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5611b0f31f98 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5611b0f32048 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5611b0f32208 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0f320f8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0f32170 <col:37, col:63> col:57 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x5611b0f32358 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0f322c8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f32508 <line:163:5, col:65> col:43 operator[] 'pollfd &(Vector::size_type)'
| |-ParmVarDecl 0x5611b0f32410 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5611b0f325c0 <col:20>
| `-OptimizeNoneAttr 0x5611b0f32618 <col:30>
|-CXXMethodDecl 0x5611b0f32738 <line:164:5, col:73> col:49 operator[] 'const pollfd &(Vector::size_type) const'
| |-ParmVarDecl 0x5611b0f32640 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5611b0f327f0 <col:20>
| `-OptimizeNoneAttr 0x5611b0f32848 <col:30>
|-CXXMethodDecl 0x5611b0f32900 <line:165:5, col:29> col:15 at 'pollfd &(Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0f32870 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f32a48 <line:166:5, col:37> col:21 at 'const pollfd &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5611b0f329b8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f32b78 <line:167:5, col:21> col:15 front 'pollfd &()' inline
|-CXXMethodDecl 0x5611b0f32ca8 <line:168:5, col:29> col:21 front 'const pollfd &() const' inline
|-CXXMethodDecl 0x5611b0f32d78 <line:169:5, col:20> col:15 back 'pollfd &()' inline
|-CXXMethodDecl 0x5611b0f32e48 <line:170:5, col:28> col:21 back 'const pollfd &() const' inline
|-CXXMethodDecl 0x5611b0f32f88 <line:172:5, col:39> col:15 unchecked_at 'pollfd &(Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0f32ef8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f330d0 <line:173:5, col:47> col:21 unchecked_at 'const pollfd &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5611b0f33040 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f33218 <line:174:5, col:59> col:15 at_u 'pollfd &(Vector::size_type)' inline
| |-ParmVarDecl 0x5611b0f33188 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5611b0f332d0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5611b0f333d0 <line:175:5, col:71> col:21 at_u 'const pollfd &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5611b0f33340 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5611b0f33488 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5611b0f33548 <line:177:5, col:20> col:15 data 'pollfd *()' inline
|-CXXMethodDecl 0x5611b0f33648 <line:178:5, col:28> col:21 data 'const pollfd *() const' inline
|-CXXMethodDecl 0x5611b0f337f8 <line:180:5, col:48> col:17 push_back 'void (Vector<pollfd>::value_argument_type)' inline
| `-ParmVarDecl 0x5611b0f33708 <col:27, col:47> col:47 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-FunctionTemplateDecl 0x5611b0f33fb8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5611b0f338b0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<pollfd>':'fast_argument<pollfd, false>'
| `-CXXMethodDecl 0x5611b0f33f18 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (pollfd &&)' inline
|   `-ParmVarDecl 0x5611b0f33e18 <col:58, col:62> col:62 v 'pollfd &&'
|-CXXMethodDecl 0x5611b0f34098 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5611b0f341e8 <line:186:5, col:49> col:17 push_front 'void (Vector<pollfd>::value_argument_type)' inline
| `-ParmVarDecl 0x5611b0f34158 <col:28, col:48> col:48 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x5611b0f342a0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5611b0f344e8 <line:189:5, col:62> col:21 insert 'Vector<pollfd>::iterator (Vector<pollfd>::iterator, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0f34360 <col:28, col:37> col:37 it 'Vector<pollfd>::iterator':'pollfd *'
| `-ParmVarDecl 0x5611b0f343d8 <col:41, col:61> col:61 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x5611b0f346a8 <line:190:5, col:38> col:21 erase 'Vector<pollfd>::iterator (Vector<pollfd>::iterator)' inline
| `-ParmVarDecl 0x5611b0f345b8 <col:27, col:36> col:36 it 'Vector<pollfd>::iterator':'pollfd *'
|-CXXMethodDecl 0x5611b0f348f8 <line:191:5, col:49> col:21 erase 'Vector<pollfd>::iterator (Vector<pollfd>::iterator, Vector<pollfd>::iterator)' inline
| |-ParmVarDecl 0x5611b0f34770 <col:27, col:36> col:36 a 'Vector<pollfd>::iterator':'pollfd *'
| `-ParmVarDecl 0x5611b0f347e8 <col:39, col:48> col:48 b 'Vector<pollfd>::iterator':'pollfd *'
|-CXXMethodDecl 0x5611b0f349b8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5611b0f34c18 <line:195:5, col:34> col:17 swap 'void (Vector<pollfd> &)' inline
| `-ParmVarDecl 0x5611b0f34b20 <col:22, col:33> col:33 x 'Vector<pollfd> &'
`-CXXDestructorDecl 0x5611b0f34ce8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5611b0f34ce8

Layout: <CGRecordLayout
  LLVMType:%class.Vector.15 = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector.15 = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5611b0f361d0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<24>'
|-CXXRecordDecl 0x5611b0f363a8 prev 0x5611b0f361d0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5611b0f36438 <col:46, col:52> col:46 public
|-TypedefDecl 0x5611b0f36460 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0f38030 <line:13:5, col:31> col:31 type 'typename sized_array_memory<24>::type':'char_array<24>'
| `-ElaboratedType 0x5611b0f37fe0 'typename sized_array_memory<24>::type' sugar
|   `-TypedefType 0x5611b0f36910 'sized_array_memory<24>::type' sugar
|     |-Typedef 0x5611b0f36810 'type'
|     `-TemplateSpecializationType 0x5611b0f367a0 'char_array<24UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5611b0f36680 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 24
|       |   `-SubstNonTypeTemplateParmExpr 0x5611b0f36660 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5611b0f36640 <col:24> 'unsigned long' 24
|       `-RecordType 0x5611b0f36780 'char_array<24>'
|         `-ClassTemplateSpecialization 0x5611b0f366a0 'char_array'
|-TypedefDecl 0x5611b0f380e8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<24> >::type *'
| `-PointerType 0x5611b0f380b0 'vector_memory<sized_array_memory<24> >::type *'
|   `-TypedefType 0x5611b0f38090 'vector_memory<sized_array_memory<24> >::type' sugar
|     |-Typedef 0x5611b0f38030 'type'
|     `-ElaboratedType 0x5611b0f37fe0 'typename sized_array_memory<24>::type' sugar
|       `-TypedefType 0x5611b0f36910 'sized_array_memory<24>::type' sugar
|         |-Typedef 0x5611b0f36810 'type'
|         `-TemplateSpecializationType 0x5611b0f367a0 'char_array<24UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5611b0f36680 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 24
|           |   `-SubstNonTypeTemplateParmExpr 0x5611b0f36660 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5611b0f36640 <col:24> 'unsigned long' 24
|           `-RecordType 0x5611b0f36780 'char_array<24>'
|             `-ClassTemplateSpecialization 0x5611b0f366a0 'char_array'
|-CXXMethodDecl 0x5611b0f38268 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<24> >::type *) const' inline
| `-ParmVarDecl 0x5611b0f38178 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXConstructorDecl 0x5611b0f38358 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5611b0f38438 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5611b0f38438
|-CXXMethodDecl 0x5611b0f38708 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<24> > &)'
| `-ParmVarDecl 0x5611b0f38610 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<24> > &'
|-CXXMethodDecl 0x5611b0f38948 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x5611b0f387c0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5611b0f38838 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5611b0f38b18 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x5611b0f38a08 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5611b0f38a80 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5611b0f38c78 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<24> >::iterator ()'
|-CXXMethodDecl 0x5611b0f38d48 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<24> >::iterator ()'
|-CXXMethodDecl 0x5611b0f38fd8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<24> >::iterator (vector_memory<sized_array_memory<24> >::iterator, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x5611b0f38e08 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
| `-ParmVarDecl 0x5611b0f38e80 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5611b0f39238 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<24> >::iterator (vector_memory<sized_array_memory<24> >::iterator, vector_memory<sized_array_memory<24> >::iterator)'
| |-ParmVarDecl 0x5611b0f390a8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
| `-ParmVarDecl 0x5611b0f39120 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5611b0f393f8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<24> >::type *)' inline
| `-ParmVarDecl 0x5611b0f39308 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5611b0f395b8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<24> >::type *)' inline
| `-ParmVarDecl 0x5611b0f394c0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5611b0f39670 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5611b0f39720 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5611b0f39958 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x5611b0f397d0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5611b0f39848 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5611b0f39bf8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<24> > &)'
| `-ParmVarDecl 0x5611b0f39b00 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<24> > &'
|-FieldDecl 0x5611b0f39cc0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<24> >::type *'
|-FieldDecl 0x5611b0f39d10 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5611b0f39d60 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.17 = type { %struct.char_array.18*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.17 = type { %struct.char_array.18*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5611b0f34e30 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'SelectSet::SelectorInfo'
|-CXXRecordDecl 0x5611b0f35038 prev 0x5611b0f34e30 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5611b0f36140 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<SelectorInfo>::type':'sized_array_memory<24>'
| `-ElaboratedType 0x5611b0f360f0 'typename array_memory<SelectorInfo>::type' sugar
|   `-TypedefType 0x5611b0f360d0 'conditional<true, sized_array_memory<24>, typed_array_memory<SelectSet::SelectorInfo> >::type' sugar
|     |-Typedef 0x5611b0f35f80 'type'
|     `-SubstTemplateTypeParmType 0x5611b0f35da0 'sized_array_memory<24>' sugar
|       |-TemplateTypeParmType 0x5611b0a748b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0a74858 'T'
|       `-RecordType 0x5611b0bd8970 'sized_array_memory<24>'
|         `-ClassTemplateSpecialization 0x5611b0bd8888 'sized_array_memory'
|-FieldDecl 0x5611b0f39db0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<SelectSet::SelectorInfo>::array_memory_type>':'vector_memory<sized_array_memory<24> >' mutable
|-AccessSpecDecl 0x5611b0f39e00 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5611b0f39e38 <line:118:5, col:15> col:15 value_type 'SelectSet::SelectorInfo':'SelectSet::SelectorInfo'
| `-SubstTemplateTypeParmType 0x5611b0f350d0 'SelectSet::SelectorInfo' sugar
|   |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5611b0b584d8 'T'
|   `-RecordType 0x5611b0f2d820 'SelectSet::SelectorInfo'
|     `-CXXRecord 0x5611b0f2d790 'SelectorInfo'
|-TypedefDecl 0x5611b0f39ef8 <line:119:5, col:16> col:16 reference 'SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x5611b0f39ec0 'SelectSet::SelectorInfo &'
|   `-SubstTemplateTypeParmType 0x5611b0f350d0 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-RecordType 0x5611b0f2d820 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x5611b0f2d790 'SelectorInfo'
|-TypedefDecl 0x5611b0f39fb8 <line:120:5, col:22> col:22 const_reference 'const SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x5611b0f39f80 'const SelectSet::SelectorInfo &'
|   `-QualType 0x5611b0f350d1 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x5611b0f350d0 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-RecordType 0x5611b0f2d820 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x5611b0f2d790 'SelectorInfo'
|-TypedefDecl 0x5611b0f3a048 <line:121:5, col:16> col:16 pointer 'SelectSet::SelectorInfo *'
| `-PointerType 0x5611b0f3a010 'SelectSet::SelectorInfo *'
|   `-SubstTemplateTypeParmType 0x5611b0f350d0 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-RecordType 0x5611b0f2d820 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x5611b0f2d790 'SelectorInfo'
|-TypedefDecl 0x5611b0f3a108 <line:122:5, col:22> col:22 const_pointer 'const SelectSet::SelectorInfo *'
| `-PointerType 0x5611b0f3a0d0 'const SelectSet::SelectorInfo *'
|   `-QualType 0x5611b0f350d1 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x5611b0f350d0 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-RecordType 0x5611b0f2d820 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x5611b0f2d790 'SelectorInfo'
|-TypedefDecl 0x5611b0f3ad60 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<SelectorInfo>::type':'const SelectSet::SelectorInfo &'
| `-ElaboratedType 0x5611b0f3ad10 'typename fast_argument<SelectorInfo>::type' sugar
|   `-TypedefType 0x5611b0f3acf0 'fast_argument<SelectSet::SelectorInfo, true>::type' sugar
|     |-Typedef 0x5611b0f3ac28 'type'
|     `-LValueReferenceType 0x5611b0f3abf0 'const SelectSet::SelectorInfo &'
|       `-QualType 0x5611b0f3a991 'const SelectSet::SelectorInfo' const
|         `-SubstTemplateTypeParmType 0x5611b0f3a990 'SelectSet::SelectorInfo' sugar
|           |-TemplateTypeParmType 0x5611b0a7d360 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5611b0a7d308 'T'
|           `-RecordType 0x5611b0f2d820 'SelectSet::SelectorInfo'
|             `-CXXRecord 0x5611b0f2d790 'SelectorInfo'
|-TypedefDecl 0x5611b0f3adc8 <line:126:5, col:22> col:22 const_access_type 'const SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x5611b0f39f80 'const SelectSet::SelectorInfo &'
|   `-QualType 0x5611b0f350d1 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x5611b0f350d0 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-RecordType 0x5611b0f2d820 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x5611b0f2d790 'SelectorInfo'
|-TypedefDecl 0x5611b0f3ae20 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5611b0855580 'int'
|-TypedefDecl 0x5611b0f3ae88 <line:130:5, col:16> col:16 iterator 'SelectSet::SelectorInfo *'
| `-PointerType 0x5611b0f3a010 'SelectSet::SelectorInfo *'
|   `-SubstTemplateTypeParmType 0x5611b0f350d0 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5611b0b584d8 'T'
|     `-RecordType 0x5611b0f2d820 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x5611b0f2d790 'SelectorInfo'
|-TypedefDecl 0x5611b0f3aef0 <line:131:5, col:22> col:22 const_iterator 'const SelectSet::SelectorInfo *'
| `-PointerType 0x5611b0f3a0d0 'const SelectSet::SelectorInfo *'
|   `-QualType 0x5611b0f350d1 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x5611b0f350d0 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x5611b0b58530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5611b0b584d8 'T'
|       `-RecordType 0x5611b0f2d820 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x5611b0f2d790 'SelectorInfo'
|-EnumDecl 0x5611b0f3af48 <line:134:5> col:5
| `-EnumConstantDecl 0x5611b0f3b040 <col:12, col:40> col:12 RESERVE_GROW 'Vector<SelectSet::SelectorInfo>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5611b0f3b020 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5611b0b59f18 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5611b0b59ef0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5611b0b59ed0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5611b0f3b0c8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5611b0f3b358 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0f3b180 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0f3b220 <col:41, col:61> col:61 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXConstructorDecl 0x5611b0f3b618 <line:139:5, col:37> col:12 Vector 'void (const Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x5611b0f3b500 <col:19, col:36> col:36 x 'const Vector<SelectSet::SelectorInfo> &'
|-CXXConstructorDecl 0x5611b0f3b8d8 <line:141:5, col:32> col:12 Vector 'void (Vector<SelectSet::SelectorInfo> &&)' inline
| `-ParmVarDecl 0x5611b0f3b7c0 <col:19, col:31> col:31 x 'Vector<SelectSet::SelectorInfo> &&'
|-CXXMethodDecl 0x5611b0f3bc20 <line:144:5, col:51> col:23 operator= 'Vector<SelectSet::SelectorInfo> &(const Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x5611b0f3bb00 <col:33, col:50> col:50 x 'const Vector<SelectSet::SelectorInfo> &'
|-CXXMethodDecl 0x5611b0f3bf30 <line:146:5, col:46> col:23 operator= 'Vector<SelectSet::SelectorInfo> &(Vector<SelectSet::SelectorInfo> &&)' inline
| `-ParmVarDecl 0x5611b0f3be10 <col:33, col:45> col:45 x 'Vector<SelectSet::SelectorInfo> &&'
|-CXXMethodDecl 0x5611b0f3c220 <line:148:5, col:70> col:23 assign 'Vector<SelectSet::SelectorInfo> &(Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0f3c068 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0f3c0e0 <col:43, col:69> col:63 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x5611b0f3c378 <line:150:5, col:55> col:49 begin 'Vector<SelectSet::SelectorInfo>::iterator ()'
| |-NoInlineAttr 0x5611b0f3c458 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f3c4b0 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f3c4f8 <line:151:5, col:53> col:49 end 'Vector<SelectSet::SelectorInfo>::iterator ()'
| |-NoInlineAttr 0x5611b0f3c5a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f3c600 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f3c6c8 <line:152:5, col:63> col:55 begin 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f3c778 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f3c7d0 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f3c818 <line:153:5, col:61> col:55 end 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f3c8c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f3c920 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f3c968 <line:154:5, col:64> col:55 cbegin 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f3ca18 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f3ca70 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f3cab8 <line:155:5, col:62> col:55 cend 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x5611b0f3cb68 <col:20> Inherited
| `-OptimizeNoneAttr 0x5611b0f3cbc0 <col:30> Inherited
|-CXXMethodDecl 0x5611b0f3cbe8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5611b0f3cc98 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5611b0f3cd48 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5611b0f3cf08 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0f3cdf8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5611b0f3ce70 <col:37, col:63> col:57 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x5611b0f3d058 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0f3cfc8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f3d208 <line:163:5, col:65> col:43 operator[] 'SelectSet::SelectorInfo &(Vector::size_type)'
| |-ParmVarDecl 0x5611b0f3d110 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5611b0f3d2c0 <col:20>
| `-OptimizeNoneAttr 0x5611b0f3d318 <col:30>
|-CXXMethodDecl 0x5611b0f3d438 <line:164:5, col:73> col:49 operator[] 'const SelectSet::SelectorInfo &(Vector::size_type) const'
| |-ParmVarDecl 0x5611b0f3d340 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5611b0f3d4f0 <col:20>
| `-OptimizeNoneAttr 0x5611b0f3d548 <col:30>
|-CXXMethodDecl 0x5611b0f3d600 <line:165:5, col:29> col:15 at 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0f3d570 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f3d748 <line:166:5, col:37> col:21 at 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5611b0f3d6b8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f3d878 <line:167:5, col:21> col:15 front 'SelectSet::SelectorInfo &()' inline
|-CXXMethodDecl 0x5611b0f3d9a8 <line:168:5, col:29> col:21 front 'const SelectSet::SelectorInfo &() const' inline
|-CXXMethodDecl 0x5611b0f3da78 <line:169:5, col:20> col:15 back 'SelectSet::SelectorInfo &()' inline
|-CXXMethodDecl 0x5611b0f3db48 <line:170:5, col:28> col:21 back 'const SelectSet::SelectorInfo &() const' inline
|-CXXMethodDecl 0x5611b0f3dc88 <line:172:5, col:39> col:15 unchecked_at 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| `-ParmVarDecl 0x5611b0f3dbf8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f3ddd0 <line:173:5, col:47> col:21 unchecked_at 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5611b0f3dd40 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5611b0f3df18 <line:174:5, col:59> col:15 at_u 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| |-ParmVarDecl 0x5611b0f3de88 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5611b0f3dfd0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5611b0f3e0d0 <line:175:5, col:71> col:21 at_u 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5611b0f3e040 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5611b0f3e188 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5611b0f3e248 <line:177:5, col:20> col:15 data 'SelectSet::SelectorInfo *()' inline
|-CXXMethodDecl 0x5611b0f3e348 <line:178:5, col:28> col:21 data 'const SelectSet::SelectorInfo *() const' inline
|-CXXMethodDecl 0x5611b0f3e4f8 <line:180:5, col:48> col:17 push_back 'void (Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| `-ParmVarDecl 0x5611b0f3e408 <col:27, col:47> col:47 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-FunctionTemplateDecl 0x5611b0f3ecb8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5611b0f3e5b0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<SelectSet::SelectorInfo>':'fast_argument<SelectSet::SelectorInfo, true>'
| `-CXXMethodDecl 0x5611b0f3ec18 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (SelectSet::SelectorInfo &&)' inline
|   `-ParmVarDecl 0x5611b0f3eb18 <col:58, col:62> col:62 v 'SelectSet::SelectorInfo &&'
|-CXXMethodDecl 0x5611b0f3ed98 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5611b0f3eee8 <line:186:5, col:49> col:17 push_front 'void (Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| `-ParmVarDecl 0x5611b0f3ee58 <col:28, col:48> col:48 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x5611b0f3efa0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5611b0f3f1e8 <line:189:5, col:62> col:21 insert 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x5611b0f3f060 <col:28, col:37> col:37 it 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
| `-ParmVarDecl 0x5611b0f3f0d8 <col:41, col:61> col:61 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x5611b0f3f3a8 <line:190:5, col:38> col:21 erase 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator)' inline
| `-ParmVarDecl 0x5611b0f3f2b8 <col:27, col:36> col:36 it 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
|-CXXMethodDecl 0x5611b0f3f5f8 <line:191:5, col:49> col:21 erase 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator, Vector<SelectSet::SelectorInfo>::iterator)' inline
| |-ParmVarDecl 0x5611b0f3f470 <col:27, col:36> col:36 a 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
| `-ParmVarDecl 0x5611b0f3f4e8 <col:39, col:48> col:48 b 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
|-CXXMethodDecl 0x5611b0f3f6b8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5611b0f3f918 <line:195:5, col:34> col:17 swap 'void (Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x5611b0f3f820 <col:22, col:33> col:33 x 'Vector<SelectSet::SelectorInfo> &'
`-CXXDestructorDecl 0x5611b0f3f9e8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5611b0f3f9e8

Layout: <CGRecordLayout
  LLVMType:%class.Vector.16 = type { %class.vector_memory.17 }
  NonVirtualBaseLLVMType:%class.Vector.16 = type { %class.vector_memory.17 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0f2c970 <../dummy_inc/click/selectset.hh:36:1, line:109:1> line:36:7 referenced class SelectSet definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5611b0f2ca88 <col:1, col:7> col:7 implicit referenced class SelectSet
|-AccessSpecDecl 0x5611b0f2cb18 <col:19, col:25> col:19 public
|-CXXConstructorDecl 0x5611b0f2cba0 <line:38:5, col:15> col:5 SelectSet 'void ()'
|-CXXDestructorDecl 0x5611b0f2cc90 <line:39:5, col:16> col:5 ~SelectSet 'void ()' noexcept-unevaluated 0x5611b0f2cc90
|-CXXMethodDecl 0x5611b0f2cd90 <line:41:5, col:21> col:10 initialize 'void ()'
|-CXXMethodDecl 0x5611b0f2d030 <line:43:5, col:54> col:9 add_select 'int (int, Element *, int)'
| |-ParmVarDecl 0x5611b0f2ce48 <col:20, col:24> col:24 fd 'int'
| |-ParmVarDecl 0x5611b0f2cec0 <col:28, col:37> col:37 element 'Element *'
| `-ParmVarDecl 0x5611b0f2cf40 <col:46, col:50> col:50 mask 'int'
|-CXXMethodDecl 0x5611b0f2d2a0 <line:44:5, col:57> col:9 remove_select 'int (int, Element *, int)'
| |-ParmVarDecl 0x5611b0f2d100 <col:23, col:27> col:27 fd 'int'
| |-ParmVarDecl 0x5611b0f2d178 <col:31, col:40> col:40 element 'Element *'
| `-ParmVarDecl 0x5611b0f2d1f8 <col:49, col:53> col:53 mask 'int'
|-CXXMethodDecl 0x5611b0f2d3f8 <line:46:5, col:42> col:10 run_selects 'void (RouterThread *)'
| `-ParmVarDecl 0x5611b0f2d368 <col:22, col:36> col:36 thread 'RouterThread *'
|-CXXMethodDecl 0x5611b0f2d4c0 <line:47:5, line:50:5> line:47:17 used wake_immediate 'void ()' inline
| `-CompoundStmt 0x5611b0f41108 <col:34, line:50:5>
|   |-BinaryOperator 0x5611b0f40a68 <line:48:2, col:23> 'volatile bool' lvalue '='
|   | |-MemberExpr 0x5611b0f40a28 <col:2> 'volatile bool' lvalue ->_wake_pipe_pending 0x5611b0f2dc48
|   | | `-CXXThisExpr 0x5611b0f40a18 <col:2> 'SelectSet *' implicit this
|   | `-CXXBoolLiteralExpr 0x5611b0f40a58 <col:23> 'bool' true
|   `-CallExpr 0x5611b0f410e0 <line:49:2, col:43> 'void'
|     |-ImplicitCastExpr 0x5611b0f410c8 <col:2> 'void (*)(long)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5611b0f41040 <col:2> 'void (long)' lvalue Function 0x5611b0f40f40 'ignore_result' 'void (long)' (FunctionTemplate 0x5611b0a9ada8 'ignore_result')
|     `-CallExpr 0x5611b0f40c80 <col:16, col:42> 'ssize_t':'long'
|       |-ImplicitCastExpr 0x5611b0f40c68 <col:16> 'ssize_t (*)(int, const void *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5611b0f40be8 <col:16> 'ssize_t (int, const void *, size_t)' lvalue Function 0x5611b0f081e8 'write' 'ssize_t (int, const void *, size_t)'
|       |-ImplicitCastExpr 0x5611b0f40cb8 <col:22, col:34> 'int' <LValueToRValue>
|       | `-ArraySubscriptExpr 0x5611b0f40b90 <col:22, col:34> 'int' lvalue
|       |   |-ImplicitCastExpr 0x5611b0f40b78 <col:22> 'int *' <ArrayToPointerDecay>
|       |   | `-MemberExpr 0x5611b0f40b28 <col:22> 'int [2]' lvalue ->_wake_pipe 0x5611b0f2dbe8
|       |   |   `-CXXThisExpr 0x5611b0f40b18 <col:22> 'SelectSet *' implicit this
|       |   `-IntegerLiteral 0x5611b0f40b58 <col:33> 'int' 1
|       |-ImplicitCastExpr 0x5611b0f40ce8 <col:37> 'const void *' <BitCast>
|       | `-ImplicitCastExpr 0x5611b0f40cd0 <col:37> 'const char *' <ArrayToPointerDecay>
|       |   `-StringLiteral 0x5611b0f40bb0 <col:37> 'const char [1]' lvalue ""
|       `-ImplicitCastExpr 0x5611b0f40d00 <col:41> 'size_t':'unsigned long' <IntegralCast>
|         `-IntegerLiteral 0x5611b0f40bc8 <col:41> 'int' 1
|-CXXMethodDecl 0x5611b0f2d600 <line:52:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x5611b0f2d570 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x5611b0f2d6c8 <line:54:5, col:23> col:17 fence 'void ()' inline
|-AccessSpecDecl 0x5611b0f2d768 <line:56:3, col:10> col:3 private
|-CXXRecordDecl 0x5611b0f2d790 <line:58:5, line:66:5> line:58:12 referenced struct SelectorInfo definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5611b0f2d8a8 <col:5, col:12> col:12 implicit referenced struct SelectorInfo
| |-FieldDecl 0x5611b0f2d948 <line:59:2, col:11> col:11 read 'Element *'
| |-FieldDecl 0x5611b0f2d9a8 <line:60:2, col:11> col:11 write 'Element *'
| |-FieldDecl 0x5611b0f2da10 <line:61:2, col:6> col:6 pollfd 'int'
| `-CXXConstructorDecl 0x5611b0f2dac0 <line:62:2, line:65:2> line:62:2 SelectorInfo 'void ()'
|   |-CXXCtorInitializer Field 0x5611b0f2d948 'read' 'Element *'
|   | `-ImplicitCastExpr 0x5611b0f41168 <line:63:13> 'Element *' <NullToPointer>
|   |   `-IntegerLiteral 0x5611b0f41128 <col:13> 'int' 0
|   |-CXXCtorInitializer Field 0x5611b0f2d9a8 'write' 'Element *'
|   | `-ImplicitCastExpr 0x5611b0f411e8 <col:23> 'Element *' <NullToPointer>
|   |   `-IntegerLiteral 0x5611b0f411a8 <col:23> 'int' 0
|   |-CXXCtorInitializer Field 0x5611b0f2da10 'pollfd' 'int'
|   | `-UnaryOperator 0x5611b0f41248 <col:34, col:35> 'int' prefix '-'
|   |   `-IntegerLiteral 0x5611b0f41228 <col:35> 'int' 1
|   `-CompoundStmt 0x5611b0f412c0 <line:64:2, line:65:2>
|-FieldDecl 0x5611b0f2dbe8 <line:68:5, col:21> col:9 referenced _wake_pipe 'int [2]'
|-FieldDecl 0x5611b0f2dc48 <line:69:5, col:19> col:19 referenced _wake_pipe_pending 'volatile bool'
|-FieldDecl 0x5611b0f34dd0 <line:82:5, col:27> col:27 _pollfds 'Vector<struct pollfd>':'Vector<pollfd>'
|-FieldDecl 0x5611b0f3fad0 <line:83:5, col:26> col:26 _selinfo 'Vector<SelectSet::SelectorInfo>':'Vector<SelectSet::SelectorInfo>'
|-CXXMethodDecl 0x5611b0f3fd08 <line:89:5, col:63> col:10 register_select 'void (int, bool, bool)'
| |-ParmVarDecl 0x5611b0f3fb38 <col:26, col:30> col:30 fd 'int'
| |-ParmVarDecl 0x5611b0f3fbb0 <col:34, col:39> col:39 add_read 'bool'
| `-ParmVarDecl 0x5611b0f3fc28 <col:49, col:54> col:54 add_write 'bool'
|-CXXMethodDecl 0x5611b0f3fef0 <line:90:5, col:41> col:10 remove_pollfd 'void (int, int)'
| |-ParmVarDecl 0x5611b0f3fdd8 <col:24, col:28> col:28 pi 'int'
| `-ParmVarDecl 0x5611b0f3fe58 <col:32, col:36> col:36 event 'int'
|-CXXMethodDecl 0x5611b0f40138 <line:91:5, col:49> col:17 call_selected 'void (int, int) const' inline
| |-ParmVarDecl 0x5611b0f3ffb8 <col:31, col:35> col:35 fd 'int'
| `-ParmVarDecl 0x5611b0f40038 <col:39, col:43> col:43 mask 'int'
|-CXXMethodDecl 0x5611b0f40348 <line:92:5, col:63> col:17 post_select 'bool (RouterThread *, bool)' inline
| |-ParmVarDecl 0x5611b0f401f8 <col:29, col:43> col:43 thread 'RouterThread *'
| `-ParmVarDecl 0x5611b0f40270 <col:51, col:56> col:56 acquire 'bool'
|-CXXMethodDecl 0x5611b0f40498 <line:97:5, col:47> col:10 run_selects_poll 'void (RouterThread *)'
| `-ParmVarDecl 0x5611b0f40408 <col:27, col:41> col:41 thread 'RouterThread *'
|-CXXMethodDecl 0x5611b0f40560 <line:102:5, col:22> col:17 used lock 'void ()' inline
|-CXXMethodDecl 0x5611b0f40620 <line:103:5, col:24> col:17 used unlock 'void ()' inline
|-CXXConstructorDecl 0x5611b0f406e8 <line:36:7> col:7 implicit SelectSet 'void (const SelectSet &)' inline default noexcept-unevaluated 0x5611b0f406e8
| `-ParmVarDecl 0x5611b0f407f8 <col:7> col:7 'const SelectSet &'
`-CXXMethodDecl 0x5611b0f40898 <col:7> col:7 implicit operator= 'SelectSet &(const SelectSet &)' inline default noexcept-unevaluated 0x5611b0f40898
  `-ParmVarDecl 0x5611b0f409a8 <col:7> col:7 'const SelectSet &'

Layout: <CGRecordLayout
  LLVMType:%class.SelectSet = type { [2 x i32], i8, %class.Vector.15, %class.Vector.16 }
  NonVirtualBaseLLVMType:%class.SelectSet = type { [2 x i32], i8, %class.Vector.15, %class.Vector.16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0ecbe08 <../dummy_inc/click/sync.hh:46:1, line:64:1> line:46:7 referenced class Spinlock definition
|-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5611b0ecbf28 <col:1, col:7> col:7 implicit referenced class Spinlock
|-AccessSpecDecl 0x5611b0ecbfb8 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x5611b0ecc040 <line:48:5, col:21> col:12 Spinlock 'void ()' inline
|-CXXDestructorDecl 0x5611b0ecc130 <line:49:5, col:22> col:12 ~Spinlock 'void () noexcept' inline
|-CXXMethodDecl 0x5611b0ecc230 <line:51:5, col:25> col:17 used acquire 'void ()' inline
|-CXXMethodDecl 0x5611b0ecc2f0 <line:52:5, col:25> col:17 used release 'void ()' inline
|-CXXMethodDecl 0x5611b0ecc3b0 <line:53:5, col:25> col:17 attempt 'bool ()' inline
|-CXXMethodDecl 0x5611b0ecc498 <line:54:5, col:26> col:17 nested 'bool () const' inline
|-CXXConstructorDecl 0x5611b0ecc5b8 <line:46:7> col:7 implicit constexpr Spinlock 'void (const Spinlock &)' inline default trivial noexcept-unevaluated 0x5611b0ecc5b8
| `-ParmVarDecl 0x5611b0ecc6c8 <col:7> col:7 'const Spinlock &'
`-CXXMethodDecl 0x5611b0f45eb8 <col:7> col:7 implicit operator= 'Spinlock &(const Spinlock &)' inline default trivial noexcept-unevaluated 0x5611b0f45eb8
  `-ParmVarDecl 0x5611b0f45fc8 <col:7> col:7 'const Spinlock &'

Layout: <CGRecordLayout
  LLVMType:%class.Spinlock = type { i8 }
  NonVirtualBaseLLVMType:%class.Spinlock.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0ee3ac8 <../dummy_inc/click/task.hh:339:5, line:342:5> line:339:11 referenced union Pending definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5611b0ee3be8 <col:5, col:11> col:11 implicit union Pending
|-FieldDecl 0x5611b0ee3c88 <line:340:9, col:15> col:15 t 'Task *'
|-FieldDecl 0x5611b0ee3ce8 <line:341:9, col:19> col:19 referenced x 'uintptr_t':'unsigned long'
|-CXXConstructorDecl 0x5611b0f454b8 <line:339:11> col:11 implicit constexpr Pending 'void (const Task::Pending &)' inline default trivial noexcept-unevaluated 0x5611b0f454b8
| `-ParmVarDecl 0x5611b0f455c8 <col:11> col:11 'const Task::Pending &'
|-CXXConstructorDecl 0x5611b0f45668 <col:11> col:11 implicit constexpr Pending 'void (Task::Pending &&)' inline default trivial noexcept-unevaluated 0x5611b0f45668
| `-ParmVarDecl 0x5611b0f45778 <col:11> col:11 'Task::Pending &&'
|-CXXDestructorDecl 0x5611b0f457e8 <col:11> col:11 implicit ~Pending 'void ()' inline default trivial noexcept-unevaluated 0x5611b0f457e8
|-CXXMethodDecl 0x5611b0f46068 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(const Task::Pending &)' inline default trivial noexcept-unevaluated 0x5611b0f46068
| `-ParmVarDecl 0x5611b0f46178 <col:11> col:11 'const Task::Pending &'
|-CXXMethodDecl 0x5611b0f461e8 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(Task::Pending &&)' inline default trivial noexcept-unevaluated 0x5611b0f461e8
| `-ParmVarDecl 0x5611b0f462f8 <col:11> col:11 'Task::Pending &&'
`-CXXConstructorDecl 0x5611b0f50cc8 <col:11> col:11 implicit used Pending 'void () noexcept' inline default trivial
  `-CompoundStmt 0x5611b0f50da0 <col:11>

Layout: <CGRecordLayout
  LLVMType:%"union.Task::Pending" = type { %class.Task* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0ecdd00 <../dummy_inc/click/sync.hh:303:1, line:324:1> line:303:7 referenced class SpinlockIRQ definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5611b0ecde18 <col:1, col:7> col:7 implicit referenced class SpinlockIRQ
|-AccessSpecDecl 0x5611b0ecdea8 <col:21, col:27> col:21 public
|-CXXConstructorDecl 0x5611b0ecdf30 <line:305:5, col:24> col:12 SpinlockIRQ 'void ()' inline
|-TypedefDecl 0x5611b0ecdff0 <line:310:5, col:17> col:17 referenced flags_t 'int'
| `-BuiltinType 0x5611b0855580 'int'
|-CXXMethodDecl 0x5611b0ece0b8 <line:313:5, col:59> col:20 acquire 'SpinlockIRQ::flags_t ()' inline
| `-AlwaysInlineAttr 0x5611b0ece158 <col:45> always_inline
|-CXXMethodDecl 0x5611b0ece288 <line:314:5, col:63> col:17 release 'void (SpinlockIRQ::flags_t)' inline
| |-ParmVarDecl 0x5611b0ece1c0 <col:25> col:32 'SpinlockIRQ::flags_t':'int'
| `-AlwaysInlineAttr 0x5611b0ece330 <col:49> always_inline
|-CXXConstructorDecl 0x5611b0ece428 <line:303:7> col:7 implicit constexpr SpinlockIRQ 'void (const SpinlockIRQ &)' inline default trivial noexcept-unevaluated 0x5611b0ece428
| `-ParmVarDecl 0x5611b0ece538 <col:7> col:7 'const SpinlockIRQ &'
|-CXXConstructorDecl 0x5611b0ece5d8 <col:7> col:7 implicit constexpr SpinlockIRQ 'void (SpinlockIRQ &&)' inline default trivial noexcept-unevaluated 0x5611b0ece5d8
| `-ParmVarDecl 0x5611b0ece6e8 <col:7> col:7 'SpinlockIRQ &&'
|-CXXDestructorDecl 0x5611b0f458d0 <col:7> col:7 implicit ~SpinlockIRQ 'void ()' inline default trivial noexcept-unevaluated 0x5611b0f458d0
|-CXXMethodDecl 0x5611b0f46398 <col:7> col:7 implicit operator= 'SpinlockIRQ &(const SpinlockIRQ &)' inline default trivial noexcept-unevaluated 0x5611b0f46398
| `-ParmVarDecl 0x5611b0f464a8 <col:7> col:7 'const SpinlockIRQ &'
`-CXXMethodDecl 0x5611b0f46518 <col:7> col:7 implicit operator= 'SpinlockIRQ &(SpinlockIRQ &&)' inline default trivial noexcept-unevaluated 0x5611b0f46518
  `-ParmVarDecl 0x5611b0f46628 <col:7> col:7 'SpinlockIRQ &&'

Layout: <CGRecordLayout
  LLVMType:%class.SpinlockIRQ = type { i8 }
  NonVirtualBaseLLVMType:%class.SpinlockIRQ.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0f41730 prev 0x5611b0f2c8e0 <../dummy_inc/click/routerthread.hh:28:1, line:248:1> line:28:7 referenced class RouterThread definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-CXXRecordDecl 0x5611b0f41828 <col:1, col:7> col:7 implicit referenced class RouterThread
|-AccessSpecDecl 0x5611b0f418b8 <col:22, col:28> col:22 public
|-EnumDecl 0x5611b0f418e0 <line:30:5, col:58> col:5
| |-EnumConstantDecl 0x5611b0f419f8 <col:12, col:32> col:12 THREAD_QUIESCENT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:30:5)'
| | `-ConstantExpr 0x5611b0f419d8 <col:31, col:32> 'int' Int: -1
| |   `-UnaryOperator 0x5611b0f419c0 <col:31, col:32> 'int' prefix '-'
| |     `-IntegerLiteral 0x5611b0f419a0 <col:32> 'int' 1
| `-EnumConstantDecl 0x5611b0f41aa0 <col:35, col:53> col:35 THREAD_UNKNOWN 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:30:5)'
|   `-ConstantExpr 0x5611b0f41a80 <col:52, col:53> 'int' Int: -1000
|     `-UnaryOperator 0x5611b0f41a68 <col:52, col:53> 'int' prefix '-'
|       `-IntegerLiteral 0x5611b0f41a48 <col:53> 'int' 1000
|-CXXMethodDecl 0x5611b0f41b40 <line:32:5, col:28> col:16 thread_id 'int () const' inline
|-CXXMethodDecl 0x5611b0f41c00 <line:34:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5611b0f41ce8 <line:35:5, col:52> col:22 timer_set 'TimerSet &()' inline
| `-CompoundStmt 0x5611b0f466e8 <col:34, col:52>
|   `-ReturnStmt 0x5611b0f466d8 <col:36, col:43>
|     `-MemberExpr 0x5611b0f466a8 <col:43> 'TimerSet' lvalue ->_timers 0x5611b0f439b8
|       `-CXXThisExpr 0x5611b0f46698 <col:43> 'RouterThread *' implicit this
|-CXXMethodDecl 0x5611b0f41dd8 <line:36:5, col:64> col:28 timer_set 'const TimerSet &() const' inline
| `-CompoundStmt 0x5611b0f46750 <col:46, col:64>
|   `-ReturnStmt 0x5611b0f46740 <col:48, col:55>
|     `-MemberExpr 0x5611b0f46710 <col:55> 'const TimerSet' lvalue ->_timers 0x5611b0f439b8
|       `-CXXThisExpr 0x5611b0f46700 <col:55> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x5611b0f41ec8 <line:38:5, col:55> col:23 select_set 'SelectSet &()' inline
| `-CompoundStmt 0x5611b0f467b8 <col:36, col:55>
|   `-ReturnStmt 0x5611b0f467a8 <col:38, col:45>
|     `-MemberExpr 0x5611b0f46778 <col:45> 'SelectSet' lvalue ->_selects 0x5611b0f43a18
|       `-CXXThisExpr 0x5611b0f46768 <col:45> 'RouterThread *' implicit this
|-CXXMethodDecl 0x5611b0f41fb8 <line:39:5, col:67> col:29 select_set 'const SelectSet &() const' inline
| `-CompoundStmt 0x5611b0f46820 <col:48, col:67>
|   `-ReturnStmt 0x5611b0f46810 <col:50, col:57>
|     `-MemberExpr 0x5611b0f467e0 <col:57> 'const SelectSet' lvalue ->_selects 0x5611b0f43a18
|       `-CXXThisExpr 0x5611b0f467d0 <col:57> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x5611b0f42078 <line:43:5, col:26> col:17 active 'bool () const' inline
|-CXXMethodDecl 0x5611b0f42168 <line:44:5, col:31> col:18 task_begin 'Task *() const' inline
|-CXXMethodDecl 0x5611b0f422d8 <line:45:5, col:40> col:18 task_next 'Task *(Task *) const' inline
| `-ParmVarDecl 0x5611b0f42218 <col:28, col:34> col:34 task 'Task *'
|-CXXMethodDecl 0x5611b0f423a0 <line:46:5, col:29> col:18 task_end 'Task *() const' inline
|-CXXMethodDecl 0x5611b0f427e8 <line:47:5, col:59> col:10 scheduled_tasks 'void (Router *, Vector<Task *> &)'
| |-ParmVarDecl 0x5611b0f42450 <col:26, col:34> col:34 router 'Router *'
| `-ParmVarDecl 0x5611b0f426d0 <col:42, col:58> col:58 x 'Vector<Task *> &'
|-CXXMethodDecl 0x5611b0f428b8 <line:49:5, col:28> col:17 lock_tasks 'void ()' inline
|-CXXMethodDecl 0x5611b0f42978 <line:50:5, col:30> col:17 unlock_tasks 'void ()' inline
|-CXXMethodDecl 0x5611b0f42a38 <line:52:5, col:38> col:17 schedule_block_tasks 'void ()' inline
|-CXXMethodDecl 0x5611b0f42b78 <line:53:5, col:43> col:17 used block_tasks 'void (bool)' inline
| `-ParmVarDecl 0x5611b0f42ae8 <col:29, col:34> col:34 scheduled 'bool'
|-CXXMethodDecl 0x5611b0f42c40 <line:54:5, col:31> col:17 used unblock_tasks 'void ()' inline
|-CXXMethodDecl 0x5611b0f42d00 <line:56:5, col:29> col:17 stop_flag 'bool () const' inline
|-CXXMethodDecl 0x5611b0f42dc0 <line:58:5, col:35> col:17 mark_driver_entry 'void ()' inline
|-CXXMethodDecl 0x5611b0f42e80 <line:59:5, col:17> col:10 driver 'void ()'
|-CXXMethodDecl 0x5611b0f42fc0 <line:61:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x5611b0f42f30 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x5611b0f43088 <line:77:5, col:22> col:17 used wake 'void ()' inline
|-CXXMethodDecl 0x5611b0f43148 <line:80:5, col:29> col:17 run_signals 'void ()' inline
|-EnumDecl 0x5611b0f431e8 <line:83:5, line:86:20> line:83:5
| |-EnumConstantDecl 0x5611b0f432b0 <col:12> col:12 referenced S_PAUSED 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5611b0f43300 <col:22> col:22 referenced S_BLOCKED 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5611b0f43350 <col:33> col:33 referenced S_TIMERWAIT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5611b0f433a0 <line:84:12> col:12 S_LOCKSELECT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5611b0f433f0 <col:26> col:26 S_LOCKTASKS 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5611b0f43440 <line:85:12> col:12 S_RUNTASK 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5611b0f43490 <col:23> col:23 S_RUNTIMER 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5611b0f434e0 <col:35> col:35 S_RUNSIGNAL 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5611b0f43530 <col:48> col:48 S_RUNPENDING 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5611b0f43580 <col:62> col:62 S_RUNSELECT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| `-EnumConstantDecl 0x5611b0f435d0 <line:86:12> col:12 NSTATES 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
|-CXXMethodDecl 0x5611b0f436c8 <line:87:5, col:43> col:17 used set_thread_state 'void (int)' inline
| `-ParmVarDecl 0x5611b0f43638 <col:34, col:38> col:38 state 'int'
|-CXXMethodDecl 0x5611b0f43818 <line:88:5, col:61> col:17 set_thread_state_for_blocking 'void (int)' inline
| `-ParmVarDecl 0x5611b0f43788 <col:47, col:51> col:51 delay_type 'int'
|-AccessSpecDecl 0x5611b0f438c0 <line:104:3, col:10> col:3 private
|-FieldDecl 0x5611b0f438f8 <line:119:5, col:14> col:14 referenced _task_link 'TaskLink'
|-FieldDecl 0x5611b0f43958 <line:120:5, col:19> col:19 referenced _stop_flag 'volatile bool'
|-FieldDecl 0x5611b0f439b8 <line:125:5, col:14> col:14 referenced _timers 'TimerSet'
|-FieldDecl 0x5611b0f43a18 <line:127:5, col:15> col:15 referenced _selects 'SelectSet'
|-FieldDecl 0x5611b0f43a98 <line:148:5, col:14> col:14 referenced _task_lock 'Spinlock'
| `-AlignedAttr 0x5611b0f43b08 <col:40, col:50> aligned
|   `-ConstantExpr 0x5611b0f43ae8 <col:48> 'int' Int: 64
|     `-IntegerLiteral 0x5611b0f43a68 <col:48> 'int' 64
|-FieldDecl 0x5611b0f43b78 <line:149:5, col:21> col:21 referenced _task_blocker 'atomic_uint32_t'
|-FieldDecl 0x5611b0f43bd8 <line:150:5, col:21> col:21 referenced _task_blocker_waiting 'atomic_uint32_t'
|-FieldDecl 0x5611b0f43cd0 <line:152:5, col:19> col:19 referenced _pending_head 'Task::Pending':'Task::Pending'
|-FieldDecl 0x5611b0f43de0 <line:153:5, col:20> col:20 _pending_tail 'Task::Pending *'
|-FieldDecl 0x5611b0f43e40 <line:154:5, col:17> col:17 _pending_lock 'SpinlockIRQ'
|-FieldDecl 0x5611b0f43ec0 <line:157:5, col:13> col:13 referenced _master 'Master *'
| `-AlignedAttr 0x5611b0f43f30 <col:36, col:46> aligned
|   `-ConstantExpr 0x5611b0f43f10 <col:44> 'int' Int: 64
|     `-IntegerLiteral 0x5611b0f43e90 <col:44> 'int' 64
|-FieldDecl 0x5611b0f43fa8 <line:158:5, col:9> col:9 referenced _id 'int'
|-FieldDecl 0x5611b0f44008 <line:159:5, col:10> col:10 referenced _driver_entered 'bool'
|-AccessSpecDecl 0x5611b0f44058 <line:170:3, col:9> col:3 public
|-FieldDecl 0x5611b0f44098 <line:171:5, col:14> col:14 _tasks_per_iter 'unsigned int'
|-FieldDecl 0x5611b0f44100 <line:172:5, col:14> col:14 _iters_per_os 'unsigned int'
|-AccessSpecDecl 0x5611b0f44150 <line:173:3, col:10> col:3 private
|-CXXConstructorDecl 0x5611b0f442f8 <line:205:5, col:46> col:5 RouterThread 'void (Master *, int)'
| |-ParmVarDecl 0x5611b0f44188 <col:18, col:26> col:26 master 'Master *'
| `-ParmVarDecl 0x5611b0f44208 <col:34, col:38> col:38 threadno 'int'
|-CXXDestructorDecl 0x5611b0f443f8 <line:206:5, col:19> col:5 ~RouterThread 'void ()' noexcept-unevaluated 0x5611b0f443f8
|-CXXMethodDecl 0x5611b0f44500 <line:209:5, col:29> col:17 add_pending 'void ()' inline
|-CXXMethodDecl 0x5611b0f445c8 <line:211:5, line:217:5> line:211:21 pass 'unsigned int () const' inline
| `-CompoundStmt 0x5611b0f46918 <col:34, line:217:5>
|   `-ReturnStmt 0x5611b0f46908 <line:215:9, col:34>
|     `-ImplicitCastExpr 0x5611b0f468f0 <col:16, col:34> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5611b0f468c0 <col:16, col:34> 'unsigned int' lvalue ->_pass 0x5611b0edb310
|         `-ImplicitCastExpr 0x5611b0f468a8 <col:16, col:27> 'TaskLink *' <LValueToRValue>
|           `-MemberExpr 0x5611b0f46878 <col:16, col:27> 'TaskLink *const' lvalue ._next 0x5611b0edb2a8
|             `-MemberExpr 0x5611b0f46848 <col:16> 'const TaskLink' lvalue ->_task_link 0x5611b0f438f8
|               `-CXXThisExpr 0x5611b0f46838 <col:16> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x5611b0f44688 <line:221:5, col:28> col:10 driver_lock_tasks 'void ()'
|-CXXMethodDecl 0x5611b0f44748 <line:222:5, line:226:5> line:222:17 driver_unlock_tasks 'void ()' inline
| `-CompoundStmt 0x5611b0f47040 <col:39, line:226:5>
|   |-DeclStmt 0x5611b0f46b68 <line:223:9, col:68>
|   | `-VarDecl 0x5611b0f46940 <col:9, col:67> col:18 used val 'uint32_t':'unsigned int' cinit
|   |   `-CXXMemberCallExpr 0x5611b0f46b20 <col:24, col:67> 'uint32_t':'unsigned int'
|   |     |-MemberExpr 0x5611b0f46af0 <col:24, col:38> '<bound member function type>' .compare_swap 0x5611b0b83190
|   |     | `-MemberExpr 0x5611b0f469b8 <col:24> 'atomic_uint32_t' lvalue ->_task_blocker 0x5611b0f43b78
|   |     |   `-CXXThisExpr 0x5611b0f469a8 <col:24> 'RouterThread *' implicit this
|   |     |-CStyleCastExpr 0x5611b0f46aa8 <col:51, col:63> 'uint32_t':'unsigned int' <NoOp>
|   |     | `-ImplicitCastExpr 0x5611b0f46a90 <col:62, col:63> 'uint32_t':'unsigned int' <IntegralCast> part_of_explicit_cast
|   |     |   `-UnaryOperator 0x5611b0f46a68 <col:62, col:63> 'int' prefix '-'
|   |     |     `-IntegerLiteral 0x5611b0f46a48 <col:63> 'int' 1
|   |     `-ImplicitCastExpr 0x5611b0f46b50 <col:66> 'uint32_t':'unsigned int' <IntegralCast>
|   |       `-IntegerLiteral 0x5611b0f46ad0 <col:66> 'int' 0
|   |-CStyleCastExpr 0x5611b0f46bb0 <line:224:9, col:16> 'void' <ToVoid>
|   | `-DeclRefExpr 0x5611b0f46b80 <col:16> 'uint32_t':'unsigned int' lvalue Var 0x5611b0f46940 'val' 'uint32_t':'unsigned int'
|   `-ParenExpr 0x5611b0f47020 <line:225:9, col:181> 'void'
|     `-ConditionalOperator 0x5611b0f46ff0 <col:10, col:180> 'void'
|       |-CXXStaticCastExpr 0x5611b0f46cc8 <col:10, col:50> 'bool' static_cast<_Bool> <NoOp>
|       | `-BinaryOperator 0x5611b0f46c98 <col:30, col:49> 'bool' '=='
|       |   |-ImplicitCastExpr 0x5611b0f46c80 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x5611b0f46bd8 <col:30> 'uint32_t':'unsigned int' lvalue Var 0x5611b0f46940 'val' 'uint32_t':'unsigned int'
|       |   `-CStyleCastExpr 0x5611b0f46c58 <col:37, col:49> 'uint32_t':'unsigned int' <NoOp>
|       |     `-ImplicitCastExpr 0x5611b0f46c40 <col:48, col:49> 'uint32_t':'unsigned int' <IntegralCast> part_of_explicit_cast
|       |       `-UnaryOperator 0x5611b0f46c18 <col:48, col:49> 'int' prefix '-'
|       |         `-IntegerLiteral 0x5611b0f46bf8 <col:49> 'int' 1
|       |-CXXFunctionalCastExpr 0x5611b0f46d28 <col:54, col:61> 'void' functional cast to void <ToVoid>
|       | `-IntegerLiteral 0x5611b0f46d08 <col:60> 'int' 0
|       `-CallExpr 0x5611b0f46f50 <col:65, col:180> 'void'
|         |-ImplicitCastExpr 0x5611b0f46f38 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5611b0f46f18 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5611b08f6fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|         |-ImplicitCastExpr 0x5611b0f46f90 <col:80> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x5611b0f46e18 <col:80> 'const char [21]' lvalue "val == (uint32_t) -1"
|         |-ImplicitCastExpr 0x5611b0f46fa8 <col:104> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x5611b0f46e48 <col:104> 'const char [35]' lvalue "../dummy_inc/click/routerthread.hh"
|         |-ImplicitCastExpr 0x5611b0f46fc0 <col:142> 'unsigned int' <IntegralCast>
|         | `-IntegerLiteral 0x5611b0f46e88 <col:142> 'int' 225
|         `-ImplicitCastExpr 0x5611b0f46fd8 <col:147, col:161> 'const char *' <ArrayToPointerDecay>
|           `-UnaryOperator 0x5611b0f46f00 <col:147, col:161> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|             `-PredefinedExpr 0x5611b0f46ee8 <col:161> 'const char [41]' lvalue __PRETTY_FUNCTION__
|               `-StringLiteral 0x5611b0f46ea8 <col:161> 'const char [41]' lvalue "void RouterThread::driver_unlock_tasks()"
|-CXXMethodDecl 0x5611b0f44890 <line:228:5, col:37> col:17 run_tasks 'void (int)' inline
| `-ParmVarDecl 0x5611b0f44800 <col:27, col:31> col:31 ntasks 'int'
|-CXXMethodDecl 0x5611b0f44958 <line:229:5, col:33> col:17 process_pending 'void ()' inline
|-CXXMethodDecl 0x5611b0f44a18 <line:230:5, col:24> col:17 run_os 'void ()' inline
|-CXXMethodDecl 0x5611b0f44ad8 <line:238:5, col:45> col:24 used running_in_interrupt 'bool ()' static inline
|-CXXMethodDecl 0x5611b0f44b98 <line:239:5, col:45> col:17 used current_thread_is_running 'bool () const' inline
|-CXXMethodDecl 0x5611b0f44c58 <line:240:5, col:53> col:17 current_thread_is_running_cleanup 'bool () const' inline
|-FriendDecl 0x5611b0f44d50 <line:242:5, col:18> col:12 'class Task':'Task'
|-FriendDecl 0x5611b0f44db0 <line:243:5, col:18> col:12 'class Master':'Master'
|-FriendDecl 0x5611b0f44e40 <line:245:5, col:18> col:12 'class SelectSet':'SelectSet'
|-CXXConstructorDecl 0x5611b0f45208 <line:28:7> col:7 implicit RouterThread 'void (const RouterThread &)' inline default noexcept-unevaluated 0x5611b0f45208
| `-ParmVarDecl 0x5611b0f45318 <col:7> col:7 'const RouterThread &'
`-CXXMethodDecl 0x5611b0f459d8 <col:7> col:7 implicit operator= 'RouterThread &(const RouterThread &)' inline default noexcept-unevaluated 0x5611b0f459d8
  `-ParmVarDecl 0x5611b0f45ae8 <col:7> col:7 'const RouterThread &'

Layout: <CGRecordLayout
  LLVMType:%class.RouterThread = type { %struct.TaskLink, i8, [7 x i8], %class.TimerSet, %class.SelectSet, [32 x i8], %class.Spinlock, %class.atomic_uint32_t, %class.atomic_uint32_t, %"union.Task::Pending", %"union.Task::Pending"*, %class.SpinlockIRQ, [31 x i8], %class.Master*, i32, i8, i32, i32, [40 x i8] }
  NonVirtualBaseLLVMType:%class.RouterThread.base = type { %struct.TaskLink, i8, [7 x i8], %class.TimerSet, %class.SelectSet, [32 x i8], %class.Spinlock, %class.atomic_uint32_t, %class.atomic_uint32_t, %"union.Task::Pending", %"union.Task::Pending"*, %class.SpinlockIRQ, [31 x i8], %class.Master*, i32, i8, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0edb620 prev 0x5611b0e8d570 <../dummy_inc/click/task.hh:49:1, line:371:1> line:49:7 referenced class Task definition
|-DefinitionData has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-private 'TaskLink'
|-CXXRecordDecl 0x5611b0edb758 <col:1, col:7> col:7 implicit referenced class Task
|-AccessSpecDecl 0x5611b0edb7e8 <col:33, col:39> col:33 public
|-EnumDecl 0x5611b0edb810 <line:52:5, col:50> col:5
| |-EnumConstantDecl 0x5611b0edb950 <col:12, col:26> col:12 referenced STRIDE1 'Task::(anonymous enum at ../dummy_inc/click/task.hh:52:5)'
| | `-ConstantExpr 0x5611b0edb930 <col:22, col:26> 'unsigned int' Int: 65536
| |   `-BinaryOperator 0x5611b0edb910 <col:22, col:26> 'unsigned int' '<<'
| |     |-IntegerLiteral 0x5611b0edb8d0 <col:22> 'unsigned int' 1
| |     `-IntegerLiteral 0x5611b0edb8f0 <col:26> 'int' 16
| `-EnumConstantDecl 0x5611b0edba20 <col:30, col:47> col:30 referenced MAX_STRIDE 'Task::(anonymous enum at ../dummy_inc/click/task.hh:52:5)'
|   `-ConstantExpr 0x5611b0edba00 <col:43, col:47> 'unsigned int' Int: 2147483648
|     `-BinaryOperator 0x5611b0edb9e0 <col:43, col:47> 'unsigned int' '<<'
|       |-IntegerLiteral 0x5611b0edb9a0 <col:43> 'unsigned int' 1
|       `-IntegerLiteral 0x5611b0edb9c0 <col:47> 'int' 31
|-EnumDecl 0x5611b0edba70 <line:53:5, col:57> col:5
| |-EnumConstantDecl 0x5611b0edbbb0 <col:12, col:29> col:12 referenced MAX_TICKETS 'Task::(anonymous enum at ../dummy_inc/click/task.hh:53:5)'
| | `-ImplicitCastExpr 0x5611b0edbcd0 <col:26, col:29> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5611b0edbb90 <col:26, col:29> 'int' Int: 32768
| |     `-BinaryOperator 0x5611b0edbb70 <col:26, col:29> 'int' '<<'
| |       |-IntegerLiteral 0x5611b0edbb30 <col:26> 'int' 1
| |       `-IntegerLiteral 0x5611b0edbb50 <col:29> 'int' 15
| `-EnumConstantDecl 0x5611b0edbc80 <col:33, col:54> col:33 DEFAULT_TICKETS 'Task::(anonymous enum at ../dummy_inc/click/task.hh:53:5)'
|   `-ImplicitCastExpr 0x5611b0edbce8 <col:51, col:54> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0edbc60 <col:51, col:54> 'int' Int: 1024
|       `-BinaryOperator 0x5611b0edbc40 <col:51, col:54> 'int' '<<'
|         |-IntegerLiteral 0x5611b0edbc00 <col:51> 'int' 1
|         `-IntegerLiteral 0x5611b0edbc20 <col:54> 'int' 10
|-CXXConstructorDecl 0x5611b0edbeb8 <line:75:5, col:48> col:12 Task 'void (TaskCallback, void *)' inline
| |-ParmVarDecl 0x5611b0edbd10 <col:17, col:30> col:30 f 'TaskCallback':'bool (*)(Task *, void *)'
| `-ParmVarDecl 0x5611b0edbd90 <col:33, col:39> col:39 user_data 'void *'
|-CXXConstructorDecl 0x5611b0edc010 <line:86:5, col:27> col:12 Task 'void (Element *)' inline
| `-ParmVarDecl 0x5611b0edbf80 <col:17, col:26> col:26 e 'Element *'
|-CXXDestructorDecl 0x5611b0edc108 <line:91:5, col:11> col:5 ~Task 'void ()' noexcept-unevaluated 0x5611b0edc108
|-CXXMethodDecl 0x5611b0edc298 <line:98:5, line:100:5> line:98:25 callback 'TaskCallback () const' inline
| `-CompoundStmt 0x5611b0ee4c28 <col:42, line:100:5>
|   `-ReturnStmt 0x5611b0ee4c18 <line:99:9, col:16>
|     `-ImplicitCastExpr 0x5611b0ee4c00 <col:16> 'TaskCallback':'bool (*)(Task *, void *)' <LValueToRValue>
|       `-MemberExpr 0x5611b0ee4bd0 <col:16> 'const TaskCallback':'bool (*const)(Task *, void *)' lvalue ->_hook 0x5611b0ee3950
|         `-CXXThisExpr 0x5611b0ee4bc0 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5611b0edc360 <line:103:5, line:105:5> line:103:18 user_data 'void *() const' inline
| `-CompoundStmt 0x5611b0ee4ca8 <col:36, line:105:5>
|   `-ReturnStmt 0x5611b0ee4c98 <line:104:9, col:16>
|     `-ImplicitCastExpr 0x5611b0ee4c80 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5611b0ee4c50 <col:16> 'void *const' lvalue ->_thunk 0x5611b0ee39b8
|         `-CXXThisExpr 0x5611b0ee4c40 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5611b0edc420 <line:108:5, line:110:5> line:108:21 element 'Element *() const' inline
| `-CompoundStmt 0x5611b0ee4d28 <col:37, line:110:5>
|   `-ReturnStmt 0x5611b0ee4d18 <line:109:9, col:16>
|     `-ImplicitCastExpr 0x5611b0ee4d00 <col:16> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x5611b0ee4cd0 <col:16> 'Element *const' lvalue ->_owner 0x5611b0ee3a78
|         `-CXXThisExpr 0x5611b0ee4cc0 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5611b0edc4e0 <line:114:5, col:31> col:17 initialized 'bool () const' inline
|-CXXMethodDecl 0x5611b0edc5a8 <line:123:5, col:33> col:16 home_thread_id 'int () const' inline
|-CXXMethodDecl 0x5611b0edc668 <line:132:5, col:35> col:26 thread 'RouterThread *() const' inline
|-CXXMethodDecl 0x5611b0edc728 <line:135:5, line:137:5> line:135:20 router 'Router *() const' inline
| `-CompoundStmt 0x5611b0ee4e10 <col:35, line:137:5>
|   `-ReturnStmt 0x5611b0ee4e00 <line:136:9, col:31>
|     `-CXXMemberCallExpr 0x5611b0ee4dc8 <col:16, col:31> 'Router *'
|       `-MemberExpr 0x5611b0ee4d98 <col:16, col:24> '<bound member function type>' ->router 0x5611b0e9ea90
|         `-ImplicitCastExpr 0x5611b0ee4de8 <col:16> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x5611b0ee4d80 <col:16> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x5611b0ee4d50 <col:16> 'Element *const' lvalue ->_owner 0x5611b0ee3a78
|               `-CXXThisExpr 0x5611b0ee4d40 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5611b0edc7e8 <line:140:5, col:22> col:13 master 'Master *() const'
|-CXXMethodDecl 0x5611b0edc9a8 <line:159:5, col:50> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x5611b0edc898 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x5611b0edc910 <col:37, col:42> col:42 schedule 'bool'
|-CXXMethodDecl 0x5611b0edcbb8 <line:169:5, col:50> col:10 initialize 'void (Router *, bool)'
| |-ParmVarDecl 0x5611b0edca68 <col:21, col:29> col:29 router 'Router *'
| `-ParmVarDecl 0x5611b0edcae0 <col:37, col:42> col:42 schedule 'bool'
|-CXXMethodDecl 0x5611b0edcc88 <line:179:5, line:181:5> line:179:17 scheduled 'bool () const' inline
| `-CompoundStmt 0x5611b0ee4f20 <col:35, line:181:5>
|   `-ReturnStmt 0x5611b0ee4f10 <line:180:9, col:24>
|     `-ImplicitCastExpr 0x5611b0ee4ef8 <col:16, col:24> 'bool' <IntegralToBoolean>
|       `-ImplicitCastExpr 0x5611b0ee4ee0 <col:16, col:24> 'uint8_t':'unsigned char' <LValueToRValue>
|         `-MemberExpr 0x5611b0ee4eb0 <col:16, col:24> 'const uint8_t':'const unsigned char' lvalue .is_scheduled 0x5611b0ee3588
|           `-MemberExpr 0x5611b0ee4e68 <col:16, col:24> 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5611b0ee36a8
|             `-MemberExpr 0x5611b0ee4e38 <col:16> 'const union Status':'const Task::Status' lvalue ->_status 0x5611b0ee38d8
|               `-CXXThisExpr 0x5611b0ee4e28 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5611b0ee25d0 <line:190:5, line:192:5> line:190:17 unschedule 'void ()' inline
| `-CompoundStmt 0x5611b0ee5038 <col:30, line:192:5>
|   `-BinaryOperator 0x5611b0ee5018 <line:191:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x5611b0ee4fc0 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x5611b0ee3588
|     | `-MemberExpr 0x5611b0ee4f78 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5611b0ee36a8
|     |   `-MemberExpr 0x5611b0ee4f48 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5611b0ee38d8
|     |     `-CXXThisExpr 0x5611b0ee4f38 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x5611b0ee5000 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x5611b0ee4ff0 <col:32> 'bool' false
|-CXXMethodDecl 0x5611b0ee2690 <line:201:5, line:206:5> line:201:17 used reschedule 'void ()' inline
| `-CompoundStmt 0x5611b0ee5388 <col:30, line:206:5>
|   |-BinaryOperator 0x5611b0ee5130 <line:202:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x5611b0ee50d8 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x5611b0ee3588
|   | | `-MemberExpr 0x5611b0ee5090 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5611b0ee36a8
|   | |   `-MemberExpr 0x5611b0ee5060 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5611b0ee38d8
|   | |     `-CXXThisExpr 0x5611b0ee5050 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x5611b0ee5118 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x5611b0ee5108 <col:32> 'bool' true
|   |-CallExpr 0x5611b0ee51d0 <line:203:9, col:21> 'void'
|   | `-ImplicitCastExpr 0x5611b0ee51b8 <col:9> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5611b0ee5198 <col:9> 'void ()' lvalue Function 0x5611b0ecb9c0 'click_fence' 'void ()'
|   `-IfStmt 0x5611b0ee5370 <line:204:9, line:205:32>
|     |-BinaryOperator 0x5611b0ee52b0 <line:204:13, col:34> 'bool' '<'
|     | |-ImplicitCastExpr 0x5611b0ee5280 <col:13, col:30> 'uintptr_t':'unsigned long' <LValueToRValue>
|     | | `-MemberExpr 0x5611b0ee5230 <col:13, col:30> 'uintptr_t':'unsigned long' lvalue .x 0x5611b0ee3ce8
|     | |   `-MemberExpr 0x5611b0ee5200 <col:13> 'Task::Pending' lvalue ->_pending_nextptr 0x5611b0ee3d60
|     | |     `-CXXThisExpr 0x5611b0ee51f0 <col:13> 'Task *' implicit this
|     | `-ImplicitCastExpr 0x5611b0ee5298 <col:34> 'unsigned long' <IntegralCast>
|     |   `-IntegerLiteral 0x5611b0ee5260 <col:34> 'int' 2
|     `-CXXMemberCallExpr 0x5611b0ee5330 <line:205:13, col:32> 'void'
|       |-MemberExpr 0x5611b0ee52e0 <col:13> '<bound member function type>' ->complete_schedule 0x5611b0ee4760
|       | `-CXXThisExpr 0x5611b0ee52d0 <col:13> 'Task *' implicit this
|       `-ImplicitCastExpr 0x5611b0ee5358 <col:31> 'RouterThread *' <NullToPointer>
|         `-IntegerLiteral 0x5611b0ee5310 <col:31> 'int' 0
|-CXXMethodDecl 0x5611b0ee2750 <line:238:5, line:240:5> line:238:17 fast_reschedule 'void ()' inline
| `-CompoundStmt 0x5611b0ee54b0 <col:35, line:240:5>
|   `-BinaryOperator 0x5611b0ee5490 <line:239:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x5611b0ee5438 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x5611b0ee3588
|     | `-MemberExpr 0x5611b0ee53f0 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5611b0ee36a8
|     |   `-MemberExpr 0x5611b0ee53c0 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5611b0ee38d8
|     |     `-CXXThisExpr 0x5611b0ee53b0 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x5611b0ee5478 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x5611b0ee5468 <col:32> 'bool' true
|-CXXMethodDecl 0x5611b0ee2810 <line:250:5, line:253:5> line:250:17 strong_unschedule 'void ()' inline
| `-CompoundStmt 0x5611b0ee56c8 <col:37, line:253:5>
|   |-BinaryOperator 0x5611b0ee55a8 <line:251:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x5611b0ee5550 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x5611b0ee3588
|   | | `-MemberExpr 0x5611b0ee5508 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5611b0ee36a8
|   | |   `-MemberExpr 0x5611b0ee54d8 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5611b0ee38d8
|   | |     `-CXXThisExpr 0x5611b0ee54c8 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x5611b0ee5590 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x5611b0ee5580 <col:32> 'bool' false
|   `-BinaryOperator 0x5611b0ee56a8 <line:252:9, col:41> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x5611b0ee5650 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_strong_unscheduled 0x5611b0ee35e8
|     | `-MemberExpr 0x5611b0ee5608 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5611b0ee36a8
|     |   `-MemberExpr 0x5611b0ee55d8 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5611b0ee38d8
|     |     `-CXXThisExpr 0x5611b0ee55c8 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x5611b0ee5690 <col:41> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x5611b0ee5680 <col:41> 'bool' true
|-CXXMethodDecl 0x5611b0ee28d0 <line:261:5, line:264:5> line:261:17 strong_reschedule 'void ()' inline
| `-CompoundStmt 0x5611b0ee5848 <col:37, line:264:5>
|   |-BinaryOperator 0x5611b0ee57c8 <line:262:9, col:41> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x5611b0ee5770 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_strong_unscheduled 0x5611b0ee35e8
|   | | `-MemberExpr 0x5611b0ee5728 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5611b0ee36a8
|   | |   `-MemberExpr 0x5611b0ee56f8 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5611b0ee38d8
|   | |     `-CXXThisExpr 0x5611b0ee56e8 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x5611b0ee57b0 <col:41> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x5611b0ee57a0 <col:41> 'bool' false
|   `-CXXMemberCallExpr 0x5611b0ee5828 <line:263:9, col:20> 'void'
|     `-MemberExpr 0x5611b0ee57f8 <col:9> '<bound member function type>' ->reschedule 0x5611b0ee2690
|       `-CXXThisExpr 0x5611b0ee57e8 <col:9> 'Task *' implicit this
|-CXXMethodDecl 0x5611b0ee2a18 <line:275:5, col:39> col:10 move_thread 'void (int)'
| `-ParmVarDecl 0x5611b0ee2988 <col:22, col:26> col:26 new_thread_id 'int'
|-CXXMethodDecl 0x5611b0ee2ae8 <line:279:5, col:26> col:16 tickets 'int () const' inline
|-CXXMethodDecl 0x5611b0ee2c30 <line:280:5, col:34> col:17 used set_tickets 'void (int)' inline
| `-ParmVarDecl 0x5611b0ee2ba0 <col:29, col:33> col:33 n 'int'
|-CXXMethodDecl 0x5611b0ee2d80 <line:281:5, col:41> col:17 adjust_tickets 'void (int)' inline
| `-ParmVarDecl 0x5611b0ee2cf0 <col:32, col:36> col:36 delta 'int'
|-CXXMethodDecl 0x5611b0ee2e48 <line:284:5, col:22> col:17 fire 'bool ()' inline
|-CXXMethodDecl 0x5611b0ee2f08 <line:299:5, col:64> col:25 hook 'TaskCallback () const' inline
| `-DeprecatedAttr 0x5611b0ee2fa8 <col:53> "" ""
|-CXXMethodDecl 0x5611b0ee3040 <line:300:5, col:58> col:18 thunk 'void *() const' inline
| `-DeprecatedAttr 0x5611b0ee30e0 <col:47> "" ""
|-AccessSpecDecl 0x5611b0ee3150 <line:303:3, col:10> col:3 private
|-FieldDecl 0x5611b0ee3190 <line:310:5, col:14> col:14 referenced _stride 'unsigned int'
|-FieldDecl 0x5611b0ee31f8 <line:311:5, col:9> col:9 referenced _tickets 'int'
|-CXXRecordDecl 0x5611b0ee3248 <line:314:5, line:321:5> line:314:11 union Status definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5611b0ee3368 <col:5, col:11> col:11 implicit union Status
| |-CXXRecordDecl 0x5611b0ee33f8 <line:315:9, line:319:9> line:315:9 struct definition
| | |-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | | |-MoveConstructor exists simple trivial
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial
| | |-FieldDecl 0x5611b0ee3528 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
| | |-FieldDecl 0x5611b0ee3588 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
| | |-FieldDecl 0x5611b0ee35e8 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
| | |-CXXConstructorDecl 0x5611b0f503f8 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
| | |-CXXDestructorDecl 0x5611b0f504d0 <col:9> col:9 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x5611b0f504d0
| | |-CXXConstructorDecl 0x5611b0f50788 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x5611b0f50788
| | | `-ParmVarDecl 0x5611b0f50898 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
| | `-CXXConstructorDecl 0x5611b0f50938 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x5611b0f50938
| |   `-ParmVarDecl 0x5611b0f50a48 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'
| |-FieldDecl 0x5611b0ee36a8 <col:9> col:9 implicit referenced 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| |-IndirectFieldDecl 0x5611b0ee3708 <line:316:21> col:21 implicit home_thread_id 'int16_t':'short'
| | |-Field 0x5611b0ee36a8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x5611b0ee3528 'home_thread_id' 'int16_t':'short'
| |-IndirectFieldDecl 0x5611b0ee3760 <line:317:21> col:21 implicit is_scheduled 'uint8_t':'unsigned char'
| | |-Field 0x5611b0ee36a8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x5611b0ee3588 'is_scheduled' 'uint8_t':'unsigned char'
| |-IndirectFieldDecl 0x5611b0ee37b8 <line:318:21> col:21 implicit is_strong_unscheduled 'uint8_t':'unsigned char'
| | |-Field 0x5611b0ee36a8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x5611b0ee35e8 'is_strong_unscheduled' 'uint8_t':'unsigned char'
| |-FieldDecl 0x5611b0ee3810 <line:320:9, col:18> col:18 status 'uint32_t':'unsigned int'
| |-CXXConstructorDecl 0x5611b0f50308 <line:314:11> col:11 implicit used Status 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5611b0f50c68 <col:11>
| |-CXXConstructorDecl 0x5611b0f505d8 <col:11> col:11 implicit constexpr Status 'void (const Task::Status &)' inline default trivial noexcept-unevaluated 0x5611b0f505d8
| | `-ParmVarDecl 0x5611b0f506e8 <col:11> col:11 'const Task::Status &'
| `-CXXConstructorDecl 0x5611b0f50ae8 <col:11> col:11 implicit constexpr Status 'void (Task::Status &&)' inline default trivial noexcept-unevaluated 0x5611b0f50ae8
|   `-ParmVarDecl 0x5611b0f50bf8 <col:11> col:11 'Task::Status &&'
|-FieldDecl 0x5611b0ee38d8 <col:5, line:321:7> col:7 referenced _status 'union Status':'Task::Status'
|-FieldDecl 0x5611b0ee3950 <line:323:5, col:18> col:18 referenced _hook 'TaskCallback':'bool (*)(Task *, void *)'
|-FieldDecl 0x5611b0ee39b8 <line:324:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x5611b0ee3a18 <line:335:5, col:19> col:19 referenced _thread 'RouterThread *'
|-FieldDecl 0x5611b0ee3a78 <line:337:5, col:14> col:14 referenced _owner 'Element *'
|-CXXRecordDecl 0x5611b0ee3ac8 <line:339:5, line:342:5> line:339:11 referenced union Pending definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5611b0ee3be8 <col:5, col:11> col:11 implicit union Pending
| |-FieldDecl 0x5611b0ee3c88 <line:340:9, col:15> col:15 t 'Task *'
| |-FieldDecl 0x5611b0ee3ce8 <line:341:9, col:19> col:19 referenced x 'uintptr_t':'unsigned long'
| |-CXXConstructorDecl 0x5611b0f454b8 <line:339:11> col:11 implicit constexpr Pending 'void (const Task::Pending &)' inline default trivial noexcept-unevaluated 0x5611b0f454b8
| | `-ParmVarDecl 0x5611b0f455c8 <col:11> col:11 'const Task::Pending &'
| |-CXXConstructorDecl 0x5611b0f45668 <col:11> col:11 implicit constexpr Pending 'void (Task::Pending &&)' inline default trivial noexcept-unevaluated 0x5611b0f45668
| | `-ParmVarDecl 0x5611b0f45778 <col:11> col:11 'Task::Pending &&'
| |-CXXDestructorDecl 0x5611b0f457e8 <col:11> col:11 implicit ~Pending 'void ()' inline default trivial noexcept-unevaluated 0x5611b0f457e8
| |-CXXMethodDecl 0x5611b0f46068 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(const Task::Pending &)' inline default trivial noexcept-unevaluated 0x5611b0f46068
| | `-ParmVarDecl 0x5611b0f46178 <col:11> col:11 'const Task::Pending &'
| |-CXXMethodDecl 0x5611b0f461e8 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(Task::Pending &&)' inline default trivial noexcept-unevaluated 0x5611b0f461e8
| | `-ParmVarDecl 0x5611b0f462f8 <col:11> col:11 'Task::Pending &&'
| `-CXXConstructorDecl 0x5611b0f50cc8 <col:11> col:11 implicit used Pending 'void () noexcept' inline default trivial
|   `-CompoundStmt 0x5611b0f50da0 <col:11>
|-FieldDecl 0x5611b0ee3d60 <line:343:5, col:13> col:13 referenced _pending_nextptr 'Task::Pending'
|-CXXConstructorDecl 0x5611b0ee3ea8 <line:345:5, col:23> col:5 Task 'void (const Task &)'
| `-ParmVarDecl 0x5611b0ee3de8 <col:10, col:22> col:22 x 'const Task &'
|-CXXMethodDecl 0x5611b0ee4058 <line:346:5, col:34> col:11 operator= 'Task &(const Task &)'
| `-ParmVarDecl 0x5611b0ee3f68 <col:21, col:33> col:33 x 'const Task &'
|-CXXMethodDecl 0x5611b0ee4120 <line:347:5, col:18> col:10 cleanup 'void ()'
|-CXXMethodDecl 0x5611b0ee41e0 <line:352:5, col:37> col:17 used on_scheduled_list 'bool () const' inline
|-CXXMethodDecl 0x5611b0ee42a0 <line:353:5, line:355:5> line:353:17 on_pending_list 'bool () const' inline
| `-CompoundStmt 0x5611b0ee5958 <col:41, line:355:5>
|   `-ReturnStmt 0x5611b0ee5948 <line:354:9, col:38>
|     `-BinaryOperator 0x5611b0ee5928 <col:16, col:38> 'bool' '!='
|       |-ImplicitCastExpr 0x5611b0ee58f8 <col:16, col:33> 'uintptr_t':'unsigned long' <LValueToRValue>
|       | `-MemberExpr 0x5611b0ee58a8 <col:16, col:33> 'const uintptr_t':'const unsigned long' lvalue .x 0x5611b0ee3ce8
|       |   `-MemberExpr 0x5611b0ee5878 <col:16> 'const Task::Pending' lvalue ->_pending_nextptr 0x5611b0ee3d60
|       |     `-CXXThisExpr 0x5611b0ee5868 <col:16> 'const Task *' implicit this
|       `-ImplicitCastExpr 0x5611b0ee5910 <col:38> 'unsigned long' <IntegralCast>
|         `-IntegerLiteral 0x5611b0ee58d8 <col:38> 'int' 0
|-CXXMethodDecl 0x5611b0ee4360 <line:356:5, col:33> col:17 needs_cleanup 'bool () const' inline
|-CXXMethodDecl 0x5611b0ee44a0 <line:361:5, col:33> col:10 add_pending 'void (bool)'
| `-ParmVarDecl 0x5611b0ee4410 <col:22, col:27> col:27 always 'bool'
|-CXXMethodDecl 0x5611b0ee4618 <line:362:5, col:46> col:10 process_pending 'void (RouterThread *)'
| `-ParmVarDecl 0x5611b0ee4558 <col:26, col:40> col:40 thread 'RouterThread *'
|-CXXMethodDecl 0x5611b0ee4760 <line:364:5, col:64> col:10 used complete_schedule 'void (RouterThread *)'
| `-ParmVarDecl 0x5611b0ee46d0 <col:28, col:42> col:42 process_pending_thread 'RouterThread *'
|-CXXMethodDecl 0x5611b0ee4828 <line:365:5, col:44> col:17 remove_from_scheduled_list 'void ()' inline
|-CXXMethodDecl 0x5611b0ee49f0 <line:367:5, col:55> col:17 error_hook 'bool (Task *, void *)' static
| |-ParmVarDecl 0x5611b0ee48d8 <col:28, col:34> col:34 task 'Task *'
| `-ParmVarDecl 0x5611b0ee4958 <col:40, col:46> col:46 user_data 'void *'
|-FriendDecl 0x5611b0ee4af0 <line:369:5, col:18> col:12 'class RouterThread':'RouterThread'
`-FriendDecl 0x5611b0ee4b80 <line:370:5, col:18> col:12 'class Master':'Master'

Layout: <CGRecordLayout
  LLVMType:%class.Task = type { %struct.TaskLink.base, i32, i32, %"union.Task::Status", i1 (%class.Task*, i8*)*, i8*, %class.RouterThread*, %class.Element*, %"union.Task::Pending" }
  NonVirtualBaseLLVMType:%class.Task = type { %struct.TaskLink.base, i32, i32, %"union.Task::Status", i1 (%class.Task*, i8*)*, i8*, %class.RouterThread*, %class.Element*, %"union.Task::Pending" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0ed63b8 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5611b0ed64e8 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x5611b0ed6fd8 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon.19 = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0ed0468 prev 0x5611b0e8d620 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5611b0ed0560 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x5611b0ed05f0 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x5611b0ed0650 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x5611b0ed06f8 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| `-CXXRecordDecl 0x5611b0ed0818 <col:5, col:12> col:12 implicit struct do_nothing_t
|-CXXConstructorDecl 0x5611b0ed09b8 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x5611b0ed08f8 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x5611b0ed0c08 <line:38:5, col:43> col:5 Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x5611b0ed0a78 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x5611b0ed0af8 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x5611b0ed0d60 <line:43:5, col:27> col:5 Timer 'void (Element *)'
| `-ParmVarDecl 0x5611b0ed0cd0 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x5611b0ed0ee8 <line:47:5, col:21> col:5 Timer 'void (Task *)'
| `-ParmVarDecl 0x5611b0ed0e20 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x5611b0ed1098 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x5611b0ed0fd8 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x5611b0ed1190 <line:55:5, line:58:5> line:55:12 ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x5611b0ed71b0 <col:21, line:58:5>
|   `-IfStmt 0x5611b0ed7198 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x5611b0ed7100 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x5611b0ed70d0 <col:6> '<bound member function type>' ->scheduled 0x5611b0ed19e8
|     |   `-ImplicitCastExpr 0x5611b0ed7120 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x5611b0ed70c0 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x5611b0ed7178 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x5611b0ed7148 <col:6> '<bound member function type>' ->unschedule 0x5611b0ed5860
|         `-CXXThisExpr 0x5611b0ed7138 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x5611b0ed1290 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x5611b0ed7350 <col:26, line:65:5>
|   |-BinaryOperator 0x5611b0ed7270 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5611b0ed7208 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5611b0ed64e8
|   | | `-MemberExpr 0x5611b0ed71d8 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5611b0ed65a8
|   | |   `-CXXThisExpr 0x5611b0ed71c8 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5611b0ed7258 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5611b0ed7238 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5611b0ed6a08 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5611b0ed7330 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x5611b0ed72a0 <col:2> 'void *' lvalue ->_thunk 0x5611b0ed6628
|     | `-CXXThisExpr 0x5611b0ed7290 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x5611b0ed7308 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x5611b0ed72d0 <col:20> 'int' 1
|-CXXMethodDecl 0x5611b0ed13d0 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x5611b0ed1340 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x5611b0ed74b0 <col:52, line:71:5>
|   |-CStyleCastExpr 0x5611b0ed73a0 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x5611b0ed7370 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x5611b0ed1340 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x5611b0ed7490 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x5611b0ed7460 <col:2> '<bound member function type>' ->assign 0x5611b0ed1290
|       `-CXXThisExpr 0x5611b0ed7450 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x5611b0ed15a0 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x5611b0ed1488 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x5611b0ed1508 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x5611b0ed7630 <col:58, line:79:5>
|   |-BinaryOperator 0x5611b0ed7578 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5611b0ed7510 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5611b0ed64e8
|   | | `-MemberExpr 0x5611b0ed74e0 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5611b0ed65a8
|   | |   `-CXXThisExpr 0x5611b0ed74d0 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5611b0ed7560 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x5611b0ed7540 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x5611b0ed1488 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x5611b0ed7610 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5611b0ed75a8 <col:2> 'void *' lvalue ->_thunk 0x5611b0ed6628
|     | `-CXXThisExpr 0x5611b0ed7598 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5611b0ed75f8 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x5611b0ed75d8 <col:11> 'void *' lvalue ParmVar 0x5611b0ed1508 'user_data' 'void *'
|-CXXMethodDecl 0x5611b0ed16f0 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x5611b0ed1660 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x5611b0ed77c8 <col:35, line:87:5>
|   |-BinaryOperator 0x5611b0ed76f8 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5611b0ed7690 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5611b0ed64e8
|   | | `-MemberExpr 0x5611b0ed7660 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5611b0ed65a8
|   | |   `-CXXThisExpr 0x5611b0ed7650 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5611b0ed76e0 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5611b0ed76c0 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5611b0ed6be0 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5611b0ed77a8 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5611b0ed7728 <col:2> 'void *' lvalue ->_thunk 0x5611b0ed6628
|     | `-CXXThisExpr 0x5611b0ed7718 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5611b0ed7790 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5611b0ed7778 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x5611b0ed7758 <col:11> 'Element *' lvalue ParmVar 0x5611b0ed1660 'element' 'Element *'
|-CXXMethodDecl 0x5611b0ed1838 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x5611b0ed17a8 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x5611b0ed7960 <col:29, line:94:5>
|   |-BinaryOperator 0x5611b0ed7890 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5611b0ed7828 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5611b0ed64e8
|   | | `-MemberExpr 0x5611b0ed77f8 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5611b0ed65a8
|   | |   `-CXXThisExpr 0x5611b0ed77e8 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5611b0ed7878 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5611b0ed7858 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5611b0ed6db8 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5611b0ed7940 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5611b0ed78c0 <col:2> 'void *' lvalue ->_thunk 0x5611b0ed6628
|     | `-CXXThisExpr 0x5611b0ed78b0 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5611b0ed7928 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5611b0ed7910 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x5611b0ed78f0 <col:11> 'Task *' lvalue ParmVar 0x5611b0ed17a8 'task' 'Task *'
|-CXXMethodDecl 0x5611b0ed1928 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x5611b0ed7a40 <col:37, line:100:5>
|   `-ReturnStmt 0x5611b0ed7a30 <line:99:2, col:19>
|     `-BinaryOperator 0x5611b0ed7a10 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x5611b0ed79e0 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x5611b0ed7990 <col:9> 'Element *const' lvalue ->_owner 0x5611b0ed6688
|       |   `-CXXThisExpr 0x5611b0ed7980 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x5611b0ed79f8 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x5611b0ed79c0 <col:19> 'int' 0
|-CXXMethodDecl 0x5611b0ed19e8 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x5611b0ed7b00 <col:35, line:105:5>
|   `-ReturnStmt 0x5611b0ed7af0 <line:104:2, col:23>
|     `-BinaryOperator 0x5611b0ed7ad0 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x5611b0ed7ab8 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x5611b0ed7a68 <col:9> 'const int' lvalue ->_schedpos1 0x5611b0ed6308
|       |   `-CXXThisExpr 0x5611b0ed7a58 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x5611b0ed7a98 <col:23> 'int' 0
|-CXXMethodDecl 0x5611b0ed1aa8 <line:116:5, line:118:5> line:116:29 used expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x5611b0ed7b68 <col:51, line:118:5>
|   `-ReturnStmt 0x5611b0ed7b58 <line:117:2, col:9>
|     `-MemberExpr 0x5611b0ed7b28 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x5611b0ed6368
|       `-CXXThisExpr 0x5611b0ed7b18 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5611b0ed1b68 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x5611b0ed80c0 <col:37, line:136:5>
|   `-IfStmt 0x5611b0ed8098 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x5611b0ed7c28 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x5611b0ed7c10 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x5611b0ed7bf0 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x5611b0ed7bc0 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x5611b0d726c8
|     |       `-MemberExpr 0x5611b0ed7b90 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x5611b0ed6368
|     |         `-CXXThisExpr 0x5611b0ed7b80 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x5611b0ed8008 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x5611b0ed7ff0 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x5611b0ed7fc0 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x5611b0ed7fa8 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x5611b0ed7f70 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x5611b0ed7f58 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x5611b0ed7f38 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5611b0c5be00 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x5611b0ed7ed8 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x5611b0ed7ec0 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x5611b0ed7de8 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x5611b0ed7dd0 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x5611b0ed7db0 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5611b0c5bac0 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x5611b0ed7d50 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x5611b0ed7c50 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x5611b0ed6368
|     |         |     |   `-CXXThisExpr 0x5611b0ed7c40 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x5611b0ed7d98 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x5611b0ed7d80 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x5611b0ed7d30 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x5611b0ed7d18 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x5611b0ed7cb8 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x5611b0d91510 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x5611b0ed7f20 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x5611b0ed7f08 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x5611b0ed7ea0 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x5611b0ed7e88 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x5611b0ed7e58 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x5611b0a62830 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x5611b0ed8088 <line:135:6, col:13>
|       `-CXXConstructExpr 0x5611b0ed8058 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x5611b0ed8028 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x5611b0ed6368
|           `-CXXThisExpr 0x5611b0ed8018 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x5611b0ed1c28 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x5611b0ed81a8 <col:35, line:141:5>
|   `-ReturnStmt 0x5611b0ed8198 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x5611b0ed8160 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x5611b0ed8130 <col:9, col:17> '<bound member function type>' ->router 0x5611b0e9ea90
|         `-ImplicitCastExpr 0x5611b0ed8180 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x5611b0ed8118 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x5611b0ed80e8 <col:9> 'Element *const' lvalue ->_owner 0x5611b0ed6688
|               `-CXXThisExpr 0x5611b0ed80d8 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5611b0ed1ce8 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x5611b0ed8228 <col:37, line:146:5>
|   `-ReturnStmt 0x5611b0ed8218 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x5611b0ed8200 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x5611b0ed81d0 <col:9> 'Element *const' lvalue ->_owner 0x5611b0ed6688
|         `-CXXThisExpr 0x5611b0ed81c0 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5611b0ed1da8 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x5611b0ed82a8 <col:41, line:151:5>
|   `-ReturnStmt 0x5611b0ed8298 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x5611b0ed8280 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x5611b0ed8250 <col:9> 'RouterThread *const' lvalue ->_thread 0x5611b0ed66e8
|         `-CXXThisExpr 0x5611b0ed8240 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5611b0ed1e70 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x5611b0ed2068 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x5611b0ed1f20 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x5611b0ed1f98 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5611b0ed6fc8 <col:50> 'bool' false
|-CXXMethodDecl 0x5611b0ed21b8 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x5611b0ed2128 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x5611b0ed2300 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x5611b0ed2270 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x5611b0ed2448 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x5611b0ed23b8 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x5611b0ed4de0 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5611b0ed4d50 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x5611b0ed4f28 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5611b0ed4e98 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x5611b0ed4ff0 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x5611b0ed8410 <col:32, line:223:5>
|   `-ExprWithCleanups 0x5611b0ed83f8 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x5611b0ed83a0 <col:2, col:47> 'void'
|       |-MemberExpr 0x5611b0ed82d0 <col:2> '<bound member function type>' ->schedule_at_steady 0x5611b0ed2300
|       | `-CXXThisExpr 0x5611b0ed82c0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5611b0ed83e0 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5611b0ed83c8 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x5611b0ed8380 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x5611b0ed8368 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x5611b0ed8338 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x5611b0a62830 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x5611b0ed5130 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x5611b0ed50a0 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x5611b0ed5278 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5611b0ed51e8 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5611b0ed8598 <col:56, line:241:5>
|   `-ExprWithCleanups 0x5611b0ed8580 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x5611b0ed8528 <col:2, col:40> 'void'
|       |-MemberExpr 0x5611b0ed8438 <col:2> '<bound member function type>' ->schedule_after 0x5611b0ed5130
|       | `-CXXThisExpr 0x5611b0ed8428 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5611b0ed8568 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5611b0ed8550 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x5611b0ed84e8 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x5611b0ed84b8 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x5611b0ed8478 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x5611b0ed51e8 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x5611b0ed84d0 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5611b0ed8498 <col:38> 'int' 0
|-CXXMethodDecl 0x5611b0ed53c0 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5611b0ed5330 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5611b0ed8808 <col:58, line:249:5>
|   `-ExprWithCleanups 0x5611b0ed87f0 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x5611b0ed8798 <col:2, col:49> 'void'
|       |-MemberExpr 0x5611b0ed85c0 <col:2> '<bound member function type>' ->schedule_after 0x5611b0ed5130
|       | `-CXXThisExpr 0x5611b0ed85b0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5611b0ed87d8 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5611b0ed87c0 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x5611b0ed8740 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x5611b0ed8728 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5611b0ed8698 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5611b0d744b8 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x5611b0ed8780 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x5611b0ed8768 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5611b0ed8678 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x5611b0ed5330 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0ed5508 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x5611b0ed5478 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x5611b0ed89e8 <col:58, line:261:5>
|   `-ExprWithCleanups 0x5611b0ed89d0 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x5611b0ed8978 <col:2, col:38> 'void'
|       |-MemberExpr 0x5611b0ed8830 <col:2> '<bound member function type>' ->schedule_at_steady 0x5611b0ed2300
|       | `-CXXThisExpr 0x5611b0ed8820 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5611b0ed89b8 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5611b0ed89a0 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x5611b0ed8940 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5611b0ed8928 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5611b0ed8908 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5611b0c5bac0 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x5611b0ed88d8 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x5611b0ed88c0 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x5611b0ed8870 <col:21> 'Timestamp' lvalue ->_expiry_s 0x5611b0ed6368
|             |     `-CXXThisExpr 0x5611b0ed8860 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x5611b0ed88a0 <col:33> 'const Timestamp' lvalue ParmVar 0x5611b0ed5478 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x5611b0ed5650 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5611b0ed55c0 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5611b0ed8cc0 <col:58, line:270:5>
|   `-ExprWithCleanups 0x5611b0ed8ca8 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x5611b0ed8c50 <col:2, col:79> 'void'
|       |-MemberExpr 0x5611b0ed8a10 <col:2> '<bound member function type>' ->schedule_at_steady 0x5611b0ed2300
|       | `-CXXThisExpr 0x5611b0ed8a00 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5611b0ed8c90 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5611b0ed8c78 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x5611b0ed8c10 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x5611b0ed8b48 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x5611b0ed8b30 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x5611b0ed8ac0 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x5611b0ed8a90 <col:31, col:41> '<bound member function type>' .sec 0x5611b0a64328
|             | |     `-ImplicitCastExpr 0x5611b0ed8ae0 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x5611b0ed8a60 <col:31> 'Timestamp' lvalue ->_expiry_s 0x5611b0ed6368
|             | |         `-CXXThisExpr 0x5611b0ed8a50 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x5611b0ed8b18 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x5611b0ed8af8 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5611b0ed55c0 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x5611b0ed8bd8 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x5611b0ed8ba8 <col:60, col:70> '<bound member function type>' .subsec 0x5611b0a64a20
|                 `-ImplicitCastExpr 0x5611b0ed8bf8 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x5611b0ed8b78 <col:60> 'Timestamp' lvalue ->_expiry_s 0x5611b0ed6368
|                     `-CXXThisExpr 0x5611b0ed8b68 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x5611b0ed5798 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5611b0ed5708 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5611b0ed8ff8 <col:60, line:279:5>
|   `-ExprWithCleanups 0x5611b0ed8fe0 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x5611b0ed8f88 <col:2, col:65> 'void'
|       |-MemberExpr 0x5611b0ed8ce8 <col:2> '<bound member function type>' ->schedule_at_steady 0x5611b0ed2300
|       | `-CXXThisExpr 0x5611b0ed8cd8 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5611b0ed8fc8 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5611b0ed8fb0 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x5611b0ed8f50 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x5611b0ed8f38 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5611b0ed8f18 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5611b0c5bac0 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x5611b0ed8eb8 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x5611b0ed8ea0 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x5611b0ed8d28 <col:21> 'Timestamp' lvalue ->_expiry_s 0x5611b0ed6368
|             |     `-CXXThisExpr 0x5611b0ed8d18 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x5611b0ed8f00 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x5611b0ed8ee8 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x5611b0ed8e48 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x5611b0ed8e30 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x5611b0ed8e00 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5611b0d744b8 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x5611b0ed8e88 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x5611b0ed8e70 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x5611b0ed8de0 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x5611b0ed5708 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5611b0ed5860 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x5611b0ed5920 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x5611b0ed94c0 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x5611b0ed9050 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x5611b0ed9020 <col:2> '<bound member function type>' ->unschedule 0x5611b0ed5860
|   |   `-CXXThisExpr 0x5611b0ed9010 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x5611b0ed94a8 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x5611b0ed9470 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x5611b0ed9458 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5611b0ed9108 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x5611b0e65fa8 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x5611b0ed9080 <col:2> 'Timestamp' lvalue ->_expiry_s 0x5611b0ed6368
|       | `-CXXThisExpr 0x5611b0ed9070 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5611b0ed90f0 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x5611b0ed90c0 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x5611b0ed59e0 <line:304:5, line:310:5> line:304:29 used adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x5611b0ed9818 <col:42, line:310:5>
|   |-IfStmt 0x5611b0ed9660 <line:306:2, line:307:23>
|   | |-CallExpr 0x5611b0ed9590 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x5611b0ed9578 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x5611b0ed9518 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x5611b0d8f980 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x5611b0ed9650 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x5611b0ed9638 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x5611b0ed9608 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5611b0ed95f0 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x5611b0ed95c0 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x5611b0ed9808 <line:309:2, col:33>
|     `-ExprWithCleanups 0x5611b0ed97f0 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x5611b0ed97c0 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5611b0ed97a8 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x5611b0ed9768 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5611b0ed9750 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5611b0ed9720 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5611b0d747d0 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x5611b0ed9790 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x5611b0ed9700 <col:30> 'int' 500
|-CXXMethodDecl 0x5611b0ed5b20 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x5611b0ed5a90 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5611b0ed5bc8 <col:69> "" ""
|-CXXMethodDecl 0x5611b0ed5cd8 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x5611b0ed5c48 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5611b0ed5d80 <col:70> "" ""
|-CXXMethodDecl 0x5611b0ed5e90 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x5611b0ed5e00 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5611b0ed5f38 <col:71> "" ""
|-CXXMethodDecl 0x5611b0ed6048 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x5611b0ed5fb8 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5611b0ed60f0 <col:72> "" ""
|-EnumDecl 0x5611b0ed6160 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x5611b0ed6260 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x5611b0ed62b0 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5611b0ed6240 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x5611b0ed6220 <col:25> 'int' 1
|-AccessSpecDecl 0x5611b0ed62c8 <line:339:3, col:10> col:3 private
|-FieldDecl 0x5611b0ed6308 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x5611b0ed6368 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x5611b0ed63b8 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5611b0ed64e8 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x5611b0ed6fd8 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x5611b0ed65a8 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x5611b0ed6628 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x5611b0ed6688 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x5611b0ed66e8 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x5611b0ed6838 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x5611b0ed6748 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x5611b0ed6a08 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5611b0ed68f0 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x5611b0ed6970 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x5611b0ed6be0 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5611b0ed6ac8 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x5611b0ed6b48 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x5611b0ed6db8 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5611b0ed6ca0 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x5611b0ed6d20 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x5611b0ed6f88 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon.19, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon.19, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<8>
         0 |   char [8] x
           | [sizeof=8, dsize=8, align=1,
           |  nvsize=8, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5611b0eb8730 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 8
|-PackedAttr 0x5611b10c4f28 <line:167:18>
|-CXXRecordDecl 0x5611b10c4fe8 prev 0x5611b0eb8730 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x5611b10c50f8 <line:166:5, col:13> col:10 x 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array = type { [8 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array = type { [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<16>
         0 |   char [16] x
           | [sizeof=16, dsize=16, align=1,
           |  nvsize=16, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5611b0ee91a0 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 16
|-PackedAttr 0x5611b10cac58 <line:167:18>
|-CXXRecordDecl 0x5611b10cad18 prev 0x5611b0ee91a0 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x5611b10cae28 <line:166:5, col:13> col:10 x 'char [16]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array.10 = type { [16 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array.10 = type { [16 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned short>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned short * _ptr
        24 |   unsigned short _slot
           | [sizeof=32, dsize=26, align=8,
           |  nvsize=26, nvalign=8]

*** Dumping AST Record Layout
         0 | class StringArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class String> (empty)
         0 |   class StringArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5611b0e255a8 <../dummy_inc/click/args.hh:1345:1, line:1349:1> line:1345:7 referenced class StringArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5611b0e256c8 <col:1, col:7> col:7 implicit class StringArg
|-AccessSpecDecl 0x5611b0e25758 <col:19, col:25> col:19 public
|-CXXMethodDecl 0x5611b0e25950 <line:1346:5, line:1348:5> line:1346:17 used parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x5611b0e25790 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5611b0e25808 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x5611b0e25880 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5611b0e25a20 <col:79> 'const ArgContext' lvalue Var 0x5611b0e06ed8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5611b0e25bc0 <col:91, line:1348:5>
|   `-ReturnStmt 0x5611b0e25bb0 <line:1347:9, col:41>
|     `-CallExpr 0x5611b0e25b60 <col:16, col:41> 'bool'
|       |-ImplicitCastExpr 0x5611b0e25b48 <col:16> 'bool (*)(const String &, String *, String *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5611b0e25b00 <col:16> 'bool (const String &, String *, String *)' lvalue Function 0x5611b0e254f0 'cp_string' 'bool (const String &, String *, String *)'
|       |-DeclRefExpr 0x5611b0e25a88 <col:26> 'const String' lvalue ParmVar 0x5611b0e25790 'str' 'const String &'
|       |-UnaryOperator 0x5611b0e25ac8 <col:31, col:32> 'String *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x5611b0e25aa8 <col:32> 'String' lvalue ParmVar 0x5611b0e25808 'result' 'String &'
|       `-ImplicitCastExpr 0x5611b0e25b98 <col:40> 'String *' <NullToPointer>
|         `-IntegerLiteral 0x5611b0e25ae0 <col:40> 'int' 0
|-CXXConstructorDecl 0x5611b10d0348 <line:1345:7> col:7 implicit constexpr StringArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x5611b10d0420 <col:7> col:7 implicit ~StringArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5611b10d0558 <col:7> col:7 implicit constexpr StringArg 'void (const StringArg &)' inline default trivial noexcept-unevaluated 0x5611b10d0558
| `-ParmVarDecl 0x5611b10d0668 <col:7> col:7 'const StringArg &'
`-CXXConstructorDecl 0x5611b10d0708 <col:7> col:7 implicit used constexpr StringArg 'void (StringArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5611b10d0818 <col:7> col:7 'StringArg &&'
  `-CompoundStmt 0x5611b10d1470 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.StringArg = type { i8 }
  NonVirtualBaseLLVMType:%class.StringArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5611b0e25c00 <../dummy_inc/click/args.hh:1351:1, col:58> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'StringArg'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5611b0e25e58 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5611b10d0258 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5611b10d0888 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<String> &)' inline default trivial noexcept-unevaluated 0x5611b10d0888
| `-ParmVarDecl 0x5611b10d0998 <col:19> col:19 'const DefaultArg<String> &'
|-CXXConstructorDecl 0x5611b10d0a38 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<String> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5611b10d0b48 <col:19> col:19 used 'DefaultArg<String> &&'
| |-CXXCtorInitializer 'StringArg'
| | `-CXXConstructExpr 0x5611b10d1480 <col:19> 'StringArg' 'void (StringArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5611b10d1450 <col:19> 'StringArg' xvalue <UncheckedDerivedToBase (StringArg)>
| |     `-CXXStaticCastExpr 0x5611b10d1420 <col:19> 'DefaultArg<String>' xvalue static_cast<struct DefaultArg<class String> &&> <NoOp>
| |       `-DeclRefExpr 0x5611b10d13f0 <col:19> 'DefaultArg<String>' lvalue ParmVar 0x5611b10d0b48 '' 'DefaultArg<String> &&'
| `-CompoundStmt 0x5611b10d14f0 <col:19>
`-CXXDestructorDecl 0x5611b10d0be8 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5611b10d2168 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5611b10d2520 prev 0x5611b10d2168 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x5611b10d2710 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x5611b10d2618 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x5611b10d3610 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x5611b10d2890 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x5611b10d35d0 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x5611b10d3590 <col:20> 'String *' lvalue ParmVar 0x5611b10d2618 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x5611b10d28f0 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x5611b10d3670 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x5611b0e06d00 <line:853:25, line:854:9>
|-CXXMethodDecl 0x5611b10d27d0 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x5611b0ddcac0 Slot::store 'void ()' ]
| `-CompoundStmt 0x5611b10d3db8 <col:22, line:857:9>
|   `-CallExpr 0x5611b10d3d70 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x5611b10d3d58 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5611b10d3cd8 <col:13> 'void (String &, const String &)' lvalue Function 0x5611b10d3bb8 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x5611b0a9bbd8 'assign_consume')
|     |-UnaryOperator 0x5611b10d3800 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x5611b10d37e8 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x5611b10d37b8 <col:29> 'String *' lvalue ->_ptr 0x5611b10d2890
|     |     `-CXXThisExpr 0x5611b10d37a8 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x5611b10d3da0 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x5611b10d3828 <col:35> 'String':'String' lvalue ->_slot 0x5611b10d28f0
|         `-CXXThisExpr 0x5611b10d3818 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x5611b10d2890 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x5611b10d28f0 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x5611b10d2968 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x5611b10d2968
| `-ParmVarDecl 0x5611b10d2a78 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x5611b10d2b18 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x5611b10d2b18
| `-ParmVarDecl 0x5611b10d2c28 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x5611b10d2cc8 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x5611b10d2cc8
| `-ParmVarDecl 0x5611b10d2dd8 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x5611b10d2e48 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x5611b10d2e48
| `-ParmVarDecl 0x5611b10d2f58 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x5611b10d2fe0 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x5611b0ddc9c0 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x5611b10d36d8 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>
