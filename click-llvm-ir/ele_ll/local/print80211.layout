
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558f6d24ed28 prev 0x558f6d2464b8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558f6d24ee20 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x558f6d24eeb0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x558f6d24ef28 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x558f6d24efe8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x558f6d24f0b0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x558f6d24f228 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x558f6d24f160 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x558f6d24f2d0 <col:24>
| `-OptimizeNoneAttr 0x558f6d24f328 <col:34>
|-CXXMethodDecl 0x558f6d24f370 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x558f6d24f628 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x558f6d24f420 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x558f6d24f498 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x558f6d24f518 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x558f6d24f6e0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x558f6d24f718 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x558f6d24f780 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x558f6d24f808 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x558f6d24fb28 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x558f6d24f8c0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x558f6d24f938 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x558f6d24f9b0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x558f6d24fa30 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x558f6d24fc40 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x558f6d2565f8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x558f6d2565f8
| `-ParmVarDecl 0x558f6d256708 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x558f6d2567a8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x558f6d2567a8
| `-ParmVarDecl 0x558f6d2568b8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x558f6d344ba0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558f6d241cc0 prev 0x558f6d241a40 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558f6d241db8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x558f6d241e48 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x558f6d241ea8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x558f6d241f98 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x558f6d242098 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x558f6d242268 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x558f6d242118 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x558f6d242190 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x558f6d2423f8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x558f6d242330 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x558f6d2424a0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x558f6d2425d8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x558f6d242510 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x558f6d242778 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x558f6d2426b8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x558f6d242918 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x558f6d242858 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x558f6d2429c0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x558f6d242ac0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x558f6d242ba0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d242aa0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x558f6d242a80 <col:26> 'int' 1
| `-EnumConstantDecl 0x558f6d242b50 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x558f6d242bb8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558f6d242b30 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x558f6d242b10 <col:44> 'int' 2
|-CXXMethodDecl 0x558f6d242d00 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x558f6d242be8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x558f6d242c68 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x558f6d242e58 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x558f6d242dc8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x558f6d243098 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x558f6d242f18 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x558f6d242f90 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x558f6d243148 <col:20>
| `-OptimizeNoneAttr 0x558f6d2431a0 <col:30>
|-CXXMethodDecl 0x558f6d2432a8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x558f6d2431e0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x558f6d243350 <col:20>
| `-OptimizeNoneAttr 0x558f6d2433a8 <col:30>
|-CXXMethodDecl 0x558f6d2433f8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x558f6d2434c0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x558f6d2435d8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x558f6d243660 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x558f6d2436e8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x558f6d243770 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x558f6d2437f8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x558f6d243888 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x558f6d243948 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x558f6d2439d0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x558f6d243a58 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x558f6d243ae0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x558f6d243b68 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x558f6d243bf0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x558f6d243c80 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x558f6d243d40 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x558f6d243dd0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x558f6d243f20 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x558f6d243e88 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x558f6d2440b0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x558f6d243fe0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x558f6d244350 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x558f6d244168 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x558f6d2441e8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x558f6d244268 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x558f6d244408 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x558f6d244510 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x558f6d2447a0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d2444f0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x558f6d2444d0 <col:33> 'int' 0
| |-EnumConstantDecl 0x558f6d2445a0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x558f6d2447b8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d244580 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x558f6d244560 <col:32> 'int' 20
| |-EnumConstantDecl 0x558f6d244630 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x558f6d2447d0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d244610 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x558f6d2445f0 <col:38> 'int' 90
| |-EnumConstantDecl 0x558f6d2446c0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x558f6d2447e8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d2446a0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x558f6d244680 <col:35> 'int' 100
| `-EnumConstantDecl 0x558f6d244750 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x558f6d244800 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558f6d244730 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x558f6d244710 <col:32> 'int' 2000
|-CXXMethodDecl 0x558f6d244840 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x558f6d244d00 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x558f6d244b70 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x558f6d244be8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558f6d244dd0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x558f6d244f50 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x558f6d244e80 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558f6d245158 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x558f6d245008 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x558f6d245080 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558f6d245258 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x558f6d2452f8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x558f6d2453c0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x558f6d245450 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x558f6d245680 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d245430 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x558f6d245410 <col:36> 'int' EnumConstant 0x558f6d2453c0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x558f6d2454a0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x558f6d2454f0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x558f6d245540 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x558f6d245590 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x558f6d2455e0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x558f6d245630 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x558f6d245768 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x558f6d2456a8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x558f6d245830 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x558f6d2458f0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x558f6d2459b0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x558f6d245a70 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x558f6d245b88 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x558f6d245c50 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x558f6d245dd0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x558f6d245d00 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x558f6d245ef8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x558f6d2460f8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x558f6d245fa8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x558f6d246028 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x558f6d252a98 <col:54, line:127:5>
|   |-ParenExpr 0x558f6d252948 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x558f6d252918 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x558f6d252608 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x558f6d2525e0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x558f6d2525c8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x558f6d2525b0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x558f6d252580 <col:31> 'Router *' lvalue ->_router 0x558f6d2503f0
|   |   |         `-CXXThisExpr 0x558f6d252570 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x558f6d252668 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558f6d252648 <col:48> 'int' 0
|   |   `-CallExpr 0x558f6d252878 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x558f6d252860 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558f6d252840 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558f6ced6a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558f6d2528b8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d2526d8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x558f6d2528d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d2526f8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x558f6d2528e8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558f6d252730 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x558f6d252900 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558f6d252828 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558f6d252810 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558f6d2527c8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x558f6d2529e0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x558f6d252978 <col:9> 'Router *' lvalue ->_router 0x558f6d2503f0
|   | | `-CXXThisExpr 0x558f6d252968 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x558f6d2529c8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x558f6d2529a8 <col:19> 'Router *' lvalue ParmVar 0x558f6d245fa8 'r' 'Router *'
|   `-BinaryOperator 0x558f6d252a78 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x558f6d252a10 <col:9> 'int' lvalue ->_eindex 0x558f6d250458
|     | `-CXXThisExpr 0x558f6d252a00 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x558f6d252a60 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x558f6d252a40 <col:19> 'int' lvalue ParmVar 0x558f6d246028 'eindex' 'int'
|-CXXMethodDecl 0x558f6d246280 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x558f6d2461b8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x558f6d246350 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x558f6d246418 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x558f6d2464b8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x558f6d246708 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x558f6d246580 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x558f6d246600 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x558f6d2467b8 <col:20>
| `-OptimizeNoneAttr 0x558f6d246810 <col:30>
|-CXXMethodDecl 0x558f6d246918 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x558f6d246850 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x558f6d2469c0 <col:20>
| `-OptimizeNoneAttr 0x558f6d246a18 <col:30>
|-CXXMethodDecl 0x558f6d246ae8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x558f6d246a58 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x558f6d246b90 <col:20>
| `-OptimizeNoneAttr 0x558f6d246be8 <col:30>
|-CXXMethodDecl 0x558f6d246d78 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x558f6d246c20 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x558f6d246ca0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x558f6d246f08 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x558f6d246e40 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x558f6d247058 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x558f6d246fc8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x558f6d2471a8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x558f6d247118 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x558f6d2472f8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x558f6d247268 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x558f6d2475b8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x558f6d2473b0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x558f6d247430 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x558f6d2474d8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x558f6d247690 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x558f6d247750 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x558f6d247a20 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x558f6d2478d0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x558f6d247948 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x558f6d247b48 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x558f6d247d20 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x558f6d247c00 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x558f6d247c80 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x558f6d247f08 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x558f6d247de8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x558f6d247e68 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x558f6d248278 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x558f6d247fc8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x558f6d248040 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x558f6d2480c0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x558f6d252080 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x558f6d252060 <col:106> 'int' 0
| `-ParmVarDecl 0x558f6d248138 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558f6d2520b8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558f6d252098 <col:126> 'int' 0
|-CXXMethodDecl 0x558f6d2485f8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x558f6d248348 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x558f6d2483c0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x558f6d248440 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x558f6d2484b8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558f6d2520f0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558f6d2520d0 <col:114> 'int' 0
|-CXXMethodDecl 0x558f6d2489c0 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x558f6d2486d0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x558f6d248748 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x558f6d2487c8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x558f6d252108 <col:96> 'int' 0
| `-ParmVarDecl 0x558f6d248840 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558f6d252148 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558f6d252128 <col:116> 'int' 0
|-CXXMethodDecl 0x558f6d248d48 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x558f6d248a90 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x558f6d248b08 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x558f6d248b88 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x558f6d252180 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x558f6d252160 <col:109> 'int' 0
| `-ParmVarDecl 0x558f6d248c00 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558f6d2521b8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558f6d252198 <col:129> 'int' 0
|-CXXMethodDecl 0x558f6d2490c8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x558f6d248e18 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x558f6d248e90 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x558f6d248f10 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x558f6d248f88 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558f6d2521f0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558f6d2521d0 <col:117> 'int' 0
|-CXXMethodDecl 0x558f6d249458 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x558f6d2491a0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558f6d249218 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x558f6d249298 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x558f6d252208 <col:99> 'int' 0
| `-ParmVarDecl 0x558f6d249310 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558f6d252248 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558f6d252228 <col:119> 'int' 0
|-CXXMethodDecl 0x558f6d249878 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x558f6d249528 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x558f6d2495a8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x558f6d249620 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x558f6d2496a0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x558f6d252280 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x558f6d252260 <col:108> 'int' 0
| `-ParmVarDecl 0x558f6d249720 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x558f6d2522b8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x558f6d252298 <col:141> 'int' 0
|-CXXMethodDecl 0x558f6d249c98 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x558f6d249950 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x558f6d2499d0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x558f6d249a48 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x558f6d249ac8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x558f6d249b48 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x558f6d2522d0 <col:121> 'int' 0
|-CXXMethodDecl 0x558f6d24a0c8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x558f6d249d78 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x558f6d249df8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x558f6d249e70 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x558f6d249ef0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x558f6d2522f0 <col:98> 'int' 0
| `-ParmVarDecl 0x558f6d249f70 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x558f6d252310 <col:123> 'int' 0
|-CXXMethodDecl 0x558f6d24a390 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x558f6d24a1a0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x558f6d24a220 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x558f6d24a2a0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x558f6d252330 <col:80> 'int' 0
|-EnumDecl 0x558f6d24a448 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x558f6d24a550 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x558f6d24a7e0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d24a530 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x558f6d24a510 <col:42> 'int' 1
| |-EnumConstantDecl 0x558f6d24a5e0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x558f6d24a7f8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d24a5c0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x558f6d24a5a0 <col:40> 'int' 2
| |-EnumConstantDecl 0x558f6d24a670 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x558f6d24a810 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d24a650 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x558f6d24a630 <col:44> 'int' 4
| |-EnumConstantDecl 0x558f6d24a700 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x558f6d24a828 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d24a6e0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x558f6d24a6c0 <col:36> 'int' 7
| `-EnumConstantDecl 0x558f6d24a790 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x558f6d24a840 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558f6d24a770 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x558f6d24a750 <col:34> 'int' 6
|-CXXMethodDecl 0x558f6d24aaf8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x558f6d24a868 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x558f6d24a908 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x558f6d24a988 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x558f6d24aa00 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x558f6d2523e8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x558f6d2523d0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x558f6d2523b8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x558f6d252398 <col:98, col:105> 'String' (CXXTemporary 0x558f6d252398)
|           `-CXXTemporaryObjectExpr 0x558f6d252360 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x558f6d24ad98 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x558f6d24abc8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x558f6d24ac40 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x558f6d24acb8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x558f6d252498 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x558f6d252480 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x558f6d252468 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x558f6d252448 <col:94, col:101> 'String' (CXXTemporary 0x558f6d252448)
| |         `-CXXTemporaryObjectExpr 0x558f6d252410 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x558f6d252c80 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x558f6d252bf8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x558f6d252bc8 <col:9> '<bound member function type>' ->add_task_handlers 0x558f6d24aaf8
|     | `-CXXThisExpr 0x558f6d252bb8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x558f6d252c38 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x558f6d252b38 <col:27> 'Task *' lvalue ParmVar 0x558f6d24abc8 'task' 'Task *'
|     |-ImplicitCastExpr 0x558f6d252c50 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x558f6d252b58 <col:33> 'NotifierSignal *' lvalue ParmVar 0x558f6d24ac40 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x558f6d252c68 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x558f6d252b78 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x558f6d24a790 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x558f6d252b98 <col:62> 'const String' lvalue ParmVar 0x558f6d24acb8 'prefix' 'const String &'
|-CXXMethodDecl 0x558f6d24afa8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x558f6d24ae60 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x558f6d24aed8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x558f6d252548 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x558f6d252530 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x558f6d252518 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x558f6d2524f8 <col:70, col:77> 'String' (CXXTemporary 0x558f6d2524f8)
| |         `-CXXTemporaryObjectExpr 0x558f6d2524c0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x558f6d252e58 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x558f6d252dd0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x558f6d252da0 <col:9> '<bound member function type>' ->add_task_handlers 0x558f6d24aaf8
|     | `-CXXThisExpr 0x558f6d252d90 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x558f6d252e10 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x558f6d252d10 <col:27> 'Task *' lvalue ParmVar 0x558f6d24ae60 'task' 'Task *'
|     |-ImplicitCastExpr 0x558f6d252e28 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x558f6d252d30 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x558f6d252e40 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x558f6d252d50 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x558f6d24a790 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x558f6d252d70 <col:57> 'const String' lvalue ParmVar 0x558f6d24aed8 'prefix' 'const String &'
|-CXXMethodDecl 0x558f6d24b288 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x558f6d24b070 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558f6d24b0f0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558f6d24b168 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x558f6d24b538 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x558f6d24b358 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558f6d24b3d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558f6d24b458 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x558f6d24b828 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x558f6d24b608 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558f6d24b688 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558f6d24b700 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x558f6d24bad8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x558f6d24b8f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558f6d24b978 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558f6d24b9f8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x558f6d24bd88 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x558f6d24bba8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558f6d24bc28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558f6d24bca8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x558f6d24c038 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x558f6d24be58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558f6d24bed8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558f6d24bf50 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x558f6d24c2e8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x558f6d24c108 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558f6d24c188 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558f6d24c208 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x558f6d24c598 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x558f6d24c3b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558f6d24c438 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558f6d24c4b8 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x558f6d24c878 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x558f6d24c668 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558f6d24c6e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558f6d24c790 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x558f6d24cba8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x558f6d24c990 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558f6d24ca10 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558f6d24cac0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x558f6d24ce10 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x558f6d24cc78 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x558f6d24ccf8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x558f6d24cd70 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x558f6d24d0b8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x558f6d24cee0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x558f6d24cf60 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x558f6d24cfd8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x558f6d24d368 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x558f6d24d188 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558f6d24d208 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558f6d24d288 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x558f6d24d618 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x558f6d24d438 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558f6d24d4b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558f6d24d530 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x558f6d24d8c8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x558f6d24d6e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558f6d24d768 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558f6d24d7e0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x558f6d24db98 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x558f6d24d998 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558f6d24da18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558f6d24dab8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x558f6d24dec8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x558f6d24dc68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558f6d24dce8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x558f6d24dd60 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x558f6d24ddd8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558f6d252560 <col:93> 'bool' false
|-CXXMethodDecl 0x558f6d24e0b0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x558f6d24df98 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x558f6d24e018 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x558f6d24e288 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x558f6d24e170 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x558f6d24e1f0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x558f6d24e568 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x558f6d24e348 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x558f6d24e3c0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x558f6d24e440 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x558f6d24e4b8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x558f6d24e858 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x558f6d24e638 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x558f6d24e6b0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x558f6d24e730 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x558f6d24e7a8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x558f6d24ea90 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x558f6d24e930 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x558f6d24e9b0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x558f6d24ec78 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x558f6d24eb58 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x558f6d24ebd8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x558f6d24ed28 prev 0x558f6d2464b8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x558f6d24ee20 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x558f6d24eeb0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x558f6d24ef28 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x558f6d24efe8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x558f6d24f0b0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x558f6d24f228 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x558f6d24f160 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x558f6d24f2d0 <col:24>
| | `-OptimizeNoneAttr 0x558f6d24f328 <col:34>
| |-CXXMethodDecl 0x558f6d24f370 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x558f6d24f628 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x558f6d24f420 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x558f6d24f498 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x558f6d24f518 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x558f6d24f6e0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x558f6d24f718 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x558f6d24f780 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x558f6d24f808 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x558f6d24fb28 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x558f6d24f8c0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x558f6d24f938 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x558f6d24f9b0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x558f6d24fa30 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x558f6d24fc40 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x558f6d2565f8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x558f6d2565f8
| | `-ParmVarDecl 0x558f6d256708 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x558f6d2567a8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x558f6d2567a8
| | `-ParmVarDecl 0x558f6d2568b8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x558f6d344ba0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x558f6d24fcb8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x558f6d24fd58 <col:38> "" ""
|-CXXMethodDecl 0x558f6d24fde8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x558f6d24fe88 <col:44> "" ""
|-AccessSpecDecl 0x558f6d24fef8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x558f6d24ff20 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x558f6d250020 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x558f6d250070 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558f6d250000 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x558f6d24ffe0 <col:27> 'int' 4
|-FieldDecl 0x558f6d250128 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x558f6d2502d8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x558f6d250390 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x558f6d2503f0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x558f6d250458 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x558f6d2505a8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x558f6d2504e8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x558f6d250758 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x558f6d250668 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x558f6d2509a0 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x558f6d250818 <col:20> col:23 'int'
| `-ParmVarDecl 0x558f6d250898 <col:25> col:28 'int'
|-CXXMethodDecl 0x558f6d250c50 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x558f6d250a68 <col:23> col:26 'int'
| |-ParmVarDecl 0x558f6d250ae8 <col:28> col:31 'int'
| `-ParmVarDecl 0x558f6d250b60 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x558f6d250d08 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x558f6d250dd0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x558f6d250e20 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x558f6d250e70 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x558f6d251050 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x558f6d250f00 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x558f6d250f78 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558f6d2512f8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x558f6d251118 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x558f6d251198 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x558f6d251210 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x558f6d251518 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x558f6d2513c8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x558f6d251448 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x558f6d251850 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x558f6d2515d8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x558f6d251658 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x558f6d2516d0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x558f6d251750 <col:57> col:60 'int'
|-CXXMethodDecl 0x558f6d251a38 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x558f6d251920 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x558f6d2519a0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x558f6d251b88 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x558f6d251af8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x558f6d251f08 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x558f6d251c48 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x558f6d251cc8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x558f6d251d40 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x558f6d251dc0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x558f6d252020 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class Print80211
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class String _label
       112 |     struct String::rep_t _r
       112 |       const char * data
       120 |       int length
       128 |       struct String::memo_t * memo
       136 |   _Bool _timestamp
       137 |   _Bool _verbose
           | [sizeof=144, dsize=138, align=8,
           |  nvsize=138, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558f6d17e310 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x558f6d17e428 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x558f6d17e4c8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x558f6d17e528 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x558f6d17e588 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x558f6d17e638 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558f6d17e940 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558f6d17ea58 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x558f6d17eb00 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x558f6d17eb68 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x558f6d17ebf8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x558f6d181190 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x558f6d1815c8 <col:12>
|-CXXConstructorDecl 0x558f6d181298 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x558f6d1813a8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x558f6d17eb00 'data' 'const char *'
| | `-ImplicitCastExpr 0x558f6d186230 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x558f6d186200 <col:12> 'const char *const' lvalue .data 0x558f6d17eb00
| |     `-DeclRefExpr 0x558f6d1861e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x558f6d1813a8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x558f6d17eb68 'length' 'int'
| | `-ImplicitCastExpr 0x558f6d1862c0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x558f6d186290 <col:12> 'const int' lvalue .length 0x558f6d17eb68
| |     `-DeclRefExpr 0x558f6d186270 <col:12> 'const String::rep_t' lvalue ParmVar 0x558f6d1813a8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x558f6d17ebf8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x558f6d186350 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x558f6d186320 <col:12> 'String::memo_t *const' lvalue .memo 0x558f6d17ebf8
| |     `-DeclRefExpr 0x558f6d186300 <col:12> 'const String::rep_t' lvalue ParmVar 0x558f6d1813a8 '' 'const String::rep_t &'
| `-CompoundStmt 0x558f6d1863a8 <col:12>
|-CXXConstructorDecl 0x558f6d181448 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x558f6d181448
| `-ParmVarDecl 0x558f6d181558 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x558f6d189090 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x558f6d190d78 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x558f6d190e88 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x558f6d1913a0 <col:12>
|   |-BinaryOperator 0x558f6d1911b8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x558f6d191170 <col:12> 'const char *' lvalue ->data 0x558f6d17eb00
|   | | `-CXXThisExpr 0x558f6d191160 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x558f6d1911a0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x558f6d191130 <col:12> 'const char *const' lvalue .data 0x558f6d17eb00
|   |     `-DeclRefExpr 0x558f6d191110 <col:12> 'const String::rep_t' lvalue ParmVar 0x558f6d190e88 '' 'const String::rep_t &'
|   |-BinaryOperator 0x558f6d191280 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x558f6d191238 <col:12> 'int' lvalue ->length 0x558f6d17eb68
|   | | `-CXXThisExpr 0x558f6d191228 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x558f6d191268 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x558f6d1911f8 <col:12> 'const int' lvalue .length 0x558f6d17eb68
|   |     `-DeclRefExpr 0x558f6d1911d8 <col:12> 'const String::rep_t' lvalue ParmVar 0x558f6d190e88 '' 'const String::rep_t &'
|   |-BinaryOperator 0x558f6d191348 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x558f6d191300 <col:12> 'String::memo_t *' lvalue ->memo 0x558f6d17ebf8
|   | | `-CXXThisExpr 0x558f6d1912f0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x558f6d191330 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x558f6d1912c0 <col:12> 'String::memo_t *const' lvalue .memo 0x558f6d17ebf8
|   |     `-DeclRefExpr 0x558f6d1912a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x558f6d190e88 '' 'const String::rep_t &'
|   `-ReturnStmt 0x558f6d191390 <col:12>
|     `-UnaryOperator 0x558f6d191378 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558f6d191368 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x558f6d190ef8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x558f6d190ef8
  `-ParmVarDecl 0x558f6d191008 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558f6d174080 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558f6d174198 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x558f6d174228 <col:16, col:22> col:16 public
|-TypedefDecl 0x558f6d174268 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x558f6ccdcfd0 'const char *'
|   `-QualType 0x558f6ccdc521 'const char' const
|     `-BuiltinType 0x558f6ccdc520 'char'
|-TypedefDecl 0x558f6d1742f0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x558f6d1742c0 'String::const_iterator' sugar
|   |-Typedef 0x558f6d174268 'const_iterator'
|   `-PointerType 0x558f6ccdcfd0 'const char *'
|     `-QualType 0x558f6ccdc521 'const char' const
|       `-BuiltinType 0x558f6ccdc520 'char'
|-TypedefDecl 0x558f6d174460 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x558f6d1743d0 'int (String::*)() const'
|   |-RecordType 0x558f6d174110 'String'
|   | `-CXXRecord 0x558f6d174080 'String'
|   `-ParenType 0x558f6d174370 'int () const' sugar
|     `-FunctionProtoType 0x558f6d149720 'int () const' const cdecl
|       `-BuiltinType 0x558f6ccdc580 'int'
|-TypedefDecl 0x558f6d1744c8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x558f6d07ebf0 'int64_t' sugar
|   |-Typedef 0x558f6cdc8f50 'int64_t'
|   `-TypedefType 0x558f6cda0910 '__int64_t' sugar
|     |-Typedef 0x558f6cda04e0 '__int64_t'
|     `-BuiltinType 0x558f6ccdc5a0 'long'
|-TypedefDecl 0x558f6d174530 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x558f6d07eb10 'uint64_t' sugar
|   |-Typedef 0x558f6cf0f678 'uint64_t'
|   `-TypedefType 0x558f6cda09a0 '__uint64_t' sugar
|     |-Typedef 0x558f6cda0550 '__uint64_t'
|     `-BuiltinType 0x558f6ccdc640 'unsigned long'
|-TypedefDecl 0x558f6d1745c0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x558f6d174590 'String::intmax_t' sugar
|   |-Typedef 0x558f6d1744c8 'intmax_t'
|   `-TypedefType 0x558f6d07ebf0 'int64_t' sugar
|     |-Typedef 0x558f6cdc8f50 'int64_t'
|     `-TypedefType 0x558f6cda0910 '__int64_t' sugar
|       |-Typedef 0x558f6cda04e0 '__int64_t'
|       `-BuiltinType 0x558f6ccdc5a0 'long'
|-TypedefDecl 0x558f6d174650 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x558f6d174620 'String::uintmax_t' sugar
|   |-Typedef 0x558f6d174530 'uintmax_t'
|   `-TypedefType 0x558f6d07eb10 'uint64_t' sugar
|     |-Typedef 0x558f6cf0f678 'uint64_t'
|     `-TypedefType 0x558f6cda09a0 '__uint64_t' sugar
|       |-Typedef 0x558f6cda0550 '__uint64_t'
|       `-BuiltinType 0x558f6ccdc640 'unsigned long'
|-CXXConstructorDecl 0x558f6d174710 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x558f6d1748b8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x558f6d1747f8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x558f6d174a68 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x558f6d1749a8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x558f6d174bc0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x558f6d174b30 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x558f6d174dd8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x558f6d174c88 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x558f6d174d08 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x558f6d174ff8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x558f6d174ea8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x558f6d174f28 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x558f6d175218 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x558f6d1750c8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x558f6d175148 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x558f6d175438 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x558f6d1752e8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x558f6d175368 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x558f6d1755c8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x558f6d175500 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x558f6d175748 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x558f6d175688 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x558f6d1758d8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x558f6d175810 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x558f6d175a30 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x558f6d1759a0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x558f6d175b88 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x558f6d175af8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x558f6d175ce0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x558f6d175c50 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x558f6d175e68 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x558f6d175da8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x558f6d175ff8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x558f6d175f30 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x558f6d176188 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x558f6d1760c0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x558f6d176318 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x558f6d176250 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x558f6d176410 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x558f6d176538 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x558f6d1766b8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x558f6d1765f0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x558f6d176808 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x558f6d176778 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x558f6d1768b0 <col:63> "" ""
|-CXXMethodDecl 0x558f6d1769f8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x558f6d176938 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x558f6d176c08 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x558f6d176ab8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x558f6d176b38 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x558f6d176e28 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x558f6d176cd0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x558f6d176d50 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x558f6d177108 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x558f6d176ee8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x558f6d176f68 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x558f6d180c60 <col:55> 'int' 10
| `-ParmVarDecl 0x558f6d176fe0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558f6d180c80 <col:76> 'bool' true
|-CXXMethodDecl 0x558f6d1773e8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x558f6d1771d0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x558f6d177250 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x558f6d180c90 <col:56> 'int' 10
| `-ParmVarDecl 0x558f6d1772c8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558f6d180cb0 <col:77> 'bool' true
|-CXXMethodDecl 0x558f6d1774f0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x558f6d1775b8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x558f6d177680 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x558f6d177720 <col:20>
| `-OptimizeNoneAttr 0x558f6d177778 <col:30>
|-CXXConversionDecl 0x558f6d177868 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x558f6d177938 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x558f6d1779f8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x558f6d177ae8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x558f6d177ba8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x558f6d177d28 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x558f6d177c60 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x558f6d177e78 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x558f6d177de8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x558f6d178f90 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x558f6d179050 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x558f6d179298 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x558f6d179108 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x558f6d179188 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x558f6d1794f8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x558f6d179360 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x558f6d1793e0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x558f6d1795c8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x558f6d1797d8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x558f6d179680 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x558f6d179700 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x558f6d1799f8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x558f6d1798a0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x558f6d179920 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x558f6d179b88 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x558f6d179ac0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x558f6d179c78 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x558f6d179de8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x558f6d179d28 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x558f6d179ff8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x558f6d179ea8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x558f6d179f28 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x558f6d17a210 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x558f6d17a0b8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x558f6d17a130 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x558f6d17a3a0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x558f6d17a2d0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x558f6d17a5c0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x558f6d17a460 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x558f6d17a4e0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x558f6d17a710 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x558f6d17a680 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x558f6d17a8e8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x558f6d17a7d0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x558f6d17a850 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x558f6d17aa38 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x558f6d17a9a8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x558f6d17ac50 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x558f6d17aaf0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x558f6d17ab70 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x558f6d180cc0 <col:39> 'int' 0
|-CXXMethodDecl 0x558f6d17ae70 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x558f6d17ad10 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x558f6d17ad90 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x558f6d180ce0 <col:48> 'int' 0
|-CXXMethodDecl 0x558f6d17b050 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x558f6d17af30 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x558f6d17afb0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x558f6d180d00 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x558f6d17b120 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x558f6d17b1e0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x558f6d17b2a0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x558f6d17b360 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x558f6d17b420 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x558f6d17b5c8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x558f6d17b4d0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x558f6d17b748 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x558f6d17b680 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x558f6d17b8c8 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x558f6d17b808 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x558f6d17ba48 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x558f6d17b980 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x558f6d17bb90 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x558f6d17bb00 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x558f6d17bce0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x558f6d17bc50 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x558f6d17beb8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x558f6d17bda0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x558f6d17be20 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x558f6d17c098 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x558f6d17bf80 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x558f6d17c000 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x558f6d17c1e8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x558f6d17c158 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x558f6d17c3f8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x558f6d17c2a8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x558f6d17c328 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x558f6d17c558 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x558f6d17c4c0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x558f6d17c6b0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x558f6d17c618 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x558f6d17c758 <col:57> "" ""
|-CXXMethodDecl 0x558f6d17c868 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x558f6d17c7d8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x558f6d17c9b8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x558f6d17c928 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x558f6d17cb38 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x558f6d17ca70 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x558f6d17cc00 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x558f6d17ccc0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x558f6d17cd80 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x558f6d17ce20 <col:49> "" ""
|-CXXMethodDecl 0x558f6d17ceb0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x558f6d17d7b0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x558f6d17d8a0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x558f6d17d968 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x558f6d17da28 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x558f6d17dae8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x558f6d17dbe0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x558f6d17dca8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x558f6d17dd70 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x558f6d17df48 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x558f6d17de28 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x558f6d17dea8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x558f6d17e170 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x558f6d17e010 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x558f6d17e090 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x558f6d17e280 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x558f6d17e2e8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x558f6d17e310 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x558f6d17e428 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x558f6d17e4c8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x558f6d17e528 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x558f6d17e588 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x558f6d17e638 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x558f6d17e6a0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x558f6d17e8d8 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x558f6d17e928 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558f6d17e8b8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x558f6d17e7c8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x558f6d17e770 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x558f6d17e7b0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x558f6d17e790 <col:32> 'int' 8
|-CXXRecordDecl 0x558f6d17e940 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x558f6d17ea58 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x558f6d17eb00 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x558f6d17eb68 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x558f6d17ebf8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x558f6d181190 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x558f6d1815c8 <col:12>
| |-CXXConstructorDecl 0x558f6d181298 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x558f6d1813a8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x558f6d17eb00 'data' 'const char *'
| | | `-ImplicitCastExpr 0x558f6d186230 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x558f6d186200 <col:12> 'const char *const' lvalue .data 0x558f6d17eb00
| | |     `-DeclRefExpr 0x558f6d1861e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x558f6d1813a8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x558f6d17eb68 'length' 'int'
| | | `-ImplicitCastExpr 0x558f6d1862c0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x558f6d186290 <col:12> 'const int' lvalue .length 0x558f6d17eb68
| | |     `-DeclRefExpr 0x558f6d186270 <col:12> 'const String::rep_t' lvalue ParmVar 0x558f6d1813a8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x558f6d17ebf8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x558f6d186350 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x558f6d186320 <col:12> 'String::memo_t *const' lvalue .memo 0x558f6d17ebf8
| | |     `-DeclRefExpr 0x558f6d186300 <col:12> 'const String::rep_t' lvalue ParmVar 0x558f6d1813a8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x558f6d1863a8 <col:12>
| |-CXXConstructorDecl 0x558f6d181448 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x558f6d181448
| | `-ParmVarDecl 0x558f6d181558 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x558f6d189090 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x558f6d190d78 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x558f6d190e88 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x558f6d1913a0 <col:12>
| |   |-BinaryOperator 0x558f6d1911b8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x558f6d191170 <col:12> 'const char *' lvalue ->data 0x558f6d17eb00
| |   | | `-CXXThisExpr 0x558f6d191160 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x558f6d1911a0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x558f6d191130 <col:12> 'const char *const' lvalue .data 0x558f6d17eb00
| |   |     `-DeclRefExpr 0x558f6d191110 <col:12> 'const String::rep_t' lvalue ParmVar 0x558f6d190e88 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x558f6d191280 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x558f6d191238 <col:12> 'int' lvalue ->length 0x558f6d17eb68
| |   | | `-CXXThisExpr 0x558f6d191228 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x558f6d191268 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x558f6d1911f8 <col:12> 'const int' lvalue .length 0x558f6d17eb68
| |   |     `-DeclRefExpr 0x558f6d1911d8 <col:12> 'const String::rep_t' lvalue ParmVar 0x558f6d190e88 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x558f6d191348 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x558f6d191300 <col:12> 'String::memo_t *' lvalue ->memo 0x558f6d17ebf8
| |   | | `-CXXThisExpr 0x558f6d1912f0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x558f6d191330 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x558f6d1912c0 <col:12> 'String::memo_t *const' lvalue .memo 0x558f6d17ebf8
| |   |     `-DeclRefExpr 0x558f6d1912a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x558f6d190e88 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x558f6d191390 <col:12>
| |     `-UnaryOperator 0x558f6d191378 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x558f6d191368 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x558f6d190ef8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x558f6d190ef8
|   `-ParmVarDecl 0x558f6d191008 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x558f6d17ec70 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x558f6d17eeb8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x558f6d17ecd8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x558f6d17ed58 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x558f6d17edd0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x558f6d181150 <col:79, line:261:5>
|   |-BinaryOperator 0x558f6d180dc8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x558f6d180d60 <col:2, col:5> 'const char *' lvalue .data 0x558f6d17eb00
|   | | `-MemberExpr 0x558f6d180d30 <col:2> 'String::rep_t' lvalue ->_r 0x558f6d17ec70
|   | |   `-CXXThisExpr 0x558f6d180d20 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x558f6d180db0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x558f6d180d90 <col:12> 'const char *' lvalue ParmVar 0x558f6d17ecd8 'data' 'const char *'
|   |-BinaryOperator 0x558f6d180e90 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x558f6d180e28 <col:2, col:5> 'int' lvalue .length 0x558f6d17eb68
|   | | `-MemberExpr 0x558f6d180df8 <col:2> 'String::rep_t' lvalue ->_r 0x558f6d17ec70
|   | |   `-CXXThisExpr 0x558f6d180de8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x558f6d180e78 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x558f6d180e58 <col:14> 'int' lvalue ParmVar 0x558f6d17ed58 'length' 'int'
|   `-IfStmt 0x558f6d181138 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x558f6d180fb0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x558f6d180f98 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x558f6d180f78 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x558f6d180f58 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x558f6d180ef0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x558f6d17ebf8
|     |       | `-MemberExpr 0x558f6d180ec0 <col:7> 'String::rep_t' lvalue ->_r 0x558f6d17ec70
|     |       |   `-CXXThisExpr 0x558f6d180eb0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x558f6d180f40 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x558f6d180f20 <col:17> 'String::memo_t *' lvalue ParmVar 0x558f6d17edd0 'memo' 'String::memo_t *'
|     `-CallExpr 0x558f6d181110 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x558f6d1810f8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x558f6d181000 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x558f6d16b908 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x558f6d181068 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x558f6d17e4c8
|         `-ImplicitCastExpr 0x558f6d181050 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x558f6d181030 <col:27> 'String::memo_t *' lvalue ParmVar 0x558f6d17edd0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x558f6d17f168 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x558f6d17ef88 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x558f6d17f008 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x558f6d17f080 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x558f6d17ec70 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x558f6d1815d8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x558f6d181768 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x558f6d1816d0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x558f6d181640 <col:2> '<bound member function type>' ->assign_memo 0x558f6d17eeb8
|     | `-ImplicitCastExpr 0x558f6d181708 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x558f6d181630 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x558f6d181720 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x558f6d181670 <col:14> 'const char *' lvalue ParmVar 0x558f6d17ef88 'data' 'const char *'
|     |-ImplicitCastExpr 0x558f6d181738 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x558f6d181690 <col:20> 'int' lvalue ParmVar 0x558f6d17f008 'length' 'int'
|     `-ImplicitCastExpr 0x558f6d181750 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x558f6d1816b0 <col:28> 'String::memo_t *' lvalue ParmVar 0x558f6d17f080 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x558f6d17f2f8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x558f6d17f238 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x558f6d1840a0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x558f6d184020 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x558f6d183e70 <col:2> '<bound member function type>' ->assign_memo 0x558f6d17eeb8
|     | `-CXXThisExpr 0x558f6d181780 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x558f6d184058 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x558f6d183ef0 <col:14, col:19> 'const char *' lvalue .data 0x558f6d17eb00
|     |   `-MemberExpr 0x558f6d183ec0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x558f6d17ec70
|     |     `-DeclRefExpr 0x558f6d183ea0 <col:14> 'const String' lvalue ParmVar 0x558f6d17f238 'x' 'const String &'
|     |-ImplicitCastExpr 0x558f6d184070 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x558f6d183f70 <col:25, col:30> 'int' lvalue .length 0x558f6d17eb68
|     |   `-MemberExpr 0x558f6d183f40 <col:25, col:27> 'String::rep_t' lvalue ._r 0x558f6d17ec70
|     |     `-DeclRefExpr 0x558f6d183f20 <col:25> 'const String' lvalue ParmVar 0x558f6d17f238 'x' 'const String &'
|     `-ImplicitCastExpr 0x558f6d184088 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x558f6d183ff0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x558f6d17ebf8
|         `-MemberExpr 0x558f6d183fc0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x558f6d17ec70
|           `-DeclRefExpr 0x558f6d183fa0 <col:38> 'const String' lvalue ParmVar 0x558f6d17f238 'x' 'const String &'
|-CXXMethodDecl 0x558f6d17f3c0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x558f6d184a60 <col:31, line:278:5>
|   `-IfStmt 0x558f6d184a48 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x558f6d184140 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x558f6d184128 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x558f6d1840f8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x558f6d17ebf8
|     |     `-MemberExpr 0x558f6d1840c8 <col:6> 'String::rep_t' lvalue ->_r 0x558f6d17ec70
|     |       `-CXXThisExpr 0x558f6d1840b8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x558f6d184a20 <col:15, line:277:2>
|       |-ParenExpr 0x558f6d1845f0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x558f6d1845c0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x558f6d184250 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x558f6d184238 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x558f6d184220 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x558f6d1841e0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x558f6d17e4c8
|       |   |       `-ImplicitCastExpr 0x558f6d1841c8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x558f6d184198 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x558f6d17ebf8
|       |   |           `-MemberExpr 0x558f6d184168 <col:27> 'String::rep_t' lvalue ->_r 0x558f6d17ec70
|       |   |             `-CXXThisExpr 0x558f6d184158 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x558f6d1842b0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x558f6d184290 <col:54> 'int' 0
|       |   `-CallExpr 0x558f6d184520 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x558f6d184508 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x558f6d184488 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558f6ced6a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x558f6d184560 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x558f6d184398 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x558f6d184578 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x558f6d1843c8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x558f6d184590 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x558f6d184400 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x558f6d1845a8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x558f6d184470 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x558f6d184458 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x558f6d184420 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x558f6d184940 <line:274:6, line:275:22>
|       | |-CallExpr 0x558f6d184800 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x558f6d1847e8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x558f6d184760 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x558f6d16cd80 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x558f6d184730 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x558f6d17e4c8
|       | |   `-ImplicitCastExpr 0x558f6d184718 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x558f6d1846e8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x558f6d17ebf8
|       | |       `-MemberExpr 0x558f6d1846b8 <col:40> 'String::rep_t' lvalue ->_r 0x558f6d17ec70
|       | |         `-CXXThisExpr 0x558f6d1846a8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x558f6d184900 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x558f6d1848e8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x558f6d184828 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x558f6d180098 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x558f6d184928 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x558f6d184888 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x558f6d17ebf8
|       |       `-MemberExpr 0x558f6d184858 <col:15> 'String::rep_t' lvalue ->_r 0x558f6d17ec70
|       |         `-CXXThisExpr 0x558f6d184848 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x558f6d184a00 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x558f6d184998 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x558f6d17ebf8
|         | `-MemberExpr 0x558f6d184968 <col:6> 'String::rep_t' lvalue ->_r 0x558f6d17ec70
|         |   `-CXXThisExpr 0x558f6d184958 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x558f6d1849e8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x558f6d1849c8 <col:16> 'int' 0
|-CXXMethodDecl 0x558f6d17f658 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x558f6d17f478 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x558f6d17f4f8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x558f6d17f570 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x558f6d17f730 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x558f6d17f980 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x558f6d17f7e8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x558f6d17f868 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x558f6d17f8e0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x558f6d17fb68 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x558f6d17fa50 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x558f6d17fad0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x558f6d17fc68 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x558f6d184b38 <col:41, line:286:5>
|   `-ReturnStmt 0x558f6d184b28 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x558f6d184af8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x558f6d184ac0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x558f6d184aa8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x558f6d184a88 <col:46> 'int' 1
|-CXXMethodDecl 0x558f6d17ff08 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x558f6d17fd20 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x558f6d17fda0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x558f6d17fe20 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x558f6d180098 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x558f6d17ffd0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x558f6d180168 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x558f6d180338 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x558f6d180220 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x558f6d1802a0 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x558f6d1803f8 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x558f6d1804c0 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x558f6d1805c8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x558f6d180640 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x558f6d1806b8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x558f6d180720 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x558f6d180820 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x558f6d180870 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558f6d180800 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x558f6d1807e0 <col:22> 'int' 14
|-CXXMethodDecl 0x558f6d180a88 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x558f6d1808a0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x558f6d180920 <col:38> col:41 'int'
| `-ParmVarDecl 0x558f6d1809a0 <col:43> col:46 'int'
|-FriendDecl 0x558f6d180b90 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x558f6d180c20 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558f6d259768 <../elements/local/print80211.hh:34:1, line:52:1> line:34:7 class Print80211 definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x558f6d2598c8 <col:1, col:7> col:7 implicit referenced class Print80211
|-AccessSpecDecl 0x558f6d259958 <col:37, col:43> col:37 public
|-CXXConstructorDecl 0x558f6d2599e0 <line:36:3, col:14> col:3 Print80211 'void ()'
|-CXXDestructorDecl 0x558f6d259ad0 <line:37:3, col:15> col:3 ~Print80211 'void ()' noexcept-unevaluated 0x558f6d259ad0
| `-Overrides: [ 0x558f6d241f98 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x558f6d259c00 <line:39:3, col:57> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x558f6d2433f8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x558f6d25a748 <col:34, col:57>
|   `-ReturnStmt 0x558f6d25a738 <col:36, col:43>
|     `-ImplicitCastExpr 0x558f6d25a720 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x558f6d25a6f8 <col:43> 'const char [11]' lvalue "Print80211"
|-CXXMethodDecl 0x558f6d259cc8 <line:40:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x558f6d2434c0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x558f6d25a7a8 <col:34, col:54>
|   `-ReturnStmt 0x558f6d25a798 <col:36, col:43>
|     `-ImplicitCastExpr 0x558f6d25a780 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x558f6d25a760 <col:43> 'const char []' lvalue Var 0x558f6d243770 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x558f6d259fa0 <line:42:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x558f6d244d00 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x558f6d259e50 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x558f6d259ec8 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x558f6d25a070 <line:43:3, col:52> col:8 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x558f6d247750 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x558f6d25a7e0 <col:37, col:52>
|   `-ReturnStmt 0x558f6d25a7d0 <col:39, col:46>
|     `-CXXBoolLiteralExpr 0x558f6d25a7c0 <col:46> 'bool' true
|-CXXMethodDecl 0x558f6d25a1b0 <line:45:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x558f6d2425d8 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x558f6d25a120 <col:25, col:32> col:33 'Packet *'
|-AccessSpecDecl 0x558f6d25a258 <line:47:2, col:9> col:2 private
|-FieldDecl 0x558f6d25a290 <line:49:3, col:10> col:10 _label 'String'
|-FieldDecl 0x558f6d25a2f0 <line:50:3, col:8> col:8 _timestamp 'bool'
|-FieldDecl 0x558f6d25a350 <line:51:3, col:8> col:8 _verbose 'bool'
|-CXXConstructorDecl 0x558f6d25a3c8 <line:34:7> col:7 implicit Print80211 'void (const Print80211 &)' inline default_delete noexcept-unevaluated 0x558f6d25a3c8
| `-ParmVarDecl 0x558f6d25a4d8 <col:7> col:7 'const Print80211 &'
`-CXXMethodDecl 0x558f6d25a578 <col:7> col:7 implicit operator= 'Print80211 &(const Print80211 &)' inline default_delete noexcept-unevaluated 0x558f6d25a578
  `-ParmVarDecl 0x558f6d25a688 <col:7> col:7 'const Print80211 &'

Layout: <CGRecordLayout
  LLVMType:%class.Print80211 = type <{ %class.Element.base, [4 x i8], %class.String, i8, i8, [6 x i8] }>
  NonVirtualBaseLLVMType:%class.Print80211.base = type <{ %class.Element.base, [4 x i8], %class.String, i8, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558f6d287970 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x558f6d287b48 prev 0x558f6d287970 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x558f6d287bd8 <col:46, col:52> col:46 public
|-TypedefDecl 0x558f6d287c00 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x558f6ccdc580 'int'
|-TypedefDecl 0x558f6d289560 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x558f6d289510 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x558f6d2894f0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x558f6d287e18 'type'
|     `-SubstTemplateTypeParmType 0x558f6d287de0 'String' sugar
|       |-TemplateTypeParmType 0x558f6d13a240 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558f6d13a1f0 'T'
|       `-RecordType 0x558f6d174110 'String'
|         `-CXXRecord 0x558f6d174080 'String'
|-TypedefDecl 0x558f6d289618 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x558f6d2895e0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x558f6d2895c0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x558f6d289560 'type'
|     `-ElaboratedType 0x558f6d289510 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x558f6d2894f0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x558f6d287e18 'type'
|         `-SubstTemplateTypeParmType 0x558f6d287de0 'String' sugar
|           |-TemplateTypeParmType 0x558f6d13a240 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x558f6d13a1f0 'T'
|           `-RecordType 0x558f6d174110 'String'
|             `-CXXRecord 0x558f6d174080 'String'
|-CXXMethodDecl 0x558f6d289798 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x558f6d2896a8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x558f6d289888 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x558f6d289968 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x558f6d289968
|-CXXMethodDecl 0x558f6d289c38 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x558f6d289b40 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x558f6d289e78 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x558f6d289cf0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558f6d289d68 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558f6d28a048 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x558f6d289f38 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558f6d289fb0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558f6d28a1a8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x558f6d28a278 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x558f6d28a4c8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x558f6d28a338 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x558f6d28a3b0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558f6d28a728 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x558f6d28a598 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x558f6d28a610 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558f6d28a8e8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x558f6d28a7f8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558f6d28aab8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x558f6d28a9b0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558f6d28ab70 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x558f6d28ac20 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x558f6d28ae58 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x558f6d28acd0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558f6d28ad48 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558f6d28b0f8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x558f6d28b000 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x558f6d28b1c0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x558f6d28b210 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x558f6d28b260 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558f6d244970 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x558f6d2863d8 prev 0x558f6d244970 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x558f6d2878e0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x558f6d287890 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x558f6d287870 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x558f6d287720 'type'
|     `-SubstTemplateTypeParmType 0x558f6d2875b0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x558f6d10ff70 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x558f6d10ff18 'F'
|       `-RecordType 0x558f6d287210 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x558f6d287130 'typed_array_memory'
|-FieldDecl 0x558f6d28b2b0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x558f6d28b300 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x558f6d28b338 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x558f6d286470 'String' sugar
|   |-TemplateTypeParmType 0x558f6d146500 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x558f6d1464a8 'T'
|   `-RecordType 0x558f6d174110 'String'
|     `-CXXRecord 0x558f6d174080 'String'
|-TypedefDecl 0x558f6d28b3c8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x558f6d28b390 'String &'
|   `-SubstTemplateTypeParmType 0x558f6d286470 'String' sugar
|     |-TemplateTypeParmType 0x558f6d146500 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558f6d1464a8 'T'
|     `-RecordType 0x558f6d174110 'String'
|       `-CXXRecord 0x558f6d174080 'String'
|-TypedefDecl 0x558f6d28b458 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x558f6d28b420 'const String &'
|   `-QualType 0x558f6d286471 'const String' const
|     `-SubstTemplateTypeParmType 0x558f6d286470 'String' sugar
|       |-TemplateTypeParmType 0x558f6d146500 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558f6d1464a8 'T'
|       `-RecordType 0x558f6d174110 'String'
|         `-CXXRecord 0x558f6d174080 'String'
|-TypedefDecl 0x558f6d28b4e8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x558f6d28b4b0 'String *'
|   `-SubstTemplateTypeParmType 0x558f6d286470 'String' sugar
|     |-TemplateTypeParmType 0x558f6d146500 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558f6d1464a8 'T'
|     `-RecordType 0x558f6d174110 'String'
|       `-CXXRecord 0x558f6d174080 'String'
|-TypedefDecl 0x558f6d28b578 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x558f6d28b540 'const String *'
|   `-QualType 0x558f6d286471 'const String' const
|     `-SubstTemplateTypeParmType 0x558f6d286470 'String' sugar
|       |-TemplateTypeParmType 0x558f6d146500 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558f6d1464a8 'T'
|       `-RecordType 0x558f6d174110 'String'
|         `-CXXRecord 0x558f6d174080 'String'
|-TypedefDecl 0x558f6d28c1d0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x558f6d28c180 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x558f6d28c160 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x558f6d28c098 'type'
|     `-LValueReferenceType 0x558f6d28c060 'const String &'
|       `-QualType 0x558f6d28be01 'const String' const
|         `-SubstTemplateTypeParmType 0x558f6d28be00 'String' sugar
|           |-TemplateTypeParmType 0x558f6d11af80 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x558f6d11af28 'T'
|           `-RecordType 0x558f6d174110 'String'
|             `-CXXRecord 0x558f6d174080 'String'
|-TypedefDecl 0x558f6d28c238 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x558f6d28b420 'const String &'
|   `-QualType 0x558f6d286471 'const String' const
|     `-SubstTemplateTypeParmType 0x558f6d286470 'String' sugar
|       |-TemplateTypeParmType 0x558f6d146500 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558f6d1464a8 'T'
|       `-RecordType 0x558f6d174110 'String'
|         `-CXXRecord 0x558f6d174080 'String'
|-TypedefDecl 0x558f6d28c290 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x558f6ccdc580 'int'
|-TypedefDecl 0x558f6d28c2f8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x558f6d28b4b0 'String *'
|   `-SubstTemplateTypeParmType 0x558f6d286470 'String' sugar
|     |-TemplateTypeParmType 0x558f6d146500 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558f6d1464a8 'T'
|     `-RecordType 0x558f6d174110 'String'
|       `-CXXRecord 0x558f6d174080 'String'
|-TypedefDecl 0x558f6d28c360 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x558f6d28b540 'const String *'
|   `-QualType 0x558f6d286471 'const String' const
|     `-SubstTemplateTypeParmType 0x558f6d286470 'String' sugar
|       |-TemplateTypeParmType 0x558f6d146500 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558f6d1464a8 'T'
|       `-RecordType 0x558f6d174110 'String'
|         `-CXXRecord 0x558f6d174080 'String'
|-EnumDecl 0x558f6d28c3b8 <line:134:5> col:5
| `-EnumConstantDecl 0x558f6d28c4b0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x558f6d28c490 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x558f6d1476c8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x558f6d1476a0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x558f6d147680 <col:40> 'int' 1
|-CXXConstructorDecl 0x558f6d28c538 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x558f6d28c7c8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x558f6d28c5f0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558f6d28c690 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x558f6d28ca58 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x558f6d28c940 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x558f6d28cd18 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x558f6d28cc00 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x558f6d28d030 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x558f6d28cf10 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x558f6d28d340 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x558f6d28d220 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x558f6d28d630 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x558f6d28d478 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558f6d28d4f0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x558f6d28d758 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x558f6d28d808 <col:20> Inherited
| `-OptimizeNoneAttr 0x558f6d28d860 <col:30> Inherited
|-CXXMethodDecl 0x558f6d28d8a8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x558f6d28d958 <col:20> Inherited
| `-OptimizeNoneAttr 0x558f6d28d9b0 <col:30> Inherited
|-CXXMethodDecl 0x558f6d28da78 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x558f6d28db28 <col:20> Inherited
| `-OptimizeNoneAttr 0x558f6d28db80 <col:30> Inherited
|-CXXMethodDecl 0x558f6d28dbc8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x558f6d28dc78 <col:20> Inherited
| `-OptimizeNoneAttr 0x558f6d28dcd0 <col:30> Inherited
|-CXXMethodDecl 0x558f6d28dd18 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x558f6d28ddc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x558f6d28de20 <col:30> Inherited
|-CXXMethodDecl 0x558f6d28de68 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x558f6d28df18 <col:20> Inherited
| `-OptimizeNoneAttr 0x558f6d28df70 <col:30> Inherited
|-CXXMethodDecl 0x558f6d28df98 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x558f6d28e048 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x558f6d28e0f8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x558f6d28e2b8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x558f6d28e1a8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558f6d28e220 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x558f6d28e408 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x558f6d28e378 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x558f6d28e5b8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x558f6d28e4c0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x558f6d28e670 <col:20>
| `-OptimizeNoneAttr 0x558f6d28e6c8 <col:30>
|-CXXMethodDecl 0x558f6d28e7e8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x558f6d28e6f0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x558f6d28e8a0 <col:20>
| `-OptimizeNoneAttr 0x558f6d28e8f8 <col:30>
|-CXXMethodDecl 0x558f6d28e9b0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x558f6d28e920 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558f6d28eaf8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x558f6d28ea68 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558f6d28ec28 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x558f6d28ed28 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x558f6d28edf8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x558f6d28eec8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x558f6d28f008 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x558f6d28ef78 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558f6d28f150 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x558f6d28f0c0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558f6d28f298 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x558f6d28f208 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x558f6d28f350 <col:48> Inherited "" ""
|-CXXMethodDecl 0x558f6d28f450 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x558f6d28f3c0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x558f6d28f508 <col:60> Inherited "" ""
|-CXXMethodDecl 0x558f6d28f5c8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x558f6d28f6c8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x558f6d28f848 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x558f6d28f788 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x558f6d290008 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x558f6d28f900 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x558f6d28ff68 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x558f6d28fe68 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x558f6d2900e8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x558f6d290238 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x558f6d2901a8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x558f6d2902f0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x558f6d290538 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x558f6d2903b0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x558f6d290428 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x558f6d2906c8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x558f6d290608 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x558f6d2908d8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x558f6d290790 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x558f6d290808 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x558f6d290998 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x558f6d290bf8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x558f6d290b00 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x558f6d290cc8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x558f6d290cc8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558f6d30f7b8 prev 0x558f6d2ad8a8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558f6d30f8b0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x558f6d30f940 <col:22, col:28> col:22 public
|-EnumDecl 0x558f6d30f968 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x558f6d30fa88 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x558f6d30fa68 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x558f6d30fa50 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x558f6d30fa30 <col:14> 'int' 999
| |-EnumConstantDecl 0x558f6d30fb30 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x558f6d30fb10 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x558f6d30faf8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x558f6d30fad8 <col:14> 'int' 1
| |-EnumConstantDecl 0x558f6d30fbc0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x558f6d30fba0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x558f6d30fb80 <col:17> 'int' 0
| |-EnumConstantDecl 0x558f6d30fc50 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x558f6d30fc30 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x558f6d30fc10 <col:13> 'int' 1
| |-EnumConstantDecl 0x558f6d30fce0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x558f6d30fcc0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x558f6d30fca0 <col:16> 'int' 2
| |-EnumConstantDecl 0x558f6d30fd70 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x558f6d30fd50 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x558f6d30fd30 <col:13> 'int' 3
| |-EnumConstantDecl 0x558f6d30fe00 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x558f6d30fde0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x558f6d30fdc0 <col:15> 'int' 4
| |-EnumConstantDecl 0x558f6d30fe90 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x558f6d30fe70 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x558f6d30fe50 <col:14> 'int' 5
| |-EnumConstantDecl 0x558f6d30ff20 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x558f6d30ff00 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x558f6d30fee0 <col:12> 'int' 6
| `-EnumConstantDecl 0x558f6d30ffb0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x558f6d30ff90 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x558f6d30ff70 <col:13> 'int' 7
|-VarDecl 0x558f6d310020 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x558f6d3100a8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x558f6d310130 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x558f6d3101b8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x558f6d310240 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x558f6d3102c8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x558f6d310350 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x558f6d3103d8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x558f6d310460 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x558f6d3104e8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x558f6d310570 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x558f6d310670 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x558f6d315978 '_nerrors' 'int'
| | `-IntegerLiteral 0x558f6d316108 <line:128:13> 'int' 0
| `-CompoundStmt 0x558f6d316178 <col:16, line:129:5>
|-CXXDestructorDecl 0x558f6d310760 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x558f6d316188 <col:29, line:132:5>
|-CXXMethodDecl 0x558f6d310918 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x558f6d310850 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558f6d3109e0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x558f6d310ac8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x558f6d3161e0 <col:44, line:161:5>
|   `-ReturnStmt 0x558f6d3161d0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x558f6d3161b8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x558f6d316198 <col:9> 'ErrorHandler *' lvalue Var 0x558f6d3159d8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x558f6d310c08 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x558f6d310b78 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558f6d310cd0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x558f6d316240 <col:43, line:173:5>
|   `-ReturnStmt 0x558f6d316230 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x558f6d316218 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x558f6d3161f8 <col:9> 'ErrorHandler *' lvalue Var 0x558f6d315a50 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x558f6d310d88 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x558f6d310e08 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x558f6d310f18 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x558f6d310e88 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x558f6d311068 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x558f6d310fd8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x558f6d3111c0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x558f6d311128 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x558f6d311318 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x558f6d311280 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x558f6d311470 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x558f6d3113d8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x558f6d311680 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x558f6d311528 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x558f6d3115a8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x558f6d311858 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x558f6d311740 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x558f6d3117c0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x558f6d311a78 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x558f6d311918 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x558f6d311998 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x558f6d311c58 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x558f6d311b38 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x558f6d311bb8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x558f6d311e38 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x558f6d311d18 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x558f6d311d98 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x558f6d311fc0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x558f6d311ef8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x558f6d312190 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x558f6d312078 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x558f6d3120f0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x558f6d316498 <col:57, line:234:5>
|   `-ReturnStmt 0x558f6d316488 <line:233:2, col:41>
|     `-ExprWithCleanups 0x558f6d316470 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x558f6d316418 <col:9, col:41> 'int'
|         |-MemberExpr 0x558f6d3163e8 <col:9> '<bound member function type>' ->xmessage 0x558f6d311fc0
|         | `-CXXThisExpr 0x558f6d3163d8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x558f6d316458 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x558f6d316440 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x558f6d3163b8 <col:18, col:40> 'String' (CXXTemporary 0x558f6d3163b8)
|               `-CallExpr 0x558f6d316380 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x558f6d316368 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x558f6d3162e0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x558f6d314188 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x558f6d316300 <col:31> 'const String' lvalue ParmVar 0x558f6d3120f0 'str' 'const String &'
|                 `-DeclRefExpr 0x558f6d316320 <col:36> 'const String' lvalue ParmVar 0x558f6d312078 'anno' 'const String &'
|-CXXMethodDecl 0x558f6d312470 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x558f6d312250 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x558f6d3122d0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x558f6d312348 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x558f6d316728 <col:68, line:243:5>
|   `-ReturnStmt 0x558f6d316718 <line:242:2, col:41>
|     `-ExprWithCleanups 0x558f6d316700 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x558f6d3166a0 <col:9, col:41> 'int'
|         |-MemberExpr 0x558f6d316670 <col:9> '<bound member function type>' ->xmessage 0x558f6d312190
|         | `-CXXThisExpr 0x558f6d316660 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x558f6d316538 <col:18> 'const String' lvalue ParmVar 0x558f6d312250 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x558f6d3166e8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x558f6d3166d0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x558f6d316640 <col:24, col:40> 'String' (CXXTemporary 0x558f6d316640)
|               `-CXXMemberCallExpr 0x558f6d3165d8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x558f6d316568 <col:24> '<bound member function type>' ->vformat 0x558f6d313650
|                 | `-CXXThisExpr 0x558f6d316558 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x558f6d316608 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x558f6d316598 <col:32> 'const char *' lvalue ParmVar 0x558f6d3122d0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x558f6d316620 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x558f6d3165b8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x558f6d312348 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x558f6d312710 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x558f6d312538 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x558f6d3125b0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x558f6d312628 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x558f6d316a68 <col:23, line:254:5>
|   `-ReturnStmt 0x558f6d316a58 <line:253:2, col:71>
|     `-ExprWithCleanups 0x558f6d316a40 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x558f6d3169e0 <col:9, col:71> 'int'
|         |-MemberExpr 0x558f6d3169b0 <col:9> '<bound member function type>' ->xmessage 0x558f6d312190
|         | `-CXXThisExpr 0x558f6d3169a0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x558f6d316a28 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x558f6d316a10 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x558f6d316960 <col:18, col:65> 'String' (CXXTemporary 0x558f6d316960)
|         |     `-CallExpr 0x558f6d3168f8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x558f6d3168e0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x558f6d3167c8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x558f6d314188 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x558f6d3167e8 <col:31> 'const String' lvalue ParmVar 0x558f6d3125b0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x558f6d316940 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x558f6d316928 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x558f6d3168c0 <col:37, col:64> 'String' (CXXTemporary 0x558f6d3168c0)
|         |             `-CallExpr 0x558f6d316890 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x558f6d316878 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x558f6d316808 <col:37> 'String (const String &)' lvalue CXXMethod 0x558f6d3147d8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x558f6d316828 <col:56> 'const String' lvalue ParmVar 0x558f6d312538 'landmark' 'const String &'
|         `-DeclRefExpr 0x558f6d316980 <col:68> 'const String' lvalue ParmVar 0x558f6d312628 'str' 'const String &'
|-CXXMethodDecl 0x558f6d312a90 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x558f6d3127d8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x558f6d312850 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x558f6d3128d0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x558f6d312948 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x558f6d316d20 <col:34, line:267:5>
|   `-ReturnStmt 0x558f6d316d10 <line:266:2, col:51>
|     `-ExprWithCleanups 0x558f6d316cf8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x558f6d316c90 <col:9, col:51> 'int'
|         |-MemberExpr 0x558f6d316c60 <col:9> '<bound member function type>' ->xmessage 0x558f6d312710
|         | `-CXXThisExpr 0x558f6d316c50 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x558f6d316b08 <col:18> 'const String' lvalue ParmVar 0x558f6d3127d8 'landmark' 'const String &'
|         |-DeclRefExpr 0x558f6d316b28 <col:28> 'const String' lvalue ParmVar 0x558f6d312850 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x558f6d316ce0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x558f6d316cc8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x558f6d316c30 <col:34, col:50> 'String' (CXXTemporary 0x558f6d316c30)
|               `-CXXMemberCallExpr 0x558f6d316bc8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x558f6d316b58 <col:34> '<bound member function type>' ->vformat 0x558f6d313650
|                 | `-CXXThisExpr 0x558f6d316b48 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x558f6d316bf8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x558f6d316b88 <col:42> 'const char *' lvalue ParmVar 0x558f6d3128d0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x558f6d316c10 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x558f6d316ba8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x558f6d312948 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x558f6d312ba0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x558f6d316da0 <col:25, line:288:5>
|   `-ReturnStmt 0x558f6d316d90 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x558f6d316d78 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x558f6d316d48 <col:9> 'const int' lvalue ->_nerrors 0x558f6d315978
|         `-CXXThisExpr 0x558f6d316d38 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x558f6d312db0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x558f6d312c58 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x558f6d312cd8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x558f6d313098 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x558f6d312e78 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x558f6d312ef8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x558f6d312f70 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x558f6d313230 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x558f6d313168 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x558f6d313478 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x558f6d3132f0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x558f6d313368 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x558f6d317000 <col:58, line:357:5>
|   `-ReturnStmt 0x558f6d316ff0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x558f6d316fd8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x558f6d316fa8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x558f6d316f90 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x558f6d316f70 <col:9, col:29> 'String' (CXXTemporary 0x558f6d316f70)
|             `-CallExpr 0x558f6d316f00 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x558f6d316ee8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x558f6d316e68 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x558f6d313098 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x558f6d316e08 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x558f6d316f38 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x558f6d316e28 <col:21> 'const char *' lvalue ParmVar 0x558f6d3132f0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x558f6d316f50 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x558f6d316e48 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x558f6d313368 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x558f6d313650 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x558f6d313540 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x558f6d3135b8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x558f6d3137a8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x558f6d313718 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x558f6d3138f0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x558f6d313860 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x558f6d313b90 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x558f6d3139a8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x558f6d313a28 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x558f6d313aa0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x558f6d313cf0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x558f6d313c60 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x558f6d317118 <col:37, line:441:5>
|   `-IfStmt 0x558f6d317100 <line:439:2, line:440:8>
|     |-BinaryOperator 0x558f6d317088 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x558f6d317058 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x558f6d317018 <col:6> 'int' lvalue ParmVar 0x558f6d313c60 'level' 'int'
|     | `-ImplicitCastExpr 0x558f6d317070 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x558f6d317038 <col:15> 'ErrorHandler::Level' EnumConstant 0x558f6d30fd70 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x558f6d3170e8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x558f6d3170b8 <col:8> 'int' lvalue ->_nerrors 0x558f6d315978
|         `-CXXThisExpr 0x558f6d3170a8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x558f6d313db8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x558f6d3171b0 <col:26, line:448:5>
|   `-BinaryOperator 0x558f6d317190 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x558f6d317140 <col:2> 'int' lvalue ->_nerrors 0x558f6d315978
|     | `-CXXThisExpr 0x558f6d317130 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x558f6d317170 <col:13> 'int' 0
|-CXXMethodDecl 0x558f6d313f80 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x558f6d313e70 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x558f6d313ee8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x558f6d314188 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x558f6d314040 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x558f6d3140b8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x558f6d314438 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x558f6d314248 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x558f6d3142c8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x558f6d314348 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x558f6d3144f0 <col:59> 0 0
|-CXXMethodDecl 0x558f6d314688 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x558f6d314568 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x558f6d3145e8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x558f6d317820 <col:70, line:534:5>
|   |-DeclStmt 0x558f6d317320 <line:528:2, col:20>
|   | |-VarDecl 0x558f6d3171d8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x558f6d317240 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x558f6d317278 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x558f6d3172e0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x558f6d3173f0 <line:529:2, col:23>
|   | `-VarDecl 0x558f6d317350 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x558f6d3173d8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x558f6d3173b8 <col:18> 'const char *' lvalue ParmVar 0x558f6d314568 'begin' 'const char *'
|   |-DoStmt 0x558f6d3177b8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x558f6d3176e8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x558f6d3176d0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x558f6d3176b0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x558f6d317408 <col:6> 'const char *' lvalue Var 0x558f6d317350 'x' 'const char *'
|   | |     `-CallExpr 0x558f6d317600 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x558f6d3175e8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x558f6d3175a0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x558f6d315e50 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x558f6d317668 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x558f6d317650 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x558f6d3174c0 <col:20, col:27> 'String' (CXXTemporary 0x558f6d3174c0)
|   | |       |     `-CXXTemporaryObjectExpr 0x558f6d317488 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x558f6d317680 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x558f6d3174e0 <col:30> 'const char *' lvalue Var 0x558f6d317350 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x558f6d317698 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x558f6d317500 <col:33> 'const char *' lvalue ParmVar 0x558f6d3145e8 'end' 'const char *'
|   | |       |-UnaryOperator 0x558f6d317540 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x558f6d317520 <col:39> 'String' lvalue Var 0x558f6d3171d8 'name' 'String'
|   | |       |-UnaryOperator 0x558f6d317578 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x558f6d317558 <col:46> 'String' lvalue Var 0x558f6d317278 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x558f6d317590 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x558f6d3177a0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x558f6d317788 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x558f6d317768 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x558f6d317738 <col:11> '<bound member function type>' .operator int (String::*)() const 0x558f6d177868
|   |         `-ImplicitCastExpr 0x558f6d317720 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x558f6d317700 <col:11> 'String' lvalue Var 0x558f6d3171d8 'name' 'String'
|   `-ReturnStmt 0x558f6d317810 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x558f6d3177f8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x558f6d3177d8 <col:9> 'const char *' lvalue Var 0x558f6d317350 'x' 'const char *'
|-CXXMethodDecl 0x558f6d3147d8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x558f6d314748 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x558f6d317e28 <col:55, line:550:5>
|   `-IfStmt 0x558f6d317e00 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x558f6d317a60 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x558f6d317a48 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x558f6d317a30 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x558f6d317a10 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x558f6d3179e0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x558f6d177868
|     | |       `-DeclRefExpr 0x558f6d317880 <col:6> 'const String' lvalue ParmVar 0x558f6d314748 'x' 'const String &'
|     | `-BinaryOperator 0x558f6d3179c0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x558f6d317990 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x558f6d317940 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x558f6d317928 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x558f6d3178e0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x558f6d18d0f0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x558f6d3178a0 <col:11> 'const String' lvalue ParmVar 0x558f6d314748 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x558f6d3178c0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x558f6d3179a8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x558f6d317978 <col:19> 'char' 123
|     |-ReturnStmt 0x558f6d317ad0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x558f6d317aa0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x558f6d317a80 <col:13> 'const String' lvalue ParmVar 0x558f6d314748 'x' 'const String &'
|     `-IfStmt 0x558f6d317dd8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x558f6d317b68 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x558f6d317b50 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x558f6d317b30 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x558f6d317b00 <col:11> '<bound member function type>' .operator int (String::*)() const 0x558f6d177868
|       |       `-DeclRefExpr 0x558f6d317ae0 <col:11> 'const String' lvalue ParmVar 0x558f6d314748 'x' 'const String &'
|       |-ReturnStmt 0x558f6d317cf0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x558f6d317cd8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x558f6d317ca8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x558f6d317c90 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x558f6d317c70 <col:13, col:29> 'String' (CXXTemporary 0x558f6d317c70)
|       |         `-CallExpr 0x558f6d317c20 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x558f6d317c08 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x558f6d317b80 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x558f6d313f80 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x558f6d317c50 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x558f6d317ba0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x558f6d317bc0 <col:28> 'const String' lvalue ParmVar 0x558f6d314748 'x' 'const String &'
|       `-ReturnStmt 0x558f6d317dc8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x558f6d317db0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x558f6d317d80 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x558f6d317d68 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x558f6d317d48 <col:13, col:20> 'String' (CXXTemporary 0x558f6d317d48)
|                 `-CXXTemporaryObjectExpr 0x558f6d317d10 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x558f6d3149a0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x558f6d314890 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x558f6d314908 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558f6d3160f8 <col:71> 'bool' false
|-CXXRecordDecl 0x558f6d314a50 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x558f6d314d48 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x558f6d314ce0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x558f6d314c80 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x558f6d314c40 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x558f6d174110 'String'
|       | `-CXXRecord 0x558f6d174080 'String'
|       |-BuiltinType 0x558f6ccdc580 'int'
|       `-DecayedType 0x558f6d2ae8f0 '__va_list_tag *' sugar
|         |-TypedefType 0x558f6d2ae8c0 'va_list' sugar
|         | |-Typedef 0x558f6d085b00 'va_list'
|         | `-TypedefType 0x558f6d085ab0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x558f6d07eea8 '__gnuc_va_list'
|         |   `-TypedefType 0x558f6d07ee10 '__builtin_va_list' sugar
|         |     |-Typedef 0x558f6cd1dd38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x558f6cd1dce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x558f6ccdd2d0 '__va_list_tag'
|         |         `-CXXRecord 0x558f6ccdd238 '__va_list_tag'
|         `-PointerType 0x558f6ce1f640 '__va_list_tag *'
|           `-RecordType 0x558f6ccdd2d0 '__va_list_tag'
|             `-CXXRecord 0x558f6ccdd238 '__va_list_tag'
|-EnumDecl 0x558f6d314da0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x558f6d314ea0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558f6d315400 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d314e80 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x558f6d314e60 <col:16> 'int' 1
| |-EnumConstantDecl 0x558f6d314f30 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558f6d315418 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d314f10 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x558f6d314ef0 <col:21> 'int' 2
| |-EnumConstantDecl 0x558f6d314fc0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558f6d315430 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d314fa0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x558f6d314f80 <col:22> 'int' 4
| |-EnumConstantDecl 0x558f6d315050 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558f6d315448 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d315030 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x558f6d315010 <col:17> 'int' 8
| |-EnumConstantDecl 0x558f6d3150e0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558f6d315460 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d3150c0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x558f6d3150a0 <col:22> 'int' 16
| |-EnumConstantDecl 0x558f6d315170 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558f6d315478 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d315150 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x558f6d315130 <col:19> 'int' 32
| |-EnumConstantDecl 0x558f6d315200 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558f6d315490 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d3151e0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x558f6d3151c0 <col:17> 'int' 64
| |-EnumConstantDecl 0x558f6d315290 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558f6d3154a8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d315270 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x558f6d315250 <col:14> 'int' 128
| |-EnumConstantDecl 0x558f6d315320 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558f6d3154c0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d315300 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x558f6d3152e0 <col:16> 'int' 256
| `-EnumConstantDecl 0x558f6d3153b0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x558f6d3154d8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558f6d315390 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x558f6d315370 <col:12> 'int' 1024
|-CXXMethodDecl 0x558f6d3156e8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x558f6d315500 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x558f6d3155a0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x558f6d315870 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x558f6d3157a8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x558f6d315918 <line:580:3, col:10> col:3 private
|-FieldDecl 0x558f6d315978 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x558f6d3159d8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x558f6d315a50 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x558f6d315e50 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x558f6d315ac8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x558f6d315b48 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x558f6d315bc8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x558f6d315c40 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x558f6d315cb8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x558f6d315d30 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x558f6d315f78 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x558f6d315f78
| `-ParmVarDecl 0x558f6d316088 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x558f6d318188 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x558f6d318188
  `-ParmVarDecl 0x558f6d318298 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558f6d2ad938 prev 0x558f6d202ef8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558f6d2ada30 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x558f6d2adac0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x558f6d2adbf8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x558f6d2adaf8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x558f6d2af020 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x558f6d2af000 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x558f6d2aeb98 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x558f6d2af0b0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x558f6d2af070 <col:17> 'ErrorHandler *' lvalue ParmVar 0x558f6d2adaf8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x558f6d2aec00 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x558f6d2af130 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x558f6d2af0f0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x558f6d2aec60 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x558f6d2af170 <col:54> 'bool' false
| `-CompoundStmt 0x558f6d2af278 <col:61, line:38:5>
|   `-BinaryOperator 0x558f6d2af258 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x558f6d2af1f0 <col:9> 'const Element *' lvalue ->_context 0x558f6d2aeb38
|     | `-CXXThisExpr 0x558f6d2af1e0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x558f6d2af240 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x558f6d2af220 <col:20> 'int' 0
|-CXXConstructorDecl 0x558f6d2ade08 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x558f6d2adcb8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x558f6d2add30 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x558f6d2af058 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x558f6d2af038 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x558f6d2aeb38 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x558f6d2af2d0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x558f6d2af290 <col:20> 'const Element *' lvalue ParmVar 0x558f6d2adcb8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x558f6d2aeb98 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x558f6d2af350 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x558f6d2af310 <col:36> 'ErrorHandler *' lvalue ParmVar 0x558f6d2add30 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x558f6d2aec00 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x558f6d2af3d0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x558f6d2af390 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x558f6d2aec60 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x558f6d2af410 <col:73> 'bool' false
| `-CompoundStmt 0x558f6d2af488 <col:80, line:46:5>
|-CXXMethodDecl 0x558f6d2adf38 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x558f6d2af500 <col:36, line:51:5>
|   `-ReturnStmt 0x558f6d2af4f0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x558f6d2af4d8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x558f6d2af4a8 <col:16> 'const Element *const' lvalue ->_context 0x558f6d2aeb38
|         `-CXXThisExpr 0x558f6d2af498 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x558f6d2ae028 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x558f6d2af580 <col:32, line:57:5>
|   `-ReturnStmt 0x558f6d2af570 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x558f6d2af558 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x558f6d2af528 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x558f6d2aeb98
|         `-CXXThisExpr 0x558f6d2af518 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x558f6d2ae0e8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x558f6d2ae270 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x558f6d2ae1a0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x558f6d2ae3c0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x558f6d2ae330 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x558f6d2ae510 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x558f6d2ae480 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x558f6d2ae718 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x558f6d2ae5c8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x558f6d2ae640 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x558f6d2aea48 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x558f6d2ae7d8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x558f6d2ae858 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x558f6d2ae920 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x558f6d2aeb00 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x558f6d2aeb38 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x558f6d2aeb98 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x558f6d2aec00 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x558f6d2aec60 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x558f6d2aecb0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x558f6d2aecb0
| `-ParmVarDecl 0x558f6d2aedc8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x558f6d2aee68 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x558f6d2aee68
| `-ParmVarDecl 0x558f6d2aef78 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x558f6d345810 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558f6d2cd3f0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x558f6d2cd5c8 prev 0x558f6d2cd3f0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x558f6d2cd658 <col:46, col:52> col:46 public
|-TypedefDecl 0x558f6d2cd680 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x558f6ccdc580 'int'
|-TypedefDecl 0x558f6d2cf250 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x558f6d2cf200 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x558f6d2cdb30 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x558f6d2cda30 'type'
|     `-TemplateSpecializationType 0x558f6d2cd9c0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x558f6d2cd8a0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x558f6d2cd880 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x558f6d2cd860 <col:24> 'unsigned long' 4
|       `-RecordType 0x558f6d2cd9a0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x558f6d2cd8c0 'char_array'
|-TypedefDecl 0x558f6d2cf308 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x558f6d2cf2d0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x558f6d2cf2b0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x558f6d2cf250 'type'
|     `-ElaboratedType 0x558f6d2cf200 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x558f6d2cdb30 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x558f6d2cda30 'type'
|         `-TemplateSpecializationType 0x558f6d2cd9c0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x558f6d2cd8a0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x558f6d2cd880 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x558f6d2cd860 <col:24> 'unsigned long' 4
|           `-RecordType 0x558f6d2cd9a0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x558f6d2cd8c0 'char_array'
|-CXXMethodDecl 0x558f6d2cf488 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x558f6d2cf398 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x558f6d2cf578 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x558f6d2cf658 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x558f6d2cf928 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x558f6d2cf830 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x558f6d2cfb68 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x558f6d2cf9e0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558f6d2cfa58 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558f6d2cfd38 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x558f6d2cfc28 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558f6d2cfca0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558f6d2cfe98 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x558f6d2cff68 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x558f6d2d01b8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x558f6d2d0028 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x558f6d2d00a0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558f6d2d0418 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x558f6d2d0288 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x558f6d2d0300 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558f6d2d05d8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x558f6d2d04e8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558f6d2d0798 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x558f6d2d06a0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558f6d2d0850 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x558f6d2d0900 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x558f6d2d0b38 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x558f6d2d09b0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558f6d2d0a28 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558f6d2d0dd8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x558f6d2d0ce0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x558f6d2d0ea0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x558f6d2d0ef0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x558f6d2d0f40 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558f6d2cbdf8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x558f6d2cc008 prev 0x558f6d2cbdf8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x558f6d2cd360 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x558f6d2cd310 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x558f6d2cd2f0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x558f6d2cd1a0 'type'
|     `-SubstTemplateTypeParmType 0x558f6d2ccfc0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x558f6d10f7f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558f6d10f798 'T'
|       `-RecordType 0x558f6d2ccb10 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x558f6d2cca28 'sized_array_memory'
|-FieldDecl 0x558f6d2d0f90 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x558f6d2d0fe0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x558f6d2d1018 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x558f6d2cc0a0 'int' sugar
|   |-TemplateTypeParmType 0x558f6d146500 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x558f6d1464a8 'T'
|   `-BuiltinType 0x558f6ccdc580 'int'
|-TypedefDecl 0x558f6d2d10a8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x558f6d2d1070 'int &'
|   `-SubstTemplateTypeParmType 0x558f6d2cc0a0 'int' sugar
|     |-TemplateTypeParmType 0x558f6d146500 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558f6d1464a8 'T'
|     `-BuiltinType 0x558f6ccdc580 'int'
|-TypedefDecl 0x558f6d2d1168 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x558f6d2d1130 'const int &'
|   `-QualType 0x558f6d2cc0a1 'const int' const
|     `-SubstTemplateTypeParmType 0x558f6d2cc0a0 'int' sugar
|       |-TemplateTypeParmType 0x558f6d146500 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558f6d1464a8 'T'
|       `-BuiltinType 0x558f6ccdc580 'int'
|-TypedefDecl 0x558f6d2d11f8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x558f6d2d11c0 'int *'
|   `-SubstTemplateTypeParmType 0x558f6d2cc0a0 'int' sugar
|     |-TemplateTypeParmType 0x558f6d146500 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558f6d1464a8 'T'
|     `-BuiltinType 0x558f6ccdc580 'int'
|-TypedefDecl 0x558f6d2d8700 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x558f6d2d1250 'const int *'
|   `-QualType 0x558f6d2cc0a1 'const int' const
|     `-SubstTemplateTypeParmType 0x558f6d2cc0a0 'int' sugar
|       |-TemplateTypeParmType 0x558f6d146500 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558f6d1464a8 'T'
|       `-BuiltinType 0x558f6ccdc580 'int'
|-TypedefDecl 0x558f6d2d92f0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x558f6d2d92a0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x558f6d2d9280 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x558f6d2d9210 'type'
|     `-SubstTemplateTypeParmType 0x558f6d2d8fd0 'int' sugar
|       |-TemplateTypeParmType 0x558f6d11b6b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558f6d11b660 'T'
|       `-BuiltinType 0x558f6ccdc580 'int'
|-TypedefDecl 0x558f6d2d9358 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x558f6d2d1130 'const int &'
|   `-QualType 0x558f6d2cc0a1 'const int' const
|     `-SubstTemplateTypeParmType 0x558f6d2cc0a0 'int' sugar
|       |-TemplateTypeParmType 0x558f6d146500 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558f6d1464a8 'T'
|       `-BuiltinType 0x558f6ccdc580 'int'
|-TypedefDecl 0x558f6d2d93b0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x558f6ccdc580 'int'
|-TypedefDecl 0x558f6d2d9418 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x558f6d2d11c0 'int *'
|   `-SubstTemplateTypeParmType 0x558f6d2cc0a0 'int' sugar
|     |-TemplateTypeParmType 0x558f6d146500 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558f6d1464a8 'T'
|     `-BuiltinType 0x558f6ccdc580 'int'
|-TypedefDecl 0x558f6d2d9480 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x558f6d2d1250 'const int *'
|   `-QualType 0x558f6d2cc0a1 'const int' const
|     `-SubstTemplateTypeParmType 0x558f6d2cc0a0 'int' sugar
|       |-TemplateTypeParmType 0x558f6d146500 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558f6d1464a8 'T'
|       `-BuiltinType 0x558f6ccdc580 'int'
|-EnumDecl 0x558f6d2d94d8 <line:134:5> col:5
| `-EnumConstantDecl 0x558f6d2d95d0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x558f6d2d95b0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x558f6d1476c8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x558f6d1476a0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x558f6d147680 <col:40> 'int' 1
|-CXXConstructorDecl 0x558f6d2d9658 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x558f6d2d98a8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x558f6d2d9710 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558f6d2d97b0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x558f6d2d9b68 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x558f6d2d9a50 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x558f6d2d9e28 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x558f6d2d9d10 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x558f6d2da170 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x558f6d2da050 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x558f6d2da480 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x558f6d2da360 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x558f6d2da770 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x558f6d2da5b8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558f6d2da630 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x558f6d2da898 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x558f6d2da978 <col:20> Inherited
| `-OptimizeNoneAttr 0x558f6d2da9d0 <col:30> Inherited
|-CXXMethodDecl 0x558f6d2daa18 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x558f6d2daac8 <col:20> Inherited
| `-OptimizeNoneAttr 0x558f6d2dab20 <col:30> Inherited
|-CXXMethodDecl 0x558f6d2dabe8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x558f6d2dac98 <col:20> Inherited
| `-OptimizeNoneAttr 0x558f6d2dacf0 <col:30> Inherited
|-CXXMethodDecl 0x558f6d2dad38 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x558f6d2dade8 <col:20> Inherited
| `-OptimizeNoneAttr 0x558f6d2dae40 <col:30> Inherited
|-CXXMethodDecl 0x558f6d2dae88 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x558f6d2daf38 <col:20> Inherited
| `-OptimizeNoneAttr 0x558f6d2daf90 <col:30> Inherited
|-CXXMethodDecl 0x558f6d2dafd8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x558f6d2db088 <col:20> Inherited
| `-OptimizeNoneAttr 0x558f6d2db0e0 <col:30> Inherited
|-CXXMethodDecl 0x558f6d2db108 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x558f6d2db1b8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x558f6d2db268 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x558f6d2db428 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x558f6d2db318 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558f6d2db390 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x558f6d2db578 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x558f6d2db4e8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x558f6d2db728 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x558f6d2db630 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x558f6d2db7e0 <col:20>
| `-OptimizeNoneAttr 0x558f6d2db838 <col:30>
|-CXXMethodDecl 0x558f6d2db958 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x558f6d2db860 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x558f6d2dba10 <col:20>
| `-OptimizeNoneAttr 0x558f6d2dba68 <col:30>
|-CXXMethodDecl 0x558f6d2dbb20 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x558f6d2dba90 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558f6d2dbc68 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x558f6d2dbbd8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558f6d2dbd98 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x558f6d2dbec8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x558f6d2dbf98 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x558f6d2dc068 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x558f6d2dc1a8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x558f6d2dc118 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558f6d2dc2f0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x558f6d2dc260 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558f6d2dc438 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x558f6d2dc3a8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x558f6d2dc4f0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x558f6d2dc5f0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x558f6d2dc560 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x558f6d2dc6a8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x558f6d2dc768 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x558f6d2dc868 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x558f6d2dc9e8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x558f6d2dc928 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x558f6d2dd1a8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x558f6d2dcaa0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x558f6d2dd108 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x558f6d2dd008 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x558f6d2dd288 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x558f6d2dd3d8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x558f6d2dd348 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x558f6d2dd490 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x558f6d2dd6d8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x558f6d2dd550 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x558f6d2dd5c8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x558f6d2dd898 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x558f6d2dd7a8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x558f6d2ddae8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x558f6d2dd960 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x558f6d2dd9d8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x558f6d2ddba8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x558f6d2dde08 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x558f6d2ddd10 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x558f6d2dded8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558f6d2c9f68 prev 0x558f6d2b4498 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558f6d2ca060 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x558f6d2ca150 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x558f6d2ef810 <col:16, line:828:9>
|-CXXDestructorDecl 0x558f6d2ca240 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x558f6d2ef820 <col:25, line:830:9>
|-CXXMethodDecl 0x558f6d2ca340 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x558f6d2ca3f0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x558f6d2ca498 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x558f6d2ca498
| `-ParmVarDecl 0x558f6d2ca5a8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x558f6d2cad68 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x558f6d2cad68
  `-ParmVarDecl 0x558f6d2cae78 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558f6d2b42a8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x558f6d2b4408 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x558f6d2b4498 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x558f6d2b4550 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x558f6d2b4658 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x558f6d2b4588 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x558f6d2df498 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x558f6d2df478 <col:31> 'int' 0
|-CXXConstructorDecl 0x558f6d2b4978 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x558f6d2b47f0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x558f6d2b4868 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x558f6d2df4d0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x558f6d2df4b0 <col:59> 'int' 0
|-CXXConstructorDecl 0x558f6d2b4ba0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x558f6d2b4a90 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x558f6d2b4b08 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x558f6d2df508 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x558f6d2df4e8 <col:55> 'int' 0
|-CXXConstructorDecl 0x558f6d2b4f58 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x558f6d2b4d40 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x558f6d2b4db8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x558f6d2b4e30 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x558f6d2df540 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x558f6d2df520 <col:31> 'int' 0
|-CXXConstructorDecl 0x558f6d2b5118 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x558f6d2b5058 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x558f6d2b5210 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x558f6d2b53f8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x558f6d2b5300 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x558f6d2b54e8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x558f6d2df8f0 <col:24, line:291:5>
|   `-ReturnStmt 0x558f6d2df8e0 <line:290:9, col:79>
|     `-BinaryOperator 0x558f6d2df8c0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x558f6d2df798 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x558f6d2df6f0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x558f6d2df6d0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x558f6d2df5c8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x558f6d2df5b0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x558f6d2df598 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x558f6d2df568 <col:18> 'Vector<String> *const' lvalue ->_conf 0x558f6d2cbd90
|       | |   |       `-CXXThisExpr 0x558f6d2df558 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x558f6d2df6b8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x558f6d2df6a0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x558f6d2df668 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x558f6d2df638 <col:28, col:35> '<bound member function type>' ->size 0x558f6d28df98
|       | |           `-ImplicitCastExpr 0x558f6d2df688 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x558f6d2df620 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x558f6d2df5f0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x558f6d2cbd90
|       | |                 `-CXXThisExpr 0x558f6d2df5e0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x558f6d2df780 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x558f6d2df768 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x558f6d2df750 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x558f6d2df720 <col:47> 'Args::Slot *const' lvalue ->_slots 0x558f6d2de020
|       |         `-CXXThisExpr 0x558f6d2df710 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x558f6d2df8a0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x558f6d2df888 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x558f6d2df870 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x558f6d2df830 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x558f6d2df818 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x558f6d2df7c8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x558f6d2de0d0
|         |     |   `-CXXThisExpr 0x558f6d2df7b8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x558f6d2df7f8 <col:73> 'int' 0
|         `-IntegerLiteral 0x558f6d2df850 <col:79> 'int' 0
|-CXXMethodDecl 0x558f6d2b55a8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x558f6d2dfac8 <col:32, line:296:5>
|   `-ReturnStmt 0x558f6d2dfab8 <line:295:9, col:49>
|     `-BinaryOperator 0x558f6d2dfa98 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x558f6d2df978 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x558f6d2df960 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x558f6d2df948 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x558f6d2df918 <col:17> 'Args::Slot *const' lvalue ->_slots 0x558f6d2de020
|       |       `-CXXThisExpr 0x558f6d2df908 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x558f6d2dfa78 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x558f6d2dfa60 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x558f6d2dfa48 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x558f6d2dfa08 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x558f6d2df9f0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x558f6d2df9a0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x558f6d2de0d0
|         |     |   `-CXXThisExpr 0x558f6d2df990 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x558f6d2df9d0 <col:43> 'int' 0
|         `-IntegerLiteral 0x558f6d2dfa28 <col:49> 'int' 0
|-CXXMethodDecl 0x558f6d2b5698 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x558f6d2dfcd8 <col:19, line:306:5>
|   |-IfStmt 0x558f6d2dfbf8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x558f6d2dfb38 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x558f6d2dfb20 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x558f6d2dfaf0 <col:13> 'Vector<String> *' lvalue ->_conf 0x558f6d2cbd90
|   | |     `-CXXThisExpr 0x558f6d2dfae0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x558f6d2dfbd8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x558f6d2dfba8 <col:13, col:20> '<bound member function type>' ->clear 0x558f6d290998
|   |     `-ImplicitCastExpr 0x558f6d2dfb90 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x558f6d2dfb60 <col:13> 'Vector<String> *' lvalue ->_conf 0x558f6d2cbd90
|   |         `-CXXThisExpr 0x558f6d2dfb50 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x558f6d2dfc80 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x558f6d2dfc50 <col:9, col:16> '<bound member function type>' .clear 0x558f6d2ddba8
|   |   `-MemberExpr 0x558f6d2dfc20 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x558f6d2ddfc0
|   |     `-CXXThisExpr 0x558f6d2dfc10 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x558f6d2dfcc8 <line:305:9, col:17>
|     `-UnaryOperator 0x558f6d2dfcb0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558f6d2dfca0 <col:17> 'Args *' this
|-CXXMethodDecl 0x558f6d2b5918 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x558f6d2b5820 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x558f6d2b5a98 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x558f6d2b59d0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x558f6d2b5e18 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x558f6d2b5b40 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x558f6d2b5d78 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x558f6d2b5be8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x558f6d2b5c60 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x558f6d2dfff8 <col:67, line:327:5>
|     |-WhileStmt 0x558f6d2dffa8 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x558f6d2dfdc0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x558f6d2dfd40 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x558f6d1f8410 0x558f6d1b07a8 0x558f6d1b0480 0x558f6d19c620 0x558f6d19c2d0 0x558f6d19bbc0 0x558f6d16f1b0 0x558f6d102980
|     | | |-DeclRefExpr 0x558f6d2dfd00 <col:16> 'Iter' lvalue ParmVar 0x558f6d2b5be8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x558f6d2dfd20 <col:25> 'Iter' lvalue ParmVar 0x558f6d2b5c60 'end' 'Iter'
|     | `-CompoundStmt 0x558f6d2dff88 <col:30, line:325:9>
|     |   |-CallExpr 0x558f6d2dff28 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x558f6d2dfe08 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x558f6d2dfef8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x558f6d2dfe88 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558f6d1fd508 0x558f6d1fd128 0x558f6d1fcd58 0x558f6d1fc978 0x558f6d1fc598 0x558f6d1fc1c8
|     |   |   `-DeclRefExpr 0x558f6d2dfe68 <col:24> 'Iter' lvalue ParmVar 0x558f6d2b5be8 'begin' 'Iter'
|     |   `-UnaryOperator 0x558f6d2dff70 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x558f6d2dff50 <col:15> 'Iter' lvalue ParmVar 0x558f6d2b5be8 'begin' 'Iter'
|     `-ReturnStmt 0x558f6d2dffe8 <line:326:9, col:17>
|       `-UnaryOperator 0x558f6d2dffd0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558f6d2dffc0 <col:17> 'Args *' this
|-CXXMethodDecl 0x558f6d2b5f20 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x558f6d2b5e90 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x558f6d2b6068 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x558f6d2b5fd8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x558f6d2b6130 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x558f6d2e00d8 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x558f6d2e0078 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x558f6d2e0028 <col:9> '<bound member function type>' ->reset_from 0x558f6d2de448
|   | | `-CXXThisExpr 0x558f6d2e0018 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x558f6d2e0058 <col:20> 'int' 0
|   `-ReturnStmt 0x558f6d2e00c8 <line:352:9, col:17>
|     `-UnaryOperator 0x558f6d2e00b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558f6d2e00a0 <col:17> 'Args *' this
|-VarDecl 0x558f6d2b61e8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x558f6d2b6250 <col:38> 'int' 1
|-VarDecl 0x558f6d2b62e0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x558f6d2b6348 <col:39> 'int' 2
|-VarDecl 0x558f6d2b63d8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x558f6d2b6440 <col:39> 'int' 4
|-VarDecl 0x558f6d2b64d0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x558f6d2b6538 <col:39> 'int' 8
|-FunctionTemplateDecl 0x558f6d2b68b8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x558f6d2b65b0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x558f6d2b6818 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x558f6d2b6660 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x558f6d2b6708 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x558f6d2e0230 <col:43, line:371:5>
| |   `-ReturnStmt 0x558f6d2e0220 <line:370:9, col:34>
| |     `-CallExpr 0x558f6d2e01e8 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x558f6d2e0108 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x558f6d2e0188 <col:21> 'const char *' lvalue ParmVar 0x558f6d2b6660 'keyword' 'const char *'
| |       |-IntegerLiteral 0x558f6d2e01a8 <col:30> 'int' 0
| |       `-DeclRefExpr 0x558f6d2e01c8 <col:33> 'T' lvalue ParmVar 0x558f6d2b6708 'x' 'T &'
| `-CXXMethodDecl 0x558f6d346178 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x558f6d345f90 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x558f6d346068 <col:37, col:40> col:40 x 'bool &'
|-FunctionTemplateDecl 0x558f6d2b6be8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x558f6d2b6920 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558f6d2b6b48 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x558f6d2b69d0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2b6a78 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x558f6d2e0380 <col:45, line:375:5>
|     `-ReturnStmt 0x558f6d2e0370 <line:374:9, col:42>
|       `-CallExpr 0x558f6d2e0338 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e0258 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e02d8 <col:21> 'const char *' lvalue ParmVar 0x558f6d2b69d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x558f6d2e02f8 <col:30> 'const int' lvalue Var 0x558f6d2b61e8 'mandatory' 'const int'
|         `-DeclRefExpr 0x558f6d2e0318 <col:41> 'T' lvalue ParmVar 0x558f6d2b6a78 'x' 'T &'
|-FunctionTemplateDecl 0x558f6d2b6f18 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x558f6d2b6c50 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x558f6d2b6e78 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x558f6d2b6d00 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x558f6d2b6da8 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x558f6d2e04d0 <col:45, line:379:5>
| |   `-ReturnStmt 0x558f6d2e04c0 <line:378:9, col:43>
| |     `-CallExpr 0x558f6d2e0488 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x558f6d2e03a8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x558f6d2e0428 <col:21> 'const char *' lvalue ParmVar 0x558f6d2b6d00 'keyword' 'const char *'
| |       |-DeclRefExpr 0x558f6d2e0448 <col:30> 'const int' lvalue Var 0x558f6d2b62e0 'positional' 'const int'
| |       `-DeclRefExpr 0x558f6d2e0468 <col:42> 'T' lvalue ParmVar 0x558f6d2b6da8 'x' 'T &'
| `-CXXMethodDecl 0x558f6d345c78 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, String &)'
|   |-TemplateArgument type 'String'
|   |-ParmVarDecl 0x558f6d345a90 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x558f6d345b68 <col:39, col:42> col:42 x 'String &'
|-FunctionTemplateDecl 0x558f6d2b7248 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x558f6d2b6f80 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558f6d2b71a8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x558f6d2b7030 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2b70d8 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x558f6d2e06d0 <col:46, line:383:5>
|     `-ReturnStmt 0x558f6d2e06c0 <line:382:9, col:55>
|       `-CallExpr 0x558f6d2e0688 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e04f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e0578 <col:21> 'const char *' lvalue ParmVar 0x558f6d2b7030 'keyword' 'const char *'
|         |-BinaryOperator 0x558f6d2e0648 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x558f6d2e05f8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x558f6d2e05d8 <col:30> 'const int' lvalue Var 0x558f6d2b61e8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x558f6d2e0630 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x558f6d2e0610 <col:42> 'const int' lvalue Var 0x558f6d2b62e0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x558f6d2e0668 <col:54> 'T' lvalue ParmVar 0x558f6d2b70d8 'x' 'T &'
|-FunctionTemplateDecl 0x558f6d2b7648 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x558f6d2b72b0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558f6d2b75a8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x558f6d2b7360 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2b73e0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x558f6d2b7488 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x558f6d2e1d38 <col:54, line:388:5>
|     |-CallExpr 0x558f6d2e1cc0 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558f6d2e1c10 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x558f6d2e1c50 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x558f6d2e1c60 <col:30> 'const char *' lvalue ParmVar 0x558f6d2b7360 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558f6d2e1c80 <col:39> 'int' lvalue ParmVar 0x558f6d2b73e0 'flags' 'int'
|     | `-DeclRefExpr 0x558f6d2e1ca0 <col:46> 'T' lvalue ParmVar 0x558f6d2b7488 'x' 'T &'
|     `-ReturnStmt 0x558f6d2e1d28 <line:387:9, col:17>
|       `-UnaryOperator 0x558f6d2e1d10 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558f6d2e1d00 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558f6d2b7af8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x558f6d2b76b8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558f6d2b7738 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x558f6d2b7a58 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x558f6d2b77f8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2b7898 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x558f6d2b7938 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x558f6d2e1ea8 <col:74, line:403:5>
|     `-ReturnStmt 0x558f6d2e1e98 <line:402:9, col:56>
|       `-CallExpr 0x558f6d2e1e58 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e1d68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e1dd8 <col:28> 'const char *' lvalue ParmVar 0x558f6d2b77f8 'keyword' 'const char *'
|         |-IntegerLiteral 0x558f6d2e1df8 <col:37> 'int' 0
|         |-DeclRefExpr 0x558f6d2e1e18 <col:40> 'T' lvalue ParmVar 0x558f6d2b7898 'x' 'T &'
|         `-DeclRefExpr 0x558f6d2e1e38 <col:43> 'const V' lvalue ParmVar 0x558f6d2b7938 'default_value' 'const V &'
|-FunctionTemplateDecl 0x558f6d2b7f68 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x558f6d2b7b68 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558f6d2b7be8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x558f6d2b7ec8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x558f6d2b7ca8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2b7d48 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x558f6d2b7de8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x558f6d2e2010 <col:76, line:407:5>
|     `-ReturnStmt 0x558f6d2e2000 <line:406:9, col:65>
|       `-CallExpr 0x558f6d2e1fc0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e1ed0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e1f40 <col:28> 'const char *' lvalue ParmVar 0x558f6d2b7ca8 'keyword' 'const char *'
|         |-DeclRefExpr 0x558f6d2e1f60 <col:37> 'const int' lvalue Var 0x558f6d2b62e0 'positional' 'const int'
|         |-DeclRefExpr 0x558f6d2e1f80 <col:49> 'T' lvalue ParmVar 0x558f6d2b7d48 'x' 'T &'
|         `-DeclRefExpr 0x558f6d2e1fa0 <col:52> 'const V' lvalue ParmVar 0x558f6d2b7de8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x558f6d2b84b8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x558f6d2b7fd8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558f6d2b8058 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x558f6d2b8418 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x558f6d2b8118 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2b8198 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x558f6d2b8238 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x558f6d2b82d8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x558f6d2e2178 <col:85, line:412:5>
|     |-CallExpr 0x558f6d2e20f8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558f6d2e2028 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x558f6d2e2068 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x558f6d2e2078 <col:37> 'const char *' lvalue ParmVar 0x558f6d2b8118 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558f6d2e2098 <col:46> 'int' lvalue ParmVar 0x558f6d2b8198 'flags' 'int'
|     | |-DeclRefExpr 0x558f6d2e20b8 <col:53> 'T' lvalue ParmVar 0x558f6d2b8238 'x' 'T &'
|     | `-DeclRefExpr 0x558f6d2e20d8 <col:56> 'const V' lvalue ParmVar 0x558f6d2b82d8 'default_value' 'const V &'
|     `-ReturnStmt 0x558f6d2e2168 <line:411:9, col:17>
|       `-UnaryOperator 0x558f6d2e2150 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558f6d2e2140 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558f6d2b8948 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x558f6d2b8530 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2b85a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558f6d2b88a8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558f6d2b8668 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2b86e0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2b8788 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x558f6d2e22f8 <col:53, line:425:5>
|     `-ReturnStmt 0x558f6d2e22e8 <line:424:9, col:42>
|       `-CallExpr 0x558f6d2e22a8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e21a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e2228 <col:21> 'const char *' lvalue ParmVar 0x558f6d2b8668 'keyword' 'const char *'
|         |-IntegerLiteral 0x558f6d2e2248 <col:30> 'int' 0
|         |-DeclRefExpr 0x558f6d2e2268 <col:33> 'P' lvalue ParmVar 0x558f6d2b86e0 'parser' 'P'
|         `-DeclRefExpr 0x558f6d2e2288 <col:41> 'T' lvalue ParmVar 0x558f6d2b8788 'x' 'T &'
|-FunctionTemplateDecl 0x558f6d2b8d98 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x558f6d2b89b8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2b8a38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558f6d2b8cf8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558f6d2b8af8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2b8b70 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2b8c18 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x558f6d2e2470 <col:55, line:429:5>
|     `-ReturnStmt 0x558f6d2e2460 <line:428:9, col:50>
|       `-CallExpr 0x558f6d2e2420 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e2320 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e23a0 <col:21> 'const char *' lvalue ParmVar 0x558f6d2b8af8 'keyword' 'const char *'
|         |-DeclRefExpr 0x558f6d2e23c0 <col:30> 'const int' lvalue Var 0x558f6d2b61e8 'mandatory' 'const int'
|         |-DeclRefExpr 0x558f6d2e23e0 <col:41> 'P' lvalue ParmVar 0x558f6d2b8b70 'parser' 'P'
|         `-DeclRefExpr 0x558f6d2e2400 <col:49> 'T' lvalue ParmVar 0x558f6d2b8c18 'x' 'T &'
|-FunctionTemplateDecl 0x558f6d2b91e8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x558f6d2b8e08 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2b8e88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558f6d2b9148 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558f6d2b8f48 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2b8fc0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2b9068 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x558f6d2e25e8 <col:55, line:433:5>
|     `-ReturnStmt 0x558f6d2e25d8 <line:432:9, col:51>
|       `-CallExpr 0x558f6d2e2598 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e2498 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e2518 <col:21> 'const char *' lvalue ParmVar 0x558f6d2b8f48 'keyword' 'const char *'
|         |-DeclRefExpr 0x558f6d2e2538 <col:30> 'const int' lvalue Var 0x558f6d2b62e0 'positional' 'const int'
|         |-DeclRefExpr 0x558f6d2e2558 <col:42> 'P' lvalue ParmVar 0x558f6d2b8fc0 'parser' 'P'
|         `-DeclRefExpr 0x558f6d2e2578 <col:50> 'T' lvalue ParmVar 0x558f6d2b9068 'x' 'T &'
|-FunctionTemplateDecl 0x558f6d2b9638 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x558f6d2b9258 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2b92d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558f6d2b9598 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558f6d2b9398 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2b9410 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2b94b8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x558f6d2e2810 <col:56, line:437:5>
|     `-ReturnStmt 0x558f6d2e2800 <line:436:9, col:63>
|       `-CallExpr 0x558f6d2e27c0 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e2610 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e2690 <col:21> 'const char *' lvalue ParmVar 0x558f6d2b9398 'keyword' 'const char *'
|         |-BinaryOperator 0x558f6d2e2760 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x558f6d2e2710 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x558f6d2e26f0 <col:30> 'const int' lvalue Var 0x558f6d2b61e8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x558f6d2e2748 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x558f6d2e2728 <col:42> 'const int' lvalue Var 0x558f6d2b62e0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x558f6d2e2780 <col:54> 'P' lvalue ParmVar 0x558f6d2b9410 'parser' 'P'
|         `-DeclRefExpr 0x558f6d2e27a0 <col:62> 'T' lvalue ParmVar 0x558f6d2b94b8 'x' 'T &'
|-FunctionTemplateDecl 0x558f6d2b9b68 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x558f6d2b96a8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2b9728 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558f6d2b9ac8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x558f6d2b97e8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2b9868 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x558f6d2b98e0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2b9988 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x558f6d2e2978 <col:64, line:442:5>
|     |-CallExpr 0x558f6d2e28f8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558f6d2e2828 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x558f6d2e2868 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x558f6d2e2878 <col:30> 'const char *' lvalue ParmVar 0x558f6d2b97e8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558f6d2e2898 <col:39> 'int' lvalue ParmVar 0x558f6d2b9868 'flags' 'int'
|     | |-DeclRefExpr 0x558f6d2e28b8 <col:46> 'P' lvalue ParmVar 0x558f6d2b98e0 'parser' 'P'
|     | `-DeclRefExpr 0x558f6d2e28d8 <col:54> 'T' lvalue ParmVar 0x558f6d2b9988 'x' 'T &'
|     `-ReturnStmt 0x558f6d2e2968 <line:441:9, col:17>
|       `-UnaryOperator 0x558f6d2e2950 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558f6d2e2940 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558f6d2ba168 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x558f6d2b9be0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2b9c58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x558f6d2b9cd8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x558f6d2ba0c8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x558f6d2b9da0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2b9e18 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2b9eb8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x558f6d2b9f88 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x558f6d2e2b10 <col:84, line:458:5>
|     `-ReturnStmt 0x558f6d2e2b00 <line:457:9, col:64>
|       `-CallExpr 0x558f6d2e2ab8 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e29a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e2a18 <col:28> 'const char *' lvalue ParmVar 0x558f6d2b9da0 'keyword' 'const char *'
|         |-IntegerLiteral 0x558f6d2e2a38 <col:37> 'int' 0
|         |-DeclRefExpr 0x558f6d2e2a58 <col:40> 'P' lvalue ParmVar 0x558f6d2b9e18 'parser' 'P'
|         |-DeclRefExpr 0x558f6d2e2a78 <col:48> 'T' lvalue ParmVar 0x558f6d2b9eb8 'x' 'T &'
|         `-DeclRefExpr 0x558f6d2e2a98 <col:51> 'const V' lvalue ParmVar 0x558f6d2b9f88 'default_value' 'const V &'
|-FunctionTemplateDecl 0x558f6d2ba6e8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x558f6d2ba1e0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2ba258 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x558f6d2ba2d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x558f6d2ba648 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x558f6d2ba3a0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2ba418 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2ba4b8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x558f6d2ba558 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x558f6d2e2ca0 <col:86, line:462:5>
|     `-ReturnStmt 0x558f6d2e2c90 <line:461:9, col:73>
|       `-CallExpr 0x558f6d2e2c48 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e2b38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e2ba8 <col:28> 'const char *' lvalue ParmVar 0x558f6d2ba3a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x558f6d2e2bc8 <col:37> 'const int' lvalue Var 0x558f6d2b62e0 'positional' 'const int'
|         |-DeclRefExpr 0x558f6d2e2be8 <col:49> 'P' lvalue ParmVar 0x558f6d2ba418 'parser' 'P'
|         |-DeclRefExpr 0x558f6d2e2c08 <col:57> 'T' lvalue ParmVar 0x558f6d2ba4b8 'x' 'T &'
|         `-DeclRefExpr 0x558f6d2e2c28 <col:60> 'const V' lvalue ParmVar 0x558f6d2ba558 'default_value' 'const V &'
|-FunctionTemplateDecl 0x558f6d2bad48 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x558f6d2ba760 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2ba7d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x558f6d2ba858 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x558f6d2baca8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x558f6d2ba920 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2ba9a0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x558f6d2baa18 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2baab8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x558f6d2bab58 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x558f6d2e2e30 <col:95, line:467:5>
|     |-CallExpr 0x558f6d2e2da8 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558f6d2e2cb8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x558f6d2e2cf8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x558f6d2e2d08 <col:37> 'const char *' lvalue ParmVar 0x558f6d2ba920 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558f6d2e2d28 <col:46> 'int' lvalue ParmVar 0x558f6d2ba9a0 'flags' 'int'
|     | |-DeclRefExpr 0x558f6d2e2d48 <col:53> 'P' lvalue ParmVar 0x558f6d2baa18 'parser' 'P'
|     | |-DeclRefExpr 0x558f6d2e2d68 <col:61> 'T' lvalue ParmVar 0x558f6d2baab8 'x' 'T &'
|     | `-DeclRefExpr 0x558f6d2e2d88 <col:64> 'const V' lvalue ParmVar 0x558f6d2bab58 'default_value' 'const V &'
|     `-ReturnStmt 0x558f6d2e2e20 <line:466:9, col:17>
|       `-UnaryOperator 0x558f6d2e2e08 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558f6d2e2df8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558f6d2bb328 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x558f6d2badc8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2bae48 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558f6d2baec8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558f6d2bb288 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558f6d2baf90 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2bb008 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2bb0a8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x558f6d2bb148 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x558f6d2e2fd8 <col:63, line:481:5>
|     `-ReturnStmt 0x558f6d2e2fc8 <line:480:9, col:47>
|       `-CallExpr 0x558f6d2e2f80 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e2e60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e2ee0 <col:21> 'const char *' lvalue ParmVar 0x558f6d2baf90 'keyword' 'const char *'
|         |-IntegerLiteral 0x558f6d2e2f00 <col:30> 'int' 0
|         |-DeclRefExpr 0x558f6d2e2f20 <col:33> 'P' lvalue ParmVar 0x558f6d2bb008 'parser' 'P'
|         |-DeclRefExpr 0x558f6d2e2f40 <col:41> 'T1' lvalue ParmVar 0x558f6d2bb0a8 'x1' 'T1 &'
|         `-DeclRefExpr 0x558f6d2e2f60 <col:45> 'T2' lvalue ParmVar 0x558f6d2bb148 'x2' 'T2 &'
|-FunctionTemplateDecl 0x558f6d2bb8a8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x558f6d2bb3a0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2bb418 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558f6d2bb498 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558f6d2bb808 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558f6d2bb560 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2bb5d8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2bb678 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x558f6d2bb718 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x558f6d2e3178 <col:65, line:485:5>
|     `-ReturnStmt 0x558f6d2e3168 <line:484:9, col:55>
|       `-CallExpr 0x558f6d2e3120 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e3000 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e3080 <col:21> 'const char *' lvalue ParmVar 0x558f6d2bb560 'keyword' 'const char *'
|         |-DeclRefExpr 0x558f6d2e30a0 <col:30> 'const int' lvalue Var 0x558f6d2b61e8 'mandatory' 'const int'
|         |-DeclRefExpr 0x558f6d2e30c0 <col:41> 'P' lvalue ParmVar 0x558f6d2bb5d8 'parser' 'P'
|         |-DeclRefExpr 0x558f6d2e30e0 <col:49> 'T1' lvalue ParmVar 0x558f6d2bb678 'x1' 'T1 &'
|         `-DeclRefExpr 0x558f6d2e3100 <col:53> 'T2' lvalue ParmVar 0x558f6d2bb718 'x2' 'T2 &'
|-FunctionTemplateDecl 0x558f6d2bbe28 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x558f6d2bb920 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2bb998 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558f6d2bba18 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558f6d2bbd88 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558f6d2bbae0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2bbb58 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2bbbf8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x558f6d2bbc98 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x558f6d2e3318 <col:65, line:489:5>
|     `-ReturnStmt 0x558f6d2e3308 <line:488:9, col:56>
|       `-CallExpr 0x558f6d2e32c0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e31a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e3220 <col:21> 'const char *' lvalue ParmVar 0x558f6d2bbae0 'keyword' 'const char *'
|         |-DeclRefExpr 0x558f6d2e3240 <col:30> 'const int' lvalue Var 0x558f6d2b62e0 'positional' 'const int'
|         |-DeclRefExpr 0x558f6d2e3260 <col:42> 'P' lvalue ParmVar 0x558f6d2bbb58 'parser' 'P'
|         |-DeclRefExpr 0x558f6d2e3280 <col:50> 'T1' lvalue ParmVar 0x558f6d2bbbf8 'x1' 'T1 &'
|         `-DeclRefExpr 0x558f6d2e32a0 <col:54> 'T2' lvalue ParmVar 0x558f6d2bbc98 'x2' 'T2 &'
|-FunctionTemplateDecl 0x558f6d2bc3a8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x558f6d2bbea0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2bbf18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558f6d2bbf98 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558f6d2bc308 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558f6d2bc060 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2bc0d8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2bc178 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x558f6d2bc218 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x558f6d2e3568 <col:66, line:493:5>
|     `-ReturnStmt 0x558f6d2e3558 <line:492:9, col:68>
|       `-CallExpr 0x558f6d2e3510 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e3340 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e33c0 <col:21> 'const char *' lvalue ParmVar 0x558f6d2bc060 'keyword' 'const char *'
|         |-BinaryOperator 0x558f6d2e3490 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x558f6d2e3440 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x558f6d2e3420 <col:30> 'const int' lvalue Var 0x558f6d2b61e8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x558f6d2e3478 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x558f6d2e3458 <col:42> 'const int' lvalue Var 0x558f6d2b62e0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x558f6d2e34b0 <col:54> 'P' lvalue ParmVar 0x558f6d2bc0d8 'parser' 'P'
|         |-DeclRefExpr 0x558f6d2e34d0 <col:62> 'T1' lvalue ParmVar 0x558f6d2bc178 'x1' 'T1 &'
|         `-DeclRefExpr 0x558f6d2e34f0 <col:66> 'T2' lvalue ParmVar 0x558f6d2bc218 'x2' 'T2 &'
|-FunctionTemplateDecl 0x558f6d2bca08 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x558f6d2bc420 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2bc498 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558f6d2bc518 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558f6d2bc968 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558f6d2bc5e0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2bc660 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x558f6d2bc6d8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2bc778 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x558f6d2bc818 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x558f6d2e36f8 <col:74, line:498:5>
|     |-CallExpr 0x558f6d2e3670 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558f6d2e3580 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x558f6d2e35c0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x558f6d2e35d0 <col:30> 'const char *' lvalue ParmVar 0x558f6d2bc5e0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558f6d2e35f0 <col:39> 'int' lvalue ParmVar 0x558f6d2bc660 'flags' 'int'
|     | |-DeclRefExpr 0x558f6d2e3610 <col:46> 'P' lvalue ParmVar 0x558f6d2bc6d8 'parser' 'P'
|     | |-DeclRefExpr 0x558f6d2e3630 <col:54> 'T1' lvalue ParmVar 0x558f6d2bc778 'x1' 'T1 &'
|     | `-DeclRefExpr 0x558f6d2e3650 <col:58> 'T2' lvalue ParmVar 0x558f6d2bc818 'x2' 'T2 &'
|     `-ReturnStmt 0x558f6d2e36e8 <line:497:9, col:17>
|       `-UnaryOperator 0x558f6d2e36d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558f6d2e36c0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558f6d2bcd78 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x558f6d2bcaa0 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558f6d2bccd8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558f6d2bcb50 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2bcbc8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x558f6d2e3840 <col:52, line:509:5>
|     `-ReturnStmt 0x558f6d2e3830 <line:508:9, col:44>
|       `-CallExpr 0x558f6d2e37f8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e3728 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e3798 <col:26> 'const char *' lvalue ParmVar 0x558f6d2bcb50 'keyword' 'const char *'
|         |-IntegerLiteral 0x558f6d2e37b8 <col:35> 'int' 0
|         `-DeclRefExpr 0x558f6d2e37d8 <col:38> 'P' lvalue ParmVar 0x558f6d2bcbc8 'parser' 'P'
|-FunctionTemplateDecl 0x558f6d2bd078 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x558f6d2bcde0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558f6d2bcfd8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558f6d2bce90 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2bcf08 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x558f6d2e3980 <col:54, line:513:5>
|     `-ReturnStmt 0x558f6d2e3970 <line:512:9, col:52>
|       `-CallExpr 0x558f6d2e3938 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e3868 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e38d8 <col:26> 'const char *' lvalue ParmVar 0x558f6d2bce90 'keyword' 'const char *'
|         |-DeclRefExpr 0x558f6d2e38f8 <col:35> 'const int' lvalue Var 0x558f6d2b61e8 'mandatory' 'const int'
|         `-DeclRefExpr 0x558f6d2e3918 <col:46> 'P' lvalue ParmVar 0x558f6d2bcf08 'parser' 'P'
|-FunctionTemplateDecl 0x558f6d2bd378 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x558f6d2bd0e0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558f6d2bd2d8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558f6d2bd190 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2bd208 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x558f6d2e3ac0 <col:54, line:517:5>
|     `-ReturnStmt 0x558f6d2e3ab0 <line:516:9, col:53>
|       `-CallExpr 0x558f6d2e3a78 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e39a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e3a18 <col:26> 'const char *' lvalue ParmVar 0x558f6d2bd190 'keyword' 'const char *'
|         |-DeclRefExpr 0x558f6d2e3a38 <col:35> 'const int' lvalue Var 0x558f6d2b62e0 'positional' 'const int'
|         `-DeclRefExpr 0x558f6d2e3a58 <col:47> 'P' lvalue ParmVar 0x558f6d2bd208 'parser' 'P'
|-FunctionTemplateDecl 0x558f6d2bd678 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x558f6d2bd3e0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558f6d2bd5d8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558f6d2bd490 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2bd508 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x558f6d2e3cb0 <col:55, line:521:5>
|     `-ReturnStmt 0x558f6d2e3ca0 <line:520:9, col:65>
|       `-CallExpr 0x558f6d2e3c68 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e3ae8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e3b58 <col:26> 'const char *' lvalue ParmVar 0x558f6d2bd490 'keyword' 'const char *'
|         |-BinaryOperator 0x558f6d2e3c28 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x558f6d2e3bd8 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x558f6d2e3bb8 <col:35> 'const int' lvalue Var 0x558f6d2b61e8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x558f6d2e3c10 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x558f6d2e3bf0 <col:47> 'const int' lvalue Var 0x558f6d2b62e0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x558f6d2e3c48 <col:59> 'P' lvalue ParmVar 0x558f6d2bd508 'parser' 'P'
|-FunctionTemplateDecl 0x558f6d2bda48 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x558f6d2bd6e0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558f6d2bd9a8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x558f6d2bd790 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2bd810 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x558f6d2bd888 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x558f6d2e3df0 <col:63, line:526:5>
|     |-CallExpr 0x558f6d2e3d78 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558f6d2e3cc8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x558f6d2e3d08 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x558f6d2e3d18 <col:35> 'const char *' lvalue ParmVar 0x558f6d2bd790 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558f6d2e3d38 <col:44> 'int' lvalue ParmVar 0x558f6d2bd810 'flags' 'int'
|     | `-DeclRefExpr 0x558f6d2e3d58 <col:51> 'P' lvalue ParmVar 0x558f6d2bd888 'parser' 'P'
|     `-ReturnStmt 0x558f6d2e3de0 <line:525:9, col:17>
|       `-UnaryOperator 0x558f6d2e3dc8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558f6d2e3db8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558f6d2bde98 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x558f6d2bdab8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2bdb38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558f6d2bddf8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558f6d2bdbf8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2bdc70 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2bdd18 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x558f6d2e3f48 <col:58, line:541:5>
|     `-ReturnStmt 0x558f6d2e3f38 <line:540:9, col:39>
|       `-CallExpr 0x558f6d2e3f00 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e3e20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e3ea0 <col:21> 'const char *' lvalue ParmVar 0x558f6d2bdbf8 'keyword' 'const char *'
|         |-DeclRefExpr 0x558f6d2e3ec0 <col:30> 'P' lvalue ParmVar 0x558f6d2bdc70 'parser' 'P'
|         `-DeclRefExpr 0x558f6d2e3ee0 <col:38> 'T' lvalue ParmVar 0x558f6d2bdd18 'x' 'T &'
|-FunctionTemplateDecl 0x558f6d2be2e8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x558f6d2bdf08 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2bdf88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558f6d2be248 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558f6d2be048 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2be0c0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2be168 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x558f6d2e4080 <col:60, line:545:5>
|     `-ReturnStmt 0x558f6d2e4070 <line:544:9, col:41>
|       `-CallExpr 0x558f6d2e4038 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e3f70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e3fd8 <col:23> 'const char *' lvalue ParmVar 0x558f6d2be048 'keyword' 'const char *'
|         |-DeclRefExpr 0x558f6d2e3ff8 <col:32> 'P' lvalue ParmVar 0x558f6d2be0c0 'parser' 'P'
|         `-DeclRefExpr 0x558f6d2e4018 <col:40> 'T' lvalue ParmVar 0x558f6d2be168 'x' 'T &'
|-FunctionTemplateDecl 0x558f6d2be738 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x558f6d2be358 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2be3d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558f6d2be698 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558f6d2be498 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2be510 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2be5b8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x558f6d2e41b8 <col:60, line:549:5>
|     `-ReturnStmt 0x558f6d2e41a8 <line:548:9, col:41>
|       `-CallExpr 0x558f6d2e4170 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e40a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e4110 <col:23> 'const char *' lvalue ParmVar 0x558f6d2be498 'keyword' 'const char *'
|         |-DeclRefExpr 0x558f6d2e4130 <col:32> 'P' lvalue ParmVar 0x558f6d2be510 'parser' 'P'
|         `-DeclRefExpr 0x558f6d2e4150 <col:40> 'T' lvalue ParmVar 0x558f6d2be5b8 'x' 'T &'
|-FunctionTemplateDecl 0x558f6d2beb88 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x558f6d2be7a8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2be828 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558f6d2beae8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558f6d2be8e8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2be960 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2bea08 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x558f6d2e42f0 <col:61, line:553:5>
|     `-ReturnStmt 0x558f6d2e42e0 <line:552:9, col:42>
|       `-CallExpr 0x558f6d2e42a8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e41e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e4248 <col:24> 'const char *' lvalue ParmVar 0x558f6d2be8e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x558f6d2e4268 <col:33> 'P' lvalue ParmVar 0x558f6d2be960 'parser' 'P'
|         `-DeclRefExpr 0x558f6d2e4288 <col:41> 'T' lvalue ParmVar 0x558f6d2bea08 'x' 'T &'
|-FunctionTemplateDecl 0x558f6d2bf068 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x558f6d2bebf8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2bec78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558f6d2befc8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x558f6d2bed38 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2bedb8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x558f6d2bee30 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2beed8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x558f6d2e4468 <col:69, line:557:5>
|     `-ReturnStmt 0x558f6d2e4458 <line:556:9, col:46>
|       `-CallExpr 0x558f6d2e4418 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e4318 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e4398 <col:21> 'const char *' lvalue ParmVar 0x558f6d2bed38 'keyword' 'const char *'
|         |-DeclRefExpr 0x558f6d2e43b8 <col:30> 'int' lvalue ParmVar 0x558f6d2bedb8 'flags' 'int'
|         |-DeclRefExpr 0x558f6d2e43d8 <col:37> 'P' lvalue ParmVar 0x558f6d2bee30 'parser' 'P'
|         `-DeclRefExpr 0x558f6d2e43f8 <col:45> 'T' lvalue ParmVar 0x558f6d2beed8 'x' 'T &'
|-FunctionTemplateDecl 0x558f6d2bf378 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x558f6d2bf0e0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558f6d2bf2d8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558f6d2bf190 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2bf208 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x558f6d2e45a8 <col:56, line:571:5>
|     `-ReturnStmt 0x558f6d2e4598 <line:570:9, col:48>
|       `-CallExpr 0x558f6d2e4560 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e4490 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e4500 <col:30> 'const char *' lvalue ParmVar 0x558f6d2bf190 'keyword' 'const char *'
|         |-IntegerLiteral 0x558f6d2e4520 <col:39> 'int' 0
|         `-DeclRefExpr 0x558f6d2e4540 <col:42> 'P' lvalue ParmVar 0x558f6d2bf208 'parser' 'P'
|-FunctionTemplateDecl 0x558f6d2bf708 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x558f6d2bf3e0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558f6d2bf668 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x558f6d2bf490 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2bf510 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x558f6d2bf588 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x558f6d2e4778 <col:67, line:576:5>
|     |-CallExpr 0x558f6d2e4700 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558f6d2e45c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x558f6d2e4600 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x558f6d2e4610 <col:39> 'const char *' lvalue ParmVar 0x558f6d2bf490 'keyword' 'const char *'
|     | |-BinaryOperator 0x558f6d2e46c0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x558f6d2e4670 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x558f6d2e4630 <col:48> 'int' lvalue ParmVar 0x558f6d2bf510 'flags' 'int'
|     | | `-ImplicitCastExpr 0x558f6d2e46a8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x558f6d2e4688 <col:56> 'const int' lvalue Var 0x558f6d2b64d0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x558f6d2e46e0 <col:68> 'P' lvalue ParmVar 0x558f6d2bf588 'parser' 'P'
|     `-ReturnStmt 0x558f6d2e4768 <line:575:9, col:17>
|       `-UnaryOperator 0x558f6d2e4750 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558f6d2e4740 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558f6d2bfb58 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x558f6d2bf778 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2bf7f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558f6d2bfab8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558f6d2bf8b8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2bf930 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2bf9d8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x558f6d2e48e8 <col:62, line:592:5>
|     `-ReturnStmt 0x558f6d2e48d8 <line:591:9, col:51>
|       `-CallExpr 0x558f6d2e4898 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e47a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e4818 <col:30> 'const char *' lvalue ParmVar 0x558f6d2bf8b8 'keyword' 'const char *'
|         |-IntegerLiteral 0x558f6d2e4838 <col:39> 'int' 0
|         |-DeclRefExpr 0x558f6d2e4858 <col:42> 'P' lvalue ParmVar 0x558f6d2bf930 'parser' 'P'
|         `-DeclRefExpr 0x558f6d2e4878 <col:50> 'T' lvalue ParmVar 0x558f6d2bf9d8 'x' 'T &'
|-FunctionTemplateDecl 0x558f6d2c0038 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x558f6d2bfbc8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2bfc48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558f6d2bff98 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x558f6d2bfd08 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2bfd88 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x558f6d2bfe00 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2bfea8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x558f6d2e4ae0 <col:73, line:597:5>
|     |-CallExpr 0x558f6d2e4a60 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558f6d2e4900 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x558f6d2e4940 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x558f6d2e4950 <col:39> 'const char *' lvalue ParmVar 0x558f6d2bfd08 'keyword' 'const char *'
|     | |-BinaryOperator 0x558f6d2e4a00 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x558f6d2e49b0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x558f6d2e4970 <col:48> 'int' lvalue ParmVar 0x558f6d2bfd88 'flags' 'int'
|     | | `-ImplicitCastExpr 0x558f6d2e49e8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x558f6d2e49c8 <col:56> 'const int' lvalue Var 0x558f6d2b64d0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x558f6d2e4a20 <col:68> 'P' lvalue ParmVar 0x558f6d2bfe00 'parser' 'P'
|     | `-DeclRefExpr 0x558f6d2e4a40 <col:76> 'T' lvalue ParmVar 0x558f6d2bfea8 'x' 'T &'
|     `-ReturnStmt 0x558f6d2e4ad0 <line:596:9, col:17>
|       `-UnaryOperator 0x558f6d2e4ab8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558f6d2e4aa8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558f6d2c05e8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x558f6d2c00b0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2c0128 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558f6d2c0548 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x558f6d2c01e8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2c0260 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2c0420 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x558f6d2e4c50 <col:65, line:614:5>
|     `-ReturnStmt 0x558f6d2e4c40 <line:613:9, col:46>
|       `-CallExpr 0x558f6d2e4c00 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e4b10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e4b80 <col:25> 'const char *' lvalue ParmVar 0x558f6d2c01e8 'keyword' 'const char *'
|         |-IntegerLiteral 0x558f6d2e4ba0 <col:34> 'int' 0
|         |-DeclRefExpr 0x558f6d2e4bc0 <col:37> 'P' lvalue ParmVar 0x558f6d2c0260 'parser' 'P'
|         `-DeclRefExpr 0x558f6d2e4be0 <col:45> 'Vector<T>' lvalue ParmVar 0x558f6d2c0420 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x558f6d2c0a18 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x558f6d2c0658 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558f6d2c0978 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x558f6d2c0710 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2c0860 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x558f6d2e4e70 <col:55, line:618:5>
|     `-ReturnStmt 0x558f6d2e4e60 <line:617:9, col:55>
|       `-CallExpr 0x558f6d2e4e20 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e4c78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e4ce8 <col:25> 'const char *' lvalue ParmVar 0x558f6d2c0710 'keyword' 'const char *'
|         |-IntegerLiteral 0x558f6d2e4d08 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x558f6d2e4de0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x558f6d2e4e00 <col:54> 'Vector<T>' lvalue ParmVar 0x558f6d2c0860 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x558f6d2c0fe8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x558f6d2c0a80 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2c0af8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558f6d2c0f48 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x558f6d2c0bb8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2c0c38 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x558f6d2c0cb0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2c0e00 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x558f6d2e5068 <col:76, line:623:5>
|     |-CallExpr 0x558f6d2e4fe8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558f6d2e4e88 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x558f6d2e4ec8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x558f6d2e4ed8 <col:34> 'const char *' lvalue ParmVar 0x558f6d2c0bb8 'keyword' 'const char *'
|     | |-BinaryOperator 0x558f6d2e4f88 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x558f6d2e4f38 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x558f6d2e4ef8 <col:43> 'int' lvalue ParmVar 0x558f6d2c0c38 'flags' 'int'
|     | | `-ImplicitCastExpr 0x558f6d2e4f70 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x558f6d2e4f50 <col:51> 'const int' lvalue Var 0x558f6d2b64d0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x558f6d2e4fa8 <col:63> 'P' lvalue ParmVar 0x558f6d2c0cb0 'parser' 'P'
|     | `-DeclRefExpr 0x558f6d2e4fc8 <col:71> 'Vector<T>' lvalue ParmVar 0x558f6d2c0e00 'x' 'Vector<T> &'
|     `-ReturnStmt 0x558f6d2e5058 <line:622:9, col:17>
|       `-UnaryOperator 0x558f6d2e5040 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558f6d2e5030 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558f6d2c1528 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x558f6d2c1060 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2c10d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558f6d2c1488 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x558f6d2c1198 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2c1218 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x558f6d2c1360 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x558f6d2e52d0 <col:66, line:627:5>
|     `-ReturnStmt 0x558f6d2e52c0 <line:626:9, col:59>
|       `-CallExpr 0x558f6d2e5280 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558f6d2e5098 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558f6d2e5108 <col:25> 'const char *' lvalue ParmVar 0x558f6d2c1198 'keyword' 'const char *'
|         |-DeclRefExpr 0x558f6d2e5128 <col:34> 'int' lvalue ParmVar 0x558f6d2c1218 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x558f6d2e5240 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x558f6d2e5260 <col:58> 'Vector<T>' lvalue ParmVar 0x558f6d2c1360 'x' 'Vector<T> &'
|-CXXMethodDecl 0x558f6d2c15b8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x558f6d2e5350 <col:25, line:633:5>
|   `-ReturnStmt 0x558f6d2e5340 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x558f6d2e5328 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x558f6d2e52f8 <col:16> 'const bool' lvalue ->_status 0x558f6d2cbbf8
|         `-CXXThisExpr 0x558f6d2e52e8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x558f6d2c1738 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x558f6d2c1670 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x558f6d2e5438 <col:27, line:639:5>
|   |-BinaryOperator 0x558f6d2e53e0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x558f6d2e5368 <col:9> 'bool' lvalue ParmVar 0x558f6d2c1670 'x' 'bool &'
|   | `-ImplicitCastExpr 0x558f6d2e53c8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x558f6d2e5398 <col:13> 'bool' lvalue ->_status 0x558f6d2cbbf8
|   |     `-CXXThisExpr 0x558f6d2e5388 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x558f6d2e5428 <line:638:9, col:17>
|     `-UnaryOperator 0x558f6d2e5410 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558f6d2e5400 <col:17> 'Args *' this
|-CXXMethodDecl 0x558f6d2c18b8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x558f6d2c17f8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x558f6d2e5528 <col:39, line:644:5>
|   |-BinaryOperator 0x558f6d2e54d0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x558f6d2e5458 <col:9> 'bool' lvalue ParmVar 0x558f6d2c17f8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x558f6d2e54b8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x558f6d2e5488 <col:13> 'const bool' lvalue ->_status 0x558f6d2cbbf8
|   |     `-CXXThisExpr 0x558f6d2e5478 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x558f6d2e5518 <line:643:9, col:17>
|     `-UnaryOperator 0x558f6d2e5500 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558f6d2e54f0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x558f6d2c1980 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x558f6d2e55d0 <col:30, line:651:5>
|   `-ReturnStmt 0x558f6d2e55c0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x558f6d2e55a8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x558f6d2e5578 <col:16> 'bool' lvalue ->_read_status 0x558f6d2aec60
|         `-ImplicitCastExpr 0x558f6d2e5558 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x558f6d2e5548 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x558f6d2c1ac8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x558f6d2c1a38 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x558f6d2e56d8 <col:32, line:658:5>
|   |-BinaryOperator 0x558f6d2e5680 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x558f6d2e55e8 <col:9> 'bool' lvalue ParmVar 0x558f6d2c1a38 'x' 'bool &'
|   | `-ImplicitCastExpr 0x558f6d2e5668 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x558f6d2e5638 <col:13> 'bool' lvalue ->_read_status 0x558f6d2aec60
|   |     `-ImplicitCastExpr 0x558f6d2e5618 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x558f6d2e5608 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x558f6d2e56c8 <line:657:9, col:17>
|     `-UnaryOperator 0x558f6d2e56b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558f6d2e56a0 <col:17> 'Args *' this
|-CXXMethodDecl 0x558f6d2c1c18 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x558f6d2c1b88 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x558f6d2e57e8 <col:44, line:663:5>
|   |-BinaryOperator 0x558f6d2e5790 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x558f6d2e56f8 <col:9> 'bool' lvalue ParmVar 0x558f6d2c1b88 'x' 'bool &'
|   | `-ImplicitCastExpr 0x558f6d2e5778 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x558f6d2e5748 <col:13> 'bool' lvalue ->_read_status 0x558f6d2aec60
|   |     `-ImplicitCastExpr 0x558f6d2e5728 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x558f6d2e5718 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x558f6d2e57d8 <line:662:9, col:17>
|     `-UnaryOperator 0x558f6d2e57c0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558f6d2e57b0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x558f6d2c1ce0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x558f6d2c1da8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x558f6d2c1e70 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x558f6d2c1f38 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x558f6d2c2248 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x558f6d2c1fd8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558f6d2c21a8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x558f6d2c20b8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x558f6d2e5ba0 <col:19, line:706:5>
|     `-IfStmt 0x558f6d2e5b78 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x558f6d2e58e8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x558f6d2e5aa8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x558f6d2e5a78 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x558f6d2e5a38 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x558f6d2e5940 <col:42> '<bound member function type>' ->simple_slot 0x558f6d2df100
|       |     | `-CXXThisExpr 0x558f6d2e5930 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x558f6d2e59d8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x558f6d2e5990 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x558f6d1b24b8
|       |     | `-DeclRefExpr 0x558f6d2e5970 <col:55> 'T' lvalue ParmVar 0x558f6d2c20b8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x558f6d2e5a18 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x558f6d2e5b68 <line:705:13, col:34>
|         `-CallExpr 0x558f6d2e5b40 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x558f6d2e5ac8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x558f6d2e5b20 <col:33> 'T' lvalue ParmVar 0x558f6d2c20b8 'x' 'T &'
|-FunctionTemplateDecl 0x558f6d2c2518 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x558f6d2c22a8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558f6d2c2478 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x558f6d2c2388 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x558f6d2e5f80 <col:31, line:717:5>
|     |-DeclStmt 0x558f6d2e5ce0 <line:713:9, col:23>
|     | `-VarDecl 0x558f6d2e5bc8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x558f6d2e5cb8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x558f6d2e5c40 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x558f6d2e5c98 <col:21> 'T' lvalue ParmVar 0x558f6d2c2388 'x' 'T &'
|     |-IfStmt 0x558f6d2e5f30 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x558f6d2e5dd8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x558f6d2e5f10 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x558f6d2e5eb0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x558f6d2e5e40 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558f6d1fd508 0x558f6d1fd128 0x558f6d1fcd58 0x558f6d1fc978 0x558f6d1fc598 0x558f6d1fc1c8
|     |   | `-DeclRefExpr 0x558f6d2e5e20 <col:14> 'T *' lvalue Var 0x558f6d2e5bc8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x558f6d2e5ef0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x558f6d2e5f68 <line:716:9, col:16>
|       `-DeclRefExpr 0x558f6d2e5f48 <col:16> 'T *' lvalue Var 0x558f6d2e5bc8 's' 'T *'
|-FunctionTemplateDecl 0x558f6d2c2928 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x558f6d2c2578 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558f6d2c25f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x558f6d2c2888 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x558f6d2c26d8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x558f6d2c2778 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x558f6d2e6290 <col:37, line:726:5>
|     |-IfStmt 0x558f6d2e6220 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x558f6d2e6240 <line:723:13, col:26>
|     | | `-VarDecl 0x558f6d2e5fe8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x558f6d2e60d8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x558f6d2e6060 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x558f6d2e60b8 <col:25> 'T' lvalue ParmVar 0x558f6d2c26d8 'x' 'T &'
|     | |-DeclRefExpr 0x558f6d2e6100 <col:16> 'T *' lvalue Var 0x558f6d2e5fe8 's' 'T *'
|     | `-BinaryOperator 0x558f6d2e6200 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x558f6d2e61b0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x558f6d2e6140 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558f6d1fd508 0x558f6d1fd128 0x558f6d1fcd58 0x558f6d1fc978 0x558f6d1fc598 0x558f6d1fc1c8
|     |   | `-DeclRefExpr 0x558f6d2e6120 <col:14> 'T *' lvalue Var 0x558f6d2e5fe8 's' 'T *'
|     |   `-DeclRefExpr 0x558f6d2e61e0 <col:18> 'const V' lvalue ParmVar 0x558f6d2c2778 'value' 'const V &'
|     `-ReturnStmt 0x558f6d2e6280 <line:725:9, col:17>
|       `-UnaryOperator 0x558f6d2e6268 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558f6d2e6258 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558f6d2c2d28 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x558f6d2c2990 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558f6d2c2c88 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x558f6d2c2a40 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2c2ac0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x558f6d2c2b68 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x558f6d2e70b0 <col:65, line:737:5>
|     |-DeclStmt 0x558f6d2e6328 <line:732:9, col:26>
|     | `-VarDecl 0x558f6d2e62c0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x558f6d2e7078 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x558f6d2e7098 <line:733:13, col:58>
|       | `-VarDecl 0x558f6d2e6350 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x558f6d2e6530 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x558f6d2e6500 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x558f6d2e64e8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x558f6d2e64c8 <col:26, col:58> 'String' (CXXTemporary 0x558f6d2e64c8)
|       |           `-CXXMemberCallExpr 0x558f6d2e6458 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x558f6d2e63c8 <col:26> '<bound member function type>' ->find 0x558f6d2de718
|       |             | `-CXXThisExpr 0x558f6d2e63b8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x558f6d2e6490 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558f6d2e63f8 <col:31> 'const char *' lvalue ParmVar 0x558f6d2c2a40 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x558f6d2e64a8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558f6d2e6418 <col:40> 'int' lvalue ParmVar 0x558f6d2c2ac0 'flags' 'int'
|       |             `-DeclRefExpr 0x558f6d2e6438 <col:47> 'Args::Slot *' lvalue Var 0x558f6d2e62c0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x558f6d2e65e8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x558f6d2e65d0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x558f6d2e65b0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x558f6d2e6580 <col:20> '<bound member function type>' .operator int (String::*)() const 0x558f6d177868
|       |       `-ImplicitCastExpr 0x558f6d2e6568 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x558f6d2e6548 <col:20> 'String' lvalue Var 0x558f6d2e6350 'str' 'String'
|       `-CompoundStmt 0x558f6d2e7058 <col:61, line:736:9>
|         |-DeclStmt 0x558f6d2e6aa0 <line:734:13, col:76>
|         | `-VarDecl 0x558f6d2e6638 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x558f6d2e6a70 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x558f6d2e69e0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x558f6d2e6a28 <col:60> 'T' lvalue ParmVar 0x558f6d2c2b68 'variable' 'T &'
|         |     `-UnaryOperator 0x558f6d2e6a58 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x558f6d2e6a48 <col:71> 'Args *' this
|         `-CallExpr 0x558f6d2e7028 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x558f6d2e6ac8 <col:13> '<bound member function type>' ->postparse 0x558f6d2de928
|           | `-CXXThisExpr 0x558f6d2e6ab8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x558f6d2e6fe8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x558f6d2e6af8 <col:23> 'T *' lvalue Var 0x558f6d2e6638 's' 'T *'
|           | `-CallExpr 0x558f6d2e6fa8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x558f6d2e6d80 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x558f6d2e6e80 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x558f6d2e6ea0 <col:86> 'String' lvalue Var 0x558f6d2e6350 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x558f6d2e6f50 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x558f6d2e6ee0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558f6d1fd508 0x558f6d1fd128 0x558f6d1fcd58 0x558f6d1fc978 0x558f6d1fc598 0x558f6d1fc1c8
|           |   | `-DeclRefExpr 0x558f6d2e6ec0 <col:92> 'T *' lvalue Var 0x558f6d2e6638 's' 'T *'
|           |   `-UnaryOperator 0x558f6d2e6f90 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x558f6d2e6f80 <col:96> 'Args *' this
|           `-DeclRefExpr 0x558f6d2e7008 <col:103> 'Args::Slot *' lvalue Var 0x558f6d2e62c0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558f6d2c3278 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x558f6d2c2d98 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558f6d2c2e18 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x558f6d2c31d8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x558f6d2c2ed8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2c2f58 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x558f6d2c2ff8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x558f6d2c3098 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x558f6d2e7f50 <col:88, line:745:5>
|     |-DeclStmt 0x558f6d2e7148 <line:741:9, col:26>
|     | `-VarDecl 0x558f6d2e70e0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558f6d2e7368 <line:742:9, col:55>
|     | `-VarDecl 0x558f6d2e7170 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x558f6d2e7350 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x558f6d2e7320 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x558f6d2e7308 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x558f6d2e72e8 <col:22, col:54> 'String' (CXXTemporary 0x558f6d2e72e8)
|     |           `-CXXMemberCallExpr 0x558f6d2e7278 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x558f6d2e71e8 <col:22> '<bound member function type>' ->find 0x558f6d2de718
|     |             | `-CXXThisExpr 0x558f6d2e71d8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x558f6d2e72b0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x558f6d2e7218 <col:27> 'const char *' lvalue ParmVar 0x558f6d2c2ed8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x558f6d2e72c8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x558f6d2e7238 <col:36> 'int' lvalue ParmVar 0x558f6d2c2f58 'flags' 'int'
|     |             `-DeclRefExpr 0x558f6d2e7258 <col:43> 'Args::Slot *' lvalue Var 0x558f6d2e70e0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x558f6d2e7740 <line:743:9, col:72>
|     | `-VarDecl 0x558f6d2e73b8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x558f6d2e7710 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x558f6d2e7680 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x558f6d2e76c8 <col:56> 'T' lvalue ParmVar 0x558f6d2c2ff8 'variable' 'T &'
|     |     `-UnaryOperator 0x558f6d2e76f8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x558f6d2e76e8 <col:67> 'Args *' this
|     `-CallExpr 0x558f6d2e7f20 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x558f6d2e7768 <col:9> '<bound member function type>' ->postparse 0x558f6d2de928
|       | `-CXXThisExpr 0x558f6d2e7758 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x558f6d2e7ee0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x558f6d2e7798 <col:19> 'T *' lvalue Var 0x558f6d2e73b8 's' 'T *'
|       | `-ParenExpr 0x558f6d2e7ec0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x558f6d2e7e90 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x558f6d2e7e78 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x558f6d2e7e60 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x558f6d2e7e40 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x558f6d2e7e10 <col:25> '<bound member function type>' .operator int (String::*)() const 0x558f6d177868
|       |     |       `-ImplicitCastExpr 0x558f6d2e7df8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x558f6d2e77b8 <col:25> 'String' lvalue Var 0x558f6d2e7170 'str' 'String'
|       |     |-CallExpr 0x558f6d2e7c68 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x558f6d2e7a40 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x558f6d2e7b40 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x558f6d2e7b60 <col:89> 'String' lvalue Var 0x558f6d2e7170 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x558f6d2e7c10 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x558f6d2e7ba0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558f6d1fd508 0x558f6d1fd128 0x558f6d1fcd58 0x558f6d1fc978 0x558f6d1fc598 0x558f6d1fc1c8
|       |     | | `-DeclRefExpr 0x558f6d2e7b80 <col:95> 'T *' lvalue Var 0x558f6d2e73b8 's' 'T *'
|       |     | `-UnaryOperator 0x558f6d2e7c50 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x558f6d2e7c40 <col:99> 'Args *' this
|       |     `-ParenExpr 0x558f6d2e7dd8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x558f6d2e7db8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x558f6d2e7d88 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x558f6d2e7d38 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x558f6d2e7cc8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558f6d1fd508 0x558f6d1fd128 0x558f6d1fcd58 0x558f6d1fc978 0x558f6d1fc598 0x558f6d1fc1c8
|       |         | | `-DeclRefExpr 0x558f6d2e7ca8 <col:109> 'T *' lvalue Var 0x558f6d2e73b8 's' 'T *'
|       |         | `-DeclRefExpr 0x558f6d2e7d68 <col:113> 'const V' lvalue ParmVar 0x558f6d2c3098 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x558f6d2e7da8 <col:120> 'bool' true
|       `-DeclRefExpr 0x558f6d2e7f00 <col:128> 'Args::Slot *' lvalue Var 0x558f6d2e70e0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558f6d2c37a8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x558f6d2c32f0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2c3368 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558f6d2c3708 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x558f6d2c3428 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2c34a8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x558f6d2c3520 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2c35c8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x558f6d2e8b48 <col:75, line:754:5>
|     |-DeclStmt 0x558f6d2e7ff8 <line:749:9, col:26>
|     | `-VarDecl 0x558f6d2e7f90 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x558f6d2e8b10 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x558f6d2e8b30 <line:750:13, col:58>
|       | `-VarDecl 0x558f6d2e8020 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x558f6d2e8200 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x558f6d2e81d0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x558f6d2e81b8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x558f6d2e8198 <col:26, col:58> 'String' (CXXTemporary 0x558f6d2e8198)
|       |           `-CXXMemberCallExpr 0x558f6d2e8128 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x558f6d2e8098 <col:26> '<bound member function type>' ->find 0x558f6d2de718
|       |             | `-CXXThisExpr 0x558f6d2e8088 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x558f6d2e8160 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558f6d2e80c8 <col:31> 'const char *' lvalue ParmVar 0x558f6d2c3428 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x558f6d2e8178 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558f6d2e80e8 <col:40> 'int' lvalue ParmVar 0x558f6d2c34a8 'flags' 'int'
|       |             `-DeclRefExpr 0x558f6d2e8108 <col:47> 'Args::Slot *' lvalue Var 0x558f6d2e7f90 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x558f6d2e82b8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x558f6d2e82a0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x558f6d2e8280 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x558f6d2e8250 <col:20> '<bound member function type>' .operator int (String::*)() const 0x558f6d177868
|       |       `-ImplicitCastExpr 0x558f6d2e8238 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x558f6d2e8218 <col:20> 'String' lvalue Var 0x558f6d2e8020 'str' 'String'
|       `-CompoundStmt 0x558f6d2e8af0 <col:61, line:753:9>
|         |-DeclStmt 0x558f6d2e8690 <line:751:13, col:63>
|         | `-VarDecl 0x558f6d2e8308 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x558f6d2e8660 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x558f6d2e85d0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x558f6d2e8618 <col:47> 'T' lvalue ParmVar 0x558f6d2c35c8 'variable' 'T &'
|         |     `-UnaryOperator 0x558f6d2e8648 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x558f6d2e8638 <col:58> 'Args *' this
|         `-CallExpr 0x558f6d2e8ac0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x558f6d2e86b8 <col:13> '<bound member function type>' ->postparse 0x558f6d2de928
|           | `-CXXThisExpr 0x558f6d2e86a8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x558f6d2e8a80 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x558f6d2e86e8 <col:23> 'T *' lvalue Var 0x558f6d2e8308 's' 'T *'
|           | `-CallExpr 0x558f6d2e8a40 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x558f6d2e88d0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x558f6d2e8918 <col:56> 'P' lvalue ParmVar 0x558f6d2c3520 'parser' 'P'
|           |   |-DeclRefExpr 0x558f6d2e8938 <col:64> 'String' lvalue Var 0x558f6d2e8020 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x558f6d2e89e8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x558f6d2e8978 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558f6d1fd508 0x558f6d1fd128 0x558f6d1fcd58 0x558f6d1fc978 0x558f6d1fc598 0x558f6d1fc1c8
|           |   | `-DeclRefExpr 0x558f6d2e8958 <col:70> 'T *' lvalue Var 0x558f6d2e8308 's' 'T *'
|           |   `-UnaryOperator 0x558f6d2e8a28 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x558f6d2e8a18 <col:74> 'Args *' this
|           `-DeclRefExpr 0x558f6d2e8aa0 <col:81> 'Args::Slot *' lvalue Var 0x558f6d2e7f90 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558f6d2c3e08 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x558f6d2c3820 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558f6d2c3898 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x558f6d2c3918 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x558f6d2c3d68 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x558f6d2c39e0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2c3a60 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x558f6d2c3ad8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2c3b78 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x558f6d2c3c18 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x558f6d2e98d8 <col:98, line:762:5>
|     |-DeclStmt 0x558f6d2e8be0 <line:758:9, col:26>
|     | `-VarDecl 0x558f6d2e8b78 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558f6d2e8e00 <line:759:9, col:55>
|     | `-VarDecl 0x558f6d2e8c08 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x558f6d2e8de8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x558f6d2e8db8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x558f6d2e8da0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x558f6d2e8d80 <col:22, col:54> 'String' (CXXTemporary 0x558f6d2e8d80)
|     |           `-CXXMemberCallExpr 0x558f6d2e8d10 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x558f6d2e8c80 <col:22> '<bound member function type>' ->find 0x558f6d2de718
|     |             | `-CXXThisExpr 0x558f6d2e8c70 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x558f6d2e8d48 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x558f6d2e8cb0 <col:27> 'const char *' lvalue ParmVar 0x558f6d2c39e0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x558f6d2e8d60 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x558f6d2e8cd0 <col:36> 'int' lvalue ParmVar 0x558f6d2c3a60 'flags' 'int'
|     |             `-DeclRefExpr 0x558f6d2e8cf0 <col:43> 'Args::Slot *' lvalue Var 0x558f6d2e8b78 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x558f6d2e9220 <line:760:9, col:59>
|     | `-VarDecl 0x558f6d2e8e58 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x558f6d2e91f0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x558f6d2e9160 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x558f6d2e91a8 <col:43> 'T' lvalue ParmVar 0x558f6d2c3b78 'variable' 'T &'
|     |     `-UnaryOperator 0x558f6d2e91d8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x558f6d2e91c8 <col:54> 'Args *' this
|     `-CallExpr 0x558f6d2e98a8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x558f6d2e9248 <col:9> '<bound member function type>' ->postparse 0x558f6d2de928
|       | `-CXXThisExpr 0x558f6d2e9238 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x558f6d2e9868 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x558f6d2e9278 <col:19> 'T *' lvalue Var 0x558f6d2e8e58 's' 'T *'
|       | `-ParenExpr 0x558f6d2e9848 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x558f6d2e9818 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x558f6d2e9800 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x558f6d2e97e8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x558f6d2e97c8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x558f6d2e9798 <col:25> '<bound member function type>' .operator int (String::*)() const 0x558f6d177868
|       |     |       `-ImplicitCastExpr 0x558f6d2e9780 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x558f6d2e9298 <col:25> 'String' lvalue Var 0x558f6d2e8c08 'str' 'String'
|       |     |-CallExpr 0x558f6d2e95f0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x558f6d2e9480 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x558f6d2e94c8 <col:59> 'P' lvalue ParmVar 0x558f6d2c3ad8 'parser' 'P'
|       |     | |-DeclRefExpr 0x558f6d2e94e8 <col:67> 'String' lvalue Var 0x558f6d2e8c08 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x558f6d2e9598 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x558f6d2e9528 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558f6d1fd508 0x558f6d1fd128 0x558f6d1fcd58 0x558f6d1fc978 0x558f6d1fc598 0x558f6d1fc1c8
|       |     | | `-DeclRefExpr 0x558f6d2e9508 <col:73> 'T *' lvalue Var 0x558f6d2e8e58 's' 'T *'
|       |     | `-UnaryOperator 0x558f6d2e95d8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x558f6d2e95c8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x558f6d2e9760 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x558f6d2e9740 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x558f6d2e9710 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x558f6d2e96c0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x558f6d2e9650 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558f6d1fd508 0x558f6d1fd128 0x558f6d1fcd58 0x558f6d1fc978 0x558f6d1fc598 0x558f6d1fc1c8
|       |         | | `-DeclRefExpr 0x558f6d2e9630 <col:87> 'T *' lvalue Var 0x558f6d2e8e58 's' 'T *'
|       |         | `-DeclRefExpr 0x558f6d2e96f0 <col:91> 'const V' lvalue ParmVar 0x558f6d2c3c18 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x558f6d2e9730 <col:98> 'bool' true
|       `-DeclRefExpr 0x558f6d2e9888 <col:106> 'Args::Slot *' lvalue Var 0x558f6d2e8b78 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558f6d2c4478 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x558f6d2c3e88 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2c3f08 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558f6d2c3f88 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558f6d2c43d8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558f6d2c4050 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2c40d0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x558f6d2c4148 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2c41e8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x558f6d2c4288 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x558f6d2ecbb8 <col:60, line:773:5>
|     |-DeclStmt 0x558f6d2e9980 <line:767:9, col:26>
|     | `-VarDecl 0x558f6d2e9918 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x558f6d2ecb80 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x558f6d2ecba0 <line:768:13, col:58>
|       | `-VarDecl 0x558f6d2e99a8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x558f6d2e9b88 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x558f6d2e9b58 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x558f6d2e9b40 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x558f6d2e9b20 <col:26, col:58> 'String' (CXXTemporary 0x558f6d2e9b20)
|       |           `-CXXMemberCallExpr 0x558f6d2e9ab0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x558f6d2e9a20 <col:26> '<bound member function type>' ->find 0x558f6d2de718
|       |             | `-CXXThisExpr 0x558f6d2e9a10 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x558f6d2e9ae8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558f6d2e9a50 <col:31> 'const char *' lvalue ParmVar 0x558f6d2c4050 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x558f6d2e9b00 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558f6d2e9a70 <col:40> 'int' lvalue ParmVar 0x558f6d2c40d0 'flags' 'int'
|       |             `-DeclRefExpr 0x558f6d2e9a90 <col:47> 'Args::Slot *' lvalue Var 0x558f6d2e9918 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x558f6d2ebf48 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x558f6d2ebf30 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x558f6d2ebf10 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x558f6d2e9bd8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x558f6d177868
|       |       `-ImplicitCastExpr 0x558f6d2e9bc0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x558f6d2e9ba0 <col:20> 'String' lvalue Var 0x558f6d2e99a8 'str' 'String'
|       `-CompoundStmt 0x558f6d2ecb58 <col:61, line:772:9>
|         |-DeclStmt 0x558f6d2ec280 <line:769:13, col:66>
|         | `-VarDecl 0x558f6d2ebf98 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x558f6d2ec250 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x558f6d2ec1c0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x558f6d2ec208 <col:49> 'T1' lvalue ParmVar 0x558f6d2c41e8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x558f6d2ec238 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x558f6d2ec228 <col:61> 'Args *' this
|         |-DeclStmt 0x558f6d2ec5f0 <line:770:13, col:66>
|         | `-VarDecl 0x558f6d2ec308 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x558f6d2ec5c0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x558f6d2ec530 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x558f6d2ec578 <col:49> 'T2' lvalue ParmVar 0x558f6d2c4288 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x558f6d2ec5a8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x558f6d2ec598 <col:61> 'Args *' this
|         `-CallExpr 0x558f6d2ecb28 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x558f6d2ec618 <col:13> '<bound member function type>' ->postparse 0x558f6d2de928
|           | `-CXXThisExpr 0x558f6d2ec608 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x558f6d2ecae8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x558f6d2ec688 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x558f6d2ec648 <col:23> 'T1 *' lvalue Var 0x558f6d2ebf98 's1' 'T1 *'
|           | | `-DeclRefExpr 0x558f6d2ec668 <col:29> 'T2 *' lvalue Var 0x558f6d2ec308 's2' 'T2 *'
|           | `-CallExpr 0x558f6d2ecaa0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x558f6d2ec870 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x558f6d2ec8b8 <col:63> 'P' lvalue ParmVar 0x558f6d2c4148 'parser' 'P'
|           |   |-DeclRefExpr 0x558f6d2ec8d8 <col:71> 'String' lvalue Var 0x558f6d2e99a8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x558f6d2ec988 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x558f6d2ec918 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558f6d1fd508 0x558f6d1fd128 0x558f6d1fcd58 0x558f6d1fc978 0x558f6d1fc598 0x558f6d1fc1c8
|           |   | `-DeclRefExpr 0x558f6d2ec8f8 <col:77> 'T1 *' lvalue Var 0x558f6d2ebf98 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x558f6d2eca48 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x558f6d2ec9d8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558f6d1fd508 0x558f6d1fd128 0x558f6d1fcd58 0x558f6d1fc978 0x558f6d1fc598 0x558f6d1fc1c8
|           |   | `-DeclRefExpr 0x558f6d2ec9b8 <col:82> 'T2 *' lvalue Var 0x558f6d2ec308 's2' 'T2 *'
|           |   `-UnaryOperator 0x558f6d2eca88 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x558f6d2eca78 <col:87> 'Args *' this
|           `-DeclRefExpr 0x558f6d2ecb08 <col:94> 'Args::Slot *' lvalue Var 0x558f6d2e9918 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558f6d2c4868 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x558f6d2c44f8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558f6d2c47c8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x558f6d2c45b0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2c4630 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x558f6d2c46a8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x558f6d2ed0d0 <col:67, line:780:5>
|     |-DeclStmt 0x558f6d2ecc50 <line:777:9, col:26>
|     | `-VarDecl 0x558f6d2ecbe8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x558f6d2ed098 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x558f6d2ed0b8 <line:778:13, col:58>
|       | `-VarDecl 0x558f6d2ecc78 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x558f6d2ece58 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x558f6d2ece28 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x558f6d2ece10 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x558f6d2ecdf0 <col:26, col:58> 'String' (CXXTemporary 0x558f6d2ecdf0)
|       |           `-CXXMemberCallExpr 0x558f6d2ecd80 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x558f6d2eccf0 <col:26> '<bound member function type>' ->find 0x558f6d2de718
|       |             | `-CXXThisExpr 0x558f6d2ecce0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x558f6d2ecdb8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558f6d2ecd20 <col:31> 'const char *' lvalue ParmVar 0x558f6d2c45b0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x558f6d2ecdd0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558f6d2ecd40 <col:40> 'int' lvalue ParmVar 0x558f6d2c4630 'flags' 'int'
|       |             `-DeclRefExpr 0x558f6d2ecd60 <col:47> 'Args::Slot *' lvalue Var 0x558f6d2ecbe8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x558f6d2ecf10 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x558f6d2ecef8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x558f6d2eced8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x558f6d2ecea8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x558f6d177868
|       |       `-ImplicitCastExpr 0x558f6d2ece90 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x558f6d2ece70 <col:20> 'String' lvalue Var 0x558f6d2ecc78 'str' 'String'
|       `-CallExpr 0x558f6d2ed068 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x558f6d2ecf38 <col:13> '<bound member function type>' ->postparse 0x558f6d2de928
|         | `-CXXThisExpr 0x558f6d2ecf28 <col:13> 'Args *' implicit this
|         |-CallExpr 0x558f6d2ed018 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x558f6d2ecf88 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x558f6d2ecf68 <col:23> 'P' lvalue ParmVar 0x558f6d2c46a8 'parser' 'P'
|         | |-DeclRefExpr 0x558f6d2ecfd0 <col:36> 'String' lvalue Var 0x558f6d2ecc78 'str' 'String'
|         | `-UnaryOperator 0x558f6d2ed000 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x558f6d2ecff0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x558f6d2ed048 <col:49> 'Args::Slot *' lvalue Var 0x558f6d2ecbe8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558f6d2c9408 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x558f6d2c48d8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558f6d2c9368 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x558f6d2c4990 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2c4a10 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x558f6d2c9280 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x558f6d2eda40 <col:71, line:792:5>
|     |-DeclStmt 0x558f6d2ed168 <line:784:9, col:26>
|     | `-VarDecl 0x558f6d2ed100 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558f6d2ed238 <line:785:9, col:29>
|     | `-VarDecl 0x558f6d2ed198 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x558f6d2ed220 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x558f6d2ed200 <col:28> 'int' 1
|     |-WhileStmt 0x558f6d2ed8f0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x558f6d2ed910 <line:786:16, col:61>
|     | | `-VarDecl 0x558f6d2ed260 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x558f6d2ed440 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x558f6d2ed410 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x558f6d2ed3f8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x558f6d2ed3d8 <col:29, col:61> 'String' (CXXTemporary 0x558f6d2ed3d8)
|     | |           `-CXXMemberCallExpr 0x558f6d2ed368 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x558f6d2ed2d8 <col:29> '<bound member function type>' ->find 0x558f6d2de718
|     | |             | `-CXXThisExpr 0x558f6d2ed2c8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x558f6d2ed3a0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558f6d2ed308 <col:34> 'const char *' lvalue ParmVar 0x558f6d2c4990 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x558f6d2ed3b8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558f6d2ed328 <col:43> 'int' lvalue ParmVar 0x558f6d2c4a10 'flags' 'int'
|     | |             `-DeclRefExpr 0x558f6d2ed348 <col:50> 'Args::Slot *' lvalue Var 0x558f6d2ed100 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x558f6d2ed4f8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x558f6d2ed4e0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x558f6d2ed4c0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x558f6d2ed490 <col:23> '<bound member function type>' .operator int (String::*)() const 0x558f6d177868
|     | |       `-ImplicitCastExpr 0x558f6d2ed478 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x558f6d2ed458 <col:23> 'String' lvalue Var 0x558f6d2ed260 'str' 'String'
|     | `-CompoundStmt 0x558f6d2ed8c8 <col:64, line:790:9>
|     |   |-CallExpr 0x558f6d2ed650 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x558f6d2ed520 <col:13> '<bound member function type>' ->postparse 0x558f6d2de928
|     |   | | `-CXXThisExpr 0x558f6d2ed510 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x558f6d2ed600 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x558f6d2ed570 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x558f6d2ed550 <col:23> 'P' lvalue ParmVar 0x558f6d2c9280 'parser' 'P'
|     |   | | |-DeclRefExpr 0x558f6d2ed5b8 <col:36> 'String' lvalue Var 0x558f6d2ed260 'str' 'String'
|     |   | | `-UnaryOperator 0x558f6d2ed5e8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x558f6d2ed5d8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x558f6d2ed630 <col:49> 'Args::Slot *' lvalue Var 0x558f6d2ed100 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x558f6d2ed7e8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x558f6d2ed680 <col:13> 'int' lvalue Var 0x558f6d2ed198 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x558f6d2ed7d0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x558f6d2ed7b0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x558f6d2ed718 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x558f6d2ed6f8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x558f6d2ed6e0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x558f6d2ed6a0 <col:28> 'int' lvalue Var 0x558f6d2ed198 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x558f6d2ed6c0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x558f6d2ed798 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x558f6d2ed768 <col:49> 'bool' lvalue ->_read_status 0x558f6d2aec60
|     |   |         `-ImplicitCastExpr 0x558f6d2ed748 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x558f6d2ed738 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x558f6d2ed898 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x558f6d2ed808 <col:13> 'int' lvalue ParmVar 0x558f6d2c4a10 'flags' 'int'
|     |     `-UnaryOperator 0x558f6d2ed880 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x558f6d2ed868 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x558f6d2ed848 <col:23> 'const int' lvalue Var 0x558f6d2b61e8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x558f6d2eda20 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x558f6d2ed958 <col:9> 'bool' lvalue ->_read_status 0x558f6d2aec60
|       | `-ImplicitCastExpr 0x558f6d2ed938 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x558f6d2ed928 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x558f6d2eda00 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x558f6d2ed9e0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x558f6d2ed9c8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x558f6d2ed988 <col:25> 'int' lvalue Var 0x558f6d2ed198 'read_status' 'int'
|           `-IntegerLiteral 0x558f6d2ed9a8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x558f6d2c98e8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x558f6d2c9478 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2c94f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558f6d2c9848 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x558f6d2c95b8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2c9638 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x558f6d2c96b0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2c9758 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x558f6d2ee9d0 <col:84, line:805:5>
|     |-DeclStmt 0x558f6d2edae8 <line:796:9, col:26>
|     | `-VarDecl 0x558f6d2eda80 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558f6d2edbb8 <line:797:9, col:29>
|     | `-VarDecl 0x558f6d2edb18 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x558f6d2edba0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x558f6d2edb80 <col:28> 'int' 1
|     |-DeclStmt 0x558f6d2edef0 <line:798:9, col:71>
|     | `-VarDecl 0x558f6d2edc08 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x558f6d2edec0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x558f6d2ede30 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x558f6d2ede78 <col:55> 'T' lvalue ParmVar 0x558f6d2c9758 'variable' 'T &'
|     |     `-UnaryOperator 0x558f6d2edea8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x558f6d2ede98 <col:66> 'Args *' this
|     |-WhileStmt 0x558f6d2ee880 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x558f6d2ee8a0 <line:799:16, col:61>
|     | | `-VarDecl 0x558f6d2edf18 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x558f6d2ee0f8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x558f6d2ee0c8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x558f6d2ee0b0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x558f6d2ee090 <col:29, col:61> 'String' (CXXTemporary 0x558f6d2ee090)
|     | |           `-CXXMemberCallExpr 0x558f6d2ee020 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x558f6d2edf90 <col:29> '<bound member function type>' ->find 0x558f6d2de718
|     | |             | `-CXXThisExpr 0x558f6d2edf80 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x558f6d2ee058 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558f6d2edfc0 <col:34> 'const char *' lvalue ParmVar 0x558f6d2c95b8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x558f6d2ee070 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558f6d2edfe0 <col:43> 'int' lvalue ParmVar 0x558f6d2c9638 'flags' 'int'
|     | |             `-DeclRefExpr 0x558f6d2ee000 <col:50> 'Args::Slot *' lvalue Var 0x558f6d2eda80 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x558f6d2ee1b0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x558f6d2ee198 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x558f6d2ee178 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x558f6d2ee148 <col:23> '<bound member function type>' .operator int (String::*)() const 0x558f6d177868
|     | |       `-ImplicitCastExpr 0x558f6d2ee130 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x558f6d2ee110 <col:23> 'String' lvalue Var 0x558f6d2edf18 'str' 'String'
|     | `-CompoundStmt 0x558f6d2ee858 <col:64, line:803:9>
|     |   |-CallExpr 0x558f6d2ee5e0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x558f6d2ee1d8 <col:13> '<bound member function type>' ->postparse 0x558f6d2de928
|     |   | | `-CXXThisExpr 0x558f6d2ee1c8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x558f6d2ee5a0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x558f6d2ee208 <col:23> 'T *' lvalue Var 0x558f6d2edc08 's' 'T *'
|     |   | | `-CallExpr 0x558f6d2ee560 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x558f6d2ee3f0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x558f6d2ee438 <col:56> 'P' lvalue ParmVar 0x558f6d2c96b0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x558f6d2ee458 <col:64> 'String' lvalue Var 0x558f6d2edf18 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x558f6d2ee508 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x558f6d2ee498 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558f6d1fd508 0x558f6d1fd128 0x558f6d1fcd58 0x558f6d1fc978 0x558f6d1fc598 0x558f6d1fc1c8
|     |   | |   | `-DeclRefExpr 0x558f6d2ee478 <col:70> 'T *' lvalue Var 0x558f6d2edc08 's' 'T *'
|     |   | |   `-UnaryOperator 0x558f6d2ee548 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x558f6d2ee538 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x558f6d2ee5c0 <col:81> 'Args::Slot *' lvalue Var 0x558f6d2eda80 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x558f6d2ee778 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x558f6d2ee610 <col:13> 'int' lvalue Var 0x558f6d2edb18 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x558f6d2ee760 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x558f6d2ee740 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x558f6d2ee6a8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x558f6d2ee688 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x558f6d2ee670 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x558f6d2ee630 <col:28> 'int' lvalue Var 0x558f6d2edb18 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x558f6d2ee650 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x558f6d2ee728 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x558f6d2ee6f8 <col:49> 'bool' lvalue ->_read_status 0x558f6d2aec60
|     |   |         `-ImplicitCastExpr 0x558f6d2ee6d8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x558f6d2ee6c8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x558f6d2ee828 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x558f6d2ee798 <col:13> 'int' lvalue ParmVar 0x558f6d2c9638 'flags' 'int'
|     |     `-UnaryOperator 0x558f6d2ee810 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x558f6d2ee7f8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x558f6d2ee7d8 <col:23> 'const int' lvalue Var 0x558f6d2b61e8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x558f6d2ee9b0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x558f6d2ee8e8 <col:9> 'bool' lvalue ->_read_status 0x558f6d2aec60
|       | `-ImplicitCastExpr 0x558f6d2ee8c8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x558f6d2ee8b8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x558f6d2ee990 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x558f6d2ee970 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x558f6d2ee958 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x558f6d2ee918 <col:25> 'int' lvalue Var 0x558f6d2edb18 'read_status' 'int'
|           `-IntegerLiteral 0x558f6d2ee938 <col:40> 'int' 1
|-FunctionTemplateDecl 0x558f6d2c9ec8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x558f6d2c9960 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558f6d2c99d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558f6d2c9e28 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x558f6d2c9a98 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558f6d2c9b18 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x558f6d2c9b90 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x558f6d2c9ce0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x558f6d2ef7d8 <col:87, line:821:5>
|     |-DeclStmt 0x558f6d2eea80 <line:809:9, col:26>
|     | `-VarDecl 0x558f6d2eea18 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558f6d2eeb50 <line:810:9, col:29>
|     | `-VarDecl 0x558f6d2eeab0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x558f6d2eeb38 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x558f6d2eeb18 <col:28> 'int' 1
|     |-DeclStmt 0x558f6d2eed98 <line:811:9, col:38>
|     | `-VarDecl 0x558f6d2eec80 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x558f6d2eed70 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x558f6d2eecf8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x558f6d2eed50 <col:29> 'Vector<T>' lvalue ParmVar 0x558f6d2c9ce0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x558f6d2ef688 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x558f6d2ef6a8 <line:812:16, col:61>
|     | | `-VarDecl 0x558f6d2eedc0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x558f6d2eefa0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x558f6d2eef70 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x558f6d2eef58 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x558f6d2eef38 <col:29, col:61> 'String' (CXXTemporary 0x558f6d2eef38)
|     | |           `-CXXMemberCallExpr 0x558f6d2eeec8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x558f6d2eee38 <col:29> '<bound member function type>' ->find 0x558f6d2de718
|     | |             | `-CXXThisExpr 0x558f6d2eee28 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x558f6d2eef00 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558f6d2eee68 <col:34> 'const char *' lvalue ParmVar 0x558f6d2c9a98 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x558f6d2eef18 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558f6d2eee88 <col:43> 'int' lvalue ParmVar 0x558f6d2c9b18 'flags' 'int'
|     | |             `-DeclRefExpr 0x558f6d2eeea8 <col:50> 'Args::Slot *' lvalue Var 0x558f6d2eea18 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x558f6d2ef058 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x558f6d2ef040 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x558f6d2ef020 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x558f6d2eeff0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x558f6d177868
|     | |       `-ImplicitCastExpr 0x558f6d2eefd8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x558f6d2eefb8 <col:23> 'String' lvalue Var 0x558f6d2eedc0 'str' 'String'
|     | `-CompoundStmt 0x558f6d2ef650 <col:64, line:819:9>
|     |   |-DeclStmt 0x558f6d2ef118 <line:813:13, col:23>
|     |   | `-VarDecl 0x558f6d2ef080 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x558f6d2ef0f8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x558f6d2ef298 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x558f6d2ef140 <col:13> '<bound member function type>' ->postparse 0x558f6d2de928
|     |   | | `-CXXThisExpr 0x558f6d2ef130 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x558f6d2ef240 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x558f6d2ef190 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x558f6d2ef170 <col:23> 'P' lvalue ParmVar 0x558f6d2c9b90 'parser' 'P'
|     |   | | |-DeclRefExpr 0x558f6d2ef1d8 <col:36> 'String' lvalue Var 0x558f6d2eedc0 'str' 'String'
|     |   | | |-DeclRefExpr 0x558f6d2ef1f8 <col:41> 'T' lvalue Var 0x558f6d2ef080 'sx' 'T'
|     |   | | `-UnaryOperator 0x558f6d2ef228 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x558f6d2ef218 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x558f6d2ef278 <col:53> 'Args::Slot *' lvalue Var 0x558f6d2eea18 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x558f6d2ef3f0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x558f6d2ef328 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x558f6d2ef2f8 <col:17> 'bool' lvalue ->_read_status 0x558f6d2aec60
|     |   | |   `-ImplicitCastExpr 0x558f6d2ef2d8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x558f6d2ef2c8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x558f6d2ef3c8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x558f6d2ef360 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x558f6d2ef340 <col:17> 'Vector<T> *' lvalue Var 0x558f6d2eec80 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x558f6d2ef3a8 <col:30> 'T' lvalue Var 0x558f6d2ef080 'sx' 'T'
|     |   |-BinaryOperator 0x558f6d2ef570 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x558f6d2ef408 <col:13> 'int' lvalue Var 0x558f6d2eeab0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x558f6d2ef558 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x558f6d2ef538 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x558f6d2ef4a0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x558f6d2ef480 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x558f6d2ef468 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x558f6d2ef428 <col:28> 'int' lvalue Var 0x558f6d2eeab0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x558f6d2ef448 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x558f6d2ef520 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x558f6d2ef4f0 <col:49> 'bool' lvalue ->_read_status 0x558f6d2aec60
|     |   |         `-ImplicitCastExpr 0x558f6d2ef4d0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x558f6d2ef4c0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x558f6d2ef620 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x558f6d2ef590 <col:13> 'int' lvalue ParmVar 0x558f6d2c9b18 'flags' 'int'
|     |     `-UnaryOperator 0x558f6d2ef608 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x558f6d2ef5f0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x558f6d2ef5d0 <col:23> 'const int' lvalue Var 0x558f6d2b61e8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x558f6d2ef7b8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x558f6d2ef6f0 <col:9> 'bool' lvalue ->_read_status 0x558f6d2aec60
|       | `-ImplicitCastExpr 0x558f6d2ef6d0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x558f6d2ef6c0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x558f6d2ef798 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x558f6d2ef778 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x558f6d2ef760 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x558f6d2ef720 <col:25> 'int' lvalue Var 0x558f6d2eeab0 'read_status' 'int'
|           `-IntegerLiteral 0x558f6d2ef740 <col:40> 'int' 1
|-AccessSpecDecl 0x558f6d2c9f40 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x558f6d2c9f68 prev 0x558f6d2b4498 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x558f6d2ca060 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x558f6d2ca150 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x558f6d2ef810 <col:16, line:828:9>
| |-CXXDestructorDecl 0x558f6d2ca240 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x558f6d2ef820 <col:25, line:830:9>
| |-CXXMethodDecl 0x558f6d2ca340 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x558f6d2ca3f0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x558f6d2ca498 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x558f6d2ca498
| | `-ParmVarDecl 0x558f6d2ca5a8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x558f6d2cad68 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x558f6d2cad68
|   `-ParmVarDecl 0x558f6d2cae78 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x558f6d2ca618 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x558f6d2ca778 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x558f6d2ca970 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x558f6d2ca820 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x558f6d2ca898 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x558f6d2efa00 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x558f6d2cac28 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x558f6d2ef870 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x558f6d2ef830 <col:20> 'void *' lvalue ParmVar 0x558f6d2ca820 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x558f6d2cac90 '_slot' 'char *'
| | | `-CXXNewExpr 0x558f6d2ef8f8 <col:32, col:45> 'char *' array Function 0x558f6d07c6b8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x558f6d2ef8e0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x558f6d2ef8b0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x558f6d2ca898 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x558f6d2cacf0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x558f6d2ef9c0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x558f6d2ef980 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x558f6d2ca898 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x558f6d2efa80 <col:61, line:838:9>
| |-CXXDestructorDecl 0x558f6d2caa70 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x558f6d2ca240 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x558f6d2efb08 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x558f6d2efae8 <line:840:13, col:22> 'void' array Function 0x558f6d07ca18 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x558f6d2efad0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x558f6d2efaa0 <col:22> 'char *' lvalue ->_slot 0x558f6d2cac90
| |         `-CXXThisExpr 0x558f6d2efa90 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x558f6d2cab70 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x558f6d2ca340 Slot::store 'void ()' ]
| | `-CompoundStmt 0x558f6d2efcf8 <col:22, line:844:9>
| |   `-CallExpr 0x558f6d2efc60 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x558f6d2efc48 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x558f6d2efc28 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x558f6d0ad8d8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x558f6d2efc98 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x558f6d2efb78 <col:20> 'void *' lvalue ->_ptr 0x558f6d2cac28
| |     |   `-CXXThisExpr 0x558f6d2efb68 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x558f6d2efcc8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x558f6d2efcb0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x558f6d2efbb8 <col:26> 'char *' lvalue ->_slot 0x558f6d2cac90
| |     |     `-CXXThisExpr 0x558f6d2efba8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x558f6d2efce0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x558f6d2efbf8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x558f6d2cacf0
| |         `-CXXThisExpr 0x558f6d2efbe8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x558f6d2cac28 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x558f6d2cac90 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x558f6d2cacf0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x558f6d2caee8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x558f6d2caee8
| | `-ParmVarDecl 0x558f6d2caff8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x558f6d2cb098 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x558f6d2cb098
|   `-ParmVarDecl 0x558f6d2cb1a8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x558f6d2cb348 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x558f6d2cb218 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x558f6d2cb2b8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x558f6d2cb5e0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x558f6d2cb7d8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x558f6d2cb6a8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x558f6d2cb958 '_ptr' 'T *'
|   | | `-ParenListExpr 0x558f6d2efd30 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x558f6d2efd10 <col:20> 'T *' lvalue ParmVar 0x558f6d2cb6a8 'ptr' 'T *'
|   | `-CompoundStmt 0x558f6d2efd80 <col:25, line:854:9>
|   |-CXXMethodDecl 0x558f6d2cb8a8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x558f6d2ca340 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x558f6d2eff30 <col:22, line:857:9>
|   |   `-CallExpr 0x558f6d2eff00 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x558f6d2efd90 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x558f6d15be18 0x558f6d10a778
|   |     |-CXXOperatorCallExpr 0x558f6d2efe90 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x558f6d2efe20 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558f6d1fd508 0x558f6d1fd128 0x558f6d1fcd58 0x558f6d1fc978 0x558f6d1fc598 0x558f6d1fc1c8
|   |     | `-MemberExpr 0x558f6d2efdf0 <col:29> 'T *' lvalue ->_ptr 0x558f6d2cb958
|   |     |   `-CXXThisExpr 0x558f6d2efde0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x558f6d2efed0 <col:35> 'T' lvalue ->_slot 0x558f6d2cb9b8
|   |       `-CXXThisExpr 0x558f6d2efec0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x558f6d2cb958 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x558f6d2cb9b8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x558f6d2cba20 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x558f6d2cbb20 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x558f6d2cbb70 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558f6d2cbb00 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x558f6d2cbae0 <col:31> 'int' 48
|-FieldDecl 0x558f6d2cbb98 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x558f6d2cbbf8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x558f6d2cbc58 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x558f6d2cbd90 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x558f6d2ddfc0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x558f6d2de020 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x558f6d2de0d0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x558f6d2de2f8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x558f6d2de200 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x558f6d2de448 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x558f6d2de3b8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x558f6d2de718 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x558f6d2de508 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x558f6d2de588 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x558f6d2de630 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x558f6d2de928 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x558f6d2de7e0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x558f6d2de858 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x558f6d2de9f8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x558f6d2deb48 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x558f6d2deab0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x558f6d2deed8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x558f6d2dec08 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x558f6d2dec88 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x558f6d2ded30 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x558f6d2dede8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x558f6d2df100 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x558f6d2defb0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x558f6d2df028 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x558f6d2df418 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x558f6d2df1b0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x558f6d2df378 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x558f6d2df288 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558f6d167f98 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558f6d1680b8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x558f6d168148 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x558f6d168218 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x558f6d168300 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x558f6d168518 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x558f6d1683c0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558f6d1686c8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x558f6d1685d0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x558f6d168810 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x558f6d168780 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x558f6d168958 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x558f6d1688c8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558f6d168aa0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x558f6d168a10 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558f6d168b68 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x558f6d168cb0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x558f6d168c20 <col:28> col:31 'int'
|-CXXMethodDecl 0x558f6d168d78 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x558f6d168ec0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x558f6d168e30 <col:28> col:31 'int'
|-CXXMethodDecl 0x558f6d169038 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x558f6d168f78 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558f6d169180 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x558f6d1690f0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558f6d169248 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x558f6d169408 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x558f6d1692f8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x558f6d169370 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558f6d169658 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x558f6d1694c8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558f6d169540 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x558f6d169708 <col:86> "" ""
|-CXXMethodDecl 0x558f6d169978 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x558f6d1697e8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x558f6d169860 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558f6d169b28 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x558f6d169a38 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x558f6d169cd8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x558f6d169be0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x558f6d169fa8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x558f6d169d90 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x558f6d169e08 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x558f6d169e80 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558f6d16a288 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x558f6d16a070 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x558f6d16a0e8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558f6d16a160 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x558f6d16a340 <col:115> "" ""
|-AccessSpecDecl 0x558f6d16a3b0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x558f6d16a3e8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558f6d16a898 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x558f6d16a898
| `-ParmVarDecl 0x558f6d16a9a8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x558f6d16aa48 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x558f6d16aa48
| `-ParmVarDecl 0x558f6d16ab58 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x558f6d19bcc8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x558f6d227de0 <col:7>
|-CXXConstructorDecl 0x558f6d19bda0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x558f6d19bda0
| `-ParmVarDecl 0x558f6d19beb8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x558f6d19bf28 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x558f6d19bf28
| `-ParmVarDecl 0x558f6d19c038 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x558f6d22a7e0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558f6d2168e8 prev 0x558f6d20b150 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558f6d2169e0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x558f6d216ad0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x558f6d216bf8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x558f6d216d78 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x558f6d216ef8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x558f6d217078 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x558f6d227f48 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x558f6d2287b8 <col:11>
|-CXXDestructorDecl 0x558f6d228020 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x558f6d228158 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x558f6d228158
| `-ParmVarDecl 0x558f6d228268 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x558f6d228308 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x558f6d228308
| `-ParmVarDecl 0x558f6d228418 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x558f6d22b1d8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x558f6d22b2e8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x558f6d22b568 <col:11>
|   `-ReturnStmt 0x558f6d22b558 <col:11>
|     `-UnaryOperator 0x558f6d22b540 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558f6d22b530 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x558f6d22b358 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x558f6d22b358
  `-ParmVarDecl 0x558f6d22b468 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558f6d2170e0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558f6d2171f8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x558f6d217298 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x558f6d217300 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x558f6d217368 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x558f6d2173d0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x558f6d217430 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x558f6d2174f0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x558f6d217550 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x558f6d2175b0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x558f6d227e58 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x558f6d217298 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x558f6d2287c8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x558f6d228820 <col:12>
|-CXXConstructorDecl 0x558f6d228488 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x558f6d228488
| `-ParmVarDecl 0x558f6d228598 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x558f6d228638 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x558f6d228638
| `-ParmVarDecl 0x558f6d228748 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x558f6d22a8c0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558f6d2047c0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558f6d2048d8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x558f6d204968 <col:16, col:22> col:16 public
|-EnumDecl 0x558f6d204990 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x558f6d204a90 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x558f6d204b70 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d204a70 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x558f6d204a50 <col:21> 'int' 28
| `-EnumConstantDecl 0x558f6d204b20 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x558f6d204b88 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558f6d204b00 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x558f6d204ae0 <col:22> 'int' 64
|-CXXMethodDecl 0x558f6d204ec8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x558f6d204bb0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558f6d204c30 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x558f6d204ca8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558f6d204d20 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558f6d204f88 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x558f6d205188 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x558f6d205000 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x558f6d205078 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558f6d205238 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x558f6d205398 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x558f6d2052a8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558f6d205440 <col:72> warn_unused_result ""
|-TypedefDecl 0x558f6d205770 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x558f6d205700 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x558f6d2056a0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x558f6d205660 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x558f6ccdc4e0 'void'
|       |-PointerType 0x558f6d0ecfb0 'unsigned char *'
|       | `-BuiltinType 0x558f6ccdc5e0 'unsigned char'
|       |-TypedefType 0x558f6ce5afe0 'size_t' sugar
|       | |-Typedef 0x558f6ce5a640 'size_t'
|       | `-BuiltinType 0x558f6ccdc640 'unsigned long'
|       `-PointerType 0x558f6ccdcce0 'void *'
|         `-BuiltinType 0x558f6ccdc4e0 'void'
|-CXXMethodDecl 0x558f6d205be8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x558f6d2057e0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x558f6d205858 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558f6d2058f0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x558f6d205970 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x558f6d218a40 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x558f6d218a28 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x558f6d2189f0 <col:58> 'int' 0
| |-ParmVarDecl 0x558f6d2059f0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x558f6d218a68 <col:76> 'int' 0
| |-ParmVarDecl 0x558f6d205a70 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x558f6d218a88 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x558f6d205cf0 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x558f6d205d70 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x558f6d205e30 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x558f6d205ed0 <col:20>
| `-OptimizeNoneAttr 0x558f6d205f28 <col:30>
|-CXXMethodDecl 0x558f6d205f98 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x558f6d206038 <col:20>
| `-OptimizeNoneAttr 0x558f6d206090 <col:30>
|-CXXMethodDecl 0x558f6d206108 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x558f6d2061a8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x558f6d206258 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x558f6d2062f8 <col:20>
| |-OptimizeNoneAttr 0x558f6d206350 <col:30>
| `-WarnUnusedResultAttr 0x558f6d206378 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x558f6d2063d0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x558f6d206470 <col:20>
| `-OptimizeNoneAttr 0x558f6d2064c8 <col:30>
|-CXXMethodDecl 0x558f6d206518 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x558f6d2065b8 <col:20>
| `-OptimizeNoneAttr 0x558f6d206610 <col:30>
|-CXXMethodDecl 0x558f6d206658 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x558f6d2066f8 <col:20>
| `-OptimizeNoneAttr 0x558f6d206750 <col:30>
|-CXXMethodDecl 0x558f6d206798 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x558f6d206858 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x558f6d206920 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x558f6d2069e8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x558f6d206aa8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x558f6d206bc8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x558f6d218b50 <col:54, line:99:5>
|   `-ReturnStmt 0x558f6d218b40 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x558f6d218b28 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x558f6d218af8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x558f6d2178e8
|         `-CXXThisExpr 0x558f6d218ae8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x558f6d206d68 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x558f6d206c78 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x558f6d220f58 <col:67, line:103:5>
|   `-BinaryOperator 0x558f6d220f38 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x558f6d220ed0 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x558f6d2178e8
|     | `-CXXThisExpr 0x558f6d218b68 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x558f6d220f20 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x558f6d220f00 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x558f6d206c78 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x558f6d206e60 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x558f6d220fd8 <col:33, line:107:5>
|   `-ReturnStmt 0x558f6d220fc8 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x558f6d220fb0 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x558f6d220f80 <col:16> 'void *' lvalue ->_destructor_argument 0x558f6d217950
|         `-CXXThisExpr 0x558f6d220f70 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x558f6d206f20 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x558f6d221608 <col:25, line:113:5>
|   |-ParenExpr 0x558f6d221350 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x558f6d221320 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x558f6d221090 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x558f6d221068 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x558f6d221030 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x558f6d221000 <col:24> '<bound member function type>' ->shared 0x558f6d205f98
|   |   |       `-ImplicitCastExpr 0x558f6d221050 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x558f6d220ff0 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x558f6d2210f0 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558f6d2210d0 <col:42> 'int' 0
|   |   `-CallExpr 0x558f6d221280 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x558f6d221268 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558f6d221248 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558f6ced6a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558f6d2212c0 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d221160 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x558f6d2212d8 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d221188 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558f6d2212f0 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558f6d2211c0 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x558f6d221308 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558f6d221230 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558f6d221218 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558f6d2211e0 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x558f6d221550 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x558f6d221380 <col:2> 'unsigned char *' lvalue ->_head 0x558f6d2176f0
|   | | `-CXXThisExpr 0x558f6d221370 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x558f6d221538 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x558f6d221518 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x558f6d2213c0 <col:10> 'unsigned char *' lvalue ->_data 0x558f6d217758
|   |     | `-CXXThisExpr 0x558f6d2213b0 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x558f6d221500 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x558f6d2214e0 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x558f6d221400 <col:18> 'unsigned char *' lvalue ->_tail 0x558f6d2177c0
|   |         | `-CXXThisExpr 0x558f6d2213f0 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x558f6d2214c8 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x558f6d2214a8 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x558f6d221440 <col:26> 'unsigned char *' lvalue ->_end 0x558f6d217828
|   |             | `-CXXThisExpr 0x558f6d221430 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x558f6d221490 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x558f6d221470 <col:33> 'int' 0
|   `-BinaryOperator 0x558f6d2215e8 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x558f6d221580 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x558f6d2178e8
|     | `-CXXThisExpr 0x558f6d221570 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x558f6d2215d0 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x558f6d2215b0 <col:16> 'int' 0
|-CXXMethodDecl 0x558f6d207060 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x558f6d206fd0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558f6d207108 <col:20>
| |-OptimizeNoneAttr 0x558f6d207160 <col:30>
| `-WarnUnusedResultAttr 0x558f6d207188 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x558f6d207258 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x558f6d2071c8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558f6d207300 <col:20>
| |-OptimizeNoneAttr 0x558f6d207358 <col:30>
| `-WarnUnusedResultAttr 0x558f6d207380 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x558f6d2074b8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x558f6d2073c0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558f6d207560 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x558f6d207660 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x558f6d2075d0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558f6d207708 <col:20>
| `-OptimizeNoneAttr 0x558f6d207760 <col:30>
|-CXXMethodDecl 0x558f6d207828 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x558f6d207798 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558f6d2078d0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x558f6d2079d0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x558f6d207940 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558f6d207a78 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x558f6d207b78 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x558f6d207ae8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558f6d207c20 <col:20>
| `-OptimizeNoneAttr 0x558f6d207c78 <col:30>
|-CXXMethodDecl 0x558f6d207e08 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x558f6d207cb8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x558f6d207d30 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x558f6d218aa8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x558f6d207eb8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x558f6d2080b8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x558f6d207f30 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x558f6d207fa8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558f6d2082c8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x558f6d208178 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x558f6d2081f0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558f6d2084d8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x558f6d208388 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x558f6d208408 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x558f6d218ab8 <col:39> 'int' 0
|-CXXMethodDecl 0x558f6d2085a8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x558f6d208670 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x558f6d208738 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x558f6d2087f8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x558f6d2088c0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x558f6d208a08 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x558f6d208978 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x558f6d208bd8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x558f6d208ac8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x558f6d208b40 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558f6d208ca8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x558f6d208d68 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x558f6d208e08 <col:20>
| `-OptimizeNoneAttr 0x558f6d208e60 <col:30>
|-CXXMethodDecl 0x558f6d208eb0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x558f6d208f50 <col:20>
| `-OptimizeNoneAttr 0x558f6d208fa8 <col:30>
|-CXXMethodDecl 0x558f6d208ff8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x558f6d2090b8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x558f6d209180 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x558f6d209220 <col:20>
| `-OptimizeNoneAttr 0x558f6d209278 <col:30>
|-CXXMethodDecl 0x558f6d2093c8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x558f6d2092b8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x558f6d209330 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558f6d209518 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x558f6d209488 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558f6d2095e0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x558f6d2096a0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x558f6d209740 <col:20>
| `-OptimizeNoneAttr 0x558f6d209798 <col:30>
|-CXXMethodDecl 0x558f6d2097e8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x558f6d209888 <col:20>
| `-OptimizeNoneAttr 0x558f6d2098e0 <col:30>
|-CXXMethodDecl 0x558f6d209930 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x558f6d2099f8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x558f6d209a98 <col:20>
| `-OptimizeNoneAttr 0x558f6d209af0 <col:30>
|-CXXMethodDecl 0x558f6d209b38 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x558f6d209d00 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x558f6d209e78 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x558f6d209db0 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x558f6d209f68 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x558f6d20a008 <col:20>
| `-OptimizeNoneAttr 0x558f6d20a060 <col:30>
|-CXXMethodDecl 0x558f6d20a0b0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x558f6d20a170 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x558f6d20a3a8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x558f6d20a220 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x558f6d20a298 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558f6d20a458 <col:20>
| `-OptimizeNoneAttr 0x558f6d20a4b0 <col:30>
|-CXXMethodDecl 0x558f6d20a558 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x558f6d20a5f8 <col:20>
| `-OptimizeNoneAttr 0x558f6d20a650 <col:30>
|-CXXMethodDecl 0x558f6d20a6a0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x558f6d20a740 <col:20>
| `-OptimizeNoneAttr 0x558f6d20a798 <col:30>
|-CXXMethodDecl 0x558f6d20a7e0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x558f6d20a880 <col:20>
| `-OptimizeNoneAttr 0x558f6d20a8d8 <col:30>
|-CXXMethodDecl 0x558f6d20a9d8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x558f6d20a910 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x558f6d20aa80 <col:20>
| `-OptimizeNoneAttr 0x558f6d20aad8 <col:30>
|-CXXMethodDecl 0x558f6d20ac98 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x558f6d20ab10 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x558f6d20ab88 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558f6d20ad48 <col:20>
| `-OptimizeNoneAttr 0x558f6d20ada0 <col:30>
|-CXXMethodDecl 0x558f6d20ae48 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x558f6d20af68 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x558f6d20b088 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x558f6d20b128 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x558f6d20b150 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x558f6d20b278 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x558f6d20b318 <col:20>
| `-OptimizeNoneAttr 0x558f6d20b370 <col:30>
|-CXXMethodDecl 0x558f6d20b418 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x558f6d20b4b8 <col:20>
| `-OptimizeNoneAttr 0x558f6d20b510 <col:30>
|-AccessSpecDecl 0x558f6d20b538 <line:344:3, col:9> col:3 public
|-EnumDecl 0x558f6d20b560 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x558f6d20b660 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x558f6d20b6b0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558f6d20b640 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x558f6d20b620 <col:14> 'int' 48
|-CXXMethodDecl 0x558f6d20b718 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x558f6d20b7b8 <col:20>
| `-OptimizeNoneAttr 0x558f6d20b810 <col:30>
|-CXXMethodDecl 0x558f6d20b888 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x558f6d20b928 <col:20>
| `-OptimizeNoneAttr 0x558f6d20b980 <col:30>
|-CXXMethodDecl 0x558f6d20ba48 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x558f6d20b9b8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x558f6d20bbe8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x558f6d20bd88 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x558f6d20bc98 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x558f6d20be30 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x558f6d20bf30 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558f6d20c2e0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d20bf10 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x558f6d20bef0 <col:9> 'int' 0
| |-EnumConstantDecl 0x558f6d20bfc0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558f6d20c2f8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d20bfa0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x558f6d20bf80 <col:14> 'int' 1
| |-EnumConstantDecl 0x558f6d20c050 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558f6d20c310 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d20c030 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x558f6d20c010 <col:14> 'int' 2
| |-EnumConstantDecl 0x558f6d20c0e0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558f6d20c328 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d20c0c0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x558f6d20c0a0 <col:14> 'int' 3
| |-EnumConstantDecl 0x558f6d20c170 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558f6d20c340 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d20c150 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x558f6d20c130 <col:13> 'int' 4
| |-EnumConstantDecl 0x558f6d20c200 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558f6d20c358 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d20c1e0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x558f6d20c1c0 <col:13> 'int' 5
| `-EnumConstantDecl 0x558f6d20c290 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x558f6d20c370 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558f6d20c270 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x558f6d20c250 <col:14> 'int' 6
|-CXXMethodDecl 0x558f6d20c3d8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x558f6d20c478 <col:20>
| `-OptimizeNoneAttr 0x558f6d20c4d0 <col:30>
|-CXXMethodDecl 0x558f6d20c5c8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x558f6d20c508 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x558f6d20c670 <col:20>
| `-OptimizeNoneAttr 0x558f6d20c6c8 <col:30>
|-CXXMethodDecl 0x558f6d20c738 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x558f6d20c860 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x558f6d20c9d8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x558f6d20c910 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x558f6d20caa0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x558f6d20cb68 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x558f6d20cca8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x558f6d20cc18 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x558f6d20cd50 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x558f6d20ce50 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x558f6d20d050 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d20ce30 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x558f6d20ce10 <col:23> 'int' 0
| |-EnumConstantDecl 0x558f6d20cee0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x558f6d20d068 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d20cec0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x558f6d20cea0 <col:45> 'int' 4
| |-EnumConstantDecl 0x558f6d20cf70 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x558f6d20d080 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d20cf50 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x558f6d20cf30 <col:24> 'int' 0
| `-EnumConstantDecl 0x558f6d20d000 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x558f6d20d098 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558f6d20cfe0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x558f6d20cfc0 <col:47> 'int' 16
|-CXXMethodDecl 0x558f6d20d0f8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x558f6d20d268 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x558f6d20d1a8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x558f6d20d310 <col:20>
| `-OptimizeNoneAttr 0x558f6d20d368 <col:30>
|-CXXMethodDecl 0x558f6d20d3b8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x558f6d221728 <col:18, col:36>
|   `-ReturnStmt 0x558f6d221718 <col:20, col:33>
|     `-ImplicitCastExpr 0x558f6d221700 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x558f6d2216e0 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x558f6d2216b0 <col:27> '<bound member function type>' ->xanno 0x558f6d20b418
|           `-CXXThisExpr 0x558f6d2216a0 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x558f6d20d4b0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x558f6d221838 <col:30, col:48>
|   `-ReturnStmt 0x558f6d221828 <col:32, col:45>
|     `-ImplicitCastExpr 0x558f6d221810 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x558f6d2217f0 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x558f6d2217c0 <col:39> '<bound member function type>' ->xanno 0x558f6d20b278
|           `-CXXThisExpr 0x558f6d2217b0 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x558f6d20d598 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x558f6d2219d0 <col:24, col:50>
|   `-ReturnStmt 0x558f6d2219c0 <col:26, col:47>
|     `-UnaryOperator 0x558f6d2219a8 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x558f6d221988 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x558f6d221970 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x558f6d221920 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x558f6d216bf8
|         |   `-CXXMemberCallExpr 0x558f6d221900 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x558f6d2218d0 <col:34> '<bound member function type>' ->xanno 0x558f6d20b418
|         |       `-CXXThisExpr 0x558f6d2218c0 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x558f6d221950 <col:46> 'int' 0
|-CXXMethodDecl 0x558f6d20d688 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x558f6d221ba8 <col:36, col:62>
|   `-ReturnStmt 0x558f6d221b98 <col:38, col:59>
|     `-UnaryOperator 0x558f6d221b80 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x558f6d221b60 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x558f6d221b48 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x558f6d221ab8 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x558f6d216bf8
|         |   `-CXXMemberCallExpr 0x558f6d221a98 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x558f6d221a68 <col:46> '<bound member function type>' ->xanno 0x558f6d20b278
|         |       `-CXXThisExpr 0x558f6d221a58 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x558f6d221ae8 <col:58> 'int' 0
|-CXXMethodDecl 0x558f6d20d7a8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x558f6d221d40 <col:26, col:53>
|   `-ReturnStmt 0x558f6d221d30 <col:28, col:50>
|     `-UnaryOperator 0x558f6d221d18 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x558f6d221cf8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x558f6d221ce0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x558f6d221c90 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x558f6d216ef8
|         |   `-CXXMemberCallExpr 0x558f6d221c70 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x558f6d221c40 <col:36> '<bound member function type>' ->xanno 0x558f6d20b418
|         |       `-CXXThisExpr 0x558f6d221c30 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x558f6d221cc0 <col:49> 'int' 0
|-CXXMethodDecl 0x558f6d20d8c8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x558f6d221f18 <col:38, col:65>
|   `-ReturnStmt 0x558f6d221f08 <col:40, col:62>
|     `-UnaryOperator 0x558f6d221ef0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x558f6d221ed0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x558f6d221eb8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x558f6d221e28 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x558f6d216ef8
|         |   `-CXXMemberCallExpr 0x558f6d221e08 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x558f6d221dd8 <col:48> '<bound member function type>' ->xanno 0x558f6d20b278
|         |       `-CXXThisExpr 0x558f6d221dc8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x558f6d221e58 <col:61> 'int' 0
|-CXXMethodDecl 0x558f6d20da78 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x558f6d20d980 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x558f6d2225e8 <col:34, line:463:5>
|   |-ParenExpr 0x558f6d222430 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x558f6d222400 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x558f6d222068 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558f6d222038 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558f6d221f88 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558f6d221f70 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558f6d221f30 <col:23> 'int' lvalue ParmVar 0x558f6d20d980 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558f6d221f50 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558f6d222018 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558f6d221fe8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558f6d221fa8 <col:33> 'int' lvalue ParmVar 0x558f6d20d980 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x558f6d222000 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x558f6d221fc8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558f6d20b660 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x558f6d2220c8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558f6d2220a8 <col:56> 'int' 0
|   |   `-CallExpr 0x558f6d222360 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x558f6d222348 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558f6d222328 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558f6ced6a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558f6d2223a0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d2221b8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x558f6d2223b8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d2221e8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558f6d2223d0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558f6d222220 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x558f6d2223e8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558f6d222310 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558f6d2222f8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558f6d2222b8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x558f6d2225d8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x558f6d2225c0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x558f6d2225a0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x558f6d222570 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x558f6d222520 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x558f6d216bf8
|         |   `-CXXMemberCallExpr 0x558f6d222500 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x558f6d2224d0 <col:9> '<bound member function type>' ->xanno 0x558f6d20b278
|         |       `-CXXThisExpr 0x558f6d2224c0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x558f6d222588 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x558f6d222550 <col:21> 'int' lvalue ParmVar 0x558f6d20d980 'i' 'int'
|-CXXMethodDecl 0x558f6d20dd10 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x558f6d20db38 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x558f6d20dbb0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x558f6d222c78 <col:40, line:472:5>
|   |-ParenExpr 0x558f6d222a90 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x558f6d222a60 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x558f6d222740 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558f6d222710 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558f6d222660 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558f6d222648 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558f6d222608 <col:23> 'int' lvalue ParmVar 0x558f6d20db38 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558f6d222628 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558f6d2226f0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558f6d2226c0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558f6d222680 <col:33> 'int' lvalue ParmVar 0x558f6d20db38 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x558f6d2226d8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x558f6d2226a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558f6d20b660 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x558f6d2227a0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558f6d222780 <col:56> 'int' 0
|   |   `-CallExpr 0x558f6d2229c0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x558f6d2229a8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558f6d222988 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558f6ced6a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558f6d222a00 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d222810 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x558f6d222a18 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d222840 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558f6d222a30 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558f6d222878 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x558f6d222a48 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558f6d222970 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558f6d222958 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558f6d222918 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x558f6d222c58 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x558f6d222c00 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x558f6d222bd0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x558f6d222b80 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x558f6d216bf8
|     | |   `-CXXMemberCallExpr 0x558f6d222b60 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x558f6d222b30 <col:2> '<bound member function type>' ->xanno 0x558f6d20b418
|     | |       `-CXXThisExpr 0x558f6d222b20 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x558f6d222be8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x558f6d222bb0 <col:14> 'int' lvalue ParmVar 0x558f6d20db38 'i' 'int'
|     `-ImplicitCastExpr 0x558f6d222c40 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x558f6d222c20 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x558f6d20dbb0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x558f6d20dec8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x558f6d20ddd8 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x558f6d2233f8 <col:36, line:485:5>
|   |-ParenExpr 0x558f6d223160 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x558f6d223130 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558f6d222e10 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558f6d222de0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558f6d222cf0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558f6d222cd8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558f6d222c98 <col:23> 'int' lvalue ParmVar 0x558f6d20ddd8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558f6d222cb8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558f6d222dc0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558f6d222da8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558f6d222d10 <col:33> 'int' lvalue ParmVar 0x558f6d20ddd8 'i' 'int'
|   |   |     `-BinaryOperator 0x558f6d222d88 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558f6d222d70 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558f6d222d30 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558f6d20b660 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558f6d222d50 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x558f6d222e70 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558f6d222e50 <col:60> 'int' 0
|   |   `-CallExpr 0x558f6d223090 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558f6d223078 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558f6d223058 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558f6ced6a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558f6d2230d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d222ee0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x558f6d2230e8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d222f18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558f6d223100 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558f6d222f50 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x558f6d223118 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558f6d223040 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558f6d223028 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558f6d222fe8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x558f6d2233e8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x558f6d2233d0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x558f6d2233b8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558f6d223388 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x558f6d223328 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x558f6d2232f8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558f6d223270 <col:61, col:70> 'char const[48]' lvalue ->c 0x558f6d216ad0
|             |   `-CXXMemberCallExpr 0x558f6d223250 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558f6d223220 <col:61> '<bound member function type>' ->xanno 0x558f6d20b278
|             |       `-CXXThisExpr 0x558f6d223210 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558f6d223310 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558f6d2232a0 <col:74> 'int' lvalue ParmVar 0x558f6d20ddd8 'i' 'int'
|-CXXMethodDecl 0x558f6d20e118 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x558f6d20df88 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x558f6d20e000 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x558f6d223b48 <col:42, line:500:5>
|   |-ParenExpr 0x558f6d2238e0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x558f6d2238b0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558f6d223590 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558f6d223560 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558f6d223470 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558f6d223458 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558f6d223418 <col:23> 'int' lvalue ParmVar 0x558f6d20df88 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558f6d223438 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558f6d223540 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558f6d223528 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558f6d223490 <col:33> 'int' lvalue ParmVar 0x558f6d20df88 'i' 'int'
|   |   |     `-BinaryOperator 0x558f6d223508 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558f6d2234f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558f6d2234b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558f6d20b660 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558f6d2234d0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x558f6d2235f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558f6d2235d0 <col:60> 'int' 0
|   |   `-CallExpr 0x558f6d223810 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558f6d2237f8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558f6d2237d8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558f6ced6a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558f6d223850 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d223660 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x558f6d223868 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d223698 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558f6d223880 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558f6d2236d0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x558f6d223898 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558f6d2237c0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558f6d2237a8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558f6d223768 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x558f6d223b28 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x558f6d223ad8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x558f6d223aa8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x558f6d223a50 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x558f6d223a20 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x558f6d2239d0 <col:48, col:57> 'char [48]' lvalue ->c 0x558f6d216ad0
|     |     |   `-CXXMemberCallExpr 0x558f6d2239b0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x558f6d223980 <col:48> '<bound member function type>' ->xanno 0x558f6d20b418
|     |     |       `-CXXThisExpr 0x558f6d223970 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x558f6d223a38 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x558f6d223a00 <col:61> 'int' lvalue ParmVar 0x558f6d20df88 'i' 'int'
|     `-ImplicitCastExpr 0x558f6d223b10 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x558f6d223af0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x558f6d20e000 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x558f6d20e2d8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x558f6d20e1e0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x558f6d2242a8 <col:35, line:513:5>
|   |-ParenExpr 0x558f6d223fb8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x558f6d223f88 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558f6d223ce0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558f6d223cb0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558f6d223bc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558f6d223ba8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558f6d223b68 <col:23> 'int' lvalue ParmVar 0x558f6d20e1e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558f6d223b88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558f6d223c90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558f6d223c78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558f6d223be0 <col:33> 'int' lvalue ParmVar 0x558f6d20e1e0 'i' 'int'
|   |   |     `-BinaryOperator 0x558f6d223c58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558f6d223c40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558f6d223c00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558f6d20b660 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558f6d223c20 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x558f6d223d40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558f6d223d20 <col:60> 'int' 0
|   |   `-CallExpr 0x558f6d223ee8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558f6d223ed0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558f6d223eb0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558f6ced6a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558f6d223f28 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d223db0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x558f6d223f40 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d223de8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558f6d223f58 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558f6d223e20 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x558f6d223f70 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558f6d223e98 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558f6d223e80 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558f6d223e40 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x558f6d224298 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x558f6d224280 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x558f6d224268 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558f6d224238 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x558f6d2241b0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x558f6d224180 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558f6d224130 <col:60, col:69> 'char const[48]' lvalue ->c 0x558f6d216ad0
|             |   `-CXXMemberCallExpr 0x558f6d224110 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558f6d2240e0 <col:60> '<bound member function type>' ->xanno 0x558f6d20b278
|             |       `-CXXThisExpr 0x558f6d2240d0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558f6d224198 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558f6d224160 <col:73> 'int' lvalue ParmVar 0x558f6d20e1e0 'i' 'int'
|-CXXMethodDecl 0x558f6d20e528 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x558f6d20e398 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x558f6d20e410 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x558f6d2249b8 <col:41, line:528:5>
|   |-ParenExpr 0x558f6d224750 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x558f6d224720 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558f6d224440 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558f6d224410 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558f6d224320 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558f6d224308 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558f6d2242c8 <col:23> 'int' lvalue ParmVar 0x558f6d20e398 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558f6d2242e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558f6d2243f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558f6d2243d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558f6d224340 <col:33> 'int' lvalue ParmVar 0x558f6d20e398 'i' 'int'
|   |   |     `-BinaryOperator 0x558f6d2243b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558f6d2243a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558f6d224360 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558f6d20b660 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558f6d224380 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x558f6d2244a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558f6d224480 <col:60> 'int' 0
|   |   `-CallExpr 0x558f6d224680 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558f6d224668 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558f6d224648 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558f6ced6a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558f6d2246c0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d224510 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x558f6d2246d8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d224548 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558f6d2246f0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558f6d224580 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x558f6d224708 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558f6d224630 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558f6d224618 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558f6d2245d8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x558f6d224998 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x558f6d224948 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x558f6d224918 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x558f6d2248c0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x558f6d224890 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x558f6d224840 <col:47, col:56> 'char [48]' lvalue ->c 0x558f6d216ad0
|     |     |   `-CXXMemberCallExpr 0x558f6d224820 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x558f6d2247f0 <col:47> '<bound member function type>' ->xanno 0x558f6d20b418
|     |     |       `-CXXThisExpr 0x558f6d2247e0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x558f6d2248a8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x558f6d224870 <col:60> 'int' lvalue ParmVar 0x558f6d20e398 'i' 'int'
|     `-ImplicitCastExpr 0x558f6d224980 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x558f6d224960 <col:65> 'int16_t':'short' lvalue ParmVar 0x558f6d20e410 'x' 'int16_t':'short'
|-CXXMethodDecl 0x558f6d20e6e8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x558f6d20e5f0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x558f6d2250e8 <col:36, line:541:5>
|   |-ParenExpr 0x558f6d224e28 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x558f6d224df8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558f6d224b50 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558f6d224b20 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558f6d224a30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558f6d224a18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558f6d2249d8 <col:23> 'int' lvalue ParmVar 0x558f6d20e5f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558f6d2249f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558f6d224b00 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558f6d224ae8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558f6d224a50 <col:33> 'int' lvalue ParmVar 0x558f6d20e5f0 'i' 'int'
|   |   |     `-BinaryOperator 0x558f6d224ac8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558f6d224ab0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558f6d224a70 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558f6d20b660 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558f6d224a90 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x558f6d224bb0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558f6d224b90 <col:60> 'int' 0
|   |   `-CallExpr 0x558f6d224d58 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558f6d224d40 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558f6d224d20 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558f6ced6a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558f6d224d98 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d224c20 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x558f6d224db0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d224c58 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558f6d224dc8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558f6d224c90 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x558f6d224de0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558f6d224d08 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558f6d224cf0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558f6d224cb0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x558f6d2250d8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x558f6d2250c0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x558f6d2250a8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558f6d225078 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x558f6d225020 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x558f6d224ff0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558f6d224fa0 <col:61, col:70> 'char const[48]' lvalue ->c 0x558f6d216ad0
|             |   `-CXXMemberCallExpr 0x558f6d224f80 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558f6d224f50 <col:61> '<bound member function type>' ->xanno 0x558f6d20b278
|             |       `-CXXThisExpr 0x558f6d224f40 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558f6d225008 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558f6d224fd0 <col:74> 'int' lvalue ParmVar 0x558f6d20e5f0 'i' 'int'
|-CXXMethodDecl 0x558f6d20e8b8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x558f6d20e7a8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x558f6d20e820 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558f6d20e968 <col:20>
| `-OptimizeNoneAttr 0x558f6d20e9c0 <col:30>
|-CXXMethodDecl 0x558f6d20eaf8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x558f6d20ea00 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x558f6d2257b8 <col:35, line:562:5>
|   |-ParenExpr 0x558f6d225558 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x558f6d225528 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558f6d225280 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558f6d225250 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558f6d225160 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558f6d225148 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558f6d225108 <col:23> 'int' lvalue ParmVar 0x558f6d20ea00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558f6d225128 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558f6d225230 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558f6d225218 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558f6d225180 <col:33> 'int' lvalue ParmVar 0x558f6d20ea00 'i' 'int'
|   |   |     `-BinaryOperator 0x558f6d2251f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558f6d2251e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558f6d2251a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558f6d20b660 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558f6d2251c0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x558f6d2252e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558f6d2252c0 <col:60> 'int' 0
|   |   `-CallExpr 0x558f6d225488 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558f6d225470 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558f6d225450 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558f6ced6a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558f6d2254c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d225350 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x558f6d2254e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d225388 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558f6d2254f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558f6d2253c0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x558f6d225510 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558f6d225438 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558f6d225420 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558f6d2253e0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x558f6d2257a8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x558f6d225790 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x558f6d225778 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558f6d225748 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x558f6d2256f0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x558f6d2256c0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558f6d225670 <col:60, col:69> 'char const[48]' lvalue ->c 0x558f6d216ad0
|             |   `-CXXMemberCallExpr 0x558f6d225650 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558f6d225620 <col:60> '<bound member function type>' ->xanno 0x558f6d20b278
|             |       `-CXXThisExpr 0x558f6d225610 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558f6d2256d8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558f6d2256a0 <col:73> 'int' lvalue ParmVar 0x558f6d20ea00 'i' 'int'
|-CXXMethodDecl 0x558f6d20ed08 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x558f6d20ebb8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x558f6d20ec30 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x558f6d225e98 <col:41, line:577:5>
|   |-ParenExpr 0x558f6d225c28 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x558f6d225bf8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558f6d225950 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558f6d225920 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558f6d225830 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558f6d225818 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558f6d2257d8 <col:23> 'int' lvalue ParmVar 0x558f6d20ebb8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558f6d2257f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558f6d225900 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558f6d2258e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558f6d225850 <col:33> 'int' lvalue ParmVar 0x558f6d20ebb8 'i' 'int'
|   |   |     `-BinaryOperator 0x558f6d2258c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558f6d2258b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558f6d225870 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558f6d20b660 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558f6d225890 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x558f6d2259b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558f6d225990 <col:60> 'int' 0
|   |   `-CallExpr 0x558f6d225b58 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558f6d225b40 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558f6d225b20 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558f6ced6a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558f6d225b98 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d225a20 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x558f6d225bb0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d225a58 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558f6d225bc8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558f6d225a90 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x558f6d225be0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558f6d225b08 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558f6d225af0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558f6d225ab0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x558f6d225e78 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x558f6d225e28 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x558f6d225df8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x558f6d225d98 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x558f6d225d68 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x558f6d225d18 <col:47, col:56> 'char [48]' lvalue ->c 0x558f6d216ad0
|     |     |   `-CXXMemberCallExpr 0x558f6d225cf8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x558f6d225cc8 <col:47> '<bound member function type>' ->xanno 0x558f6d20b418
|     |     |       `-CXXThisExpr 0x558f6d225cb8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x558f6d225d80 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x558f6d225d48 <col:60> 'int' lvalue ParmVar 0x558f6d20ebb8 'i' 'int'
|     `-ImplicitCastExpr 0x558f6d225e60 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x558f6d225e40 <col:65> 'int32_t':'int' lvalue ParmVar 0x558f6d20ec30 'x' 'int32_t':'int'
|-CXXMethodDecl 0x558f6d20eec8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x558f6d20edd0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x558f6d2265c8 <col:36, line:591:5>
|   |-ParenExpr 0x558f6d226308 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x558f6d2262d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558f6d226030 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558f6d226000 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558f6d225f10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558f6d225ef8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558f6d225eb8 <col:23> 'int' lvalue ParmVar 0x558f6d20edd0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558f6d225ed8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558f6d225fe0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558f6d225fc8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558f6d225f30 <col:33> 'int' lvalue ParmVar 0x558f6d20edd0 'i' 'int'
|   |   |     `-BinaryOperator 0x558f6d225fa8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558f6d225f90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558f6d225f50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558f6d20b660 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558f6d225f70 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x558f6d226090 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558f6d226070 <col:60> 'int' 0
|   |   `-CallExpr 0x558f6d226238 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558f6d226220 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558f6d226200 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558f6ced6a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558f6d226278 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d226100 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x558f6d226290 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d226138 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558f6d2262a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558f6d226170 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x558f6d2262c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558f6d2261e8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558f6d2261d0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558f6d226190 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x558f6d2265b8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x558f6d2265a0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x558f6d226588 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558f6d226558 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x558f6d2264d0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x558f6d2264a0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558f6d226450 <col:61, col:70> 'char const[48]' lvalue ->c 0x558f6d216ad0
|             |   `-CXXMemberCallExpr 0x558f6d226430 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558f6d226400 <col:61> '<bound member function type>' ->xanno 0x558f6d20b278
|             |       `-CXXThisExpr 0x558f6d2263f0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558f6d2264b8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558f6d226480 <col:74> 'int' lvalue ParmVar 0x558f6d20edd0 'i' 'int'
|-CXXMethodDecl 0x558f6d20f118 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x558f6d20ef88 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x558f6d20f000 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x558f6d226ca8 <col:42, line:606:5>
|   |-ParenExpr 0x558f6d226a38 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x558f6d226a08 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558f6d226760 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558f6d226730 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558f6d226640 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558f6d226628 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558f6d2265e8 <col:23> 'int' lvalue ParmVar 0x558f6d20ef88 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558f6d226608 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558f6d226710 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558f6d2266f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558f6d226660 <col:33> 'int' lvalue ParmVar 0x558f6d20ef88 'i' 'int'
|   |   |     `-BinaryOperator 0x558f6d2266d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558f6d2266c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558f6d226680 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558f6d20b660 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558f6d2266a0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x558f6d2267c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558f6d2267a0 <col:60> 'int' 0
|   |   `-CallExpr 0x558f6d226968 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558f6d226950 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558f6d226930 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558f6ced6a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558f6d2269a8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d226830 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x558f6d2269c0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d226868 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558f6d2269d8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558f6d2268a0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x558f6d2269f0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558f6d226918 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558f6d226900 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558f6d2268c0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x558f6d226c88 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x558f6d226c38 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x558f6d226c08 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x558f6d226ba8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x558f6d226b78 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x558f6d226b28 <col:48, col:57> 'char [48]' lvalue ->c 0x558f6d216ad0
|     |     |   `-CXXMemberCallExpr 0x558f6d226b08 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x558f6d226ad8 <col:48> '<bound member function type>' ->xanno 0x558f6d20b418
|     |     |       `-CXXThisExpr 0x558f6d226ac8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x558f6d226b90 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x558f6d226b58 <col:61> 'int' lvalue ParmVar 0x558f6d20ef88 'i' 'int'
|     `-ImplicitCastExpr 0x558f6d226c70 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x558f6d226c50 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x558f6d20f000 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x558f6d20f2b0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x558f6d20f1e0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x558f6d227518 <col:33, line:620:5>
|   |-ParenExpr 0x558f6d227290 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x558f6d227260 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x558f6d226eb0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558f6d226e80 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558f6d226d20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558f6d226d08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558f6d226cc8 <col:23> 'int' lvalue ParmVar 0x558f6d20f1e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558f6d226ce8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558f6d226e60 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x558f6d226e48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558f6d226d40 <col:33> 'int' lvalue ParmVar 0x558f6d20f1e0 'i' 'int'
|   |   |     `-BinaryOperator 0x558f6d226e28 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558f6d226e10 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558f6d226d60 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558f6d20b660 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x558f6d226de8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x558f6d226dd0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x558f6d226d98 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x558f6d226f10 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558f6d226ef0 <col:79> 'int' 0
|   |   `-CallExpr 0x558f6d2271c0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x558f6d2271a8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558f6d227188 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558f6ced6a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558f6d227200 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d226ff8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x558f6d227218 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d227040 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558f6d227230 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558f6d227078 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x558f6d227248 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558f6d227170 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558f6d227158 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558f6d227118 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x558f6d227508 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x558f6d2274f0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x558f6d2274d8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558f6d2274a8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x558f6d227420 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x558f6d2273f0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558f6d2273a0 <col:67, col:76> 'char const[48]' lvalue ->c 0x558f6d216ad0
|             |   `-CXXMemberCallExpr 0x558f6d227380 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558f6d227350 <col:67> '<bound member function type>' ->xanno 0x558f6d20b278
|             |       `-CXXThisExpr 0x558f6d227340 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558f6d227408 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558f6d2273d0 <col:80> 'int' lvalue ParmVar 0x558f6d20f1e0 'i' 'int'
|-CXXMethodDecl 0x558f6d20f4c8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x558f6d20f370 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x558f6d20f3f0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x558f6d227d40 <col:45, line:635:5>
|   |-ParenExpr 0x558f6d227a88 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x558f6d227a58 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x558f6d227720 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558f6d2276f0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558f6d227590 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558f6d227578 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558f6d227538 <col:23> 'int' lvalue ParmVar 0x558f6d20f370 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558f6d227558 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558f6d2276d0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x558f6d2276b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558f6d2275b0 <col:33> 'int' lvalue ParmVar 0x558f6d20f370 'i' 'int'
|   |   |     `-BinaryOperator 0x558f6d227698 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558f6d227680 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558f6d2275d0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558f6d20b660 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x558f6d227658 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x558f6d227640 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x558f6d227608 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x558f6d227780 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558f6d227760 <col:79> 'int' 0
|   |   `-CallExpr 0x558f6d2279b8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x558f6d2279a0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558f6d227980 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558f6ced6a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558f6d2279f8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d2277f0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x558f6d227a10 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558f6d227838 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558f6d227a28 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558f6d227870 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x558f6d227a40 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558f6d227968 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558f6d227950 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558f6d227908 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x558f6d227d20 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x558f6d227c88 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x558f6d227c58 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x558f6d227bf8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x558f6d227bc8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x558f6d227b78 <col:54, col:63> 'char [48]' lvalue ->c 0x558f6d216ad0
|     |     |   `-CXXMemberCallExpr 0x558f6d227b58 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x558f6d227b28 <col:54> '<bound member function type>' ->xanno 0x558f6d20b418
|     |     |       `-CXXThisExpr 0x558f6d227b18 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x558f6d227be0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x558f6d227ba8 <col:67> 'int' lvalue ParmVar 0x558f6d20f370 'i' 'int'
|     `-CXXConstCastExpr 0x558f6d227cf0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x558f6d227cd8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x558f6d227ca0 <col:91> 'const void *' lvalue ParmVar 0x558f6d20f3f0 'x' 'const void *'
|-CXXMethodDecl 0x558f6d20f598 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x558f6d227dc8 <col:34, line:640:5>
|   `-ReturnStmt 0x558f6d227db8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x558f6d227da0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x558f6d227d70 <col:16> 'Packet *' lvalue ->_data_packet 0x558f6d217688
|         `-CXXThisExpr 0x558f6d227d60 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x558f6d20f6d8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x558f6d20f648 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558f6d218ad8 <col:46> 'bool' true
|-CXXMethodDecl 0x558f6d20f858 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x558f6d20f790 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x558f6d20f900 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x558f6d2100b0 <line:660:22> "" ""
| |-EnumConstantDecl 0x558f6d20fa00 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558f6d210120 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d20f9e0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x558f6d20f9c0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x558f6d204a90 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x558f6d20fa90 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558f6d210138 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d20fa70 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x558f6d20fa50 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x558f6d204b20 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x558f6d20fb20 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558f6d210150 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d20fb00 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x558f6d20fae0 <col:21> 'int' 0
| |-EnumConstantDecl 0x558f6d20fbb0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558f6d210168 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d20fb90 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x558f6d20fb70 <col:19> 'int' 16
| |-EnumConstantDecl 0x558f6d20fc40 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558f6d210180 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d20fc20 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x558f6d20fc00 <col:21> 'int' 16
| |-EnumConstantDecl 0x558f6d20fcd0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558f6d210198 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d20fcb0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x558f6d20fc90 <col:19> 'int' 32
| |-EnumConstantDecl 0x558f6d20fd60 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558f6d2101b0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d20fd40 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x558f6d20fd20 <col:19> 'int' EnumConstant 0x558f6d20fbb0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x558f6d20fdf0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558f6d2101c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d20fdd0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x558f6d20fdb0 <col:19> 'int' EnumConstant 0x558f6d20fcd0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x558f6d20fec0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558f6d2101e0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d20fea0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x558f6d20fe80 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x558f6d20fe40 <col:23> 'int' EnumConstant 0x558f6d20fdf0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x558f6d20fe60 <col:40> 'int' 2
| |-EnumConstantDecl 0x558f6d20ff90 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558f6d2101f8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d20ff70 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x558f6d20ff50 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x558f6d20ff10 <col:23> 'int' EnumConstant 0x558f6d20fdf0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x558f6d20ff30 <col:40> 'int' 4
| `-EnumConstantDecl 0x558f6d210060 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x558f6d210210 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558f6d210040 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x558f6d210020 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x558f6d20ffe0 <col:23> 'int' EnumConstant 0x558f6d20fdf0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x558f6d210000 <col:40> 'int' 8
|-CXXMethodDecl 0x558f6d210250 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x558f6d2102f0 <col:68> "" ""
|-CXXMethodDecl 0x558f6d210388 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x558f6d210428 <col:45> "" ""
|-CXXMethodDecl 0x558f6d2104c0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x558f6d210560 <col:57> "" ""
|-CXXMethodDecl 0x558f6d2105f8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x558f6d210698 <col:45> "" ""
|-CXXMethodDecl 0x558f6d210730 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x558f6d2107d0 <col:57> "" ""
|-CXXMethodDecl 0x558f6d210860 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x558f6d210900 <col:51> "" ""
|-CXXMethodDecl 0x558f6d210990 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x558f6d210a30 <col:63> "" ""
|-CXXMethodDecl 0x558f6d210ac0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x558f6d210b60 <col:53> "" ""
|-CXXMethodDecl 0x558f6d210bf0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x558f6d210c90 <col:65> "" ""
|-CXXMethodDecl 0x558f6d210da8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x558f6d210d18 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x558f6d210e50 <col:61> "" ""
|-CXXMethodDecl 0x558f6d210fe8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x558f6d210ed8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x558f6d210f50 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x558f6d211098 <col:67> "" ""
|-CXXMethodDecl 0x558f6d2111b0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x558f6d211120 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x558f6d211258 <col:63> "" ""
|-CXXMethodDecl 0x558f6d2113f0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x558f6d2112e0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x558f6d211358 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x558f6d2114a0 <col:69> "" ""
|-CXXMethodDecl 0x558f6d2115b8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x558f6d211528 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x558f6d211660 <col:63> "" ""
|-CXXMethodDecl 0x558f6d2117f8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x558f6d2116e8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x558f6d211760 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x558f6d2118a8 <col:69> "" ""
|-CXXMethodDecl 0x558f6d2119c0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x558f6d211930 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x558f6d211a68 <col:62> "" ""
|-CXXMethodDecl 0x558f6d211c00 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x558f6d211af0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x558f6d211b68 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x558f6d211cb0 <col:68> "" ""
|-CXXMethodDecl 0x558f6d214c78 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x558f6d214be8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x558f6d214d20 <col:63> "" ""
|-CXXMethodDecl 0x558f6d214eb8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x558f6d214da8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x558f6d214e20 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x558f6d214f68 <col:69> "" ""
|-CXXMethodDecl 0x558f6d214ff8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x558f6d215098 <col:64> "" ""
|-CXXMethodDecl 0x558f6d215128 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x558f6d2151c8 <col:52> "" ""
|-CXXMethodDecl 0x558f6d215258 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x558f6d2152f8 <col:67> "" ""
|-CXXMethodDecl 0x558f6d215388 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x558f6d215428 <col:55> "" ""
|-CXXMethodDecl 0x558f6d215540 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x558f6d2154b0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x558f6d2155e8 <col:58> "" ""
|-CXXMethodDecl 0x558f6d215780 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x558f6d215670 <col:33> col:36 'int'
| |-ParmVarDecl 0x558f6d2156e8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x558f6d215830 <col:62> "" ""
|-CXXMethodDecl 0x558f6d215948 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x558f6d2158b8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x558f6d2159f0 <col:58> "" ""
|-CXXMethodDecl 0x558f6d215b88 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x558f6d215a78 <col:33> col:36 'int'
| |-ParmVarDecl 0x558f6d215af0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x558f6d215c38 <col:62> "" ""
|-CXXMethodDecl 0x558f6d215d50 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x558f6d215cc0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x558f6d215df8 <col:60> "" ""
|-CXXMethodDecl 0x558f6d215f90 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x558f6d215e80 <col:34> col:37 'int'
| |-ParmVarDecl 0x558f6d215ef8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x558f6d216040 <col:64> "" ""
|-CXXMethodDecl 0x558f6d216158 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x558f6d2160c8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x558f6d216200 <col:58> "" ""
|-CXXMethodDecl 0x558f6d216398 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x558f6d216288 <col:33> col:36 'int'
| |-ParmVarDecl 0x558f6d216300 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x558f6d216448 <col:62> "" ""
|-CXXMethodDecl 0x558f6d216560 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x558f6d2164d0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x558f6d216608 <col:59> "" ""
|-CXXMethodDecl 0x558f6d2167a0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x558f6d216690 <col:33> col:36 'int'
| |-ParmVarDecl 0x558f6d216708 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x558f6d216850 <col:63> "" ""
|-AccessSpecDecl 0x558f6d2168c0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x558f6d2168e8 prev 0x558f6d20b150 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x558f6d2169e0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x558f6d216ad0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x558f6d216bf8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x558f6d216d78 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x558f6d216ef8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x558f6d217078 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x558f6d227f48 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x558f6d2287b8 <col:11>
| |-CXXDestructorDecl 0x558f6d228020 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x558f6d228158 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x558f6d228158
| | `-ParmVarDecl 0x558f6d228268 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x558f6d228308 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x558f6d228308
| | `-ParmVarDecl 0x558f6d228418 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x558f6d22b1d8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x558f6d22b2e8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x558f6d22b568 <col:11>
| |   `-ReturnStmt 0x558f6d22b558 <col:11>
| |     `-UnaryOperator 0x558f6d22b540 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x558f6d22b530 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x558f6d22b358 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x558f6d22b358
|   `-ParmVarDecl 0x558f6d22b468 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x558f6d2170e0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x558f6d2171f8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x558f6d217298 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x558f6d217300 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x558f6d217368 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x558f6d2173d0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x558f6d217430 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x558f6d2174f0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x558f6d217550 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x558f6d2175b0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x558f6d227e58 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x558f6d217298 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x558f6d2287c8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x558f6d228820 <col:12>
| |-CXXConstructorDecl 0x558f6d228488 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x558f6d228488
| | `-ParmVarDecl 0x558f6d228598 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x558f6d228638 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x558f6d228638
| | `-ParmVarDecl 0x558f6d228748 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x558f6d22a8c0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x558f6d217628 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x558f6d217688 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x558f6d2176f0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x558f6d217758 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x558f6d2177c0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x558f6d217828 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x558f6d217888 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x558f6d2178e8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x558f6d217950 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x558f6d2179d8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x558f6d217628 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x558f6d227df0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x558f6d217888 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x558f6d228830 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x558f6d228890 <col:21, line:755:5>
|-CXXConstructorDecl 0x558f6d217b78 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x558f6d217ab8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x558f6d217c70 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x558f6d217e58 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x558f6d217d60 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x558f6d218128 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x558f6d217f10 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558f6d217f88 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x558f6d218000 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558f6d218348 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x558f6d2181f8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x558f6d218270 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x558f6d218618 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x558f6d218408 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x558f6d218480 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x558f6d2184f8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x558f6d218770 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x558f6d2186e0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558f6d2188b8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x558f6d218828 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x558f6d2189b0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StringAccum
         0 |   struct StringAccum::rep_t r_
         0 |     unsigned char * s
         8 |     int len
        12 |     int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558f6d3248c0 <../dummy_inc/click/straccum.hh:112:5, line:122:5> line:112:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558f6d3249d8 <col:5, col:12> col:12 implicit referenced struct rep_t
|-FieldDecl 0x558f6d324a80 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
|-FieldDecl 0x558f6d324ae8 <line:114:2, col:6> col:6 referenced len 'int'
|-FieldDecl 0x558f6d324b50 <line:115:2, col:6> col:6 referenced cap 'int'
|-CXXConstructorDecl 0x558f6d324c00 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| |-CXXCtorInitializer Field 0x558f6d324a80 's' 'unsigned char *'
| | `-CXXReinterpretCastExpr 0x558f6d325aa0 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| |   `-CXXConstCastExpr 0x558f6d325a58 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| |     `-CallExpr 0x558f6d325a20 <col:63, col:82> 'const char *'
| |       `-ImplicitCastExpr 0x558f6d325a08 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x558f6d3259b0 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x558f6d1970b8 'empty_data' 'const char *()'
| |-CXXCtorInitializer Field 0x558f6d324ae8 'len' 'int'
| | `-IntegerLiteral 0x558f6d325b18 <line:118:12> 'int' 0
| |-CXXCtorInitializer Field 0x558f6d324b50 'cap' 'int'
| | `-IntegerLiteral 0x558f6d325b80 <col:20> 'int' 0
| `-CompoundStmt 0x558f6d325c00 <col:23, line:119:2>
|-CXXConstructorDecl 0x558f6d324d78 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| |-ParmVarDecl 0x558f6d324cb8 <col:17> col:35 'uninitialized_type'
| `-CompoundStmt 0x558f6d325c10 <col:37, line:121:2>
|-CXXConstructorDecl 0x558f6d327e28 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x558f6d327f38 <col:12> col:12 used 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x558f6d324a80 's' 'unsigned char *'
| | `-ImplicitCastExpr 0x558f6d3298f0 <col:12> 'unsigned char *' <LValueToRValue>
| |   `-MemberExpr 0x558f6d3298c0 <col:12> 'unsigned char *const' lvalue .s 0x558f6d324a80
| |     `-DeclRefExpr 0x558f6d3298a0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x558f6d327f38 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x558f6d324ae8 'len' 'int'
| | `-ImplicitCastExpr 0x558f6d329980 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x558f6d329950 <col:12> 'const int' lvalue .len 0x558f6d324ae8
| |     `-DeclRefExpr 0x558f6d329930 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x558f6d327f38 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x558f6d324b50 'cap' 'int'
| | `-ImplicitCastExpr 0x558f6d329a10 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x558f6d3299e0 <col:12> 'const int' lvalue .cap 0x558f6d324b50
| |     `-DeclRefExpr 0x558f6d3299c0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x558f6d327f38 '' 'const StringAccum::rep_t &'
| `-CompoundStmt 0x558f6d329a68 <col:12>
|-CXXConstructorDecl 0x558f6d327fd8 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x558f6d327fd8
| `-ParmVarDecl 0x558f6d3280e8 <col:12> col:12 'StringAccum::rep_t &&'
`-CXXDestructorDecl 0x558f6d329d20 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  NonVirtualBaseLLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558f6d320068 prev 0x558f6d25a9a8 <../dummy_inc/click/straccum.hh:28:1, line:137:1> line:28:7 referenced class StringAccum definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558f6d320160 <col:1, col:7> col:7 implicit referenced class StringAccum
|-AccessSpecDecl 0x558f6d3201f0 <col:21, col:27> col:21 public
|-TypedefDecl 0x558f6d320230 <line:30:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x558f6ccdcfd0 'const char *'
|   `-QualType 0x558f6ccdc521 'const char' const
|     `-BuiltinType 0x558f6ccdc520 'char'
|-TypedefDecl 0x558f6d3202a0 <line:31:5, col:19> col:19 referenced iterator 'char *'
| `-PointerType 0x558f6ccdd1a0 'char *'
|   `-BuiltinType 0x558f6ccdc520 'char'
|-TypedefDecl 0x558f6d3203e0 <line:33:5, col:57> col:32 referenced unspecified_bool_type 'int (StringAccum::*)() const'
| `-MemberPointerType 0x558f6d320350 'int (StringAccum::*)() const'
|   |-RecordType 0x558f6d106e70 'StringAccum'
|   | `-CXXRecord 0x558f6d320068 'StringAccum'
|   `-ParenType 0x558f6d174370 'int () const' sugar
|     `-FunctionProtoType 0x558f6d149720 'int () const' const cdecl
|       `-BuiltinType 0x558f6ccdc580 'int'
|-CXXConstructorDecl 0x558f6d3204a0 <line:35:5, col:24> col:12 used StringAccum 'void ()' inline
|-CXXConstructorDecl 0x558f6d3205f0 <line:36:5, col:45> col:21 StringAccum 'void (int)' inline
| `-ParmVarDecl 0x558f6d320560 <col:33, col:37> col:37 capacity 'int'
|-CXXConstructorDecl 0x558f6d320740 <line:37:5, col:41> col:12 StringAccum 'void (const String &)' inline
| `-ParmVarDecl 0x558f6d3206b0 <col:24, col:38> col:38 str 'const String &'
|-CXXConstructorDecl 0x558f6d3208e8 <line:38:5, col:44> col:12 StringAccum 'void (const StringAccum &)' inline
| `-ParmVarDecl 0x558f6d320828 <col:24, col:43> col:43 x 'const StringAccum &'
|-CXXConstructorDecl 0x558f6d320a98 <line:40:5, col:39> col:12 StringAccum 'void (StringAccum &&)' inline
| `-ParmVarDecl 0x558f6d3209d8 <col:24, col:38> col:38 x 'StringAccum &&'
|-CXXDestructorDecl 0x558f6d320b90 <line:42:5, col:25> col:12 used ~StringAccum 'void () noexcept' inline
|-CXXMethodDecl 0x558f6d320d48 <line:44:5, col:55> col:25 operator= 'StringAccum &(const StringAccum &)' inline
| `-ParmVarDecl 0x558f6d320c80 <col:35, col:54> col:54 x 'const StringAccum &'
|-CXXMethodDecl 0x558f6d320ec8 <line:46:5, col:50> col:25 operator= 'StringAccum &(StringAccum &&)' inline
| `-ParmVarDecl 0x558f6d320e00 <col:35, col:49> col:49 x 'StringAccum &&'
|-CXXMethodDecl 0x558f6d320fc0 <line:49:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x558f6d321088 <line:50:5, col:23> col:18 data 'char *()' inline
|-CXXMethodDecl 0x558f6d321150 <line:51:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x558f6d321218 <line:52:5, col:27> col:16 used capacity 'int () const' inline
|-CXXMethodDecl 0x558f6d3212e0 <line:54:5, col:23> col:17 used c_str 'const char *()'
|-CXXConversionDecl 0x558f6d321448 <line:56:5, col:45> col:12 operator int (StringAccum::*)() const 'StringAccum::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x558f6d321518 <line:57:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x558f6d3215d8 <line:58:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x558f6d3216e8 <line:60:5, col:35> col:27 used begin 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x558f6d3217f8 <line:61:5, col:27> col:21 begin 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x558f6d3218b8 <line:62:5, col:33> col:27 used end 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x558f6d321978 <line:63:5, col:25> col:21 end 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x558f6d321ac0 <line:65:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x558f6d321a30 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x558f6d321c50 <line:66:5, col:34> col:18 operator[] 'char &(int)' inline
| `-ParmVarDecl 0x558f6d321b80 <col:29, col:33> col:33 i 'int'
|-CXXMethodDecl 0x558f6d321d18 <line:67:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x558f6d321e10 <line:68:5, col:24> col:18 front 'char &()' inline
|-CXXMethodDecl 0x558f6d321ed0 <line:69:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x558f6d321f98 <line:70:5, col:23> col:18 back 'char &()' inline
|-CXXMethodDecl 0x558f6d322058 <line:72:5, col:33> col:17 used out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x558f6d322118 <line:73:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x558f6d3221d8 <line:75:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x558f6d322328 <line:76:5, col:31> col:18 reserve 'char *(int)' inline
| `-ParmVarDecl 0x558f6d322290 <col:26, col:30> col:30 n 'int'
|-CXXMethodDecl 0x558f6d322478 <line:77:5, col:35> col:17 set_length 'void (int)' inline
| `-ParmVarDecl 0x558f6d3223e8 <col:28, col:32> col:32 len 'int'
|-CXXMethodDecl 0x558f6d3225d0 <line:78:5, col:23> col:9 resize 'int (int)'
| `-ParmVarDecl 0x558f6d322538 <col:16, col:20> col:20 len 'int'
|-CXXMethodDecl 0x558f6d322720 <line:79:5, col:40> col:17 used adjust_length 'void (int)' inline
| `-ParmVarDecl 0x558f6d322690 <col:31, col:35> col:35 delta 'int'
|-CXXMethodDecl 0x558f6d322940 <line:80:5, col:54> col:18 extend 'char *(int, int)' inline
| |-ParmVarDecl 0x558f6d3227e0 <col:25, col:29> col:29 nadjust 'int'
| `-ParmVarDecl 0x558f6d322860 <col:38, col:53> col:42 nreserve 'int' cinit
|   `-IntegerLiteral 0x558f6d3258b8 <col:53> 'int' 0
|-CXXMethodDecl 0x558f6d322a98 <line:82:5, col:35> col:17 pop_back 'void (int)' inline
| `-ParmVarDecl 0x558f6d322a08 <col:26, col:34> col:30 n 'int' cinit
|   `-IntegerLiteral 0x558f6d3258d8 <col:34> 'int' 1
|-CXXMethodDecl 0x558f6d322be0 <line:84:5, col:30> col:17 used append 'void (char)' inline
| `-ParmVarDecl 0x558f6d322b50 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x558f6d322d30 <line:85:5, col:39> col:17 used append 'void (unsigned char)' inline
| `-ParmVarDecl 0x558f6d322ca0 <col:24, col:38> col:38 c 'unsigned char'
|-CXXMethodDecl 0x558f6d322e80 <line:86:5, col:35> col:17 append_utf8 'bool (int)' inline
| `-ParmVarDecl 0x558f6d322df0 <col:29, col:33> col:33 ch 'int'
|-CXXMethodDecl 0x558f6d322fd0 <line:87:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x558f6d322f40 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x558f6d3231a8 <line:88:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x558f6d323090 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x558f6d323110 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x558f6d323388 <line:89:5, col:55> col:17 used append 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x558f6d323270 <col:24, col:45> col:45 s 'const unsigned char *'
| `-ParmVarDecl 0x558f6d3232f0 <col:48, col:52> col:52 len 'int'
|-CXXMethodDecl 0x558f6d323568 <line:90:5, col:59> col:17 used append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x558f6d323450 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x558f6d3234d0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x558f6d323748 <line:91:5, col:77> col:17 append 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x558f6d323630 <col:24, col:45> col:45 first 'const unsigned char *'
| `-ParmVarDecl 0x558f6d3236b0 <col:52, col:73> col:73 last 'const unsigned char *'
|-CXXMethodDecl 0x558f6d323928 <line:92:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x558f6d323810 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x558f6d323890 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x558f6d323c88 <line:93:5, col:81> col:10 used append_numeric 'void (String::intmax_t, int, bool)'
| |-ParmVarDecl 0x558f6d323a70 <col:25, col:42> col:42 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x558f6d323af0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x558f6d3258f8 <col:56> 'int' 10
| `-ParmVarDecl 0x558f6d323b68 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558f6d325918 <col:77> 'bool' true
|-CXXMethodDecl 0x558f6d323fe8 <line:94:5, col:82> col:10 used append_numeric 'void (String::uintmax_t, int, bool)'
| |-ParmVarDecl 0x558f6d323dd0 <col:25, col:43> col:43 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x558f6d323e50 <col:46, col:57> col:50 base 'int' cinit
| | `-IntegerLiteral 0x558f6d325928 <col:57> 'int' 10
| `-ParmVarDecl 0x558f6d323ec8 <col:61, col:78> col:66 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558f6d325948 <col:78> 'bool' true
|-CXXMethodDecl 0x558f6d324210 <line:96:5, col:57> col:18 snprintf 'StringAccum &(int, const char *, ...)'
| |-ParmVarDecl 0x558f6d3240b8 <col:27, col:31> col:31 n 'int'
| `-ParmVarDecl 0x558f6d324138 <col:34, col:46> col:46 format 'const char *'
|-CXXMethodDecl 0x558f6d324308 <line:98:5, col:24> col:12 take_string 'String ()'
|-CXXMethodDecl 0x558f6d324478 <line:100:5, col:29> col:10 used swap 'void (StringAccum &)'
| `-ParmVarDecl 0x558f6d3243b8 <col:15, col:28> col:28 x 'StringAccum &'
|-CXXMethodDecl 0x558f6d3245c8 <line:104:5, col:62> col:17 forward 'void (int)' inline
| |-ParmVarDecl 0x558f6d324538 <col:25, col:29> col:29 delta 'int'
| `-DeprecatedAttr 0x558f6d324670 <col:51> "" ""
|-AccessSpecDecl 0x558f6d3246e0 <line:106:3, col:10> col:3 private
|-EnumDecl 0x558f6d324708 <line:108:5, line:110:5> line:108:5
| `-EnumConstantDecl 0x558f6d324858 <line:109:2, col:23> col:2 referenced MEMO_SPACE 'StringAccum::(anonymous enum at ../dummy_inc/click/straccum.hh:108:5)'
|   `-ImplicitCastExpr 0x558f6d3248a8 <col:15, col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558f6d324838 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' Int: 12
|       `-DeclRefExpr 0x558f6d324808 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' EnumConstant 0x558f6d17e8d8 'MEMO_SPACE' 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|-CXXRecordDecl 0x558f6d3248c0 <line:112:5, line:122:5> line:112:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x558f6d3249d8 <col:5, col:12> col:12 implicit referenced struct rep_t
| |-FieldDecl 0x558f6d324a80 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
| |-FieldDecl 0x558f6d324ae8 <line:114:2, col:6> col:6 referenced len 'int'
| |-FieldDecl 0x558f6d324b50 <line:115:2, col:6> col:6 referenced cap 'int'
| |-CXXConstructorDecl 0x558f6d324c00 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| | |-CXXCtorInitializer Field 0x558f6d324a80 's' 'unsigned char *'
| | | `-CXXReinterpretCastExpr 0x558f6d325aa0 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| | |   `-CXXConstCastExpr 0x558f6d325a58 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| | |     `-CallExpr 0x558f6d325a20 <col:63, col:82> 'const char *'
| | |       `-ImplicitCastExpr 0x558f6d325a08 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| | |         `-DeclRefExpr 0x558f6d3259b0 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x558f6d1970b8 'empty_data' 'const char *()'
| | |-CXXCtorInitializer Field 0x558f6d324ae8 'len' 'int'
| | | `-IntegerLiteral 0x558f6d325b18 <line:118:12> 'int' 0
| | |-CXXCtorInitializer Field 0x558f6d324b50 'cap' 'int'
| | | `-IntegerLiteral 0x558f6d325b80 <col:20> 'int' 0
| | `-CompoundStmt 0x558f6d325c00 <col:23, line:119:2>
| |-CXXConstructorDecl 0x558f6d324d78 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| | |-ParmVarDecl 0x558f6d324cb8 <col:17> col:35 'uninitialized_type'
| | `-CompoundStmt 0x558f6d325c10 <col:37, line:121:2>
| |-CXXConstructorDecl 0x558f6d327e28 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x558f6d327f38 <col:12> col:12 used 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x558f6d324a80 's' 'unsigned char *'
| | | `-ImplicitCastExpr 0x558f6d3298f0 <col:12> 'unsigned char *' <LValueToRValue>
| | |   `-MemberExpr 0x558f6d3298c0 <col:12> 'unsigned char *const' lvalue .s 0x558f6d324a80
| | |     `-DeclRefExpr 0x558f6d3298a0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x558f6d327f38 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x558f6d324ae8 'len' 'int'
| | | `-ImplicitCastExpr 0x558f6d329980 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x558f6d329950 <col:12> 'const int' lvalue .len 0x558f6d324ae8
| | |     `-DeclRefExpr 0x558f6d329930 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x558f6d327f38 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x558f6d324b50 'cap' 'int'
| | | `-ImplicitCastExpr 0x558f6d329a10 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x558f6d3299e0 <col:12> 'const int' lvalue .cap 0x558f6d324b50
| | |     `-DeclRefExpr 0x558f6d3299c0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x558f6d327f38 '' 'const StringAccum::rep_t &'
| | `-CompoundStmt 0x558f6d329a68 <col:12>
| |-CXXConstructorDecl 0x558f6d327fd8 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x558f6d327fd8
| | `-ParmVarDecl 0x558f6d3280e8 <col:12> col:12 'StringAccum::rep_t &&'
| `-CXXDestructorDecl 0x558f6d329d20 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-FieldDecl 0x558f6d324e50 <line:124:5, col:11> col:11 referenced r_ 'StringAccum::rep_t'
|-CXXMethodDecl 0x558f6d324f50 <line:126:5, col:19> col:11 used grow 'char *(int)'
| `-ParmVarDecl 0x558f6d324eb8 <col:16> col:19 'int'
|-CXXMethodDecl 0x558f6d325130 <line:127:5, col:48> col:11 used hard_extend 'char *(int, int)'
| |-ParmVarDecl 0x558f6d325010 <col:23, col:27> col:27 nadjust 'int'
| `-ParmVarDecl 0x558f6d325090 <col:36, col:40> col:40 nreserve 'int'
|-CXXMethodDecl 0x558f6d325310 <line:128:5, col:44> col:10 used hard_append 'void (const char *, int)'
| |-ParmVarDecl 0x558f6d3251f8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x558f6d325278 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x558f6d325468 <line:129:5, col:43> col:10 used hard_append_cstr 'void (const char *)'
| `-ParmVarDecl 0x558f6d3253d8 <col:27, col:39> col:39 cstr 'const char *'
|-CXXMethodDecl 0x558f6d3255b8 <line:130:5, col:33> col:10 used append_utf8_hard 'bool (int)'
| `-ParmVarDecl 0x558f6d325528 <col:27, col:31> col:31 ch 'int'
`-FriendDecl 0x558f6d325878 <line:132:5, col:70> col:25
  `-FunctionDecl 0x558f6d3257b8 parent 0x558f6ccdc488 <col:5, col:70> col:25 used operator<< 'StringAccum &(StringAccum &, const String &)'
    |-ParmVarDecl 0x558f6d325670 <col:36, col:49> col:49 sa 'StringAccum &'
    `-ParmVarDecl 0x558f6d3256e8 <col:53, col:67> col:67 str 'const String &'

Layout: <CGRecordLayout
  LLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  NonVirtualBaseLLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558f6d1d62e0 prev 0x558f6d1cb800 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558f6d1d63d8 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x558f6d1d6478 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x558f6d1d90d8 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x558f6d1d94b8 <col:11>
|-CXXConstructorDecl 0x558f6d1d91b0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x558f6d1d9298 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x558f6d1ddc20 <col:11>
|-CXXConstructorDecl 0x558f6d1d9338 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x558f6d1d9448 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x558f6d1df478 <col:11>
|-CXXDestructorDecl 0x558f6d1de788 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x558f6cfecb48 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x558f6cfecc58 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x558f6cfed520 <col:11>
|   `-ReturnStmt 0x558f6cfed510 <col:11>
|     `-UnaryOperator 0x558f6cfed4f8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558f6cfed4e8 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x558f6cfeccc8 <col:11> col:11 implicit constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&)' inline default trivial noexcept-unevaluated 0x558f6cfeccc8
  `-ParmVarDecl 0x558f6cfecdd8 <col:11> col:11 'Timestamp::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558f6d1ca9b8 prev 0x558f6d1ca6d0 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558f6d1caab0 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x558f6d1cab40 <col:19, col:25> col:19 public
|-TypedefDecl 0x558f6d1cab78 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x558f6ce7a0c0 'int32_t' sugar
|   |-Typedef 0x558f6cdc8ee8 'int32_t'
|   `-TypedefType 0x558f6cda07f0 '__int32_t' sugar
|     |-Typedef 0x558f6cda0400 '__int32_t'
|     `-BuiltinType 0x558f6ccdc580 'int'
|-TypedefDecl 0x558f6d1cabe0 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x558f6d07ebf0 'int64_t' sugar
|   |-Typedef 0x558f6cdc8f50 'int64_t'
|   `-TypedefType 0x558f6cda0910 '__int64_t' sugar
|     |-Typedef 0x558f6cda04e0 '__int64_t'
|     `-BuiltinType 0x558f6ccdc5a0 'long'
|-EnumDecl 0x558f6d1cac38 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x558f6d1cadb0 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x558f6d1cad90 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x558f6d1cad68 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x558f6d1cad50 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x558f6d1cad20 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x558f6d1caea8 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x558f6d1cae88 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x558f6d1cae60 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x558f6d1cae48 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x558f6d1cae20 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x558f6d1cae00 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x558f6d1caef8 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x558f6d1cb000 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x558f6d1cb550 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d1cafe0 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x558f6d1cafc0 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x558f6d1cb090 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x558f6d1cb568 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d1cb070 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x558f6d1cb050 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x558f6d1cb120 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x558f6d1cb580 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d1cb100 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x558f6d1cb0e0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x558f6d1cb1b0 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x558f6d1cb598 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d1cb190 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x558f6d1cb170 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x558f6d1cb240 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x558f6d1cb5b0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d1cb220 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x558f6d1cb200 <col:25> 'int' 1000
| |-EnumConstantDecl 0x558f6d1cb2d0 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x558f6d1cb5c8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d1cb2b0 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x558f6d1cb290 <col:24> 'int' 1000
| |-EnumConstantDecl 0x558f6d1cb360 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x558f6d1cb5e0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d1cb340 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x558f6d1cb320 <col:26> 'int' EnumConstant 0x558f6d1cb000 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x558f6d1cb430 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x558f6d1cb5f8 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d1cb410 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x558f6d1cb3f0 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x558f6d1cb3b0 <col:27> 'int' EnumConstant 0x558f6d1cb360 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x558f6d1cb3d0 <col:44> 'int' EnumConstant 0x558f6d1cb2d0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x558f6d1cb500 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x558f6d1cb610 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558f6d1cb4e0 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x558f6d1cb4c0 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x558f6d1cb480 <col:27> 'int' EnumConstant 0x558f6d1cb360 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x558f6d1cb4a0 <col:44> 'int' EnumConstant 0x558f6d1cb1b0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x558f6d1cb628 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x558f6d1cb730 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x558f6d1cb780 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558f6d1cb710 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x558f6d1cb6f0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb360 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x558f6d1cb7a8 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x558f6d07e680 'uninitialized_type'
|   `-CXXRecord 0x558f6d07e5e8 'uninitialized_type'
|-CXXRecordDecl 0x558f6d1cb800 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x558f6d1cb910 <line:174:5, line:176:5> line:174:12 Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x558f6d1d7428 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x558f6d1d94c8 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x558f6d1d95e8 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x558f6d1d95a0 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x558f6d1d9530 <col:9> '<bound member function type>' ->assign 0x558f6d1d0288
|     | `-CXXThisExpr 0x558f6d1d9520 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x558f6d1d9560 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x558f6d1d95d0 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x558f6d1d9580 <col:19> 'int' 0
|-CXXConstructorDecl 0x558f6d1cbb58 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x558f6d1cb9d0 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x558f6d1cba48 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x558f6d1d8f70 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x558f6d1d8f50 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x558f6d1d7428 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x558f6d1d9600 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x558f6d1d9750 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x558f6d1d96d8 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x558f6d1d9668 <col:9> '<bound member function type>' ->assign 0x558f6d1d0288
|     | `-CXXThisExpr 0x558f6d1d9658 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x558f6d1d9720 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x558f6d1d9708 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x558f6d1d9698 <col:16> 'long' lvalue ParmVar 0x558f6d1cb9d0 'sec' 'long'
|     `-ImplicitCastExpr 0x558f6d1d9738 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x558f6d1d96b8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x558f6d1cba48 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x558f6d1cbdb8 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x558f6d1cbc28 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x558f6d1cbca0 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x558f6d1d8fa8 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x558f6d1d8f88 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x558f6d1d7428 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x558f6d1d9768 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x558f6d1dd8c0 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x558f6d1dd860 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x558f6d1dd7f0 <col:9> '<bound member function type>' ->assign 0x558f6d1d0288
|     | `-CXXThisExpr 0x558f6d1dd7e0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x558f6d1dd890 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x558f6d1dd820 <col:16> 'int' lvalue ParmVar 0x558f6d1cbc28 'sec' 'int'
|     `-ImplicitCastExpr 0x558f6d1dd8a8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x558f6d1dd840 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x558f6d1cbca0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x558f6d1cc018 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x558f6d1cbe88 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x558f6d1cbf00 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x558f6d1d8fe0 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x558f6d1d8fc0 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x558f6d1d7428 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x558f6d1dd8d8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x558f6d1dda28 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x558f6d1dd9b0 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x558f6d1dd940 <col:9> '<bound member function type>' ->assign 0x558f6d1d0288
|     | `-CXXThisExpr 0x558f6d1dd930 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x558f6d1dd9f8 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x558f6d1dd9e0 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x558f6d1dd970 <col:16> 'unsigned long' lvalue ParmVar 0x558f6d1cbe88 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x558f6d1dda10 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x558f6d1dd990 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x558f6d1cbf00 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x558f6d1cc278 <line:199:5, line:201:5> line:199:21 Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x558f6d1cc0e8 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x558f6d1cc160 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x558f6d1d9018 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x558f6d1d8ff8 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x558f6d1d7428 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x558f6d1dda40 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x558f6d1ddb90 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x558f6d1ddb18 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x558f6d1ddaa8 <col:9> '<bound member function type>' ->assign 0x558f6d1d0288
|     | `-CXXThisExpr 0x558f6d1dda98 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x558f6d1ddb60 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x558f6d1ddb48 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x558f6d1ddad8 <col:16> 'unsigned int' lvalue ParmVar 0x558f6d1cc0e8 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x558f6d1ddb78 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x558f6d1ddaf8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x558f6d1cc160 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x558f6d1cc3d8 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x558f6d1cc348 <col:31> col:37 'double'
|-CXXConstructorDecl 0x558f6d1cc578 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x558f6d1cc4b0 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x558f6d1cc7a8 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x558f6d1cc6b0 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x558f6d1cd5b8 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x558f6d1cc898 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x558f6d1d7428 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x558f6d1ddc30 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x558f6d1ddba8 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x558f6d1cc898 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x558f6d1ddc90 <col:19, line:214:5>
|-CXXConstructorDecl 0x558f6d1cd788 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x558f6d1cd6c8 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x558f6d1d7428 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x558f6d1ddca0 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x558f6d1ddd50 <col:53, line:219:5>
|   `-CStyleCastExpr 0x558f6d1ddd28 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x558f6d1ddcf8 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x558f6d1cd6c8 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x558f6d1cd978 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x558f6d1cd8f0 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x558f6d1ca760 'Timestamp'
|   | `-CXXRecord 0x558f6d1ca9b8 'Timestamp'
|   `-ParenType 0x558f6d1cd890 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x558f6d1cd860 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x558f6d1cad00 'Timestamp::seconds_type' sugar
|         |-Typedef 0x558f6d1cab78 'seconds_type'
|         `-TypedefType 0x558f6ce7a0c0 'int32_t' sugar
|           |-Typedef 0x558f6cdc8ee8 'int32_t'
|           `-TypedefType 0x558f6cda07f0 '__int32_t' sugar
|             |-Typedef 0x558f6cda0400 '__int32_t'
|             `-BuiltinType 0x558f6ccdc580 'int'
|-CXXConversionDecl 0x558f6d1cdab8 <line:222:5, col:45> col:12 operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x558f6d1cdb88 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x558f6d1dde58 <col:37, line:231:5>
|   `-ReturnStmt 0x558f6d1dde48 <line:227:9, col:23>
|     `-BinaryOperator 0x558f6d1dde28 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x558f6d1dddf8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x558f6d1ddda8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x558f6d1d6478
|       |   `-MemberExpr 0x558f6d1ddd78 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x558f6d1d7428
|       |     `-CXXThisExpr 0x558f6d1ddd68 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x558f6d1dde10 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x558f6d1dddd8 <col:23> 'int' 0
|-CXXMethodDecl 0x558f6d1cdc48 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x558f6d1cdd08 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x558f6d1cddc8 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x558f6d1cde88 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x558f6d1cdf48 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x558f6d1ce0b8 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x558f6d1cdff8 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x558f6d1ce200 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x558f6d1ce170 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558f6d1ce2c8 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x558f6d1ce368 <col:54> "" ""
|-CXXMethodDecl 0x558f6d1ce3f8 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x558f6d1ce498 <col:54> "" ""
|-CXXMethodDecl 0x558f6d1ce528 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x558f6d1ce5c8 <col:54> "" ""
|-CXXMethodDecl 0x558f6d1ce6c8 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x558f6d1ce798 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x558f6d1ce8c8 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x558f6d1ce9c0 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x558f6d1ceaf8 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x558f6d1de070 <col:39, line:271:5>
|   `-ReturnStmt 0x558f6d1de060 <line:267:9, col:61>
|     `-CallExpr 0x558f6d1de000 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x558f6d1ddfe8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x558f6d1dde70 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x558f6d1d7758 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x558f6d1de030 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x558f6d1dded0 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x558f6d1d6478
|       |   `-MemberExpr 0x558f6d1ddea0 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x558f6d1d7428
|       |     `-CXXThisExpr 0x558f6d1dde90 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x558f6d1de048 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x558f6d1ddf70 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x558f6d1ddf40 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x558f6d1ddf00 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb360 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x558f6d1ddf58 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x558f6d1ddf20 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb2d0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x558f6d1cebb8 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x558f6d1de230 <col:39, line:279:5>
|   `-ReturnStmt 0x558f6d1de220 <line:275:9, col:61>
|     `-CallExpr 0x558f6d1de1c0 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x558f6d1de1a8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x558f6d1de088 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x558f6d1d7758 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x558f6d1de1f0 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x558f6d1de0e8 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x558f6d1d6478
|       |   `-MemberExpr 0x558f6d1de0b8 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x558f6d1d7428
|       |     `-CXXThisExpr 0x558f6d1de0a8 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x558f6d1de208 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x558f6d1de188 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x558f6d1de158 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x558f6d1de118 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb360 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x558f6d1de170 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x558f6d1de138 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb1b0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x558f6d1cec78 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x558f6d1de3c8 <col:39, line:287:5>
|   `-ReturnStmt 0x558f6d1de3b8 <line:283:9, col:53>
|     `-BinaryOperator 0x558f6d1de398 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x558f6d1de368 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x558f6d1de288 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x558f6d1d6478
|       |   `-MemberExpr 0x558f6d1de258 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x558f6d1d7428
|       |     `-CXXThisExpr 0x558f6d1de248 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x558f6d1de380 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x558f6d1de348 <col:23, col:53> 'int'
|           `-BinaryOperator 0x558f6d1de328 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x558f6d1de2f8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x558f6d1de2b8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb000 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x558f6d1de310 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x558f6d1de2d8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb360 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x558f6d1ced68 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x558f6d1df660 <col:40, line:293:5>
|   |-DeclStmt 0x558f6d1de510 <line:291:9, col:48>
|   | `-VarDecl 0x558f6d1de3f0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x558f6d1de4f0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x558f6d1de498 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x558f6d1de468 <col:22> '<bound member function type>' ->subsec 0x558f6d1cdd08
|   |     |   `-CXXThisExpr 0x558f6d1de458 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x558f6d1de4d8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x558f6d1de4b8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb430 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x558f6d1df650 <line:292:9, col:70>
|     `-ExprWithCleanups 0x558f6d1df638 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x558f6d1df608 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x558f6d1df5f0 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x558f6d1df5d0 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x558f6d1df5a0 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x558f6d1df338 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x558f6d1df320 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x558f6d1de528 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x558f6d1de3f0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x558f6d1df540 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x558f6d1df528 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x558f6d1df4f8 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x558f6d1df350 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x558f6d1df2c0 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x558f6d1df2a8 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x558f6d1df258 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x558f6d1ca908 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x558f6d1df1f8 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x558f6d1de558 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x558f6d1de548 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x558f6d1df240 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x558f6d1df228 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x558f6d1dea18 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x558f6d1de580 <col:39> 'int' 0
|               |               `-BinaryOperator 0x558f6d1de610 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x558f6d1de5e0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x558f6d1de5a0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb430 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x558f6d1de5f8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x558f6d1de5c0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x558f6d1de3f0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x558f6d1df570 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x558f6d1df308 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x558f6d1df2f8 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x558f6d1cee28 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x558f6d1dfbb8 <col:40, line:302:5>
|   |-DeclStmt 0x558f6d1df7b0 <line:297:9, col:48>
|   | `-VarDecl 0x558f6d1df690 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x558f6d1df790 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x558f6d1df738 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x558f6d1df708 <col:22> '<bound member function type>' ->subsec 0x558f6d1cdd08
|   |     |   `-CXXThisExpr 0x558f6d1df6f8 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x558f6d1df778 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x558f6d1df758 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb500 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x558f6d1dfba8 <line:298:9, col:70>
|     `-ExprWithCleanups 0x558f6d1dfb90 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x558f6d1dfb60 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x558f6d1dfb48 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x558f6d1dfb28 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x558f6d1dfaf8 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x558f6d1dfa20 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x558f6d1dfa08 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x558f6d1df7c8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x558f6d1df690 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x558f6d1dfa98 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x558f6d1dfa80 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x558f6d1dfa50 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x558f6d1dfa38 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x558f6d1df9a8 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x558f6d1df990 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x558f6d1df970 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x558f6d1ca908 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x558f6d1df910 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x558f6d1df7f8 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x558f6d1df7e8 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x558f6d1df958 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x558f6d1df940 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x558f6d1df8d0 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x558f6d1df820 <col:39> 'int' 0
|               |               `-BinaryOperator 0x558f6d1df8b0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x558f6d1df880 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x558f6d1df840 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb500 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x558f6d1df898 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x558f6d1df860 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x558f6d1df690 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x558f6d1dfac8 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x558f6d1df9f0 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x558f6d1df9e0 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x558f6d1ceee8 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x558f6d1dfc40 <col:40, line:306:5>
|   `-ReturnStmt 0x558f6d1dfc30 <line:305:9, col:17>
|     `-CXXConstructExpr 0x558f6d1dfc00 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x558f6d1dfbe8 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558f6d1dfbd8 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x558f6d1cf088 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x558f6d1cef98 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x558f6d1cf258 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x558f6d1cf160 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x558f6d1cf348 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x558f6d1cf4b8 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x558f6d1cf3f8 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x558f6d1dfd88 <col:56, line:320:5>
|   `-ReturnStmt 0x558f6d1dfd78 <line:319:9, col:32>
|     `-ExprWithCleanups 0x558f6d1dfd60 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x558f6d1dfd30 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x558f6d1dfd18 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x558f6d1dfcd8 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x558f6d1dfca8 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x558f6d1dfc68 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x558f6d1cf3f8 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x558f6d1dfcc0 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x558f6d1dfc88 <col:31> 'int' 0
|-CXXMethodDecl 0x558f6d1cf6f8 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x558f6d1cf570 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x558f6d1cf5e8 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x558f6d1dff58 <col:72, line:326:5>
|   `-ReturnStmt 0x558f6d1dff48 <line:325:9, col:51>
|     `-ExprWithCleanups 0x558f6d1dff30 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x558f6d1dff00 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x558f6d1dfee8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x558f6d1dfea8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x558f6d1dfe90 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x558f6d1dfdb0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x558f6d1cf570 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x558f6d1dfe50 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x558f6d1dfe38 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x558f6d1dfdd0 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x558f6d1d5bd0 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x558f6d1dfe78 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x558f6d1dfdf0 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x558f6d1cf5e8 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558f6d1cf8a8 <line:328:5, line:337:5> line:328:29 make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x558f6d1cf7b8 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x558f6d1e0620 <col:56, line:337:5>
|   |-DeclStmt 0x558f6d1e0258 <line:329:9, col:51>
|   | `-VarDecl 0x558f6d1dff80 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x558f6d1e0240 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x558f6d1e0210 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x558f6d1e01f8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x558f6d1e01e0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x558f6d1e01b0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x558f6d1e0198 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x558f6d1e0180 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x558f6d1e0070 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x558f6d1e0410 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x558f6d1e02c0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x558f6d1d6478
|   | | `-MemberExpr 0x558f6d1e0290 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x558f6d1d7428
|   | |   `-DeclRefExpr 0x558f6d1e0270 <col:9> 'Timestamp' lvalue Var 0x558f6d1dff80 't' 'Timestamp'
|   | `-BinaryOperator 0x558f6d1e03f0 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x558f6d1e03c0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x558f6d1e02f0 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x558f6d1cf7b8 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x558f6d1e03d8 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x558f6d1e03a0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x558f6d1e0380 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x558f6d1e0350 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x558f6d1e0310 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb360 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x558f6d1e0368 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x558f6d1e0330 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb2d0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x558f6d1e0608 <line:336:9, col:16>
|     `-CXXConstructExpr 0x558f6d1e05d8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x558f6d1e05c0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x558f6d1e05a0 <col:16> 'Timestamp' lvalue Var 0x558f6d1dff80 't' 'Timestamp'
|-CXXMethodDecl 0x558f6d1cfa70 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x558f6d1cf960 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x558f6d1cf9d8 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x558f6d1e07d8 <col:72, line:343:5>
|   `-ReturnStmt 0x558f6d1e07c8 <line:342:9, col:51>
|     `-ExprWithCleanups 0x558f6d1e07b0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x558f6d1e0780 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x558f6d1e0768 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x558f6d1e0728 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x558f6d1e0710 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x558f6d1e0658 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x558f6d1cf960 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x558f6d1e06d0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x558f6d1e06b8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x558f6d1e0678 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x558f6d1d5d18 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x558f6d1e06f8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x558f6d1e0698 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x558f6d1cf9d8 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558f6d1cfbc0 <line:345:5, line:354:5> line:345:29 make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x558f6d1cfb30 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x558f6d1e0c20 <col:56, line:354:5>
|   |-DeclStmt 0x558f6d1e09c8 <line:346:9, col:51>
|   | `-VarDecl 0x558f6d1e0800 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x558f6d1e09b0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x558f6d1e0980 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x558f6d1e0968 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x558f6d1e0950 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x558f6d1e0920 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x558f6d1e0908 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x558f6d1e08f0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x558f6d1e08c0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x558f6d1e0b80 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x558f6d1e0a30 <col:9, col:14> 'int64_t':'long' lvalue .x 0x558f6d1d6478
|   | | `-MemberExpr 0x558f6d1e0a00 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x558f6d1d7428
|   | |   `-DeclRefExpr 0x558f6d1e09e0 <col:9> 'Timestamp' lvalue Var 0x558f6d1e0800 't' 'Timestamp'
|   | `-BinaryOperator 0x558f6d1e0b60 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x558f6d1e0b30 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x558f6d1e0a60 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x558f6d1cfb30 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x558f6d1e0b48 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x558f6d1e0b10 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x558f6d1e0af0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x558f6d1e0ac0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x558f6d1e0a80 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb360 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x558f6d1e0ad8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x558f6d1e0aa0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb1b0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x558f6d1e0c08 <line:353:9, col:16>
|     `-CXXConstructExpr 0x558f6d1e0bd8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x558f6d1e0bc0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x558f6d1e0ba0 <col:16> 'Timestamp' lvalue Var 0x558f6d1e0800 't' 'Timestamp'
|-CXXMethodDecl 0x558f6d1cfd88 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x558f6d1cfc78 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x558f6d1cfcf0 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x558f6d1e0dd8 <col:72, line:360:5>
|   `-ReturnStmt 0x558f6d1e0dc8 <line:359:9, col:51>
|     `-ExprWithCleanups 0x558f6d1e0db0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x558f6d1e0d80 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x558f6d1e0d68 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x558f6d1e0d28 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x558f6d1e0d10 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x558f6d1e0c58 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x558f6d1cfc78 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x558f6d1e0cd0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x558f6d1e0cb8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x558f6d1e0c78 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x558f6d1d5e60 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x558f6d1e0cf8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x558f6d1e0c98 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x558f6d1cfcf0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558f6d1cfed8 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x558f6d1cfe48 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x558f6d1e1248 <col:56, line:371:5>
|   |-DeclStmt 0x558f6d1e0fc8 <line:363:9, col:51>
|   | `-VarDecl 0x558f6d1e0e00 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x558f6d1e0fb0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x558f6d1e0f80 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x558f6d1e0f68 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x558f6d1e0f50 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x558f6d1e0f20 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x558f6d1e0f08 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x558f6d1e0ef0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x558f6d1e0ec0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x558f6d1e11a8 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x558f6d1e1030 <col:9, col:14> 'int64_t':'long' lvalue .x 0x558f6d1d6478
|   | | `-MemberExpr 0x558f6d1e1000 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x558f6d1d7428
|   | |   `-DeclRefExpr 0x558f6d1e0fe0 <col:9> 'Timestamp' lvalue Var 0x558f6d1e0e00 't' 'Timestamp'
|   | `-CallExpr 0x558f6d1e1148 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x558f6d1e1130 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x558f6d1e1060 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x558f6d1d7758 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x558f6d1e1178 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x558f6d1e1080 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x558f6d1cfe48 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x558f6d1e1190 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x558f6d1e1110 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x558f6d1e10e0 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x558f6d1e10a0 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb000 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x558f6d1e10f8 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x558f6d1e10c0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb360 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x558f6d1e1230 <line:370:9, col:16>
|     `-CXXConstructExpr 0x558f6d1e1200 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x558f6d1e11e8 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x558f6d1e11c8 <col:16> 'Timestamp' lvalue Var 0x558f6d1e0e00 't' 'Timestamp'
|-CXXMethodDecl 0x558f6d1cffc8 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x558f6d1e1388 <col:39, line:377:5>
|   `-ReturnStmt 0x558f6d1e1378 <line:376:9, col:30>
|     `-ExprWithCleanups 0x558f6d1e1360 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x558f6d1e1330 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x558f6d1e1318 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x558f6d1e12d8 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x558f6d1e1280 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x558f6d1e12c0 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x558f6d1e12a0 <col:29> 'int' 1
|-CXXMethodDecl 0x558f6d1d0088 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x558f6d1e1468 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x558f6d1e1420 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x558f6d1e13b0 <col:9> '<bound member function type>' ->assign 0x558f6d1d0288
|     | `-CXXThisExpr 0x558f6d1e13a0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x558f6d1e13e0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x558f6d1e1450 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x558f6d1e1400 <col:19> 'int' 0
|-CXXMethodDecl 0x558f6d1d0288 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x558f6d1d0138 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x558f6d1d01b0 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x558f6d1d9050 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x558f6d1d9030 <col:60> 'int' 0
| `-CompoundStmt 0x558f6d1e1660 <col:63, line:395:5>
|   `-BinaryOperator 0x558f6d1e1640 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x558f6d1e14c0 <col:9, col:12> 'int64_t':'long' lvalue .x 0x558f6d1d6478
|     | `-MemberExpr 0x558f6d1e1490 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x558f6d1d7428
|     |   `-CXXThisExpr 0x558f6d1e1480 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x558f6d1e1620 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x558f6d1e15b0 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x558f6d1e1550 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x558f6d1e1538 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x558f6d1e1520 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x558f6d1e14f0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x558f6d1d0138 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x558f6d1e1598 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x558f6d1e1578 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb360 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x558f6d1e1608 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x558f6d1e15f0 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x558f6d1e15d0 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x558f6d1d01b0 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558f6d1d0458 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x558f6d1d0348 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x558f6d1d03c0 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x558f6d1eac88 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x558f6d1e1770 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x558f6d1e1688 <col:9> '<bound member function type>' ->assign 0x558f6d1d0288
|     | `-CXXThisExpr 0x558f6d1e1678 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x558f6d1eac70 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x558f6d1e16b8 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x558f6d1d0348 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x558f6d1e1730 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x558f6d1e1718 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x558f6d1e16d8 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x558f6d1d5d18 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x558f6d1e1758 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x558f6d1e16f8 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x558f6d1d03c0 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558f6d1d0628 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x558f6d1d0518 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x558f6d1d0590 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x558f6d1eade0 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x558f6d1ead98 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x558f6d1eacb0 <col:9> '<bound member function type>' ->assign 0x558f6d1d0288
|     | `-CXXThisExpr 0x558f6d1eaca0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x558f6d1eadc8 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x558f6d1eace0 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x558f6d1d0518 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x558f6d1ead58 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x558f6d1ead40 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x558f6d1ead00 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x558f6d1d5e60 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x558f6d1ead80 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x558f6d1ead20 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x558f6d1d0590 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558f6d1d07f8 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x558f6d1d06e8 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x558f6d1d0760 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x558f6d1d9088 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x558f6d1d9068 <col:57> 'int' 0
| `-DeprecatedAttr 0x558f6d1d08a8 <col:75> "" ""
|-CXXMethodDecl 0x558f6d1d0a38 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x558f6d1d0928 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x558f6d1d09a0 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x558f6d1d0ae8 <col:74> "" ""
|-CXXMethodDecl 0x558f6d1d0c78 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x558f6d1d0b68 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x558f6d1d0be0 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x558f6d1d0d28 <col:74> "" ""
|-CXXMethodDecl 0x558f6d1d0db8 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x558f6d1d0e58 <col:42> "" ""
|-CXXMethodDecl 0x558f6d1d1000 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x558f6d1d0ee0 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x558f6d1d0f60 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x558f6d1d10d0 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x558f6d1d1190 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x558f6d1d1230 <col:20>
| `-OptimizeNoneAttr 0x558f6d1d1288 <col:30>
|-CXXMethodDecl 0x558f6d1d12d0 <line:446:5, col:36> col:29 recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x558f6d1d1390 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x558f6d1d1450 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x558f6d1d5790 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x558f6d1d5850 <line:481:5, col:43> col:29 recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x558f6d1d5910 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x558f6d1d59d0 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x558f6d1d5a90 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x558f6d1d5bd0 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x558f6d1d5b40 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x558f6d1eaf28 <col:58, line:512:5>
|   `-ReturnStmt 0x558f6d1eaf18 <line:511:9, col:53>
|     `-BinaryOperator 0x558f6d1eaef8 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x558f6d1eaec8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x558f6d1eadf8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x558f6d1d5b40 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x558f6d1eaee0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x558f6d1eaea8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x558f6d1eae88 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x558f6d1eae58 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x558f6d1eae18 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb360 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x558f6d1eae70 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x558f6d1eae38 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb2d0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x558f6d1d5d18 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x558f6d1d5c88 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x558f6d1eb070 <col:58, line:516:5>
|   `-ReturnStmt 0x558f6d1eb060 <line:515:9, col:53>
|     `-BinaryOperator 0x558f6d1eb040 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x558f6d1eb010 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x558f6d1eaf40 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x558f6d1d5c88 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x558f6d1eb028 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x558f6d1eaff0 <col:23, col:53> 'int'
|           `-BinaryOperator 0x558f6d1eafd0 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x558f6d1eafa0 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x558f6d1eaf60 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb360 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x558f6d1eafb8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x558f6d1eaf80 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb1b0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x558f6d1d5e60 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x558f6d1d5dd0 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x558f6d1eb1b8 <col:58, line:520:5>
|   `-ReturnStmt 0x558f6d1eb1a8 <line:519:9, col:53>
|     `-BinaryOperator 0x558f6d1eb188 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x558f6d1eb158 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x558f6d1eb088 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x558f6d1d5dd0 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x558f6d1eb170 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x558f6d1eb138 <col:23, col:53> 'int'
|           `-BinaryOperator 0x558f6d1eb118 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x558f6d1eb0e8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x558f6d1eb0a8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb000 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x558f6d1eb100 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x558f6d1eb0c8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb360 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x558f6d1d5fa8 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x558f6d1d5f18 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x558f6d1eb300 <col:60, line:524:5>
|   `-ReturnStmt 0x558f6d1eb2f0 <line:523:9, col:55>
|     `-BinaryOperator 0x558f6d1eb2d0 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x558f6d1eb2a0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x558f6d1eb1d0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x558f6d1d5f18 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x558f6d1eb2b8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x558f6d1eb280 <col:25, col:55> 'int'
|           `-BinaryOperator 0x558f6d1eb260 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x558f6d1eb230 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x558f6d1eb1f0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb360 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x558f6d1eb248 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x558f6d1eb210 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb2d0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x558f6d1d60f0 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x558f6d1d6060 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x558f6d1eb448 <col:60, line:528:5>
|   `-ReturnStmt 0x558f6d1eb438 <line:527:9, col:55>
|     `-BinaryOperator 0x558f6d1eb418 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x558f6d1eb3e8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x558f6d1eb318 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x558f6d1d6060 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x558f6d1eb400 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x558f6d1eb3c8 <col:25, col:55> 'int'
|           `-BinaryOperator 0x558f6d1eb3a8 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x558f6d1eb378 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x558f6d1eb338 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb360 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x558f6d1eb390 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x558f6d1eb358 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb1b0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x558f6d1d6238 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x558f6d1d61a8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x558f6d1eb590 <col:60, line:532:5>
|   `-ReturnStmt 0x558f6d1eb580 <line:531:9, col:55>
|     `-BinaryOperator 0x558f6d1eb560 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x558f6d1eb530 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x558f6d1eb460 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x558f6d1d61a8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x558f6d1eb548 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x558f6d1eb510 <col:25, col:55> 'int'
|           `-BinaryOperator 0x558f6d1eb4f0 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x558f6d1eb4c0 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x558f6d1eb480 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb000 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x558f6d1eb4d8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x558f6d1eb4a0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x558f6d1cb360 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x558f6d1d62e0 prev 0x558f6d1cb800 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x558f6d1d63d8 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x558f6d1d6478 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x558f6d1d90d8 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x558f6d1d94b8 <col:11>
| |-CXXConstructorDecl 0x558f6d1d91b0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x558f6d1d9298 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x558f6d1ddc20 <col:11>
| |-CXXConstructorDecl 0x558f6d1d9338 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x558f6d1d9448 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x558f6d1df478 <col:11>
| |-CXXDestructorDecl 0x558f6d1de788 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x558f6cfecb48 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x558f6cfecc58 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x558f6cfed520 <col:11>
| |   `-ReturnStmt 0x558f6cfed510 <col:11>
| |     `-UnaryOperator 0x558f6cfed4f8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x558f6cfed4e8 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x558f6cfeccc8 <col:11> col:11 implicit constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&)' inline default trivial noexcept-unevaluated 0x558f6cfeccc8
|   `-ParmVarDecl 0x558f6cfecdd8 <col:11> col:11 'Timestamp::rep_t &&'
|-EnumDecl 0x558f6d1d64e0 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x558f6d1d65e0 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x558f6d1d67e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d1d65c0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x558f6d1d65a0 <col:21> 'int' 0
| |-EnumConstantDecl 0x558f6d1d6670 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x558f6d1d67f8 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d1d6650 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x558f6d1d6630 <col:23> 'int' 1
| |-EnumConstantDecl 0x558f6d1d6700 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x558f6d1d6810 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558f6d1d66e0 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x558f6d1d66c0 <col:23> 'int' 2
| `-EnumConstantDecl 0x558f6d1d6790 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x558f6d1d6828 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558f6d1d6770 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x558f6d1d6750 <col:27> 'int' 3
|-CXXMethodDecl 0x558f6d1d6868 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x558f6d1d6930 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x558f6d1d6b38 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x558f6d1d69e0 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x558f6d1d6a60 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x558f6d1d90a0 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x558f6d1d6d48 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x558f6d1d6bf8 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x558f6d1d6c70 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x558f6d1d6e18 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x558f6d1d6ed8 <line:635:5, col:37> col:24 warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x558f6d1d7048 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x558f6d1d6f88 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x558f6d1d7110 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x558f6d1d71d0 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x558f6d1d7290 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x558f6d1d7350 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x558f6d1d73f0 <line:670:3, col:10> col:3 private
|-FieldDecl 0x558f6d1d7428 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x558f6d1d7498 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x558f6d1eb5a8 <col:27, line:684:5>
|-CXXMethodDecl 0x558f6d1d7558 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x558f6d1eb5b8 <col:27, line:696:5>
|-CXXMethodDecl 0x558f6d1d7758 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x558f6d1d7608 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x558f6d1d7680 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x558f6d1eb740 <col:66, line:700:5>
|   `-ReturnStmt 0x558f6d1eb730 <line:699:9, col:31>
|     `-CallExpr 0x558f6d1eb6d0 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x558f6d1eb6b8 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x558f6d1eb668 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x558f6d1c24e8 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x558f6d1eb700 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x558f6d1eb628 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x558f6d1d7608 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x558f6d1eb718 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x558f6d1eb648 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x558f6d1d7680 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558f6d1d7ac8 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x558f6d1d7818 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x558f6d1d7890 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x558f6d1d7908 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x558f6d1d7980 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x558f6d1eba90 <col:64, line:707:5>
|   |-DeclStmt 0x558f6d1eb7d0 <line:704:9, col:24>
|   | `-VarDecl 0x558f6d1eb768 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x558f6d1eb9e0 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x558f6d1eb7e8 <col:9> 'int32_t':'int' lvalue ParmVar 0x558f6d1d7890 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x558f6d1eb9c8 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x558f6d1eb960 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x558f6d1eb948 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558f6d1eb8c8 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x558f6d1c9f78 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x558f6d1eb998 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x558f6d1eb868 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x558f6d1d7908 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x558f6d1eb9b0 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x558f6d1eb888 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x558f6d1d7980 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x558f6d1eb8a8 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x558f6d1eb768 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x558f6d1eba70 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x558f6d1eba00 <col:9> 'int32_t':'int' lvalue ParmVar 0x558f6d1d7818 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x558f6d1eba58 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x558f6d1eba40 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x558f6d1eba20 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x558f6d1eb768 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x558f6d1d7d68 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x558f6d1d7b98 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x558f6d1d7c10 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x558f6d1d7c88 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x558f6d1d8008 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x558f6d1d7e30 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x558f6d1d7ea8 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x558f6d1d7f20 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x558f6d1d8198 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x558f6d1d80d0 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x558f6d1d8398 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x558f6d1d8250 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x558f6d1d82c8 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x558f6d1d8668 <line:717:5, col:73> col:24
| `-FunctionDecl 0x558f6d1d85a8 parent 0x558f6ccdc488 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x558f6d1d8458 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x558f6d1d84d0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x558f6d1d8888 <line:718:5, col:72> col:24
| `-FunctionDecl 0x558f6d1d87c8 parent 0x558f6ccdc488 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x558f6d1d86b8 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x558f6d1d8730 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x558f6d1d8a50 <line:719:5, col:57> col:29
| `-FunctionDecl 0x558f6d1d8998 parent 0x558f6ccdc488 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x558f6d1d88d8 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x558f6d1d8cd8 <line:720:5, col:73> col:30
| `-FunctionDecl 0x558f6d1d8c18 parent 0x558f6ccdc488 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x558f6d1d8ac8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x558f6d1d8b40 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x558f6d1d8ef8 <line:721:5, col:73> col:30
| `-FunctionDecl 0x558f6d1d8e38 parent 0x558f6ccdc488 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x558f6d1d8d28 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x558f6d1d8da0 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x558f6d1de630 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x558f6d1de718 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x558f6d1d7428 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x558f6d1df188 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x558f6d1df140 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x558f6d1d7428
| |     `-DeclRefExpr 0x558f6d1df120 <col:7> 'const Timestamp' lvalue ParmVar 0x558f6d1de718 '' 'const Timestamp &'
| `-CompoundStmt 0x558f6d1df1e8 <col:7>
|-CXXConstructorDecl 0x558f6d1de898 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x558f6d1de9a8 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x558f6d1d7428 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x558f6d1df488 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x558f6d1df430 <col:7> 'Timestamp::rep_t' xvalue ._t 0x558f6d1d7428
| |     `-CXXStaticCastExpr 0x558f6d1df400 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x558f6d1df3d0 <col:7> 'Timestamp' lvalue ParmVar 0x558f6d1de9a8 '' 'Timestamp &&'
| `-CompoundStmt 0x558f6d1df4e8 <col:7>
|-CXXDestructorDecl 0x558f6d1dea58 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x558f6cfec998 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x558f6cfecaa8 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x558f6cfed598 <col:7>
|   |-CXXMemberCallExpr 0x558f6cfed538 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x558f6cfed478 <col:7> '<bound member function type>' .operator= 0x558f6cfecb48
|   | | `-MemberExpr 0x558f6cfed388 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x558f6d1d7428
|   | |   `-CXXThisExpr 0x558f6cfed378 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x558f6cfed448 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x558f6d1d7428
|   |   `-DeclRefExpr 0x558f6cfed428 <col:7> 'const Timestamp' lvalue ParmVar 0x558f6cfecaa8 '' 'const Timestamp &'
|   `-ReturnStmt 0x558f6cfed588 <col:7>
|     `-UnaryOperator 0x558f6cfed570 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558f6cfed560 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x558f6cfece48 <col:7> col:7 implicit operator= 'Timestamp &(Timestamp &&)' inline default trivial noexcept-unevaluated 0x558f6cfece48
  `-ParmVarDecl 0x558f6cfecf58 <col:7> col:7 'Timestamp &&'

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class StringArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class String> (empty)
         0 |   class StringArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558f6d30bfd8 <../dummy_inc/click/args.hh:1345:1, line:1349:1> line:1345:7 referenced class StringArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558f6d30c0f8 <col:1, col:7> col:7 implicit class StringArg
|-AccessSpecDecl 0x558f6d30c188 <col:19, col:25> col:19 public
|-CXXMethodDecl 0x558f6d30c380 <line:1346:5, line:1348:5> line:1346:17 used parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x558f6d30c1c0 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x558f6d30c238 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x558f6d30c2b0 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x558f6d30c450 <col:79> 'const ArgContext' lvalue Var 0x558f6d2eff58 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x558f6d30c5f0 <col:91, line:1348:5>
|   `-ReturnStmt 0x558f6d30c5e0 <line:1347:9, col:41>
|     `-CallExpr 0x558f6d30c590 <col:16, col:41> 'bool'
|       |-ImplicitCastExpr 0x558f6d30c578 <col:16> 'bool (*)(const String &, String *, String *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x558f6d30c530 <col:16> 'bool (const String &, String *, String *)' lvalue Function 0x558f6d30bf20 'cp_string' 'bool (const String &, String *, String *)'
|       |-DeclRefExpr 0x558f6d30c4b8 <col:26> 'const String' lvalue ParmVar 0x558f6d30c1c0 'str' 'const String &'
|       |-UnaryOperator 0x558f6d30c4f8 <col:31, col:32> 'String *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x558f6d30c4d8 <col:32> 'String' lvalue ParmVar 0x558f6d30c238 'result' 'String &'
|       `-ImplicitCastExpr 0x558f6d30c5c8 <col:40> 'String *' <NullToPointer>
|         `-IntegerLiteral 0x558f6d30c510 <col:40> 'int' 0
|-CXXConstructorDecl 0x558f6d1f32f8 <line:1345:7> col:7 implicit constexpr StringArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x558f6d1f33d0 <col:7> col:7 implicit ~StringArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x558f6d1f3508 <col:7> col:7 implicit constexpr StringArg 'void (const StringArg &)' inline default trivial noexcept-unevaluated 0x558f6d1f3508
| `-ParmVarDecl 0x558f6d1f3618 <col:7> col:7 'const StringArg &'
`-CXXConstructorDecl 0x558f6d1f36b8 <col:7> col:7 implicit used constexpr StringArg 'void (StringArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x558f6d1f37c8 <col:7> col:7 'StringArg &&'
  `-CompoundStmt 0x558f6d1f4420 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.StringArg = type { i8 }
  NonVirtualBaseLLVMType:%class.StringArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558f6d30c630 <../dummy_inc/click/args.hh:1351:1, col:58> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'StringArg'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x558f6d30c888 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x558f6d1f3208 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x558f6d1f3838 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<String> &)' inline default trivial noexcept-unevaluated 0x558f6d1f3838
| `-ParmVarDecl 0x558f6d1f3948 <col:19> col:19 'const DefaultArg<String> &'
|-CXXConstructorDecl 0x558f6d1f39e8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<String> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x558f6d1f3af8 <col:19> col:19 used 'DefaultArg<String> &&'
| |-CXXCtorInitializer 'StringArg'
| | `-CXXConstructExpr 0x558f6d1f4430 <col:19> 'StringArg' 'void (StringArg &&) noexcept'
| |   `-ImplicitCastExpr 0x558f6d1f4400 <col:19> 'StringArg' xvalue <UncheckedDerivedToBase (StringArg)>
| |     `-CXXStaticCastExpr 0x558f6d1f43d0 <col:19> 'DefaultArg<String>' xvalue static_cast<struct DefaultArg<class String> &&> <NoOp>
| |       `-DeclRefExpr 0x558f6d1f43a0 <col:19> 'DefaultArg<String>' lvalue ParmVar 0x558f6d1f3af8 '' 'DefaultArg<String> &&'
| `-CompoundStmt 0x558f6d1f44a0 <col:19>
`-CXXDestructorDecl 0x558f6d1f3b98 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558f6d1f5168 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x558f6d1f5568 prev 0x558f6d1f5168 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x558f6d1f5760 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x558f6d1f5668 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x558f6d1f66a8 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x558f6d1f58e0 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x558f6d1f6668 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x558f6d1f6628 <col:20> 'String *' lvalue ParmVar 0x558f6d1f5668 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x558f6d1f5940 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x558f6d1f6708 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x558f6d2efd80 <line:853:25, line:854:9>
|-CXXMethodDecl 0x558f6d1f5820 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x558f6d2ca340 Slot::store 'void ()' ]
| `-CompoundStmt 0x558f6d3958c8 <col:22, line:857:9>
|   `-CallExpr 0x558f6d395880 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x558f6d395868 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x558f6d3957e0 <col:13> 'void (String &, const String &)' lvalue Function 0x558f6d3956c0 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x558f6d10a778 'assign_consume')
|     |-UnaryOperator 0x558f6d1f6898 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x558f6d1f6880 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x558f6d1f6850 <col:29> 'String *' lvalue ->_ptr 0x558f6d1f58e0
|     |     `-CXXThisExpr 0x558f6d1f6840 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x558f6d3958b0 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x558f6d1f68c0 <col:35> 'String':'String' lvalue ->_slot 0x558f6d1f5940
|         `-CXXThisExpr 0x558f6d1f68b0 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x558f6d1f58e0 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x558f6d1f5940 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x558f6d1f59b8 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x558f6d1f59b8
| `-ParmVarDecl 0x558f6d1f5ac8 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x558f6d1f5b68 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x558f6d1f5b68
| `-ParmVarDecl 0x558f6d1f5c78 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x558f6d1f5d18 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x558f6d1f5d18
| `-ParmVarDecl 0x558f6d1f5e28 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x558f6d1f5e98 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x558f6d1f5e98
| `-ParmVarDecl 0x558f6d1f5fa8 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x558f6d1f6030 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x558f6d2ca240 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x558f6d1f6770 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558f6d307cf0 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558f6d307e08 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x558f6d307e98 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x558f6d3080d8 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x558f6d307ed0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x558f6d307f50 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x558f6d307fc8 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x558f6d3082f0 <col:81> 'const ArgContext' lvalue Var 0x558f6d2eff58 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x558f6d308230 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x558f6d3081a0 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x558f6d308448 <col:35, line:1261:5>
|   `-ReturnStmt 0x558f6d308438 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x558f6d308420 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x558f6d3083f0 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x558f6d3083d8 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x558f6d3083b0 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x558f6d308390 <col:16, col:24> 'String' (CXXTemporary 0x558f6d308390)
|               `-CXXConstructExpr 0x558f6d308358 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x558f6d308340 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x558f6d308320 <col:23> 'bool' lvalue ParmVar 0x558f6d3081a0 'x' 'bool'
|-CXXConstructorDecl 0x558f6d39a658 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x558f6d39a730 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x558f6d39a868 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x558f6d39a868
| `-ParmVarDecl 0x558f6d39a978 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x558f6d39aa18 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x558f6d39ab28 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x558f6d39b780 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558f6d308488 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x558f6d3086e8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x558f6d39a568 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x558f6d39ab98 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x558f6d39ab98
| `-ParmVarDecl 0x558f6d39aca8 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x558f6d39ad48 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x558f6d39ae58 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x558f6d39b790 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x558f6d39b760 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x558f6d39b730 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x558f6d39b700 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x558f6d39ae58 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x558f6d39b800 <col:19>
`-CXXDestructorDecl 0x558f6d39aef8 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
