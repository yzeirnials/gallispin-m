
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a92a30da68 prev 0x55a92a305208 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a92a30db60 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55a92a30dbf0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55a92a30dc68 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55a92a30dd28 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55a92a30ddf0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55a92a30df68 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55a92a30dea0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55a92a30e010 <col:24>
| `-OptimizeNoneAttr 0x55a92a30e068 <col:34>
|-CXXMethodDecl 0x55a92a30e0b0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55a92a30e368 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55a92a30e160 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55a92a30e1d8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55a92a30e258 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55a92a30e420 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55a92a30e458 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55a92a30e4c0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55a92a30e548 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55a92a30e868 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55a92a30e600 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55a92a30e678 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55a92a30e6f0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55a92a30e770 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55a92a30e980 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55a92a3162f8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55a92a3162f8
| `-ParmVarDecl 0x55a92a316408 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55a92a3164a8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55a92a3164a8
| `-ParmVarDecl 0x55a92a3165b8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55a92a406e38 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a92a300a80 prev 0x55a92a300800 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55a92a300b78 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55a92a300c08 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55a92a300c68 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55a92a300d58 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55a92a300e58 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55a92a301028 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55a92a300ed8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55a92a300f50 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55a92a3011b8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55a92a3010f0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55a92a301260 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55a92a301398 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55a92a3012d0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55a92a301538 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55a92a301478 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55a92a3016d8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55a92a301618 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55a92a301780 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55a92a301880 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55a92a301960 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a301860 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55a92a301840 <col:26> 'int' 1
| `-EnumConstantDecl 0x55a92a301910 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55a92a301978 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a92a3018f0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55a92a3018d0 <col:44> 'int' 2
|-CXXMethodDecl 0x55a92a301ac0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55a92a3019a8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55a92a301a28 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55a92a301c18 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55a92a301b88 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55a92a301e58 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55a92a301cd8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55a92a301d50 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55a92a301f08 <col:20>
| `-OptimizeNoneAttr 0x55a92a301f60 <col:30>
|-CXXMethodDecl 0x55a92a302068 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55a92a301fa0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55a92a302110 <col:20>
| `-OptimizeNoneAttr 0x55a92a302168 <col:30>
|-CXXMethodDecl 0x55a92a3021b8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55a92a302280 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55a92a302398 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55a92a302420 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55a92a3024a8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55a92a302530 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55a92a3025b8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55a92a302648 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55a92a302708 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55a92a302790 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55a92a302818 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55a92a3028a0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55a92a302928 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55a92a3029b0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55a92a302a40 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55a92a302b00 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55a92a302b90 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55a92a302ce0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55a92a302c48 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55a92a302e70 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55a92a302da0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55a92a303120 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55a92a302f28 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55a92a302fa8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55a92a303028 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55a92a3031d8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55a92a3032e0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55a92a303570 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a3032c0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55a92a3032a0 <col:33> 'int' 0
| |-EnumConstantDecl 0x55a92a303370 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55a92a303588 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a303350 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55a92a303330 <col:32> 'int' 20
| |-EnumConstantDecl 0x55a92a303400 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55a92a3035a0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a3033e0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55a92a3033c0 <col:38> 'int' 90
| |-EnumConstantDecl 0x55a92a303490 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55a92a3035b8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a303470 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55a92a303450 <col:35> 'int' 100
| `-EnumConstantDecl 0x55a92a303520 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55a92a3035d0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a92a303500 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55a92a3034e0 <col:32> 'int' 2000
|-CXXMethodDecl 0x55a92a303610 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55a92a303a50 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55a92a3038c0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55a92a303938 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55a92a303b20 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55a92a303ca0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55a92a303bd0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55a92a303ea8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55a92a303d58 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55a92a303dd0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55a92a303fa8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55a92a304048 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55a92a304110 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55a92a3041a0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55a92a3043d0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a304180 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55a92a304160 <col:36> 'int' EnumConstant 0x55a92a304110 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55a92a3041f0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55a92a304240 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55a92a304290 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55a92a3042e0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55a92a304330 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55a92a304380 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55a92a3044b8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55a92a3043f8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55a92a304580 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55a92a304640 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55a92a304700 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55a92a3047c0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55a92a3048d8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55a92a3049a0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55a92a304b20 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55a92a304a50 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55a92a304c48 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55a92a304e48 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55a92a304cf8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55a92a304d78 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55a92a312798 <col:54, line:127:5>
|   |-ParenExpr 0x55a92a312648 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55a92a312618 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55a92a312308 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55a92a3122e0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55a92a3122c8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55a92a3122b0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55a92a312280 <col:31> 'Router *' lvalue ->_router 0x55a92a310160
|   |   |         `-CXXThisExpr 0x55a92a312270 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55a92a312368 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a92a312348 <col:48> 'int' 0
|   |   `-CallExpr 0x55a92a312578 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55a92a312560 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a92a312540 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a929e3aee0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a92a3125b8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a3123d8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55a92a3125d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a3123f8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55a92a3125e8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a92a312430 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55a92a312600 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a92a312528 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a92a312510 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a92a3124c8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55a92a3126e0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55a92a312678 <col:9> 'Router *' lvalue ->_router 0x55a92a310160
|   | | `-CXXThisExpr 0x55a92a312668 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55a92a3126c8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a92a3126a8 <col:19> 'Router *' lvalue ParmVar 0x55a92a304cf8 'r' 'Router *'
|   `-BinaryOperator 0x55a92a312778 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55a92a312710 <col:9> 'int' lvalue ->_eindex 0x55a92a3101c8
|     | `-CXXThisExpr 0x55a92a312700 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55a92a312760 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55a92a312740 <col:19> 'int' lvalue ParmVar 0x55a92a304d78 'eindex' 'int'
|-CXXMethodDecl 0x55a92a304fd0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55a92a304f08 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55a92a3050a0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55a92a305168 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55a92a305208 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55a92a305458 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55a92a3052d0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55a92a305350 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55a92a305508 <col:20>
| `-OptimizeNoneAttr 0x55a92a305560 <col:30>
|-CXXMethodDecl 0x55a92a305668 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55a92a3055a0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55a92a305710 <col:20>
| `-OptimizeNoneAttr 0x55a92a305768 <col:30>
|-CXXMethodDecl 0x55a92a305838 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55a92a3057a8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55a92a3058e0 <col:20>
| `-OptimizeNoneAttr 0x55a92a305938 <col:30>
|-CXXMethodDecl 0x55a92a305ac8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55a92a305970 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55a92a3059f0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55a92a305c58 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55a92a305b90 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55a92a305da8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55a92a305d18 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55a92a305ef8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55a92a305e68 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55a92a306048 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55a92a305fb8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55a92a306308 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55a92a306100 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55a92a306180 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55a92a306228 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55a92a3063e0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55a92a3064a0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55a92a306770 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55a92a306620 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55a92a306698 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55a92a306898 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55a92a306a70 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55a92a306950 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55a92a3069d0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55a92a306c58 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55a92a306b38 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55a92a306bb8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55a92a306fc8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55a92a306d18 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55a92a306d90 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55a92a306e10 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55a92a311d80 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55a92a311d60 <col:106> 'int' 0
| `-ParmVarDecl 0x55a92a306e88 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55a92a311db8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55a92a311d98 <col:126> 'int' 0
|-CXXMethodDecl 0x55a92a307368 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55a92a307098 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55a92a307130 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55a92a3071b0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55a92a307228 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55a92a311df0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55a92a311dd0 <col:114> 'int' 0
|-CXXMethodDecl 0x55a92a3076f8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55a92a307440 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55a92a3074b8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55a92a307538 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55a92a311e08 <col:96> 'int' 0
| `-ParmVarDecl 0x55a92a3075b0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55a92a311e48 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55a92a311e28 <col:116> 'int' 0
|-CXXMethodDecl 0x55a92a307a78 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55a92a3077c8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55a92a307840 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55a92a3078c0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55a92a311e80 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55a92a311e60 <col:109> 'int' 0
| `-ParmVarDecl 0x55a92a307938 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55a92a311eb8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55a92a311e98 <col:129> 'int' 0
|-CXXMethodDecl 0x55a92a307df8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55a92a307b48 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55a92a307bc0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55a92a307c40 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55a92a307cb8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55a92a311ef0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55a92a311ed0 <col:117> 'int' 0
|-CXXMethodDecl 0x55a92a308188 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55a92a307ed0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a92a307f48 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55a92a307fc8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55a92a311f08 <col:99> 'int' 0
| `-ParmVarDecl 0x55a92a308040 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55a92a311f48 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55a92a311f28 <col:119> 'int' 0
|-CXXMethodDecl 0x55a92a3085a8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55a92a308258 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55a92a3082d8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55a92a308350 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55a92a3083d0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55a92a311f80 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55a92a311f60 <col:108> 'int' 0
| `-ParmVarDecl 0x55a92a308450 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55a92a311fb8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55a92a311f98 <col:141> 'int' 0
|-CXXMethodDecl 0x55a92a3089c8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55a92a308680 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55a92a308700 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55a92a308778 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55a92a3087f8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55a92a308878 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55a92a311fd0 <col:121> 'int' 0
|-CXXMethodDecl 0x55a92a308df8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55a92a308aa8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55a92a308b28 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55a92a308ba0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55a92a308c20 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55a92a311ff0 <col:98> 'int' 0
| `-ParmVarDecl 0x55a92a308ca0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55a92a312010 <col:123> 'int' 0
|-CXXMethodDecl 0x55a92a3090c0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55a92a308ed0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55a92a308f50 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55a92a308fd0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55a92a312030 <col:80> 'int' 0
|-EnumDecl 0x55a92a309178 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55a92a309280 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55a92a309510 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a309260 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55a92a309240 <col:42> 'int' 1
| |-EnumConstantDecl 0x55a92a309310 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55a92a309528 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a3092f0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55a92a3092d0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55a92a3093a0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55a92a309540 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a309380 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55a92a309360 <col:44> 'int' 4
| |-EnumConstantDecl 0x55a92a309430 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55a92a309558 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a309410 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55a92a3093f0 <col:36> 'int' 7
| `-EnumConstantDecl 0x55a92a3094c0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55a92a309570 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a92a3094a0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55a92a309480 <col:34> 'int' 6
|-CXXMethodDecl 0x55a92a309828 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55a92a309598 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55a92a309638 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55a92a3096b8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55a92a309730 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55a92a3120e8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55a92a3120d0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55a92a3120b8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55a92a312098 <col:98, col:105> 'String' (CXXTemporary 0x55a92a312098)
|           `-CXXTemporaryObjectExpr 0x55a92a312060 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55a92a309ac8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55a92a3098f8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55a92a309970 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55a92a3099e8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55a92a312198 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55a92a312180 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55a92a312168 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55a92a312148 <col:94, col:101> 'String' (CXXTemporary 0x55a92a312148)
| |         `-CXXTemporaryObjectExpr 0x55a92a312110 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55a92a312980 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55a92a3128f8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55a92a3128c8 <col:9> '<bound member function type>' ->add_task_handlers 0x55a92a309828
|     | `-CXXThisExpr 0x55a92a3128b8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55a92a312938 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55a92a312838 <col:27> 'Task *' lvalue ParmVar 0x55a92a3098f8 'task' 'Task *'
|     |-ImplicitCastExpr 0x55a92a312950 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55a92a312858 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55a92a309970 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55a92a312968 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55a92a312878 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55a92a3094c0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55a92a312898 <col:62> 'const String' lvalue ParmVar 0x55a92a3099e8 'prefix' 'const String &'
|-CXXMethodDecl 0x55a92a309cd8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55a92a309b90 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55a92a309c08 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55a92a312248 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55a92a312230 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55a92a312218 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55a92a3121f8 <col:70, col:77> 'String' (CXXTemporary 0x55a92a3121f8)
| |         `-CXXTemporaryObjectExpr 0x55a92a3121c0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55a92a312b58 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55a92a312ad0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55a92a312aa0 <col:9> '<bound member function type>' ->add_task_handlers 0x55a92a309828
|     | `-CXXThisExpr 0x55a92a312a90 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55a92a312b10 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55a92a312a10 <col:27> 'Task *' lvalue ParmVar 0x55a92a309b90 'task' 'Task *'
|     |-ImplicitCastExpr 0x55a92a312b28 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55a92a312a30 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55a92a312b40 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55a92a312a50 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55a92a3094c0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55a92a312a70 <col:57> 'const String' lvalue ParmVar 0x55a92a309c08 'prefix' 'const String &'
|-CXXMethodDecl 0x55a92a309fb8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55a92a309da0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a92a309e20 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a92a309e98 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55a92a30a268 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55a92a30a088 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a92a30a108 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a92a30a188 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55a92a30a558 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55a92a30a338 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a92a30a3b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a92a30a430 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55a92a30a808 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55a92a30a628 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a92a30a6a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a92a30a728 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55a92a30aab8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55a92a30a8d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a92a30a958 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a92a30a9d8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55a92a30ad68 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55a92a30ab88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a92a30ac08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a92a30ac80 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55a92a30b018 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55a92a30ae38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a92a30aeb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a92a30af38 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55a92a30b328 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55a92a30b140 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a92a30b1c0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a92a30b240 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55a92a30b608 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55a92a30b3f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a92a30b478 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a92a30b520 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55a92a30b8e8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55a92a30b6d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a92a30b758 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a92a30b800 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55a92a30bb50 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55a92a30b9b8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55a92a30ba38 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55a92a30bab0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55a92a30bdf8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55a92a30bc20 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55a92a30bca0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55a92a30bd18 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55a92a30c0a8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55a92a30bec8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a92a30bf48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a92a30bfc8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55a92a30c358 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55a92a30c178 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a92a30c1f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a92a30c270 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55a92a30c608 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55a92a30c428 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a92a30c4a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a92a30c520 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55a92a30c8d8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55a92a30c6d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a92a30c758 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a92a30c7f8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55a92a30cc08 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55a92a30c9a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a92a30ca28 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55a92a30caa0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55a92a30cb18 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55a92a312260 <col:93> 'bool' false
|-CXXMethodDecl 0x55a92a30cdf0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55a92a30ccd8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55a92a30cd58 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55a92a30cfc8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55a92a30ceb0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55a92a30cf30 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55a92a30d2a8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55a92a30d088 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55a92a30d100 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55a92a30d180 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55a92a30d1f8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55a92a30d598 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55a92a30d378 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55a92a30d3f0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55a92a30d470 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55a92a30d4e8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55a92a30d7d0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55a92a30d670 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55a92a30d6f0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55a92a30d9b8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55a92a30d898 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55a92a30d918 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55a92a30da68 prev 0x55a92a305208 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55a92a30db60 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55a92a30dbf0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55a92a30dc68 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55a92a30dd28 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55a92a30ddf0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55a92a30df68 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55a92a30dea0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55a92a30e010 <col:24>
| | `-OptimizeNoneAttr 0x55a92a30e068 <col:34>
| |-CXXMethodDecl 0x55a92a30e0b0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55a92a30e368 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55a92a30e160 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55a92a30e1d8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55a92a30e258 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55a92a30e420 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55a92a30e458 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55a92a30e4c0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55a92a30e548 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55a92a30e868 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55a92a30e600 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55a92a30e678 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55a92a30e6f0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55a92a30e770 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55a92a30e980 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55a92a3162f8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55a92a3162f8
| | `-ParmVarDecl 0x55a92a316408 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55a92a3164a8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55a92a3164a8
| | `-ParmVarDecl 0x55a92a3165b8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55a92a406e38 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55a92a30e9f8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55a92a30ea98 <col:38> "" ""
|-CXXMethodDecl 0x55a92a30eb28 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55a92a30ebc8 <col:44> "" ""
|-AccessSpecDecl 0x55a92a30ec38 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55a92a30ec60 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55a92a30ed60 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55a92a30edb0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a92a30ed40 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55a92a30ed20 <col:27> 'int' 4
|-FieldDecl 0x55a92a30ee68 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55a92a30f018 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55a92a30f0d0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55a92a310160 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55a92a3101c8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55a92a310318 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55a92a310258 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55a92a3104c8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55a92a3103d8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55a92a3106a8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55a92a310588 <col:20> col:23 'int'
| `-ParmVarDecl 0x55a92a310608 <col:25> col:28 'int'
|-CXXMethodDecl 0x55a92a310950 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55a92a310770 <col:23> col:26 'int'
| |-ParmVarDecl 0x55a92a3107f0 <col:28> col:31 'int'
| `-ParmVarDecl 0x55a92a310868 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55a92a310a08 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55a92a310ad0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55a92a310b20 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55a92a310b70 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55a92a310d50 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55a92a310c00 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55a92a310c78 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55a92a310ff8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55a92a310e18 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55a92a310e98 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55a92a310f10 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55a92a311218 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55a92a3110c8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55a92a311148 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55a92a311550 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55a92a3112d8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55a92a311358 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55a92a3113d0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55a92a311450 <col:57> col:60 'int'
|-CXXMethodDecl 0x55a92a311738 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55a92a311620 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55a92a3116a0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55a92a311888 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55a92a3117f8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55a92a311c08 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55a92a311948 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55a92a3119c8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55a92a311a40 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55a92a311ac0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55a92a311d20 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class PrintAiro
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class String _label
       112 |     struct String::rep_t _r
       112 |       const char * data
       120 |       int length
       128 |       struct String::memo_t * memo
       136 |   _Bool _timestamp
       137 |   _Bool _quiet
       138 |   _Bool _verbose
           | [sizeof=144, dsize=139, align=8,
           |  nvsize=139, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a92a0d3910 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55a92a0d3a28 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55a92a0d3ac8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55a92a0d3b28 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55a92a0d3b88 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55a92a0d3c38 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a92a0d3f40 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a92a0d4058 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55a92a0d4100 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55a92a0d4168 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55a92a0d41f8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55a92a0da290 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55a92a0da6c8 <col:12>
|-CXXConstructorDecl 0x55a92a0da398 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55a92a0da4a8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55a92a0d4100 'data' 'const char *'
| | `-ImplicitCastExpr 0x55a92a0dcc50 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55a92a0dcc20 <col:12> 'const char *const' lvalue .data 0x55a92a0d4100
| |     `-DeclRefExpr 0x55a92a0dcc00 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a92a0da4a8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55a92a0d4168 'length' 'int'
| | `-ImplicitCastExpr 0x55a92a0dcce0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55a92a0dccb0 <col:12> 'const int' lvalue .length 0x55a92a0d4168
| |     `-DeclRefExpr 0x55a92a0dcc90 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a92a0da4a8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55a92a0d41f8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55a92a0dcd70 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55a92a0dcd40 <col:12> 'String::memo_t *const' lvalue .memo 0x55a92a0d41f8
| |     `-DeclRefExpr 0x55a92a0dcd20 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a92a0da4a8 '' 'const String::rep_t &'
| `-CompoundStmt 0x55a92a0dcdc8 <col:12>
|-CXXConstructorDecl 0x55a92a0da548 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55a92a0da548
| `-ParmVarDecl 0x55a92a0da658 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55a92a0dfbb0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55a92a0eb5c8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55a92a0eb6d8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55a92a0ebbf0 <col:12>
|   |-BinaryOperator 0x55a92a0eba08 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55a92a0eb9c0 <col:12> 'const char *' lvalue ->data 0x55a92a0d4100
|   | | `-CXXThisExpr 0x55a92a0eb9b0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55a92a0eb9f0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55a92a0eb980 <col:12> 'const char *const' lvalue .data 0x55a92a0d4100
|   |     `-DeclRefExpr 0x55a92a0eb960 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a92a0eb6d8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55a92a0ebad0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55a92a0eba88 <col:12> 'int' lvalue ->length 0x55a92a0d4168
|   | | `-CXXThisExpr 0x55a92a0eba78 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55a92a0ebab8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55a92a0eba48 <col:12> 'const int' lvalue .length 0x55a92a0d4168
|   |     `-DeclRefExpr 0x55a92a0eba28 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a92a0eb6d8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55a92a0ebb98 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55a92a0ebb50 <col:12> 'String::memo_t *' lvalue ->memo 0x55a92a0d41f8
|   | | `-CXXThisExpr 0x55a92a0ebb40 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55a92a0ebb80 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55a92a0ebb10 <col:12> 'String::memo_t *const' lvalue .memo 0x55a92a0d41f8
|   |     `-DeclRefExpr 0x55a92a0ebaf0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a92a0eb6d8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55a92a0ebbe0 <col:12>
|     `-UnaryOperator 0x55a92a0ebbc8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a92a0ebbb8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55a92a0eb748 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55a92a0eb748
  `-ParmVarDecl 0x55a92a0eb858 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a92a0cae80 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55a92a0caf98 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55a92a0cb028 <col:16, col:22> col:16 public
|-TypedefDecl 0x55a92a0cb068 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55a929d9efd0 'const char *'
|   `-QualType 0x55a929d9e521 'const char' const
|     `-BuiltinType 0x55a929d9e520 'char'
|-TypedefDecl 0x55a92a0cb0f0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55a92a0cb0c0 'String::const_iterator' sugar
|   |-Typedef 0x55a92a0cb068 'const_iterator'
|   `-PointerType 0x55a929d9efd0 'const char *'
|     `-QualType 0x55a929d9e521 'const char' const
|       `-BuiltinType 0x55a929d9e520 'char'
|-TypedefDecl 0x55a92a0cb260 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55a92a0cb1d0 'int (String::*)() const'
|   |-RecordType 0x55a92a0caf10 'String'
|   | `-CXXRecord 0x55a92a0cae80 'String'
|   `-ParenType 0x55a92a0cb170 'int () const' sugar
|     `-FunctionProtoType 0x55a92a09fd10 'int () const' const cdecl
|       `-BuiltinType 0x55a929d9e580 'int'
|-TypedefDecl 0x55a92a0cb2c8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55a929ef46d0 'int64_t' sugar
|   |-Typedef 0x55a929e07390 'int64_t'
|   `-TypedefType 0x55a929de0630 '__int64_t' sugar
|     |-Typedef 0x55a929de0208 '__int64_t'
|     `-BuiltinType 0x55a929d9e5a0 'long'
|-TypedefDecl 0x55a92a0cb330 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55a929ef45f0 'uint64_t' sugar
|   |-Typedef 0x55a929e07530 'uint64_t'
|   `-TypedefType 0x55a929de06c0 '__uint64_t' sugar
|     |-Typedef 0x55a929de0278 '__uint64_t'
|     `-BuiltinType 0x55a929d9e640 'unsigned long'
|-TypedefDecl 0x55a92a0cb3c0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55a92a0cb390 'String::intmax_t' sugar
|   |-Typedef 0x55a92a0cb2c8 'intmax_t'
|   `-TypedefType 0x55a929ef46d0 'int64_t' sugar
|     |-Typedef 0x55a929e07390 'int64_t'
|     `-TypedefType 0x55a929de0630 '__int64_t' sugar
|       |-Typedef 0x55a929de0208 '__int64_t'
|       `-BuiltinType 0x55a929d9e5a0 'long'
|-TypedefDecl 0x55a92a0cb450 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55a92a0cb420 'String::uintmax_t' sugar
|   |-Typedef 0x55a92a0cb330 'uintmax_t'
|   `-TypedefType 0x55a929ef45f0 'uint64_t' sugar
|     |-Typedef 0x55a929e07530 'uint64_t'
|     `-TypedefType 0x55a929de06c0 '__uint64_t' sugar
|       |-Typedef 0x55a929de0278 '__uint64_t'
|       `-BuiltinType 0x55a929d9e640 'unsigned long'
|-CXXConstructorDecl 0x55a92a0cb510 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55a92a0cb6b8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55a92a0cb5f8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55a92a0cb868 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55a92a0cb7a8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55a92a0cb9c0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55a92a0cb930 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55a92a0cbbd8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55a92a0cba88 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55a92a0cbb08 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55a92a0cbdf8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55a92a0cbca8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55a92a0cbd28 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55a92a0cc018 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55a92a0cbec8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55a92a0cbf48 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55a92a0cc238 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55a92a0cc0e8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55a92a0cc168 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55a92a0cc3c8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55a92a0cc300 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55a92a0cc548 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55a92a0cc488 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55a92a0cc6d8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55a92a0cc610 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55a92a0cc830 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55a92a0cc7a0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55a92a0cc988 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55a92a0cc8f8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55a92a0ccae0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55a92a0cca50 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55a92a0ccc68 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55a92a0ccba8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55a92a0ccdf8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55a92a0ccd30 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55a92a0ccf88 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55a92a0ccec0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55a92a0cd118 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55a92a0cd050 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55a92a0cd210 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55a92a0cd338 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55a92a0cd4b8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55a92a0cd3f0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55a92a0cd608 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55a92a0cd578 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55a92a0cd6c0 <col:63> "" ""
|-CXXMethodDecl 0x55a92a0cd808 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55a92a0cd748 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55a92a0cda18 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55a92a0cd8c8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55a92a0cd948 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55a92a0cdc38 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55a92a0cdae0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55a92a0cdb60 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55a92a0cdf18 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55a92a0cdcf8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55a92a0cdd78 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55a92a0d9d60 <col:55> 'int' 10
| `-ParmVarDecl 0x55a92a0cddf0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55a92a0d9d80 <col:76> 'bool' true
|-CXXMethodDecl 0x55a92a0ce1f8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55a92a0cdfe0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55a92a0ce060 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55a92a0d9d90 <col:56> 'int' 10
| `-ParmVarDecl 0x55a92a0ce0d8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55a92a0d9db0 <col:77> 'bool' true
|-CXXMethodDecl 0x55a92a0ce300 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55a92a0ce3c8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55a92a0ce490 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55a92a0ce530 <col:20>
| `-OptimizeNoneAttr 0x55a92a0ce588 <col:30>
|-CXXConversionDecl 0x55a92a0ce678 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55a92a0ce748 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55a92a0ce808 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55a92a0ce8f8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55a92a0ce9b8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55a92a0ceb38 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55a92a0cea70 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55a92a0cec88 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55a92a0cebf8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55a92a0ced78 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55a92a0cee38 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55a92a0cf088 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55a92a0ceef0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55a92a0cef70 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55a92a0cf2e8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55a92a0cf150 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55a92a0cf1d0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55a92a0cf3b8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55a92a0cf5c8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55a92a0cf470 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55a92a0cf4f0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55a92a0cf7e8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55a92a0cf690 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55a92a0cf710 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55a92a0cf978 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55a92a0cf8b0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55a92a0cfa68 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55a92a0cfbd8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55a92a0cfb18 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55a92a0cfde8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55a92a0cfc98 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55a92a0cfd18 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55a92a0d0000 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55a92a0cfea8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55a92a0cff20 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55a92a0d0190 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55a92a0d00c0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55a92a0d03b0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55a92a0d0250 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55a92a0d02d0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55a92a0d0500 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55a92a0d0470 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55a92a0d06d8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55a92a0d05c0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55a92a0d0640 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55a92a0d0828 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55a92a0d0798 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55a92a0d0a40 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55a92a0d08e0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55a92a0d0960 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55a92a0d9dc0 <col:39> 'int' 0
|-CXXMethodDecl 0x55a92a0d0c60 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55a92a0d0b00 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55a92a0d0b80 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55a92a0d9de0 <col:48> 'int' 0
|-CXXMethodDecl 0x55a92a0d0e40 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55a92a0d0d20 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55a92a0d0da0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55a92a0d9e00 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55a92a0d0f10 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55a92a0d0fd0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55a92a0d1090 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55a92a0d1150 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55a92a0d1210 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55a92a0d13b8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55a92a0d12c0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55a92a0d1538 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55a92a0d1470 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55a92a0d1710 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55a92a0d15f8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55a92a0d1888 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55a92a0d17c8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55a92a0d19d0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55a92a0d1940 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55a92a0d1b20 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55a92a0d1a90 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55a92a0d1cf8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55a92a0d1be0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55a92a0d1c60 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55a92a0d1ed8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55a92a0d1dc0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55a92a0d1e40 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55a92a0d2028 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55a92a0d1f98 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55a92a0d2238 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55a92a0d20e8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55a92a0d2168 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55a92a0d2398 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55a92a0d2300 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55a92a0d24f0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55a92a0d2458 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55a92a0d2598 <col:57> "" ""
|-CXXMethodDecl 0x55a92a0d26a8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55a92a0d2618 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55a92a0d27f8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55a92a0d2768 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55a92a0d2978 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55a92a0d28b0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55a92a0d2a40 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55a92a0d2b00 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55a92a0d2bc0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55a92a0d2c60 <col:49> "" ""
|-CXXMethodDecl 0x55a92a0d2cf0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55a92a0d2db0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55a92a0d2ea0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55a92a0d2f68 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55a92a0d3028 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55a92a0d30e8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55a92a0d31e0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55a92a0d32a8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55a92a0d3370 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55a92a0d3548 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55a92a0d3428 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55a92a0d34a8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55a92a0d3770 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55a92a0d3610 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55a92a0d3690 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55a92a0d3880 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55a92a0d38e8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55a92a0d3910 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55a92a0d3a28 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55a92a0d3ac8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55a92a0d3b28 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55a92a0d3b88 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55a92a0d3c38 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55a92a0d3ca0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55a92a0d3ed8 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55a92a0d3f28 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a92a0d3eb8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55a92a0d3dc8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55a92a0d3d70 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55a92a0d3db0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55a92a0d3d90 <col:32> 'int' 8
|-CXXRecordDecl 0x55a92a0d3f40 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55a92a0d4058 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55a92a0d4100 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55a92a0d4168 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55a92a0d41f8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55a92a0da290 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55a92a0da6c8 <col:12>
| |-CXXConstructorDecl 0x55a92a0da398 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55a92a0da4a8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55a92a0d4100 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55a92a0dcc50 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55a92a0dcc20 <col:12> 'const char *const' lvalue .data 0x55a92a0d4100
| | |     `-DeclRefExpr 0x55a92a0dcc00 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a92a0da4a8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55a92a0d4168 'length' 'int'
| | | `-ImplicitCastExpr 0x55a92a0dcce0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55a92a0dccb0 <col:12> 'const int' lvalue .length 0x55a92a0d4168
| | |     `-DeclRefExpr 0x55a92a0dcc90 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a92a0da4a8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55a92a0d41f8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55a92a0dcd70 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55a92a0dcd40 <col:12> 'String::memo_t *const' lvalue .memo 0x55a92a0d41f8
| | |     `-DeclRefExpr 0x55a92a0dcd20 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a92a0da4a8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55a92a0dcdc8 <col:12>
| |-CXXConstructorDecl 0x55a92a0da548 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55a92a0da548
| | `-ParmVarDecl 0x55a92a0da658 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55a92a0dfbb0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55a92a0eb5c8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55a92a0eb6d8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55a92a0ebbf0 <col:12>
| |   |-BinaryOperator 0x55a92a0eba08 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55a92a0eb9c0 <col:12> 'const char *' lvalue ->data 0x55a92a0d4100
| |   | | `-CXXThisExpr 0x55a92a0eb9b0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55a92a0eb9f0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55a92a0eb980 <col:12> 'const char *const' lvalue .data 0x55a92a0d4100
| |   |     `-DeclRefExpr 0x55a92a0eb960 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a92a0eb6d8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55a92a0ebad0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55a92a0eba88 <col:12> 'int' lvalue ->length 0x55a92a0d4168
| |   | | `-CXXThisExpr 0x55a92a0eba78 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55a92a0ebab8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55a92a0eba48 <col:12> 'const int' lvalue .length 0x55a92a0d4168
| |   |     `-DeclRefExpr 0x55a92a0eba28 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a92a0eb6d8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55a92a0ebb98 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55a92a0ebb50 <col:12> 'String::memo_t *' lvalue ->memo 0x55a92a0d41f8
| |   | | `-CXXThisExpr 0x55a92a0ebb40 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55a92a0ebb80 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55a92a0ebb10 <col:12> 'String::memo_t *const' lvalue .memo 0x55a92a0d41f8
| |   |     `-DeclRefExpr 0x55a92a0ebaf0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a92a0eb6d8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55a92a0ebbe0 <col:12>
| |     `-UnaryOperator 0x55a92a0ebbc8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55a92a0ebbb8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55a92a0eb748 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55a92a0eb748
|   `-ParmVarDecl 0x55a92a0eb858 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55a92a0d4270 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55a92a0d44b8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55a92a0d42d8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55a92a0d4358 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55a92a0d43d0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55a92a0da250 <col:79, line:261:5>
|   |-BinaryOperator 0x55a92a0d9ec8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55a92a0d9e60 <col:2, col:5> 'const char *' lvalue .data 0x55a92a0d4100
|   | | `-MemberExpr 0x55a92a0d9e30 <col:2> 'String::rep_t' lvalue ->_r 0x55a92a0d4270
|   | |   `-CXXThisExpr 0x55a92a0d9e20 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55a92a0d9eb0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a92a0d9e90 <col:12> 'const char *' lvalue ParmVar 0x55a92a0d42d8 'data' 'const char *'
|   |-BinaryOperator 0x55a92a0d9f90 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55a92a0d9f28 <col:2, col:5> 'int' lvalue .length 0x55a92a0d4168
|   | | `-MemberExpr 0x55a92a0d9ef8 <col:2> 'String::rep_t' lvalue ->_r 0x55a92a0d4270
|   | |   `-CXXThisExpr 0x55a92a0d9ee8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55a92a0d9f78 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a92a0d9f58 <col:14> 'int' lvalue ParmVar 0x55a92a0d4358 'length' 'int'
|   `-IfStmt 0x55a92a0da238 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55a92a0da0b0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55a92a0da098 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55a92a0da078 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55a92a0da058 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55a92a0d9ff0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55a92a0d41f8
|     |       | `-MemberExpr 0x55a92a0d9fc0 <col:7> 'String::rep_t' lvalue ->_r 0x55a92a0d4270
|     |       |   `-CXXThisExpr 0x55a92a0d9fb0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55a92a0da040 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55a92a0da020 <col:17> 'String::memo_t *' lvalue ParmVar 0x55a92a0d43d0 'memo' 'String::memo_t *'
|     `-CallExpr 0x55a92a0da210 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55a92a0da1f8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55a92a0da100 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55a92a0c2ee8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55a92a0da168 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55a92a0d3ac8
|         `-ImplicitCastExpr 0x55a92a0da150 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55a92a0da130 <col:27> 'String::memo_t *' lvalue ParmVar 0x55a92a0d43d0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55a92a0d4768 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55a92a0d4588 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55a92a0d4608 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55a92a0d4680 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55a92a0d4270 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55a92a0da6d8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55a92a0da868 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55a92a0da7d0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55a92a0da740 <col:2> '<bound member function type>' ->assign_memo 0x55a92a0d44b8
|     | `-ImplicitCastExpr 0x55a92a0da808 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55a92a0da730 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55a92a0da820 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55a92a0da770 <col:14> 'const char *' lvalue ParmVar 0x55a92a0d4588 'data' 'const char *'
|     |-ImplicitCastExpr 0x55a92a0da838 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55a92a0da790 <col:20> 'int' lvalue ParmVar 0x55a92a0d4608 'length' 'int'
|     `-ImplicitCastExpr 0x55a92a0da850 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55a92a0da7b0 <col:28> 'String::memo_t *' lvalue ParmVar 0x55a92a0d4680 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55a92a0d48f8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55a92a0d4838 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55a92a0daac0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55a92a0daa40 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55a92a0da890 <col:2> '<bound member function type>' ->assign_memo 0x55a92a0d44b8
|     | `-CXXThisExpr 0x55a92a0da880 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55a92a0daa78 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55a92a0da910 <col:14, col:19> 'const char *' lvalue .data 0x55a92a0d4100
|     |   `-MemberExpr 0x55a92a0da8e0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55a92a0d4270
|     |     `-DeclRefExpr 0x55a92a0da8c0 <col:14> 'const String' lvalue ParmVar 0x55a92a0d4838 'x' 'const String &'
|     |-ImplicitCastExpr 0x55a92a0daa90 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55a92a0da990 <col:25, col:30> 'int' lvalue .length 0x55a92a0d4168
|     |   `-MemberExpr 0x55a92a0da960 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55a92a0d4270
|     |     `-DeclRefExpr 0x55a92a0da940 <col:25> 'const String' lvalue ParmVar 0x55a92a0d4838 'x' 'const String &'
|     `-ImplicitCastExpr 0x55a92a0daaa8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55a92a0daa10 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55a92a0d41f8
|         `-MemberExpr 0x55a92a0da9e0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55a92a0d4270
|           `-DeclRefExpr 0x55a92a0da9c0 <col:38> 'const String' lvalue ParmVar 0x55a92a0d4838 'x' 'const String &'
|-CXXMethodDecl 0x55a92a0d49c0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55a92a0db480 <col:31, line:278:5>
|   `-IfStmt 0x55a92a0db468 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55a92a0dab60 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55a92a0dab48 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55a92a0dab18 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55a92a0d41f8
|     |     `-MemberExpr 0x55a92a0daae8 <col:6> 'String::rep_t' lvalue ->_r 0x55a92a0d4270
|     |       `-CXXThisExpr 0x55a92a0daad8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55a92a0db440 <col:15, line:277:2>
|       |-ParenExpr 0x55a92a0db010 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55a92a0dafe0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55a92a0dac70 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55a92a0dac58 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55a92a0dac40 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55a92a0dac00 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55a92a0d3ac8
|       |   |       `-ImplicitCastExpr 0x55a92a0dabe8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55a92a0dabb8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55a92a0d41f8
|       |   |           `-MemberExpr 0x55a92a0dab88 <col:27> 'String::rep_t' lvalue ->_r 0x55a92a0d4270
|       |   |             `-CXXThisExpr 0x55a92a0dab78 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55a92a0dacd0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55a92a0dacb0 <col:54> 'int' 0
|       |   `-CallExpr 0x55a92a0daf40 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55a92a0daf28 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55a92a0daea8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a929e3aee0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55a92a0daf80 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55a92a0dadb8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55a92a0daf98 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55a92a0dade8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55a92a0dafb0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55a92a0dae20 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55a92a0dafc8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55a92a0dae90 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55a92a0dae78 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55a92a0dae40 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55a92a0db360 <line:274:6, line:275:22>
|       | |-CallExpr 0x55a92a0db220 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55a92a0db208 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55a92a0db180 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55a92a0c4330 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55a92a0db150 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55a92a0d3ac8
|       | |   `-ImplicitCastExpr 0x55a92a0db138 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55a92a0db108 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55a92a0d41f8
|       | |       `-MemberExpr 0x55a92a0db0d8 <col:40> 'String::rep_t' lvalue ->_r 0x55a92a0d4270
|       | |         `-CXXThisExpr 0x55a92a0db0c8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55a92a0db320 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55a92a0db308 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55a92a0db248 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55a92a0d91a0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55a92a0db348 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55a92a0db2a8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55a92a0d41f8
|       |       `-MemberExpr 0x55a92a0db278 <col:15> 'String::rep_t' lvalue ->_r 0x55a92a0d4270
|       |         `-CXXThisExpr 0x55a92a0db268 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55a92a0db420 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55a92a0db3b8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55a92a0d41f8
|         | `-MemberExpr 0x55a92a0db388 <col:6> 'String::rep_t' lvalue ->_r 0x55a92a0d4270
|         |   `-CXXThisExpr 0x55a92a0db378 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55a92a0db408 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55a92a0db3e8 <col:16> 'int' 0
|-CXXMethodDecl 0x55a92a0d4c58 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55a92a0d4a78 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55a92a0d4af8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55a92a0d4b70 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55a92a0d4d30 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55a92a0d4f80 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55a92a0d4de8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55a92a0d4e68 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55a92a0d4ee0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55a92a0d5168 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55a92a0d5050 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55a92a0d50d0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55a92a0d5268 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55a92a0db558 <col:41, line:286:5>
|   `-ReturnStmt 0x55a92a0db548 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55a92a0db518 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55a92a0db4e0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55a92a0db4c8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55a92a0db4a8 <col:46> 'int' 1
|-CXXMethodDecl 0x55a92a0d5508 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55a92a0d5320 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55a92a0d53a0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55a92a0d5420 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55a92a0d91a0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55a92a0d55d0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55a92a0d9270 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55a92a0d9440 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55a92a0d9328 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55a92a0d93a8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55a92a0d9500 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55a92a0d95c8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55a92a0d96c8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55a92a0d9740 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55a92a0d97b8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55a92a0d9820 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55a92a0d9920 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55a92a0d9970 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a92a0d9900 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55a92a0d98e0 <col:22> 'int' 14
|-CXXMethodDecl 0x55a92a0d9b88 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55a92a0d99a0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55a92a0d9a20 <col:38> col:41 'int'
| `-ParmVarDecl 0x55a92a0d9aa0 <col:43> col:46 'int'
|-FriendDecl 0x55a92a0d9c90 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55a92a0d9d20 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a92a319468 <../elements/local/printairo.hh:45:1, line:64:1> line:45:7 class PrintAiro definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55a92a3195c8 <col:1, col:7> col:7 implicit referenced class PrintAiro
|-AccessSpecDecl 0x55a92a319658 <col:36, col:42> col:36 public
|-CXXConstructorDecl 0x55a92a3196e0 <line:47:3, col:13> col:3 PrintAiro 'void ()'
|-CXXDestructorDecl 0x55a92a3197d0 <line:48:3, col:14> col:3 ~PrintAiro 'void ()' noexcept-unevaluated 0x55a92a3197d0
| `-Overrides: [ 0x55a92a300d58 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55a92a319900 <line:50:3, col:56> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55a92a3021b8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55a92a31a4a8 <col:34, col:56>
|   `-ReturnStmt 0x55a92a31a498 <col:36, col:43>
|     `-ImplicitCastExpr 0x55a92a31a480 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55a92a31a458 <col:43> 'const char [10]' lvalue "PrintAiro"
|-CXXMethodDecl 0x55a92a3199c8 <line:51:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55a92a302280 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55a92a31a508 <col:34, col:54>
|   `-ReturnStmt 0x55a92a31a4f8 <col:36, col:43>
|     `-ImplicitCastExpr 0x55a92a31a4e0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55a92a31a4c0 <col:43> 'const char []' lvalue Var 0x55a92a302530 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55a92a319ca0 <line:53:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55a92a303a50 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55a92a319b50 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x55a92a319bc8 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x55a92a319d70 <line:54:3, col:52> col:8 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x55a92a3064a0 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x55a92a31a540 <col:37, col:52>
|   `-ReturnStmt 0x55a92a31a530 <col:39, col:46>
|     `-CXXBoolLiteralExpr 0x55a92a31a520 <col:46> 'bool' true
|-CXXMethodDecl 0x55a92a319eb0 <line:56:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55a92a301398 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55a92a319e20 <col:25, col:32> col:33 'Packet *'
|-AccessSpecDecl 0x55a92a319f58 <line:58:2, col:9> col:2 private
|-FieldDecl 0x55a92a319f90 <line:60:3, col:10> col:10 _label 'String'
|-FieldDecl 0x55a92a319ff0 <line:61:3, col:8> col:8 _timestamp 'bool'
|-FieldDecl 0x55a92a31a050 <line:62:3, col:8> col:8 _quiet 'bool'
|-FieldDecl 0x55a92a31a0b0 <line:63:3, col:8> col:8 _verbose 'bool'
|-CXXConstructorDecl 0x55a92a31a128 <line:45:7> col:7 implicit PrintAiro 'void (const PrintAiro &)' inline default_delete noexcept-unevaluated 0x55a92a31a128
| `-ParmVarDecl 0x55a92a31a238 <col:7> col:7 'const PrintAiro &'
`-CXXMethodDecl 0x55a92a31a2d8 <col:7> col:7 implicit operator= 'PrintAiro &(const PrintAiro &)' inline default_delete noexcept-unevaluated 0x55a92a31a2d8
  `-ParmVarDecl 0x55a92a31a3e8 <col:7> col:7 'const PrintAiro &'

Layout: <CGRecordLayout
  LLVMType:%class.PrintAiro = type <{ %class.Element.base, [4 x i8], %class.String, i8, i8, i8, [5 x i8] }>
  NonVirtualBaseLLVMType:%class.PrintAiro.base = type <{ %class.Element.base, [4 x i8], %class.String, i8, i8, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a92a19c850 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55a92a19ca28 prev 0x55a92a19c850 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55a92a19cab8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55a92a19cae0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55a929d9e580 'int'
|-TypedefDecl 0x55a92a19e440 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55a92a19e3f0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55a92a19e3d0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55a92a19ccf8 'type'
|     `-SubstTemplateTypeParmType 0x55a92a19ccc0 'String' sugar
|       |-TemplateTypeParmType 0x55a92a08f730 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a92a08f6e0 'T'
|       `-RecordType 0x55a92a0caf10 'String'
|         `-CXXRecord 0x55a92a0cae80 'String'
|-TypedefDecl 0x55a92a19e4f8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55a92a19e4c0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55a92a19e4a0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55a92a19e440 'type'
|     `-ElaboratedType 0x55a92a19e3f0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55a92a19e3d0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55a92a19ccf8 'type'
|         `-SubstTemplateTypeParmType 0x55a92a19ccc0 'String' sugar
|           |-TemplateTypeParmType 0x55a92a08f730 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55a92a08f6e0 'T'
|           `-RecordType 0x55a92a0caf10 'String'
|             `-CXXRecord 0x55a92a0cae80 'String'
|-CXXMethodDecl 0x55a92a19e678 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55a92a19e588 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55a92a19e768 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55a92a19e848 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55a92a19e848
|-CXXMethodDecl 0x55a92a19eb18 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55a92a19ea20 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55a92a19ed58 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55a92a19ebd0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55a92a19ec48 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a92a19ef28 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55a92a19ee18 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55a92a19ee90 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a92a19f088 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55a92a19f158 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55a92a34b2f8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55a92a19f218 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55a92a19f290 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a92a34b558 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55a92a34b3c8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55a92a34b440 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a92a34b718 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55a92a34b628 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a92a34b8d8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55a92a34b7e0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a92a34b990 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55a92a34ba40 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55a92a34bc78 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55a92a34baf0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55a92a34bb68 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a92a34bf18 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55a92a34be20 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55a92a34bfe0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55a92a34c030 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55a92a34c080 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a92a3036c0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55a92a19b2b8 prev 0x55a92a3036c0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55a92a19c7c0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55a92a19c770 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55a92a19c750 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55a92a19c600 'type'
|     `-SubstTemplateTypeParmType 0x55a92a19c490 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55a92a0654e0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55a92a065488 'F'
|       `-RecordType 0x55a92a19c0f0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55a92a19c010 'typed_array_memory'
|-FieldDecl 0x55a92a34c0d0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55a92a34c120 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55a92a34c158 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55a92a19b350 'String' sugar
|   |-TemplateTypeParmType 0x55a92a09ca50 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55a92a09c9f8 'T'
|   `-RecordType 0x55a92a0caf10 'String'
|     `-CXXRecord 0x55a92a0cae80 'String'
|-TypedefDecl 0x55a92a34c1e8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55a92a34c1b0 'String &'
|   `-SubstTemplateTypeParmType 0x55a92a19b350 'String' sugar
|     |-TemplateTypeParmType 0x55a92a09ca50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55a92a09c9f8 'T'
|     `-RecordType 0x55a92a0caf10 'String'
|       `-CXXRecord 0x55a92a0cae80 'String'
|-TypedefDecl 0x55a92a34c278 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55a92a34c240 'const String &'
|   `-QualType 0x55a92a19b351 'const String' const
|     `-SubstTemplateTypeParmType 0x55a92a19b350 'String' sugar
|       |-TemplateTypeParmType 0x55a92a09ca50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a92a09c9f8 'T'
|       `-RecordType 0x55a92a0caf10 'String'
|         `-CXXRecord 0x55a92a0cae80 'String'
|-TypedefDecl 0x55a92a34c308 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55a92a34c2d0 'String *'
|   `-SubstTemplateTypeParmType 0x55a92a19b350 'String' sugar
|     |-TemplateTypeParmType 0x55a92a09ca50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55a92a09c9f8 'T'
|     `-RecordType 0x55a92a0caf10 'String'
|       `-CXXRecord 0x55a92a0cae80 'String'
|-TypedefDecl 0x55a92a34c398 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55a92a34c360 'const String *'
|   `-QualType 0x55a92a19b351 'const String' const
|     `-SubstTemplateTypeParmType 0x55a92a19b350 'String' sugar
|       |-TemplateTypeParmType 0x55a92a09ca50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a92a09c9f8 'T'
|       `-RecordType 0x55a92a0caf10 'String'
|         `-CXXRecord 0x55a92a0cae80 'String'
|-TypedefDecl 0x55a92a34cff0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55a92a34cfa0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55a92a34cf80 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55a92a34ceb8 'type'
|     `-LValueReferenceType 0x55a92a34ce80 'const String &'
|       `-QualType 0x55a92a34cc21 'const String' const
|         `-SubstTemplateTypeParmType 0x55a92a34cc20 'String' sugar
|           |-TemplateTypeParmType 0x55a92a06f430 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55a92a06f3d8 'T'
|           `-RecordType 0x55a92a0caf10 'String'
|             `-CXXRecord 0x55a92a0cae80 'String'
|-TypedefDecl 0x55a92a34d058 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55a92a34c240 'const String &'
|   `-QualType 0x55a92a19b351 'const String' const
|     `-SubstTemplateTypeParmType 0x55a92a19b350 'String' sugar
|       |-TemplateTypeParmType 0x55a92a09ca50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a92a09c9f8 'T'
|       `-RecordType 0x55a92a0caf10 'String'
|         `-CXXRecord 0x55a92a0cae80 'String'
|-TypedefDecl 0x55a92a34d0b0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55a929d9e580 'int'
|-TypedefDecl 0x55a92a34d118 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55a92a34c2d0 'String *'
|   `-SubstTemplateTypeParmType 0x55a92a19b350 'String' sugar
|     |-TemplateTypeParmType 0x55a92a09ca50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55a92a09c9f8 'T'
|     `-RecordType 0x55a92a0caf10 'String'
|       `-CXXRecord 0x55a92a0cae80 'String'
|-TypedefDecl 0x55a92a34d180 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55a92a34c360 'const String *'
|   `-QualType 0x55a92a19b351 'const String' const
|     `-SubstTemplateTypeParmType 0x55a92a19b350 'String' sugar
|       |-TemplateTypeParmType 0x55a92a09ca50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a92a09c9f8 'T'
|       `-RecordType 0x55a92a0caf10 'String'
|         `-CXXRecord 0x55a92a0cae80 'String'
|-EnumDecl 0x55a92a34d1d8 <line:134:5> col:5
| `-EnumConstantDecl 0x55a92a34d2d0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55a92a34d2b0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55a92a09e0d8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55a92a09e0b0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55a92a09e090 <col:40> 'int' 1
|-CXXConstructorDecl 0x55a92a34d358 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55a92a34d5e8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55a92a34d410 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55a92a34d4b0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55a92a34d878 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55a92a34d760 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55a92a34db38 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55a92a34da20 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55a92a34de50 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55a92a34dd30 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55a92a34e160 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55a92a34e040 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55a92a34e450 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55a92a34e298 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55a92a34e310 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55a92a34e578 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55a92a34e628 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a92a34e680 <col:30> Inherited
|-CXXMethodDecl 0x55a92a34e6c8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55a92a34e778 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a92a34e7d0 <col:30> Inherited
|-CXXMethodDecl 0x55a92a34e898 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55a92a34e948 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a92a34e9a0 <col:30> Inherited
|-CXXMethodDecl 0x55a92a34e9e8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55a92a34ea98 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a92a34eaf0 <col:30> Inherited
|-CXXMethodDecl 0x55a92a34eb38 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55a92a34ebe8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a92a34ec40 <col:30> Inherited
|-CXXMethodDecl 0x55a92a34ec88 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55a92a34ed38 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a92a34ed90 <col:30> Inherited
|-CXXMethodDecl 0x55a92a34edb8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55a92a34ee68 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55a92a34ef18 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55a92a34f0d8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55a92a34efc8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55a92a34f040 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55a92a34f228 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55a92a34f198 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a92a34f3d8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55a92a34f2e0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55a92a34f490 <col:20>
| `-OptimizeNoneAttr 0x55a92a34f4e8 <col:30>
|-CXXMethodDecl 0x55a92a34f608 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55a92a34f510 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55a92a34f6c0 <col:20>
| `-OptimizeNoneAttr 0x55a92a34f718 <col:30>
|-CXXMethodDecl 0x55a92a34f7d0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55a92a34f740 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a92a34f918 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55a92a34f888 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a92a34fa48 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55a92a34fb48 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55a92a34fc18 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55a92a34fce8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55a92a34fe28 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55a92a34fd98 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a92a34ff70 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55a92a34fee0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a92a3500b8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55a92a350028 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55a92a350170 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55a92a350270 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55a92a3501e0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55a92a350328 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55a92a3503e8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55a92a3504e8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55a92a350668 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55a92a3505a8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55a92a350e28 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55a92a350720 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55a92a350d88 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55a92a350c88 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55a92a350f08 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55a92a351058 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55a92a350fc8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55a92a351110 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55a92a351358 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55a92a3511d0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55a92a351248 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55a92a3514e8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55a92a351428 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55a92a3516f8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55a92a3515b0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55a92a351628 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55a92a3517b8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55a92a351a18 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55a92a351920 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55a92a351ae8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55a92a351ae8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a92a3d0328 prev 0x55a92a280ff8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55a92a3d0420 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55a92a3d04b0 <col:22, col:28> col:22 public
|-EnumDecl 0x55a92a3d04d8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55a92a3d05f8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a92a3d05d8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55a92a3d05c0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55a92a3d05a0 <col:14> 'int' 999
| |-EnumConstantDecl 0x55a92a3d06a0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a92a3d0680 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55a92a3d0668 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55a92a3d0648 <col:14> 'int' 1
| |-EnumConstantDecl 0x55a92a3d0730 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a92a3d0710 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55a92a3d06f0 <col:17> 'int' 0
| |-EnumConstantDecl 0x55a92a3d07c0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a92a3d07a0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55a92a3d0780 <col:13> 'int' 1
| |-EnumConstantDecl 0x55a92a3d0850 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a92a3d0830 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55a92a3d0810 <col:16> 'int' 2
| |-EnumConstantDecl 0x55a92a3d08e0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a92a3d08c0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55a92a3d08a0 <col:13> 'int' 3
| |-EnumConstantDecl 0x55a92a3d0970 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a92a3d0950 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55a92a3d0930 <col:15> 'int' 4
| |-EnumConstantDecl 0x55a92a3d0a00 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a92a3d09e0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55a92a3d09c0 <col:14> 'int' 5
| |-EnumConstantDecl 0x55a92a3d0a90 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a92a3d0a70 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55a92a3d0a50 <col:12> 'int' 6
| `-EnumConstantDecl 0x55a92a3d0b20 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55a92a3d0b00 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55a92a3d0ae0 <col:13> 'int' 7
|-VarDecl 0x55a92a3d0b90 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55a92a3d0c18 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55a92a3d0ca0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55a92a3d0d28 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55a92a3d0db0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55a92a3d0e38 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55a92a3d0ec0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55a92a3d0f48 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55a92a3d0fd0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55a92a3d1058 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55a92a3d10e0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55a92a3d11e0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55a92a3d64e8 '_nerrors' 'int'
| | `-IntegerLiteral 0x55a92a3d6c78 <line:128:13> 'int' 0
| `-CompoundStmt 0x55a92a3d6ce8 <col:16, line:129:5>
|-CXXDestructorDecl 0x55a92a3d12d0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55a92a3d6cf8 <col:29, line:132:5>
|-CXXMethodDecl 0x55a92a3d1488 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55a92a3d13c0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55a92a3d1550 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55a92a3d1638 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55a92a3d6d50 <col:44, line:161:5>
|   `-ReturnStmt 0x55a92a3d6d40 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55a92a3d6d28 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55a92a3d6d08 <col:9> 'ErrorHandler *' lvalue Var 0x55a92a3d6548 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55a92a3d1778 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55a92a3d16e8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55a92a3d1840 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55a92a3d6db0 <col:43, line:173:5>
|   `-ReturnStmt 0x55a92a3d6da0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55a92a3d6d88 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55a92a3d6d68 <col:9> 'ErrorHandler *' lvalue Var 0x55a92a3d65c0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55a92a3d18f8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55a92a3d1978 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55a92a3d1a88 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55a92a3d19f8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55a92a3d1bd8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55a92a3d1b48 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55a92a3d1d30 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55a92a3d1c98 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55a92a3d1e88 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55a92a3d1df0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55a92a3d1fe0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55a92a3d1f48 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55a92a3d21f0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55a92a3d2098 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55a92a3d2118 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55a92a3d23c8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55a92a3d22b0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55a92a3d2330 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55a92a3d25e8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55a92a3d2488 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55a92a3d2508 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55a92a3d27c8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55a92a3d26a8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55a92a3d2728 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55a92a3d29a8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55a92a3d2888 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55a92a3d2908 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55a92a3d2b30 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55a92a3d2a68 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55a92a3d2d00 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55a92a3d2be8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55a92a3d2c60 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55a92a3d7008 <col:57, line:234:5>
|   `-ReturnStmt 0x55a92a3d6ff8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55a92a3d6fe0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55a92a3d6f88 <col:9, col:41> 'int'
|         |-MemberExpr 0x55a92a3d6f58 <col:9> '<bound member function type>' ->xmessage 0x55a92a3d2b30
|         | `-CXXThisExpr 0x55a92a3d6f48 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55a92a3d6fc8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55a92a3d6fb0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55a92a3d6f28 <col:18, col:40> 'String' (CXXTemporary 0x55a92a3d6f28)
|               `-CallExpr 0x55a92a3d6ef0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55a92a3d6ed8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55a92a3d6e50 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55a92a3d4cf8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55a92a3d6e70 <col:31> 'const String' lvalue ParmVar 0x55a92a3d2c60 'str' 'const String &'
|                 `-DeclRefExpr 0x55a92a3d6e90 <col:36> 'const String' lvalue ParmVar 0x55a92a3d2be8 'anno' 'const String &'
|-CXXMethodDecl 0x55a92a3d2fe0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55a92a3d2dc0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55a92a3d2e40 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55a92a3d2eb8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55a92a3d7298 <col:68, line:243:5>
|   `-ReturnStmt 0x55a92a3d7288 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55a92a3d7270 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55a92a3d7210 <col:9, col:41> 'int'
|         |-MemberExpr 0x55a92a3d71e0 <col:9> '<bound member function type>' ->xmessage 0x55a92a3d2d00
|         | `-CXXThisExpr 0x55a92a3d71d0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55a92a3d70a8 <col:18> 'const String' lvalue ParmVar 0x55a92a3d2dc0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55a92a3d7258 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55a92a3d7240 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55a92a3d71b0 <col:24, col:40> 'String' (CXXTemporary 0x55a92a3d71b0)
|               `-CXXMemberCallExpr 0x55a92a3d7148 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55a92a3d70d8 <col:24> '<bound member function type>' ->vformat 0x55a92a3d41c0
|                 | `-CXXThisExpr 0x55a92a3d70c8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55a92a3d7178 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55a92a3d7108 <col:32> 'const char *' lvalue ParmVar 0x55a92a3d2e40 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55a92a3d7190 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55a92a3d7128 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55a92a3d2eb8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55a92a3d3280 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55a92a3d30a8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55a92a3d3120 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55a92a3d3198 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55a92a3d75d8 <col:23, line:254:5>
|   `-ReturnStmt 0x55a92a3d75c8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55a92a3d75b0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55a92a3d7550 <col:9, col:71> 'int'
|         |-MemberExpr 0x55a92a3d7520 <col:9> '<bound member function type>' ->xmessage 0x55a92a3d2d00
|         | `-CXXThisExpr 0x55a92a3d7510 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55a92a3d7598 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55a92a3d7580 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55a92a3d74d0 <col:18, col:65> 'String' (CXXTemporary 0x55a92a3d74d0)
|         |     `-CallExpr 0x55a92a3d7468 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55a92a3d7450 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55a92a3d7338 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55a92a3d4cf8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55a92a3d7358 <col:31> 'const String' lvalue ParmVar 0x55a92a3d3120 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55a92a3d74b0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55a92a3d7498 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55a92a3d7430 <col:37, col:64> 'String' (CXXTemporary 0x55a92a3d7430)
|         |             `-CallExpr 0x55a92a3d7400 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55a92a3d73e8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55a92a3d7378 <col:37> 'String (const String &)' lvalue CXXMethod 0x55a92a3d5348 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55a92a3d7398 <col:56> 'const String' lvalue ParmVar 0x55a92a3d30a8 'landmark' 'const String &'
|         `-DeclRefExpr 0x55a92a3d74f0 <col:68> 'const String' lvalue ParmVar 0x55a92a3d3198 'str' 'const String &'
|-CXXMethodDecl 0x55a92a3d3600 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55a92a3d3348 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55a92a3d33c0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55a92a3d3440 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55a92a3d34b8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55a92a3d7890 <col:34, line:267:5>
|   `-ReturnStmt 0x55a92a3d7880 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55a92a3d7868 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55a92a3d7800 <col:9, col:51> 'int'
|         |-MemberExpr 0x55a92a3d77d0 <col:9> '<bound member function type>' ->xmessage 0x55a92a3d3280
|         | `-CXXThisExpr 0x55a92a3d77c0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55a92a3d7678 <col:18> 'const String' lvalue ParmVar 0x55a92a3d3348 'landmark' 'const String &'
|         |-DeclRefExpr 0x55a92a3d7698 <col:28> 'const String' lvalue ParmVar 0x55a92a3d33c0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55a92a3d7850 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55a92a3d7838 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55a92a3d77a0 <col:34, col:50> 'String' (CXXTemporary 0x55a92a3d77a0)
|               `-CXXMemberCallExpr 0x55a92a3d7738 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55a92a3d76c8 <col:34> '<bound member function type>' ->vformat 0x55a92a3d41c0
|                 | `-CXXThisExpr 0x55a92a3d76b8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55a92a3d7768 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55a92a3d76f8 <col:42> 'const char *' lvalue ParmVar 0x55a92a3d3440 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55a92a3d7780 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55a92a3d7718 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55a92a3d34b8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55a92a3d3710 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55a92a3d7910 <col:25, line:288:5>
|   `-ReturnStmt 0x55a92a3d7900 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55a92a3d78e8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55a92a3d78b8 <col:9> 'const int' lvalue ->_nerrors 0x55a92a3d64e8
|         `-CXXThisExpr 0x55a92a3d78a8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55a92a3d3920 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55a92a3d37c8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55a92a3d3848 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55a92a3d3c08 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55a92a3d39e8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55a92a3d3a68 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55a92a3d3ae0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55a92a3d3da0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55a92a3d3cd8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55a92a3d3fe8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55a92a3d3e60 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55a92a3d3ed8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55a92a3d7b70 <col:58, line:357:5>
|   `-ReturnStmt 0x55a92a3d7b60 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55a92a3d7b48 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55a92a3d7b18 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55a92a3d7b00 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55a92a3d7ae0 <col:9, col:29> 'String' (CXXTemporary 0x55a92a3d7ae0)
|             `-CallExpr 0x55a92a3d7a70 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55a92a3d7a58 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55a92a3d79d8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55a92a3d3c08 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55a92a3d7978 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55a92a3d7aa8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55a92a3d7998 <col:21> 'const char *' lvalue ParmVar 0x55a92a3d3e60 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55a92a3d7ac0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55a92a3d79b8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55a92a3d3ed8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55a92a3d41c0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55a92a3d40b0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55a92a3d4128 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55a92a3d4318 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55a92a3d4288 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55a92a3d4460 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55a92a3d43d0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55a92a3d4700 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55a92a3d4518 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55a92a3d4598 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55a92a3d4610 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55a92a3d4860 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55a92a3d47d0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55a92a3d7c88 <col:37, line:441:5>
|   `-IfStmt 0x55a92a3d7c70 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55a92a3d7bf8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55a92a3d7bc8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55a92a3d7b88 <col:6> 'int' lvalue ParmVar 0x55a92a3d47d0 'level' 'int'
|     | `-ImplicitCastExpr 0x55a92a3d7be0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55a92a3d7ba8 <col:15> 'ErrorHandler::Level' EnumConstant 0x55a92a3d08e0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55a92a3d7c58 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55a92a3d7c28 <col:8> 'int' lvalue ->_nerrors 0x55a92a3d64e8
|         `-CXXThisExpr 0x55a92a3d7c18 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55a92a3d4928 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55a92a3d7d20 <col:26, line:448:5>
|   `-BinaryOperator 0x55a92a3d7d00 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55a92a3d7cb0 <col:2> 'int' lvalue ->_nerrors 0x55a92a3d64e8
|     | `-CXXThisExpr 0x55a92a3d7ca0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55a92a3d7ce0 <col:13> 'int' 0
|-CXXMethodDecl 0x55a92a3d4af0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55a92a3d49e0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55a92a3d4a58 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55a92a3d4cf8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55a92a3d4bb0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55a92a3d4c28 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55a92a3d4fa8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55a92a3d4db8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55a92a3d4e38 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55a92a3d4eb8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55a92a3d5060 <col:59> 0 0
|-CXXMethodDecl 0x55a92a3d51f8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55a92a3d50d8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55a92a3d5158 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55a92a3d8390 <col:70, line:534:5>
|   |-DeclStmt 0x55a92a3d7e90 <line:528:2, col:20>
|   | |-VarDecl 0x55a92a3d7d48 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55a92a3d7db0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55a92a3d7de8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55a92a3d7e50 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55a92a3d7f60 <line:529:2, col:23>
|   | `-VarDecl 0x55a92a3d7ec0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55a92a3d7f48 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55a92a3d7f28 <col:18> 'const char *' lvalue ParmVar 0x55a92a3d50d8 'begin' 'const char *'
|   |-DoStmt 0x55a92a3d8328 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55a92a3d8258 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55a92a3d8240 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55a92a3d8220 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55a92a3d7f78 <col:6> 'const char *' lvalue Var 0x55a92a3d7ec0 'x' 'const char *'
|   | |     `-CallExpr 0x55a92a3d8170 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55a92a3d8158 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55a92a3d8110 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55a92a3d69c0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55a92a3d81d8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55a92a3d81c0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55a92a3d8030 <col:20, col:27> 'String' (CXXTemporary 0x55a92a3d8030)
|   | |       |     `-CXXTemporaryObjectExpr 0x55a92a3d7ff8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55a92a3d81f0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55a92a3d8050 <col:30> 'const char *' lvalue Var 0x55a92a3d7ec0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55a92a3d8208 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55a92a3d8070 <col:33> 'const char *' lvalue ParmVar 0x55a92a3d5158 'end' 'const char *'
|   | |       |-UnaryOperator 0x55a92a3d80b0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55a92a3d8090 <col:39> 'String' lvalue Var 0x55a92a3d7d48 'name' 'String'
|   | |       |-UnaryOperator 0x55a92a3d80e8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55a92a3d80c8 <col:46> 'String' lvalue Var 0x55a92a3d7de8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55a92a3d8100 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55a92a3d8310 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55a92a3d82f8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55a92a3d82d8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55a92a3d82a8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55a92a0ce678
|   |         `-ImplicitCastExpr 0x55a92a3d8290 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55a92a3d8270 <col:11> 'String' lvalue Var 0x55a92a3d7d48 'name' 'String'
|   `-ReturnStmt 0x55a92a3d8380 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55a92a3d8368 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55a92a3d8348 <col:9> 'const char *' lvalue Var 0x55a92a3d7ec0 'x' 'const char *'
|-CXXMethodDecl 0x55a92a3d5348 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55a92a3d52b8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55a92a3d8998 <col:55, line:550:5>
|   `-IfStmt 0x55a92a3d8970 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55a92a3d85d0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55a92a3d85b8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55a92a3d85a0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55a92a3d8580 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55a92a3d8550 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55a92a0ce678
|     | |       `-DeclRefExpr 0x55a92a3d83f0 <col:6> 'const String' lvalue ParmVar 0x55a92a3d52b8 'x' 'const String &'
|     | `-BinaryOperator 0x55a92a3d8530 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55a92a3d8500 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55a92a3d84b0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55a92a3d8498 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55a92a3d8450 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55a92a0e7eb0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55a92a3d8410 <col:11> 'const String' lvalue ParmVar 0x55a92a3d52b8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55a92a3d8430 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55a92a3d8518 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55a92a3d84e8 <col:19> 'char' 123
|     |-ReturnStmt 0x55a92a3d8640 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55a92a3d8610 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55a92a3d85f0 <col:13> 'const String' lvalue ParmVar 0x55a92a3d52b8 'x' 'const String &'
|     `-IfStmt 0x55a92a3d8948 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55a92a3d86d8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55a92a3d86c0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55a92a3d86a0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55a92a3d8670 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55a92a0ce678
|       |       `-DeclRefExpr 0x55a92a3d8650 <col:11> 'const String' lvalue ParmVar 0x55a92a3d52b8 'x' 'const String &'
|       |-ReturnStmt 0x55a92a3d8860 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55a92a3d8848 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55a92a3d8818 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55a92a3d8800 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55a92a3d87e0 <col:13, col:29> 'String' (CXXTemporary 0x55a92a3d87e0)
|       |         `-CallExpr 0x55a92a3d8790 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55a92a3d8778 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55a92a3d86f0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55a92a3d4af0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55a92a3d87c0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55a92a3d8710 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55a92a3d8730 <col:28> 'const String' lvalue ParmVar 0x55a92a3d52b8 'x' 'const String &'
|       `-ReturnStmt 0x55a92a3d8938 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55a92a3d8920 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55a92a3d88f0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55a92a3d88d8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55a92a3d88b8 <col:13, col:20> 'String' (CXXTemporary 0x55a92a3d88b8)
|                 `-CXXTemporaryObjectExpr 0x55a92a3d8880 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55a92a3d5510 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55a92a3d5400 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55a92a3d5478 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55a92a3d6c68 <col:71> 'bool' false
|-CXXRecordDecl 0x55a92a3d55c0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55a92a3d58b8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55a92a3d5850 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55a92a3d57f0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55a92a3d57b0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55a92a0caf10 'String'
|       | `-CXXRecord 0x55a92a0cae80 'String'
|       |-BuiltinType 0x55a929d9e580 'int'
|       `-DecayedType 0x55a92a282040 '__va_list_tag *' sugar
|         |-TypedefType 0x55a92a282010 'va_list' sugar
|         | |-Typedef 0x55a929fbcfd0 'va_list'
|         | `-TypedefType 0x55a929fbcf80 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55a929ef4988 '__gnuc_va_list'
|         |   `-TypedefType 0x55a929ef48f0 '__builtin_va_list' sugar
|         |     |-Typedef 0x55a929ddfd38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55a929ddfce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55a929d9f2d0 '__va_list_tag'
|         |         `-CXXRecord 0x55a929d9f238 '__va_list_tag'
|         `-PointerType 0x55a929fc2870 '__va_list_tag *'
|           `-RecordType 0x55a929d9f2d0 '__va_list_tag'
|             `-CXXRecord 0x55a929d9f238 '__va_list_tag'
|-EnumDecl 0x55a92a3d5910 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55a92a3d5a10 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a92a3d5f90 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a3d59f0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55a92a3d59d0 <col:16> 'int' 1
| |-EnumConstantDecl 0x55a92a3d5aa0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a92a3d5fa8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a3d5a80 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55a92a3d5a60 <col:21> 'int' 2
| |-EnumConstantDecl 0x55a92a3d5b30 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a92a3d5fc0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a3d5b10 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55a92a3d5af0 <col:22> 'int' 4
| |-EnumConstantDecl 0x55a92a3d5bc0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a92a3d5fd8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a3d5ba0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55a92a3d5b80 <col:17> 'int' 8
| |-EnumConstantDecl 0x55a92a3d5c50 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a92a3d5ff0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a3d5c30 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55a92a3d5c10 <col:22> 'int' 16
| |-EnumConstantDecl 0x55a92a3d5ce0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a92a3d6008 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a3d5cc0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55a92a3d5ca0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55a92a3d5d70 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a92a3d6020 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a3d5d50 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55a92a3d5d30 <col:17> 'int' 64
| |-EnumConstantDecl 0x55a92a3d5e20 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a92a3d6038 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a3d5de0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55a92a3d5dc0 <col:14> 'int' 128
| |-EnumConstantDecl 0x55a92a3d5eb0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a92a3d6050 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a3d5e90 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55a92a3d5e70 <col:16> 'int' 256
| `-EnumConstantDecl 0x55a92a3d5f40 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55a92a3d6068 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a92a3d5f20 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55a92a3d5f00 <col:12> 'int' 1024
|-CXXMethodDecl 0x55a92a3d6278 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55a92a3d6090 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55a92a3d6130 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55a92a3d6400 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55a92a3d6338 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55a92a3d64a8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55a92a3d64e8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55a92a3d6548 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55a92a3d65c0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55a92a3d69c0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55a92a3d6638 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55a92a3d66b8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55a92a3d6738 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55a92a3d67b0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55a92a3d6828 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55a92a3d68a0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55a92a3d6ae8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55a92a3d6ae8
| `-ParmVarDecl 0x55a92a3d6bf8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55a92a3d8cf8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55a92a3d8cf8
  `-ParmVarDecl 0x55a92a3d8e08 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a92a281088 prev 0x55a92a2c6168 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a92a281180 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55a92a281210 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55a92a281348 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55a92a281248 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55a92a282770 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55a92a282750 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55a92a2822e8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55a92a282800 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55a92a2827c0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55a92a281248 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55a92a282350 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55a92a282880 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55a92a282840 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55a92a2823b0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55a92a2828c0 <col:54> 'bool' false
| `-CompoundStmt 0x55a92a2829c8 <col:61, line:38:5>
|   `-BinaryOperator 0x55a92a2829a8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55a92a282940 <col:9> 'const Element *' lvalue ->_context 0x55a92a282288
|     | `-CXXThisExpr 0x55a92a282930 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55a92a282990 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55a92a282970 <col:20> 'int' 0
|-CXXConstructorDecl 0x55a92a281558 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55a92a281408 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55a92a281480 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55a92a2827a8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55a92a282788 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55a92a282288 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55a92a282a20 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55a92a2829e0 <col:20> 'const Element *' lvalue ParmVar 0x55a92a281408 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55a92a2822e8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55a92a282aa0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55a92a282a60 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55a92a281480 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55a92a282350 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55a92a282b20 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55a92a282ae0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55a92a2823b0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55a92a282b60 <col:73> 'bool' false
| `-CompoundStmt 0x55a92a282bd8 <col:80, line:46:5>
|-CXXMethodDecl 0x55a92a281688 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55a92a282c50 <col:36, line:51:5>
|   `-ReturnStmt 0x55a92a282c40 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55a92a282c28 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55a92a282bf8 <col:16> 'const Element *const' lvalue ->_context 0x55a92a282288
|         `-CXXThisExpr 0x55a92a282be8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55a92a281778 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55a92a282cd0 <col:32, line:57:5>
|   `-ReturnStmt 0x55a92a282cc0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55a92a282ca8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55a92a282c78 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55a92a2822e8
|         `-CXXThisExpr 0x55a92a282c68 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55a92a281838 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55a92a2819c0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55a92a2818f0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55a92a281b10 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55a92a281a80 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55a92a281c60 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55a92a281bd0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55a92a281e68 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55a92a281d18 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55a92a281d90 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55a92a282198 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55a92a281f28 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55a92a281fa8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55a92a282070 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55a92a282250 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55a92a282288 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55a92a2822e8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55a92a282350 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55a92a2823b0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55a92a282400 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55a92a282400
| `-ParmVarDecl 0x55a92a282518 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55a92a2825b8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55a92a2825b8
| `-ParmVarDecl 0x55a92a2826c8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55a92a407b60 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a92a38ea40 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55a92a38ec18 prev 0x55a92a38ea40 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55a92a38eca8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55a92a38ecd0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55a929d9e580 'int'
|-TypedefDecl 0x55a92a3908a0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55a92a390850 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55a92a38f180 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55a92a38f080 'type'
|     `-TemplateSpecializationType 0x55a92a38f010 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55a92a38eef0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55a92a38eed0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55a92a38eeb0 <col:24> 'unsigned long' 4
|       `-RecordType 0x55a92a38eff0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55a92a38ef10 'char_array'
|-TypedefDecl 0x55a92a390958 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55a92a390920 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55a92a390900 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55a92a3908a0 'type'
|     `-ElaboratedType 0x55a92a390850 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55a92a38f180 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55a92a38f080 'type'
|         `-TemplateSpecializationType 0x55a92a38f010 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55a92a38eef0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55a92a38eed0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55a92a38eeb0 <col:24> 'unsigned long' 4
|           `-RecordType 0x55a92a38eff0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55a92a38ef10 'char_array'
|-CXXMethodDecl 0x55a92a390ad8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55a92a3909e8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55a92a390bc8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55a92a390ca8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55a92a390f78 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55a92a390e80 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55a92a3911b8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55a92a391030 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55a92a3910a8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a92a391388 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55a92a391278 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55a92a3912f0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a92a3914e8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55a92a3915b8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55a92a391808 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55a92a391678 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55a92a3916f0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a92a391a68 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55a92a3918d8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55a92a391950 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a92a391c28 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55a92a391b38 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a92a391de8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55a92a391cf0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a92a391ea0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55a92a391f50 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55a92a392188 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55a92a392000 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55a92a392078 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a92a398858 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55a92a398760 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55a92a398920 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55a92a398970 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55a92a3989c0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a92a38d448 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55a92a38d658 prev 0x55a92a38d448 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55a92a38e9b0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55a92a38e960 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55a92a38e940 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55a92a38e7f0 'type'
|     `-SubstTemplateTypeParmType 0x55a92a38e610 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55a92a064d60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a92a064d08 'T'
|       `-RecordType 0x55a92a38e160 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55a92a38e078 'sized_array_memory'
|-FieldDecl 0x55a92a398a10 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55a92a398a60 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55a92a398a98 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55a92a38d6f0 'int' sugar
|   |-TemplateTypeParmType 0x55a92a09ca50 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55a92a09c9f8 'T'
|   `-BuiltinType 0x55a929d9e580 'int'
|-TypedefDecl 0x55a92a398b28 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55a92a398af0 'int &'
|   `-SubstTemplateTypeParmType 0x55a92a38d6f0 'int' sugar
|     |-TemplateTypeParmType 0x55a92a09ca50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55a92a09c9f8 'T'
|     `-BuiltinType 0x55a929d9e580 'int'
|-TypedefDecl 0x55a92a398be8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55a92a398bb0 'const int &'
|   `-QualType 0x55a92a38d6f1 'const int' const
|     `-SubstTemplateTypeParmType 0x55a92a38d6f0 'int' sugar
|       |-TemplateTypeParmType 0x55a92a09ca50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a92a09c9f8 'T'
|       `-BuiltinType 0x55a929d9e580 'int'
|-TypedefDecl 0x55a92a398c78 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55a92a398c40 'int *'
|   `-SubstTemplateTypeParmType 0x55a92a38d6f0 'int' sugar
|     |-TemplateTypeParmType 0x55a92a09ca50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55a92a09c9f8 'T'
|     `-BuiltinType 0x55a929d9e580 'int'
|-TypedefDecl 0x55a92a398d08 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55a92a398cd0 'const int *'
|   `-QualType 0x55a92a38d6f1 'const int' const
|     `-SubstTemplateTypeParmType 0x55a92a38d6f0 'int' sugar
|       |-TemplateTypeParmType 0x55a92a09ca50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a92a09c9f8 'T'
|       `-BuiltinType 0x55a929d9e580 'int'
|-TypedefDecl 0x55a92a3998f0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55a92a3998a0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55a92a399880 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55a92a399810 'type'
|     `-SubstTemplateTypeParmType 0x55a92a3995d0 'int' sugar
|       |-TemplateTypeParmType 0x55a92a06fb60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a92a06fb10 'T'
|       `-BuiltinType 0x55a929d9e580 'int'
|-TypedefDecl 0x55a92a399958 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55a92a398bb0 'const int &'
|   `-QualType 0x55a92a38d6f1 'const int' const
|     `-SubstTemplateTypeParmType 0x55a92a38d6f0 'int' sugar
|       |-TemplateTypeParmType 0x55a92a09ca50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a92a09c9f8 'T'
|       `-BuiltinType 0x55a929d9e580 'int'
|-TypedefDecl 0x55a92a3999b0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55a929d9e580 'int'
|-TypedefDecl 0x55a92a399a18 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55a92a398c40 'int *'
|   `-SubstTemplateTypeParmType 0x55a92a38d6f0 'int' sugar
|     |-TemplateTypeParmType 0x55a92a09ca50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55a92a09c9f8 'T'
|     `-BuiltinType 0x55a929d9e580 'int'
|-TypedefDecl 0x55a92a399a80 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55a92a398cd0 'const int *'
|   `-QualType 0x55a92a38d6f1 'const int' const
|     `-SubstTemplateTypeParmType 0x55a92a38d6f0 'int' sugar
|       |-TemplateTypeParmType 0x55a92a09ca50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a92a09c9f8 'T'
|       `-BuiltinType 0x55a929d9e580 'int'
|-EnumDecl 0x55a92a399ad8 <line:134:5> col:5
| `-EnumConstantDecl 0x55a92a399bd0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55a92a399bb0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55a92a09e0d8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55a92a09e0b0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55a92a09e090 <col:40> 'int' 1
|-CXXConstructorDecl 0x55a92a399c58 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55a92a399ea8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55a92a399d10 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55a92a399db0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55a92a39a168 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55a92a39a050 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55a92a39a428 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55a92a39a310 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55a92a39a770 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55a92a39a650 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55a92a39aa80 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55a92a39a960 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55a92a39ad70 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55a92a39abb8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55a92a39ac30 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55a92a39ae98 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55a92a39af78 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a92a39afd0 <col:30> Inherited
|-CXXMethodDecl 0x55a92a39b018 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55a92a39b0c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a92a39b120 <col:30> Inherited
|-CXXMethodDecl 0x55a92a39b1e8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55a92a39b298 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a92a39b2f0 <col:30> Inherited
|-CXXMethodDecl 0x55a92a39b338 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55a92a39b3e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a92a39b440 <col:30> Inherited
|-CXXMethodDecl 0x55a92a39b488 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55a92a39b538 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a92a39b590 <col:30> Inherited
|-CXXMethodDecl 0x55a92a39b5d8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55a92a39b688 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a92a39b6e0 <col:30> Inherited
|-CXXMethodDecl 0x55a92a39b708 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55a92a39b7b8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55a92a39b868 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55a92a39ba28 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55a92a39b918 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55a92a39b990 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55a92a39bb78 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55a92a39bae8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a92a39bd28 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55a92a39bc30 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55a92a39bde0 <col:20>
| `-OptimizeNoneAttr 0x55a92a39be38 <col:30>
|-CXXMethodDecl 0x55a92a39bf58 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55a92a39be60 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55a92a39c010 <col:20>
| `-OptimizeNoneAttr 0x55a92a39c068 <col:30>
|-CXXMethodDecl 0x55a92a39c120 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55a92a39c090 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a92a39c268 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55a92a39c1d8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a92a39c398 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55a92a39c4c8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55a92a39c598 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55a92a39c668 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55a92a39c7a8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55a92a39c718 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a92a39c8f0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55a92a39c860 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a92a39ca38 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55a92a39c9a8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55a92a39caf0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55a92a39cbf0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55a92a39cb60 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55a92a39cca8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55a92a39cd68 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55a92a39ce68 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55a92a39cfe8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55a92a39cf28 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55a92a39d7a8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55a92a39d0a0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55a92a39d708 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55a92a39d608 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55a92a39d888 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55a92a39d9d8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55a92a39d948 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55a92a39da90 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55a92a39dcd8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55a92a39db50 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55a92a39dbc8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55a92a39de98 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55a92a39dda8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55a92a39e0e8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55a92a39df60 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55a92a39dfd8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55a92a39e1a8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55a92a39e408 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55a92a39e310 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55a92a39e4d8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a92a38b5b8 prev 0x55a92a36d2e0 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55a92a38b6b0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55a92a38b7a0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55a92a3b02b0 <col:16, line:828:9>
|-CXXDestructorDecl 0x55a92a38b890 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55a92a3b02c0 <col:25, line:830:9>
|-CXXMethodDecl 0x55a92a38b990 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55a92a38ba40 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55a92a38bae8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55a92a38bae8
| `-ParmVarDecl 0x55a92a38bbf8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55a92a38c3b8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55a92a38c3b8
  `-ParmVarDecl 0x55a92a38c4c8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a92a2879f8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55a92a287b58 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55a92a36d2e0 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55a92a36d390 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55a92a36d498 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55a92a36d3c8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55a92a39fa98 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55a92a39fa78 <col:31> 'int' 0
|-CXXConstructorDecl 0x55a92a36d7b8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55a92a36d630 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55a92a36d6a8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55a92a39fad0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55a92a39fab0 <col:59> 'int' 0
|-CXXConstructorDecl 0x55a92a36d990 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55a92a36d880 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55a92a36d8f8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55a92a39fb08 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55a92a39fae8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55a92a36dd48 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55a92a36db30 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55a92a36dba8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55a92a36dc20 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55a92a39fb40 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55a92a39fb20 <col:31> 'int' 0
|-CXXConstructorDecl 0x55a92a36df08 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55a92a36de48 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55a92a36e000 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55a92a36e1e8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55a92a36e0f0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55a92a36e2d8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55a92a39fef0 <col:24, line:291:5>
|   `-ReturnStmt 0x55a92a39fee0 <line:290:9, col:79>
|     `-BinaryOperator 0x55a92a39fec0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55a92a39fd98 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55a92a39fcf0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55a92a39fcd0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55a92a39fbc8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55a92a39fbb0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55a92a39fb98 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55a92a39fb68 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55a92a38d3e0
|       | |   |       `-CXXThisExpr 0x55a92a39fb58 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55a92a39fcb8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55a92a39fca0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55a92a39fc68 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55a92a39fc38 <col:28, col:35> '<bound member function type>' ->size 0x55a92a34edb8
|       | |           `-ImplicitCastExpr 0x55a92a39fc88 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55a92a39fc20 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55a92a39fbf0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55a92a38d3e0
|       | |                 `-CXXThisExpr 0x55a92a39fbe0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55a92a39fd80 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55a92a39fd68 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55a92a39fd50 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55a92a39fd20 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55a92a39e620
|       |         `-CXXThisExpr 0x55a92a39fd10 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55a92a39fea0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55a92a39fe88 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55a92a39fe70 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55a92a39fe30 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55a92a39fe18 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55a92a39fdc8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55a92a39e6d0
|         |     |   `-CXXThisExpr 0x55a92a39fdb8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55a92a39fdf8 <col:73> 'int' 0
|         `-IntegerLiteral 0x55a92a39fe50 <col:79> 'int' 0
|-CXXMethodDecl 0x55a92a36e398 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55a92a3a00c8 <col:32, line:296:5>
|   `-ReturnStmt 0x55a92a3a00b8 <line:295:9, col:49>
|     `-BinaryOperator 0x55a92a3a0098 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55a92a39ff78 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55a92a39ff60 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55a92a39ff48 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55a92a39ff18 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55a92a39e620
|       |       `-CXXThisExpr 0x55a92a39ff08 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55a92a3a0078 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55a92a3a0060 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55a92a3a0048 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55a92a3a0008 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55a92a39fff0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55a92a39ffa0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55a92a39e6d0
|         |     |   `-CXXThisExpr 0x55a92a39ff90 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55a92a39ffd0 <col:43> 'int' 0
|         `-IntegerLiteral 0x55a92a3a0028 <col:49> 'int' 0
|-CXXMethodDecl 0x55a92a36e488 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55a92a3a02d8 <col:19, line:306:5>
|   |-IfStmt 0x55a92a3a01f8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55a92a3a0138 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55a92a3a0120 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55a92a3a00f0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55a92a38d3e0
|   | |     `-CXXThisExpr 0x55a92a3a00e0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55a92a3a01d8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55a92a3a01a8 <col:13, col:20> '<bound member function type>' ->clear 0x55a92a3517b8
|   |     `-ImplicitCastExpr 0x55a92a3a0190 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55a92a3a0160 <col:13> 'Vector<String> *' lvalue ->_conf 0x55a92a38d3e0
|   |         `-CXXThisExpr 0x55a92a3a0150 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55a92a3a0280 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55a92a3a0250 <col:9, col:16> '<bound member function type>' .clear 0x55a92a39e1a8
|   |   `-MemberExpr 0x55a92a3a0220 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55a92a39e5c0
|   |     `-CXXThisExpr 0x55a92a3a0210 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55a92a3a02c8 <line:305:9, col:17>
|     `-UnaryOperator 0x55a92a3a02b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a92a3a02a0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55a92a36e708 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55a92a36e610 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55a92a36e888 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55a92a36e7c0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55a92a36ec08 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55a92a36e930 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55a92a36eb68 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55a92a36e9d8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55a92a36ea50 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55a92a3a05f8 <col:67, line:327:5>
|     |-WhileStmt 0x55a92a3a05a8 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55a92a3a03c0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55a92a3a0340 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55a92a2be638 0x55a92a107c18 0x55a92a1078f0 0x55a92a0f80c0 0x55a92a0f7d70 0x55a92a0f7660 0x55a92a0c9fd0 0x55a92a0574a0
|     | | |-DeclRefExpr 0x55a92a3a0300 <col:16> 'Iter' lvalue ParmVar 0x55a92a36e9d8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55a92a3a0320 <col:25> 'Iter' lvalue ParmVar 0x55a92a36ea50 'end' 'Iter'
|     | `-CompoundStmt 0x55a92a3a0588 <col:30, line:325:9>
|     |   |-CallExpr 0x55a92a3a0528 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55a92a3a0408 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55a92a3a04f8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55a92a3a0488 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a92a2c37b8 0x55a92a2c33d8 0x55a92a2c3008 0x55a92a2c2c28 0x55a92a2c2848 0x55a92a2c2478
|     |   |   `-DeclRefExpr 0x55a92a3a0468 <col:24> 'Iter' lvalue ParmVar 0x55a92a36e9d8 'begin' 'Iter'
|     |   `-UnaryOperator 0x55a92a3a0570 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55a92a3a0550 <col:15> 'Iter' lvalue ParmVar 0x55a92a36e9d8 'begin' 'Iter'
|     `-ReturnStmt 0x55a92a3a05e8 <line:326:9, col:17>
|       `-UnaryOperator 0x55a92a3a05d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a92a3a05c0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55a92a36ed10 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55a92a36ec80 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55a92a36ee58 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55a92a36edc8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55a92a36ef20 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55a92a3a06d8 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55a92a3a0678 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55a92a3a0628 <col:9> '<bound member function type>' ->reset_from 0x55a92a39ea48
|   | | `-CXXThisExpr 0x55a92a3a0618 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55a92a3a0658 <col:20> 'int' 0
|   `-ReturnStmt 0x55a92a3a06c8 <line:352:9, col:17>
|     `-UnaryOperator 0x55a92a3a06b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a92a3a06a0 <col:17> 'Args *' this
|-VarDecl 0x55a92a36efd8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55a92a36f040 <col:38> 'int' 1
|-VarDecl 0x55a92a36f0d0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55a92a36f138 <col:39> 'int' 2
|-VarDecl 0x55a92a36f1c8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55a92a36f230 <col:39> 'int' 4
|-VarDecl 0x55a92a36f2c0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55a92a36f328 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55a92a36f6a8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55a92a36f3a0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55a92a36f608 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55a92a36f450 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55a92a36f4f8 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x55a92a3a21a8 <col:43, line:371:5>
| |   `-ReturnStmt 0x55a92a3a2198 <line:370:9, col:34>
| |     `-CallExpr 0x55a92a3a2160 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55a92a3a2080 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55a92a3a2100 <col:21> 'const char *' lvalue ParmVar 0x55a92a36f450 'keyword' 'const char *'
| |       |-IntegerLiteral 0x55a92a3a2120 <col:30> 'int' 0
| |       `-DeclRefExpr 0x55a92a3a2140 <col:33> 'T' lvalue ParmVar 0x55a92a36f4f8 'x' 'T &'
| `-CXXMethodDecl 0x55a92a4084c8 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x55a92a4082e0 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x55a92a4083b8 <col:37, col:40> col:40 x 'bool &'
|-FunctionTemplateDecl 0x55a92a36f9d8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55a92a36f710 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a92a36f938 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55a92a36f7c0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a36f868 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55a92a3a22f8 <col:45, line:375:5>
|     `-ReturnStmt 0x55a92a3a22e8 <line:374:9, col:42>
|       `-CallExpr 0x55a92a3a22b0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a21d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a2250 <col:21> 'const char *' lvalue ParmVar 0x55a92a36f7c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a92a3a2270 <col:30> 'const int' lvalue Var 0x55a92a36efd8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55a92a3a2290 <col:41> 'T' lvalue ParmVar 0x55a92a36f868 'x' 'T &'
|-FunctionTemplateDecl 0x55a92a36fd08 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55a92a36fa40 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55a92a36fc68 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55a92a36faf0 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55a92a36fb98 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x55a92a3a2448 <col:45, line:379:5>
| |   `-ReturnStmt 0x55a92a3a2438 <line:378:9, col:43>
| |     `-CallExpr 0x55a92a3a2400 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55a92a3a2320 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55a92a3a23a0 <col:21> 'const char *' lvalue ParmVar 0x55a92a36faf0 'keyword' 'const char *'
| |       |-DeclRefExpr 0x55a92a3a23c0 <col:30> 'const int' lvalue Var 0x55a92a36f0d0 'positional' 'const int'
| |       `-DeclRefExpr 0x55a92a3a23e0 <col:42> 'T' lvalue ParmVar 0x55a92a36fb98 'x' 'T &'
| `-CXXMethodDecl 0x55a92a407fc8 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, String &)'
|   |-TemplateArgument type 'String'
|   |-ParmVarDecl 0x55a92a407de0 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x55a92a407eb8 <col:39, col:42> col:42 x 'String &'
|-FunctionTemplateDecl 0x55a92a370038 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55a92a36fd70 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a92a36ff98 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55a92a36fe20 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a36fec8 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x55a92a3a2648 <col:46, line:383:5>
|     `-ReturnStmt 0x55a92a3a2638 <line:382:9, col:55>
|       `-CallExpr 0x55a92a3a2600 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a2470 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a24f0 <col:21> 'const char *' lvalue ParmVar 0x55a92a36fe20 'keyword' 'const char *'
|         |-BinaryOperator 0x55a92a3a25c0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55a92a3a2570 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55a92a3a2550 <col:30> 'const int' lvalue Var 0x55a92a36efd8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55a92a3a25a8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55a92a3a2588 <col:42> 'const int' lvalue Var 0x55a92a36f0d0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55a92a3a25e0 <col:54> 'T' lvalue ParmVar 0x55a92a36fec8 'x' 'T &'
|-FunctionTemplateDecl 0x55a92a370438 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55a92a3700a0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a92a370398 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55a92a370150 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a3701d0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55a92a370278 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55a92a3a2788 <col:54, line:388:5>
|     |-CallExpr 0x55a92a3a2710 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a92a3a2660 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55a92a3a26a0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55a92a3a26b0 <col:30> 'const char *' lvalue ParmVar 0x55a92a370150 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55a92a3a26d0 <col:39> 'int' lvalue ParmVar 0x55a92a3701d0 'flags' 'int'
|     | `-DeclRefExpr 0x55a92a3a26f0 <col:46> 'T' lvalue ParmVar 0x55a92a370278 'x' 'T &'
|     `-ReturnStmt 0x55a92a3a2778 <line:387:9, col:17>
|       `-UnaryOperator 0x55a92a3a2760 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a92a3a2750 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a92a3708e8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55a92a3704a8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55a92a370528 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55a92a370848 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55a92a3705e8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a370688 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55a92a370728 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55a92a3a28f8 <col:74, line:403:5>
|     `-ReturnStmt 0x55a92a3a28e8 <line:402:9, col:56>
|       `-CallExpr 0x55a92a3a28a8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a27b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a2828 <col:28> 'const char *' lvalue ParmVar 0x55a92a3705e8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a92a3a2848 <col:37> 'int' 0
|         |-DeclRefExpr 0x55a92a3a2868 <col:40> 'T' lvalue ParmVar 0x55a92a370688 'x' 'T &'
|         `-DeclRefExpr 0x55a92a3a2888 <col:43> 'const V' lvalue ParmVar 0x55a92a370728 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55a92a370d58 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55a92a370958 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55a92a3709d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55a92a370cb8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55a92a370a98 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a370b38 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55a92a370bd8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55a92a3a2a60 <col:76, line:407:5>
|     `-ReturnStmt 0x55a92a3a2a50 <line:406:9, col:65>
|       `-CallExpr 0x55a92a3a2a10 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a2920 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a2990 <col:28> 'const char *' lvalue ParmVar 0x55a92a370a98 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a92a3a29b0 <col:37> 'const int' lvalue Var 0x55a92a36f0d0 'positional' 'const int'
|         |-DeclRefExpr 0x55a92a3a29d0 <col:49> 'T' lvalue ParmVar 0x55a92a370b38 'x' 'T &'
|         `-DeclRefExpr 0x55a92a3a29f0 <col:52> 'const V' lvalue ParmVar 0x55a92a370bd8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55a92a3712a8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55a92a370dc8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55a92a370e48 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55a92a371208 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55a92a370f08 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a370f88 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55a92a371028 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55a92a3710c8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55a92a3a2bc8 <col:85, line:412:5>
|     |-CallExpr 0x55a92a3a2b48 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a92a3a2a78 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55a92a3a2ab8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55a92a3a2ac8 <col:37> 'const char *' lvalue ParmVar 0x55a92a370f08 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55a92a3a2ae8 <col:46> 'int' lvalue ParmVar 0x55a92a370f88 'flags' 'int'
|     | |-DeclRefExpr 0x55a92a3a2b08 <col:53> 'T' lvalue ParmVar 0x55a92a371028 'x' 'T &'
|     | `-DeclRefExpr 0x55a92a3a2b28 <col:56> 'const V' lvalue ParmVar 0x55a92a3710c8 'default_value' 'const V &'
|     `-ReturnStmt 0x55a92a3a2bb8 <line:411:9, col:17>
|       `-UnaryOperator 0x55a92a3a2ba0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a92a3a2b90 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a92a371738 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55a92a371320 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a371398 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a92a371698 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a92a371458 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a3714d0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a371578 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55a92a3a2d48 <col:53, line:425:5>
|     `-ReturnStmt 0x55a92a3a2d38 <line:424:9, col:42>
|       `-CallExpr 0x55a92a3a2cf8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a2bf8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a2c78 <col:21> 'const char *' lvalue ParmVar 0x55a92a371458 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a92a3a2c98 <col:30> 'int' 0
|         |-DeclRefExpr 0x55a92a3a2cb8 <col:33> 'P' lvalue ParmVar 0x55a92a3714d0 'parser' 'P'
|         `-DeclRefExpr 0x55a92a3a2cd8 <col:41> 'T' lvalue ParmVar 0x55a92a371578 'x' 'T &'
|-FunctionTemplateDecl 0x55a92a371b88 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55a92a3717a8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a371828 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a92a371ae8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a92a3718e8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a371960 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a371a08 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55a92a3a2ec0 <col:55, line:429:5>
|     `-ReturnStmt 0x55a92a3a2eb0 <line:428:9, col:50>
|       `-CallExpr 0x55a92a3a2e70 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a2d70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a2df0 <col:21> 'const char *' lvalue ParmVar 0x55a92a3718e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a92a3a2e10 <col:30> 'const int' lvalue Var 0x55a92a36efd8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55a92a3a2e30 <col:41> 'P' lvalue ParmVar 0x55a92a371960 'parser' 'P'
|         `-DeclRefExpr 0x55a92a3a2e50 <col:49> 'T' lvalue ParmVar 0x55a92a371a08 'x' 'T &'
|-FunctionTemplateDecl 0x55a92a371fd8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55a92a371bf8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a371c78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a92a371f38 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a92a371d38 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a371db0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a371e58 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55a92a3a3038 <col:55, line:433:5>
|     `-ReturnStmt 0x55a92a3a3028 <line:432:9, col:51>
|       `-CallExpr 0x55a92a3a2fe8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a2ee8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a2f68 <col:21> 'const char *' lvalue ParmVar 0x55a92a371d38 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a92a3a2f88 <col:30> 'const int' lvalue Var 0x55a92a36f0d0 'positional' 'const int'
|         |-DeclRefExpr 0x55a92a3a2fa8 <col:42> 'P' lvalue ParmVar 0x55a92a371db0 'parser' 'P'
|         `-DeclRefExpr 0x55a92a3a2fc8 <col:50> 'T' lvalue ParmVar 0x55a92a371e58 'x' 'T &'
|-FunctionTemplateDecl 0x55a92a372428 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55a92a372048 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a3720c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a92a372388 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a92a372188 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a372200 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a3722a8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55a92a3a3260 <col:56, line:437:5>
|     `-ReturnStmt 0x55a92a3a3250 <line:436:9, col:63>
|       `-CallExpr 0x55a92a3a3210 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a3060 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a30e0 <col:21> 'const char *' lvalue ParmVar 0x55a92a372188 'keyword' 'const char *'
|         |-BinaryOperator 0x55a92a3a31b0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55a92a3a3160 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55a92a3a3140 <col:30> 'const int' lvalue Var 0x55a92a36efd8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55a92a3a3198 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55a92a3a3178 <col:42> 'const int' lvalue Var 0x55a92a36f0d0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55a92a3a31d0 <col:54> 'P' lvalue ParmVar 0x55a92a372200 'parser' 'P'
|         `-DeclRefExpr 0x55a92a3a31f0 <col:62> 'T' lvalue ParmVar 0x55a92a3722a8 'x' 'T &'
|-FunctionTemplateDecl 0x55a92a372958 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55a92a372498 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a372518 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a92a3728b8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55a92a3725d8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a372658 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55a92a3726d0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a372778 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55a92a3a33c8 <col:64, line:442:5>
|     |-CallExpr 0x55a92a3a3348 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a92a3a3278 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55a92a3a32b8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55a92a3a32c8 <col:30> 'const char *' lvalue ParmVar 0x55a92a3725d8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55a92a3a32e8 <col:39> 'int' lvalue ParmVar 0x55a92a372658 'flags' 'int'
|     | |-DeclRefExpr 0x55a92a3a3308 <col:46> 'P' lvalue ParmVar 0x55a92a3726d0 'parser' 'P'
|     | `-DeclRefExpr 0x55a92a3a3328 <col:54> 'T' lvalue ParmVar 0x55a92a372778 'x' 'T &'
|     `-ReturnStmt 0x55a92a3a33b8 <line:441:9, col:17>
|       `-UnaryOperator 0x55a92a3a33a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a92a3a3390 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a92a372f58 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55a92a3729d0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a372a48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55a92a372ac8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55a92a372eb8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55a92a372b90 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a372c08 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a372ca8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55a92a372d78 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55a92a3a3560 <col:84, line:458:5>
|     `-ReturnStmt 0x55a92a3a3550 <line:457:9, col:64>
|       `-CallExpr 0x55a92a3a3508 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a33f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a3468 <col:28> 'const char *' lvalue ParmVar 0x55a92a372b90 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a92a3a3488 <col:37> 'int' 0
|         |-DeclRefExpr 0x55a92a3a34a8 <col:40> 'P' lvalue ParmVar 0x55a92a372c08 'parser' 'P'
|         |-DeclRefExpr 0x55a92a3a34c8 <col:48> 'T' lvalue ParmVar 0x55a92a372ca8 'x' 'T &'
|         `-DeclRefExpr 0x55a92a3a34e8 <col:51> 'const V' lvalue ParmVar 0x55a92a372d78 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55a92a3734d8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55a92a372fd0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a373048 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55a92a3730c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55a92a373438 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55a92a373190 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a373208 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a3732a8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55a92a373348 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55a92a3a36f0 <col:86, line:462:5>
|     `-ReturnStmt 0x55a92a3a36e0 <line:461:9, col:73>
|       `-CallExpr 0x55a92a3a3698 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a3588 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a35f8 <col:28> 'const char *' lvalue ParmVar 0x55a92a373190 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a92a3a3618 <col:37> 'const int' lvalue Var 0x55a92a36f0d0 'positional' 'const int'
|         |-DeclRefExpr 0x55a92a3a3638 <col:49> 'P' lvalue ParmVar 0x55a92a373208 'parser' 'P'
|         |-DeclRefExpr 0x55a92a3a3658 <col:57> 'T' lvalue ParmVar 0x55a92a3732a8 'x' 'T &'
|         `-DeclRefExpr 0x55a92a3a3678 <col:60> 'const V' lvalue ParmVar 0x55a92a373348 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55a92a373b38 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55a92a373550 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a3735c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55a92a373648 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55a92a373a98 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55a92a373710 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a373790 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55a92a373808 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a3738a8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55a92a373948 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55a92a3a3880 <col:95, line:467:5>
|     |-CallExpr 0x55a92a3a37f8 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a92a3a3708 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55a92a3a3748 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55a92a3a3758 <col:37> 'const char *' lvalue ParmVar 0x55a92a373710 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55a92a3a3778 <col:46> 'int' lvalue ParmVar 0x55a92a373790 'flags' 'int'
|     | |-DeclRefExpr 0x55a92a3a3798 <col:53> 'P' lvalue ParmVar 0x55a92a373808 'parser' 'P'
|     | |-DeclRefExpr 0x55a92a3a37b8 <col:61> 'T' lvalue ParmVar 0x55a92a3738a8 'x' 'T &'
|     | `-DeclRefExpr 0x55a92a3a37d8 <col:64> 'const V' lvalue ParmVar 0x55a92a373948 'default_value' 'const V &'
|     `-ReturnStmt 0x55a92a3a3870 <line:466:9, col:17>
|       `-UnaryOperator 0x55a92a3a3858 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a92a3a3848 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a92a374118 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55a92a373bb8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a373c38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55a92a373cb8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55a92a374078 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55a92a373d80 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a373df8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a373e98 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55a92a373f38 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55a92a3a3a28 <col:63, line:481:5>
|     `-ReturnStmt 0x55a92a3a3a18 <line:480:9, col:47>
|       `-CallExpr 0x55a92a3a39d0 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a38b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a3930 <col:21> 'const char *' lvalue ParmVar 0x55a92a373d80 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a92a3a3950 <col:30> 'int' 0
|         |-DeclRefExpr 0x55a92a3a3970 <col:33> 'P' lvalue ParmVar 0x55a92a373df8 'parser' 'P'
|         |-DeclRefExpr 0x55a92a3a3990 <col:41> 'T1' lvalue ParmVar 0x55a92a373e98 'x1' 'T1 &'
|         `-DeclRefExpr 0x55a92a3a39b0 <col:45> 'T2' lvalue ParmVar 0x55a92a373f38 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55a92a374698 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55a92a374190 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a374208 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55a92a374288 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55a92a3745f8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55a92a374350 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a3743c8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a374468 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55a92a374508 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55a92a3a3bc8 <col:65, line:485:5>
|     `-ReturnStmt 0x55a92a3a3bb8 <line:484:9, col:55>
|       `-CallExpr 0x55a92a3a3b70 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a3a50 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a3ad0 <col:21> 'const char *' lvalue ParmVar 0x55a92a374350 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a92a3a3af0 <col:30> 'const int' lvalue Var 0x55a92a36efd8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55a92a3a3b10 <col:41> 'P' lvalue ParmVar 0x55a92a3743c8 'parser' 'P'
|         |-DeclRefExpr 0x55a92a3a3b30 <col:49> 'T1' lvalue ParmVar 0x55a92a374468 'x1' 'T1 &'
|         `-DeclRefExpr 0x55a92a3a3b50 <col:53> 'T2' lvalue ParmVar 0x55a92a374508 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55a92a374c18 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55a92a374710 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a374788 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55a92a374808 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55a92a374b78 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55a92a3748d0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a374948 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a3749e8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55a92a374a88 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55a92a3a3d68 <col:65, line:489:5>
|     `-ReturnStmt 0x55a92a3a3d58 <line:488:9, col:56>
|       `-CallExpr 0x55a92a3a3d10 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a3bf0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a3c70 <col:21> 'const char *' lvalue ParmVar 0x55a92a3748d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a92a3a3c90 <col:30> 'const int' lvalue Var 0x55a92a36f0d0 'positional' 'const int'
|         |-DeclRefExpr 0x55a92a3a3cb0 <col:42> 'P' lvalue ParmVar 0x55a92a374948 'parser' 'P'
|         |-DeclRefExpr 0x55a92a3a3cd0 <col:50> 'T1' lvalue ParmVar 0x55a92a3749e8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55a92a3a3cf0 <col:54> 'T2' lvalue ParmVar 0x55a92a374a88 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55a92a375198 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55a92a374c90 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a374d08 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55a92a374d88 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55a92a3750f8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55a92a374e50 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a374ec8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a374f68 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55a92a375008 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55a92a3a3fb8 <col:66, line:493:5>
|     `-ReturnStmt 0x55a92a3a3fa8 <line:492:9, col:68>
|       `-CallExpr 0x55a92a3a3f60 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a3d90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a3e10 <col:21> 'const char *' lvalue ParmVar 0x55a92a374e50 'keyword' 'const char *'
|         |-BinaryOperator 0x55a92a3a3ee0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55a92a3a3e90 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55a92a3a3e70 <col:30> 'const int' lvalue Var 0x55a92a36efd8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55a92a3a3ec8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55a92a3a3ea8 <col:42> 'const int' lvalue Var 0x55a92a36f0d0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55a92a3a3f00 <col:54> 'P' lvalue ParmVar 0x55a92a374ec8 'parser' 'P'
|         |-DeclRefExpr 0x55a92a3a3f20 <col:62> 'T1' lvalue ParmVar 0x55a92a374f68 'x1' 'T1 &'
|         `-DeclRefExpr 0x55a92a3a3f40 <col:66> 'T2' lvalue ParmVar 0x55a92a375008 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55a92a379ef8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55a92a375210 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a375288 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55a92a379a08 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55a92a379e58 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55a92a379ad0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a379b50 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55a92a379bc8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a379c68 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55a92a379d08 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55a92a3a4148 <col:74, line:498:5>
|     |-CallExpr 0x55a92a3a40c0 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a92a3a3fd0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55a92a3a4010 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55a92a3a4020 <col:30> 'const char *' lvalue ParmVar 0x55a92a379ad0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55a92a3a4040 <col:39> 'int' lvalue ParmVar 0x55a92a379b50 'flags' 'int'
|     | |-DeclRefExpr 0x55a92a3a4060 <col:46> 'P' lvalue ParmVar 0x55a92a379bc8 'parser' 'P'
|     | |-DeclRefExpr 0x55a92a3a4080 <col:54> 'T1' lvalue ParmVar 0x55a92a379c68 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55a92a3a40a0 <col:58> 'T2' lvalue ParmVar 0x55a92a379d08 'x2' 'T2 &'
|     `-ReturnStmt 0x55a92a3a4138 <line:497:9, col:17>
|       `-UnaryOperator 0x55a92a3a4120 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a92a3a4110 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a92a37a258 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55a92a379f78 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a92a37a1b8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55a92a37a030 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a37a0a8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55a92a3a4290 <col:52, line:509:5>
|     `-ReturnStmt 0x55a92a3a4280 <line:508:9, col:44>
|       `-CallExpr 0x55a92a3a4248 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a4178 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a41e8 <col:26> 'const char *' lvalue ParmVar 0x55a92a37a030 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a92a3a4208 <col:35> 'int' 0
|         `-DeclRefExpr 0x55a92a3a4228 <col:38> 'P' lvalue ParmVar 0x55a92a37a0a8 'parser' 'P'
|-FunctionTemplateDecl 0x55a92a37a558 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55a92a37a2c0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a92a37a4b8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55a92a37a370 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a37a3e8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55a92a3a43d0 <col:54, line:513:5>
|     `-ReturnStmt 0x55a92a3a43c0 <line:512:9, col:52>
|       `-CallExpr 0x55a92a3a4388 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a42b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a4328 <col:26> 'const char *' lvalue ParmVar 0x55a92a37a370 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a92a3a4348 <col:35> 'const int' lvalue Var 0x55a92a36efd8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55a92a3a4368 <col:46> 'P' lvalue ParmVar 0x55a92a37a3e8 'parser' 'P'
|-FunctionTemplateDecl 0x55a92a37a858 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55a92a37a5c0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a92a37a7b8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55a92a37a670 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a37a6e8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55a92a3a4510 <col:54, line:517:5>
|     `-ReturnStmt 0x55a92a3a4500 <line:516:9, col:53>
|       `-CallExpr 0x55a92a3a44c8 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a43f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a4468 <col:26> 'const char *' lvalue ParmVar 0x55a92a37a670 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a92a3a4488 <col:35> 'const int' lvalue Var 0x55a92a36f0d0 'positional' 'const int'
|         `-DeclRefExpr 0x55a92a3a44a8 <col:47> 'P' lvalue ParmVar 0x55a92a37a6e8 'parser' 'P'
|-FunctionTemplateDecl 0x55a92a37ab58 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55a92a37a8c0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a92a37aab8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55a92a37a970 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a37a9e8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55a92a3a4700 <col:55, line:521:5>
|     `-ReturnStmt 0x55a92a3a46f0 <line:520:9, col:65>
|       `-CallExpr 0x55a92a3a46b8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a4538 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a45a8 <col:26> 'const char *' lvalue ParmVar 0x55a92a37a970 'keyword' 'const char *'
|         |-BinaryOperator 0x55a92a3a4678 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55a92a3a4628 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55a92a3a4608 <col:35> 'const int' lvalue Var 0x55a92a36efd8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55a92a3a4660 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55a92a3a4640 <col:47> 'const int' lvalue Var 0x55a92a36f0d0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55a92a3a4698 <col:59> 'P' lvalue ParmVar 0x55a92a37a9e8 'parser' 'P'
|-FunctionTemplateDecl 0x55a92a37af28 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55a92a37abc0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a92a37ae88 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55a92a37ac70 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a37acf0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55a92a37ad68 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55a92a3a4840 <col:63, line:526:5>
|     |-CallExpr 0x55a92a3a47c8 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a92a3a4718 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55a92a3a4758 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55a92a3a4768 <col:35> 'const char *' lvalue ParmVar 0x55a92a37ac70 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55a92a3a4788 <col:44> 'int' lvalue ParmVar 0x55a92a37acf0 'flags' 'int'
|     | `-DeclRefExpr 0x55a92a3a47a8 <col:51> 'P' lvalue ParmVar 0x55a92a37ad68 'parser' 'P'
|     `-ReturnStmt 0x55a92a3a4830 <line:525:9, col:17>
|       `-UnaryOperator 0x55a92a3a4818 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a92a3a4808 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a92a37b378 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55a92a37af98 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a37b018 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a92a37b2d8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a92a37b0d8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a37b150 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a37b1f8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55a92a3a4998 <col:58, line:541:5>
|     `-ReturnStmt 0x55a92a3a4988 <line:540:9, col:39>
|       `-CallExpr 0x55a92a3a4950 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a4870 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a48f0 <col:21> 'const char *' lvalue ParmVar 0x55a92a37b0d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a92a3a4910 <col:30> 'P' lvalue ParmVar 0x55a92a37b150 'parser' 'P'
|         `-DeclRefExpr 0x55a92a3a4930 <col:38> 'T' lvalue ParmVar 0x55a92a37b1f8 'x' 'T &'
|-FunctionTemplateDecl 0x55a92a37b7c8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55a92a37b3e8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a37b468 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a92a37b728 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a92a37b528 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a37b5a0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a37b648 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55a92a3a4ad0 <col:60, line:545:5>
|     `-ReturnStmt 0x55a92a3a4ac0 <line:544:9, col:41>
|       `-CallExpr 0x55a92a3a4a88 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a49c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a4a28 <col:23> 'const char *' lvalue ParmVar 0x55a92a37b528 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a92a3a4a48 <col:32> 'P' lvalue ParmVar 0x55a92a37b5a0 'parser' 'P'
|         `-DeclRefExpr 0x55a92a3a4a68 <col:40> 'T' lvalue ParmVar 0x55a92a37b648 'x' 'T &'
|-FunctionTemplateDecl 0x55a92a37bc18 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55a92a37b838 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a37b8b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a92a37bb78 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a92a37b978 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a37b9f0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a37ba98 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55a92a3a4c08 <col:60, line:549:5>
|     `-ReturnStmt 0x55a92a3a4bf8 <line:548:9, col:41>
|       `-CallExpr 0x55a92a3a4bc0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a4af8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a4b60 <col:23> 'const char *' lvalue ParmVar 0x55a92a37b978 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a92a3a4b80 <col:32> 'P' lvalue ParmVar 0x55a92a37b9f0 'parser' 'P'
|         `-DeclRefExpr 0x55a92a3a4ba0 <col:40> 'T' lvalue ParmVar 0x55a92a37ba98 'x' 'T &'
|-FunctionTemplateDecl 0x55a92a37c068 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55a92a37bc88 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a37bd08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a92a37bfc8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a92a37bdc8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a37be40 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a37bee8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55a92a3a4d40 <col:61, line:553:5>
|     `-ReturnStmt 0x55a92a3a4d30 <line:552:9, col:42>
|       `-CallExpr 0x55a92a3a4cf8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a4c30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a4c98 <col:24> 'const char *' lvalue ParmVar 0x55a92a37bdc8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a92a3a4cb8 <col:33> 'P' lvalue ParmVar 0x55a92a37be40 'parser' 'P'
|         `-DeclRefExpr 0x55a92a3a4cd8 <col:41> 'T' lvalue ParmVar 0x55a92a37bee8 'x' 'T &'
|-FunctionTemplateDecl 0x55a92a37c548 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55a92a37c0d8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a37c158 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a92a37c4a8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55a92a37c218 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a37c298 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55a92a37c310 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a37c3b8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55a92a3a4eb8 <col:69, line:557:5>
|     `-ReturnStmt 0x55a92a3a4ea8 <line:556:9, col:46>
|       `-CallExpr 0x55a92a3a4e68 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a4d68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a4de8 <col:21> 'const char *' lvalue ParmVar 0x55a92a37c218 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a92a3a4e08 <col:30> 'int' lvalue ParmVar 0x55a92a37c298 'flags' 'int'
|         |-DeclRefExpr 0x55a92a3a4e28 <col:37> 'P' lvalue ParmVar 0x55a92a37c310 'parser' 'P'
|         `-DeclRefExpr 0x55a92a3a4e48 <col:45> 'T' lvalue ParmVar 0x55a92a37c3b8 'x' 'T &'
|-FunctionTemplateDecl 0x55a92a37c858 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55a92a37c5c0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a92a37c7b8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55a92a37c670 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a37c6e8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55a92a3a4ff8 <col:56, line:571:5>
|     `-ReturnStmt 0x55a92a3a4fe8 <line:570:9, col:48>
|       `-CallExpr 0x55a92a3a4fb0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a4ee0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a4f50 <col:30> 'const char *' lvalue ParmVar 0x55a92a37c670 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a92a3a4f70 <col:39> 'int' 0
|         `-DeclRefExpr 0x55a92a3a4f90 <col:42> 'P' lvalue ParmVar 0x55a92a37c6e8 'parser' 'P'
|-FunctionTemplateDecl 0x55a92a37cbe8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55a92a37c8c0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a92a37cb48 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55a92a37c970 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a37c9f0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55a92a37ca68 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55a92a3a51c8 <col:67, line:576:5>
|     |-CallExpr 0x55a92a3a5150 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a92a3a5010 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55a92a3a5050 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55a92a3a5060 <col:39> 'const char *' lvalue ParmVar 0x55a92a37c970 'keyword' 'const char *'
|     | |-BinaryOperator 0x55a92a3a5110 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55a92a3a50c0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55a92a3a5080 <col:48> 'int' lvalue ParmVar 0x55a92a37c9f0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55a92a3a50f8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55a92a3a50d8 <col:56> 'const int' lvalue Var 0x55a92a36f2c0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55a92a3a5130 <col:68> 'P' lvalue ParmVar 0x55a92a37ca68 'parser' 'P'
|     `-ReturnStmt 0x55a92a3a51b8 <line:575:9, col:17>
|       `-UnaryOperator 0x55a92a3a51a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a92a3a5190 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a92a37d038 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55a92a37cc58 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a37ccd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a92a37cf98 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a92a37cd98 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a37ce10 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a37ceb8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55a92a3a5338 <col:62, line:592:5>
|     `-ReturnStmt 0x55a92a3a5328 <line:591:9, col:51>
|       `-CallExpr 0x55a92a3a52e8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a51f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a5268 <col:30> 'const char *' lvalue ParmVar 0x55a92a37cd98 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a92a3a5288 <col:39> 'int' 0
|         |-DeclRefExpr 0x55a92a3a52a8 <col:42> 'P' lvalue ParmVar 0x55a92a37ce10 'parser' 'P'
|         `-DeclRefExpr 0x55a92a3a52c8 <col:50> 'T' lvalue ParmVar 0x55a92a37ceb8 'x' 'T &'
|-FunctionTemplateDecl 0x55a92a37d518 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55a92a37d0a8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a37d128 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a92a37d478 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55a92a37d1e8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a37d268 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55a92a37d2e0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a37d388 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55a92a3a5530 <col:73, line:597:5>
|     |-CallExpr 0x55a92a3a54b0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a92a3a5350 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55a92a3a5390 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55a92a3a53a0 <col:39> 'const char *' lvalue ParmVar 0x55a92a37d1e8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55a92a3a5450 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55a92a3a5400 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55a92a3a53c0 <col:48> 'int' lvalue ParmVar 0x55a92a37d268 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55a92a3a5438 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55a92a3a5418 <col:56> 'const int' lvalue Var 0x55a92a36f2c0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55a92a3a5470 <col:68> 'P' lvalue ParmVar 0x55a92a37d2e0 'parser' 'P'
|     | `-DeclRefExpr 0x55a92a3a5490 <col:76> 'T' lvalue ParmVar 0x55a92a37d388 'x' 'T &'
|     `-ReturnStmt 0x55a92a3a5520 <line:596:9, col:17>
|       `-UnaryOperator 0x55a92a3a5508 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a92a3a54f8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a92a37dac8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55a92a37d590 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a37d608 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a92a37da28 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55a92a37d6c8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a37d740 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a37d900 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55a92a3a56a0 <col:65, line:614:5>
|     `-ReturnStmt 0x55a92a3a5690 <line:613:9, col:46>
|       `-CallExpr 0x55a92a3a5650 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a5560 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a55d0 <col:25> 'const char *' lvalue ParmVar 0x55a92a37d6c8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a92a3a55f0 <col:34> 'int' 0
|         |-DeclRefExpr 0x55a92a3a5610 <col:37> 'P' lvalue ParmVar 0x55a92a37d740 'parser' 'P'
|         `-DeclRefExpr 0x55a92a3a5630 <col:45> 'Vector<T>' lvalue ParmVar 0x55a92a37d900 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55a92a37def8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55a92a37db38 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a92a37de58 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55a92a37dbf0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a37dd40 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55a92a3a58c0 <col:55, line:618:5>
|     `-ReturnStmt 0x55a92a3a58b0 <line:617:9, col:55>
|       `-CallExpr 0x55a92a3a5870 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a56c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a5738 <col:25> 'const char *' lvalue ParmVar 0x55a92a37dbf0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a92a3a5758 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55a92a3a5830 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55a92a3a5850 <col:54> 'Vector<T>' lvalue ParmVar 0x55a92a37dd40 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55a92a37e4c8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55a92a37df60 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a37dfd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a92a37e428 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55a92a37e098 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a37e118 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55a92a37e190 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a37e2e0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55a92a3a5ab8 <col:76, line:623:5>
|     |-CallExpr 0x55a92a3a5a38 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a92a3a58d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55a92a3a5918 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55a92a3a5928 <col:34> 'const char *' lvalue ParmVar 0x55a92a37e098 'keyword' 'const char *'
|     | |-BinaryOperator 0x55a92a3a59d8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55a92a3a5988 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55a92a3a5948 <col:43> 'int' lvalue ParmVar 0x55a92a37e118 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55a92a3a59c0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55a92a3a59a0 <col:51> 'const int' lvalue Var 0x55a92a36f2c0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55a92a3a59f8 <col:63> 'P' lvalue ParmVar 0x55a92a37e190 'parser' 'P'
|     | `-DeclRefExpr 0x55a92a3a5a18 <col:71> 'Vector<T>' lvalue ParmVar 0x55a92a37e2e0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55a92a3a5aa8 <line:622:9, col:17>
|       `-UnaryOperator 0x55a92a3a5a90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a92a3a5a80 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a92a37ea08 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55a92a37e540 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a37e5b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a92a37e968 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55a92a37e678 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a37e6f8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55a92a37e840 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55a92a3a5d20 <col:66, line:627:5>
|     `-ReturnStmt 0x55a92a3a5d10 <line:626:9, col:59>
|       `-CallExpr 0x55a92a3a5cd0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a92a3a5ae8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a92a3a5b58 <col:25> 'const char *' lvalue ParmVar 0x55a92a37e678 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a92a3a5b78 <col:34> 'int' lvalue ParmVar 0x55a92a37e6f8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55a92a3a5c90 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55a92a3a5cb0 <col:58> 'Vector<T>' lvalue ParmVar 0x55a92a37e840 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55a92a37ea98 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55a92a3a5da0 <col:25, line:633:5>
|   `-ReturnStmt 0x55a92a3a5d90 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55a92a3a5d78 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55a92a3a5d48 <col:16> 'const bool' lvalue ->_status 0x55a92a38d248
|         `-CXXThisExpr 0x55a92a3a5d38 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55a92a37ec18 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55a92a37eb50 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55a92a3a5e88 <col:27, line:639:5>
|   |-BinaryOperator 0x55a92a3a5e30 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55a92a3a5db8 <col:9> 'bool' lvalue ParmVar 0x55a92a37eb50 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55a92a3a5e18 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55a92a3a5de8 <col:13> 'bool' lvalue ->_status 0x55a92a38d248
|   |     `-CXXThisExpr 0x55a92a3a5dd8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55a92a3a5e78 <line:638:9, col:17>
|     `-UnaryOperator 0x55a92a3a5e60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a92a3a5e50 <col:17> 'Args *' this
|-CXXMethodDecl 0x55a92a37ed98 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55a92a37ecd8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55a92a3a5f78 <col:39, line:644:5>
|   |-BinaryOperator 0x55a92a3a5f20 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55a92a3a5ea8 <col:9> 'bool' lvalue ParmVar 0x55a92a37ecd8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55a92a3a5f08 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55a92a3a5ed8 <col:13> 'const bool' lvalue ->_status 0x55a92a38d248
|   |     `-CXXThisExpr 0x55a92a3a5ec8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55a92a3a5f68 <line:643:9, col:17>
|     `-UnaryOperator 0x55a92a3a5f50 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a92a3a5f40 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55a92a37ee60 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55a92a3a6020 <col:30, line:651:5>
|   `-ReturnStmt 0x55a92a3a6010 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55a92a3a5ff8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55a92a3a5fc8 <col:16> 'bool' lvalue ->_read_status 0x55a92a2823b0
|         `-ImplicitCastExpr 0x55a92a3a5fa8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55a92a3a5f98 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55a92a37efa8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55a92a37ef18 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55a92a3a6128 <col:32, line:658:5>
|   |-BinaryOperator 0x55a92a3a60d0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55a92a3a6038 <col:9> 'bool' lvalue ParmVar 0x55a92a37ef18 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55a92a3a60b8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55a92a3a6088 <col:13> 'bool' lvalue ->_read_status 0x55a92a2823b0
|   |     `-ImplicitCastExpr 0x55a92a3a6068 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55a92a3a6058 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55a92a3a6118 <line:657:9, col:17>
|     `-UnaryOperator 0x55a92a3a6100 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a92a3a60f0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55a92a37f0f8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55a92a37f068 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55a92a3a6238 <col:44, line:663:5>
|   |-BinaryOperator 0x55a92a3a61e0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55a92a3a6148 <col:9> 'bool' lvalue ParmVar 0x55a92a37f068 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55a92a3a61c8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55a92a3a6198 <col:13> 'bool' lvalue ->_read_status 0x55a92a2823b0
|   |     `-ImplicitCastExpr 0x55a92a3a6178 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55a92a3a6168 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55a92a3a6228 <line:662:9, col:17>
|     `-UnaryOperator 0x55a92a3a6210 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a92a3a6200 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55a92a37f1c0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55a92a37f288 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55a92a37f350 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55a92a37f418 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55a92a37f728 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55a92a37f4b8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a92a37f688 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55a92a37f598 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55a92a3a65f0 <col:19, line:706:5>
|     `-IfStmt 0x55a92a3a65c8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55a92a3a6338 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55a92a3a64f8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55a92a3a64c8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55a92a3a6488 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55a92a3a6390 <col:42> '<bound member function type>' ->simple_slot 0x55a92a39f700
|       |     | `-CXXThisExpr 0x55a92a3a6380 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55a92a3a6428 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55a92a3a63e0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55a92a10c6b8
|       |     | `-DeclRefExpr 0x55a92a3a63c0 <col:55> 'T' lvalue ParmVar 0x55a92a37f598 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55a92a3a6468 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55a92a3a65b8 <line:705:13, col:34>
|         `-CallExpr 0x55a92a3a6590 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55a92a3a6518 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55a92a3a6570 <col:33> 'T' lvalue ParmVar 0x55a92a37f598 'x' 'T &'
|-FunctionTemplateDecl 0x55a92a37f9f8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55a92a37f788 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a92a37f958 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55a92a37f868 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55a92a3a69d0 <col:31, line:717:5>
|     |-DeclStmt 0x55a92a3a6730 <line:713:9, col:23>
|     | `-VarDecl 0x55a92a3a6618 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55a92a3a6708 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55a92a3a6690 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55a92a3a66e8 <col:21> 'T' lvalue ParmVar 0x55a92a37f868 'x' 'T &'
|     |-IfStmt 0x55a92a3a6980 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55a92a3a6828 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55a92a3a6960 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55a92a3a6900 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55a92a3a6890 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a92a2c37b8 0x55a92a2c33d8 0x55a92a2c3008 0x55a92a2c2c28 0x55a92a2c2848 0x55a92a2c2478
|     |   | `-DeclRefExpr 0x55a92a3a6870 <col:14> 'T *' lvalue Var 0x55a92a3a6618 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55a92a3a6940 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55a92a3a69b8 <line:716:9, col:16>
|       `-DeclRefExpr 0x55a92a3a6998 <col:16> 'T *' lvalue Var 0x55a92a3a6618 's' 'T *'
|-FunctionTemplateDecl 0x55a92a37fe08 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55a92a37fa58 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55a92a37fad8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55a92a37fd68 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55a92a37fbb8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55a92a37fc58 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55a92a3a6ce0 <col:37, line:726:5>
|     |-IfStmt 0x55a92a3a6c70 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55a92a3a6c90 <line:723:13, col:26>
|     | | `-VarDecl 0x55a92a3a6a38 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55a92a3a6b28 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55a92a3a6ab0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55a92a3a6b08 <col:25> 'T' lvalue ParmVar 0x55a92a37fbb8 'x' 'T &'
|     | |-DeclRefExpr 0x55a92a3a6b50 <col:16> 'T *' lvalue Var 0x55a92a3a6a38 's' 'T *'
|     | `-BinaryOperator 0x55a92a3a6c50 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55a92a3a6c00 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55a92a3a6b90 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a92a2c37b8 0x55a92a2c33d8 0x55a92a2c3008 0x55a92a2c2c28 0x55a92a2c2848 0x55a92a2c2478
|     |   | `-DeclRefExpr 0x55a92a3a6b70 <col:14> 'T *' lvalue Var 0x55a92a3a6a38 's' 'T *'
|     |   `-DeclRefExpr 0x55a92a3a6c30 <col:18> 'const V' lvalue ParmVar 0x55a92a37fc58 'value' 'const V &'
|     `-ReturnStmt 0x55a92a3a6cd0 <line:725:9, col:17>
|       `-UnaryOperator 0x55a92a3a6cb8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a92a3a6ca8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a92a380208 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55a92a37fe70 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a92a380168 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55a92a37ff20 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a37ffa0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55a92a380048 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55a92a3a7b00 <col:65, line:737:5>
|     |-DeclStmt 0x55a92a3a6d78 <line:732:9, col:26>
|     | `-VarDecl 0x55a92a3a6d10 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55a92a3a7ac8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55a92a3a7ae8 <line:733:13, col:58>
|       | `-VarDecl 0x55a92a3a6da0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55a92a3a6f80 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55a92a3a6f50 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55a92a3a6f38 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55a92a3a6f18 <col:26, col:58> 'String' (CXXTemporary 0x55a92a3a6f18)
|       |           `-CXXMemberCallExpr 0x55a92a3a6ea8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55a92a3a6e18 <col:26> '<bound member function type>' ->find 0x55a92a39ed18
|       |             | `-CXXThisExpr 0x55a92a3a6e08 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55a92a3a6ee0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a92a3a6e48 <col:31> 'const char *' lvalue ParmVar 0x55a92a37ff20 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55a92a3a6ef8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a92a3a6e68 <col:40> 'int' lvalue ParmVar 0x55a92a37ffa0 'flags' 'int'
|       |             `-DeclRefExpr 0x55a92a3a6e88 <col:47> 'Args::Slot *' lvalue Var 0x55a92a3a6d10 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55a92a3a7038 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55a92a3a7020 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55a92a3a7000 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55a92a3a6fd0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55a92a0ce678
|       |       `-ImplicitCastExpr 0x55a92a3a6fb8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55a92a3a6f98 <col:20> 'String' lvalue Var 0x55a92a3a6da0 'str' 'String'
|       `-CompoundStmt 0x55a92a3a7aa8 <col:61, line:736:9>
|         |-DeclStmt 0x55a92a3a74f0 <line:734:13, col:76>
|         | `-VarDecl 0x55a92a3a7088 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55a92a3a74c0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55a92a3a7430 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55a92a3a7478 <col:60> 'T' lvalue ParmVar 0x55a92a380048 'variable' 'T &'
|         |     `-UnaryOperator 0x55a92a3a74a8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55a92a3a7498 <col:71> 'Args *' this
|         `-CallExpr 0x55a92a3a7a78 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55a92a3a7518 <col:13> '<bound member function type>' ->postparse 0x55a92a39ef28
|           | `-CXXThisExpr 0x55a92a3a7508 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55a92a3a7a38 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55a92a3a7548 <col:23> 'T *' lvalue Var 0x55a92a3a7088 's' 'T *'
|           | `-CallExpr 0x55a92a3a79f8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55a92a3a77d0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55a92a3a78d0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55a92a3a78f0 <col:86> 'String' lvalue Var 0x55a92a3a6da0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55a92a3a79a0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55a92a3a7930 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a92a2c37b8 0x55a92a2c33d8 0x55a92a2c3008 0x55a92a2c2c28 0x55a92a2c2848 0x55a92a2c2478
|           |   | `-DeclRefExpr 0x55a92a3a7910 <col:92> 'T *' lvalue Var 0x55a92a3a7088 's' 'T *'
|           |   `-UnaryOperator 0x55a92a3a79e0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55a92a3a79d0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55a92a3a7a58 <col:103> 'Args::Slot *' lvalue Var 0x55a92a3a6d10 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55a92a380758 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55a92a380278 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55a92a3802f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55a92a3806b8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55a92a3803b8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a380438 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55a92a3804d8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55a92a380578 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55a92a3a89a0 <col:88, line:745:5>
|     |-DeclStmt 0x55a92a3a7b98 <line:741:9, col:26>
|     | `-VarDecl 0x55a92a3a7b30 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55a92a3a7db8 <line:742:9, col:55>
|     | `-VarDecl 0x55a92a3a7bc0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55a92a3a7da0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55a92a3a7d70 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55a92a3a7d58 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55a92a3a7d38 <col:22, col:54> 'String' (CXXTemporary 0x55a92a3a7d38)
|     |           `-CXXMemberCallExpr 0x55a92a3a7cc8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55a92a3a7c38 <col:22> '<bound member function type>' ->find 0x55a92a39ed18
|     |             | `-CXXThisExpr 0x55a92a3a7c28 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55a92a3a7d00 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55a92a3a7c68 <col:27> 'const char *' lvalue ParmVar 0x55a92a3803b8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55a92a3a7d18 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55a92a3a7c88 <col:36> 'int' lvalue ParmVar 0x55a92a380438 'flags' 'int'
|     |             `-DeclRefExpr 0x55a92a3a7ca8 <col:43> 'Args::Slot *' lvalue Var 0x55a92a3a7b30 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55a92a3a8190 <line:743:9, col:72>
|     | `-VarDecl 0x55a92a3a7e08 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55a92a3a8160 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55a92a3a80d0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55a92a3a8118 <col:56> 'T' lvalue ParmVar 0x55a92a3804d8 'variable' 'T &'
|     |     `-UnaryOperator 0x55a92a3a8148 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55a92a3a8138 <col:67> 'Args *' this
|     `-CallExpr 0x55a92a3a8970 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55a92a3a81b8 <col:9> '<bound member function type>' ->postparse 0x55a92a39ef28
|       | `-CXXThisExpr 0x55a92a3a81a8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55a92a3a8930 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55a92a3a81e8 <col:19> 'T *' lvalue Var 0x55a92a3a7e08 's' 'T *'
|       | `-ParenExpr 0x55a92a3a8910 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55a92a3a88e0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55a92a3a88c8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55a92a3a88b0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55a92a3a8890 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55a92a3a8860 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55a92a0ce678
|       |     |       `-ImplicitCastExpr 0x55a92a3a8848 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55a92a3a8208 <col:25> 'String' lvalue Var 0x55a92a3a7bc0 'str' 'String'
|       |     |-CallExpr 0x55a92a3a86b8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55a92a3a8490 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55a92a3a8590 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55a92a3a85b0 <col:89> 'String' lvalue Var 0x55a92a3a7bc0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55a92a3a8660 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55a92a3a85f0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a92a2c37b8 0x55a92a2c33d8 0x55a92a2c3008 0x55a92a2c2c28 0x55a92a2c2848 0x55a92a2c2478
|       |     | | `-DeclRefExpr 0x55a92a3a85d0 <col:95> 'T *' lvalue Var 0x55a92a3a7e08 's' 'T *'
|       |     | `-UnaryOperator 0x55a92a3a86a0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55a92a3a8690 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55a92a3a8828 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55a92a3a8808 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55a92a3a87d8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55a92a3a8788 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55a92a3a8718 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a92a2c37b8 0x55a92a2c33d8 0x55a92a2c3008 0x55a92a2c2c28 0x55a92a2c2848 0x55a92a2c2478
|       |         | | `-DeclRefExpr 0x55a92a3a86f8 <col:109> 'T *' lvalue Var 0x55a92a3a7e08 's' 'T *'
|       |         | `-DeclRefExpr 0x55a92a3a87b8 <col:113> 'const V' lvalue ParmVar 0x55a92a380578 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55a92a3a87f8 <col:120> 'bool' true
|       `-DeclRefExpr 0x55a92a3a8950 <col:128> 'Args::Slot *' lvalue Var 0x55a92a3a7b30 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55a92a380c88 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55a92a3807d0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a380848 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a92a380be8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55a92a380908 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a380988 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55a92a380a00 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a380aa8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55a92a3a9598 <col:75, line:754:5>
|     |-DeclStmt 0x55a92a3a8a48 <line:749:9, col:26>
|     | `-VarDecl 0x55a92a3a89e0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55a92a3a9560 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55a92a3a9580 <line:750:13, col:58>
|       | `-VarDecl 0x55a92a3a8a70 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55a92a3a8c50 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55a92a3a8c20 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55a92a3a8c08 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55a92a3a8be8 <col:26, col:58> 'String' (CXXTemporary 0x55a92a3a8be8)
|       |           `-CXXMemberCallExpr 0x55a92a3a8b78 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55a92a3a8ae8 <col:26> '<bound member function type>' ->find 0x55a92a39ed18
|       |             | `-CXXThisExpr 0x55a92a3a8ad8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55a92a3a8bb0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a92a3a8b18 <col:31> 'const char *' lvalue ParmVar 0x55a92a380908 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55a92a3a8bc8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a92a3a8b38 <col:40> 'int' lvalue ParmVar 0x55a92a380988 'flags' 'int'
|       |             `-DeclRefExpr 0x55a92a3a8b58 <col:47> 'Args::Slot *' lvalue Var 0x55a92a3a89e0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55a92a3a8d08 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55a92a3a8cf0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55a92a3a8cd0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55a92a3a8ca0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55a92a0ce678
|       |       `-ImplicitCastExpr 0x55a92a3a8c88 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55a92a3a8c68 <col:20> 'String' lvalue Var 0x55a92a3a8a70 'str' 'String'
|       `-CompoundStmt 0x55a92a3a9540 <col:61, line:753:9>
|         |-DeclStmt 0x55a92a3a90e0 <line:751:13, col:63>
|         | `-VarDecl 0x55a92a3a8d58 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55a92a3a90b0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55a92a3a9020 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55a92a3a9068 <col:47> 'T' lvalue ParmVar 0x55a92a380aa8 'variable' 'T &'
|         |     `-UnaryOperator 0x55a92a3a9098 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55a92a3a9088 <col:58> 'Args *' this
|         `-CallExpr 0x55a92a3a9510 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55a92a3a9108 <col:13> '<bound member function type>' ->postparse 0x55a92a39ef28
|           | `-CXXThisExpr 0x55a92a3a90f8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55a92a3a94d0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55a92a3a9138 <col:23> 'T *' lvalue Var 0x55a92a3a8d58 's' 'T *'
|           | `-CallExpr 0x55a92a3a9490 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55a92a3a9320 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55a92a3a9368 <col:56> 'P' lvalue ParmVar 0x55a92a380a00 'parser' 'P'
|           |   |-DeclRefExpr 0x55a92a3a9388 <col:64> 'String' lvalue Var 0x55a92a3a8a70 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55a92a3a9438 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55a92a3a93c8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a92a2c37b8 0x55a92a2c33d8 0x55a92a2c3008 0x55a92a2c2c28 0x55a92a2c2848 0x55a92a2c2478
|           |   | `-DeclRefExpr 0x55a92a3a93a8 <col:70> 'T *' lvalue Var 0x55a92a3a8d58 's' 'T *'
|           |   `-UnaryOperator 0x55a92a3a9478 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55a92a3a9468 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55a92a3a94f0 <col:81> 'Args::Slot *' lvalue Var 0x55a92a3a89e0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55a92a3812e8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55a92a380d00 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55a92a380d78 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55a92a380df8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55a92a381248 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55a92a380ec0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a380f40 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55a92a380fb8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a381058 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55a92a3810f8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55a92a3ac678 <col:98, line:762:5>
|     |-DeclStmt 0x55a92a3a9630 <line:758:9, col:26>
|     | `-VarDecl 0x55a92a3a95c8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55a92a3a9850 <line:759:9, col:55>
|     | `-VarDecl 0x55a92a3a9658 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55a92a3a9838 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55a92a3a9808 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55a92a3a97f0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55a92a3a97d0 <col:22, col:54> 'String' (CXXTemporary 0x55a92a3a97d0)
|     |           `-CXXMemberCallExpr 0x55a92a3a9760 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55a92a3a96d0 <col:22> '<bound member function type>' ->find 0x55a92a39ed18
|     |             | `-CXXThisExpr 0x55a92a3a96c0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55a92a3a9798 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55a92a3a9700 <col:27> 'const char *' lvalue ParmVar 0x55a92a380ec0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55a92a3a97b0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55a92a3a9720 <col:36> 'int' lvalue ParmVar 0x55a92a380f40 'flags' 'int'
|     |             `-DeclRefExpr 0x55a92a3a9740 <col:43> 'Args::Slot *' lvalue Var 0x55a92a3a95c8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55a92a3a9c70 <line:760:9, col:59>
|     | `-VarDecl 0x55a92a3a98a8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55a92a3a9c40 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55a92a3a9bb0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55a92a3a9bf8 <col:43> 'T' lvalue ParmVar 0x55a92a381058 'variable' 'T &'
|     |     `-UnaryOperator 0x55a92a3a9c28 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55a92a3a9c18 <col:54> 'Args *' this
|     `-CallExpr 0x55a92a3ac648 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55a92a3a9c98 <col:9> '<bound member function type>' ->postparse 0x55a92a39ef28
|       | `-CXXThisExpr 0x55a92a3a9c88 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55a92a3ac608 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55a92a3a9cc8 <col:19> 'T *' lvalue Var 0x55a92a3a98a8 's' 'T *'
|       | `-ParenExpr 0x55a92a3ac5e8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55a92a3ac5b8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55a92a3ac5a0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55a92a3ac588 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55a92a3ac568 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55a92a3ac538 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55a92a0ce678
|       |     |       `-ImplicitCastExpr 0x55a92a3ac520 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55a92a3a9ce8 <col:25> 'String' lvalue Var 0x55a92a3a9658 'str' 'String'
|       |     |-CallExpr 0x55a92a3aa040 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55a92a3a9ed0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55a92a3a9f18 <col:59> 'P' lvalue ParmVar 0x55a92a380fb8 'parser' 'P'
|       |     | |-DeclRefExpr 0x55a92a3a9f38 <col:67> 'String' lvalue Var 0x55a92a3a9658 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55a92a3a9fe8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55a92a3a9f78 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a92a2c37b8 0x55a92a2c33d8 0x55a92a2c3008 0x55a92a2c2c28 0x55a92a2c2848 0x55a92a2c2478
|       |     | | `-DeclRefExpr 0x55a92a3a9f58 <col:73> 'T *' lvalue Var 0x55a92a3a98a8 's' 'T *'
|       |     | `-UnaryOperator 0x55a92a3aa028 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55a92a3aa018 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55a92a3ac500 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55a92a3ac4e0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55a92a3ac4b0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55a92a3ac460 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55a92a3ac3f0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a92a2c37b8 0x55a92a2c33d8 0x55a92a2c3008 0x55a92a2c2c28 0x55a92a2c2848 0x55a92a2c2478
|       |         | | `-DeclRefExpr 0x55a92a3ac3d0 <col:87> 'T *' lvalue Var 0x55a92a3a98a8 's' 'T *'
|       |         | `-DeclRefExpr 0x55a92a3ac490 <col:91> 'const V' lvalue ParmVar 0x55a92a3810f8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55a92a3ac4d0 <col:98> 'bool' true
|       `-DeclRefExpr 0x55a92a3ac628 <col:106> 'Args::Slot *' lvalue Var 0x55a92a3a95c8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55a92a381958 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55a92a381368 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a3813e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55a92a381468 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55a92a3818b8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55a92a381530 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a3815b0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55a92a381628 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a3816c8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55a92a381768 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55a92a3ad658 <col:60, line:773:5>
|     |-DeclStmt 0x55a92a3ac720 <line:767:9, col:26>
|     | `-VarDecl 0x55a92a3ac6b8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55a92a3ad620 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55a92a3ad640 <line:768:13, col:58>
|       | `-VarDecl 0x55a92a3ac748 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55a92a3ac928 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55a92a3ac8f8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55a92a3ac8e0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55a92a3ac8c0 <col:26, col:58> 'String' (CXXTemporary 0x55a92a3ac8c0)
|       |           `-CXXMemberCallExpr 0x55a92a3ac850 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55a92a3ac7c0 <col:26> '<bound member function type>' ->find 0x55a92a39ed18
|       |             | `-CXXThisExpr 0x55a92a3ac7b0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55a92a3ac888 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a92a3ac7f0 <col:31> 'const char *' lvalue ParmVar 0x55a92a381530 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55a92a3ac8a0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a92a3ac810 <col:40> 'int' lvalue ParmVar 0x55a92a3815b0 'flags' 'int'
|       |             `-DeclRefExpr 0x55a92a3ac830 <col:47> 'Args::Slot *' lvalue Var 0x55a92a3ac6b8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55a92a3ac9e0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55a92a3ac9c8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55a92a3ac9a8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55a92a3ac978 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55a92a0ce678
|       |       `-ImplicitCastExpr 0x55a92a3ac960 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55a92a3ac940 <col:20> 'String' lvalue Var 0x55a92a3ac748 'str' 'String'
|       `-CompoundStmt 0x55a92a3ad5f8 <col:61, line:772:9>
|         |-DeclStmt 0x55a92a3acd20 <line:769:13, col:66>
|         | `-VarDecl 0x55a92a3aca38 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55a92a3accf0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55a92a3acc60 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55a92a3acca8 <col:49> 'T1' lvalue ParmVar 0x55a92a3816c8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55a92a3accd8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55a92a3accc8 <col:61> 'Args *' this
|         |-DeclStmt 0x55a92a3ad090 <line:770:13, col:66>
|         | `-VarDecl 0x55a92a3acda8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55a92a3ad060 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55a92a3acfd0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55a92a3ad018 <col:49> 'T2' lvalue ParmVar 0x55a92a381768 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55a92a3ad048 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55a92a3ad038 <col:61> 'Args *' this
|         `-CallExpr 0x55a92a3ad5c8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55a92a3ad0b8 <col:13> '<bound member function type>' ->postparse 0x55a92a39ef28
|           | `-CXXThisExpr 0x55a92a3ad0a8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55a92a3ad588 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55a92a3ad128 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55a92a3ad0e8 <col:23> 'T1 *' lvalue Var 0x55a92a3aca38 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55a92a3ad108 <col:29> 'T2 *' lvalue Var 0x55a92a3acda8 's2' 'T2 *'
|           | `-CallExpr 0x55a92a3ad540 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55a92a3ad310 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55a92a3ad358 <col:63> 'P' lvalue ParmVar 0x55a92a381628 'parser' 'P'
|           |   |-DeclRefExpr 0x55a92a3ad378 <col:71> 'String' lvalue Var 0x55a92a3ac748 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55a92a3ad428 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55a92a3ad3b8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a92a2c37b8 0x55a92a2c33d8 0x55a92a2c3008 0x55a92a2c2c28 0x55a92a2c2848 0x55a92a2c2478
|           |   | `-DeclRefExpr 0x55a92a3ad398 <col:77> 'T1 *' lvalue Var 0x55a92a3aca38 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55a92a3ad4e8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55a92a3ad478 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a92a2c37b8 0x55a92a2c33d8 0x55a92a2c3008 0x55a92a2c2c28 0x55a92a2c2848 0x55a92a2c2478
|           |   | `-DeclRefExpr 0x55a92a3ad458 <col:82> 'T2 *' lvalue Var 0x55a92a3acda8 's2' 'T2 *'
|           |   `-UnaryOperator 0x55a92a3ad528 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55a92a3ad518 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55a92a3ad5a8 <col:94> 'Args::Slot *' lvalue Var 0x55a92a3ac6b8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55a92a38a6b8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55a92a38a350 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a92a38a618 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55a92a38a400 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a38a480 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55a92a38a4f8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55a92a3adb70 <col:67, line:780:5>
|     |-DeclStmt 0x55a92a3ad6f0 <line:777:9, col:26>
|     | `-VarDecl 0x55a92a3ad688 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55a92a3adb38 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55a92a3adb58 <line:778:13, col:58>
|       | `-VarDecl 0x55a92a3ad718 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55a92a3ad8f8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55a92a3ad8c8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55a92a3ad8b0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55a92a3ad890 <col:26, col:58> 'String' (CXXTemporary 0x55a92a3ad890)
|       |           `-CXXMemberCallExpr 0x55a92a3ad820 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55a92a3ad790 <col:26> '<bound member function type>' ->find 0x55a92a39ed18
|       |             | `-CXXThisExpr 0x55a92a3ad780 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55a92a3ad858 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a92a3ad7c0 <col:31> 'const char *' lvalue ParmVar 0x55a92a38a400 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55a92a3ad870 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a92a3ad7e0 <col:40> 'int' lvalue ParmVar 0x55a92a38a480 'flags' 'int'
|       |             `-DeclRefExpr 0x55a92a3ad800 <col:47> 'Args::Slot *' lvalue Var 0x55a92a3ad688 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55a92a3ad9b0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55a92a3ad998 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55a92a3ad978 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55a92a3ad948 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55a92a0ce678
|       |       `-ImplicitCastExpr 0x55a92a3ad930 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55a92a3ad910 <col:20> 'String' lvalue Var 0x55a92a3ad718 'str' 'String'
|       `-CallExpr 0x55a92a3adb08 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55a92a3ad9d8 <col:13> '<bound member function type>' ->postparse 0x55a92a39ef28
|         | `-CXXThisExpr 0x55a92a3ad9c8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55a92a3adab8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55a92a3ada28 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55a92a3ada08 <col:23> 'P' lvalue ParmVar 0x55a92a38a4f8 'parser' 'P'
|         | |-DeclRefExpr 0x55a92a3ada70 <col:36> 'String' lvalue Var 0x55a92a3ad718 'str' 'String'
|         | `-UnaryOperator 0x55a92a3adaa0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55a92a3ada90 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55a92a3adae8 <col:49> 'Args::Slot *' lvalue Var 0x55a92a3ad688 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55a92a38aa58 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55a92a38a728 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a92a38a9b8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55a92a38a7e0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a38a860 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55a92a38a8d8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55a92a3ae4e0 <col:71, line:792:5>
|     |-DeclStmt 0x55a92a3adc08 <line:784:9, col:26>
|     | `-VarDecl 0x55a92a3adba0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55a92a3adcd8 <line:785:9, col:29>
|     | `-VarDecl 0x55a92a3adc38 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55a92a3adcc0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55a92a3adca0 <col:28> 'int' 1
|     |-WhileStmt 0x55a92a3ae390 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55a92a3ae3b0 <line:786:16, col:61>
|     | | `-VarDecl 0x55a92a3add00 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55a92a3adee0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55a92a3adeb0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55a92a3ade98 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55a92a3ade78 <col:29, col:61> 'String' (CXXTemporary 0x55a92a3ade78)
|     | |           `-CXXMemberCallExpr 0x55a92a3ade08 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55a92a3add78 <col:29> '<bound member function type>' ->find 0x55a92a39ed18
|     | |             | `-CXXThisExpr 0x55a92a3add68 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55a92a3ade40 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55a92a3adda8 <col:34> 'const char *' lvalue ParmVar 0x55a92a38a7e0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55a92a3ade58 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55a92a3addc8 <col:43> 'int' lvalue ParmVar 0x55a92a38a860 'flags' 'int'
|     | |             `-DeclRefExpr 0x55a92a3adde8 <col:50> 'Args::Slot *' lvalue Var 0x55a92a3adba0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55a92a3adf98 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55a92a3adf80 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55a92a3adf60 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55a92a3adf30 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55a92a0ce678
|     | |       `-ImplicitCastExpr 0x55a92a3adf18 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55a92a3adef8 <col:23> 'String' lvalue Var 0x55a92a3add00 'str' 'String'
|     | `-CompoundStmt 0x55a92a3ae368 <col:64, line:790:9>
|     |   |-CallExpr 0x55a92a3ae0f0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55a92a3adfc0 <col:13> '<bound member function type>' ->postparse 0x55a92a39ef28
|     |   | | `-CXXThisExpr 0x55a92a3adfb0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55a92a3ae0a0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55a92a3ae010 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55a92a3adff0 <col:23> 'P' lvalue ParmVar 0x55a92a38a8d8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55a92a3ae058 <col:36> 'String' lvalue Var 0x55a92a3add00 'str' 'String'
|     |   | | `-UnaryOperator 0x55a92a3ae088 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55a92a3ae078 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55a92a3ae0d0 <col:49> 'Args::Slot *' lvalue Var 0x55a92a3adba0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55a92a3ae288 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55a92a3ae120 <col:13> 'int' lvalue Var 0x55a92a3adc38 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55a92a3ae270 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55a92a3ae250 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55a92a3ae1b8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55a92a3ae198 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55a92a3ae180 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55a92a3ae140 <col:28> 'int' lvalue Var 0x55a92a3adc38 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55a92a3ae160 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55a92a3ae238 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55a92a3ae208 <col:49> 'bool' lvalue ->_read_status 0x55a92a2823b0
|     |   |         `-ImplicitCastExpr 0x55a92a3ae1e8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55a92a3ae1d8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55a92a3ae338 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55a92a3ae2a8 <col:13> 'int' lvalue ParmVar 0x55a92a38a860 'flags' 'int'
|     |     `-UnaryOperator 0x55a92a3ae320 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55a92a3ae308 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55a92a3ae2e8 <col:23> 'const int' lvalue Var 0x55a92a36efd8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55a92a3ae4c0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55a92a3ae3f8 <col:9> 'bool' lvalue ->_read_status 0x55a92a2823b0
|       | `-ImplicitCastExpr 0x55a92a3ae3d8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55a92a3ae3c8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55a92a3ae4a0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55a92a3ae480 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55a92a3ae468 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55a92a3ae428 <col:25> 'int' lvalue Var 0x55a92a3adc38 'read_status' 'int'
|           `-IntegerLiteral 0x55a92a3ae448 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55a92a38af38 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55a92a38aac8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a38ab48 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a92a38ae98 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55a92a38ac08 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a38ac88 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55a92a38ad00 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a38ada8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55a92a3af470 <col:84, line:805:5>
|     |-DeclStmt 0x55a92a3ae588 <line:796:9, col:26>
|     | `-VarDecl 0x55a92a3ae520 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55a92a3ae658 <line:797:9, col:29>
|     | `-VarDecl 0x55a92a3ae5b8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55a92a3ae640 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55a92a3ae620 <col:28> 'int' 1
|     |-DeclStmt 0x55a92a3ae990 <line:798:9, col:71>
|     | `-VarDecl 0x55a92a3ae6a8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55a92a3ae960 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55a92a3ae8d0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55a92a3ae918 <col:55> 'T' lvalue ParmVar 0x55a92a38ada8 'variable' 'T &'
|     |     `-UnaryOperator 0x55a92a3ae948 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55a92a3ae938 <col:66> 'Args *' this
|     |-WhileStmt 0x55a92a3af320 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55a92a3af340 <line:799:16, col:61>
|     | | `-VarDecl 0x55a92a3ae9b8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55a92a3aeb98 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55a92a3aeb68 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55a92a3aeb50 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55a92a3aeb30 <col:29, col:61> 'String' (CXXTemporary 0x55a92a3aeb30)
|     | |           `-CXXMemberCallExpr 0x55a92a3aeac0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55a92a3aea30 <col:29> '<bound member function type>' ->find 0x55a92a39ed18
|     | |             | `-CXXThisExpr 0x55a92a3aea20 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55a92a3aeaf8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55a92a3aea60 <col:34> 'const char *' lvalue ParmVar 0x55a92a38ac08 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55a92a3aeb10 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55a92a3aea80 <col:43> 'int' lvalue ParmVar 0x55a92a38ac88 'flags' 'int'
|     | |             `-DeclRefExpr 0x55a92a3aeaa0 <col:50> 'Args::Slot *' lvalue Var 0x55a92a3ae520 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55a92a3aec50 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55a92a3aec38 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55a92a3aec18 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55a92a3aebe8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55a92a0ce678
|     | |       `-ImplicitCastExpr 0x55a92a3aebd0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55a92a3aebb0 <col:23> 'String' lvalue Var 0x55a92a3ae9b8 'str' 'String'
|     | `-CompoundStmt 0x55a92a3af2f8 <col:64, line:803:9>
|     |   |-CallExpr 0x55a92a3af080 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55a92a3aec78 <col:13> '<bound member function type>' ->postparse 0x55a92a39ef28
|     |   | | `-CXXThisExpr 0x55a92a3aec68 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55a92a3af040 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55a92a3aeca8 <col:23> 'T *' lvalue Var 0x55a92a3ae6a8 's' 'T *'
|     |   | | `-CallExpr 0x55a92a3af000 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55a92a3aee90 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55a92a3aeed8 <col:56> 'P' lvalue ParmVar 0x55a92a38ad00 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55a92a3aeef8 <col:64> 'String' lvalue Var 0x55a92a3ae9b8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55a92a3aefa8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55a92a3aef38 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a92a2c37b8 0x55a92a2c33d8 0x55a92a2c3008 0x55a92a2c2c28 0x55a92a2c2848 0x55a92a2c2478
|     |   | |   | `-DeclRefExpr 0x55a92a3aef18 <col:70> 'T *' lvalue Var 0x55a92a3ae6a8 's' 'T *'
|     |   | |   `-UnaryOperator 0x55a92a3aefe8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55a92a3aefd8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55a92a3af060 <col:81> 'Args::Slot *' lvalue Var 0x55a92a3ae520 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55a92a3af218 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55a92a3af0b0 <col:13> 'int' lvalue Var 0x55a92a3ae5b8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55a92a3af200 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55a92a3af1e0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55a92a3af148 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55a92a3af128 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55a92a3af110 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55a92a3af0d0 <col:28> 'int' lvalue Var 0x55a92a3ae5b8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55a92a3af0f0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55a92a3af1c8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55a92a3af198 <col:49> 'bool' lvalue ->_read_status 0x55a92a2823b0
|     |   |         `-ImplicitCastExpr 0x55a92a3af178 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55a92a3af168 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55a92a3af2c8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55a92a3af238 <col:13> 'int' lvalue ParmVar 0x55a92a38ac88 'flags' 'int'
|     |     `-UnaryOperator 0x55a92a3af2b0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55a92a3af298 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55a92a3af278 <col:23> 'const int' lvalue Var 0x55a92a36efd8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55a92a3af450 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55a92a3af388 <col:9> 'bool' lvalue ->_read_status 0x55a92a2823b0
|       | `-ImplicitCastExpr 0x55a92a3af368 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55a92a3af358 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55a92a3af430 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55a92a3af410 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55a92a3af3f8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55a92a3af3b8 <col:25> 'int' lvalue Var 0x55a92a3ae5b8 'read_status' 'int'
|           `-IntegerLiteral 0x55a92a3af3d8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55a92a38b518 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55a92a38afb0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a92a38b028 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a92a38b478 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55a92a38b0e8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a92a38b168 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55a92a38b1e0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55a92a38b330 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55a92a3b0278 <col:87, line:821:5>
|     |-DeclStmt 0x55a92a3af520 <line:809:9, col:26>
|     | `-VarDecl 0x55a92a3af4b8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55a92a3af5f0 <line:810:9, col:29>
|     | `-VarDecl 0x55a92a3af550 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55a92a3af5d8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55a92a3af5b8 <col:28> 'int' 1
|     |-DeclStmt 0x55a92a3af838 <line:811:9, col:38>
|     | `-VarDecl 0x55a92a3af720 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55a92a3af810 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55a92a3af798 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55a92a3af7f0 <col:29> 'Vector<T>' lvalue ParmVar 0x55a92a38b330 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55a92a3b0128 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55a92a3b0148 <line:812:16, col:61>
|     | | `-VarDecl 0x55a92a3af860 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55a92a3afa40 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55a92a3afa10 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55a92a3af9f8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55a92a3af9d8 <col:29, col:61> 'String' (CXXTemporary 0x55a92a3af9d8)
|     | |           `-CXXMemberCallExpr 0x55a92a3af968 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55a92a3af8d8 <col:29> '<bound member function type>' ->find 0x55a92a39ed18
|     | |             | `-CXXThisExpr 0x55a92a3af8c8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55a92a3af9a0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55a92a3af908 <col:34> 'const char *' lvalue ParmVar 0x55a92a38b0e8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55a92a3af9b8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55a92a3af928 <col:43> 'int' lvalue ParmVar 0x55a92a38b168 'flags' 'int'
|     | |             `-DeclRefExpr 0x55a92a3af948 <col:50> 'Args::Slot *' lvalue Var 0x55a92a3af4b8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55a92a3afaf8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55a92a3afae0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55a92a3afac0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55a92a3afa90 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55a92a0ce678
|     | |       `-ImplicitCastExpr 0x55a92a3afa78 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55a92a3afa58 <col:23> 'String' lvalue Var 0x55a92a3af860 'str' 'String'
|     | `-CompoundStmt 0x55a92a3b00f0 <col:64, line:819:9>
|     |   |-DeclStmt 0x55a92a3afbb8 <line:813:13, col:23>
|     |   | `-VarDecl 0x55a92a3afb20 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55a92a3afb98 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55a92a3afd38 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55a92a3afbe0 <col:13> '<bound member function type>' ->postparse 0x55a92a39ef28
|     |   | | `-CXXThisExpr 0x55a92a3afbd0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55a92a3afce0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55a92a3afc30 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55a92a3afc10 <col:23> 'P' lvalue ParmVar 0x55a92a38b1e0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55a92a3afc78 <col:36> 'String' lvalue Var 0x55a92a3af860 'str' 'String'
|     |   | | |-DeclRefExpr 0x55a92a3afc98 <col:41> 'T' lvalue Var 0x55a92a3afb20 'sx' 'T'
|     |   | | `-UnaryOperator 0x55a92a3afcc8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55a92a3afcb8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55a92a3afd18 <col:53> 'Args::Slot *' lvalue Var 0x55a92a3af4b8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55a92a3afe90 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55a92a3afdc8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55a92a3afd98 <col:17> 'bool' lvalue ->_read_status 0x55a92a2823b0
|     |   | |   `-ImplicitCastExpr 0x55a92a3afd78 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55a92a3afd68 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55a92a3afe68 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55a92a3afe00 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55a92a3afde0 <col:17> 'Vector<T> *' lvalue Var 0x55a92a3af720 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55a92a3afe48 <col:30> 'T' lvalue Var 0x55a92a3afb20 'sx' 'T'
|     |   |-BinaryOperator 0x55a92a3b0010 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55a92a3afea8 <col:13> 'int' lvalue Var 0x55a92a3af550 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55a92a3afff8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55a92a3affd8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55a92a3aff40 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55a92a3aff20 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55a92a3aff08 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55a92a3afec8 <col:28> 'int' lvalue Var 0x55a92a3af550 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55a92a3afee8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55a92a3affc0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55a92a3aff90 <col:49> 'bool' lvalue ->_read_status 0x55a92a2823b0
|     |   |         `-ImplicitCastExpr 0x55a92a3aff70 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55a92a3aff60 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55a92a3b00c0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55a92a3b0030 <col:13> 'int' lvalue ParmVar 0x55a92a38b168 'flags' 'int'
|     |     `-UnaryOperator 0x55a92a3b00a8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55a92a3b0090 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55a92a3b0070 <col:23> 'const int' lvalue Var 0x55a92a36efd8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55a92a3b0258 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55a92a3b0190 <col:9> 'bool' lvalue ->_read_status 0x55a92a2823b0
|       | `-ImplicitCastExpr 0x55a92a3b0170 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55a92a3b0160 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55a92a3b0238 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55a92a3b0218 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55a92a3b0200 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55a92a3b01c0 <col:25> 'int' lvalue Var 0x55a92a3af550 'read_status' 'int'
|           `-IntegerLiteral 0x55a92a3b01e0 <col:40> 'int' 1
|-AccessSpecDecl 0x55a92a38b590 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55a92a38b5b8 prev 0x55a92a36d2e0 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55a92a38b6b0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55a92a38b7a0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55a92a3b02b0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55a92a38b890 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55a92a3b02c0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55a92a38b990 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55a92a38ba40 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55a92a38bae8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55a92a38bae8
| | `-ParmVarDecl 0x55a92a38bbf8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55a92a38c3b8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55a92a38c3b8
|   `-ParmVarDecl 0x55a92a38c4c8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55a92a38bc68 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55a92a38bdc8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55a92a38bfc0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55a92a38be70 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55a92a38bee8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55a92a3b04a0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55a92a38c278 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55a92a3b0310 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55a92a3b02d0 <col:20> 'void *' lvalue ParmVar 0x55a92a38be70 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55a92a38c2e0 '_slot' 'char *'
| | | `-CXXNewExpr 0x55a92a3b0398 <col:32, col:45> 'char *' array Function 0x55a929ef20d8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55a92a3b0380 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55a92a3b0350 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55a92a38bee8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55a92a38c340 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55a92a3b0460 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55a92a3b0420 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55a92a38bee8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55a92a3b0520 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55a92a38c0c0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55a92a38b890 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55a92a3b05a8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55a92a3b0588 <line:840:13, col:22> 'void' array Function 0x55a929ef2438 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55a92a3b0570 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55a92a3b0540 <col:22> 'char *' lvalue ->_slot 0x55a92a38c2e0
| |         `-CXXThisExpr 0x55a92a3b0530 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55a92a38c1c0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55a92a38b990 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55a92a3b0798 <col:22, line:844:9>
| |   `-CallExpr 0x55a92a3b0700 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55a92a3b06e8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55a92a3b06c8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55a929ffe0d8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55a92a3b0738 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55a92a3b0618 <col:20> 'void *' lvalue ->_ptr 0x55a92a38c278
| |     |   `-CXXThisExpr 0x55a92a3b0608 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55a92a3b0768 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55a92a3b0750 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55a92a3b0658 <col:26> 'char *' lvalue ->_slot 0x55a92a38c2e0
| |     |     `-CXXThisExpr 0x55a92a3b0648 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55a92a3b0780 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55a92a3b0698 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55a92a38c340
| |         `-CXXThisExpr 0x55a92a3b0688 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55a92a38c278 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55a92a38c2e0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55a92a38c340 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55a92a38c538 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55a92a38c538
| | `-ParmVarDecl 0x55a92a38c648 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55a92a38c6e8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55a92a38c6e8
|   `-ParmVarDecl 0x55a92a38c7f8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55a92a38c998 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55a92a38c868 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55a92a38c908 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55a92a38cc30 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55a92a38ce28 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55a92a38ccf8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55a92a38cfa8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55a92a3b07d0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55a92a3b07b0 <col:20> 'T *' lvalue ParmVar 0x55a92a38ccf8 'ptr' 'T *'
|   | `-CompoundStmt 0x55a92a3b0820 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55a92a38cef8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55a92a38b990 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55a92a3b09d0 <col:22, line:857:9>
|   |   `-CallExpr 0x55a92a3b09a0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55a92a3b0830 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55a92a0b6808 0x55a92a060b38
|   |     |-CXXOperatorCallExpr 0x55a92a3b0930 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55a92a3b08c0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a92a2c37b8 0x55a92a2c33d8 0x55a92a2c3008 0x55a92a2c2c28 0x55a92a2c2848 0x55a92a2c2478
|   |     | `-MemberExpr 0x55a92a3b0890 <col:29> 'T *' lvalue ->_ptr 0x55a92a38cfa8
|   |     |   `-CXXThisExpr 0x55a92a3b0880 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55a92a3b0970 <col:35> 'T' lvalue ->_slot 0x55a92a38d008
|   |       `-CXXThisExpr 0x55a92a3b0960 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55a92a38cfa8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55a92a38d008 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55a92a38d070 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55a92a38d170 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55a92a38d1c0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a92a38d150 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55a92a38d130 <col:31> 'int' 48
|-FieldDecl 0x55a92a38d1e8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55a92a38d248 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55a92a38d2a8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55a92a38d3e0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55a92a39e5c0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55a92a39e620 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55a92a39e6d0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55a92a39e8f8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55a92a39e800 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55a92a39ea48 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55a92a39e9b8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55a92a39ed18 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55a92a39eb08 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55a92a39eb88 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55a92a39ec30 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55a92a39ef28 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55a92a39ede0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55a92a39ee58 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55a92a39eff8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55a92a39f148 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55a92a39f0b0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55a92a39f4d8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55a92a39f208 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55a92a39f288 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55a92a39f330 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55a92a39f3e8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55a92a39f700 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55a92a39f5b0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55a92a39f628 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55a92a39fa18 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55a92a39f7b0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55a92a39f978 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55a92a39f888 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct an_rxframe
         0 |   u_int32_t an_rx_time
         4 |   u_int16_t an_rx_status
         6 |   u_int16_t an_rx_payload_len
         8 |   u_int8_t an_rsvd0
         9 |   u_int8_t an_rx_signal_strength
        10 |   u_int8_t an_rx_rate
        11 |   u_int8_t an_rx_chan
        12 |   u_int8_t an_rx_assoc_cnt
        13 |   u_int8_t [3] an_rsvd1
        16 |   u_int8_t [4] an_plcp_hdr
        20 |   u_int16_t an_frame_ctl
        22 |   u_int16_t an_duration
        24 |   u_int8_t [6] an_addr1
        30 |   u_int8_t [6] an_addr2
        36 |   u_int8_t [6] an_addr3
        42 |   u_int16_t an_seq_ctl
        44 |   u_int8_t [6] an_addr4
        50 |   u_int8_t an_gaplen
           | [sizeof=51, dsize=51, align=1,
           |  nvsize=51, nvalign=1]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a92a0bf530 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a92a0bf648 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55a92a0bf6d8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55a92a0bf7a8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55a92a0bf890 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55a92a0bfaa8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55a92a0bf950 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a92a0bfc58 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55a92a0bfb60 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55a92a0bfda0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55a92a0bfd10 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55a92a0bfee8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55a92a0bfe58 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a92a0c0030 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55a92a0bffa0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a92a0c00f8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55a92a0c0240 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55a92a0c01b0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55a92a0c0308 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55a92a0c0450 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55a92a0c03c0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55a92a0c05c8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55a92a0c0508 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a92a0c0710 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55a92a0c0680 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a92a0c07d8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55a92a0c0998 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55a92a0c0888 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55a92a0c0900 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a92a0c0be8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55a92a0c0a58 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a92a0c0ad0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55a92a0c0c98 <col:86> "" ""
|-CXXMethodDecl 0x55a92a0c0f08 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55a92a0c0d78 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55a92a0c0df0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a92a0c10b8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55a92a0c0fc8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55a92a0c1268 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55a92a0c1170 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55a92a0c1538 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55a92a0c1320 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55a92a0c1398 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55a92a0c1410 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a92a0c1818 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55a92a0c1600 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55a92a0c1678 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a92a0c16f0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55a92a0c18d0 <col:115> "" ""
|-AccessSpecDecl 0x55a92a0c1940 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55a92a0c1978 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a92a0c1e80 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55a92a0c1e80
| `-ParmVarDecl 0x55a92a0c1f88 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55a92a0c2028 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55a92a0c2028
| `-ParmVarDecl 0x55a92a0c2138 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55a92a0f7768 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55a92a2ea570 <col:7>
|-CXXConstructorDecl 0x55a92a0f7840 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55a92a0f7840
| `-ParmVarDecl 0x55a92a0f7958 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55a92a0f79c8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55a92a0f79c8
| `-ParmVarDecl 0x55a92a0f7ad8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55a92a2ecf70 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a92a2d9118 prev 0x55a92a2ce320 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a92a2d9210 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55a92a2d9300 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55a92a2d9428 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55a92a2d95a8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55a92a2d9728 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55a92a2d98a8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55a92a2ea6d8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55a92a2eaf48 <col:11>
|-CXXDestructorDecl 0x55a92a2ea7b0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55a92a2ea8e8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55a92a2ea8e8
| `-ParmVarDecl 0x55a92a2ea9f8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55a92a2eaa98 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55a92a2eaa98
| `-ParmVarDecl 0x55a92a2eaba8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55a92a2ed968 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55a92a2eda78 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55a92a2edcf8 <col:11>
|   `-ReturnStmt 0x55a92a2edce8 <col:11>
|     `-UnaryOperator 0x55a92a2edcd0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a92a2edcc0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55a92a2edae8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55a92a2edae8
  `-ParmVarDecl 0x55a92a2edbf8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a92a2d9910 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a92a2d9a28 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55a92a2d9ac8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55a92a2d9b30 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55a92a2d9b98 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55a92a2d9c00 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55a92a2d9c60 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55a92a2d9d20 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55a92a2d9d80 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55a92a2d9de0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55a92a2ea5e8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55a92a2d9ac8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55a92a2eaf58 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55a92a2eafb0 <col:12>
|-CXXConstructorDecl 0x55a92a2eac18 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55a92a2eac18
| `-ParmVarDecl 0x55a92a2ead28 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55a92a2eadc8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55a92a2eadc8
| `-ParmVarDecl 0x55a92a2eaed8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55a92a2ed050 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a92a2c7a30 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55a92a2c7b48 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55a92a2c7bd8 <col:16, col:22> col:16 public
|-EnumDecl 0x55a92a2c7c00 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55a92a2c7d00 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55a92a2c7de0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a2c7ce0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55a92a2c7cc0 <col:21> 'int' 28
| `-EnumConstantDecl 0x55a92a2c7d90 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55a92a2c7df8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a92a2c7d70 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55a92a2c7d50 <col:22> 'int' 64
|-CXXMethodDecl 0x55a92a2c8138 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55a92a2c7e20 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a92a2c7ea0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55a92a2c7f18 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a92a2c7f90 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55a92a2c81f8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55a92a2c83f8 <line:54:5, col:109> col:35 used make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55a92a2c8270 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55a92a2c82e8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55a92a2c84a8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55a92a2c8608 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55a92a2c8518 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55a92a2c86b0 <col:72> warn_unused_result ""
|-TypedefDecl 0x55a92a2c8a10 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55a92a2c89a0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55a92a2c8940 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55a92a2c8900 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55a929d9e4e0 'void'
|       |-PointerType 0x55a92a047dd0 'unsigned char *'
|       | `-BuiltinType 0x55a929d9e5e0 'unsigned char'
|       |-TypedefType 0x55a929e44180 'size_t' sugar
|       | |-Typedef 0x55a929e0ebe0 'size_t'
|       | `-BuiltinType 0x55a929d9e640 'unsigned long'
|       `-PointerType 0x55a929d9ece0 'void *'
|         `-BuiltinType 0x55a929d9e4e0 'void'
|-CXXMethodDecl 0x55a92a2c8e88 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55a92a2c8a80 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55a92a2c8af8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a92a2c8b90 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55a92a2c8c10 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55a92a2e3580 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55a92a2e3568 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55a92a2e3530 <col:58> 'int' 0
| |-ParmVarDecl 0x55a92a2c8c90 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55a92a2e35a8 <col:76> 'int' 0
| |-ParmVarDecl 0x55a92a2c8d10 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55a92a2e35c8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55a92a2c8f58 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55a92a2c8fd8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55a92a2c9098 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55a92a2c9138 <col:20>
| `-OptimizeNoneAttr 0x55a92a2c9190 <col:30>
|-CXXMethodDecl 0x55a92a2c9208 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55a92a2c92a8 <col:20>
| `-OptimizeNoneAttr 0x55a92a2c9300 <col:30>
|-CXXMethodDecl 0x55a92a2c9378 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55a92a2c9418 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55a92a2c94c8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55a92a2c9568 <col:20>
| |-OptimizeNoneAttr 0x55a92a2c95c0 <col:30>
| `-WarnUnusedResultAttr 0x55a92a2c95e8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55a92a2c9640 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55a92a2c96e0 <col:20>
| `-OptimizeNoneAttr 0x55a92a2c9738 <col:30>
|-CXXMethodDecl 0x55a92a2c9788 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55a92a2c9828 <col:20>
| `-OptimizeNoneAttr 0x55a92a2c9880 <col:30>
|-CXXMethodDecl 0x55a92a2c98c8 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x55a92a2c9968 <col:20>
| `-OptimizeNoneAttr 0x55a92a2c99c0 <col:30>
|-CXXMethodDecl 0x55a92a2c9a08 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55a92a2c9ac8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55a92a2c9b90 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55a92a2c9c58 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55a92a2c9d18 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55a92a2c9e38 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55a92a2e3690 <col:54, line:99:5>
|   `-ReturnStmt 0x55a92a2e3680 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55a92a2e3668 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55a92a2e3638 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55a92a2da118
|         `-CXXThisExpr 0x55a92a2e3628 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55a92a2c9fd8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55a92a2c9ee8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55a92a2e3740 <col:67, line:103:5>
|   `-BinaryOperator 0x55a92a2e3720 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55a92a2e36b8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55a92a2da118
|     | `-CXXThisExpr 0x55a92a2e36a8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55a92a2e3708 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55a92a2e36e8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55a92a2c9ee8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55a92a2ca0d0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55a92a2e37c0 <col:33, line:107:5>
|   `-ReturnStmt 0x55a92a2e37b0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55a92a2e3798 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55a92a2e3768 <col:16> 'void *' lvalue ->_destructor_argument 0x55a92a2da180
|         `-CXXThisExpr 0x55a92a2e3758 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55a92a2ca190 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55a92a2e3df0 <col:25, line:113:5>
|   |-ParenExpr 0x55a92a2e3b38 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55a92a2e3b08 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55a92a2e3878 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55a92a2e3850 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55a92a2e3818 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55a92a2e37e8 <col:24> '<bound member function type>' ->shared 0x55a92a2c9208
|   |   |       `-ImplicitCastExpr 0x55a92a2e3838 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55a92a2e37d8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55a92a2e38d8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a92a2e38b8 <col:42> 'int' 0
|   |   `-CallExpr 0x55a92a2e3a68 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55a92a2e3a50 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a92a2e3a30 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a929e3aee0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a92a2e3aa8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e3948 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55a92a2e3ac0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e3970 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a92a2e3ad8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a92a2e39a8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55a92a2e3af0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a92a2e3a18 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a92a2e3a00 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a92a2e39c8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55a92a2e3d38 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55a92a2e3b68 <col:2> 'unsigned char *' lvalue ->_head 0x55a92a2d9f20
|   | | `-CXXThisExpr 0x55a92a2e3b58 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55a92a2e3d20 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55a92a2e3d00 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55a92a2e3ba8 <col:10> 'unsigned char *' lvalue ->_data 0x55a92a2d9f88
|   |     | `-CXXThisExpr 0x55a92a2e3b98 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55a92a2e3ce8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55a92a2e3cc8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55a92a2e3be8 <col:18> 'unsigned char *' lvalue ->_tail 0x55a92a2d9ff0
|   |         | `-CXXThisExpr 0x55a92a2e3bd8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55a92a2e3cb0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55a92a2e3c90 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55a92a2e3c28 <col:26> 'unsigned char *' lvalue ->_end 0x55a92a2da058
|   |             | `-CXXThisExpr 0x55a92a2e3c18 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55a92a2e3c78 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55a92a2e3c58 <col:33> 'int' 0
|   `-BinaryOperator 0x55a92a2e3dd0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55a92a2e3d68 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55a92a2da118
|     | `-CXXThisExpr 0x55a92a2e3d58 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55a92a2e3db8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55a92a2e3d98 <col:16> 'int' 0
|-CXXMethodDecl 0x55a92a2ca2d0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55a92a2ca240 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a92a2ca378 <col:20>
| |-OptimizeNoneAttr 0x55a92a2ca3d0 <col:30>
| `-WarnUnusedResultAttr 0x55a92a2ca3f8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55a92a2ca4c8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55a92a2ca438 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a92a2ca570 <col:20>
| |-OptimizeNoneAttr 0x55a92a2ca5c8 <col:30>
| `-WarnUnusedResultAttr 0x55a92a2ca5f0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55a92a2ca728 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55a92a2ca630 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55a92a2ca7d0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55a92a2ca8d0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55a92a2ca840 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a92a2ca978 <col:20>
| `-OptimizeNoneAttr 0x55a92a2ca9d0 <col:30>
|-CXXMethodDecl 0x55a92a2caa98 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55a92a2caa08 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55a92a2cab40 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55a92a2cac40 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55a92a2cabb0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55a92a2cace8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55a92a2cade8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55a92a2cad58 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a92a2cae90 <col:20>
| `-OptimizeNoneAttr 0x55a92a2caee8 <col:30>
|-CXXMethodDecl 0x55a92a2cb078 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55a92a2caf28 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55a92a2cafa0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55a92a2e35e8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55a92a2cb128 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55a92a2cb328 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55a92a2cb1a0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55a92a2cb218 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a92a2cb538 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55a92a2cb3e8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55a92a2cb460 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a92a2cb748 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55a92a2cb5f8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55a92a2cb678 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55a92a2e35f8 <col:39> 'int' 0
|-CXXMethodDecl 0x55a92a2cb818 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55a92a2cb8e0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55a92a2cb9a8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55a92a2cba68 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55a92a2cbb30 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55a92a2cbc78 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55a92a2cbbe8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55a92a2cbe48 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55a92a2cbd38 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55a92a2cbdb0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a92a2cbf18 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55a92a2cbfd8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55a92a2cc078 <col:20>
| `-OptimizeNoneAttr 0x55a92a2cc0d0 <col:30>
|-CXXMethodDecl 0x55a92a2cc120 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55a92a2cc1c0 <col:20>
| `-OptimizeNoneAttr 0x55a92a2cc218 <col:30>
|-CXXMethodDecl 0x55a92a2cc268 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55a92a2cc328 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55a92a2cc3f0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55a92a2cc490 <col:20>
| `-OptimizeNoneAttr 0x55a92a2cc4e8 <col:30>
|-CXXMethodDecl 0x55a92a2cc638 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55a92a2cc528 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55a92a2cc5a0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a92a2cc788 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55a92a2cc6f8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a92a2cc860 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55a92a2cc920 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55a92a2cc9c0 <col:20>
| `-OptimizeNoneAttr 0x55a92a2cca18 <col:30>
|-CXXMethodDecl 0x55a92a2cca68 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55a92a2ccb08 <col:20>
| `-OptimizeNoneAttr 0x55a92a2ccb60 <col:30>
|-CXXMethodDecl 0x55a92a2ccbb0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55a92a2ccc78 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55a92a2ccd18 <col:20>
| `-OptimizeNoneAttr 0x55a92a2ccd70 <col:30>
|-CXXMethodDecl 0x55a92a2ccdb8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55a92a2cced8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55a92a2cd048 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55a92a2ccf88 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55a92a2cd138 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55a92a2cd1d8 <col:20>
| `-OptimizeNoneAttr 0x55a92a2cd230 <col:30>
|-CXXMethodDecl 0x55a92a2cd280 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55a92a2cd340 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55a92a2cd578 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55a92a2cd3f0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55a92a2cd468 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a92a2cd628 <col:20>
| `-OptimizeNoneAttr 0x55a92a2cd680 <col:30>
|-CXXMethodDecl 0x55a92a2cd728 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55a92a2cd7c8 <col:20>
| `-OptimizeNoneAttr 0x55a92a2cd820 <col:30>
|-CXXMethodDecl 0x55a92a2cd870 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55a92a2cd910 <col:20>
| `-OptimizeNoneAttr 0x55a92a2cd968 <col:30>
|-CXXMethodDecl 0x55a92a2cd9b0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55a92a2cda50 <col:20>
| `-OptimizeNoneAttr 0x55a92a2cdaa8 <col:30>
|-CXXMethodDecl 0x55a92a2cdba8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55a92a2cdae0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55a92a2cdc50 <col:20>
| `-OptimizeNoneAttr 0x55a92a2cdca8 <col:30>
|-CXXMethodDecl 0x55a92a2cde68 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55a92a2cdce0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55a92a2cdd58 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a92a2cdf18 <col:20>
| `-OptimizeNoneAttr 0x55a92a2cdf70 <col:30>
|-CXXMethodDecl 0x55a92a2ce018 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55a92a2ce138 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55a92a2ce258 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55a92a2ce2f8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55a92a2ce320 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55a92a2ce448 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55a92a2ce4e8 <col:20>
| `-OptimizeNoneAttr 0x55a92a2ce540 <col:30>
|-CXXMethodDecl 0x55a92a2ce5e8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55a92a2ce688 <col:20>
| `-OptimizeNoneAttr 0x55a92a2ce6e0 <col:30>
|-AccessSpecDecl 0x55a92a2ce708 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55a92a2ce730 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55a92a2ce830 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55a92a2ce880 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a92a2ce810 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55a92a2ce7f0 <col:14> 'int' 48
|-CXXMethodDecl 0x55a92a2ce8e8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55a92a2ce988 <col:20>
| `-OptimizeNoneAttr 0x55a92a2ce9e0 <col:30>
|-CXXMethodDecl 0x55a92a2cea58 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55a92a2ceaf8 <col:20>
| `-OptimizeNoneAttr 0x55a92a2ceb50 <col:30>
|-CXXMethodDecl 0x55a92a2cec18 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55a92a2ceb88 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55a92a2cedb8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55a92a2cef58 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55a92a2cee68 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55a92a2cf000 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55a92a2cf100 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55a92a2cf4b0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a2cf0e0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55a92a2cf0c0 <col:9> 'int' 0
| |-EnumConstantDecl 0x55a92a2cf190 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55a92a2cf4c8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a2cf170 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55a92a2cf150 <col:14> 'int' 1
| |-EnumConstantDecl 0x55a92a2cf220 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55a92a2cf4e0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a2cf200 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55a92a2cf1e0 <col:14> 'int' 2
| |-EnumConstantDecl 0x55a92a2cf2b0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55a92a2cf4f8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a2cf290 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55a92a2cf270 <col:14> 'int' 3
| |-EnumConstantDecl 0x55a92a2cf340 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55a92a2cf510 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a2cf320 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55a92a2cf300 <col:13> 'int' 4
| |-EnumConstantDecl 0x55a92a2cf3d0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55a92a2cf528 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a2cf3b0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55a92a2cf390 <col:13> 'int' 5
| `-EnumConstantDecl 0x55a92a2cf460 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55a92a2cf540 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a92a2cf440 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55a92a2cf420 <col:14> 'int' 6
|-CXXMethodDecl 0x55a92a2cf5a8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55a92a2cf648 <col:20>
| `-OptimizeNoneAttr 0x55a92a2cf6a0 <col:30>
|-CXXMethodDecl 0x55a92a2cf798 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55a92a2cf6d8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55a92a2cf840 <col:20>
| `-OptimizeNoneAttr 0x55a92a2cf898 <col:30>
|-CXXMethodDecl 0x55a92a2cf908 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55a92a2cfa30 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55a92a2cfba8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55a92a2cfae0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55a92a2cfc70 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55a92a2cfd38 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55a92a2cfe78 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55a92a2cfde8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55a92a2cff20 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55a92a2d0020 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55a92a2d0220 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a2d0000 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55a92a2cffe0 <col:23> 'int' 0
| |-EnumConstantDecl 0x55a92a2d00b0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55a92a2d0238 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a2d0090 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55a92a2d0070 <col:45> 'int' 4
| |-EnumConstantDecl 0x55a92a2d0140 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55a92a2d0250 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a2d0120 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55a92a2d0100 <col:24> 'int' 0
| `-EnumConstantDecl 0x55a92a2d01d0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55a92a2d0268 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a92a2d01b0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55a92a2d0190 <col:47> 'int' 16
|-CXXMethodDecl 0x55a92a2d02c8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55a92a2d0438 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55a92a2d0378 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55a92a2d04e0 <col:20>
| `-OptimizeNoneAttr 0x55a92a2d0538 <col:30>
|-CXXMethodDecl 0x55a92a2d0588 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55a92a2e3f10 <col:18, col:36>
|   `-ReturnStmt 0x55a92a2e3f00 <col:20, col:33>
|     `-ImplicitCastExpr 0x55a92a2e3ee8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55a92a2e3ec8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55a92a2e3e98 <col:27> '<bound member function type>' ->xanno 0x55a92a2ce5e8
|           `-CXXThisExpr 0x55a92a2e3e88 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55a92a2d0680 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55a92a2e4020 <col:30, col:48>
|   `-ReturnStmt 0x55a92a2e4010 <col:32, col:45>
|     `-ImplicitCastExpr 0x55a92a2e3ff8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55a92a2e3fd8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55a92a2e3fa8 <col:39> '<bound member function type>' ->xanno 0x55a92a2ce448
|           `-CXXThisExpr 0x55a92a2e3f98 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55a92a2d0768 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55a92a2e41b8 <col:24, col:50>
|   `-ReturnStmt 0x55a92a2e41a8 <col:26, col:47>
|     `-UnaryOperator 0x55a92a2e4190 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55a92a2e4170 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55a92a2e4158 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55a92a2e4108 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55a92a2d9428
|         |   `-CXXMemberCallExpr 0x55a92a2e40e8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55a92a2e40b8 <col:34> '<bound member function type>' ->xanno 0x55a92a2ce5e8
|         |       `-CXXThisExpr 0x55a92a2e40a8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55a92a2e4138 <col:46> 'int' 0
|-CXXMethodDecl 0x55a92a2d0870 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55a92a2e4388 <col:36, col:62>
|   `-ReturnStmt 0x55a92a2e4378 <col:38, col:59>
|     `-UnaryOperator 0x55a92a2e4360 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55a92a2e4340 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55a92a2e4328 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55a92a2e42a0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55a92a2d9428
|         |   `-CXXMemberCallExpr 0x55a92a2e4280 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55a92a2e4250 <col:46> '<bound member function type>' ->xanno 0x55a92a2ce448
|         |       `-CXXThisExpr 0x55a92a2e4240 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55a92a2e42d0 <col:58> 'int' 0
|-CXXMethodDecl 0x55a92a2d0988 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55a92a2e4520 <col:26, col:53>
|   `-ReturnStmt 0x55a92a2e4510 <col:28, col:50>
|     `-UnaryOperator 0x55a92a2e44f8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55a92a2e44d8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55a92a2e44c0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55a92a2e4470 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55a92a2d9728
|         |   `-CXXMemberCallExpr 0x55a92a2e4450 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55a92a2e4420 <col:36> '<bound member function type>' ->xanno 0x55a92a2ce5e8
|         |       `-CXXThisExpr 0x55a92a2e4410 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55a92a2e44a0 <col:49> 'int' 0
|-CXXMethodDecl 0x55a92a2d0aa8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55a92a2e46f8 <col:38, col:65>
|   `-ReturnStmt 0x55a92a2e46e8 <col:40, col:62>
|     `-UnaryOperator 0x55a92a2e46d0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55a92a2e46b0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55a92a2e4698 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55a92a2e4608 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55a92a2d9728
|         |   `-CXXMemberCallExpr 0x55a92a2e45e8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55a92a2e45b8 <col:48> '<bound member function type>' ->xanno 0x55a92a2ce448
|         |       `-CXXThisExpr 0x55a92a2e45a8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55a92a2e4638 <col:61> 'int' 0
|-CXXMethodDecl 0x55a92a2d0c58 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55a92a2d0b60 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55a92a2e4dc8 <col:34, line:463:5>
|   |-ParenExpr 0x55a92a2e4c10 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55a92a2e4be0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55a92a2e4848 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a92a2e4818 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a92a2e4768 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a92a2e4750 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a92a2e4710 <col:23> 'int' lvalue ParmVar 0x55a92a2d0b60 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a92a2e4730 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a92a2e47f8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a92a2e47c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a92a2e4788 <col:33> 'int' lvalue ParmVar 0x55a92a2d0b60 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55a92a2e47e0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55a92a2e47a8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a92a2ce830 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55a92a2e48a8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a92a2e4888 <col:56> 'int' 0
|   |   `-CallExpr 0x55a92a2e4b40 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55a92a2e4b28 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a92a2e4b08 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a929e3aee0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a92a2e4b80 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e4998 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55a92a2e4b98 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e49c8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a92a2e4bb0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a92a2e4a00 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55a92a2e4bc8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a92a2e4af0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a92a2e4ad8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a92a2e4a98 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55a92a2e4db8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55a92a2e4da0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55a92a2e4d80 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55a92a2e4d50 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55a92a2e4d00 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55a92a2d9428
|         |   `-CXXMemberCallExpr 0x55a92a2e4ce0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55a92a2e4cb0 <col:9> '<bound member function type>' ->xanno 0x55a92a2ce448
|         |       `-CXXThisExpr 0x55a92a2e4ca0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55a92a2e4d68 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55a92a2e4d30 <col:21> 'int' lvalue ParmVar 0x55a92a2d0b60 'i' 'int'
|-CXXMethodDecl 0x55a92a2d0ea8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55a92a2d0d18 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55a92a2d0d90 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55a92a2e5458 <col:40, line:472:5>
|   |-ParenExpr 0x55a92a2e5270 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55a92a2e5240 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55a92a2e4f20 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a92a2e4ef0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a92a2e4e40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a92a2e4e28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a92a2e4de8 <col:23> 'int' lvalue ParmVar 0x55a92a2d0d18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a92a2e4e08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a92a2e4ed0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a92a2e4ea0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a92a2e4e60 <col:33> 'int' lvalue ParmVar 0x55a92a2d0d18 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55a92a2e4eb8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55a92a2e4e80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a92a2ce830 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55a92a2e4f80 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a92a2e4f60 <col:56> 'int' 0
|   |   `-CallExpr 0x55a92a2e51a0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55a92a2e5188 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a92a2e5168 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a929e3aee0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a92a2e51e0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e4ff0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55a92a2e51f8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e5020 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a92a2e5210 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a92a2e5058 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55a92a2e5228 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a92a2e5150 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a92a2e5138 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a92a2e50f8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55a92a2e5438 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55a92a2e53e0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55a92a2e53b0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55a92a2e5360 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55a92a2d9428
|     | |   `-CXXMemberCallExpr 0x55a92a2e5340 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55a92a2e5310 <col:2> '<bound member function type>' ->xanno 0x55a92a2ce5e8
|     | |       `-CXXThisExpr 0x55a92a2e5300 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55a92a2e53c8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55a92a2e5390 <col:14> 'int' lvalue ParmVar 0x55a92a2d0d18 'i' 'int'
|     `-ImplicitCastExpr 0x55a92a2e5420 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55a92a2e5400 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55a92a2d0d90 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55a92a2d1068 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55a92a2d0f70 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55a92a2e5bd8 <col:36, line:485:5>
|   |-ParenExpr 0x55a92a2e5940 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a92a2e5910 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a92a2e55f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a92a2e55c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a92a2e54d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a92a2e54b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a92a2e5478 <col:23> 'int' lvalue ParmVar 0x55a92a2d0f70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a92a2e5498 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a92a2e55a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a92a2e5588 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a92a2e54f0 <col:33> 'int' lvalue ParmVar 0x55a92a2d0f70 'i' 'int'
|   |   |     `-BinaryOperator 0x55a92a2e5568 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a92a2e5550 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a92a2e5510 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a92a2ce830 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a92a2e5530 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55a92a2e5650 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a92a2e5630 <col:60> 'int' 0
|   |   `-CallExpr 0x55a92a2e5870 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a92a2e5858 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a92a2e5838 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a929e3aee0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a92a2e58b0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e56c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55a92a2e58c8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e56f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a92a2e58e0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a92a2e5730 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55a92a2e58f8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a92a2e5820 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a92a2e5808 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a92a2e57c8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55a92a2e5bc8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55a92a2e5bb0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55a92a2e5b98 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55a92a2e5b68 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55a92a2e5b08 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55a92a2e5ad8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55a92a2e5a50 <col:61, col:70> 'char const[48]' lvalue ->c 0x55a92a2d9300
|             |   `-CXXMemberCallExpr 0x55a92a2e5a30 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55a92a2e5a00 <col:61> '<bound member function type>' ->xanno 0x55a92a2ce448
|             |       `-CXXThisExpr 0x55a92a2e59f0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55a92a2e5af0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55a92a2e5a80 <col:74> 'int' lvalue ParmVar 0x55a92a2d0f70 'i' 'int'
|-CXXMethodDecl 0x55a92a2d12b8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55a92a2d1128 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55a92a2d11a0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55a92a2e6328 <col:42, line:500:5>
|   |-ParenExpr 0x55a92a2e60c0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a92a2e6090 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a92a2e5d70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a92a2e5d40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a92a2e5c50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a92a2e5c38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a92a2e5bf8 <col:23> 'int' lvalue ParmVar 0x55a92a2d1128 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a92a2e5c18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a92a2e5d20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a92a2e5d08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a92a2e5c70 <col:33> 'int' lvalue ParmVar 0x55a92a2d1128 'i' 'int'
|   |   |     `-BinaryOperator 0x55a92a2e5ce8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a92a2e5cd0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a92a2e5c90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a92a2ce830 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a92a2e5cb0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55a92a2e5dd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a92a2e5db0 <col:60> 'int' 0
|   |   `-CallExpr 0x55a92a2e5ff0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a92a2e5fd8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a92a2e5fb8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a929e3aee0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a92a2e6030 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e5e40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55a92a2e6048 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e5e78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a92a2e6060 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a92a2e5eb0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55a92a2e6078 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a92a2e5fa0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a92a2e5f88 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a92a2e5f48 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55a92a2e6308 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55a92a2e62b8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55a92a2e6288 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55a92a2e6230 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55a92a2e6200 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55a92a2e61b0 <col:48, col:57> 'char [48]' lvalue ->c 0x55a92a2d9300
|     |     |   `-CXXMemberCallExpr 0x55a92a2e6190 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55a92a2e6160 <col:48> '<bound member function type>' ->xanno 0x55a92a2ce5e8
|     |     |       `-CXXThisExpr 0x55a92a2e6150 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55a92a2e6218 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55a92a2e61e0 <col:61> 'int' lvalue ParmVar 0x55a92a2d1128 'i' 'int'
|     `-ImplicitCastExpr 0x55a92a2e62f0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55a92a2e62d0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55a92a2d11a0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55a92a2d1478 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55a92a2d1380 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55a92a2e6a88 <col:35, line:513:5>
|   |-ParenExpr 0x55a92a2e6798 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a92a2e6768 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a92a2e64c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a92a2e6490 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a92a2e63a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a92a2e6388 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a92a2e6348 <col:23> 'int' lvalue ParmVar 0x55a92a2d1380 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a92a2e6368 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a92a2e6470 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a92a2e6458 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a92a2e63c0 <col:33> 'int' lvalue ParmVar 0x55a92a2d1380 'i' 'int'
|   |   |     `-BinaryOperator 0x55a92a2e6438 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a92a2e6420 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a92a2e63e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a92a2ce830 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a92a2e6400 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55a92a2e6520 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a92a2e6500 <col:60> 'int' 0
|   |   `-CallExpr 0x55a92a2e66c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a92a2e66b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a92a2e6690 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a929e3aee0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a92a2e6708 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e6590 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55a92a2e6720 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e65c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a92a2e6738 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a92a2e6600 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55a92a2e6750 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a92a2e6678 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a92a2e6660 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a92a2e6620 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55a92a2e6a78 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55a92a2e6a60 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55a92a2e6a48 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55a92a2e6a18 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55a92a2e6990 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55a92a2e6960 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55a92a2e6910 <col:60, col:69> 'char const[48]' lvalue ->c 0x55a92a2d9300
|             |   `-CXXMemberCallExpr 0x55a92a2e68f0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55a92a2e68c0 <col:60> '<bound member function type>' ->xanno 0x55a92a2ce448
|             |       `-CXXThisExpr 0x55a92a2e68b0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55a92a2e6978 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55a92a2e6940 <col:73> 'int' lvalue ParmVar 0x55a92a2d1380 'i' 'int'
|-CXXMethodDecl 0x55a92a2d16c8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55a92a2d1538 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55a92a2d15b0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55a92a2e71a8 <col:41, line:528:5>
|   |-ParenExpr 0x55a92a2e6f30 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a92a2e6f00 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a92a2e6c20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a92a2e6bf0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a92a2e6b00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a92a2e6ae8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a92a2e6aa8 <col:23> 'int' lvalue ParmVar 0x55a92a2d1538 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a92a2e6ac8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a92a2e6bd0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a92a2e6bb8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a92a2e6b20 <col:33> 'int' lvalue ParmVar 0x55a92a2d1538 'i' 'int'
|   |   |     `-BinaryOperator 0x55a92a2e6b98 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a92a2e6b80 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a92a2e6b40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a92a2ce830 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a92a2e6b60 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55a92a2e6c80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a92a2e6c60 <col:60> 'int' 0
|   |   `-CallExpr 0x55a92a2e6e60 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a92a2e6e48 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a92a2e6e28 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a929e3aee0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a92a2e6ea0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e6cf0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55a92a2e6eb8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e6d28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a92a2e6ed0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a92a2e6d60 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55a92a2e6ee8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a92a2e6e10 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a92a2e6df8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a92a2e6db8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55a92a2e7188 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55a92a2e7138 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55a92a2e7108 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55a92a2e70b0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55a92a2e7070 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55a92a2e7020 <col:47, col:56> 'char [48]' lvalue ->c 0x55a92a2d9300
|     |     |   `-CXXMemberCallExpr 0x55a92a2e7000 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55a92a2e6fd0 <col:47> '<bound member function type>' ->xanno 0x55a92a2ce5e8
|     |     |       `-CXXThisExpr 0x55a92a2e6fc0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55a92a2e7088 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55a92a2e7050 <col:60> 'int' lvalue ParmVar 0x55a92a2d1538 'i' 'int'
|     `-ImplicitCastExpr 0x55a92a2e7170 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55a92a2e7150 <col:65> 'int16_t':'short' lvalue ParmVar 0x55a92a2d15b0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55a92a2d1888 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55a92a2d1790 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55a92a2e7878 <col:36, line:541:5>
|   |-ParenExpr 0x55a92a2e7618 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a92a2e75e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a92a2e7340 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a92a2e7310 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a92a2e7220 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a92a2e7208 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a92a2e71c8 <col:23> 'int' lvalue ParmVar 0x55a92a2d1790 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a92a2e71e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a92a2e72f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a92a2e72d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a92a2e7240 <col:33> 'int' lvalue ParmVar 0x55a92a2d1790 'i' 'int'
|   |   |     `-BinaryOperator 0x55a92a2e72b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a92a2e72a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a92a2e7260 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a92a2ce830 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a92a2e7280 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55a92a2e73a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a92a2e7380 <col:60> 'int' 0
|   |   `-CallExpr 0x55a92a2e7548 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a92a2e7530 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a92a2e7510 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a929e3aee0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a92a2e7588 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e7410 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55a92a2e75a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e7448 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a92a2e75b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a92a2e7480 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55a92a2e75d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a92a2e74f8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a92a2e74e0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a92a2e74a0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55a92a2e7868 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55a92a2e7850 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55a92a2e7838 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55a92a2e7808 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55a92a2e77b0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55a92a2e7780 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55a92a2e7730 <col:61, col:70> 'char const[48]' lvalue ->c 0x55a92a2d9300
|             |   `-CXXMemberCallExpr 0x55a92a2e7710 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55a92a2e76e0 <col:61> '<bound member function type>' ->xanno 0x55a92a2ce448
|             |       `-CXXThisExpr 0x55a92a2e76d0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55a92a2e7798 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55a92a2e7760 <col:74> 'int' lvalue ParmVar 0x55a92a2d1790 'i' 'int'
|-CXXMethodDecl 0x55a92a2d1a58 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55a92a2d1948 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55a92a2d19c0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a92a2d1b08 <col:20>
| `-OptimizeNoneAttr 0x55a92a2d1b60 <col:30>
|-CXXMethodDecl 0x55a92a2d1c98 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55a92a2d1ba0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55a92a2e7f48 <col:35, line:562:5>
|   |-ParenExpr 0x55a92a2e7ce8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a92a2e7cb8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a92a2e7a10 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a92a2e79e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a92a2e78f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a92a2e78d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a92a2e7898 <col:23> 'int' lvalue ParmVar 0x55a92a2d1ba0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a92a2e78b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a92a2e79c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a92a2e79a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a92a2e7910 <col:33> 'int' lvalue ParmVar 0x55a92a2d1ba0 'i' 'int'
|   |   |     `-BinaryOperator 0x55a92a2e7988 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a92a2e7970 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a92a2e7930 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a92a2ce830 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a92a2e7950 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55a92a2e7a70 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a92a2e7a50 <col:60> 'int' 0
|   |   `-CallExpr 0x55a92a2e7c18 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a92a2e7c00 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a92a2e7be0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a929e3aee0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a92a2e7c58 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e7ae0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55a92a2e7c70 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e7b18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a92a2e7c88 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a92a2e7b50 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55a92a2e7ca0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a92a2e7bc8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a92a2e7bb0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a92a2e7b70 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55a92a2e7f38 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55a92a2e7f20 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55a92a2e7f08 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55a92a2e7ed8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55a92a2e7e80 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55a92a2e7e50 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55a92a2e7e00 <col:60, col:69> 'char const[48]' lvalue ->c 0x55a92a2d9300
|             |   `-CXXMemberCallExpr 0x55a92a2e7de0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55a92a2e7db0 <col:60> '<bound member function type>' ->xanno 0x55a92a2ce448
|             |       `-CXXThisExpr 0x55a92a2e7da0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55a92a2e7e68 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55a92a2e7e30 <col:73> 'int' lvalue ParmVar 0x55a92a2d1ba0 'i' 'int'
|-CXXMethodDecl 0x55a92a2d1ea8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55a92a2d1d58 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55a92a2d1dd0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55a92a2e8628 <col:41, line:577:5>
|   |-ParenExpr 0x55a92a2e83b8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a92a2e8388 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a92a2e80e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a92a2e80b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a92a2e7fc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a92a2e7fa8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a92a2e7f68 <col:23> 'int' lvalue ParmVar 0x55a92a2d1d58 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a92a2e7f88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a92a2e8090 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a92a2e8078 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a92a2e7fe0 <col:33> 'int' lvalue ParmVar 0x55a92a2d1d58 'i' 'int'
|   |   |     `-BinaryOperator 0x55a92a2e8058 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a92a2e8040 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a92a2e8000 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a92a2ce830 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a92a2e8020 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55a92a2e8140 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a92a2e8120 <col:60> 'int' 0
|   |   `-CallExpr 0x55a92a2e82e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a92a2e82d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a92a2e82b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a929e3aee0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a92a2e8328 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e81b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55a92a2e8340 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e81e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a92a2e8358 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a92a2e8220 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55a92a2e8370 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a92a2e8298 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a92a2e8280 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a92a2e8240 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55a92a2e8608 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55a92a2e85b8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55a92a2e8588 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55a92a2e8528 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55a92a2e84f8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55a92a2e84a8 <col:47, col:56> 'char [48]' lvalue ->c 0x55a92a2d9300
|     |     |   `-CXXMemberCallExpr 0x55a92a2e8488 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55a92a2e8458 <col:47> '<bound member function type>' ->xanno 0x55a92a2ce5e8
|     |     |       `-CXXThisExpr 0x55a92a2e8448 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55a92a2e8510 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55a92a2e84d8 <col:60> 'int' lvalue ParmVar 0x55a92a2d1d58 'i' 'int'
|     `-ImplicitCastExpr 0x55a92a2e85f0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55a92a2e85d0 <col:65> 'int32_t':'int' lvalue ParmVar 0x55a92a2d1dd0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55a92a2d2068 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55a92a2d1f70 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55a92a2e8d58 <col:36, line:591:5>
|   |-ParenExpr 0x55a92a2e8a98 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a92a2e8a68 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a92a2e87c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a92a2e8790 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a92a2e86a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a92a2e8688 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a92a2e8648 <col:23> 'int' lvalue ParmVar 0x55a92a2d1f70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a92a2e8668 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a92a2e8770 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a92a2e8758 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a92a2e86c0 <col:33> 'int' lvalue ParmVar 0x55a92a2d1f70 'i' 'int'
|   |   |     `-BinaryOperator 0x55a92a2e8738 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a92a2e8720 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a92a2e86e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a92a2ce830 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a92a2e8700 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55a92a2e8820 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a92a2e8800 <col:60> 'int' 0
|   |   `-CallExpr 0x55a92a2e89c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a92a2e89b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a92a2e8990 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a929e3aee0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a92a2e8a08 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e8890 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55a92a2e8a20 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e88c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a92a2e8a38 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a92a2e8900 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55a92a2e8a50 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a92a2e8978 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a92a2e8960 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a92a2e8920 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55a92a2e8d48 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55a92a2e8d30 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55a92a2e8d18 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55a92a2e8ce8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55a92a2e8c60 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55a92a2e8c30 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55a92a2e8be0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55a92a2d9300
|             |   `-CXXMemberCallExpr 0x55a92a2e8bc0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55a92a2e8b90 <col:61> '<bound member function type>' ->xanno 0x55a92a2ce448
|             |       `-CXXThisExpr 0x55a92a2e8b80 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55a92a2e8c48 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55a92a2e8c10 <col:74> 'int' lvalue ParmVar 0x55a92a2d1f70 'i' 'int'
|-CXXMethodDecl 0x55a92a2d22b8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55a92a2d2128 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55a92a2d21a0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55a92a2e9438 <col:42, line:606:5>
|   |-ParenExpr 0x55a92a2e91c8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a92a2e9198 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a92a2e8ef0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a92a2e8ec0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a92a2e8dd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a92a2e8db8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a92a2e8d78 <col:23> 'int' lvalue ParmVar 0x55a92a2d2128 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a92a2e8d98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a92a2e8ea0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a92a2e8e88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a92a2e8df0 <col:33> 'int' lvalue ParmVar 0x55a92a2d2128 'i' 'int'
|   |   |     `-BinaryOperator 0x55a92a2e8e68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a92a2e8e50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a92a2e8e10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a92a2ce830 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a92a2e8e30 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55a92a2e8f50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a92a2e8f30 <col:60> 'int' 0
|   |   `-CallExpr 0x55a92a2e90f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a92a2e90e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a92a2e90c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a929e3aee0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a92a2e9138 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e8fc0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55a92a2e9150 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e8ff8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a92a2e9168 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a92a2e9030 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55a92a2e9180 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a92a2e90a8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a92a2e9090 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a92a2e9050 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55a92a2e9418 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55a92a2e93c8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55a92a2e9398 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55a92a2e9338 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55a92a2e9308 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55a92a2e92b8 <col:48, col:57> 'char [48]' lvalue ->c 0x55a92a2d9300
|     |     |   `-CXXMemberCallExpr 0x55a92a2e9298 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55a92a2e9268 <col:48> '<bound member function type>' ->xanno 0x55a92a2ce5e8
|     |     |       `-CXXThisExpr 0x55a92a2e9258 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55a92a2e9320 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55a92a2e92e8 <col:61> 'int' lvalue ParmVar 0x55a92a2d2128 'i' 'int'
|     `-ImplicitCastExpr 0x55a92a2e9400 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55a92a2e93e0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55a92a2d21a0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55a92a2d2450 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55a92a2d2380 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55a92a2e9ca8 <col:33, line:620:5>
|   |-ParenExpr 0x55a92a2e9a20 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55a92a2e99f0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55a92a2e9640 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a92a2e9610 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a92a2e94b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a92a2e9498 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a92a2e9458 <col:23> 'int' lvalue ParmVar 0x55a92a2d2380 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a92a2e9478 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a92a2e95f0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55a92a2e95d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a92a2e94d0 <col:33> 'int' lvalue ParmVar 0x55a92a2d2380 'i' 'int'
|   |   |     `-BinaryOperator 0x55a92a2e95b8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a92a2e95a0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a92a2e94f0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a92a2ce830 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55a92a2e9578 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55a92a2e9560 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55a92a2e9528 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55a92a2e96a0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a92a2e9680 <col:79> 'int' 0
|   |   `-CallExpr 0x55a92a2e9950 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55a92a2e9938 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a92a2e9918 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a929e3aee0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a92a2e9990 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e9788 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55a92a2e99a8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e97d0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a92a2e99c0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a92a2e9808 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55a92a2e99d8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a92a2e9900 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a92a2e98e8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a92a2e98a8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55a92a2e9c98 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55a92a2e9c80 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55a92a2e9c68 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55a92a2e9c38 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55a92a2e9bb0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55a92a2e9b80 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55a92a2e9b30 <col:67, col:76> 'char const[48]' lvalue ->c 0x55a92a2d9300
|             |   `-CXXMemberCallExpr 0x55a92a2e9b10 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55a92a2e9ae0 <col:67> '<bound member function type>' ->xanno 0x55a92a2ce448
|             |       `-CXXThisExpr 0x55a92a2e9ad0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55a92a2e9b98 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55a92a2e9b60 <col:80> 'int' lvalue ParmVar 0x55a92a2d2380 'i' 'int'
|-CXXMethodDecl 0x55a92a2d2668 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55a92a2d2510 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55a92a2d2590 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55a92a2ea4d0 <col:45, line:635:5>
|   |-ParenExpr 0x55a92a2ea218 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55a92a2ea1e8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55a92a2e9eb0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a92a2e9e80 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a92a2e9d20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a92a2e9d08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a92a2e9cc8 <col:23> 'int' lvalue ParmVar 0x55a92a2d2510 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a92a2e9ce8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a92a2e9e60 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55a92a2e9e48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a92a2e9d40 <col:33> 'int' lvalue ParmVar 0x55a92a2d2510 'i' 'int'
|   |   |     `-BinaryOperator 0x55a92a2e9e28 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a92a2e9e10 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a92a2e9d60 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a92a2ce830 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55a92a2e9de8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55a92a2e9dd0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55a92a2e9d98 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55a92a2e9f10 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a92a2e9ef0 <col:79> 'int' 0
|   |   `-CallExpr 0x55a92a2ea148 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55a92a2ea130 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a92a2ea110 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a929e3aee0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a92a2ea188 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e9f80 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55a92a2ea1a0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a92a2e9fc8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a92a2ea1b8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a92a2ea000 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55a92a2ea1d0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a92a2ea0f8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a92a2ea0e0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a92a2ea098 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55a92a2ea4b0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55a92a2ea418 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55a92a2ea3e8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55a92a2ea388 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55a92a2ea358 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55a92a2ea308 <col:54, col:63> 'char [48]' lvalue ->c 0x55a92a2d9300
|     |     |   `-CXXMemberCallExpr 0x55a92a2ea2e8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55a92a2ea2b8 <col:54> '<bound member function type>' ->xanno 0x55a92a2ce5e8
|     |     |       `-CXXThisExpr 0x55a92a2ea2a8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55a92a2ea370 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55a92a2ea338 <col:67> 'int' lvalue ParmVar 0x55a92a2d2510 'i' 'int'
|     `-CXXConstCastExpr 0x55a92a2ea480 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55a92a2ea468 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55a92a2ea430 <col:91> 'const void *' lvalue ParmVar 0x55a92a2d2590 'x' 'const void *'
|-CXXMethodDecl 0x55a92a2d2738 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55a92a2ea558 <col:34, line:640:5>
|   `-ReturnStmt 0x55a92a2ea548 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55a92a2ea530 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55a92a2ea500 <col:16> 'Packet *' lvalue ->_data_packet 0x55a92a2d9eb8
|         `-CXXThisExpr 0x55a92a2ea4f0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55a92a2d2878 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55a92a2d27e8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55a92a2e3618 <col:46> 'bool' true
|-CXXMethodDecl 0x55a92a2d29f8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55a92a2d2930 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55a92a2d2aa0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55a92a2d3250 <line:660:22> "" ""
| |-EnumConstantDecl 0x55a92a2d2ba0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a92a2d32c0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a2d2b80 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55a92a2d2b60 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55a92a2c7d00 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55a92a2d2c30 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a92a2d32d8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a2d2c10 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55a92a2d2bf0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55a92a2c7d90 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55a92a2d2cc0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a92a2d32f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a2d2ca0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55a92a2d2c80 <col:21> 'int' 0
| |-EnumConstantDecl 0x55a92a2d2d50 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a92a2d3308 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a2d2d30 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55a92a2d2d10 <col:19> 'int' 16
| |-EnumConstantDecl 0x55a92a2d2de0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a92a2d3320 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a2d2dc0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55a92a2d2da0 <col:21> 'int' 16
| |-EnumConstantDecl 0x55a92a2d2e70 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a92a2d3338 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a2d2e50 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55a92a2d2e30 <col:19> 'int' 32
| |-EnumConstantDecl 0x55a92a2d2f00 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a92a2d3350 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a2d2ee0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55a92a2d2ec0 <col:19> 'int' EnumConstant 0x55a92a2d2d50 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55a92a2d2f90 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a92a2d3368 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a2d2f70 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55a92a2d2f50 <col:19> 'int' EnumConstant 0x55a92a2d2e70 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55a92a2d3060 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a92a2d3380 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a2d3040 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55a92a2d3020 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55a92a2d2fe0 <col:23> 'int' EnumConstant 0x55a92a2d2f90 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55a92a2d3000 <col:40> 'int' 2
| |-EnumConstantDecl 0x55a92a2d3130 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a92a2d3398 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a2d3110 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55a92a2d30f0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55a92a2d30b0 <col:23> 'int' EnumConstant 0x55a92a2d2f90 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55a92a2d30d0 <col:40> 'int' 4
| `-EnumConstantDecl 0x55a92a2d3200 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55a92a2d33b0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a92a2d31e0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55a92a2d31c0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55a92a2d3180 <col:23> 'int' EnumConstant 0x55a92a2d2f90 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55a92a2d31a0 <col:40> 'int' 8
|-CXXMethodDecl 0x55a92a2d33f0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55a92a2d3490 <col:68> "" ""
|-CXXMethodDecl 0x55a92a2d3528 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55a92a2d35c8 <col:45> "" ""
|-CXXMethodDecl 0x55a92a2d3660 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55a92a2d3700 <col:57> "" ""
|-CXXMethodDecl 0x55a92a2d3798 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55a92a2d3838 <col:45> "" ""
|-CXXMethodDecl 0x55a92a2d38d0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55a92a2d3970 <col:57> "" ""
|-CXXMethodDecl 0x55a92a2d3a00 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55a92a2d3aa0 <col:51> "" ""
|-CXXMethodDecl 0x55a92a2d3b30 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55a92a2d3bd0 <col:63> "" ""
|-CXXMethodDecl 0x55a92a2d3c60 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55a92a2d3d00 <col:53> "" ""
|-CXXMethodDecl 0x55a92a2d3d90 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55a92a2d3e30 <col:65> "" ""
|-CXXMethodDecl 0x55a92a2d3f48 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55a92a2d3eb8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55a92a2d3ff0 <col:61> "" ""
|-CXXMethodDecl 0x55a92a2d4188 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55a92a2d4078 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55a92a2d40f0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55a92a2d4238 <col:67> "" ""
|-CXXMethodDecl 0x55a92a2d4350 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55a92a2d42c0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55a92a2d43f8 <col:63> "" ""
|-CXXMethodDecl 0x55a92a2d4590 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55a92a2d4480 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55a92a2d44f8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55a92a2d4640 <col:69> "" ""
|-CXXMethodDecl 0x55a92a2d4758 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55a92a2d46c8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55a92a2d4800 <col:63> "" ""
|-CXXMethodDecl 0x55a92a2d6ed8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55a92a2d6dc8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55a92a2d6e40 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55a92a2d6f88 <col:69> "" ""
|-CXXMethodDecl 0x55a92a2d70a0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55a92a2d7010 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55a92a2d7148 <col:62> "" ""
|-CXXMethodDecl 0x55a92a2d72e0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55a92a2d71d0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55a92a2d7248 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55a92a2d7390 <col:68> "" ""
|-CXXMethodDecl 0x55a92a2d74a8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55a92a2d7418 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55a92a2d7550 <col:63> "" ""
|-CXXMethodDecl 0x55a92a2d76e8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55a92a2d75d8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55a92a2d7650 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55a92a2d7798 <col:69> "" ""
|-CXXMethodDecl 0x55a92a2d7828 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55a92a2d78c8 <col:64> "" ""
|-CXXMethodDecl 0x55a92a2d7958 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55a92a2d79f8 <col:52> "" ""
|-CXXMethodDecl 0x55a92a2d7a88 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55a92a2d7b28 <col:67> "" ""
|-CXXMethodDecl 0x55a92a2d7bb8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55a92a2d7c58 <col:55> "" ""
|-CXXMethodDecl 0x55a92a2d7d70 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55a92a2d7ce0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55a92a2d7e18 <col:58> "" ""
|-CXXMethodDecl 0x55a92a2d7fb0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55a92a2d7ea0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55a92a2d7f18 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55a92a2d8060 <col:62> "" ""
|-CXXMethodDecl 0x55a92a2d8178 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55a92a2d80e8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55a92a2d8220 <col:58> "" ""
|-CXXMethodDecl 0x55a92a2d83b8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55a92a2d82a8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55a92a2d8320 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55a92a2d8468 <col:62> "" ""
|-CXXMethodDecl 0x55a92a2d8580 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55a92a2d84f0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55a92a2d8628 <col:60> "" ""
|-CXXMethodDecl 0x55a92a2d87c0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55a92a2d86b0 <col:34> col:37 'int'
| |-ParmVarDecl 0x55a92a2d8728 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55a92a2d8870 <col:64> "" ""
|-CXXMethodDecl 0x55a92a2d8988 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55a92a2d88f8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55a92a2d8a30 <col:58> "" ""
|-CXXMethodDecl 0x55a92a2d8bc8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55a92a2d8ab8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55a92a2d8b30 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55a92a2d8c78 <col:62> "" ""
|-CXXMethodDecl 0x55a92a2d8d90 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55a92a2d8d00 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55a92a2d8e38 <col:59> "" ""
|-CXXMethodDecl 0x55a92a2d8fd0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55a92a2d8ec0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55a92a2d8f38 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55a92a2d9080 <col:63> "" ""
|-AccessSpecDecl 0x55a92a2d90f0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55a92a2d9118 prev 0x55a92a2ce320 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55a92a2d9210 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55a92a2d9300 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55a92a2d9428 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55a92a2d95a8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55a92a2d9728 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55a92a2d98a8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55a92a2ea6d8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55a92a2eaf48 <col:11>
| |-CXXDestructorDecl 0x55a92a2ea7b0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55a92a2ea8e8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55a92a2ea8e8
| | `-ParmVarDecl 0x55a92a2ea9f8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55a92a2eaa98 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55a92a2eaa98
| | `-ParmVarDecl 0x55a92a2eaba8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55a92a2ed968 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55a92a2eda78 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55a92a2edcf8 <col:11>
| |   `-ReturnStmt 0x55a92a2edce8 <col:11>
| |     `-UnaryOperator 0x55a92a2edcd0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55a92a2edcc0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55a92a2edae8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55a92a2edae8
|   `-ParmVarDecl 0x55a92a2edbf8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55a92a2d9910 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55a92a2d9a28 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55a92a2d9ac8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55a92a2d9b30 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55a92a2d9b98 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55a92a2d9c00 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55a92a2d9c60 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55a92a2d9d20 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55a92a2d9d80 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55a92a2d9de0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55a92a2ea5e8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55a92a2d9ac8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55a92a2eaf58 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55a92a2eafb0 <col:12>
| |-CXXConstructorDecl 0x55a92a2eac18 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55a92a2eac18
| | `-ParmVarDecl 0x55a92a2ead28 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55a92a2eadc8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55a92a2eadc8
| | `-ParmVarDecl 0x55a92a2eaed8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55a92a2ed050 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55a92a2d9e58 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55a92a2d9eb8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55a92a2d9f20 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55a92a2d9f88 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55a92a2d9ff0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55a92a2da058 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55a92a2da0b8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55a92a2da118 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55a92a2da180 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55a92a2da208 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55a92a2d9e58 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55a92a2ea580 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55a92a2da0b8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55a92a2eafc0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55a92a2eb020 <col:21, line:755:5>
|-CXXConstructorDecl 0x55a92a2da3a8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55a92a2da2e8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55a92a2da4a0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55a92a2da688 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55a92a2da590 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55a92a2da958 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55a92a2da740 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a92a2da7b8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55a92a2da830 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a92a2dab78 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55a92a2daa28 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55a92a2daaa0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55a92a2e3158 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55a92a2dac38 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55a92a2dacb0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55a92a2dad28 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55a92a2e32b0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55a92a2e3220 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a92a2e33f8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55a92a2e3368 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55a92a2e34f0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a92a405fe0 <../elements/local/printairo.cc:35:1, line:54:1> line:35:8 struct an_rxframe definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-PackedAttr 0x55a92a406bc8 <line:54:18>
|-CXXRecordDecl 0x55a92a4060f8 <line:35:1, col:8> col:8 implicit struct an_rxframe
|-FieldDecl 0x55a92a4061c0 <line:36:2, col:12> col:12 an_rx_time 'u_int32_t':'unsigned int'
|-FieldDecl 0x55a92a406240 <line:37:2, col:12> col:12 an_rx_status 'u_int16_t':'unsigned short'
|-FieldDecl 0x55a92a4062a0 <line:38:2, col:12> col:12 referenced an_rx_payload_len 'u_int16_t':'unsigned short'
|-FieldDecl 0x55a92a406320 <line:39:2, col:11> col:11 an_rsvd0 'u_int8_t':'unsigned char'
|-FieldDecl 0x55a92a406380 <line:40:2, col:11> col:11 referenced an_rx_signal_strength 'u_int8_t':'unsigned char'
|-FieldDecl 0x55a92a4063e0 <line:41:2, col:11> col:11 referenced an_rx_rate 'u_int8_t':'unsigned char'
|-FieldDecl 0x55a92a406440 <line:42:2, col:11> col:11 referenced an_rx_chan 'u_int8_t':'unsigned char'
|-FieldDecl 0x55a92a4064a0 <line:43:2, col:11> col:11 an_rx_assoc_cnt 'u_int8_t':'unsigned char'
|-FieldDecl 0x55a92a4065c8 <line:44:2, col:21> col:11 an_rsvd1 'u_int8_t [3]'
|-FieldDecl 0x55a92a4066b8 <line:45:2, col:24> col:11 referenced an_plcp_hdr 'u_int8_t [4]'
|-FieldDecl 0x55a92a406718 <line:46:2, col:12> col:12 referenced an_frame_ctl 'u_int16_t':'unsigned short'
|-FieldDecl 0x55a92a406778 <line:47:2, col:12> col:12 an_duration 'u_int16_t':'unsigned short'
|-FieldDecl 0x55a92a4068a8 <line:48:2, col:21> col:11 an_addr1 'u_int8_t [6]'
|-FieldDecl 0x55a92a406958 <line:49:2, col:21> col:11 an_addr2 'u_int8_t [6]'
|-FieldDecl 0x55a92a406a08 <line:50:2, col:21> col:11 an_addr3 'u_int8_t [6]'
|-FieldDecl 0x55a92a406a68 <line:51:2, col:12> col:12 an_seq_ctl 'u_int16_t':'unsigned short'
|-FieldDecl 0x55a92a406b18 <line:52:2, col:21> col:11 an_addr4 'u_int8_t [6]'
`-FieldDecl 0x55a92a406b78 <line:53:2, col:11> col:11 referenced an_gaplen 'u_int8_t':'unsigned char'

Layout: <CGRecordLayout
  LLVMType:%struct.an_rxframe = type <{ i32, i16, i16, i8, i8, i8, i8, i8, [3 x i8], [4 x i8], i16, i16, [6 x i8], [6 x i8], [6 x i8], i16, [6 x i8], i8 }>
  NonVirtualBaseLLVMType:%struct.an_rxframe = type <{ i32, i16, i16, i8, i8, i8, i8, i8, [3 x i8], [4 x i8], i16, i16, [6 x i8], [6 x i8], [6 x i8], i16, [6 x i8], i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StringAccum
         0 |   struct StringAccum::rep_t r_
         0 |     unsigned char * s
         8 |     int len
        12 |     int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a92a3e7430 <../dummy_inc/click/straccum.hh:112:5, line:122:5> line:112:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a92a3e7548 <col:5, col:12> col:12 implicit referenced struct rep_t
|-FieldDecl 0x55a92a3e75f0 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
|-FieldDecl 0x55a92a3e7658 <line:114:2, col:6> col:6 referenced len 'int'
|-FieldDecl 0x55a92a3e76c0 <line:115:2, col:6> col:6 referenced cap 'int'
|-CXXConstructorDecl 0x55a92a3e7770 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| |-CXXCtorInitializer Field 0x55a92a3e75f0 's' 'unsigned char *'
| | `-CXXReinterpretCastExpr 0x55a92a3e8600 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| |   `-CXXConstCastExpr 0x55a92a3e85b8 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| |     `-CallExpr 0x55a92a3e8580 <col:63, col:82> 'const char *'
| |       `-ImplicitCastExpr 0x55a92a3e8568 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x55a92a3e8510 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x55a92a0f1160 'empty_data' 'const char *()'
| |-CXXCtorInitializer Field 0x55a92a3e7658 'len' 'int'
| | `-IntegerLiteral 0x55a92a3e8678 <line:118:12> 'int' 0
| |-CXXCtorInitializer Field 0x55a92a3e76c0 'cap' 'int'
| | `-IntegerLiteral 0x55a92a3e86e0 <col:20> 'int' 0
| `-CompoundStmt 0x55a92a3e8760 <col:23, line:119:2>
|-CXXConstructorDecl 0x55a92a3e78e8 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| |-ParmVarDecl 0x55a92a3e7828 <col:17> col:35 'uninitialized_type'
| `-CompoundStmt 0x55a92a3e8770 <col:37, line:121:2>
|-CXXConstructorDecl 0x55a92a3ea988 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55a92a3eaa98 <col:12> col:12 used 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55a92a3e75f0 's' 'unsigned char *'
| | `-ImplicitCastExpr 0x55a92a3ec450 <col:12> 'unsigned char *' <LValueToRValue>
| |   `-MemberExpr 0x55a92a3ec420 <col:12> 'unsigned char *const' lvalue .s 0x55a92a3e75f0
| |     `-DeclRefExpr 0x55a92a3ec400 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55a92a3eaa98 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55a92a3e7658 'len' 'int'
| | `-ImplicitCastExpr 0x55a92a3ec4e0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55a92a3ec4b0 <col:12> 'const int' lvalue .len 0x55a92a3e7658
| |     `-DeclRefExpr 0x55a92a3ec490 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55a92a3eaa98 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55a92a3e76c0 'cap' 'int'
| | `-ImplicitCastExpr 0x55a92a3ec570 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55a92a3ec540 <col:12> 'const int' lvalue .cap 0x55a92a3e76c0
| |     `-DeclRefExpr 0x55a92a3ec520 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55a92a3eaa98 '' 'const StringAccum::rep_t &'
| `-CompoundStmt 0x55a92a3ec5c8 <col:12>
|-CXXConstructorDecl 0x55a92a3eab38 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x55a92a3eab38
| `-ParmVarDecl 0x55a92a3eac48 <col:12> col:12 'StringAccum::rep_t &&'
`-CXXDestructorDecl 0x55a92a3ec880 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  NonVirtualBaseLLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a92a3e2bd8 prev 0x55a92a31a708 <../dummy_inc/click/straccum.hh:28:1, line:137:1> line:28:7 referenced class StringAccum definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55a92a3e2cd0 <col:1, col:7> col:7 implicit referenced class StringAccum
|-AccessSpecDecl 0x55a92a3e2d60 <col:21, col:27> col:21 public
|-TypedefDecl 0x55a92a3e2da0 <line:30:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55a929d9efd0 'const char *'
|   `-QualType 0x55a929d9e521 'const char' const
|     `-BuiltinType 0x55a929d9e520 'char'
|-TypedefDecl 0x55a92a3e2e10 <line:31:5, col:19> col:19 referenced iterator 'char *'
| `-PointerType 0x55a929d9f1a0 'char *'
|   `-BuiltinType 0x55a929d9e520 'char'
|-TypedefDecl 0x55a92a3e2f50 <line:33:5, col:57> col:32 referenced unspecified_bool_type 'int (StringAccum::*)() const'
| `-MemberPointerType 0x55a92a3e2ec0 'int (StringAccum::*)() const'
|   |-RecordType 0x55a92a05ca30 'StringAccum'
|   | `-CXXRecord 0x55a92a3e2bd8 'StringAccum'
|   `-ParenType 0x55a92a0cb170 'int () const' sugar
|     `-FunctionProtoType 0x55a92a09fd10 'int () const' const cdecl
|       `-BuiltinType 0x55a929d9e580 'int'
|-CXXConstructorDecl 0x55a92a3e3010 <line:35:5, col:24> col:12 used StringAccum 'void ()' inline
|-CXXConstructorDecl 0x55a92a3e3160 <line:36:5, col:45> col:21 StringAccum 'void (int)' inline
| `-ParmVarDecl 0x55a92a3e30d0 <col:33, col:37> col:37 capacity 'int'
|-CXXConstructorDecl 0x55a92a3e32b0 <line:37:5, col:41> col:12 StringAccum 'void (const String &)' inline
| `-ParmVarDecl 0x55a92a3e3220 <col:24, col:38> col:38 str 'const String &'
|-CXXConstructorDecl 0x55a92a3e3458 <line:38:5, col:44> col:12 StringAccum 'void (const StringAccum &)' inline
| `-ParmVarDecl 0x55a92a3e3398 <col:24, col:43> col:43 x 'const StringAccum &'
|-CXXConstructorDecl 0x55a92a3e3608 <line:40:5, col:39> col:12 StringAccum 'void (StringAccum &&)' inline
| `-ParmVarDecl 0x55a92a3e3548 <col:24, col:38> col:38 x 'StringAccum &&'
|-CXXDestructorDecl 0x55a92a3e3700 <line:42:5, col:25> col:12 used ~StringAccum 'void () noexcept' inline
|-CXXMethodDecl 0x55a92a3e38b8 <line:44:5, col:55> col:25 operator= 'StringAccum &(const StringAccum &)' inline
| `-ParmVarDecl 0x55a92a3e37f0 <col:35, col:54> col:54 x 'const StringAccum &'
|-CXXMethodDecl 0x55a92a3e3a38 <line:46:5, col:50> col:25 operator= 'StringAccum &(StringAccum &&)' inline
| `-ParmVarDecl 0x55a92a3e3970 <col:35, col:49> col:49 x 'StringAccum &&'
|-CXXMethodDecl 0x55a92a3e3b30 <line:49:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55a92a3e3bf8 <line:50:5, col:23> col:18 data 'char *()' inline
|-CXXMethodDecl 0x55a92a3e3cc0 <line:51:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55a92a3e3d88 <line:52:5, col:27> col:16 used capacity 'int () const' inline
|-CXXMethodDecl 0x55a92a3e3e50 <line:54:5, col:23> col:17 used c_str 'const char *()'
|-CXXConversionDecl 0x55a92a3e3fb8 <line:56:5, col:45> col:12 operator int (StringAccum::*)() const 'StringAccum::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55a92a3e4088 <line:57:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55a92a3e4148 <line:58:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55a92a3e4258 <line:60:5, col:35> col:27 used begin 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x55a92a3e4368 <line:61:5, col:27> col:21 begin 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x55a92a3e4428 <line:62:5, col:33> col:27 used end 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x55a92a3e44e8 <line:63:5, col:25> col:21 end 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x55a92a3e4630 <line:65:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55a92a3e45a0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55a92a3e47c0 <line:66:5, col:34> col:18 operator[] 'char &(int)' inline
| `-ParmVarDecl 0x55a92a3e46f0 <col:29, col:33> col:33 i 'int'
|-CXXMethodDecl 0x55a92a3e4888 <line:67:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55a92a3e4980 <line:68:5, col:24> col:18 front 'char &()' inline
|-CXXMethodDecl 0x55a92a3e4a40 <line:69:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55a92a3e4b08 <line:70:5, col:23> col:18 back 'char &()' inline
|-CXXMethodDecl 0x55a92a3e4bc8 <line:72:5, col:33> col:17 used out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55a92a3e4c88 <line:73:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55a92a3e4d48 <line:75:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x55a92a3e4e98 <line:76:5, col:31> col:18 reserve 'char *(int)' inline
| `-ParmVarDecl 0x55a92a3e4e00 <col:26, col:30> col:30 n 'int'
|-CXXMethodDecl 0x55a92a3e4fe8 <line:77:5, col:35> col:17 set_length 'void (int)' inline
| `-ParmVarDecl 0x55a92a3e4f58 <col:28, col:32> col:32 len 'int'
|-CXXMethodDecl 0x55a92a3e5140 <line:78:5, col:23> col:9 resize 'int (int)'
| `-ParmVarDecl 0x55a92a3e50a8 <col:16, col:20> col:20 len 'int'
|-CXXMethodDecl 0x55a92a3e5290 <line:79:5, col:40> col:17 used adjust_length 'void (int)' inline
| `-ParmVarDecl 0x55a92a3e5200 <col:31, col:35> col:35 delta 'int'
|-CXXMethodDecl 0x55a92a3e54b0 <line:80:5, col:54> col:18 extend 'char *(int, int)' inline
| |-ParmVarDecl 0x55a92a3e5350 <col:25, col:29> col:29 nadjust 'int'
| `-ParmVarDecl 0x55a92a3e53d0 <col:38, col:53> col:42 nreserve 'int' cinit
|   `-IntegerLiteral 0x55a92a3e8438 <col:53> 'int' 0
|-CXXMethodDecl 0x55a92a3e5608 <line:82:5, col:35> col:17 pop_back 'void (int)' inline
| `-ParmVarDecl 0x55a92a3e5578 <col:26, col:34> col:30 n 'int' cinit
|   `-IntegerLiteral 0x55a92a3e8458 <col:34> 'int' 1
|-CXXMethodDecl 0x55a92a3e5750 <line:84:5, col:30> col:17 used append 'void (char)' inline
| `-ParmVarDecl 0x55a92a3e56c0 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55a92a3e58a0 <line:85:5, col:39> col:17 used append 'void (unsigned char)' inline
| `-ParmVarDecl 0x55a92a3e5810 <col:24, col:38> col:38 c 'unsigned char'
|-CXXMethodDecl 0x55a92a3e59f0 <line:86:5, col:35> col:17 append_utf8 'bool (int)' inline
| `-ParmVarDecl 0x55a92a3e5960 <col:29, col:33> col:33 ch 'int'
|-CXXMethodDecl 0x55a92a3e5b40 <line:87:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55a92a3e5ab0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55a92a3e5d18 <line:88:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55a92a3e5c00 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55a92a3e5c80 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55a92a3e5ef8 <line:89:5, col:55> col:17 used append 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55a92a3e5de0 <col:24, col:45> col:45 s 'const unsigned char *'
| `-ParmVarDecl 0x55a92a3e5e60 <col:48, col:52> col:52 len 'int'
|-CXXMethodDecl 0x55a92a3e60d8 <line:90:5, col:59> col:17 used append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55a92a3e5fc0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55a92a3e6040 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55a92a3e62b8 <line:91:5, col:77> col:17 append 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55a92a3e61a0 <col:24, col:45> col:45 first 'const unsigned char *'
| `-ParmVarDecl 0x55a92a3e6220 <col:52, col:73> col:73 last 'const unsigned char *'
|-CXXMethodDecl 0x55a92a3e6498 <line:92:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55a92a3e6380 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55a92a3e6400 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55a92a3e67f8 <line:93:5, col:81> col:10 used append_numeric 'void (String::intmax_t, int, bool)'
| |-ParmVarDecl 0x55a92a3e65e0 <col:25, col:42> col:42 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55a92a3e6660 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55a92a3e8478 <col:56> 'int' 10
| `-ParmVarDecl 0x55a92a3e66d8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55a92a3e8498 <col:77> 'bool' true
|-CXXMethodDecl 0x55a92a3e6b58 <line:94:5, col:82> col:10 used append_numeric 'void (String::uintmax_t, int, bool)'
| |-ParmVarDecl 0x55a92a3e6940 <col:25, col:43> col:43 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55a92a3e69c0 <col:46, col:57> col:50 base 'int' cinit
| | `-IntegerLiteral 0x55a92a3e84a8 <col:57> 'int' 10
| `-ParmVarDecl 0x55a92a3e6a38 <col:61, col:78> col:66 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55a92a3e84c8 <col:78> 'bool' true
|-CXXMethodDecl 0x55a92a3e6d80 <line:96:5, col:57> col:18 snprintf 'StringAccum &(int, const char *, ...)'
| |-ParmVarDecl 0x55a92a3e6c28 <col:27, col:31> col:31 n 'int'
| `-ParmVarDecl 0x55a92a3e6ca8 <col:34, col:46> col:46 format 'const char *'
|-CXXMethodDecl 0x55a92a3e6e78 <line:98:5, col:24> col:12 take_string 'String ()'
|-CXXMethodDecl 0x55a92a3e6fe8 <line:100:5, col:29> col:10 used swap 'void (StringAccum &)'
| `-ParmVarDecl 0x55a92a3e6f28 <col:15, col:28> col:28 x 'StringAccum &'
|-CXXMethodDecl 0x55a92a3e7138 <line:104:5, col:62> col:17 forward 'void (int)' inline
| |-ParmVarDecl 0x55a92a3e70a8 <col:25, col:29> col:29 delta 'int'
| `-DeprecatedAttr 0x55a92a3e71e0 <col:51> "" ""
|-AccessSpecDecl 0x55a92a3e7250 <line:106:3, col:10> col:3 private
|-EnumDecl 0x55a92a3e7278 <line:108:5, line:110:5> line:108:5
| `-EnumConstantDecl 0x55a92a3e73c8 <line:109:2, col:23> col:2 referenced MEMO_SPACE 'StringAccum::(anonymous enum at ../dummy_inc/click/straccum.hh:108:5)'
|   `-ImplicitCastExpr 0x55a92a3e7418 <col:15, col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a92a3e73a8 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' Int: 12
|       `-DeclRefExpr 0x55a92a3e7378 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' EnumConstant 0x55a92a0d3ed8 'MEMO_SPACE' 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|-CXXRecordDecl 0x55a92a3e7430 <line:112:5, line:122:5> line:112:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55a92a3e7548 <col:5, col:12> col:12 implicit referenced struct rep_t
| |-FieldDecl 0x55a92a3e75f0 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
| |-FieldDecl 0x55a92a3e7658 <line:114:2, col:6> col:6 referenced len 'int'
| |-FieldDecl 0x55a92a3e76c0 <line:115:2, col:6> col:6 referenced cap 'int'
| |-CXXConstructorDecl 0x55a92a3e7770 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| | |-CXXCtorInitializer Field 0x55a92a3e75f0 's' 'unsigned char *'
| | | `-CXXReinterpretCastExpr 0x55a92a3e8600 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| | |   `-CXXConstCastExpr 0x55a92a3e85b8 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| | |     `-CallExpr 0x55a92a3e8580 <col:63, col:82> 'const char *'
| | |       `-ImplicitCastExpr 0x55a92a3e8568 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| | |         `-DeclRefExpr 0x55a92a3e8510 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x55a92a0f1160 'empty_data' 'const char *()'
| | |-CXXCtorInitializer Field 0x55a92a3e7658 'len' 'int'
| | | `-IntegerLiteral 0x55a92a3e8678 <line:118:12> 'int' 0
| | |-CXXCtorInitializer Field 0x55a92a3e76c0 'cap' 'int'
| | | `-IntegerLiteral 0x55a92a3e86e0 <col:20> 'int' 0
| | `-CompoundStmt 0x55a92a3e8760 <col:23, line:119:2>
| |-CXXConstructorDecl 0x55a92a3e78e8 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| | |-ParmVarDecl 0x55a92a3e7828 <col:17> col:35 'uninitialized_type'
| | `-CompoundStmt 0x55a92a3e8770 <col:37, line:121:2>
| |-CXXConstructorDecl 0x55a92a3ea988 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55a92a3eaa98 <col:12> col:12 used 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55a92a3e75f0 's' 'unsigned char *'
| | | `-ImplicitCastExpr 0x55a92a3ec450 <col:12> 'unsigned char *' <LValueToRValue>
| | |   `-MemberExpr 0x55a92a3ec420 <col:12> 'unsigned char *const' lvalue .s 0x55a92a3e75f0
| | |     `-DeclRefExpr 0x55a92a3ec400 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55a92a3eaa98 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55a92a3e7658 'len' 'int'
| | | `-ImplicitCastExpr 0x55a92a3ec4e0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55a92a3ec4b0 <col:12> 'const int' lvalue .len 0x55a92a3e7658
| | |     `-DeclRefExpr 0x55a92a3ec490 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55a92a3eaa98 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55a92a3e76c0 'cap' 'int'
| | | `-ImplicitCastExpr 0x55a92a3ec570 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55a92a3ec540 <col:12> 'const int' lvalue .cap 0x55a92a3e76c0
| | |     `-DeclRefExpr 0x55a92a3ec520 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55a92a3eaa98 '' 'const StringAccum::rep_t &'
| | `-CompoundStmt 0x55a92a3ec5c8 <col:12>
| |-CXXConstructorDecl 0x55a92a3eab38 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x55a92a3eab38
| | `-ParmVarDecl 0x55a92a3eac48 <col:12> col:12 'StringAccum::rep_t &&'
| `-CXXDestructorDecl 0x55a92a3ec880 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-FieldDecl 0x55a92a3e79c0 <line:124:5, col:11> col:11 referenced r_ 'StringAccum::rep_t'
|-CXXMethodDecl 0x55a92a3e7ac0 <line:126:5, col:19> col:11 used grow 'char *(int)'
| `-ParmVarDecl 0x55a92a3e7a28 <col:16> col:19 'int'
|-CXXMethodDecl 0x55a92a3e7ca0 <line:127:5, col:48> col:11 used hard_extend 'char *(int, int)'
| |-ParmVarDecl 0x55a92a3e7b80 <col:23, col:27> col:27 nadjust 'int'
| `-ParmVarDecl 0x55a92a3e7c00 <col:36, col:40> col:40 nreserve 'int'
|-CXXMethodDecl 0x55a92a3e7e90 <line:128:5, col:44> col:10 used hard_append 'void (const char *, int)'
| |-ParmVarDecl 0x55a92a3e7d68 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55a92a3e7de8 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55a92a3e7fe8 <line:129:5, col:43> col:10 used hard_append_cstr 'void (const char *)'
| `-ParmVarDecl 0x55a92a3e7f58 <col:27, col:39> col:39 cstr 'const char *'
|-CXXMethodDecl 0x55a92a3e8138 <line:130:5, col:33> col:10 used append_utf8_hard 'bool (int)'
| `-ParmVarDecl 0x55a92a3e80a8 <col:27, col:31> col:31 ch 'int'
`-FriendDecl 0x55a92a3e83f8 <line:132:5, col:70> col:25
  `-FunctionDecl 0x55a92a3e8338 parent 0x55a929d9e488 <col:5, col:70> col:25 used operator<< 'StringAccum &(StringAccum &, const String &)'
    |-ParmVarDecl 0x55a92a3e81f0 <col:36, col:49> col:49 sa 'StringAccum &'
    `-ParmVarDecl 0x55a92a3e8268 <col:53, col:67> col:67 str 'const String &'

Layout: <CGRecordLayout
  LLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  NonVirtualBaseLLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a92a2993b0 prev 0x55a92a2901f0 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a92a2994a8 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x55a92a299548 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x55a92a2a0310 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55a92a2a06f8 <col:11>
|-CXXConstructorDecl 0x55a92a2a03f0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55a92a2a04d8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55a92a2a0e40 <col:11>
|-CXXConstructorDecl 0x55a92a2a0578 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a92a2a0688 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x55a92a2a2698 <col:11>
|-CXXDestructorDecl 0x55a92a2a19a8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55a929fa8558 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55a929fa8668 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55a929fa8f30 <col:11>
|   `-ReturnStmt 0x55a929fa8f20 <col:11>
|     `-UnaryOperator 0x55a929fa8f08 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a929fa8ef8 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x55a929fa86d8 <col:11> col:11 implicit constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&)' inline default trivial noexcept-unevaluated 0x55a929fa86d8
  `-ParmVarDecl 0x55a929fa87e8 <col:11> col:11 'Timestamp::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a92a28f3a8 prev 0x55a92a28f0b8 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a92a28f4a0 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x55a92a28f530 <col:19, col:25> col:19 public
|-TypedefDecl 0x55a92a28f568 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x55a929ef4510 'int32_t' sugar
|   |-Typedef 0x55a929e07328 'int32_t'
|   `-TypedefType 0x55a929de0510 '__int32_t' sugar
|     |-Typedef 0x55a929de0128 '__int32_t'
|     `-BuiltinType 0x55a929d9e580 'int'
|-TypedefDecl 0x55a92a28f5d0 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x55a929ef46d0 'int64_t' sugar
|   |-Typedef 0x55a929e07390 'int64_t'
|   `-TypedefType 0x55a929de0630 '__int64_t' sugar
|     |-Typedef 0x55a929de0208 '__int64_t'
|     `-BuiltinType 0x55a929d9e5a0 'long'
|-EnumDecl 0x55a92a28f628 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x55a92a28f7a0 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x55a92a28f780 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x55a92a28f758 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x55a92a28f740 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x55a92a28f710 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x55a92a28f898 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x55a92a28f878 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x55a92a28f850 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x55a92a28f838 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x55a92a28f810 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x55a92a28f7f0 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x55a92a28f8e8 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x55a92a28f9f0 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55a92a28ff40 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a28f9d0 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x55a92a28f9b0 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x55a92a28fa80 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55a92a28ff58 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a28fa60 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x55a92a28fa40 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x55a92a28fb10 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55a92a28ff70 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a28faf0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x55a92a28fad0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x55a92a28fba0 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55a92a28ff88 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a28fb80 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x55a92a28fb60 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x55a92a28fc30 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55a92a28ffa0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a28fc10 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x55a92a28fbf0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x55a92a28fcc0 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55a92a28ffb8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a28fca0 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x55a92a28fc80 <col:24> 'int' 1000
| |-EnumConstantDecl 0x55a92a28fd50 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55a92a28ffd0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a28fd30 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x55a92a28fd10 <col:26> 'int' EnumConstant 0x55a92a28f9f0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x55a92a28fe20 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55a92a28ffe8 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a28fe00 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x55a92a28fde0 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x55a92a28fda0 <col:27> 'int' EnumConstant 0x55a92a28fd50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x55a92a28fdc0 <col:44> 'int' EnumConstant 0x55a92a28fcc0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x55a92a28fef0 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x55a92a290000 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a92a28fed0 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x55a92a28feb0 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x55a92a28fe70 <col:27> 'int' EnumConstant 0x55a92a28fd50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x55a92a28fe90 <col:44> 'int' EnumConstant 0x55a92a28fba0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x55a92a290018 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x55a92a290120 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x55a92a290170 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a92a290100 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x55a92a2900e0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28fd50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x55a92a290198 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x55a929ef4140 'uninitialized_type'
|   `-CXXRecord 0x55a929ef40a8 'uninitialized_type'
|-CXXRecordDecl 0x55a92a2901f0 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x55a92a290300 <line:174:5, line:176:5> line:174:12 Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x55a92a29a4f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55a92a2a0708 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55a92a2a0828 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x55a92a2a07e0 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x55a92a2a0770 <col:9> '<bound member function type>' ->assign 0x55a92a294f48
|     | `-CXXThisExpr 0x55a92a2a0760 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x55a92a2a07a0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x55a92a2a0810 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55a92a2a07c0 <col:19> 'int' 0
|-CXXConstructorDecl 0x55a92a290548 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x55a92a2903c0 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x55a92a290438 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55a92a29c040 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55a92a29c020 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x55a92a29a4f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55a92a2a0840 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55a92a2a0990 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x55a92a2a0918 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x55a92a2a08a8 <col:9> '<bound member function type>' ->assign 0x55a92a294f48
|     | `-CXXThisExpr 0x55a92a2a0898 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55a92a2a0960 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55a92a2a0948 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x55a92a2a08d8 <col:16> 'long' lvalue ParmVar 0x55a92a2903c0 'sec' 'long'
|     `-ImplicitCastExpr 0x55a92a2a0978 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55a92a2a08f8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a92a290438 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55a92a2907a8 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55a92a290618 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x55a92a290690 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55a92a29c078 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55a92a29c058 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x55a92a29a4f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55a92a2a09a8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55a92a2a0ae0 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x55a92a2a0a80 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x55a92a2a0a10 <col:9> '<bound member function type>' ->assign 0x55a92a294f48
|     | `-CXXThisExpr 0x55a92a2a0a00 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55a92a2a0ab0 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55a92a2a0a40 <col:16> 'int' lvalue ParmVar 0x55a92a290618 'sec' 'int'
|     `-ImplicitCastExpr 0x55a92a2a0ac8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55a92a2a0a60 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a92a290690 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55a92a290a08 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x55a92a290878 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x55a92a2908f0 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55a92a29c0b0 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55a92a29c090 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x55a92a29a4f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55a92a2a0af8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55a92a2a0c48 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x55a92a2a0bd0 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x55a92a2a0b60 <col:9> '<bound member function type>' ->assign 0x55a92a294f48
|     | `-CXXThisExpr 0x55a92a2a0b50 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55a92a2a0c18 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55a92a2a0c00 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x55a92a2a0b90 <col:16> 'unsigned long' lvalue ParmVar 0x55a92a290878 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x55a92a2a0c30 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55a92a2a0bb0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a92a2908f0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55a92a291ba0 <line:199:5, line:201:5> line:199:21 Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x55a92a290ad8 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x55a92a290b50 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55a92a29c0e8 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55a92a29c0c8 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x55a92a29a4f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55a92a2a0c60 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55a92a2a0db0 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x55a92a2a0d38 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x55a92a2a0cc8 <col:9> '<bound member function type>' ->assign 0x55a92a294f48
|     | `-CXXThisExpr 0x55a92a2a0cb8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55a92a2a0d80 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55a92a2a0d68 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55a92a2a0cf8 <col:16> 'unsigned int' lvalue ParmVar 0x55a92a290ad8 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x55a92a2a0d98 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55a92a2a0d18 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a92a290b50 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55a92a291d00 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x55a92a291c70 <col:31> col:37 'double'
|-CXXConstructorDecl 0x55a92a291e98 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x55a92a291dd8 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x55a92a2920c8 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x55a92a291fd0 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x55a92a292278 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x55a92a2921b8 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x55a92a29a4f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55a92a2a0e50 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x55a92a2a0dc8 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x55a92a2921b8 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55a92a2a0eb0 <col:19, line:214:5>
|-CXXConstructorDecl 0x55a92a292448 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x55a92a292388 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x55a92a29a4f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55a92a2a0ec0 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55a92a2a0f70 <col:53, line:219:5>
|   `-CStyleCastExpr 0x55a92a2a0f48 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x55a92a2a0f18 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x55a92a292388 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x55a92a292638 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x55a92a2925b0 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x55a92a28f150 'Timestamp'
|   | `-CXXRecord 0x55a92a28f3a8 'Timestamp'
|   `-ParenType 0x55a92a292550 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x55a92a292520 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x55a92a28f6f0 'Timestamp::seconds_type' sugar
|         |-Typedef 0x55a92a28f568 'seconds_type'
|         `-TypedefType 0x55a929ef4510 'int32_t' sugar
|           |-Typedef 0x55a929e07328 'int32_t'
|           `-TypedefType 0x55a929de0510 '__int32_t' sugar
|             |-Typedef 0x55a929de0128 '__int32_t'
|             `-BuiltinType 0x55a929d9e580 'int'
|-CXXConversionDecl 0x55a92a292778 <line:222:5, col:45> col:12 operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55a92a292848 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x55a92a2a1078 <col:37, line:231:5>
|   `-ReturnStmt 0x55a92a2a1068 <line:227:9, col:23>
|     `-BinaryOperator 0x55a92a2a1048 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x55a92a2a1018 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55a92a2a0fc8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x55a92a299548
|       |   `-MemberExpr 0x55a92a2a0f98 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x55a92a29a4f8
|       |     `-CXXThisExpr 0x55a92a2a0f88 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55a92a2a1030 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x55a92a2a0ff8 <col:23> 'int' 0
|-CXXMethodDecl 0x55a92a292908 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x55a92a2929c8 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x55a92a292a88 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x55a92a292b48 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x55a92a292c08 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x55a92a292d78 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x55a92a292cb8 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x55a92a292ec0 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x55a92a292e30 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a92a292f88 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55a92a293028 <col:54> "" ""
|-CXXMethodDecl 0x55a92a2930b8 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55a92a293158 <col:54> "" ""
|-CXXMethodDecl 0x55a92a2931e8 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55a92a293288 <col:54> "" ""
|-CXXMethodDecl 0x55a92a293388 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x55a92a293458 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x55a92a293588 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x55a92a293680 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x55a92a2937b8 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55a92a2a1290 <col:39, line:271:5>
|   `-ReturnStmt 0x55a92a2a1280 <line:267:9, col:61>
|     `-CallExpr 0x55a92a2a1220 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x55a92a2a1208 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55a92a2a1090 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55a92a29a828 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x55a92a2a1250 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55a92a2a10f0 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x55a92a299548
|       |   `-MemberExpr 0x55a92a2a10c0 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x55a92a29a4f8
|       |     `-CXXThisExpr 0x55a92a2a10b0 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55a92a2a1268 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x55a92a2a1190 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x55a92a2a1160 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x55a92a2a1120 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28fd50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x55a92a2a1178 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x55a92a2a1140 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28fcc0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55a92a293878 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55a92a2a1450 <col:39, line:279:5>
|   `-ReturnStmt 0x55a92a2a1440 <line:275:9, col:61>
|     `-CallExpr 0x55a92a2a13e0 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x55a92a2a13c8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55a92a2a12a8 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55a92a29a828 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x55a92a2a1410 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55a92a2a1308 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x55a92a299548
|       |   `-MemberExpr 0x55a92a2a12d8 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x55a92a29a4f8
|       |     `-CXXThisExpr 0x55a92a2a12c8 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55a92a2a1428 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x55a92a2a13a8 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x55a92a2a1378 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x55a92a2a1338 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28fd50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x55a92a2a1390 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x55a92a2a1358 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28fba0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55a92a293938 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55a92a2a15e8 <col:39, line:287:5>
|   `-ReturnStmt 0x55a92a2a15d8 <line:283:9, col:53>
|     `-BinaryOperator 0x55a92a2a15b8 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x55a92a2a1588 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55a92a2a14a8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x55a92a299548
|       |   `-MemberExpr 0x55a92a2a1478 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x55a92a29a4f8
|       |     `-CXXThisExpr 0x55a92a2a1468 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55a92a2a15a0 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x55a92a2a1568 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55a92a2a1548 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x55a92a2a1518 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55a92a2a14d8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28f9f0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55a92a2a1530 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55a92a2a14f8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28fd50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55a92a293a28 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55a92a2a2880 <col:40, line:293:5>
|   |-DeclStmt 0x55a92a2a1730 <line:291:9, col:48>
|   | `-VarDecl 0x55a92a2a1610 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x55a92a2a1710 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x55a92a2a16b8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x55a92a2a1688 <col:22> '<bound member function type>' ->subsec 0x55a92a2929c8
|   |     |   `-CXXThisExpr 0x55a92a2a1678 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x55a92a2a16f8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x55a92a2a16d8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28fe20 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55a92a2a2870 <line:292:9, col:70>
|     `-ExprWithCleanups 0x55a92a2a2858 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x55a92a2a2828 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55a92a2a2810 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x55a92a2a27f0 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x55a92a2a27c0 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x55a92a2a2558 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x55a92a2a2540 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x55a92a2a1748 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x55a92a2a1610 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x55a92a2a2760 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x55a92a2a2748 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x55a92a2a2718 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x55a92a2a2570 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x55a92a2a24e0 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x55a92a2a24c8 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x55a92a2a2478 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55a92a28f2f8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x55a92a2a2418 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x55a92a2a1778 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x55a92a2a1768 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x55a92a2a2460 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x55a92a2a2448 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x55a92a2a1c38 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x55a92a2a17a0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x55a92a2a1830 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x55a92a2a1800 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x55a92a2a17c0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28fe20 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x55a92a2a1818 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x55a92a2a17e0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x55a92a2a1610 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x55a92a2a2790 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x55a92a2a2528 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x55a92a2a2518 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x55a92a293ae8 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55a92a2a2dd8 <col:40, line:302:5>
|   |-DeclStmt 0x55a92a2a29d0 <line:297:9, col:48>
|   | `-VarDecl 0x55a92a2a28b0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x55a92a2a29b0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x55a92a2a2958 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x55a92a2a2928 <col:22> '<bound member function type>' ->subsec 0x55a92a2929c8
|   |     |   `-CXXThisExpr 0x55a92a2a2918 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x55a92a2a2998 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x55a92a2a2978 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28fef0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55a92a2a2dc8 <line:298:9, col:70>
|     `-ExprWithCleanups 0x55a92a2a2db0 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x55a92a2a2d80 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55a92a2a2d68 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x55a92a2a2d48 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x55a92a2a2d18 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x55a92a2a2c40 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x55a92a2a2c28 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x55a92a2a29e8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x55a92a2a28b0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x55a92a2a2cb8 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x55a92a2a2ca0 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x55a92a2a2c70 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x55a92a2a2c58 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x55a92a2a2bc8 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x55a92a2a2bb0 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x55a92a2a2b90 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55a92a28f2f8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x55a92a2a2b30 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x55a92a2a2a18 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x55a92a2a2a08 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x55a92a2a2b78 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x55a92a2a2b60 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x55a92a2a2af0 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x55a92a2a2a40 <col:39> 'int' 0
|               |               `-BinaryOperator 0x55a92a2a2ad0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x55a92a2a2aa0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x55a92a2a2a60 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28fef0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x55a92a2a2ab8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x55a92a2a2a80 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x55a92a2a28b0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x55a92a2a2ce8 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x55a92a2a2c10 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x55a92a2a2c00 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x55a92a293ba8 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55a92a2a2e60 <col:40, line:306:5>
|   `-ReturnStmt 0x55a92a2a2e50 <line:305:9, col:17>
|     `-CXXConstructExpr 0x55a92a2a2e20 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x55a92a2a2e08 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a92a2a2df8 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x55a92a293d48 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x55a92a293c58 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x55a92a293f18 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x55a92a293e20 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x55a92a294008 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x55a92a294178 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x55a92a2940b8 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x55a92a2a2fa8 <col:56, line:320:5>
|   `-ReturnStmt 0x55a92a2a2f98 <line:319:9, col:32>
|     `-ExprWithCleanups 0x55a92a2a2f80 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x55a92a2a2f50 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55a92a2a2f38 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55a92a2a2ef8 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55a92a2a2ec8 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55a92a2a2e88 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55a92a2940b8 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x55a92a2a2ee0 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55a92a2a2ea8 <col:31> 'int' 0
|-CXXMethodDecl 0x55a92a2943b8 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55a92a294230 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55a92a2942a8 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55a92a2a3178 <col:72, line:326:5>
|   `-ReturnStmt 0x55a92a2a3168 <line:325:9, col:51>
|     `-ExprWithCleanups 0x55a92a2a3150 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55a92a2a3120 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55a92a2a3108 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55a92a2a30c8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55a92a2a30b0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55a92a2a2fd0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55a92a294230 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55a92a2a3070 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55a92a2a3058 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55a92a2a2ff0 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55a92a298ca0 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55a92a2a3098 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55a92a2a3010 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a92a2942a8 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a92a294568 <line:328:5, line:337:5> line:328:29 make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55a92a294478 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55a92a2a3840 <col:56, line:337:5>
|   |-DeclStmt 0x55a92a2a3478 <line:329:9, col:51>
|   | `-VarDecl 0x55a92a2a31a0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55a92a2a3460 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55a92a2a3430 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55a92a2a3418 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55a92a2a3400 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55a92a2a33d0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55a92a2a33b8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55a92a2a33a0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55a92a2a3290 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55a92a2a3630 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55a92a2a34e0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55a92a299548
|   | | `-MemberExpr 0x55a92a2a34b0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55a92a29a4f8
|   | |   `-DeclRefExpr 0x55a92a2a3490 <col:9> 'Timestamp' lvalue Var 0x55a92a2a31a0 't' 'Timestamp'
|   | `-BinaryOperator 0x55a92a2a3610 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x55a92a2a35e0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55a92a2a3510 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x55a92a294478 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55a92a2a35f8 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x55a92a2a35c0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x55a92a2a35a0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x55a92a2a3570 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x55a92a2a3530 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28fd50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x55a92a2a3588 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x55a92a2a3550 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28fcc0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55a92a2a3828 <line:336:9, col:16>
|     `-CXXConstructExpr 0x55a92a2a37f8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55a92a2a37e0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55a92a2a37c0 <col:16> 'Timestamp' lvalue Var 0x55a92a2a31a0 't' 'Timestamp'
|-CXXMethodDecl 0x55a92a294730 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55a92a294620 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55a92a294698 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55a92a2a39f8 <col:72, line:343:5>
|   `-ReturnStmt 0x55a92a2a39e8 <line:342:9, col:51>
|     `-ExprWithCleanups 0x55a92a2a39d0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55a92a2a39a0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55a92a2a3988 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55a92a2a3948 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55a92a2a3930 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55a92a2a3878 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55a92a294620 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55a92a2a38f0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55a92a2a38d8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55a92a2a3898 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55a92a298de8 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55a92a2a3918 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55a92a2a38b8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a92a294698 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a92a294880 <line:345:5, line:354:5> line:345:29 make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55a92a2947f0 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55a92a2a3e40 <col:56, line:354:5>
|   |-DeclStmt 0x55a92a2a3be8 <line:346:9, col:51>
|   | `-VarDecl 0x55a92a2a3a20 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55a92a2a3bd0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55a92a2a3ba0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55a92a2a3b88 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55a92a2a3b70 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55a92a2a3b40 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55a92a2a3b28 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55a92a2a3b10 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55a92a2a3ae0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55a92a2a3da0 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55a92a2a3c50 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55a92a299548
|   | | `-MemberExpr 0x55a92a2a3c20 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55a92a29a4f8
|   | |   `-DeclRefExpr 0x55a92a2a3c00 <col:9> 'Timestamp' lvalue Var 0x55a92a2a3a20 't' 'Timestamp'
|   | `-BinaryOperator 0x55a92a2a3d80 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x55a92a2a3d50 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55a92a2a3c80 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x55a92a2947f0 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55a92a2a3d68 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x55a92a2a3d30 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x55a92a2a3d10 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x55a92a2a3ce0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x55a92a2a3ca0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28fd50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x55a92a2a3cf8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x55a92a2a3cc0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28fba0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55a92a2a3e28 <line:353:9, col:16>
|     `-CXXConstructExpr 0x55a92a2a3df8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55a92a2a3de0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55a92a2a3dc0 <col:16> 'Timestamp' lvalue Var 0x55a92a2a3a20 't' 'Timestamp'
|-CXXMethodDecl 0x55a92a294a48 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55a92a294938 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55a92a2949b0 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55a92a2a3ff8 <col:72, line:360:5>
|   `-ReturnStmt 0x55a92a2a3fe8 <line:359:9, col:51>
|     `-ExprWithCleanups 0x55a92a2a3fd0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55a92a2a3fa0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55a92a2a3f88 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55a92a2a3f48 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55a92a2a3f30 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55a92a2a3e78 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55a92a294938 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55a92a2a3ef0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55a92a2a3ed8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55a92a2a3e98 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55a92a298f30 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55a92a2a3f18 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55a92a2a3eb8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a92a2949b0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a92a294b98 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55a92a294b08 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55a92a2b0968 <col:56, line:371:5>
|   |-DeclStmt 0x55a92a2a41e8 <line:363:9, col:51>
|   | `-VarDecl 0x55a92a2a4020 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55a92a2a41d0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55a92a2a41a0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55a92a2a4188 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55a92a2a4170 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55a92a2a4140 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55a92a2a4128 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55a92a2a4110 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55a92a2a40e0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55a92a2b08c8 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55a92a2a4250 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55a92a299548
|   | | `-MemberExpr 0x55a92a2a4220 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55a92a29a4f8
|   | |   `-DeclRefExpr 0x55a92a2a4200 <col:9> 'Timestamp' lvalue Var 0x55a92a2a4020 't' 'Timestamp'
|   | `-CallExpr 0x55a92a2b0868 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x55a92a2b0850 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55a92a2a4280 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55a92a29a828 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x55a92a2b0898 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55a92a2a42a0 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x55a92a294b08 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55a92a2b08b0 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x55a92a2b0830 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x55a92a2b0800 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x55a92a2a42c0 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28f9f0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x55a92a2b0818 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x55a92a2a42e0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28fd50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55a92a2b0950 <line:370:9, col:16>
|     `-CXXConstructExpr 0x55a92a2b0920 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55a92a2b0908 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55a92a2b08e8 <col:16> 'Timestamp' lvalue Var 0x55a92a2a4020 't' 'Timestamp'
|-CXXMethodDecl 0x55a92a294c88 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x55a92a2b0aa8 <col:39, line:377:5>
|   `-ReturnStmt 0x55a92a2b0a98 <line:376:9, col:30>
|     `-ExprWithCleanups 0x55a92a2b0a80 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x55a92a2b0a50 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55a92a2b0a38 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55a92a2b09f8 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x55a92a2b09a0 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x55a92a2b09e0 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55a92a2b09c0 <col:29> 'int' 1
|-CXXMethodDecl 0x55a92a294d48 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x55a92a2b0b88 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x55a92a2b0b40 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x55a92a2b0ad0 <col:9> '<bound member function type>' ->assign 0x55a92a294f48
|     | `-CXXThisExpr 0x55a92a2b0ac0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x55a92a2b0b00 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x55a92a2b0b70 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55a92a2b0b20 <col:19> 'int' 0
|-CXXMethodDecl 0x55a92a294f48 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55a92a294df8 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55a92a294e70 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55a92a29c120 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55a92a29c100 <col:60> 'int' 0
| `-CompoundStmt 0x55a92a2b0d80 <col:63, line:395:5>
|   `-BinaryOperator 0x55a92a2b0d60 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x55a92a2b0be0 <col:9, col:12> 'int64_t':'long' lvalue .x 0x55a92a299548
|     | `-MemberExpr 0x55a92a2b0bb0 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x55a92a29a4f8
|     |   `-CXXThisExpr 0x55a92a2b0ba0 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x55a92a2b0d40 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x55a92a2b0cd0 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x55a92a2b0c70 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x55a92a2b0c58 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x55a92a2b0c40 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x55a92a2b0c10 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55a92a294df8 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x55a92a2b0cb8 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x55a92a2b0c98 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28fd50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x55a92a2b0d28 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x55a92a2b0d10 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x55a92a2b0cf0 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a92a294e70 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a92a295118 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55a92a295008 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55a92a295080 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55a92a2b0ed8 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x55a92a2b0e90 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x55a92a2b0da8 <col:9> '<bound member function type>' ->assign 0x55a92a294f48
|     | `-CXXThisExpr 0x55a92a2b0d98 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55a92a2b0ec0 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55a92a2b0dd8 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55a92a295008 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x55a92a2b0e50 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55a92a2b0e38 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55a92a2b0df8 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55a92a298de8 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x55a92a2b0e78 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55a92a2b0e18 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a92a295080 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a92a2952e8 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55a92a2951d8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55a92a295250 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55a92a2b1030 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x55a92a2b0fe8 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x55a92a2b0f00 <col:9> '<bound member function type>' ->assign 0x55a92a294f48
|     | `-CXXThisExpr 0x55a92a2b0ef0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55a92a2b1018 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55a92a2b0f30 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55a92a2951d8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x55a92a2b0fa8 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55a92a2b0f90 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55a92a2b0f50 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55a92a298f30 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x55a92a2b0fd0 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55a92a2b0f70 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a92a295250 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a92a2954b8 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55a92a2953a8 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55a92a295420 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55a92a29c158 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55a92a29c138 <col:57> 'int' 0
| `-DeprecatedAttr 0x55a92a295568 <col:75> "" ""
|-CXXMethodDecl 0x55a92a2956f8 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55a92a2955e8 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55a92a295660 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55a92a2957a8 <col:74> "" ""
|-CXXMethodDecl 0x55a92a295938 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55a92a295828 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55a92a2958a0 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55a92a2959e8 <col:74> "" ""
|-CXXMethodDecl 0x55a92a295a78 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x55a92a295b18 <col:42> "" ""
|-CXXMethodDecl 0x55a92a298350 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x55a92a298230 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55a92a2982b0 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x55a92a298420 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x55a92a2984e0 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x55a92a298580 <col:20>
| `-OptimizeNoneAttr 0x55a92a2985d8 <col:30>
|-CXXMethodDecl 0x55a92a298620 <line:446:5, col:36> col:29 recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x55a92a2986e0 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x55a92a2987a0 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x55a92a298860 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x55a92a298920 <line:481:5, col:43> col:29 recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x55a92a2989e0 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x55a92a298aa0 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x55a92a298b60 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x55a92a298ca0 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55a92a298c10 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55a92a2b1178 <col:58, line:512:5>
|   `-ReturnStmt 0x55a92a2b1168 <line:511:9, col:53>
|     `-BinaryOperator 0x55a92a2b1148 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55a92a2b1118 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55a92a2b1048 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a92a298c10 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55a92a2b1130 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55a92a2b10f8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55a92a2b10d8 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55a92a2b10a8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55a92a2b1068 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28fd50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55a92a2b10c0 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55a92a2b1088 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28fcc0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55a92a298de8 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55a92a298d58 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55a92a2b12c0 <col:58, line:516:5>
|   `-ReturnStmt 0x55a92a2b12b0 <line:515:9, col:53>
|     `-BinaryOperator 0x55a92a2b1290 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55a92a2b1260 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55a92a2b1190 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a92a298d58 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55a92a2b1278 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55a92a2b1240 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55a92a2b1220 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55a92a2b11f0 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55a92a2b11b0 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28fd50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55a92a2b1208 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55a92a2b11d0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28fba0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55a92a298f30 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55a92a298ea0 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55a92a2b1408 <col:58, line:520:5>
|   `-ReturnStmt 0x55a92a2b13f8 <line:519:9, col:53>
|     `-BinaryOperator 0x55a92a2b13d8 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55a92a2b13a8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55a92a2b12d8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a92a298ea0 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55a92a2b13c0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55a92a2b1388 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55a92a2b1368 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x55a92a2b1338 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55a92a2b12f8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28f9f0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55a92a2b1350 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55a92a2b1318 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28fd50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55a92a299078 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55a92a298fe8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55a92a2b1550 <col:60, line:524:5>
|   `-ReturnStmt 0x55a92a2b1540 <line:523:9, col:55>
|     `-BinaryOperator 0x55a92a2b1520 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55a92a2b14f0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55a92a2b1420 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a92a298fe8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55a92a2b1508 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55a92a2b14d0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55a92a2b14b0 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x55a92a2b1480 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55a92a2b1440 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28fd50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55a92a2b1498 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55a92a2b1460 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28fcc0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55a92a2991c0 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55a92a299130 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55a92a2b1698 <col:60, line:528:5>
|   `-ReturnStmt 0x55a92a2b1688 <line:527:9, col:55>
|     `-BinaryOperator 0x55a92a2b1668 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55a92a2b1638 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55a92a2b1568 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a92a299130 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55a92a2b1650 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55a92a2b1618 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55a92a2b15f8 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x55a92a2b15c8 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55a92a2b1588 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28fd50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55a92a2b15e0 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55a92a2b15a8 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28fba0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55a92a299308 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55a92a299278 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55a92a2b17e0 <col:60, line:532:5>
|   `-ReturnStmt 0x55a92a2b17d0 <line:531:9, col:55>
|     `-BinaryOperator 0x55a92a2b17b0 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55a92a2b1780 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55a92a2b16b0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a92a299278 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55a92a2b1798 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55a92a2b1760 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55a92a2b1740 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55a92a2b1710 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55a92a2b16d0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28f9f0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55a92a2b1728 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55a92a2b16f0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a92a28fd50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x55a92a2993b0 prev 0x55a92a2901f0 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55a92a2994a8 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x55a92a299548 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x55a92a2a0310 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55a92a2a06f8 <col:11>
| |-CXXConstructorDecl 0x55a92a2a03f0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55a92a2a04d8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x55a92a2a0e40 <col:11>
| |-CXXConstructorDecl 0x55a92a2a0578 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x55a92a2a0688 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x55a92a2a2698 <col:11>
| |-CXXDestructorDecl 0x55a92a2a19a8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55a929fa8558 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55a929fa8668 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x55a929fa8f30 <col:11>
| |   `-ReturnStmt 0x55a929fa8f20 <col:11>
| |     `-UnaryOperator 0x55a929fa8f08 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55a929fa8ef8 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x55a929fa86d8 <col:11> col:11 implicit constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&)' inline default trivial noexcept-unevaluated 0x55a929fa86d8
|   `-ParmVarDecl 0x55a929fa87e8 <col:11> col:11 'Timestamp::rep_t &&'
|-EnumDecl 0x55a92a2995b0 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x55a92a2996b0 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55a92a2998b0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a299690 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55a92a299670 <col:21> 'int' 0
| |-EnumConstantDecl 0x55a92a299740 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55a92a2998c8 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a299720 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x55a92a299700 <col:23> 'int' 1
| |-EnumConstantDecl 0x55a92a2997d0 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55a92a2998e0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a92a2997b0 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x55a92a299790 <col:23> 'int' 2
| `-EnumConstantDecl 0x55a92a299860 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x55a92a2998f8 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a92a299840 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x55a92a299820 <col:27> 'int' 3
|-CXXMethodDecl 0x55a92a299938 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x55a92a299a00 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x55a92a299c08 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x55a92a299ab0 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x55a92a299b30 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x55a92a29c170 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x55a92a299e18 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x55a92a299cc8 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x55a92a299d40 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x55a92a299ee8 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x55a92a299fa8 <line:635:5, col:37> col:24 warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x55a92a29a118 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x55a92a29a058 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x55a92a29a1e0 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x55a92a29a2a0 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x55a92a29a360 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x55a92a29a420 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x55a92a29a4c0 <line:670:3, col:10> col:3 private
|-FieldDecl 0x55a92a29a4f8 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x55a92a29a568 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x55a92a2b17f8 <col:27, line:684:5>
|-CXXMethodDecl 0x55a92a29a628 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x55a92a2b1808 <col:27, line:696:5>
|-CXXMethodDecl 0x55a92a29a828 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x55a92a29a6d8 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x55a92a29a750 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55a92a2b1990 <col:66, line:700:5>
|   `-ReturnStmt 0x55a92a2b1980 <line:699:9, col:31>
|     `-CallExpr 0x55a92a2b1920 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x55a92a2b1908 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55a92a2b18b8 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x55a92a11cbd8 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x55a92a2b1950 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x55a92a2b1878 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x55a92a29a6d8 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x55a92a2b1968 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55a92a2b1898 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a92a29a750 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a92a29ab98 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x55a92a29a8e8 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x55a92a29a960 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x55a92a29a9d8 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x55a92a29aa50 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55a92a2b1ce0 <col:64, line:707:5>
|   |-DeclStmt 0x55a92a2b1a20 <line:704:9, col:24>
|   | `-VarDecl 0x55a92a2b19b8 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x55a92a2b1c30 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x55a92a2b1a38 <col:9> 'int32_t':'int' lvalue ParmVar 0x55a92a29a960 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x55a92a2b1c18 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x55a92a2b1bb0 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x55a92a2b1b98 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a92a2b1b18 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x55a92a121ea8 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x55a92a2b1be8 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55a92a2b1ab8 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x55a92a29a9d8 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x55a92a2b1c00 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55a92a2b1ad8 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a92a29aa50 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x55a92a2b1af8 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x55a92a2b19b8 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x55a92a2b1cc0 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x55a92a2b1c50 <col:9> 'int32_t':'int' lvalue ParmVar 0x55a92a29a8e8 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x55a92a2b1ca8 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x55a92a2b1c90 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x55a92a2b1c70 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x55a92a2b19b8 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x55a92a29ae38 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x55a92a29ac68 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x55a92a29ace0 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x55a92a29ad58 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x55a92a29b0d8 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x55a92a29af00 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x55a92a29af78 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x55a92a29aff0 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x55a92a29b268 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x55a92a29b1a0 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x55a92a29b468 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x55a92a29b320 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x55a92a29b398 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x55a92a29b738 <line:717:5, col:73> col:24
| `-FunctionDecl 0x55a92a29b678 parent 0x55a929d9e488 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55a92a29b528 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x55a92a29b5a0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x55a92a29b958 <line:718:5, col:72> col:24
| `-FunctionDecl 0x55a92a29b898 parent 0x55a929d9e488 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55a92a29b788 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x55a92a29b800 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x55a92a29bb20 <line:719:5, col:57> col:29
| `-FunctionDecl 0x55a92a29ba68 parent 0x55a929d9e488 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x55a92a29b9a8 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x55a92a29bda8 <line:720:5, col:73> col:30
| `-FunctionDecl 0x55a92a29bce8 parent 0x55a929d9e488 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55a92a29bb98 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x55a92a29bc10 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x55a92a29bfc8 <line:721:5, col:73> col:30
| `-FunctionDecl 0x55a92a29bf08 parent 0x55a929d9e488 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55a92a29bdf8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x55a92a29be70 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x55a92a2a1850 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x55a92a2a1938 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x55a92a29a4f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55a92a2a23a8 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x55a92a2a2360 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x55a92a29a4f8
| |     `-DeclRefExpr 0x55a92a2a2340 <col:7> 'const Timestamp' lvalue ParmVar 0x55a92a2a1938 '' 'const Timestamp &'
| `-CompoundStmt 0x55a92a2a2408 <col:7>
|-CXXConstructorDecl 0x55a92a2a1ab8 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a92a2a1bc8 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x55a92a29a4f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55a92a2a26a8 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x55a92a2a2650 <col:7> 'Timestamp::rep_t' xvalue ._t 0x55a92a29a4f8
| |     `-CXXStaticCastExpr 0x55a92a2a2620 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x55a92a2a25f0 <col:7> 'Timestamp' lvalue ParmVar 0x55a92a2a1bc8 '' 'Timestamp &&'
| `-CompoundStmt 0x55a92a2a2708 <col:7>
|-CXXDestructorDecl 0x55a92a2a1c78 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55a929fa83a8 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x55a929fa84b8 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x55a929fa8fa8 <col:7>
|   |-CXXMemberCallExpr 0x55a929fa8f48 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x55a929fa8e88 <col:7> '<bound member function type>' .operator= 0x55a929fa8558
|   | | `-MemberExpr 0x55a929fa8d98 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x55a92a29a4f8
|   | |   `-CXXThisExpr 0x55a929fa8d88 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x55a929fa8e58 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x55a92a29a4f8
|   |   `-DeclRefExpr 0x55a929fa8e38 <col:7> 'const Timestamp' lvalue ParmVar 0x55a929fa84b8 '' 'const Timestamp &'
|   `-ReturnStmt 0x55a929fa8f98 <col:7>
|     `-UnaryOperator 0x55a929fa8f80 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a929fa8f70 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x55a929fa8858 <col:7> col:7 implicit operator= 'Timestamp &(Timestamp &&)' inline default trivial noexcept-unevaluated 0x55a929fa8858
  `-ParmVarDecl 0x55a929fa8968 <col:7> col:7 'Timestamp &&'

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a92a2eb0c0 prev 0x55a92a2c7980 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x55a92a2eb1f8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x55a92a2eb288 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x55a92a2eb330 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x55a92a2eb3d0 <col:20>
| `-OptimizeNoneAttr 0x55a92a2eb428 <col:30>
|-CXXMethodDecl 0x55a92a2eb478 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x55a92a2eb518 <col:20>
| `-OptimizeNoneAttr 0x55a92a2eb570 <col:30>
|-CXXMethodDecl 0x55a92a2eb5c0 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55a92a2eb688 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55a92a2eb750 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55a92a2eb868 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x55a92a2eb930 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x55a92a2eb9d0 <col:20>
| `-OptimizeNoneAttr 0x55a92a2eba28 <col:30>
|-CXXMethodDecl 0x55a92a2eba98 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x55a92a2ebb38 <col:20>
| `-OptimizeNoneAttr 0x55a92a2ebb90 <col:30>
|-CXXMethodDecl 0x55a92a2ebc38 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x55a92a2ebcd8 <col:20>
| `-OptimizeNoneAttr 0x55a92a2ebd30 <col:30>
|-CXXMethodDecl 0x55a92a2ebd80 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55a92a2ebe98 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x55a92a2ebfb8 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x55a92a2ec0d8 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x55a92a2ec1a0 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x55a92a2ec240 <col:62> "" ""
|-AccessSpecDecl 0x55a92a2ec2b0 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x55a92a2ec310 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x55a92a2ecf08 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x55a92a2ed130 <col:29, col:31>
|-CXXMethodDecl 0x55a92a2ec3d8 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x55a92a2ec518 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x55a92a2ec488 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x55a92a2ec610 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x55a92a2ed140 <col:23, col:25>
|-CXXMethodDecl 0x55a92a2ec7c8 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x55a92a2ec700 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x55a92a2eca98 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55a92a2ec880 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a92a2ec8f8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55a92a2ec970 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a92a2ecc28 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x55a92a2ecb60 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x55a92a2ecd20 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x55a92a2ecd88 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x55a92a2ecd88
  `-ParmVarDecl 0x55a92a2ece98 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class StringArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class String> (empty)
         0 |   class StringArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a92a3ccae8 <../dummy_inc/click/args.hh:1345:1, line:1349:1> line:1345:7 referenced class StringArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a92a3ccc08 <col:1, col:7> col:7 implicit class StringArg
|-AccessSpecDecl 0x55a92a3ccc98 <col:19, col:25> col:19 public
|-CXXMethodDecl 0x55a92a3cce90 <line:1346:5, line:1348:5> line:1346:17 used parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x55a92a3cccd0 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55a92a3ccd48 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x55a92a3ccdc0 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55a92a3ccf60 <col:79> 'const ArgContext' lvalue Var 0x55a92a3b09f8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55a92a3cd100 <col:91, line:1348:5>
|   `-ReturnStmt 0x55a92a3cd0f0 <line:1347:9, col:41>
|     `-CallExpr 0x55a92a3cd0a0 <col:16, col:41> 'bool'
|       |-ImplicitCastExpr 0x55a92a3cd088 <col:16> 'bool (*)(const String &, String *, String *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55a92a3cd040 <col:16> 'bool (const String &, String *, String *)' lvalue Function 0x55a92a3cca30 'cp_string' 'bool (const String &, String *, String *)'
|       |-DeclRefExpr 0x55a92a3ccfc8 <col:26> 'const String' lvalue ParmVar 0x55a92a3cccd0 'str' 'const String &'
|       |-UnaryOperator 0x55a92a3cd008 <col:31, col:32> 'String *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x55a92a3ccfe8 <col:32> 'String' lvalue ParmVar 0x55a92a3ccd48 'result' 'String &'
|       `-ImplicitCastExpr 0x55a92a3cd0d8 <col:40> 'String *' <NullToPointer>
|         `-IntegerLiteral 0x55a92a3cd020 <col:40> 'int' 0
|-CXXConstructorDecl 0x55a92a2b94d8 <line:1345:7> col:7 implicit constexpr StringArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55a92a2b95b0 <col:7> col:7 implicit ~StringArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55a92a2b96e8 <col:7> col:7 implicit constexpr StringArg 'void (const StringArg &)' inline default trivial noexcept-unevaluated 0x55a92a2b96e8
| `-ParmVarDecl 0x55a92a2b97f8 <col:7> col:7 'const StringArg &'
`-CXXConstructorDecl 0x55a92a2b9898 <col:7> col:7 implicit used constexpr StringArg 'void (StringArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55a92a2b99a8 <col:7> col:7 'StringArg &&'
  `-CompoundStmt 0x55a92a2ba600 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.StringArg = type { i8 }
  NonVirtualBaseLLVMType:%class.StringArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a92a3cd140 <../dummy_inc/click/args.hh:1351:1, col:58> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'StringArg'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55a92a3cd398 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55a92a2b93e8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55a92a2b9a18 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<String> &)' inline default trivial noexcept-unevaluated 0x55a92a2b9a18
| `-ParmVarDecl 0x55a92a2b9b28 <col:19> col:19 'const DefaultArg<String> &'
|-CXXConstructorDecl 0x55a92a2b9bc8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<String> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a92a2b9cd8 <col:19> col:19 used 'DefaultArg<String> &&'
| |-CXXCtorInitializer 'StringArg'
| | `-CXXConstructExpr 0x55a92a2ba610 <col:19> 'StringArg' 'void (StringArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55a92a2ba5e0 <col:19> 'StringArg' xvalue <UncheckedDerivedToBase (StringArg)>
| |     `-CXXStaticCastExpr 0x55a92a2ba5b0 <col:19> 'DefaultArg<String>' xvalue static_cast<struct DefaultArg<class String> &&> <NoOp>
| |       `-DeclRefExpr 0x55a92a2ba580 <col:19> 'DefaultArg<String>' lvalue ParmVar 0x55a92a2b9cd8 '' 'DefaultArg<String> &&'
| `-CompoundStmt 0x55a92a2ba680 <col:19>
`-CXXDestructorDecl 0x55a92a2b9d78 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a92a2bb348 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55a92a2bb748 prev 0x55a92a2bb348 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x55a92a2bb940 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x55a92a2bb848 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x55a92a47d430 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x55a92a2bbac0 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x55a92a47d3f0 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x55a92a47d3b0 <col:20> 'String *' lvalue ParmVar 0x55a92a2bb848 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x55a92a2bbb20 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x55a92a47d490 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x55a92a3b0820 <line:853:25, line:854:9>
|-CXXMethodDecl 0x55a92a2bba00 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x55a92a38b990 Slot::store 'void ()' ]
| `-CompoundStmt 0x55a92a47dbd8 <col:22, line:857:9>
|   `-CallExpr 0x55a92a47db90 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x55a92a47db78 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55a92a47daf8 <col:13> 'void (String &, const String &)' lvalue Function 0x55a92a47d9d8 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x55a92a060b38 'assign_consume')
|     |-UnaryOperator 0x55a92a47d620 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x55a92a47d608 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x55a92a47d5d8 <col:29> 'String *' lvalue ->_ptr 0x55a92a2bbac0
|     |     `-CXXThisExpr 0x55a92a47d5c8 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x55a92a47dbc0 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x55a92a47d648 <col:35> 'String':'String' lvalue ->_slot 0x55a92a2bbb20
|         `-CXXThisExpr 0x55a92a47d638 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x55a92a2bbac0 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x55a92a2bbb20 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x55a92a2bbb98 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x55a92a2bbb98
| `-ParmVarDecl 0x55a92a2bbca8 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x55a92a2bbd48 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x55a92a2bbd48
| `-ParmVarDecl 0x55a92a2bbe58 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x55a92a2bbef8 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x55a92a2bbef8
| `-ParmVarDecl 0x55a92a2bc008 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x55a92a2bc078 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x55a92a2bc078
| `-ParmVarDecl 0x55a92a2bc188 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x55a92a2bc210 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x55a92a38b890 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x55a92a47d4f8 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a92a3c8800 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a92a3c8918 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x55a92a3c89a8 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x55a92a3c8be8 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x55a92a3c89e0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55a92a3c8a60 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x55a92a3c8ad8 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55a92a3c8e00 <col:81> 'const ArgContext' lvalue Var 0x55a92a3b09f8 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55a92a3c8d40 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x55a92a3c8cb0 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x55a92a3c8f58 <col:35, line:1261:5>
|   `-ReturnStmt 0x55a92a3c8f48 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x55a92a3c8f30 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x55a92a3c8f00 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55a92a3c8ee8 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x55a92a3c8ec0 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x55a92a3c8ea0 <col:16, col:24> 'String' (CXXTemporary 0x55a92a3c8ea0)
|               `-CXXConstructExpr 0x55a92a3c8e68 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x55a92a3c8e50 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x55a92a3c8e30 <col:23> 'bool' lvalue ParmVar 0x55a92a3c8cb0 'x' 'bool'
|-CXXConstructorDecl 0x55a92a482968 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55a92a482a40 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55a92a482b78 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x55a92a482b78
| `-ParmVarDecl 0x55a92a482c88 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x55a92a482d28 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55a92a482e38 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x55a92a483a90 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a92a3c8f98 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x55a92a3c91f8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55a92a482878 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55a92a482ea8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x55a92a482ea8
| `-ParmVarDecl 0x55a92a482fb8 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x55a92a483058 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a92a483168 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x55a92a483aa0 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55a92a483a70 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x55a92a483a40 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x55a92a483a10 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x55a92a483168 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x55a92a483b10 <col:19>
`-CXXDestructorDecl 0x55a92a483208 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
