
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct TimerSet::heap_element
         0 |   class Timestamp expiry_s
         0 |     union Timestamp::rep_t _t
         0 |       int64_t x
         8 |   class Timer * t
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct pollfd
         0 |   int fd
         4 |   short events
         6 |   short revents
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct SelectSet::SelectorInfo
         0 |   class Element * read
         8 |   class Element * write
        16 |   int pollfd
           | [sizeof=24, dsize=20, align=8,
           |  nvsize=20, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff3cdc4b8 prev 0x561ff3cd3c48 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561ff3cdc5b0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x561ff3cdc640 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x561ff3cdc6b8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x561ff3cdc778 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x561ff3cdc840 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x561ff3cdc9b8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x561ff3cdc8f0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x561ff3cdca60 <col:24>
| `-OptimizeNoneAttr 0x561ff3cdcab8 <col:34>
|-CXXMethodDecl 0x561ff3cdcb30 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x561ff3cdcde8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x561ff3cdcbe0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x561ff3cdcc58 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x561ff3cdccd8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x561ff3cdcea0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x561ff3cdced8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x561ff3cdcf40 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x561ff3cdcfc8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x561ff3cdd2e8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x561ff3cdd080 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x561ff3cdd0f8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x561ff3cdd170 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x561ff3cdd1f0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x561ff3cdd400 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x561ff3ce3d18 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x561ff3ce3d18
| `-ParmVarDecl 0x561ff3ce3e28 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x561ff3ce3ec8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x561ff3ce3ec8
| `-ParmVarDecl 0x561ff3ce3fd8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x561ff3e31be0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff3cca4f0 prev 0x561ff3cca270 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x561ff3cca5e8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x561ff3cca678 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x561ff3cca6d8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x561ff3cca7c8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x561ff3cca8c8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x561ff3ccaa98 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x561ff3cca948 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x561ff3cca9c0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x561ff3ccac28 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x561ff3ccab60 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x561ff3ccacd0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x561ff3ccae08 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x561ff3ccad40 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x561ff3ccafa8 <line:40:5, col:37> col:18 used run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x561ff3ccaee8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x561ff3ccb148 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x561ff3ccb088 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x561ff3ccb1f0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x561ff3ccb2f0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x561ff3ccb3d0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3ccb2d0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x561ff3ccb2b0 <col:26> 'int' 1
| `-EnumConstantDecl 0x561ff3ccb380 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x561ff3ccb3e8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561ff3ccb360 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x561ff3ccb340 <col:44> 'int' 2
|-CXXMethodDecl 0x561ff3ccb530 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x561ff3ccb418 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x561ff3ccb498 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x561ff3ccb688 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x561ff3ccb5f8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x561ff3ccb8c8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x561ff3ccb748 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x561ff3ccb7c0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x561ff3ccb978 <col:20>
| `-OptimizeNoneAttr 0x561ff3ccb9d0 <col:30>
|-CXXMethodDecl 0x561ff3cd0b10 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x561ff3ccba10 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x561ff3cd0bb8 <col:20>
| `-OptimizeNoneAttr 0x561ff3cd0c10 <col:30>
|-CXXMethodDecl 0x561ff3cd0c60 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x561ff3cd0d28 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x561ff3cd0de8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x561ff3cd0e70 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x561ff3cd0ef8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x561ff3cd0f80 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x561ff3cd1008 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x561ff3cd1098 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x561ff3cd1158 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x561ff3cd11e0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x561ff3cd1268 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x561ff3cd12f0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x561ff3cd1378 <line:66:5, col:36> col:23 used PULL_TO_PUSH 'const char []' static
|-VarDecl 0x561ff3cd1400 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x561ff3cd1490 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x561ff3cd1550 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x561ff3cd15e0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x561ff3cd1730 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x561ff3cd1698 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x561ff3cd18c0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x561ff3cd17f0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x561ff3cd1b60 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x561ff3cd1978 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x561ff3cd19f8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x561ff3cd1a78 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x561ff3cd1c18 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x561ff3cd1d20 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x561ff3cd1fb0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3cd1d00 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x561ff3cd1ce0 <col:33> 'int' 0
| |-EnumConstantDecl 0x561ff3cd1db0 <line:81:9, col:32> col:9 referenced CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x561ff3cd1fc8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3cd1d90 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x561ff3cd1d70 <col:32> 'int' 20
| |-EnumConstantDecl 0x561ff3cd1e40 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x561ff3cd1fe0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3cd1e20 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x561ff3cd1e00 <col:38> 'int' 90
| |-EnumConstantDecl 0x561ff3cd1ed0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x561ff3cd1ff8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3cd1eb0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x561ff3cd1e90 <col:35> 'int' 100
| `-EnumConstantDecl 0x561ff3cd1f60 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x561ff3cd2010 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561ff3cd1f40 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x561ff3cd1f20 <col:32> 'int' 2000
|-CXXMethodDecl 0x561ff3cd2050 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x561ff3cd2490 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x561ff3cd2300 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x561ff3cd2378 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x561ff3cd2560 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x561ff3cd26e0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x561ff3cd2610 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x561ff3cd28e8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x561ff3cd2798 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x561ff3cd2810 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x561ff3cd29e8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x561ff3cd2a88 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x561ff3cd2b50 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x561ff3cd2be0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x561ff3cd2e10 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3cd2bc0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x561ff3cd2ba0 <col:36> 'int' EnumConstant 0x561ff3cd2b50 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x561ff3cd2c30 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x561ff3cd2c80 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x561ff3cd2cd0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x561ff3cd2d20 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x561ff3cd2d70 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x561ff3cd2dc0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x561ff3cd2ef8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x561ff3cd2e38 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x561ff3cd2fc0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x561ff3cd3080 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x561ff3cd3140 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x561ff3cd3200 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x561ff3cd3318 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x561ff3cd33e0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x561ff3cd3560 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x561ff3cd3490 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x561ff3cd3688 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x561ff3cd3888 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x561ff3cd3738 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x561ff3cd37b8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x561ff3ce01e8 <col:54, line:127:5>
|   |-ParenExpr 0x561ff3ce0098 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x561ff3ce0068 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x561ff3cdfd58 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x561ff3cdfd30 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x561ff3cdfd18 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x561ff3cdfd00 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x561ff3cdfcd0 <col:31> 'Router *' lvalue ->_router 0x561ff3cddbb0
|   |   |         `-CXXThisExpr 0x561ff3cdfcc0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x561ff3cdfdb8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561ff3cdfd98 <col:48> 'int' 0
|   |   `-CallExpr 0x561ff3cdffc8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x561ff3cdffb0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561ff3cdff90 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561ff37f4160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561ff3ce0008 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3cdfe28 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x561ff3ce0020 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3cdfe48 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x561ff3ce0038 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561ff3cdfe80 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x561ff3ce0050 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561ff3cdff78 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561ff3cdff60 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561ff3cdff18 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x561ff3ce0130 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x561ff3ce00c8 <col:9> 'Router *' lvalue ->_router 0x561ff3cddbb0
|   | | `-CXXThisExpr 0x561ff3ce00b8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x561ff3ce0118 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x561ff3ce00f8 <col:19> 'Router *' lvalue ParmVar 0x561ff3cd3738 'r' 'Router *'
|   `-BinaryOperator 0x561ff3ce01c8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x561ff3ce0160 <col:9> 'int' lvalue ->_eindex 0x561ff3cddc18
|     | `-CXXThisExpr 0x561ff3ce0150 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x561ff3ce01b0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x561ff3ce0190 <col:19> 'int' lvalue ParmVar 0x561ff3cd37b8 'eindex' 'int'
|-CXXMethodDecl 0x561ff3cd3a10 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x561ff3cd3948 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x561ff3cd3ae0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x561ff3cd3ba8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x561ff3cd3c48 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x561ff3cd3e98 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x561ff3cd3d10 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x561ff3cd3d90 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x561ff3cd3f48 <col:20>
| `-OptimizeNoneAttr 0x561ff3cd3fa0 <col:30>
|-CXXMethodDecl 0x561ff3cd40a8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x561ff3cd3fe0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x561ff3cd4150 <col:20>
| `-OptimizeNoneAttr 0x561ff3cd41a8 <col:30>
|-CXXMethodDecl 0x561ff3cd4278 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x561ff3cd41e8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x561ff3cd4320 <col:20>
| `-OptimizeNoneAttr 0x561ff3cd4378 <col:30>
|-CXXMethodDecl 0x561ff3cd4508 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x561ff3cd43b0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x561ff3cd4430 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x561ff3cd4698 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x561ff3cd45d0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x561ff3cd47e8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x561ff3cd4758 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x561ff3cd4938 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x561ff3cd48a8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x561ff3cd4b20 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x561ff3cd49f8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x561ff3cd4dd8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x561ff3cd4bd8 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x561ff3cd4c58 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x561ff3cd4cf8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x561ff3cd4eb0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x561ff3cd4f70 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x561ff3cd5240 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x561ff3cd50f0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x561ff3cd5168 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x561ff3cd5368 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x561ff3cd5540 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x561ff3cd5420 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x561ff3cd54a0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x561ff3cd5728 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x561ff3cd5608 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x561ff3cd5688 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x561ff3cd5a98 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x561ff3cd57e8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x561ff3cd5860 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x561ff3cd58e0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x561ff3cdf7d0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x561ff3cdf7b0 <col:106> 'int' 0
| `-ParmVarDecl 0x561ff3cd5958 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x561ff3cdf808 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x561ff3cdf7e8 <col:126> 'int' 0
|-CXXMethodDecl 0x561ff3cd5e18 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x561ff3cd5b68 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x561ff3cd5be0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x561ff3cd5c60 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x561ff3cd5cd8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x561ff3cdf840 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x561ff3cdf820 <col:114> 'int' 0
|-CXXMethodDecl 0x561ff3cd61a8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x561ff3cd5ef0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x561ff3cd5f68 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x561ff3cd5fe8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x561ff3cdf858 <col:96> 'int' 0
| `-ParmVarDecl 0x561ff3cd6060 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x561ff3cdf898 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x561ff3cdf878 <col:116> 'int' 0
|-CXXMethodDecl 0x561ff3cd6528 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x561ff3cd6278 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x561ff3cd62f0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x561ff3cd6370 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x561ff3cdf8d0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x561ff3cdf8b0 <col:109> 'int' 0
| `-ParmVarDecl 0x561ff3cd63e8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x561ff3cdf908 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x561ff3cdf8e8 <col:129> 'int' 0
|-CXXMethodDecl 0x561ff3cd68a8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x561ff3cd65f8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x561ff3cd6670 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x561ff3cd66f0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x561ff3cd6768 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x561ff3cdf940 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x561ff3cdf920 <col:117> 'int' 0
|-CXXMethodDecl 0x561ff3cd6c38 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x561ff3cd6980 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561ff3cd69f8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x561ff3cd6a78 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x561ff3cdf958 <col:99> 'int' 0
| `-ParmVarDecl 0x561ff3cd6af0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x561ff3cdf998 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x561ff3cdf978 <col:119> 'int' 0
|-CXXMethodDecl 0x561ff3cd7058 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x561ff3cd6d08 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x561ff3cd6d88 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x561ff3cd6e00 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x561ff3cd6e80 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x561ff3cdf9d0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x561ff3cdf9b0 <col:108> 'int' 0
| `-ParmVarDecl 0x561ff3cd6f00 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x561ff3cdfa08 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x561ff3cdf9e8 <col:141> 'int' 0
|-CXXMethodDecl 0x561ff3cd7478 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x561ff3cd7130 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x561ff3cd71b0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x561ff3cd7228 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x561ff3cd72a8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x561ff3cd7328 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x561ff3cdfa20 <col:121> 'int' 0
|-CXXMethodDecl 0x561ff3cd78a8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x561ff3cd7558 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x561ff3cd75d8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x561ff3cd7650 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x561ff3cd76d0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x561ff3cdfa40 <col:98> 'int' 0
| `-ParmVarDecl 0x561ff3cd7750 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x561ff3cdfa60 <col:123> 'int' 0
|-CXXMethodDecl 0x561ff3cd7b70 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x561ff3cd7980 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x561ff3cd7a00 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x561ff3cd7a80 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x561ff3cdfa80 <col:80> 'int' 0
|-EnumDecl 0x561ff3cd7c28 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x561ff3cd7d30 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x561ff3cd7fc0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3cd7d10 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x561ff3cd7cf0 <col:42> 'int' 1
| |-EnumConstantDecl 0x561ff3cd7dc0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x561ff3cd7fd8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3cd7da0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x561ff3cd7d80 <col:40> 'int' 2
| |-EnumConstantDecl 0x561ff3cd7e50 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x561ff3cd7ff0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3cd7e30 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x561ff3cd7e10 <col:44> 'int' 4
| |-EnumConstantDecl 0x561ff3cd7ee0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x561ff3cd8008 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3cd7ec0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x561ff3cd7ea0 <col:36> 'int' 7
| `-EnumConstantDecl 0x561ff3cd7f70 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x561ff3cd8020 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561ff3cd7f50 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x561ff3cd7f30 <col:34> 'int' 6
|-CXXMethodDecl 0x561ff3cd82d8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x561ff3cd8048 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x561ff3cd80e8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x561ff3cd8168 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x561ff3cd81e0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x561ff3cdfb38 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x561ff3cdfb20 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x561ff3cdfb08 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x561ff3cdfae8 <col:98, col:105> 'String' (CXXTemporary 0x561ff3cdfae8)
|           `-CXXTemporaryObjectExpr 0x561ff3cdfab0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x561ff3cd8578 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x561ff3cd83a8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x561ff3cd8420 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x561ff3cd8498 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x561ff3cdfbe8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x561ff3cdfbd0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x561ff3cdfbb8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x561ff3cdfb98 <col:94, col:101> 'String' (CXXTemporary 0x561ff3cdfb98)
| |         `-CXXTemporaryObjectExpr 0x561ff3cdfb60 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x561ff3ce03d0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x561ff3ce0348 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x561ff3ce0318 <col:9> '<bound member function type>' ->add_task_handlers 0x561ff3cd82d8
|     | `-CXXThisExpr 0x561ff3ce0308 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x561ff3ce0388 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x561ff3ce0288 <col:27> 'Task *' lvalue ParmVar 0x561ff3cd83a8 'task' 'Task *'
|     |-ImplicitCastExpr 0x561ff3ce03a0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x561ff3ce02a8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x561ff3cd8420 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x561ff3ce03b8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x561ff3ce02c8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x561ff3cd7f70 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x561ff3ce02e8 <col:62> 'const String' lvalue ParmVar 0x561ff3cd8498 'prefix' 'const String &'
|-CXXMethodDecl 0x561ff3cd8788 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x561ff3cd8640 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x561ff3cd86b8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x561ff3cdfc98 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x561ff3cdfc80 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x561ff3cdfc68 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x561ff3cdfc48 <col:70, col:77> 'String' (CXXTemporary 0x561ff3cdfc48)
| |         `-CXXTemporaryObjectExpr 0x561ff3cdfc10 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x561ff3ce05a8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x561ff3ce0520 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x561ff3ce04f0 <col:9> '<bound member function type>' ->add_task_handlers 0x561ff3cd82d8
|     | `-CXXThisExpr 0x561ff3ce04e0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x561ff3ce0560 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x561ff3ce0460 <col:27> 'Task *' lvalue ParmVar 0x561ff3cd8640 'task' 'Task *'
|     |-ImplicitCastExpr 0x561ff3ce0578 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x561ff3ce0480 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x561ff3ce0590 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x561ff3ce04a0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x561ff3cd7f70 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x561ff3ce04c0 <col:57> 'const String' lvalue ParmVar 0x561ff3cd86b8 'prefix' 'const String &'
|-CXXMethodDecl 0x561ff3cd8a68 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x561ff3cd8850 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561ff3cd88d0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561ff3cd8948 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x561ff3cd8d18 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x561ff3cd8b38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561ff3cd8bb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561ff3cd8c38 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x561ff3cd9008 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x561ff3cd8de8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561ff3cd8e68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561ff3cd8ee0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x561ff3cd92b8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x561ff3cd90d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561ff3cd9158 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561ff3cd91d8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x561ff3cd9568 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x561ff3cd9388 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561ff3cd9408 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561ff3cd9488 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x561ff3cd9818 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x561ff3cd9638 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561ff3cd96b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561ff3cd9730 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x561ff3cd9ac8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x561ff3cd98e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561ff3cd9968 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561ff3cd99e8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x561ff3cd9d78 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x561ff3cd9b98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561ff3cd9c18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561ff3cd9c98 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x561ff3cda058 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x561ff3cd9e48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561ff3cd9ec8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561ff3cd9f70 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x561ff3cda338 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x561ff3cda128 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561ff3cda1a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561ff3cda250 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x561ff3cda5a0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x561ff3cda408 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x561ff3cda488 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x561ff3cda500 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x561ff3cda848 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x561ff3cda670 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x561ff3cda6f0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x561ff3cda768 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x561ff3cdaaf8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x561ff3cda918 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561ff3cda998 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561ff3cdaa18 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x561ff3cdada8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x561ff3cdabc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561ff3cdac48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561ff3cdacc0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x561ff3cdb058 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x561ff3cdae78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561ff3cdaef8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561ff3cdaf70 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x561ff3cdb328 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x561ff3cdb128 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561ff3cdb1a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561ff3cdb248 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x561ff3cdb658 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x561ff3cdb3f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561ff3cdb478 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x561ff3cdb4f0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x561ff3cdb568 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x561ff3cdfcb0 <col:93> 'bool' false
|-CXXMethodDecl 0x561ff3cdb840 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x561ff3cdb728 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x561ff3cdb7a8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x561ff3cdba18 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x561ff3cdb900 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x561ff3cdb980 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x561ff3cdbcf8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x561ff3cdbad8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x561ff3cdbb50 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x561ff3cdbbd0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x561ff3cdbc48 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x561ff3cdbfe8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x561ff3cdbdc8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x561ff3cdbe40 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x561ff3cdbec0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x561ff3cdbf38 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x561ff3cdc220 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x561ff3cdc0c0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x561ff3cdc140 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x561ff3cdc408 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x561ff3cdc2e8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x561ff3cdc368 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x561ff3cdc4b8 prev 0x561ff3cd3c48 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x561ff3cdc5b0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x561ff3cdc640 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x561ff3cdc6b8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x561ff3cdc778 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x561ff3cdc840 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x561ff3cdc9b8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x561ff3cdc8f0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x561ff3cdca60 <col:24>
| | `-OptimizeNoneAttr 0x561ff3cdcab8 <col:34>
| |-CXXMethodDecl 0x561ff3cdcb30 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x561ff3cdcde8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x561ff3cdcbe0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x561ff3cdcc58 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x561ff3cdccd8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x561ff3cdcea0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x561ff3cdced8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x561ff3cdcf40 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x561ff3cdcfc8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x561ff3cdd2e8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x561ff3cdd080 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x561ff3cdd0f8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x561ff3cdd170 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x561ff3cdd1f0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x561ff3cdd400 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x561ff3ce3d18 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x561ff3ce3d18
| | `-ParmVarDecl 0x561ff3ce3e28 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x561ff3ce3ec8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x561ff3ce3ec8
| | `-ParmVarDecl 0x561ff3ce3fd8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x561ff3e31be0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x561ff3cdd478 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x561ff3cdd518 <col:38> "" ""
|-CXXMethodDecl 0x561ff3cdd5a8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x561ff3cdd648 <col:44> "" ""
|-AccessSpecDecl 0x561ff3cdd6b8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x561ff3cdd6e0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x561ff3cdd7e0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x561ff3cdd830 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561ff3cdd7c0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x561ff3cdd7a0 <col:27> 'int' 4
|-FieldDecl 0x561ff3cdd8e8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x561ff3cdda98 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x561ff3cddb50 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x561ff3cddbb0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x561ff3cddc18 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x561ff3cddd68 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x561ff3cddca8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x561ff3cddf18 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x561ff3cdde28 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x561ff3cde0f8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x561ff3cddfd8 <col:20> col:23 'int'
| `-ParmVarDecl 0x561ff3cde058 <col:25> col:28 'int'
|-CXXMethodDecl 0x561ff3cde3a0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x561ff3cde1c0 <col:23> col:26 'int'
| |-ParmVarDecl 0x561ff3cde240 <col:28> col:31 'int'
| `-ParmVarDecl 0x561ff3cde2b8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x561ff3cde458 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x561ff3cde520 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x561ff3cde570 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x561ff3cde5c0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x561ff3cde7a0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x561ff3cde650 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x561ff3cde6c8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x561ff3cdea48 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x561ff3cde868 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x561ff3cde8e8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x561ff3cde960 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x561ff3cdec68 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x561ff3cdeb18 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x561ff3cdeb98 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x561ff3cdefa0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x561ff3cded28 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x561ff3cdeda8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x561ff3cdee20 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x561ff3cdeea0 <col:57> col:60 'int'
|-CXXMethodDecl 0x561ff3cdf188 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x561ff3cdf070 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x561ff3cdf0f0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x561ff3cdf2d8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x561ff3cdf248 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x561ff3cdf658 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x561ff3cdf398 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x561ff3cdf418 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x561ff3cdf490 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x561ff3cdf510 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x561ff3cdf770 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct TaskLink
         0 |   struct TaskLink * _prev
         8 |   struct TaskLink * _next
        16 |   unsigned int _pass
           | [sizeof=24, dsize=20, align=8,
           |  nvsize=20, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9)
         0 |   int16_t home_thread_id
         2 |   uint8_t is_scheduled
         3 |   uint8_t is_strong_unscheduled
           | [sizeof=4, dsize=4, align=2,
           |  nvsize=4, nvalign=2]

*** Dumping AST Record Layout
         0 | union Task::Status
         0 |   struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
         0 |     int16_t home_thread_id
         2 |     uint8_t is_scheduled
         3 |     uint8_t is_strong_unscheduled
         0 |   uint32_t status
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Task::Pending
         0 |   class Task * t
         0 |   uintptr_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Task
         0 |   struct TaskLink (base)
         0 |     struct TaskLink * _prev
         8 |     struct TaskLink * _next
        16 |     unsigned int _pass
        20 |   unsigned int _stride
        24 |   int _tickets
        28 |   union Task::Status _status
        28 |     struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
        28 |       int16_t home_thread_id
        30 |       uint8_t is_scheduled
        31 |       uint8_t is_strong_unscheduled
        28 |     uint32_t status
        32 |   TaskCallback _hook
        40 |   void * _thunk
        48 |   class RouterThread * _thread
        56 |   class Element * _owner
        64 |   union Task::Pending _pending_nextptr
        64 |     class Task * t
        64 |     uintptr_t x
           | [sizeof=72, dsize=72, align=8,
           |  nvsize=72, nvalign=8]

*** Dumping AST Record Layout
         0 | class RoundRobinUnqueue
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _burst
       112 |   unsigned int _packets
       120 |   class Task _task
       120 |     struct TaskLink (base)
       120 |       struct TaskLink * _prev
       128 |       struct TaskLink * _next
       136 |       unsigned int _pass
       140 |     unsigned int _stride
       144 |     int _tickets
       148 |     union Task::Status _status
       148 |       struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
       148 |         int16_t home_thread_id
       150 |         uint8_t is_scheduled
       151 |         uint8_t is_strong_unscheduled
       148 |       uint32_t status
       152 |     TaskCallback _hook
       160 |     void * _thunk
       168 |     class RouterThread * _thread
       176 |     class Element * _owner
       184 |     union Task::Pending _pending_nextptr
       184 |       class Task * t
       184 |       uintptr_t x
       192 |   int _next
           | [sizeof=200, dsize=196, align=8,
           |  nvsize=196, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff3c57be0 <../dummy_inc/click/task.hh:31:1, line:47:1> line:31:8 referenced struct TaskLink definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561ff3c57cf8 <col:1, col:8> col:8 implicit referenced struct TaskLink
|-FieldDecl 0x561ff3c57dc8 <line:33:5, col:15> col:15 referenced _prev 'TaskLink *'
|-FieldDecl 0x561ff3c57e28 <line:34:5, col:15> col:15 referenced _next 'TaskLink *'
|-FieldDecl 0x561ff3c57e90 <line:37:5, col:14> col:14 referenced _pass 'unsigned int'
|-CXXConstructorDecl 0x561ff3c57f18 <line:39:5, line:46:5> line:39:5 used TaskLink 'void ()'
| `-CompoundStmt 0x561ff3c58180 <col:16, line:46:5>
|   |-BinaryOperator 0x561ff3c580c8 <line:41:9, col:25> 'TaskLink *' lvalue '='
|   | |-MemberExpr 0x561ff3c57fe8 <col:9> 'TaskLink *' lvalue ->_prev 0x561ff3c57dc8
|   | | `-CXXThisExpr 0x561ff3c57fd8 <col:9> 'TaskLink *' implicit this
|   | `-ImplicitCastExpr 0x561ff3c580b0 <col:17, col:25> 'TaskLink *' <LValueToRValue>
|   |   `-BinaryOperator 0x561ff3c58090 <col:17, col:25> 'TaskLink *' lvalue '='
|   |     |-MemberExpr 0x561ff3c58028 <col:17> 'TaskLink *' lvalue ->_next 0x561ff3c57e28
|   |     | `-CXXThisExpr 0x561ff3c58018 <col:17> 'TaskLink *' implicit this
|   |     `-ImplicitCastExpr 0x561ff3c58078 <col:25> 'TaskLink *' <NullToPointer>
|   |       `-IntegerLiteral 0x561ff3c58058 <col:25> 'int' 0
|   `-BinaryOperator 0x561ff3c58160 <line:44:9, col:17> 'unsigned int' lvalue '='
|     |-MemberExpr 0x561ff3c580f8 <col:9> 'unsigned int' lvalue ->_pass 0x561ff3c57e90
|     | `-CXXThisExpr 0x561ff3c580e8 <col:9> 'TaskLink *' implicit this
|     `-ImplicitCastExpr 0x561ff3c58148 <col:17> 'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x561ff3c58128 <col:17> 'int' 0
|-CXXConstructorDecl 0x561ff3d78bd8 <line:31:8> col:8 implicit constexpr TaskLink 'void (const TaskLink &)' inline default trivial noexcept-unevaluated 0x561ff3d78bd8
| `-ParmVarDecl 0x561ff3d78ce8 <col:8> col:8 'const TaskLink &'
|-CXXConstructorDecl 0x561ff3d78d88 <col:8> col:8 implicit constexpr TaskLink 'void (TaskLink &&)' inline default trivial noexcept-unevaluated 0x561ff3d78d88
| `-ParmVarDecl 0x561ff3d78e98 <col:8> col:8 'TaskLink &&'
|-CXXDestructorDecl 0x561ff3d79088 <col:8> col:8 implicit ~TaskLink 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x561ff3d79888 <col:8> col:8 implicit operator= 'TaskLink &(const TaskLink &)' inline default trivial noexcept-unevaluated 0x561ff3d79888
| `-ParmVarDecl 0x561ff3d79998 <col:8> col:8 'const TaskLink &'
`-CXXMethodDecl 0x561ff3d79a08 <col:8> col:8 implicit operator= 'TaskLink &(TaskLink &&)' inline default trivial noexcept-unevaluated 0x561ff3d79a08
  `-ParmVarDecl 0x561ff3d79b18 <col:8> col:8 'TaskLink &&'

Layout: <CGRecordLayout
  LLVMType:%struct.TaskLink = type <{ %struct.TaskLink*, %struct.TaskLink*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%struct.TaskLink.base = type <{ %struct.TaskLink*, %struct.TaskLink*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff3cf9dd8 <../dummy_inc/click/task.hh:315:9, line:319:9> line:315:9 struct definition
|-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x561ff3cf9f08 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
|-FieldDecl 0x561ff3cf9f68 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
|-FieldDecl 0x561ff3cf9fc8 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
|-CXXConstructorDecl 0x561ff3d81d98 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x561ff3d81e70 <col:9> col:9 implicit ~ 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x561ff3d82128 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x561ff3d82128
| `-ParmVarDecl 0x561ff3d82238 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
`-CXXConstructorDecl 0x561ff3d822d8 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x561ff3d822d8
  `-ParmVarDecl 0x561ff3d823e8 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'

Layout: <CGRecordLayout
  LLVMType:%struct.anon = type { i16, i8, i8 }
  NonVirtualBaseLLVMType:%struct.anon = type { i16, i8, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff3cf9c30 <../dummy_inc/click/task.hh:314:5, line:321:5> line:314:11 union Status definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561ff3cf9d48 <col:5, col:11> col:11 implicit union Status
|-CXXRecordDecl 0x561ff3cf9dd8 <line:315:9, line:319:9> line:315:9 struct definition
| |-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x561ff3cf9f08 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
| |-FieldDecl 0x561ff3cf9f68 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
| |-FieldDecl 0x561ff3cf9fc8 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
| |-CXXConstructorDecl 0x561ff3d81d98 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
| |-CXXDestructorDecl 0x561ff3d81e70 <col:9> col:9 implicit ~ 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x561ff3d82128 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x561ff3d82128
| | `-ParmVarDecl 0x561ff3d82238 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
| `-CXXConstructorDecl 0x561ff3d822d8 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x561ff3d822d8
|   `-ParmVarDecl 0x561ff3d823e8 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'
|-FieldDecl 0x561ff3cfa088 <col:9> col:9 implicit referenced 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
|-IndirectFieldDecl 0x561ff3cfa0e8 <line:316:21> col:21 implicit home_thread_id 'int16_t':'short'
| |-Field 0x561ff3cfa088 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x561ff3cf9f08 'home_thread_id' 'int16_t':'short'
|-IndirectFieldDecl 0x561ff3cfa140 <line:317:21> col:21 implicit is_scheduled 'uint8_t':'unsigned char'
| |-Field 0x561ff3cfa088 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x561ff3cf9f68 'is_scheduled' 'uint8_t':'unsigned char'
|-IndirectFieldDecl 0x561ff3cfa198 <line:318:21> col:21 implicit is_strong_unscheduled 'uint8_t':'unsigned char'
| |-Field 0x561ff3cfa088 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x561ff3cf9fc8 'is_strong_unscheduled' 'uint8_t':'unsigned char'
|-FieldDecl 0x561ff3cfa1f0 <line:320:9, col:18> col:18 status 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x561ff3d81ca8 <line:314:11> col:11 implicit used Status 'void () noexcept' inline default trivial
| `-CompoundStmt 0x561ff3d82608 <col:11>
|-CXXConstructorDecl 0x561ff3d81f78 <col:11> col:11 implicit constexpr Status 'void (const Task::Status &)' inline default trivial noexcept-unevaluated 0x561ff3d81f78
| `-ParmVarDecl 0x561ff3d82088 <col:11> col:11 'const Task::Status &'
|-CXXConstructorDecl 0x561ff3d82488 <col:11> col:11 implicit constexpr Status 'void (Task::Status &&)' inline default trivial noexcept-unevaluated 0x561ff3d82488
| `-ParmVarDecl 0x561ff3d82598 <col:11> col:11 'Task::Status &&'
`-CXXDestructorDecl 0x561ff3e31b00 <col:11> col:11 implicit ~Status 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"union.Task::Status" = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<16> >
         0 |   vector_memory<class sized_array_memory<16> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct TimerSet::heap_element>
         0 |   class vector_memory<class sized_array_memory<16> > vm_
         0 |     vector_memory<class sized_array_memory<16> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<8> >
         0 |   vector_memory<class sized_array_memory<8> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class Timer *>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class SimpleSpinlock (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class TimerSet
         0 |   class Timestamp _timer_expiry
         0 |     union Timestamp::rep_t _t
         0 |       int64_t x
         8 |   unsigned int _max_timer_stride
        12 |   unsigned int _timer_stride
        16 |   unsigned int _timer_count
        24 |   class Vector<struct TimerSet::heap_element> _timer_heap
        24 |     class vector_memory<class sized_array_memory<16> > vm_
        24 |       vector_memory<class sized_array_memory<16> >::type * l_
        32 |       vector_memory::size_type n_
        36 |       vector_memory::size_type capacity_
        40 |   class Vector<class Timer *> _timer_runchunk
        40 |     class vector_memory<class sized_array_memory<8> > vm_
        40 |       vector_memory<class sized_array_memory<8> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   class SimpleSpinlock _timer_lock (empty)
        64 |   class Timestamp _timer_check
        64 |     union Timestamp::rep_t _t
        64 |       int64_t x
        72 |   uint32_t _timer_check_reports
           | [sizeof=80, dsize=76, align=8,
           |  nvsize=76, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct pollfd>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<24> >
         0 |   vector_memory<class sized_array_memory<24> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct SelectSet::SelectorInfo>
         0 |   class vector_memory<class sized_array_memory<24> > vm_
         0 |     vector_memory<class sized_array_memory<24> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class SelectSet
         0 |   int [2] _wake_pipe
         8 |   volatile _Bool _wake_pipe_pending
        16 |   class Vector<struct pollfd> _pollfds
        16 |     class vector_memory<class sized_array_memory<8> > vm_
        16 |       vector_memory<class sized_array_memory<8> >::type * l_
        24 |       vector_memory::size_type n_
        28 |       vector_memory::size_type capacity_
        32 |   class Vector<struct SelectSet::SelectorInfo> _selinfo
        32 |     class vector_memory<class sized_array_memory<24> > vm_
        32 |       vector_memory<class sized_array_memory<24> >::type * l_
        40 |       vector_memory::size_type n_
        44 |       vector_memory::size_type capacity_
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class Spinlock (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class SpinlockIRQ (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class RouterThread
         0 |   struct TaskLink _task_link
         0 |     struct TaskLink * _prev
         8 |     struct TaskLink * _next
        16 |     unsigned int _pass
        24 |   volatile _Bool _stop_flag
        32 |   class TimerSet _timers
        32 |     class Timestamp _timer_expiry
        32 |       union Timestamp::rep_t _t
        32 |         int64_t x
        40 |     unsigned int _max_timer_stride
        44 |     unsigned int _timer_stride
        48 |     unsigned int _timer_count
        56 |     class Vector<struct TimerSet::heap_element> _timer_heap
        56 |       class vector_memory<class sized_array_memory<16> > vm_
        56 |         vector_memory<class sized_array_memory<16> >::type * l_
        64 |         vector_memory::size_type n_
        68 |         vector_memory::size_type capacity_
        72 |     class Vector<class Timer *> _timer_runchunk
        72 |       class vector_memory<class sized_array_memory<8> > vm_
        72 |         vector_memory<class sized_array_memory<8> >::type * l_
        80 |         vector_memory::size_type n_
        84 |         vector_memory::size_type capacity_
        88 |     class SimpleSpinlock _timer_lock (empty)
        96 |     class Timestamp _timer_check
        96 |       union Timestamp::rep_t _t
        96 |         int64_t x
       104 |     uint32_t _timer_check_reports
       112 |   class SelectSet _selects
       112 |     int [2] _wake_pipe
       120 |     volatile _Bool _wake_pipe_pending
       128 |     class Vector<struct pollfd> _pollfds
       128 |       class vector_memory<class sized_array_memory<8> > vm_
       128 |         vector_memory<class sized_array_memory<8> >::type * l_
       136 |         vector_memory::size_type n_
       140 |         vector_memory::size_type capacity_
       144 |     class Vector<struct SelectSet::SelectorInfo> _selinfo
       144 |       class vector_memory<class sized_array_memory<24> > vm_
       144 |         vector_memory<class sized_array_memory<24> >::type * l_
       152 |         vector_memory::size_type n_
       156 |         vector_memory::size_type capacity_
       192 |   class Spinlock _task_lock (empty)
       196 |   class atomic_uint32_t _task_blocker
       196 |     uint32_t _val
       200 |   class atomic_uint32_t _task_blocker_waiting
       200 |     uint32_t _val
       208 |   union Task::Pending _pending_head
       208 |     class Task * t
       208 |     uintptr_t x
       216 |   class Task::Pending * _pending_tail
       224 |   class SpinlockIRQ _pending_lock (empty)
       256 |   class Master * _master
       264 |   int _id
       268 |   _Bool _driver_entered
       272 |   unsigned int _tasks_per_iter
       276 |   unsigned int _iters_per_os
           | [sizeof=320, dsize=280, align=64,
           |  nvsize=280, nvalign=64]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff3c68170 prev 0x561ff3c603d0 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561ff3c68268 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x561ff3c68308 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x561ff3c6e728 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x561ff3c6eb08 <col:11>
|-CXXConstructorDecl 0x561ff3c6e800 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x561ff3c6e8e8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x561ff3c6f250 <col:11>
|-CXXConstructorDecl 0x561ff3c6e988 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x561ff3c6ea98 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x561ff3c70aa8 <col:11>
|-CXXDestructorDecl 0x561ff3c6fdb8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x561ff3cad6d8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x561ff3cad7e8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x561ff3cae0b0 <col:11>
|   `-ReturnStmt 0x561ff3cae0a0 <col:11>
|     `-UnaryOperator 0x561ff3cae088 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561ff3cae078 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x561ff3cad858 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x561ff3cad968 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x561ff3d0ad50 <col:11>
    `-ReturnStmt 0x561ff3d0ad40 <col:11>
      `-UnaryOperator 0x561ff3d0ad28 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x561ff3d0ad18 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff3c5dec8 prev 0x561ff3c5dbd8 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561ff3c5dfc0 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x561ff3c5e050 <col:19, col:25> col:19 public
|-TypedefDecl 0x561ff3c5e088 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x561ff38ad790 'int32_t' sugar
|   |-Typedef 0x561ff37be328 'int32_t'
|   `-TypedefType 0x561ff3797510 '__int32_t' sugar
|     |-Typedef 0x561ff3797128 '__int32_t'
|     `-BuiltinType 0x561ff3755580 'int'
|-TypedefDecl 0x561ff3c5e0f0 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x561ff38ad950 'int64_t' sugar
|   |-Typedef 0x561ff37be390 'int64_t'
|   `-TypedefType 0x561ff3797630 '__int64_t' sugar
|     |-Typedef 0x561ff3797208 '__int64_t'
|     `-BuiltinType 0x561ff37555a0 'long'
|-EnumDecl 0x561ff3c5e148 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x561ff3c5e2c0 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x561ff3c5e2a0 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x561ff3c5e278 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x561ff3c5e260 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x561ff3c5e230 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x561ff3c5e3b8 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x561ff3c5e398 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x561ff3c5e370 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x561ff3c5e358 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x561ff3c5e330 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x561ff3c5e310 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x561ff3c5e408 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x561ff3c5e510 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x561ff3c60120 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3c5e4f0 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x561ff3c5e4d0 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x561ff3c5e5a0 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x561ff3c60138 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3c5e580 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x561ff3c5e560 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x561ff3c5e630 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x561ff3c60150 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3c5e610 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x561ff3c5e5f0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x561ff3c5e6c0 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x561ff3c60168 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3c5e6a0 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x561ff3c5e680 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x561ff3c5fe10 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x561ff3c60180 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3c5e730 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x561ff3c5e710 <col:25> 'int' 1000
| |-EnumConstantDecl 0x561ff3c5fea0 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x561ff3c60198 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3c5fe80 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x561ff3c5fe60 <col:24> 'int' 1000
| |-EnumConstantDecl 0x561ff3c5ff30 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x561ff3c601b0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3c5ff10 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x561ff3c5fef0 <col:26> 'int' EnumConstant 0x561ff3c5e510 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x561ff3c60000 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x561ff3c601c8 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3c5ffe0 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x561ff3c5ffc0 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x561ff3c5ff80 <col:27> 'int' EnumConstant 0x561ff3c5ff30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x561ff3c5ffa0 <col:44> 'int' EnumConstant 0x561ff3c5fea0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x561ff3c600d0 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x561ff3c601e0 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561ff3c600b0 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x561ff3c60090 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x561ff3c60050 <col:27> 'int' EnumConstant 0x561ff3c5ff30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x561ff3c60070 <col:44> 'int' EnumConstant 0x561ff3c5e6c0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x561ff3c601f8 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x561ff3c60300 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x561ff3c60350 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561ff3c602e0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x561ff3c602c0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c5ff30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x561ff3c60378 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x561ff38ad3c0 'uninitialized_type'
|   `-CXXRecord 0x561ff38ad328 'uninitialized_type'
|-CXXRecordDecl 0x561ff3c603d0 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x561ff3c604e0 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x561ff3c692b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x561ff3c6eb18 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x561ff3c6ec38 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x561ff3c6ebf0 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x561ff3c6eb80 <col:9> '<bound member function type>' ->assign 0x561ff3c66398
|     | `-CXXThisExpr 0x561ff3c6eb70 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x561ff3c6ebb0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x561ff3c6ec20 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x561ff3c6ebd0 <col:19> 'int' 0
|-CXXConstructorDecl 0x561ff3c60728 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x561ff3c605a0 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x561ff3c60618 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x561ff3c6e5c0 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x561ff3c6e5a0 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x561ff3c692b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x561ff3c6ec50 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x561ff3c6eda0 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x561ff3c6ed28 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x561ff3c6ecb8 <col:9> '<bound member function type>' ->assign 0x561ff3c66398
|     | `-CXXThisExpr 0x561ff3c6eca8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x561ff3c6ed70 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x561ff3c6ed58 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x561ff3c6ece8 <col:16> 'long' lvalue ParmVar 0x561ff3c605a0 'sec' 'long'
|     `-ImplicitCastExpr 0x561ff3c6ed88 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x561ff3c6ed08 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x561ff3c60618 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x561ff3c60988 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x561ff3c607f8 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x561ff3c60870 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x561ff3c6e5f8 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x561ff3c6e5d8 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x561ff3c692b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x561ff3c6edb8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x561ff3c6eef0 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x561ff3c6ee90 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x561ff3c6ee20 <col:9> '<bound member function type>' ->assign 0x561ff3c66398
|     | `-CXXThisExpr 0x561ff3c6ee10 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x561ff3c6eec0 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x561ff3c6ee50 <col:16> 'int' lvalue ParmVar 0x561ff3c607f8 'sec' 'int'
|     `-ImplicitCastExpr 0x561ff3c6eed8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x561ff3c6ee70 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x561ff3c60870 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x561ff3c60be8 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x561ff3c60a58 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x561ff3c60ad0 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x561ff3c6e630 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x561ff3c6e610 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x561ff3c692b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x561ff3c6ef08 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x561ff3c6f058 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x561ff3c6efe0 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x561ff3c6ef70 <col:9> '<bound member function type>' ->assign 0x561ff3c66398
|     | `-CXXThisExpr 0x561ff3c6ef60 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x561ff3c6f028 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x561ff3c6f010 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x561ff3c6efa0 <col:16> 'unsigned long' lvalue ParmVar 0x561ff3c60a58 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x561ff3c6f040 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x561ff3c6efc0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x561ff3c60ad0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x561ff3c60e48 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x561ff3c60cb8 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x561ff3c60d30 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x561ff3c6e668 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x561ff3c6e648 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x561ff3c692b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x561ff3c6f070 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x561ff3c6f1c0 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x561ff3c6f148 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x561ff3c6f0d8 <col:9> '<bound member function type>' ->assign 0x561ff3c66398
|     | `-CXXThisExpr 0x561ff3c6f0c8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x561ff3c6f190 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x561ff3c6f178 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x561ff3c6f108 <col:16> 'unsigned int' lvalue ParmVar 0x561ff3c60cb8 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x561ff3c6f1a8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x561ff3c6f128 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x561ff3c60d30 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x561ff3c60fa8 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x561ff3c60f18 <col:31> col:37 'double'
|-CXXConstructorDecl 0x561ff3c61148 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x561ff3c61080 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x561ff3c61378 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x561ff3c61280 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x561ff3c61528 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x561ff3c61468 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x561ff3c692b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x561ff3c6f260 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x561ff3c6f1d8 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x561ff3c61468 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x561ff3c6f2c0 <col:19, line:214:5>
|-CXXConstructorDecl 0x561ff3c616f8 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x561ff3c61638 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x561ff3c692b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x561ff3c6f2d0 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x561ff3c6f380 <col:53, line:219:5>
|   `-CStyleCastExpr 0x561ff3c6f358 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x561ff3c6f328 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x561ff3c61638 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x561ff3c618e8 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x561ff3c61860 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x561ff3c5dc70 'Timestamp'
|   | `-CXXRecord 0x561ff3c5dec8 'Timestamp'
|   `-ParenType 0x561ff3c61800 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x561ff3c617d0 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x561ff3c5e210 'Timestamp::seconds_type' sugar
|         |-Typedef 0x561ff3c5e088 'seconds_type'
|         `-TypedefType 0x561ff38ad790 'int32_t' sugar
|           |-Typedef 0x561ff37be328 'int32_t'
|           `-TypedefType 0x561ff3797510 '__int32_t' sugar
|             |-Typedef 0x561ff3797128 '__int32_t'
|             `-BuiltinType 0x561ff3755580 'int'
|-CXXConversionDecl 0x561ff3c61a28 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x561ff3c61af8 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x561ff3c6f488 <col:37, line:231:5>
|   `-ReturnStmt 0x561ff3c6f478 <line:227:9, col:23>
|     `-BinaryOperator 0x561ff3c6f458 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x561ff3c6f428 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x561ff3c6f3d8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x561ff3c68308
|       |   `-MemberExpr 0x561ff3c6f3a8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x561ff3c692b8
|       |     `-CXXThisExpr 0x561ff3c6f398 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x561ff3c6f440 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x561ff3c6f408 <col:23> 'int' 0
|-CXXMethodDecl 0x561ff3c61bb8 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x561ff3c61c78 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x561ff3c61d38 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x561ff3c61df8 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x561ff3c61eb8 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x561ff3c62028 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x561ff3c61f68 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x561ff3c62170 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x561ff3c620e0 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff3c62238 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x561ff3c622d8 <col:54> "" ""
|-CXXMethodDecl 0x561ff3c62368 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x561ff3c62408 <col:54> "" ""
|-CXXMethodDecl 0x561ff3c62498 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x561ff3c62538 <col:54> "" ""
|-CXXMethodDecl 0x561ff3c62638 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x561ff3c62708 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x561ff3c62838 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x561ff3c62930 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x561ff3c62a68 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x561ff3c6f6a0 <col:39, line:271:5>
|   `-ReturnStmt 0x561ff3c6f690 <line:267:9, col:61>
|     `-CallExpr 0x561ff3c6f630 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x561ff3c6f618 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x561ff3c6f4a0 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x561ff3c695e8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x561ff3c6f660 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x561ff3c6f500 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x561ff3c68308
|       |   `-MemberExpr 0x561ff3c6f4d0 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x561ff3c692b8
|       |     `-CXXThisExpr 0x561ff3c6f4c0 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x561ff3c6f678 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x561ff3c6f5a0 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x561ff3c6f570 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x561ff3c6f530 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c5ff30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x561ff3c6f588 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x561ff3c6f550 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c5fea0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x561ff3c62b28 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x561ff3c6f860 <col:39, line:279:5>
|   `-ReturnStmt 0x561ff3c6f850 <line:275:9, col:61>
|     `-CallExpr 0x561ff3c6f7f0 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x561ff3c6f7d8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x561ff3c6f6b8 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x561ff3c695e8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x561ff3c6f820 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x561ff3c6f718 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x561ff3c68308
|       |   `-MemberExpr 0x561ff3c6f6e8 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x561ff3c692b8
|       |     `-CXXThisExpr 0x561ff3c6f6d8 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x561ff3c6f838 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x561ff3c6f7b8 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x561ff3c6f788 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x561ff3c6f748 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c5ff30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x561ff3c6f7a0 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x561ff3c6f768 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c5e6c0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x561ff3c62be8 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x561ff3c6f9f8 <col:39, line:287:5>
|   `-ReturnStmt 0x561ff3c6f9e8 <line:283:9, col:53>
|     `-BinaryOperator 0x561ff3c6f9c8 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x561ff3c6f998 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x561ff3c6f8b8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x561ff3c68308
|       |   `-MemberExpr 0x561ff3c6f888 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x561ff3c692b8
|       |     `-CXXThisExpr 0x561ff3c6f878 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x561ff3c6f9b0 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x561ff3c6f978 <col:23, col:53> 'int'
|           `-BinaryOperator 0x561ff3c6f958 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x561ff3c6f928 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x561ff3c6f8e8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c5e510 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x561ff3c6f940 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x561ff3c6f908 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c5ff30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x561ff3c62cd8 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x561ff3c70c90 <col:40, line:293:5>
|   |-DeclStmt 0x561ff3c6fb40 <line:291:9, col:48>
|   | `-VarDecl 0x561ff3c6fa20 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x561ff3c6fb20 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x561ff3c6fac8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x561ff3c6fa98 <col:22> '<bound member function type>' ->subsec 0x561ff3c61c78
|   |     |   `-CXXThisExpr 0x561ff3c6fa88 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x561ff3c6fb08 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x561ff3c6fae8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c60000 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x561ff3c70c80 <line:292:9, col:70>
|     `-ExprWithCleanups 0x561ff3c70c68 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x561ff3c70c38 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x561ff3c70c20 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x561ff3c70c00 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x561ff3c70bd0 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x561ff3c70968 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x561ff3c70950 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x561ff3c6fb58 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x561ff3c6fa20 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x561ff3c70b70 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x561ff3c70b58 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x561ff3c70b28 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x561ff3c70980 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x561ff3c708f0 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x561ff3c708d8 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x561ff3c70888 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x561ff3c5de18 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x561ff3c70828 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x561ff3c6fb88 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x561ff3c6fb78 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x561ff3c70870 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x561ff3c70858 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x561ff3c70048 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x561ff3c6fbb0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x561ff3c6fc40 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x561ff3c6fc10 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x561ff3c6fbd0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c60000 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x561ff3c6fc28 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x561ff3c6fbf0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x561ff3c6fa20 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x561ff3c70ba0 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x561ff3c70938 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x561ff3c70928 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x561ff3c62d98 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x561ff3c711e8 <col:40, line:302:5>
|   |-DeclStmt 0x561ff3c70de0 <line:297:9, col:48>
|   | `-VarDecl 0x561ff3c70cc0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x561ff3c70dc0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x561ff3c70d68 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x561ff3c70d38 <col:22> '<bound member function type>' ->subsec 0x561ff3c61c78
|   |     |   `-CXXThisExpr 0x561ff3c70d28 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x561ff3c70da8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x561ff3c70d88 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c600d0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x561ff3c711d8 <line:298:9, col:70>
|     `-ExprWithCleanups 0x561ff3c711c0 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x561ff3c71190 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x561ff3c71178 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x561ff3c71158 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x561ff3c71128 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x561ff3c71050 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x561ff3c71038 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x561ff3c70df8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x561ff3c70cc0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x561ff3c710c8 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x561ff3c710b0 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x561ff3c71080 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x561ff3c71068 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x561ff3c70fd8 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x561ff3c70fc0 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x561ff3c70fa0 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x561ff3c5de18 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x561ff3c70f40 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x561ff3c70e28 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x561ff3c70e18 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x561ff3c70f88 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x561ff3c70f70 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x561ff3c70f00 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x561ff3c70e50 <col:39> 'int' 0
|               |               `-BinaryOperator 0x561ff3c70ee0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x561ff3c70eb0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x561ff3c70e70 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c600d0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x561ff3c70ec8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x561ff3c70e90 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x561ff3c70cc0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x561ff3c710f8 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x561ff3c71020 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x561ff3c71010 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x561ff3c62e58 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x561ff3c71270 <col:40, line:306:5>
|   `-ReturnStmt 0x561ff3c71260 <line:305:9, col:17>
|     `-CXXConstructExpr 0x561ff3c71230 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x561ff3c71218 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561ff3c71208 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x561ff3c62ff8 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x561ff3c62f08 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x561ff3c631c8 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x561ff3c630d0 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x561ff3c632b8 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x561ff3c63428 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x561ff3c63368 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x561ff3c713b8 <col:56, line:320:5>
|   `-ReturnStmt 0x561ff3c713a8 <line:319:9, col:32>
|     `-ExprWithCleanups 0x561ff3c71390 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x561ff3c71360 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x561ff3c71348 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x561ff3c71308 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x561ff3c712d8 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x561ff3c71298 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x561ff3c63368 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x561ff3c712f0 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x561ff3c712b8 <col:31> 'int' 0
|-CXXMethodDecl 0x561ff3c63668 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x561ff3c634e0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x561ff3c63558 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561ff3c71588 <col:72, line:326:5>
|   `-ReturnStmt 0x561ff3c71578 <line:325:9, col:51>
|     `-ExprWithCleanups 0x561ff3c71560 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x561ff3c71530 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x561ff3c71518 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x561ff3c714d8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x561ff3c714c0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x561ff3c713e0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x561ff3c634e0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x561ff3c71480 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x561ff3c71468 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x561ff3c71400 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x561ff3c67a60 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x561ff3c714a8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x561ff3c71420 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x561ff3c63558 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff3c63818 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x561ff3c63728 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x561ff3c7c160 <col:56, line:337:5>
|   |-DeclStmt 0x561ff3c7bd98 <line:329:9, col:51>
|   | `-VarDecl 0x561ff3c715b0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x561ff3c7bd80 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x561ff3c7bd50 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x561ff3c7bd38 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x561ff3c7bd20 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x561ff3c7bcf0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x561ff3c7bcd8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x561ff3c7bcc0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x561ff3c716a0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x561ff3c7bf50 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x561ff3c7be00 <col:9, col:14> 'int64_t':'long' lvalue .x 0x561ff3c68308
|   | | `-MemberExpr 0x561ff3c7bdd0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x561ff3c692b8
|   | |   `-DeclRefExpr 0x561ff3c7bdb0 <col:9> 'Timestamp' lvalue Var 0x561ff3c715b0 't' 'Timestamp'
|   | `-BinaryOperator 0x561ff3c7bf30 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x561ff3c7bf00 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x561ff3c7be30 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x561ff3c63728 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x561ff3c7bf18 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x561ff3c7bee0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x561ff3c7bec0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x561ff3c7be90 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x561ff3c7be50 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c5ff30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x561ff3c7bea8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x561ff3c7be70 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c5fea0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x561ff3c7c148 <line:336:9, col:16>
|     `-CXXConstructExpr 0x561ff3c7c118 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x561ff3c7c100 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x561ff3c7c0e0 <col:16> 'Timestamp' lvalue Var 0x561ff3c715b0 't' 'Timestamp'
|-CXXMethodDecl 0x561ff3c639e0 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x561ff3c638d0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x561ff3c63948 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561ff3c7c318 <col:72, line:343:5>
|   `-ReturnStmt 0x561ff3c7c308 <line:342:9, col:51>
|     `-ExprWithCleanups 0x561ff3c7c2f0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x561ff3c7c2c0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x561ff3c7c2a8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x561ff3c7c268 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x561ff3c7c250 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x561ff3c7c198 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x561ff3c638d0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x561ff3c7c210 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x561ff3c7c1f8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x561ff3c7c1b8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x561ff3c67ba8 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x561ff3c7c238 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x561ff3c7c1d8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x561ff3c63948 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff3c63b30 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x561ff3c63aa0 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x561ff3c7c760 <col:56, line:354:5>
|   |-DeclStmt 0x561ff3c7c508 <line:346:9, col:51>
|   | `-VarDecl 0x561ff3c7c340 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x561ff3c7c4f0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x561ff3c7c4c0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x561ff3c7c4a8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x561ff3c7c490 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x561ff3c7c460 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x561ff3c7c448 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x561ff3c7c430 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x561ff3c7c400 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x561ff3c7c6c0 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x561ff3c7c570 <col:9, col:14> 'int64_t':'long' lvalue .x 0x561ff3c68308
|   | | `-MemberExpr 0x561ff3c7c540 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x561ff3c692b8
|   | |   `-DeclRefExpr 0x561ff3c7c520 <col:9> 'Timestamp' lvalue Var 0x561ff3c7c340 't' 'Timestamp'
|   | `-BinaryOperator 0x561ff3c7c6a0 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x561ff3c7c670 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x561ff3c7c5a0 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x561ff3c63aa0 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x561ff3c7c688 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x561ff3c7c650 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x561ff3c7c630 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x561ff3c7c600 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x561ff3c7c5c0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c5ff30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x561ff3c7c618 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x561ff3c7c5e0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c5e6c0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x561ff3c7c748 <line:353:9, col:16>
|     `-CXXConstructExpr 0x561ff3c7c718 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x561ff3c7c700 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x561ff3c7c6e0 <col:16> 'Timestamp' lvalue Var 0x561ff3c7c340 't' 'Timestamp'
|-CXXMethodDecl 0x561ff3c63cf8 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x561ff3c63be8 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x561ff3c63c60 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561ff3c7c918 <col:72, line:360:5>
|   `-ReturnStmt 0x561ff3c7c908 <line:359:9, col:51>
|     `-ExprWithCleanups 0x561ff3c7c8f0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x561ff3c7c8c0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x561ff3c7c8a8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x561ff3c7c868 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x561ff3c7c850 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x561ff3c7c798 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x561ff3c63be8 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x561ff3c7c810 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x561ff3c7c7f8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x561ff3c7c7b8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x561ff3c67cf0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x561ff3c7c838 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x561ff3c7c7d8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x561ff3c63c60 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff3c65fe0 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x561ff3c65f50 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x561ff3c7cd88 <col:56, line:371:5>
|   |-DeclStmt 0x561ff3c7cb08 <line:363:9, col:51>
|   | `-VarDecl 0x561ff3c7c940 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x561ff3c7caf0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x561ff3c7cac0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x561ff3c7caa8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x561ff3c7ca90 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x561ff3c7ca60 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x561ff3c7ca48 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x561ff3c7ca30 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x561ff3c7ca00 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x561ff3c7cce8 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x561ff3c7cb70 <col:9, col:14> 'int64_t':'long' lvalue .x 0x561ff3c68308
|   | | `-MemberExpr 0x561ff3c7cb40 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x561ff3c692b8
|   | |   `-DeclRefExpr 0x561ff3c7cb20 <col:9> 'Timestamp' lvalue Var 0x561ff3c7c940 't' 'Timestamp'
|   | `-CallExpr 0x561ff3c7cc88 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x561ff3c7cc70 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x561ff3c7cba0 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x561ff3c695e8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x561ff3c7ccb8 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x561ff3c7cbc0 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x561ff3c65f50 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x561ff3c7ccd0 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x561ff3c7cc50 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x561ff3c7cc20 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x561ff3c7cbe0 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c5e510 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x561ff3c7cc38 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x561ff3c7cc00 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c5ff30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x561ff3c7cd70 <line:370:9, col:16>
|     `-CXXConstructExpr 0x561ff3c7cd40 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x561ff3c7cd28 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x561ff3c7cd08 <col:16> 'Timestamp' lvalue Var 0x561ff3c7c940 't' 'Timestamp'
|-CXXMethodDecl 0x561ff3c660d8 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x561ff3c7cec8 <col:39, line:377:5>
|   `-ReturnStmt 0x561ff3c7ceb8 <line:376:9, col:30>
|     `-ExprWithCleanups 0x561ff3c7cea0 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x561ff3c7ce70 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x561ff3c7ce58 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x561ff3c7ce18 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x561ff3c7cdc0 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x561ff3c7ce00 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x561ff3c7cde0 <col:29> 'int' 1
|-CXXMethodDecl 0x561ff3c66198 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x561ff3c7cfa8 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x561ff3c7cf60 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x561ff3c7cef0 <col:9> '<bound member function type>' ->assign 0x561ff3c66398
|     | `-CXXThisExpr 0x561ff3c7cee0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x561ff3c7cf20 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x561ff3c7cf90 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x561ff3c7cf40 <col:19> 'int' 0
|-CXXMethodDecl 0x561ff3c66398 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x561ff3c66248 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x561ff3c662c0 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x561ff3c6e6a0 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x561ff3c6e680 <col:60> 'int' 0
| `-CompoundStmt 0x561ff3c7d1a0 <col:63, line:395:5>
|   `-BinaryOperator 0x561ff3c7d180 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x561ff3c7d000 <col:9, col:12> 'int64_t':'long' lvalue .x 0x561ff3c68308
|     | `-MemberExpr 0x561ff3c7cfd0 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x561ff3c692b8
|     |   `-CXXThisExpr 0x561ff3c7cfc0 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x561ff3c7d160 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x561ff3c7d0f0 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x561ff3c7d090 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x561ff3c7d078 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x561ff3c7d060 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x561ff3c7d030 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x561ff3c66248 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x561ff3c7d0d8 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x561ff3c7d0b8 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c5ff30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x561ff3c7d148 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x561ff3c7d130 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x561ff3c7d110 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x561ff3c662c0 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff3c66568 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x561ff3c66458 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x561ff3c664d0 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561ff3c7d2f8 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x561ff3c7d2b0 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x561ff3c7d1c8 <col:9> '<bound member function type>' ->assign 0x561ff3c66398
|     | `-CXXThisExpr 0x561ff3c7d1b8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x561ff3c7d2e0 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x561ff3c7d1f8 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x561ff3c66458 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x561ff3c7d270 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x561ff3c7d258 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x561ff3c7d218 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x561ff3c67ba8 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x561ff3c7d298 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x561ff3c7d238 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x561ff3c664d0 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff3c66738 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x561ff3c66628 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x561ff3c666a0 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561ff3c7d450 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x561ff3c7d408 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x561ff3c7d320 <col:9> '<bound member function type>' ->assign 0x561ff3c66398
|     | `-CXXThisExpr 0x561ff3c7d310 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x561ff3c7d438 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x561ff3c7d350 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x561ff3c66628 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x561ff3c7d3c8 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x561ff3c7d3b0 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x561ff3c7d370 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x561ff3c67cf0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x561ff3c7d3f0 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x561ff3c7d390 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x561ff3c666a0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff3c66908 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x561ff3c667f8 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x561ff3c66870 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x561ff3c6e6d8 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x561ff3c6e6b8 <col:57> 'int' 0
| `-DeprecatedAttr 0x561ff3c669b8 <col:75> "" ""
|-CXXMethodDecl 0x561ff3c66b48 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x561ff3c66a38 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x561ff3c66ab0 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x561ff3c66bf8 <col:74> "" ""
|-CXXMethodDecl 0x561ff3c66d88 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x561ff3c66c78 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x561ff3c66cf0 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x561ff3c66e38 <col:74> "" ""
|-CXXMethodDecl 0x561ff3c66ec8 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x561ff3c66f68 <col:42> "" ""
|-CXXMethodDecl 0x561ff3c67110 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x561ff3c66ff0 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x561ff3c67070 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x561ff3c671e0 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x561ff3c672a0 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x561ff3c67340 <col:20>
| `-OptimizeNoneAttr 0x561ff3c67398 <col:30>
|-CXXMethodDecl 0x561ff3c673e0 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x561ff3c674a0 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x561ff3c67560 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x561ff3c67620 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x561ff3c676e0 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x561ff3c677a0 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x561ff3c67860 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x561ff3c67920 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x561ff3c67a60 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x561ff3c679d0 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561ff3c7d598 <col:58, line:512:5>
|   `-ReturnStmt 0x561ff3c7d588 <line:511:9, col:53>
|     `-BinaryOperator 0x561ff3c7d568 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x561ff3c7d538 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x561ff3c7d468 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x561ff3c679d0 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x561ff3c7d550 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x561ff3c7d518 <col:23, col:53> 'int'
|           `-BinaryOperator 0x561ff3c7d4f8 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x561ff3c7d4c8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x561ff3c7d488 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c5ff30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x561ff3c7d4e0 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x561ff3c7d4a8 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c5fea0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x561ff3c67ba8 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x561ff3c67b18 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561ff3c7d6e0 <col:58, line:516:5>
|   `-ReturnStmt 0x561ff3c7d6d0 <line:515:9, col:53>
|     `-BinaryOperator 0x561ff3c7d6b0 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x561ff3c7d680 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x561ff3c7d5b0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x561ff3c67b18 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x561ff3c7d698 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x561ff3c7d660 <col:23, col:53> 'int'
|           `-BinaryOperator 0x561ff3c7d640 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x561ff3c7d610 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x561ff3c7d5d0 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c5ff30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x561ff3c7d628 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x561ff3c7d5f0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c5e6c0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x561ff3c67cf0 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x561ff3c67c60 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561ff3c7d828 <col:58, line:520:5>
|   `-ReturnStmt 0x561ff3c7d818 <line:519:9, col:53>
|     `-BinaryOperator 0x561ff3c7d7f8 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x561ff3c7d7c8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x561ff3c7d6f8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x561ff3c67c60 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x561ff3c7d7e0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x561ff3c7d7a8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x561ff3c7d788 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x561ff3c7d758 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x561ff3c7d718 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c5e510 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x561ff3c7d770 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x561ff3c7d738 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c5ff30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x561ff3c67e38 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x561ff3c67da8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561ff3c7d970 <col:60, line:524:5>
|   `-ReturnStmt 0x561ff3c7d960 <line:523:9, col:55>
|     `-BinaryOperator 0x561ff3c7d940 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x561ff3c7d910 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x561ff3c7d840 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x561ff3c67da8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x561ff3c7d928 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x561ff3c7d8f0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x561ff3c7d8d0 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x561ff3c7d8a0 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x561ff3c7d860 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c5ff30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x561ff3c7d8b8 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x561ff3c7d880 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c5fea0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x561ff3c67f80 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x561ff3c67ef0 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561ff3c7dab8 <col:60, line:528:5>
|   `-ReturnStmt 0x561ff3c7daa8 <line:527:9, col:55>
|     `-BinaryOperator 0x561ff3c7da88 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x561ff3c7da58 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x561ff3c7d988 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x561ff3c67ef0 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x561ff3c7da70 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x561ff3c7da38 <col:25, col:55> 'int'
|           `-BinaryOperator 0x561ff3c7da18 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x561ff3c7d9e8 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x561ff3c7d9a8 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c5ff30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x561ff3c7da00 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x561ff3c7d9c8 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c5e6c0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x561ff3c680c8 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x561ff3c68038 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561ff3c7dc00 <col:60, line:532:5>
|   `-ReturnStmt 0x561ff3c7dbf0 <line:531:9, col:55>
|     `-BinaryOperator 0x561ff3c7dbd0 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x561ff3c7dba0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x561ff3c7dad0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x561ff3c68038 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x561ff3c7dbb8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x561ff3c7db80 <col:25, col:55> 'int'
|           `-BinaryOperator 0x561ff3c7db60 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x561ff3c7db30 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x561ff3c7daf0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c5e510 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x561ff3c7db48 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x561ff3c7db10 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561ff3c5ff30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x561ff3c68170 prev 0x561ff3c603d0 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x561ff3c68268 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x561ff3c68308 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x561ff3c6e728 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x561ff3c6eb08 <col:11>
| |-CXXConstructorDecl 0x561ff3c6e800 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x561ff3c6e8e8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x561ff3c6f250 <col:11>
| |-CXXConstructorDecl 0x561ff3c6e988 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x561ff3c6ea98 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x561ff3c70aa8 <col:11>
| |-CXXDestructorDecl 0x561ff3c6fdb8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x561ff3cad6d8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x561ff3cad7e8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x561ff3cae0b0 <col:11>
| |   `-ReturnStmt 0x561ff3cae0a0 <col:11>
| |     `-UnaryOperator 0x561ff3cae088 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x561ff3cae078 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x561ff3cad858 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x561ff3cad968 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x561ff3d0ad50 <col:11>
|     `-ReturnStmt 0x561ff3d0ad40 <col:11>
|       `-UnaryOperator 0x561ff3d0ad28 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561ff3d0ad18 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x561ff3c68370 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x561ff3c68470 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x561ff3c68670 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3c68450 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x561ff3c68430 <col:21> 'int' 0
| |-EnumConstantDecl 0x561ff3c68500 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x561ff3c68688 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3c684e0 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x561ff3c684c0 <col:23> 'int' 1
| |-EnumConstantDecl 0x561ff3c68590 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x561ff3c686a0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3c68570 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x561ff3c68550 <col:23> 'int' 2
| `-EnumConstantDecl 0x561ff3c68620 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x561ff3c686b8 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561ff3c68600 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x561ff3c685e0 <col:27> 'int' 3
|-CXXMethodDecl 0x561ff3c686f8 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x561ff3c687c0 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x561ff3c689c8 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x561ff3c68870 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x561ff3c688f0 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x561ff3c6e6f0 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x561ff3c68bd8 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x561ff3c68a88 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x561ff3c68b00 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x561ff3c68ca8 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x561ff3c68d68 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x561ff3c68ed8 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x561ff3c68e18 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x561ff3c68fa0 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x561ff3c69060 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x561ff3c69120 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x561ff3c691e0 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x561ff3c69280 <line:670:3, col:10> col:3 private
|-FieldDecl 0x561ff3c692b8 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x561ff3c69328 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x561ff3c7dc18 <col:27, line:684:5>
|-CXXMethodDecl 0x561ff3c693e8 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x561ff3c7dc28 <col:27, line:696:5>
|-CXXMethodDecl 0x561ff3c695e8 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x561ff3c69498 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x561ff3c69510 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561ff3c7ddb0 <col:66, line:700:5>
|   `-ReturnStmt 0x561ff3c7dda0 <line:699:9, col:31>
|     `-CallExpr 0x561ff3c7dd40 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x561ff3c7dd28 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x561ff3c7dcd8 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x561ff3aec4d8 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x561ff3c7dd70 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x561ff3c7dc98 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x561ff3c69498 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x561ff3c7dd88 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x561ff3c7dcb8 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x561ff3c69510 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff3c69958 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x561ff3c696a8 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x561ff3c69720 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x561ff3c69798 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x561ff3c69810 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561ff3c7e100 <col:64, line:707:5>
|   |-DeclStmt 0x561ff3c7de40 <line:704:9, col:24>
|   | `-VarDecl 0x561ff3c7ddd8 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x561ff3c7e050 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x561ff3c7de58 <col:9> 'int32_t':'int' lvalue ParmVar 0x561ff3c69720 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x561ff3c7e038 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x561ff3c7dfd0 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x561ff3c7dfb8 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561ff3c7df38 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x561ff3af2b08 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x561ff3c7e008 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x561ff3c7ded8 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x561ff3c69798 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x561ff3c7e020 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x561ff3c7def8 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x561ff3c69810 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x561ff3c7df18 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x561ff3c7ddd8 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x561ff3c7e0e0 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x561ff3c7e070 <col:9> 'int32_t':'int' lvalue ParmVar 0x561ff3c696a8 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x561ff3c7e0c8 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x561ff3c7e0b0 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x561ff3c7e090 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x561ff3c7ddd8 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x561ff3c69bf8 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x561ff3c69a28 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x561ff3c69aa0 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x561ff3c69b18 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x561ff3c69e98 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x561ff3c69cc0 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x561ff3c69d38 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x561ff3c69db0 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x561ff3c6d7e8 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x561ff3c6d720 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x561ff3c6d9e8 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x561ff3c6d8a0 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x561ff3c6d918 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x561ff3c6dcb8 <line:717:5, col:73> col:24
| `-FunctionDecl 0x561ff3c6dbf8 parent 0x561ff3755488 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x561ff3c6daa8 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x561ff3c6db20 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x561ff3c6ded8 <line:718:5, col:72> col:24
| `-FunctionDecl 0x561ff3c6de18 parent 0x561ff3755488 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x561ff3c6dd08 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x561ff3c6dd80 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x561ff3c6e0a0 <line:719:5, col:57> col:29
| `-FunctionDecl 0x561ff3c6dfe8 parent 0x561ff3755488 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x561ff3c6df28 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x561ff3c6e328 <line:720:5, col:73> col:30
| `-FunctionDecl 0x561ff3c6e268 parent 0x561ff3755488 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x561ff3c6e118 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x561ff3c6e190 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x561ff3c6e548 <line:721:5, col:73> col:30
| `-FunctionDecl 0x561ff3c6e488 parent 0x561ff3755488 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x561ff3c6e378 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x561ff3c6e3f0 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x561ff3c6fc60 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x561ff3c6fd48 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x561ff3c692b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x561ff3c707b8 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x561ff3c70770 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x561ff3c692b8
| |     `-DeclRefExpr 0x561ff3c70750 <col:7> 'const Timestamp' lvalue ParmVar 0x561ff3c6fd48 '' 'const Timestamp &'
| `-CompoundStmt 0x561ff3c70818 <col:7>
|-CXXConstructorDecl 0x561ff3c6fec8 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x561ff3c6ffd8 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x561ff3c692b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x561ff3c70ab8 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x561ff3c70a60 <col:7> 'Timestamp::rep_t' xvalue ._t 0x561ff3c692b8
| |     `-CXXStaticCastExpr 0x561ff3c70a30 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x561ff3c70a00 <col:7> 'Timestamp' lvalue ParmVar 0x561ff3c6ffd8 '' 'Timestamp &&'
| `-CompoundStmt 0x561ff3c70b18 <col:7>
|-CXXDestructorDecl 0x561ff3c70088 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x561ff3cad530 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x561ff3cad638 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x561ff3cae128 <col:7>
|   |-CXXMemberCallExpr 0x561ff3cae0c8 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x561ff3cae008 <col:7> '<bound member function type>' .operator= 0x561ff3cad6d8
|   | | `-MemberExpr 0x561ff3cadf18 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x561ff3c692b8
|   | |   `-CXXThisExpr 0x561ff3cadf08 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x561ff3cadfd8 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x561ff3c692b8
|   |   `-DeclRefExpr 0x561ff3cadfb8 <col:7> 'const Timestamp' lvalue ParmVar 0x561ff3cad638 '' 'const Timestamp &'
|   `-ReturnStmt 0x561ff3cae118 <col:7>
|     `-UnaryOperator 0x561ff3cae100 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561ff3cae0f0 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x561ff3cad9d8 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x561ff3cadae8 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x561ff3d0adc8 <col:7>
    |-CXXMemberCallExpr 0x561ff3d0ad68 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x561ff3d0acd0 <col:7> '<bound member function type>' .operator= 0x561ff3cad858
    | | `-MemberExpr 0x561ff3d0aba0 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x561ff3c692b8
    | |   `-CXXThisExpr 0x561ff3d0ab90 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x561ff3d0aca0 <col:7> 'Timestamp::rep_t' xvalue ._t 0x561ff3c692b8
    |   `-CXXStaticCastExpr 0x561ff3d0ac70 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x561ff3d0ac40 <col:7> 'Timestamp' lvalue ParmVar 0x561ff3cadae8 '' 'Timestamp &&'
    `-ReturnStmt 0x561ff3d0adb8 <col:7>
      `-UnaryOperator 0x561ff3d0ada0 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x561ff3d0ad90 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x561ff3d0fac0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<16>'
|-CXXRecordDecl 0x561ff3d0fc98 prev 0x561ff3d0fac0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x561ff3d0fd28 <col:46, col:52> col:46 public
|-TypedefDecl 0x561ff3d0fd50 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x561ff3755580 'int'
|-TypedefDecl 0x561ff3d157a0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<16>::type':'char_array<16>'
| `-ElaboratedType 0x561ff3d15750 'typename sized_array_memory<16>::type' sugar
|   `-TypedefType 0x561ff3d14080 'sized_array_memory<16>::type' sugar
|     |-Typedef 0x561ff3d13f80 'type'
|     `-TemplateSpecializationType 0x561ff3d13f10 'char_array<16UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x561ff3d13de8 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|       |   `-SubstNonTypeTemplateParmExpr 0x561ff3d13dc8 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x561ff3d13da8 <col:24> 'unsigned long' 16
|       `-RecordType 0x561ff3d13ef0 'char_array<16>'
|         `-ClassTemplateSpecialization 0x561ff3d13e08 'char_array'
|-TypedefDecl 0x561ff3d15858 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<16> >::type *'
| `-PointerType 0x561ff3d15820 'vector_memory<sized_array_memory<16> >::type *'
|   `-TypedefType 0x561ff3d15800 'vector_memory<sized_array_memory<16> >::type' sugar
|     |-Typedef 0x561ff3d157a0 'type'
|     `-ElaboratedType 0x561ff3d15750 'typename sized_array_memory<16>::type' sugar
|       `-TypedefType 0x561ff3d14080 'sized_array_memory<16>::type' sugar
|         |-Typedef 0x561ff3d13f80 'type'
|         `-TemplateSpecializationType 0x561ff3d13f10 'char_array<16UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x561ff3d13de8 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|           |   `-SubstNonTypeTemplateParmExpr 0x561ff3d13dc8 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x561ff3d13da8 <col:24> 'unsigned long' 16
|           `-RecordType 0x561ff3d13ef0 'char_array<16>'
|             `-ClassTemplateSpecialization 0x561ff3d13e08 'char_array'
|-CXXMethodDecl 0x561ff3d159d8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<16> >::type *) const' inline
| `-ParmVarDecl 0x561ff3d158e8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXConstructorDecl 0x561ff3d15ac8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x561ff3d15ba8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x561ff3d15ba8
|-CXXMethodDecl 0x561ff3d15e78 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x561ff3d15d80 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<16> > &'
|-CXXMethodDecl 0x561ff3d160b8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x561ff3d15f30 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561ff3d15fa8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x561ff3d16288 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x561ff3d16178 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561ff3d161f0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x561ff3d163e8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x561ff3d164b8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x561ff3d16708 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x561ff3d16578 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x561ff3d165f0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x561ff3d16968 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, vector_memory<sized_array_memory<16> >::iterator)'
| |-ParmVarDecl 0x561ff3d167d8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x561ff3d16850 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x561ff3d16b28 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x561ff3d16a38 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x561ff3d16ce8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x561ff3d16bf0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x561ff3d16da0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x561ff3d16e50 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x561ff3d17088 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x561ff3d16f00 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561ff3d16f78 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x561ff3d17328 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x561ff3d17230 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<16> > &'
|-FieldDecl 0x561ff3d173f0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<16> >::type *'
|-FieldDecl 0x561ff3d17440 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x561ff3d17490 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x561ff3d0e3d8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'TimerSet::heap_element'
|-CXXRecordDecl 0x561ff3d0e5e8 prev 0x561ff3d0e3d8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x561ff3d0fa30 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<heap_element>::type':'sized_array_memory<16>'
| `-ElaboratedType 0x561ff3d0f9e0 'typename array_memory<heap_element>::type' sugar
|   `-TypedefType 0x561ff3d0f9c0 'conditional<true, sized_array_memory<16>, typed_array_memory<TimerSet::heap_element> >::type' sugar
|     |-Typedef 0x561ff3d0f870 'type'
|     `-SubstTemplateTypeParmType 0x561ff3d0f690 'sized_array_memory<16>' sugar
|       |-TemplateTypeParmType 0x561ff3a79110 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3a790b8 'T'
|       `-RecordType 0x561ff3d0f1e0 'sized_array_memory<16>'
|         `-ClassTemplateSpecialization 0x561ff3d0f0f8 'sized_array_memory'
|-FieldDecl 0x561ff3d174e0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<TimerSet::heap_element>::array_memory_type>':'vector_memory<sized_array_memory<16> >' mutable
|-AccessSpecDecl 0x561ff3d17530 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x561ff3d17568 <line:118:5, col:15> col:15 value_type 'TimerSet::heap_element':'TimerSet::heap_element'
| `-SubstTemplateTypeParmType 0x561ff3d0e680 'TimerSet::heap_element' sugar
|   |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x561ff3aadb40 'T'
|   `-RecordType 0x561ff3d0d5e0 'TimerSet::heap_element'
|     `-CXXRecord 0x561ff3d0d550 'heap_element'
|-TypedefDecl 0x561ff3d17628 <line:119:5, col:16> col:16 reference 'TimerSet::heap_element &'
| `-LValueReferenceType 0x561ff3d175f0 'TimerSet::heap_element &'
|   `-SubstTemplateTypeParmType 0x561ff3d0e680 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561ff3aadb40 'T'
|     `-RecordType 0x561ff3d0d5e0 'TimerSet::heap_element'
|       `-CXXRecord 0x561ff3d0d550 'heap_element'
|-TypedefDecl 0x561ff3d176b8 <line:120:5, col:22> col:22 const_reference 'const TimerSet::heap_element &'
| `-LValueReferenceType 0x561ff3d17680 'const TimerSet::heap_element &'
|   `-QualType 0x561ff3d0e681 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x561ff3d0e680 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3aadb40 'T'
|       `-RecordType 0x561ff3d0d5e0 'TimerSet::heap_element'
|         `-CXXRecord 0x561ff3d0d550 'heap_element'
|-TypedefDecl 0x561ff3d17748 <line:121:5, col:16> col:16 pointer 'TimerSet::heap_element *'
| `-PointerType 0x561ff3d17710 'TimerSet::heap_element *'
|   `-SubstTemplateTypeParmType 0x561ff3d0e680 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561ff3aadb40 'T'
|     `-RecordType 0x561ff3d0d5e0 'TimerSet::heap_element'
|       `-CXXRecord 0x561ff3d0d550 'heap_element'
|-TypedefDecl 0x561ff3d17808 <line:122:5, col:22> col:22 const_pointer 'const TimerSet::heap_element *'
| `-PointerType 0x561ff3d177d0 'const TimerSet::heap_element *'
|   `-QualType 0x561ff3d0e681 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x561ff3d0e680 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3aadb40 'T'
|       `-RecordType 0x561ff3d0d5e0 'TimerSet::heap_element'
|         `-CXXRecord 0x561ff3d0d550 'heap_element'
|-TypedefDecl 0x561ff3d18670 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<heap_element>::type':'const TimerSet::heap_element &'
| `-ElaboratedType 0x561ff3d18620 'typename fast_argument<heap_element>::type' sugar
|   `-TypedefType 0x561ff3d18600 'fast_argument<TimerSet::heap_element, true>::type' sugar
|     |-Typedef 0x561ff3d18538 'type'
|     `-LValueReferenceType 0x561ff3d18500 'const TimerSet::heap_element &'
|       `-QualType 0x561ff3d182a1 'const TimerSet::heap_element' const
|         `-SubstTemplateTypeParmType 0x561ff3d182a0 'TimerSet::heap_element' sugar
|           |-TemplateTypeParmType 0x561ff3a81800 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x561ff3a817a8 'T'
|           `-RecordType 0x561ff3d0d5e0 'TimerSet::heap_element'
|             `-CXXRecord 0x561ff3d0d550 'heap_element'
|-TypedefDecl 0x561ff3d186d8 <line:126:5, col:22> col:22 const_access_type 'const TimerSet::heap_element &'
| `-LValueReferenceType 0x561ff3d17680 'const TimerSet::heap_element &'
|   `-QualType 0x561ff3d0e681 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x561ff3d0e680 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3aadb40 'T'
|       `-RecordType 0x561ff3d0d5e0 'TimerSet::heap_element'
|         `-CXXRecord 0x561ff3d0d550 'heap_element'
|-TypedefDecl 0x561ff3d18730 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x561ff3755580 'int'
|-TypedefDecl 0x561ff3d18798 <line:130:5, col:16> col:16 iterator 'TimerSet::heap_element *'
| `-PointerType 0x561ff3d17710 'TimerSet::heap_element *'
|   `-SubstTemplateTypeParmType 0x561ff3d0e680 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561ff3aadb40 'T'
|     `-RecordType 0x561ff3d0d5e0 'TimerSet::heap_element'
|       `-CXXRecord 0x561ff3d0d550 'heap_element'
|-TypedefDecl 0x561ff3d18800 <line:131:5, col:22> col:22 const_iterator 'const TimerSet::heap_element *'
| `-PointerType 0x561ff3d177d0 'const TimerSet::heap_element *'
|   `-QualType 0x561ff3d0e681 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x561ff3d0e680 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3aadb40 'T'
|       `-RecordType 0x561ff3d0d5e0 'TimerSet::heap_element'
|         `-CXXRecord 0x561ff3d0d550 'heap_element'
|-EnumDecl 0x561ff3d18858 <line:134:5> col:5
| `-EnumConstantDecl 0x561ff3d18950 <col:12, col:40> col:12 RESERVE_GROW 'Vector<TimerSet::heap_element>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x561ff3d18930 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x561ff3aaed58 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x561ff3aaed30 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x561ff3aaed10 <col:40> 'int' 1
|-CXXConstructorDecl 0x561ff3d189d8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x561ff3d18c68 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x561ff3d18a90 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561ff3d18b30 <col:41, col:61> col:61 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXConstructorDecl 0x561ff3d18f28 <line:139:5, col:37> col:12 Vector 'void (const Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x561ff3d18e10 <col:19, col:36> col:36 x 'const Vector<TimerSet::heap_element> &'
|-CXXConstructorDecl 0x561ff3d191e8 <line:141:5, col:32> col:12 Vector 'void (Vector<TimerSet::heap_element> &&)' inline
| `-ParmVarDecl 0x561ff3d190d0 <col:19, col:31> col:31 x 'Vector<TimerSet::heap_element> &&'
|-CXXMethodDecl 0x561ff3d19530 <line:144:5, col:51> col:23 operator= 'Vector<TimerSet::heap_element> &(const Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x561ff3d19410 <col:33, col:50> col:50 x 'const Vector<TimerSet::heap_element> &'
|-CXXMethodDecl 0x561ff3d19840 <line:146:5, col:46> col:23 operator= 'Vector<TimerSet::heap_element> &(Vector<TimerSet::heap_element> &&)' inline
| `-ParmVarDecl 0x561ff3d19720 <col:33, col:45> col:45 x 'Vector<TimerSet::heap_element> &&'
|-CXXMethodDecl 0x561ff3d19b30 <line:148:5, col:70> col:23 assign 'Vector<TimerSet::heap_element> &(Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x561ff3d19978 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561ff3d199f0 <col:43, col:69> col:63 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x561ff3d19c88 <line:150:5, col:55> col:49 begin 'Vector<TimerSet::heap_element>::iterator ()'
| |-NoInlineAttr 0x561ff3d19d68 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3d19dc0 <col:30> Inherited
|-CXXMethodDecl 0x561ff3d19e08 <line:151:5, col:53> col:49 end 'Vector<TimerSet::heap_element>::iterator ()'
| |-NoInlineAttr 0x561ff3d19eb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3d19f10 <col:30> Inherited
|-CXXMethodDecl 0x561ff3d19fd8 <line:152:5, col:63> col:55 begin 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x561ff3d1a088 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3d1a0e0 <col:30> Inherited
|-CXXMethodDecl 0x561ff3d1a128 <line:153:5, col:61> col:55 end 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x561ff3d1a1d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3d1a230 <col:30> Inherited
|-CXXMethodDecl 0x561ff3d1a278 <line:154:5, col:64> col:55 cbegin 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x561ff3d1a328 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3d1a380 <col:30> Inherited
|-CXXMethodDecl 0x561ff3d1a3c8 <line:155:5, col:62> col:55 cend 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x561ff3d1a478 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3d1a4d0 <col:30> Inherited
|-CXXMethodDecl 0x561ff3d1a4f8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x561ff3d1a5a8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x561ff3d1a658 <line:159:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x561ff3d1a818 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x561ff3d1a708 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561ff3d1a780 <col:37, col:63> col:57 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x561ff3d1a968 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x561ff3d1a8d8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3d1ab18 <line:163:5, col:65> col:43 operator[] 'TimerSet::heap_element &(Vector::size_type)'
| |-ParmVarDecl 0x561ff3d1aa20 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x561ff3d1abd0 <col:20>
| `-OptimizeNoneAttr 0x561ff3d1ac28 <col:30>
|-CXXMethodDecl 0x561ff3d1ad48 <line:164:5, col:73> col:49 operator[] 'const TimerSet::heap_element &(Vector::size_type) const'
| |-ParmVarDecl 0x561ff3d1ac50 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x561ff3d1ae00 <col:20>
| `-OptimizeNoneAttr 0x561ff3d1ae58 <col:30>
|-CXXMethodDecl 0x561ff3d1af10 <line:165:5, col:29> col:15 at 'TimerSet::heap_element &(Vector::size_type)' inline
| `-ParmVarDecl 0x561ff3d1ae80 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3d1b058 <line:166:5, col:37> col:21 at 'const TimerSet::heap_element &(Vector::size_type) const' inline
| `-ParmVarDecl 0x561ff3d1afc8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3d1b188 <line:167:5, col:21> col:15 front 'TimerSet::heap_element &()' inline
|-CXXMethodDecl 0x561ff3d1b2b8 <line:168:5, col:29> col:21 front 'const TimerSet::heap_element &() const' inline
|-CXXMethodDecl 0x561ff3d1b388 <line:169:5, col:20> col:15 back 'TimerSet::heap_element &()' inline
|-CXXMethodDecl 0x561ff3d1b458 <line:170:5, col:28> col:21 back 'const TimerSet::heap_element &() const' inline
|-CXXMethodDecl 0x561ff3d1b598 <line:172:5, col:39> col:15 used unchecked_at 'TimerSet::heap_element &(Vector::size_type)' inline
| `-ParmVarDecl 0x561ff3d1b508 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3d1b6e0 <line:173:5, col:47> col:21 unchecked_at 'const TimerSet::heap_element &(Vector::size_type) const' inline
| `-ParmVarDecl 0x561ff3d1b650 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3d1b828 <line:174:5, col:59> col:15 at_u 'TimerSet::heap_element &(Vector::size_type)' inline
| |-ParmVarDecl 0x561ff3d1b798 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x561ff3d1b8e0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x561ff3d1b9e0 <line:175:5, col:71> col:21 at_u 'const TimerSet::heap_element &(Vector::size_type) const' inline
| |-ParmVarDecl 0x561ff3d1b950 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x561ff3d1ba98 <col:60> Inherited "" ""
|-CXXMethodDecl 0x561ff3d1bb58 <line:177:5, col:20> col:15 data 'TimerSet::heap_element *()' inline
|-CXXMethodDecl 0x561ff3d1bd00 <line:178:5, col:28> col:21 data 'const TimerSet::heap_element *() const' inline
|-CXXMethodDecl 0x561ff3d1beb8 <line:180:5, col:48> col:17 push_back 'void (Vector<TimerSet::heap_element>::value_argument_type)' inline
| `-ParmVarDecl 0x561ff3d1bdc0 <col:27, col:47> col:47 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-FunctionTemplateDecl 0x561ff3d1c6a8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x561ff3d1bf70 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<TimerSet::heap_element>':'fast_argument<TimerSet::heap_element, true>'
| `-CXXMethodDecl 0x561ff3d1c608 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (TimerSet::heap_element &&)' inline
|   `-ParmVarDecl 0x561ff3d1c508 <col:58, col:62> col:62 v 'TimerSet::heap_element &&'
|-CXXMethodDecl 0x561ff3d1c788 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x561ff3d1c8d8 <line:186:5, col:49> col:17 push_front 'void (Vector<TimerSet::heap_element>::value_argument_type)' inline
| `-ParmVarDecl 0x561ff3d1c848 <col:28, col:48> col:48 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x561ff3d1c990 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x561ff3d1cbd8 <line:189:5, col:62> col:21 insert 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x561ff3d1ca50 <col:28, col:37> col:37 it 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
| `-ParmVarDecl 0x561ff3d1cac8 <col:41, col:61> col:61 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x561ff3d1cd98 <line:190:5, col:38> col:21 erase 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator)' inline
| `-ParmVarDecl 0x561ff3d1cca8 <col:27, col:36> col:36 it 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
|-CXXMethodDecl 0x561ff3d1cfe8 <line:191:5, col:49> col:21 erase 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator, Vector<TimerSet::heap_element>::iterator)' inline
| |-ParmVarDecl 0x561ff3d1ce60 <col:27, col:36> col:36 a 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
| `-ParmVarDecl 0x561ff3d1ced8 <col:39, col:48> col:48 b 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
|-CXXMethodDecl 0x561ff3d1d0a8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x561ff3d1d308 <line:195:5, col:34> col:17 swap 'void (Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x561ff3d1d210 <col:22, col:33> col:33 x 'Vector<TimerSet::heap_element> &'
`-CXXDestructorDecl 0x561ff3d1d3d8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x561ff3d1d3d8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x561ff3d1e900 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<8>'
|-CXXRecordDecl 0x561ff3d1ead8 prev 0x561ff3d1e900 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x561ff3d1eb68 <col:46, col:52> col:46 public
|-TypedefDecl 0x561ff3d1eb90 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x561ff3755580 'int'
|-TypedefDecl 0x561ff3d20760 <line:13:5, col:31> col:31 type 'typename sized_array_memory<8>::type':'char_array<8>'
| `-ElaboratedType 0x561ff3d20710 'typename sized_array_memory<8>::type' sugar
|   `-TypedefType 0x561ff3d1f040 'sized_array_memory<8>::type' sugar
|     |-Typedef 0x561ff3d1ef40 'type'
|     `-TemplateSpecializationType 0x561ff3d1eed0 'char_array<8UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x561ff3d1edb0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|       |   `-SubstNonTypeTemplateParmExpr 0x561ff3d1ed90 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x561ff3d1ed70 <col:24> 'unsigned long' 8
|       `-RecordType 0x561ff3d1eeb0 'char_array<8>'
|         `-ClassTemplateSpecialization 0x561ff3d1edd0 'char_array'
|-TypedefDecl 0x561ff3d20818 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<8> >::type *'
| `-PointerType 0x561ff3d207e0 'vector_memory<sized_array_memory<8> >::type *'
|   `-TypedefType 0x561ff3d207c0 'vector_memory<sized_array_memory<8> >::type' sugar
|     |-Typedef 0x561ff3d20760 'type'
|     `-ElaboratedType 0x561ff3d20710 'typename sized_array_memory<8>::type' sugar
|       `-TypedefType 0x561ff3d1f040 'sized_array_memory<8>::type' sugar
|         |-Typedef 0x561ff3d1ef40 'type'
|         `-TemplateSpecializationType 0x561ff3d1eed0 'char_array<8UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x561ff3d1edb0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|           |   `-SubstNonTypeTemplateParmExpr 0x561ff3d1ed90 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x561ff3d1ed70 <col:24> 'unsigned long' 8
|           `-RecordType 0x561ff3d1eeb0 'char_array<8>'
|             `-ClassTemplateSpecialization 0x561ff3d1edd0 'char_array'
|-CXXMethodDecl 0x561ff3d20998 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<8> >::type *) const' inline
| `-ParmVarDecl 0x561ff3d208a8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXConstructorDecl 0x561ff3d20a88 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x561ff3d20b68 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x561ff3d20b68
|-CXXMethodDecl 0x561ff3d20e38 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x561ff3d20d40 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<8> > &'
|-CXXMethodDecl 0x561ff3d21078 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x561ff3d20ef0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561ff3d20f68 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x561ff3d21248 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x561ff3d21138 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561ff3d211b0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x561ff3d213a8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x561ff3d21478 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x561ff3d216c8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x561ff3d21538 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x561ff3d215b0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x561ff3d21928 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, vector_memory<sized_array_memory<8> >::iterator)'
| |-ParmVarDecl 0x561ff3d21798 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x561ff3d21810 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x561ff3d21ae8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x561ff3d219f8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x561ff3d21ca8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x561ff3d21bb0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x561ff3d21d60 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x561ff3d21e10 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x561ff3d22048 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x561ff3d21ec0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561ff3d21f38 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x561ff3d222e8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x561ff3d221f0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<8> > &'
|-FieldDecl 0x561ff3d223b0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<8> >::type *'
|-FieldDecl 0x561ff3d22400 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x561ff3d22450 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array.2*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array.2*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x561ff3d1d520 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Timer *'
|-CXXRecordDecl 0x561ff3d1d728 prev 0x561ff3d1d520 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x561ff3d1e870 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<Timer *>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x561ff3d1e820 'typename array_memory<Timer *>::type' sugar
|   `-TypedefType 0x561ff3d1e800 'conditional<true, sized_array_memory<8>, typed_array_memory<Timer *> >::type' sugar
|     |-Typedef 0x561ff3d1e6b0 'type'
|     `-SubstTemplateTypeParmType 0x561ff3d1e4d0 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x561ff3a79110 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3a790b8 'T'
|       `-RecordType 0x561ff3d1e020 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x561ff3d1df38 'sized_array_memory'
|-FieldDecl 0x561ff3d224a0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Timer *>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x561ff3d224f0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x561ff3d22528 <line:118:5, col:15> col:15 value_type 'Timer *':'Timer *'
| `-SubstTemplateTypeParmType 0x561ff3d1d7c0 'Timer *' sugar
|   |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x561ff3aadb40 'T'
|   `-PointerType 0x561ff3ccb050 'Timer *'
|     `-RecordType 0x561ff3cca1a0 'Timer'
|       `-CXXRecord 0x561ff3cfc738 'Timer'
|-TypedefDecl 0x561ff3d225e8 <line:119:5, col:16> col:16 reference 'Timer *&'
| `-LValueReferenceType 0x561ff3d225b0 'Timer *&'
|   `-SubstTemplateTypeParmType 0x561ff3d1d7c0 'Timer *' sugar
|     |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561ff3aadb40 'T'
|     `-PointerType 0x561ff3ccb050 'Timer *'
|       `-RecordType 0x561ff3cca1a0 'Timer'
|         `-CXXRecord 0x561ff3cfc738 'Timer'
|-TypedefDecl 0x561ff3d226a8 <line:120:5, col:22> col:22 const_reference 'Timer *const &'
| `-LValueReferenceType 0x561ff3d22670 'Timer *const &'
|   `-QualType 0x561ff3d1d7c1 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x561ff3d1d7c0 'Timer *' sugar
|       |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3aadb40 'T'
|       `-PointerType 0x561ff3ccb050 'Timer *'
|         `-RecordType 0x561ff3cca1a0 'Timer'
|           `-CXXRecord 0x561ff3cfc738 'Timer'
|-TypedefDecl 0x561ff3d22768 <line:121:5, col:16> col:16 pointer 'Timer **'
| `-PointerType 0x561ff3d22730 'Timer **'
|   `-SubstTemplateTypeParmType 0x561ff3d1d7c0 'Timer *' sugar
|     |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561ff3aadb40 'T'
|     `-PointerType 0x561ff3ccb050 'Timer *'
|       `-RecordType 0x561ff3cca1a0 'Timer'
|         `-CXXRecord 0x561ff3cfc738 'Timer'
|-TypedefDecl 0x561ff3d22828 <line:122:5, col:22> col:22 const_pointer 'Timer *const *'
| `-PointerType 0x561ff3d227f0 'Timer *const *'
|   `-QualType 0x561ff3d1d7c1 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x561ff3d1d7c0 'Timer *' sugar
|       |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3aadb40 'T'
|       `-PointerType 0x561ff3ccb050 'Timer *'
|         `-RecordType 0x561ff3cca1a0 'Timer'
|           `-CXXRecord 0x561ff3cfc738 'Timer'
|-TypedefDecl 0x561ff3d23400 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<Timer *>::type':'Timer *'
| `-ElaboratedType 0x561ff3d233b0 'typename fast_argument<Timer *>::type' sugar
|   `-TypedefType 0x561ff3d23390 'fast_argument<Timer *, false>::type' sugar
|     |-Typedef 0x561ff3d23320 'type'
|     `-SubstTemplateTypeParmType 0x561ff3d230e0 'Timer *' sugar
|       |-TemplateTypeParmType 0x561ff3a81f30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3a81ee0 'T'
|       `-PointerType 0x561ff3ccb050 'Timer *'
|         `-RecordType 0x561ff3cca1a0 'Timer'
|           `-CXXRecord 0x561ff3cfc738 'Timer'
|-TypedefDecl 0x561ff3d23468 <line:126:5, col:22> col:22 const_access_type 'Timer *const &'
| `-LValueReferenceType 0x561ff3d22670 'Timer *const &'
|   `-QualType 0x561ff3d1d7c1 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x561ff3d1d7c0 'Timer *' sugar
|       |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3aadb40 'T'
|       `-PointerType 0x561ff3ccb050 'Timer *'
|         `-RecordType 0x561ff3cca1a0 'Timer'
|           `-CXXRecord 0x561ff3cfc738 'Timer'
|-TypedefDecl 0x561ff3d234c0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x561ff3755580 'int'
|-TypedefDecl 0x561ff3d23528 <line:130:5, col:16> col:16 iterator 'Timer **'
| `-PointerType 0x561ff3d22730 'Timer **'
|   `-SubstTemplateTypeParmType 0x561ff3d1d7c0 'Timer *' sugar
|     |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561ff3aadb40 'T'
|     `-PointerType 0x561ff3ccb050 'Timer *'
|       `-RecordType 0x561ff3cca1a0 'Timer'
|         `-CXXRecord 0x561ff3cfc738 'Timer'
|-TypedefDecl 0x561ff3d23590 <line:131:5, col:22> col:22 const_iterator 'Timer *const *'
| `-PointerType 0x561ff3d227f0 'Timer *const *'
|   `-QualType 0x561ff3d1d7c1 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x561ff3d1d7c0 'Timer *' sugar
|       |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3aadb40 'T'
|       `-PointerType 0x561ff3ccb050 'Timer *'
|         `-RecordType 0x561ff3cca1a0 'Timer'
|           `-CXXRecord 0x561ff3cfc738 'Timer'
|-EnumDecl 0x561ff3d235e8 <line:134:5> col:5
| `-EnumConstantDecl 0x561ff3d236e0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Timer *>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x561ff3d236c0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x561ff3aaed58 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x561ff3aaed30 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x561ff3aaed10 <col:40> 'int' 1
|-CXXConstructorDecl 0x561ff3d23768 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x561ff3d239f8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x561ff3d23820 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561ff3d238c0 <col:41, col:61> col:61 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXConstructorDecl 0x561ff3d23d10 <line:139:5, col:37> col:12 Vector 'void (const Vector<Timer *> &)' inline
| `-ParmVarDecl 0x561ff3d23ba0 <col:19, col:36> col:36 x 'const Vector<Timer *> &'
|-CXXConstructorDecl 0x561ff3d23fc8 <line:141:5, col:32> col:12 Vector 'void (Vector<Timer *> &&)' inline
| `-ParmVarDecl 0x561ff3d23eb0 <col:19, col:31> col:31 x 'Vector<Timer *> &&'
|-CXXMethodDecl 0x561ff3d24310 <line:144:5, col:51> col:23 operator= 'Vector<Timer *> &(const Vector<Timer *> &)' inline
| `-ParmVarDecl 0x561ff3d241f0 <col:33, col:50> col:50 x 'const Vector<Timer *> &'
|-CXXMethodDecl 0x561ff3d24620 <line:146:5, col:46> col:23 operator= 'Vector<Timer *> &(Vector<Timer *> &&)' inline
| `-ParmVarDecl 0x561ff3d24500 <col:33, col:45> col:45 x 'Vector<Timer *> &&'
|-CXXMethodDecl 0x561ff3d24910 <line:148:5, col:70> col:23 assign 'Vector<Timer *> &(Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x561ff3d24758 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561ff3d247d0 <col:43, col:69> col:63 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x561ff3d24a68 <line:150:5, col:55> col:49 begin 'Vector<Timer *>::iterator ()'
| |-NoInlineAttr 0x561ff3d24b48 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3d24ba0 <col:30> Inherited
|-CXXMethodDecl 0x561ff3d24be8 <line:151:5, col:53> col:49 end 'Vector<Timer *>::iterator ()'
| |-NoInlineAttr 0x561ff3d24c98 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3d24cf0 <col:30> Inherited
|-CXXMethodDecl 0x561ff3d24db8 <line:152:5, col:63> col:55 begin 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x561ff3d24e68 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3d24ec0 <col:30> Inherited
|-CXXMethodDecl 0x561ff3d24f08 <line:153:5, col:61> col:55 end 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x561ff3d24fb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3d25010 <col:30> Inherited
|-CXXMethodDecl 0x561ff3d25058 <line:154:5, col:64> col:55 cbegin 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x561ff3d25108 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3d25160 <col:30> Inherited
|-CXXMethodDecl 0x561ff3d251a8 <line:155:5, col:62> col:55 cend 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x561ff3d25258 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3d252b0 <col:30> Inherited
|-CXXMethodDecl 0x561ff3d252d8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x561ff3d25388 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x561ff3d25438 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x561ff3d255f8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x561ff3d254e8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561ff3d25560 <col:37, col:63> col:57 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x561ff3d25748 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x561ff3d256b8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3d258f8 <line:163:5, col:65> col:43 operator[] 'Timer *&(Vector::size_type)'
| |-ParmVarDecl 0x561ff3d25800 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x561ff3d259b0 <col:20>
| `-OptimizeNoneAttr 0x561ff3d25a08 <col:30>
|-CXXMethodDecl 0x561ff3d25b28 <line:164:5, col:73> col:49 operator[] 'Timer *const &(Vector::size_type) const'
| |-ParmVarDecl 0x561ff3d25a30 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x561ff3d25be0 <col:20>
| `-OptimizeNoneAttr 0x561ff3d25c38 <col:30>
|-CXXMethodDecl 0x561ff3d25cf0 <line:165:5, col:29> col:15 at 'Timer *&(Vector::size_type)' inline
| `-ParmVarDecl 0x561ff3d25c60 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3d25e38 <line:166:5, col:37> col:21 at 'Timer *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x561ff3d25da8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3d25f68 <line:167:5, col:21> col:15 front 'Timer *&()' inline
|-CXXMethodDecl 0x561ff3d26098 <line:168:5, col:29> col:21 front 'Timer *const &() const' inline
|-CXXMethodDecl 0x561ff3d26168 <line:169:5, col:20> col:15 back 'Timer *&()' inline
|-CXXMethodDecl 0x561ff3d26238 <line:170:5, col:28> col:21 back 'Timer *const &() const' inline
|-CXXMethodDecl 0x561ff3d26378 <line:172:5, col:39> col:15 unchecked_at 'Timer *&(Vector::size_type)' inline
| `-ParmVarDecl 0x561ff3d262e8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3d264c0 <line:173:5, col:47> col:21 unchecked_at 'Timer *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x561ff3d26430 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3d26608 <line:174:5, col:59> col:15 at_u 'Timer *&(Vector::size_type)' inline
| |-ParmVarDecl 0x561ff3d26578 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x561ff3d266c0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x561ff3d267c0 <line:175:5, col:71> col:21 at_u 'Timer *const &(Vector::size_type) const' inline
| |-ParmVarDecl 0x561ff3d26730 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x561ff3d26878 <col:60> Inherited "" ""
|-CXXMethodDecl 0x561ff3d26938 <line:177:5, col:20> col:15 data 'Timer **()' inline
|-CXXMethodDecl 0x561ff3d26a38 <line:178:5, col:28> col:21 data 'Timer *const *() const' inline
|-CXXMethodDecl 0x561ff3d26bb8 <line:180:5, col:48> col:17 push_back 'void (Vector<Timer *>::value_argument_type)' inline
| `-ParmVarDecl 0x561ff3d26af8 <col:27, col:47> col:47 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-FunctionTemplateDecl 0x561ff3d27378 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x561ff3d26c70 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Timer *>':'fast_argument<Timer *, false>'
| `-CXXMethodDecl 0x561ff3d272d8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Timer *&&)' inline
|   `-ParmVarDecl 0x561ff3d271d8 <col:58, col:62> col:62 v 'Timer *&&'
|-CXXMethodDecl 0x561ff3d27458 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x561ff3d275a8 <line:186:5, col:49> col:17 push_front 'void (Vector<Timer *>::value_argument_type)' inline
| `-ParmVarDecl 0x561ff3d27518 <col:28, col:48> col:48 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x561ff3d27660 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x561ff3d278a8 <line:189:5, col:62> col:21 insert 'Vector<Timer *>::iterator (Vector<Timer *>::iterator, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x561ff3d27720 <col:28, col:37> col:37 it 'Vector<Timer *>::iterator':'Timer **'
| `-ParmVarDecl 0x561ff3d27798 <col:41, col:61> col:61 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x561ff3d27a68 <line:190:5, col:38> col:21 erase 'Vector<Timer *>::iterator (Vector<Timer *>::iterator)' inline
| `-ParmVarDecl 0x561ff3d27978 <col:27, col:36> col:36 it 'Vector<Timer *>::iterator':'Timer **'
|-CXXMethodDecl 0x561ff3d27cb8 <line:191:5, col:49> col:21 erase 'Vector<Timer *>::iterator (Vector<Timer *>::iterator, Vector<Timer *>::iterator)' inline
| |-ParmVarDecl 0x561ff3d27b30 <col:27, col:36> col:36 a 'Vector<Timer *>::iterator':'Timer **'
| `-ParmVarDecl 0x561ff3d27ba8 <col:39, col:48> col:48 b 'Vector<Timer *>::iterator':'Timer **'
|-CXXMethodDecl 0x561ff3d27d78 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x561ff3d27fd8 <line:195:5, col:34> col:17 swap 'void (Vector<Timer *> &)' inline
| `-ParmVarDecl 0x561ff3d27ee0 <col:22, col:33> col:33 x 'Vector<Timer *> &'
`-CXXDestructorDecl 0x561ff3d280a8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x561ff3d280a8

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff3c544d0 <../dummy_inc/click/sync.hh:194:1, line:211:1> line:194:7 referenced class SimpleSpinlock definition
|-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x561ff3c545e8 <col:1, col:7> col:7 implicit referenced class SimpleSpinlock
|-AccessSpecDecl 0x561ff3c54678 <col:24, col:30> col:24 public
|-CXXConstructorDecl 0x561ff3c54700 <line:196:5, col:27> col:12 SimpleSpinlock 'void ()' inline
|-CXXDestructorDecl 0x561ff3c547f0 <line:197:5, col:28> col:12 ~SimpleSpinlock 'void () noexcept' inline
|-CXXMethodDecl 0x561ff3c548f0 <line:199:5, col:25> col:17 acquire 'void ()' inline
|-CXXMethodDecl 0x561ff3c549b0 <line:200:5, col:25> col:17 release 'void ()' inline
|-CXXMethodDecl 0x561ff3c54a70 <line:201:5, col:25> col:17 attempt 'bool ()' inline
|-CXXConstructorDecl 0x561ff3c54b98 <line:194:7> col:7 implicit constexpr SimpleSpinlock 'void (const SimpleSpinlock &)' inline default trivial noexcept-unevaluated 0x561ff3c54b98
| `-ParmVarDecl 0x561ff3c54ca8 <col:7> col:7 'const SimpleSpinlock &'
`-CXXMethodDecl 0x561ff3d28e58 <col:7> col:7 implicit operator= 'SimpleSpinlock &(const SimpleSpinlock &)' inline default trivial noexcept-unevaluated 0x561ff3d28e58
  `-ParmVarDecl 0x561ff3d28f68 <col:7> col:7 'const SimpleSpinlock &'

Layout: <CGRecordLayout
  LLVMType:%class.SimpleSpinlock = type { i8 }
  NonVirtualBaseLLVMType:%class.SimpleSpinlock.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff3d0c6d0 prev 0x561ff3d08858 <../dummy_inc/click/timerset.hh:12:1, line:90:1> line:12:7 referenced class TimerSet definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-CXXRecordDecl 0x561ff3d0c7c8 <col:1, col:7> col:7 implicit referenced class TimerSet
|-AccessSpecDecl 0x561ff3d0c858 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x561ff3d0c8e0 <line:14:5, col:14> col:5 TimerSet 'void ()'
|-CXXMethodDecl 0x561ff3d0c9d8 <line:16:5, col:67> col:15 timer_expiry_steady 'Timestamp () const'
| `-CompoundStmt 0x561ff3d292d0 <col:43, col:67>
|   `-ReturnStmt 0x561ff3d292c0 <col:45, col:52>
|     `-CXXConstructExpr 0x561ff3d29290 <col:52> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-MemberExpr 0x561ff3d29260 <col:52> 'const Timestamp' lvalue ->_timer_expiry 0x561ff3d0e1c0
|         `-CXXThisExpr 0x561ff3d29250 <col:52> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x561ff3d0ca98 <line:17:5, col:53> col:22 timer_expiry_steady_adjusted 'Timestamp () const' inline
|-CXXMethodDecl 0x561ff3d0cca0 <line:19:5, col:64> col:16 next_timer_delay 'int (bool, Timestamp &) const' inline
| |-ParmVarDecl 0x561ff3d0cb48 <col:33, col:38> col:38 more_tasks 'bool'
| `-ParmVarDecl 0x561ff3d0cbc0 <col:50, col:61> col:61 t 'Timestamp &'
|-CXXMethodDecl 0x561ff3d0cd98 <line:22:5, col:23> col:12 next_timer 'Timer *()'
|-CXXMethodDecl 0x561ff3d0ce60 <line:24:5, col:67> col:14 max_timer_stride 'unsigned int () const'
| `-CompoundStmt 0x561ff3d29350 <col:39, col:67>
|   `-ReturnStmt 0x561ff3d29340 <col:41, col:48>
|     `-ImplicitCastExpr 0x561ff3d29328 <col:48> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x561ff3d292f8 <col:48> 'const unsigned int' lvalue ->_max_timer_stride 0x561ff3d0e2a8
|         `-CXXThisExpr 0x561ff3d292e8 <col:48> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x561ff3d0cf28 <line:25:5, col:59> col:14 timer_stride 'unsigned int () const'
| `-CompoundStmt 0x561ff3d293d0 <col:35, col:59>
|   `-ReturnStmt 0x561ff3d293c0 <col:37, col:44>
|     `-ImplicitCastExpr 0x561ff3d293a8 <col:44> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x561ff3d29378 <col:44> 'const unsigned int' lvalue ->_timer_stride 0x561ff3d0e310
|         `-CXXThisExpr 0x561ff3d29368 <col:44> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x561ff3d0d070 <line:26:5, col:52> col:10 set_max_timer_stride 'void (unsigned int)'
| `-ParmVarDecl 0x561ff3d0cfe0 <col:31, col:40> col:40 timer_stride 'unsigned int'
|-CXXMethodDecl 0x561ff3d0d1b8 <line:28:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x561ff3d0d128 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x561ff3d0d3b8 <line:30:5, col:57> col:10 run_timers 'void (RouterThread *, Master *)'
| |-ParmVarDecl 0x561ff3d0d270 <col:21, col:35> col:35 thread 'RouterThread *'
| `-ParmVarDecl 0x561ff3d0d2e8 <col:43, col:51> col:51 master 'Master *'
|-CXXMethodDecl 0x561ff3d0d488 <line:32:5, col:23> col:17 fence 'void ()' inline
|-AccessSpecDecl 0x561ff3d0d528 <line:34:3, col:10> col:3 private
|-CXXRecordDecl 0x561ff3d0d550 <line:36:5, line:45:5> line:36:12 referenced struct heap_element definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x561ff3d0d668 <col:5, col:12> col:12 implicit referenced struct heap_element
| |-FieldDecl 0x561ff3d0d708 <line:37:2, col:12> col:12 referenced expiry_s 'Timestamp'
| |-FieldDecl 0x561ff3d0d768 <line:38:2, col:9> col:9 referenced t 'Timer *'
| `-CXXConstructorDecl 0x561ff3d0d898 <line:42:2, line:44:2> line:42:2 heap_element 'void (Timer *)'
|   |-ParmVarDecl 0x561ff3d0d7c8 <col:15, col:22> col:22 used t_ 'Timer *'
|   |-CXXCtorInitializer Field 0x561ff3d0d708 'expiry_s' 'Timestamp'
|   | `-CXXConstructExpr 0x561ff3d294a8 <line:43:8, col:36> 'Timestamp' 'void (const Timestamp &) noexcept'
|   |   `-CXXMemberCallExpr 0x561ff3d29450 <col:17, col:35> 'const Timestamp' lvalue
|   |     `-MemberExpr 0x561ff3d29420 <col:17, col:21> '<bound member function type>' ->expiry_steady 0x561ff3cfdd78
|   |       `-ImplicitCastExpr 0x561ff3d29470 <col:17> 'const Timer *' <NoOp>
|   |         `-ImplicitCastExpr 0x561ff3d29408 <col:17> 'Timer *' <LValueToRValue>
|   |           `-DeclRefExpr 0x561ff3d293e8 <col:17> 'Timer *' lvalue ParmVar 0x561ff3d0d7c8 't_' 'Timer *'
|   |-CXXCtorInitializer Field 0x561ff3d0d768 't' 'Timer *'
|   | `-ImplicitCastExpr 0x561ff3d29540 <col:41> 'Timer *' <LValueToRValue>
|   |   `-DeclRefExpr 0x561ff3d29500 <col:41> 'Timer *' lvalue ParmVar 0x561ff3d0d7c8 't_' 'Timer *'
|   `-CompoundStmt 0x561ff3d29590 <col:45, line:44:2>
|-CXXRecordDecl 0x561ff3d0d960 <line:46:5, line:50:5> line:46:12 struct heap_less definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x561ff3d0da78 <col:5, col:12> col:12 implicit struct heap_less
| `-CXXMethodDecl 0x561ff3d0dcc8 <line:47:2, line:49:2> line:47:14 operator() 'bool (const TimerSet::heap_element &, const TimerSet::heap_element &)' inline
|   |-ParmVarDecl 0x561ff3d0db48 <col:25, col:45> col:45 used a 'const TimerSet::heap_element &'
|   |-ParmVarDecl 0x561ff3d0dbc0 <col:48, col:68> col:68 used b 'const TimerSet::heap_element &'
|   `-CompoundStmt 0x561ff3d296c0 <col:71, line:49:2>
|     `-ReturnStmt 0x561ff3d296b0 <line:48:6, col:28>
|       `-CXXOperatorCallExpr 0x561ff3d29678 <col:13, col:28> 'bool'
|         |-ImplicitCastExpr 0x561ff3d29660 <col:24> 'bool (*)(const Timestamp &, const Timestamp &)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x561ff3d29640 <col:24> 'bool (const Timestamp &, const Timestamp &)' lvalue Function 0x561ff3c8ad88 'operator<' 'bool (const Timestamp &, const Timestamp &)'
|         |-MemberExpr 0x561ff3d295c0 <col:13, col:15> 'const Timestamp' lvalue .expiry_s 0x561ff3d0d708
|         | `-DeclRefExpr 0x561ff3d295a0 <col:13> 'const TimerSet::heap_element' lvalue ParmVar 0x561ff3d0db48 'a' 'const TimerSet::heap_element &'
|         `-MemberExpr 0x561ff3d29610 <col:26, col:28> 'const Timestamp' lvalue .expiry_s 0x561ff3d0d708
|           `-DeclRefExpr 0x561ff3d295f0 <col:26> 'const TimerSet::heap_element' lvalue ParmVar 0x561ff3d0dbc0 'b' 'const TimerSet::heap_element &'
|-CXXRecordDecl 0x561ff3d0dd90 <line:51:5, line:55:5> line:51:12 struct heap_place definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x561ff3d0dea8 <col:5, col:12> col:12 implicit struct heap_place
| `-CXXMethodDecl 0x561ff3d0e0c8 <line:52:2, line:54:2> line:52:14 operator() 'void (TimerSet::heap_element *, TimerSet::heap_element *)' inline
|   |-ParmVarDecl 0x561ff3d0df48 <col:25, col:39> col:39 used begin 'TimerSet::heap_element *'
|   |-ParmVarDecl 0x561ff3d0dfc0 <col:46, col:60> col:60 used t 'TimerSet::heap_element *'
|   `-CompoundStmt 0x561ff3d298c8 <col:63, line:54:2>
|     `-BinaryOperator 0x561ff3d298a8 <line:53:6, col:39> 'int' lvalue '='
|       |-MemberExpr 0x561ff3d29758 <col:6, col:12> 'int' lvalue ->_schedpos1 0x561ff3cffd88
|       | `-ImplicitCastExpr 0x561ff3d29740 <col:6, col:9> 'Timer *' <LValueToRValue>
|       |   `-MemberExpr 0x561ff3d29710 <col:6, col:9> 'Timer *' lvalue ->t 0x561ff3d0d768
|       |     `-ImplicitCastExpr 0x561ff3d296f8 <col:6> 'TimerSet::heap_element *' <LValueToRValue>
|       |       `-DeclRefExpr 0x561ff3d296d8 <col:6> 'TimerSet::heap_element *' lvalue ParmVar 0x561ff3d0dfc0 't' 'TimerSet::heap_element *'
|       `-ImplicitCastExpr 0x561ff3d29890 <col:25, col:39> 'int' <IntegralCast>
|         `-BinaryOperator 0x561ff3d29870 <col:25, col:39> 'long' '+'
|           |-ParenExpr 0x561ff3d29818 <col:25, col:35> 'long'
|           | `-BinaryOperator 0x561ff3d297f8 <col:26, col:30> 'long' '-'
|           |   |-ImplicitCastExpr 0x561ff3d297c8 <col:26> 'TimerSet::heap_element *' <LValueToRValue>
|           |   | `-DeclRefExpr 0x561ff3d29788 <col:26> 'TimerSet::heap_element *' lvalue ParmVar 0x561ff3d0dfc0 't' 'TimerSet::heap_element *'
|           |   `-ImplicitCastExpr 0x561ff3d297e0 <col:30> 'TimerSet::heap_element *' <LValueToRValue>
|           |     `-DeclRefExpr 0x561ff3d297a8 <col:30> 'TimerSet::heap_element *' lvalue ParmVar 0x561ff3d0df48 'begin' 'TimerSet::heap_element *'
|           `-ImplicitCastExpr 0x561ff3d29858 <col:39> 'long' <IntegralCast>
|             `-IntegerLiteral 0x561ff3d29838 <col:39> 'int' 1
|-FieldDecl 0x561ff3d0e1c0 <line:58:5, col:15> col:15 referenced _timer_expiry 'Timestamp'
| `-AlignedAttr 0x561ff3d0e230 <col:44, col:53> aligned
|   `-ConstantExpr 0x561ff3d0e210 <col:52> 'int' Int: 8
|     `-IntegerLiteral 0x561ff3d0e190 <col:52> 'int' 8
|-FieldDecl 0x561ff3d0e2a8 <line:60:5, col:14> col:14 referenced _max_timer_stride 'unsigned int'
|-FieldDecl 0x561ff3d0e310 <line:61:5, col:14> col:14 referenced _timer_stride 'unsigned int'
|-FieldDecl 0x561ff3d0e378 <line:62:5, col:14> col:14 _timer_count 'unsigned int'
|-FieldDecl 0x561ff3d1d4c0 <line:63:5, col:26> col:26 referenced _timer_heap 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>'
|-FieldDecl 0x561ff3d28190 <line:64:5, col:21> col:21 _timer_runchunk 'Vector<Timer *>':'Vector<Timer *>'
|-FieldDecl 0x561ff3d281f0 <line:65:5, col:20> col:20 _timer_lock 'SimpleSpinlock'
|-FieldDecl 0x561ff3d28250 <line:71:5, col:15> col:15 _timer_check 'Timestamp'
|-FieldDecl 0x561ff3d282b0 <line:72:5, col:14> col:14 _timer_check_reports 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff3d283a0 <line:74:5, col:38> col:17 run_one_timer 'void (Timer *)' inline
| `-ParmVarDecl 0x561ff3d28310 <col:31, col:37> col:38 'Timer *'
|-CXXMethodDecl 0x561ff3d28468 <line:76:5, line:81:5> line:76:10 set_timer_expiry 'void ()'
| `-CompoundStmt 0x561ff3d29d20 <col:29, line:81:5>
|   `-IfStmt 0x561ff3d29cf8 <line:77:2, line:80:32> has_else
|     |-ImplicitCastExpr 0x561ff3d299b0 <line:77:6, col:23> 'bool' <IntegralToBoolean>
|     | `-CXXMemberCallExpr 0x561ff3d29950 <col:6, col:23> 'Vector::size_type':'int'
|     |   `-MemberExpr 0x561ff3d29920 <col:6, col:18> '<bound member function type>' .size 0x561ff3d1a4f8
|     |     `-ImplicitCastExpr 0x561ff3d29998 <col:6> 'const Vector<TimerSet::heap_element>' lvalue <NoOp>
|     |       `-MemberExpr 0x561ff3d298f0 <col:6> 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>' lvalue ->_timer_heap 0x561ff3d1d4c0
|     |         `-CXXThisExpr 0x561ff3d298e0 <col:6> 'TimerSet *' implicit this
|     |-CXXOperatorCallExpr 0x561ff3d29ba0 <line:78:6, col:50> 'Timestamp' lvalue
|     | |-ImplicitCastExpr 0x561ff3d29b88 <col:20> 'Timestamp &(*)(const Timestamp &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x561ff3d29b68 <col:20> 'Timestamp &(const Timestamp &) noexcept' lvalue CXXMethod 0x561ff3cad530 'operator=' 'Timestamp &(const Timestamp &) noexcept'
|     | |-MemberExpr 0x561ff3d299d8 <col:6> 'Timestamp' lvalue ->_timer_expiry 0x561ff3d0e1c0
|     | | `-CXXThisExpr 0x561ff3d299c8 <col:6> 'TimerSet *' implicit this
|     | `-ImplicitCastExpr 0x561ff3d29b50 <col:22, col:50> 'const Timestamp' lvalue <NoOp>
|     |   `-MemberExpr 0x561ff3d29b20 <col:22, col:50> 'Timestamp' lvalue .expiry_s 0x561ff3d0d708
|     |     `-CXXMemberCallExpr 0x561ff3d29af8 <col:22, col:48> 'TimerSet::heap_element':'TimerSet::heap_element' lvalue
|     |       |-MemberExpr 0x561ff3d29ac8 <col:22, col:34> '<bound member function type>' .unchecked_at 0x561ff3d1b598
|     |       | `-MemberExpr 0x561ff3d29a18 <col:22> 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>' lvalue ->_timer_heap 0x561ff3d1d4c0
|     |       |   `-CXXThisExpr 0x561ff3d29a08 <col:22> 'TimerSet *' implicit this
|     |       `-IntegerLiteral 0x561ff3d29aa8 <col:47> 'int' 0
|     `-ExprWithCleanups 0x561ff3d29ce0 <line:80:6, col:32> 'Timestamp' lvalue
|       `-CXXOperatorCallExpr 0x561ff3d29ca8 <col:6, col:32> 'Timestamp' lvalue
|         |-ImplicitCastExpr 0x561ff3d29c90 <col:20> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x561ff3d29c70 <col:20> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x561ff3cad9d8 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|         |-MemberExpr 0x561ff3d29be8 <col:6> 'Timestamp' lvalue ->_timer_expiry 0x561ff3d0e1c0
|         | `-CXXThisExpr 0x561ff3d29bd8 <col:6> 'TimerSet *' implicit this
|         `-MaterializeTemporaryExpr 0x561ff3d29c58 <col:22, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x561ff3d29c28 <col:22, col:32> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x561ff3d285a8 <line:82:5, col:37> col:10 check_timer_expiry 'void (Timer *)'
| `-ParmVarDecl 0x561ff3d28518 <col:29, col:36> col:36 t 'Timer *'
|-CXXMethodDecl 0x561ff3d28670 <line:84:5, col:29> col:17 used lock_timers 'void ()' inline
|-CXXMethodDecl 0x561ff3d28730 <line:85:5, col:37> col:17 attempt_lock_timers 'bool ()' inline
|-CXXMethodDecl 0x561ff3d287f0 <line:86:5, col:31> col:17 used unlock_timers 'void ()' inline
|-FriendDecl 0x561ff3d288e0 <line:88:5, col:18> col:12 'class Timer':'Timer'
|-CXXConstructorDecl 0x561ff3d28948 <line:12:7> col:7 implicit TimerSet 'void (const TimerSet &)' inline default noexcept-unevaluated 0x561ff3d28948
| `-ParmVarDecl 0x561ff3d28a58 <col:7> col:7 'const TimerSet &'
|-CXXConstructorDecl 0x561ff3d28af8 <col:7> col:7 implicit TimerSet 'void (TimerSet &&)' inline default noexcept-unevaluated 0x561ff3d28af8
| `-ParmVarDecl 0x561ff3d28c08 <col:7> col:7 'TimerSet &&'
|-CXXMethodDecl 0x561ff3d28ca8 <col:7> col:7 implicit operator= 'TimerSet &(const TimerSet &)' inline default noexcept-unevaluated 0x561ff3d28ca8
| `-ParmVarDecl 0x561ff3d28db8 <col:7> col:7 'const TimerSet &'
|-CXXMethodDecl 0x561ff3d28fd8 <col:7> col:7 implicit operator= 'TimerSet &(TimerSet &&)' inline default noexcept-unevaluated 0x561ff3d28fd8
| `-ParmVarDecl 0x561ff3d290e8 <col:7> col:7 'TimerSet &&'
`-CXXDestructorDecl 0x561ff3d29170 <col:7> col:7 implicit ~TimerSet 'void ()' inline default noexcept-unevaluated 0x561ff3d29170

Layout: <CGRecordLayout
  LLVMType:%class.TimerSet = type <{ %class.Timestamp, i32, i32, i32, [4 x i8], %class.Vector, %class.Vector.0, %class.SimpleSpinlock, [7 x i8], %class.Timestamp, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.TimerSet.base = type <{ %class.Timestamp, i32, i32, i32, [4 x i8], %class.Vector, %class.Vector.0, %class.SimpleSpinlock, [7 x i8], %class.Timestamp, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x561ff3d5f788 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'pollfd'
|-CXXRecordDecl 0x561ff3d5f998 prev 0x561ff3d5f788 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x561ff3d60a70 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<pollfd>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x561ff3d60a20 'typename array_memory<pollfd>::type' sugar
|   `-TypedefType 0x561ff3d60a00 'conditional<true, sized_array_memory<8>, typed_array_memory<pollfd> >::type' sugar
|     |-Typedef 0x561ff3d608b0 'type'
|     `-SubstTemplateTypeParmType 0x561ff3d1e4d0 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x561ff3a79110 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3a790b8 'T'
|       `-RecordType 0x561ff3d1e020 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x561ff3d1df38 'sized_array_memory'
|-FieldDecl 0x561ff3d60b70 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<pollfd>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x561ff3d60bc0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x561ff3d60bf8 <line:118:5, col:15> col:15 value_type 'pollfd':'pollfd'
| `-SubstTemplateTypeParmType 0x561ff3d5fa30 'pollfd' sugar
|   |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x561ff3aadb40 'T'
|   `-RecordType 0x561ff3d5d840 'pollfd'
|     `-CXXRecord 0x561ff3d5d7b0 'pollfd'
|-TypedefDecl 0x561ff3d60cb8 <line:119:5, col:16> col:16 reference 'pollfd &'
| `-LValueReferenceType 0x561ff3d60c80 'pollfd &'
|   `-SubstTemplateTypeParmType 0x561ff3d5fa30 'pollfd' sugar
|     |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561ff3aadb40 'T'
|     `-RecordType 0x561ff3d5d840 'pollfd'
|       `-CXXRecord 0x561ff3d5d7b0 'pollfd'
|-TypedefDecl 0x561ff3d60d78 <line:120:5, col:22> col:22 const_reference 'const pollfd &'
| `-LValueReferenceType 0x561ff3d60d40 'const pollfd &'
|   `-QualType 0x561ff3d5fa31 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x561ff3d5fa30 'pollfd' sugar
|       |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3aadb40 'T'
|       `-RecordType 0x561ff3d5d840 'pollfd'
|         `-CXXRecord 0x561ff3d5d7b0 'pollfd'
|-TypedefDecl 0x561ff3d60e08 <line:121:5, col:16> col:16 pointer 'pollfd *'
| `-PointerType 0x561ff3d60dd0 'pollfd *'
|   `-SubstTemplateTypeParmType 0x561ff3d5fa30 'pollfd' sugar
|     |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561ff3aadb40 'T'
|     `-RecordType 0x561ff3d5d840 'pollfd'
|       `-CXXRecord 0x561ff3d5d7b0 'pollfd'
|-TypedefDecl 0x561ff3d60ec8 <line:122:5, col:22> col:22 const_pointer 'const pollfd *'
| `-PointerType 0x561ff3d60e90 'const pollfd *'
|   `-QualType 0x561ff3d5fa31 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x561ff3d5fa30 'pollfd' sugar
|       |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3aadb40 'T'
|       `-RecordType 0x561ff3d5d840 'pollfd'
|         `-CXXRecord 0x561ff3d5d7b0 'pollfd'
|-TypedefDecl 0x561ff3d61aa0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<pollfd>::type':'pollfd'
| `-ElaboratedType 0x561ff3d61a50 'typename fast_argument<pollfd>::type' sugar
|   `-TypedefType 0x561ff3d61a30 'fast_argument<pollfd, false>::type' sugar
|     |-Typedef 0x561ff3d619c0 'type'
|     `-SubstTemplateTypeParmType 0x561ff3d61780 'pollfd' sugar
|       |-TemplateTypeParmType 0x561ff3a81f30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3a81ee0 'T'
|       `-RecordType 0x561ff3d5d840 'pollfd'
|         `-CXXRecord 0x561ff3d5d7b0 'pollfd'
|-TypedefDecl 0x561ff3d61b08 <line:126:5, col:22> col:22 const_access_type 'const pollfd &'
| `-LValueReferenceType 0x561ff3d60d40 'const pollfd &'
|   `-QualType 0x561ff3d5fa31 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x561ff3d5fa30 'pollfd' sugar
|       |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3aadb40 'T'
|       `-RecordType 0x561ff3d5d840 'pollfd'
|         `-CXXRecord 0x561ff3d5d7b0 'pollfd'
|-TypedefDecl 0x561ff3d61b60 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x561ff3755580 'int'
|-TypedefDecl 0x561ff3d61bc8 <line:130:5, col:16> col:16 iterator 'pollfd *'
| `-PointerType 0x561ff3d60dd0 'pollfd *'
|   `-SubstTemplateTypeParmType 0x561ff3d5fa30 'pollfd' sugar
|     |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561ff3aadb40 'T'
|     `-RecordType 0x561ff3d5d840 'pollfd'
|       `-CXXRecord 0x561ff3d5d7b0 'pollfd'
|-TypedefDecl 0x561ff3d61c30 <line:131:5, col:22> col:22 const_iterator 'const pollfd *'
| `-PointerType 0x561ff3d60e90 'const pollfd *'
|   `-QualType 0x561ff3d5fa31 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x561ff3d5fa30 'pollfd' sugar
|       |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3aadb40 'T'
|       `-RecordType 0x561ff3d5d840 'pollfd'
|         `-CXXRecord 0x561ff3d5d7b0 'pollfd'
|-EnumDecl 0x561ff3d61c88 <line:134:5> col:5
| `-EnumConstantDecl 0x561ff3d61d80 <col:12, col:40> col:12 RESERVE_GROW 'Vector<pollfd>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x561ff3d61d60 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x561ff3aaed58 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x561ff3aaed30 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x561ff3aaed10 <col:40> 'int' 1
|-CXXConstructorDecl 0x561ff3d61e08 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x561ff3d62098 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x561ff3d61ec0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561ff3d61f60 <col:41, col:61> col:61 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXConstructorDecl 0x561ff3d62358 <line:139:5, col:37> col:12 Vector 'void (const Vector<pollfd> &)' inline
| `-ParmVarDecl 0x561ff3d62240 <col:19, col:36> col:36 x 'const Vector<pollfd> &'
|-CXXConstructorDecl 0x561ff3d62618 <line:141:5, col:32> col:12 Vector 'void (Vector<pollfd> &&)' inline
| `-ParmVarDecl 0x561ff3d62500 <col:19, col:31> col:31 x 'Vector<pollfd> &&'
|-CXXMethodDecl 0x561ff3d62960 <line:144:5, col:51> col:23 operator= 'Vector<pollfd> &(const Vector<pollfd> &)' inline
| `-ParmVarDecl 0x561ff3d62840 <col:33, col:50> col:50 x 'const Vector<pollfd> &'
|-CXXMethodDecl 0x561ff3d62c70 <line:146:5, col:46> col:23 operator= 'Vector<pollfd> &(Vector<pollfd> &&)' inline
| `-ParmVarDecl 0x561ff3d62b50 <col:33, col:45> col:45 x 'Vector<pollfd> &&'
|-CXXMethodDecl 0x561ff3d62f60 <line:148:5, col:70> col:23 assign 'Vector<pollfd> &(Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x561ff3d62da8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561ff3d62e20 <col:43, col:69> col:63 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x561ff3d630b8 <line:150:5, col:55> col:49 begin 'Vector<pollfd>::iterator ()'
| |-NoInlineAttr 0x561ff3d63198 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3d631f0 <col:30> Inherited
|-CXXMethodDecl 0x561ff3d63238 <line:151:5, col:53> col:49 end 'Vector<pollfd>::iterator ()'
| |-NoInlineAttr 0x561ff3d632e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3d63340 <col:30> Inherited
|-CXXMethodDecl 0x561ff3d63408 <line:152:5, col:63> col:55 begin 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x561ff3d634b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3d63510 <col:30> Inherited
|-CXXMethodDecl 0x561ff3d63558 <line:153:5, col:61> col:55 end 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x561ff3d63608 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3d63660 <col:30> Inherited
|-CXXMethodDecl 0x561ff3d636a8 <line:154:5, col:64> col:55 cbegin 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x561ff3d63758 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3d637b0 <col:30> Inherited
|-CXXMethodDecl 0x561ff3d637f8 <line:155:5, col:62> col:55 cend 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x561ff3d638a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3d63900 <col:30> Inherited
|-CXXMethodDecl 0x561ff3d63928 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x561ff3d639d8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x561ff3d63a88 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x561ff3d63c48 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x561ff3d63b38 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561ff3d63bb0 <col:37, col:63> col:57 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x561ff3d63d98 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x561ff3d63d08 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3d63f48 <line:163:5, col:65> col:43 operator[] 'pollfd &(Vector::size_type)'
| |-ParmVarDecl 0x561ff3d63e50 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x561ff3d64000 <col:20>
| `-OptimizeNoneAttr 0x561ff3d64058 <col:30>
|-CXXMethodDecl 0x561ff3d64178 <line:164:5, col:73> col:49 operator[] 'const pollfd &(Vector::size_type) const'
| |-ParmVarDecl 0x561ff3d64080 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x561ff3d64230 <col:20>
| `-OptimizeNoneAttr 0x561ff3d64288 <col:30>
|-CXXMethodDecl 0x561ff3d64340 <line:165:5, col:29> col:15 at 'pollfd &(Vector::size_type)' inline
| `-ParmVarDecl 0x561ff3d642b0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3d64488 <line:166:5, col:37> col:21 at 'const pollfd &(Vector::size_type) const' inline
| `-ParmVarDecl 0x561ff3d643f8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3d645b8 <line:167:5, col:21> col:15 front 'pollfd &()' inline
|-CXXMethodDecl 0x561ff3d646e8 <line:168:5, col:29> col:21 front 'const pollfd &() const' inline
|-CXXMethodDecl 0x561ff3d647b8 <line:169:5, col:20> col:15 back 'pollfd &()' inline
|-CXXMethodDecl 0x561ff3d64888 <line:170:5, col:28> col:21 back 'const pollfd &() const' inline
|-CXXMethodDecl 0x561ff3d649c8 <line:172:5, col:39> col:15 unchecked_at 'pollfd &(Vector::size_type)' inline
| `-ParmVarDecl 0x561ff3d64938 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3d64b10 <line:173:5, col:47> col:21 unchecked_at 'const pollfd &(Vector::size_type) const' inline
| `-ParmVarDecl 0x561ff3d64a80 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3d64c58 <line:174:5, col:59> col:15 at_u 'pollfd &(Vector::size_type)' inline
| |-ParmVarDecl 0x561ff3d64bc8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x561ff3d64d10 <col:48> Inherited "" ""
|-CXXMethodDecl 0x561ff3d64e10 <line:175:5, col:71> col:21 at_u 'const pollfd &(Vector::size_type) const' inline
| |-ParmVarDecl 0x561ff3d64d80 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x561ff3d64ec8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x561ff3d64f88 <line:177:5, col:20> col:15 data 'pollfd *()' inline
|-CXXMethodDecl 0x561ff3d65088 <line:178:5, col:28> col:21 data 'const pollfd *() const' inline
|-CXXMethodDecl 0x561ff3d65238 <line:180:5, col:48> col:17 push_back 'void (Vector<pollfd>::value_argument_type)' inline
| `-ParmVarDecl 0x561ff3d65148 <col:27, col:47> col:47 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-FunctionTemplateDecl 0x561ff3d65a18 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x561ff3d652f0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<pollfd>':'fast_argument<pollfd, false>'
| `-CXXMethodDecl 0x561ff3d65978 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (pollfd &&)' inline
|   `-ParmVarDecl 0x561ff3d65878 <col:58, col:62> col:62 v 'pollfd &&'
|-CXXMethodDecl 0x561ff3d65af8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x561ff3d65c48 <line:186:5, col:49> col:17 push_front 'void (Vector<pollfd>::value_argument_type)' inline
| `-ParmVarDecl 0x561ff3d65bb8 <col:28, col:48> col:48 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x561ff3d65d00 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x561ff3d65f48 <line:189:5, col:62> col:21 insert 'Vector<pollfd>::iterator (Vector<pollfd>::iterator, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x561ff3d65dc0 <col:28, col:37> col:37 it 'Vector<pollfd>::iterator':'pollfd *'
| `-ParmVarDecl 0x561ff3d65e38 <col:41, col:61> col:61 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x561ff3d66108 <line:190:5, col:38> col:21 erase 'Vector<pollfd>::iterator (Vector<pollfd>::iterator)' inline
| `-ParmVarDecl 0x561ff3d66018 <col:27, col:36> col:36 it 'Vector<pollfd>::iterator':'pollfd *'
|-CXXMethodDecl 0x561ff3d66358 <line:191:5, col:49> col:21 erase 'Vector<pollfd>::iterator (Vector<pollfd>::iterator, Vector<pollfd>::iterator)' inline
| |-ParmVarDecl 0x561ff3d661d0 <col:27, col:36> col:36 a 'Vector<pollfd>::iterator':'pollfd *'
| `-ParmVarDecl 0x561ff3d66248 <col:39, col:48> col:48 b 'Vector<pollfd>::iterator':'pollfd *'
|-CXXMethodDecl 0x561ff3d66418 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x561ff3d66678 <line:195:5, col:34> col:17 swap 'void (Vector<pollfd> &)' inline
| `-ParmVarDecl 0x561ff3d66580 <col:22, col:33> col:33 x 'Vector<pollfd> &'
`-CXXDestructorDecl 0x561ff3d66748 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x561ff3d66748

Layout: <CGRecordLayout
  LLVMType:%class.Vector.3 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.3 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x561ff3d67d30 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<24>'
|-CXXRecordDecl 0x561ff3d67f08 prev 0x561ff3d67d30 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x561ff3d67f98 <col:46, col:52> col:46 public
|-TypedefDecl 0x561ff3d67fc0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x561ff3755580 'int'
|-TypedefDecl 0x561ff3d69b90 <line:13:5, col:31> col:31 type 'typename sized_array_memory<24>::type':'char_array<24>'
| `-ElaboratedType 0x561ff3d69b40 'typename sized_array_memory<24>::type' sugar
|   `-TypedefType 0x561ff3d68470 'sized_array_memory<24>::type' sugar
|     |-Typedef 0x561ff3d68370 'type'
|     `-TemplateSpecializationType 0x561ff3d68300 'char_array<24UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x561ff3d681e0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 24
|       |   `-SubstNonTypeTemplateParmExpr 0x561ff3d681c0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x561ff3d681a0 <col:24> 'unsigned long' 24
|       `-RecordType 0x561ff3d682e0 'char_array<24>'
|         `-ClassTemplateSpecialization 0x561ff3d68200 'char_array'
|-TypedefDecl 0x561ff3d69c48 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<24> >::type *'
| `-PointerType 0x561ff3d69c10 'vector_memory<sized_array_memory<24> >::type *'
|   `-TypedefType 0x561ff3d69bf0 'vector_memory<sized_array_memory<24> >::type' sugar
|     |-Typedef 0x561ff3d69b90 'type'
|     `-ElaboratedType 0x561ff3d69b40 'typename sized_array_memory<24>::type' sugar
|       `-TypedefType 0x561ff3d68470 'sized_array_memory<24>::type' sugar
|         |-Typedef 0x561ff3d68370 'type'
|         `-TemplateSpecializationType 0x561ff3d68300 'char_array<24UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x561ff3d681e0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 24
|           |   `-SubstNonTypeTemplateParmExpr 0x561ff3d681c0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x561ff3d681a0 <col:24> 'unsigned long' 24
|           `-RecordType 0x561ff3d682e0 'char_array<24>'
|             `-ClassTemplateSpecialization 0x561ff3d68200 'char_array'
|-CXXMethodDecl 0x561ff3d69dc8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<24> >::type *) const' inline
| `-ParmVarDecl 0x561ff3d69cd8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXConstructorDecl 0x561ff3d69eb8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x561ff3d69f98 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x561ff3d69f98
|-CXXMethodDecl 0x561ff3d6a268 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<24> > &)'
| `-ParmVarDecl 0x561ff3d6a170 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<24> > &'
|-CXXMethodDecl 0x561ff3d6a4a8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x561ff3d6a320 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561ff3d6a398 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x561ff3d6a678 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x561ff3d6a568 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561ff3d6a5e0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x561ff3d6a7d8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<24> >::iterator ()'
|-CXXMethodDecl 0x561ff3d6a8a8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<24> >::iterator ()'
|-CXXMethodDecl 0x561ff3d6aaf8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<24> >::iterator (vector_memory<sized_array_memory<24> >::iterator, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x561ff3d6a968 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
| `-ParmVarDecl 0x561ff3d6a9e0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x561ff3d6ad58 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<24> >::iterator (vector_memory<sized_array_memory<24> >::iterator, vector_memory<sized_array_memory<24> >::iterator)'
| |-ParmVarDecl 0x561ff3d6abc8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
| `-ParmVarDecl 0x561ff3d6ac40 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x561ff3d6af18 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<24> >::type *)' inline
| `-ParmVarDecl 0x561ff3d6ae28 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x561ff3d6b0d8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<24> >::type *)' inline
| `-ParmVarDecl 0x561ff3d6afe0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x561ff3d6b190 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x561ff3d6b240 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x561ff3d6b478 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x561ff3d6b2f0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561ff3d6b368 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x561ff3d6b718 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<24> > &)'
| `-ParmVarDecl 0x561ff3d6b620 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<24> > &'
|-FieldDecl 0x561ff3d6b7e0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<24> >::type *'
|-FieldDecl 0x561ff3d6b830 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x561ff3d6b880 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.5 = type { %struct.char_array.6*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.5 = type { %struct.char_array.6*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x561ff3d66890 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'SelectSet::SelectorInfo'
|-CXXRecordDecl 0x561ff3d66a98 prev 0x561ff3d66890 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x561ff3d67ca0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<SelectorInfo>::type':'sized_array_memory<24>'
| `-ElaboratedType 0x561ff3d67c50 'typename array_memory<SelectorInfo>::type' sugar
|   `-TypedefType 0x561ff3d67c30 'conditional<true, sized_array_memory<24>, typed_array_memory<SelectSet::SelectorInfo> >::type' sugar
|     |-Typedef 0x561ff3d67ae0 'type'
|     `-SubstTemplateTypeParmType 0x561ff3d67900 'sized_array_memory<24>' sugar
|       |-TemplateTypeParmType 0x561ff3a79110 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3a790b8 'T'
|       `-RecordType 0x561ff3d67450 'sized_array_memory<24>'
|         `-ClassTemplateSpecialization 0x561ff3d67370 'sized_array_memory'
|-FieldDecl 0x561ff3d6b8d0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<SelectSet::SelectorInfo>::array_memory_type>':'vector_memory<sized_array_memory<24> >' mutable
|-AccessSpecDecl 0x561ff3d6b920 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x561ff3d6b958 <line:118:5, col:15> col:15 value_type 'SelectSet::SelectorInfo':'SelectSet::SelectorInfo'
| `-SubstTemplateTypeParmType 0x561ff3d66b30 'SelectSet::SelectorInfo' sugar
|   |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x561ff3aadb40 'T'
|   `-RecordType 0x561ff3d5f2f0 'SelectSet::SelectorInfo'
|     `-CXXRecord 0x561ff3d5f260 'SelectorInfo'
|-TypedefDecl 0x561ff3d6ba18 <line:119:5, col:16> col:16 reference 'SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x561ff3d6b9e0 'SelectSet::SelectorInfo &'
|   `-SubstTemplateTypeParmType 0x561ff3d66b30 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561ff3aadb40 'T'
|     `-RecordType 0x561ff3d5f2f0 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x561ff3d5f260 'SelectorInfo'
|-TypedefDecl 0x561ff3d6bad8 <line:120:5, col:22> col:22 const_reference 'const SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x561ff3d6baa0 'const SelectSet::SelectorInfo &'
|   `-QualType 0x561ff3d66b31 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x561ff3d66b30 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3aadb40 'T'
|       `-RecordType 0x561ff3d5f2f0 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x561ff3d5f260 'SelectorInfo'
|-TypedefDecl 0x561ff3d6bb68 <line:121:5, col:16> col:16 pointer 'SelectSet::SelectorInfo *'
| `-PointerType 0x561ff3d6bb30 'SelectSet::SelectorInfo *'
|   `-SubstTemplateTypeParmType 0x561ff3d66b30 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561ff3aadb40 'T'
|     `-RecordType 0x561ff3d5f2f0 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x561ff3d5f260 'SelectorInfo'
|-TypedefDecl 0x561ff3d6bc28 <line:122:5, col:22> col:22 const_pointer 'const SelectSet::SelectorInfo *'
| `-PointerType 0x561ff3d6bbf0 'const SelectSet::SelectorInfo *'
|   `-QualType 0x561ff3d66b31 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x561ff3d66b30 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3aadb40 'T'
|       `-RecordType 0x561ff3d5f2f0 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x561ff3d5f260 'SelectorInfo'
|-TypedefDecl 0x561ff3d6c880 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<SelectorInfo>::type':'const SelectSet::SelectorInfo &'
| `-ElaboratedType 0x561ff3d6c830 'typename fast_argument<SelectorInfo>::type' sugar
|   `-TypedefType 0x561ff3d6c810 'fast_argument<SelectSet::SelectorInfo, true>::type' sugar
|     |-Typedef 0x561ff3d6c748 'type'
|     `-LValueReferenceType 0x561ff3d6c710 'const SelectSet::SelectorInfo &'
|       `-QualType 0x561ff3d6c4b1 'const SelectSet::SelectorInfo' const
|         `-SubstTemplateTypeParmType 0x561ff3d6c4b0 'SelectSet::SelectorInfo' sugar
|           |-TemplateTypeParmType 0x561ff3a81800 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x561ff3a817a8 'T'
|           `-RecordType 0x561ff3d5f2f0 'SelectSet::SelectorInfo'
|             `-CXXRecord 0x561ff3d5f260 'SelectorInfo'
|-TypedefDecl 0x561ff3d6c8e8 <line:126:5, col:22> col:22 const_access_type 'const SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x561ff3d6baa0 'const SelectSet::SelectorInfo &'
|   `-QualType 0x561ff3d66b31 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x561ff3d66b30 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3aadb40 'T'
|       `-RecordType 0x561ff3d5f2f0 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x561ff3d5f260 'SelectorInfo'
|-TypedefDecl 0x561ff3d6c940 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x561ff3755580 'int'
|-TypedefDecl 0x561ff3d6c9a8 <line:130:5, col:16> col:16 iterator 'SelectSet::SelectorInfo *'
| `-PointerType 0x561ff3d6bb30 'SelectSet::SelectorInfo *'
|   `-SubstTemplateTypeParmType 0x561ff3d66b30 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561ff3aadb40 'T'
|     `-RecordType 0x561ff3d5f2f0 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x561ff3d5f260 'SelectorInfo'
|-TypedefDecl 0x561ff3d6ca10 <line:131:5, col:22> col:22 const_iterator 'const SelectSet::SelectorInfo *'
| `-PointerType 0x561ff3d6bbf0 'const SelectSet::SelectorInfo *'
|   `-QualType 0x561ff3d66b31 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x561ff3d66b30 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3aadb40 'T'
|       `-RecordType 0x561ff3d5f2f0 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x561ff3d5f260 'SelectorInfo'
|-EnumDecl 0x561ff3d6ca68 <line:134:5> col:5
| `-EnumConstantDecl 0x561ff3d6cb60 <col:12, col:40> col:12 RESERVE_GROW 'Vector<SelectSet::SelectorInfo>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x561ff3d6cb40 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x561ff3aaed58 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x561ff3aaed30 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x561ff3aaed10 <col:40> 'int' 1
|-CXXConstructorDecl 0x561ff3d6cbe8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x561ff3d6ce78 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x561ff3d6cca0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561ff3d6cd40 <col:41, col:61> col:61 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXConstructorDecl 0x561ff3d6d138 <line:139:5, col:37> col:12 Vector 'void (const Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x561ff3d6d020 <col:19, col:36> col:36 x 'const Vector<SelectSet::SelectorInfo> &'
|-CXXConstructorDecl 0x561ff3d6d3f8 <line:141:5, col:32> col:12 Vector 'void (Vector<SelectSet::SelectorInfo> &&)' inline
| `-ParmVarDecl 0x561ff3d6d2e0 <col:19, col:31> col:31 x 'Vector<SelectSet::SelectorInfo> &&'
|-CXXMethodDecl 0x561ff3d6d770 <line:144:5, col:51> col:23 operator= 'Vector<SelectSet::SelectorInfo> &(const Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x561ff3d6d650 <col:33, col:50> col:50 x 'const Vector<SelectSet::SelectorInfo> &'
|-CXXMethodDecl 0x561ff3d6da80 <line:146:5, col:46> col:23 operator= 'Vector<SelectSet::SelectorInfo> &(Vector<SelectSet::SelectorInfo> &&)' inline
| `-ParmVarDecl 0x561ff3d6d960 <col:33, col:45> col:45 x 'Vector<SelectSet::SelectorInfo> &&'
|-CXXMethodDecl 0x561ff3d6dd70 <line:148:5, col:70> col:23 assign 'Vector<SelectSet::SelectorInfo> &(Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x561ff3d6dbb8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561ff3d6dc30 <col:43, col:69> col:63 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x561ff3d6dec8 <line:150:5, col:55> col:49 begin 'Vector<SelectSet::SelectorInfo>::iterator ()'
| |-NoInlineAttr 0x561ff3d6dfa8 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3d6e000 <col:30> Inherited
|-CXXMethodDecl 0x561ff3d6e048 <line:151:5, col:53> col:49 end 'Vector<SelectSet::SelectorInfo>::iterator ()'
| |-NoInlineAttr 0x561ff3d6e0f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3d6e150 <col:30> Inherited
|-CXXMethodDecl 0x561ff3d6e218 <line:152:5, col:63> col:55 begin 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x561ff3d6e2c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3d6e320 <col:30> Inherited
|-CXXMethodDecl 0x561ff3d6e368 <line:153:5, col:61> col:55 end 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x561ff3d6e418 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3d6e470 <col:30> Inherited
|-CXXMethodDecl 0x561ff3d6e4b8 <line:154:5, col:64> col:55 cbegin 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x561ff3d6e568 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3d6e5c0 <col:30> Inherited
|-CXXMethodDecl 0x561ff3d6e608 <line:155:5, col:62> col:55 cend 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x561ff3d6e6b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3d6e710 <col:30> Inherited
|-CXXMethodDecl 0x561ff3d6e738 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x561ff3d6e7e8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x561ff3d6e898 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x561ff3d6ea58 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x561ff3d6e948 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561ff3d6e9c0 <col:37, col:63> col:57 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x561ff3d6eba8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x561ff3d6eb18 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3d6ed58 <line:163:5, col:65> col:43 operator[] 'SelectSet::SelectorInfo &(Vector::size_type)'
| |-ParmVarDecl 0x561ff3d6ec60 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x561ff3d6ee10 <col:20>
| `-OptimizeNoneAttr 0x561ff3d6ee68 <col:30>
|-CXXMethodDecl 0x561ff3d6ef88 <line:164:5, col:73> col:49 operator[] 'const SelectSet::SelectorInfo &(Vector::size_type) const'
| |-ParmVarDecl 0x561ff3d6ee90 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x561ff3d6f040 <col:20>
| `-OptimizeNoneAttr 0x561ff3d6f098 <col:30>
|-CXXMethodDecl 0x561ff3d6f150 <line:165:5, col:29> col:15 at 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| `-ParmVarDecl 0x561ff3d6f0c0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3d6f298 <line:166:5, col:37> col:21 at 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| `-ParmVarDecl 0x561ff3d6f208 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3d6f3c8 <line:167:5, col:21> col:15 front 'SelectSet::SelectorInfo &()' inline
|-CXXMethodDecl 0x561ff3d6f4f8 <line:168:5, col:29> col:21 front 'const SelectSet::SelectorInfo &() const' inline
|-CXXMethodDecl 0x561ff3d6f5c8 <line:169:5, col:20> col:15 back 'SelectSet::SelectorInfo &()' inline
|-CXXMethodDecl 0x561ff3d6f698 <line:170:5, col:28> col:21 back 'const SelectSet::SelectorInfo &() const' inline
|-CXXMethodDecl 0x561ff3d6f7d8 <line:172:5, col:39> col:15 unchecked_at 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| `-ParmVarDecl 0x561ff3d6f748 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3d6f920 <line:173:5, col:47> col:21 unchecked_at 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| `-ParmVarDecl 0x561ff3d6f890 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3d6fa68 <line:174:5, col:59> col:15 at_u 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| |-ParmVarDecl 0x561ff3d6f9d8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x561ff3d6fb20 <col:48> Inherited "" ""
|-CXXMethodDecl 0x561ff3d6fc20 <line:175:5, col:71> col:21 at_u 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| |-ParmVarDecl 0x561ff3d6fb90 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x561ff3d6fcd8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x561ff3d6fd98 <line:177:5, col:20> col:15 data 'SelectSet::SelectorInfo *()' inline
|-CXXMethodDecl 0x561ff3d6fe98 <line:178:5, col:28> col:21 data 'const SelectSet::SelectorInfo *() const' inline
|-CXXMethodDecl 0x561ff3d70048 <line:180:5, col:48> col:17 push_back 'void (Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| `-ParmVarDecl 0x561ff3d6ff58 <col:27, col:47> col:47 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-FunctionTemplateDecl 0x561ff3d70808 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x561ff3d70100 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<SelectSet::SelectorInfo>':'fast_argument<SelectSet::SelectorInfo, true>'
| `-CXXMethodDecl 0x561ff3d70768 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (SelectSet::SelectorInfo &&)' inline
|   `-ParmVarDecl 0x561ff3d70668 <col:58, col:62> col:62 v 'SelectSet::SelectorInfo &&'
|-CXXMethodDecl 0x561ff3d708e8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x561ff3d70a38 <line:186:5, col:49> col:17 push_front 'void (Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| `-ParmVarDecl 0x561ff3d709a8 <col:28, col:48> col:48 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x561ff3d70af0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x561ff3d70d38 <line:189:5, col:62> col:21 insert 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x561ff3d70bb0 <col:28, col:37> col:37 it 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
| `-ParmVarDecl 0x561ff3d70c28 <col:41, col:61> col:61 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x561ff3d70ef8 <line:190:5, col:38> col:21 erase 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator)' inline
| `-ParmVarDecl 0x561ff3d70e08 <col:27, col:36> col:36 it 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
|-CXXMethodDecl 0x561ff3d71148 <line:191:5, col:49> col:21 erase 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator, Vector<SelectSet::SelectorInfo>::iterator)' inline
| |-ParmVarDecl 0x561ff3d70fc0 <col:27, col:36> col:36 a 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
| `-ParmVarDecl 0x561ff3d71038 <col:39, col:48> col:48 b 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
|-CXXMethodDecl 0x561ff3d71208 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x561ff3d71468 <line:195:5, col:34> col:17 swap 'void (Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x561ff3d71370 <col:22, col:33> col:33 x 'Vector<SelectSet::SelectorInfo> &'
`-CXXDestructorDecl 0x561ff3d71538 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x561ff3d71538

Layout: <CGRecordLayout
  LLVMType:%class.Vector.4 = type { %class.vector_memory.5 }
  NonVirtualBaseLLVMType:%class.Vector.4 = type { %class.vector_memory.5 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff3d5e440 <../dummy_inc/click/selectset.hh:36:1, line:109:1> line:36:7 referenced class SelectSet definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x561ff3d5e558 <col:1, col:7> col:7 implicit referenced class SelectSet
|-AccessSpecDecl 0x561ff3d5e5e8 <col:19, col:25> col:19 public
|-CXXConstructorDecl 0x561ff3d5e670 <line:38:5, col:15> col:5 SelectSet 'void ()'
|-CXXDestructorDecl 0x561ff3d5e760 <line:39:5, col:16> col:5 ~SelectSet 'void ()' noexcept-unevaluated 0x561ff3d5e760
|-CXXMethodDecl 0x561ff3d5e860 <line:41:5, col:21> col:10 initialize 'void ()'
|-CXXMethodDecl 0x561ff3d5eb00 <line:43:5, col:54> col:9 add_select 'int (int, Element *, int)'
| |-ParmVarDecl 0x561ff3d5e918 <col:20, col:24> col:24 fd 'int'
| |-ParmVarDecl 0x561ff3d5e990 <col:28, col:37> col:37 element 'Element *'
| `-ParmVarDecl 0x561ff3d5ea10 <col:46, col:50> col:50 mask 'int'
|-CXXMethodDecl 0x561ff3d5ed70 <line:44:5, col:57> col:9 remove_select 'int (int, Element *, int)'
| |-ParmVarDecl 0x561ff3d5ebd0 <col:23, col:27> col:27 fd 'int'
| |-ParmVarDecl 0x561ff3d5ec48 <col:31, col:40> col:40 element 'Element *'
| `-ParmVarDecl 0x561ff3d5ecc8 <col:49, col:53> col:53 mask 'int'
|-CXXMethodDecl 0x561ff3d5eec8 <line:46:5, col:42> col:10 run_selects 'void (RouterThread *)'
| `-ParmVarDecl 0x561ff3d5ee38 <col:22, col:36> col:36 thread 'RouterThread *'
|-CXXMethodDecl 0x561ff3d5ef90 <line:47:5, line:50:5> line:47:17 used wake_immediate 'void ()' inline
| `-CompoundStmt 0x561ff3d72be8 <col:34, line:50:5>
|   |-BinaryOperator 0x561ff3d725b8 <line:48:2, col:23> 'volatile bool' lvalue '='
|   | |-MemberExpr 0x561ff3d72578 <col:2> 'volatile bool' lvalue ->_wake_pipe_pending 0x561ff3d5f718
|   | | `-CXXThisExpr 0x561ff3d72568 <col:2> 'SelectSet *' implicit this
|   | `-CXXBoolLiteralExpr 0x561ff3d725a8 <col:23> 'bool' true
|   `-CallExpr 0x561ff3d72bc0 <line:49:2, col:43> 'void'
|     |-ImplicitCastExpr 0x561ff3d72ba8 <col:2> 'void (*)(long)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x561ff3d72b28 <col:2> 'void (long)' lvalue Function 0x561ff3d72a28 'ignore_result' 'void (long)' (FunctionTemplate 0x561ff39721f8 'ignore_result')
|     `-CallExpr 0x561ff3d727d0 <col:16, col:42> 'ssize_t':'long'
|       |-ImplicitCastExpr 0x561ff3d727b8 <col:16> 'ssize_t (*)(int, const void *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x561ff3d72738 <col:16> 'ssize_t (int, const void *, size_t)' lvalue Function 0x561ff3d38948 'write' 'ssize_t (int, const void *, size_t)'
|       |-ImplicitCastExpr 0x561ff3d72808 <col:22, col:34> 'int' <LValueToRValue>
|       | `-ArraySubscriptExpr 0x561ff3d726e0 <col:22, col:34> 'int' lvalue
|       |   |-ImplicitCastExpr 0x561ff3d726c8 <col:22> 'int *' <ArrayToPointerDecay>
|       |   | `-MemberExpr 0x561ff3d72678 <col:22> 'int [2]' lvalue ->_wake_pipe 0x561ff3d5f6b8
|       |   |   `-CXXThisExpr 0x561ff3d72668 <col:22> 'SelectSet *' implicit this
|       |   `-IntegerLiteral 0x561ff3d726a8 <col:33> 'int' 1
|       |-ImplicitCastExpr 0x561ff3d72838 <col:37> 'const void *' <BitCast>
|       | `-ImplicitCastExpr 0x561ff3d72820 <col:37> 'const char *' <ArrayToPointerDecay>
|       |   `-StringLiteral 0x561ff3d72700 <col:37> 'const char [1]' lvalue ""
|       `-ImplicitCastExpr 0x561ff3d72850 <col:41> 'size_t':'unsigned long' <IntegralCast>
|         `-IntegerLiteral 0x561ff3d72718 <col:41> 'int' 1
|-CXXMethodDecl 0x561ff3d5f0d0 <line:52:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x561ff3d5f040 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x561ff3d5f198 <line:54:5, col:23> col:17 fence 'void ()' inline
|-AccessSpecDecl 0x561ff3d5f238 <line:56:3, col:10> col:3 private
|-CXXRecordDecl 0x561ff3d5f260 <line:58:5, line:66:5> line:58:12 referenced struct SelectorInfo definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x561ff3d5f378 <col:5, col:12> col:12 implicit referenced struct SelectorInfo
| |-FieldDecl 0x561ff3d5f418 <line:59:2, col:11> col:11 read 'Element *'
| |-FieldDecl 0x561ff3d5f478 <line:60:2, col:11> col:11 write 'Element *'
| |-FieldDecl 0x561ff3d5f4e0 <line:61:2, col:6> col:6 pollfd 'int'
| `-CXXConstructorDecl 0x561ff3d5f590 <line:62:2, line:65:2> line:62:2 SelectorInfo 'void ()'
|   |-CXXCtorInitializer Field 0x561ff3d5f418 'read' 'Element *'
|   | `-ImplicitCastExpr 0x561ff3d72c48 <line:63:13> 'Element *' <NullToPointer>
|   |   `-IntegerLiteral 0x561ff3d72c08 <col:13> 'int' 0
|   |-CXXCtorInitializer Field 0x561ff3d5f478 'write' 'Element *'
|   | `-ImplicitCastExpr 0x561ff3d72cc8 <col:23> 'Element *' <NullToPointer>
|   |   `-IntegerLiteral 0x561ff3d72c88 <col:23> 'int' 0
|   |-CXXCtorInitializer Field 0x561ff3d5f4e0 'pollfd' 'int'
|   | `-UnaryOperator 0x561ff3d72d28 <col:34, col:35> 'int' prefix '-'
|   |   `-IntegerLiteral 0x561ff3d72d08 <col:35> 'int' 1
|   `-CompoundStmt 0x561ff3d72da0 <line:64:2, line:65:2>
|-FieldDecl 0x561ff3d5f6b8 <line:68:5, col:21> col:9 referenced _wake_pipe 'int [2]'
|-FieldDecl 0x561ff3d5f718 <line:69:5, col:19> col:19 referenced _wake_pipe_pending 'volatile bool'
|-FieldDecl 0x561ff3d66830 <line:82:5, col:27> col:27 _pollfds 'Vector<struct pollfd>':'Vector<pollfd>'
|-FieldDecl 0x561ff3d71620 <line:83:5, col:26> col:26 _selinfo 'Vector<SelectSet::SelectorInfo>':'Vector<SelectSet::SelectorInfo>'
|-CXXMethodDecl 0x561ff3d71858 <line:89:5, col:63> col:10 register_select 'void (int, bool, bool)'
| |-ParmVarDecl 0x561ff3d71688 <col:26, col:30> col:30 fd 'int'
| |-ParmVarDecl 0x561ff3d71700 <col:34, col:39> col:39 add_read 'bool'
| `-ParmVarDecl 0x561ff3d71778 <col:49, col:54> col:54 add_write 'bool'
|-CXXMethodDecl 0x561ff3d71a40 <line:90:5, col:41> col:10 remove_pollfd 'void (int, int)'
| |-ParmVarDecl 0x561ff3d71928 <col:24, col:28> col:28 pi 'int'
| `-ParmVarDecl 0x561ff3d719a8 <col:32, col:36> col:36 event 'int'
|-CXXMethodDecl 0x561ff3d71c88 <line:91:5, col:49> col:17 call_selected 'void (int, int) const' inline
| |-ParmVarDecl 0x561ff3d71b08 <col:31, col:35> col:35 fd 'int'
| `-ParmVarDecl 0x561ff3d71b88 <col:39, col:43> col:43 mask 'int'
|-CXXMethodDecl 0x561ff3d71e98 <line:92:5, col:63> col:17 post_select 'bool (RouterThread *, bool)' inline
| |-ParmVarDecl 0x561ff3d71d48 <col:29, col:43> col:43 thread 'RouterThread *'
| `-ParmVarDecl 0x561ff3d71dc0 <col:51, col:56> col:56 acquire 'bool'
|-CXXMethodDecl 0x561ff3d71fe8 <line:97:5, col:47> col:10 run_selects_poll 'void (RouterThread *)'
| `-ParmVarDecl 0x561ff3d71f58 <col:27, col:41> col:41 thread 'RouterThread *'
|-CXXMethodDecl 0x561ff3d720b0 <line:102:5, col:22> col:17 used lock 'void ()' inline
|-CXXMethodDecl 0x561ff3d72170 <line:103:5, col:24> col:17 used unlock 'void ()' inline
|-CXXConstructorDecl 0x561ff3d72238 <line:36:7> col:7 implicit SelectSet 'void (const SelectSet &)' inline default noexcept-unevaluated 0x561ff3d72238
| `-ParmVarDecl 0x561ff3d72348 <col:7> col:7 'const SelectSet &'
`-CXXMethodDecl 0x561ff3d723e8 <col:7> col:7 implicit operator= 'SelectSet &(const SelectSet &)' inline default noexcept-unevaluated 0x561ff3d723e8
  `-ParmVarDecl 0x561ff3d724f8 <col:7> col:7 'const SelectSet &'

Layout: <CGRecordLayout
  LLVMType:%class.SelectSet = type { [2 x i32], i8, %class.Vector.3, %class.Vector.4 }
  NonVirtualBaseLLVMType:%class.SelectSet = type { [2 x i32], i8, %class.Vector.3, %class.Vector.4 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff3c53438 <../dummy_inc/click/sync.hh:46:1, line:64:1> line:46:7 referenced class Spinlock definition
|-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x561ff3c53558 <col:1, col:7> col:7 implicit referenced class Spinlock
|-AccessSpecDecl 0x561ff3c535e8 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x561ff3c53670 <line:48:5, col:21> col:12 Spinlock 'void ()' inline
|-CXXDestructorDecl 0x561ff3c53760 <line:49:5, col:22> col:12 ~Spinlock 'void () noexcept' inline
|-CXXMethodDecl 0x561ff3c53860 <line:51:5, col:25> col:17 used acquire 'void ()' inline
|-CXXMethodDecl 0x561ff3c53920 <line:52:5, col:25> col:17 used release 'void ()' inline
|-CXXMethodDecl 0x561ff3c539e0 <line:53:5, col:25> col:17 attempt 'bool ()' inline
|-CXXMethodDecl 0x561ff3c53ac8 <line:54:5, col:26> col:17 nested 'bool () const' inline
|-CXXConstructorDecl 0x561ff3c53be8 <line:46:7> col:7 implicit constexpr Spinlock 'void (const Spinlock &)' inline default trivial noexcept-unevaluated 0x561ff3c53be8
| `-ParmVarDecl 0x561ff3c53cf8 <col:7> col:7 'const Spinlock &'
`-CXXMethodDecl 0x561ff3d79bb8 <col:7> col:7 implicit operator= 'Spinlock &(const Spinlock &)' inline default trivial noexcept-unevaluated 0x561ff3d79bb8
  `-ParmVarDecl 0x561ff3d79cc8 <col:7> col:7 'const Spinlock &'

Layout: <CGRecordLayout
  LLVMType:%class.Spinlock = type { i8 }
  NonVirtualBaseLLVMType:%class.Spinlock.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff3974ce8 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561ff3974e08 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x561ff3974e98 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x561ff3974f68 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x561ff3975050 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x561ff3975f08 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x561ff3975db0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff39760b8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x561ff3975fc0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x561ff3976200 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x561ff3976170 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x561ff3976348 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x561ff39762b8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff3976490 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x561ff3976400 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff3976558 <line:67:5, col:28> col:17 used operator++ 'void ()' inline
|-CXXMethodDecl 0x561ff39766d8 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x561ff3976610 <col:28> col:31 'int'
|-CXXMethodDecl 0x561ff39767a0 <line:69:5, col:28> col:17 used operator-- 'void ()' inline
|-CXXMethodDecl 0x561ff39768e8 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x561ff3976858 <col:28> col:31 'int'
|-CXXMethodDecl 0x561ff3976a68 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x561ff39769a0 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff3976bb0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x561ff3976b20 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff3976c78 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x561ff3976eb8 <line:75:5, col:69> col:21 used compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x561ff3976d28 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x561ff3976da0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff3977108 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x561ff3976f78 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x561ff3976ff0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x561ff39771b8 <col:86> "" ""
|-CXXMethodDecl 0x561ff3977428 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x561ff3977298 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x561ff3977310 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff39775d8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x561ff39774e8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x561ff3977788 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x561ff3977690 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x561ff3977a58 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x561ff3977840 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x561ff39778b8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x561ff3977930 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff3977dc0 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x561ff3977b20 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x561ff3977b98 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x561ff3977c10 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x561ff3977e78 <col:115> "" ""
|-AccessSpecDecl 0x561ff3977ee8 <line:84:3, col:10> col:3 private
|-FieldDecl 0x561ff3977f20 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff39783c8 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x561ff39783c8
| `-ParmVarDecl 0x561ff39784d8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x561ff3978578 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x561ff3978578
| `-ParmVarDecl 0x561ff3978688 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x561ff39bfd98 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x561ff3ca67d0 <col:7>
|-CXXConstructorDecl 0x561ff39bfe70 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x561ff39bfe70
| `-ParmVarDecl 0x561ff39bff88 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x561ff39bfff8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x561ff39bfff8
| `-ParmVarDecl 0x561ff39c0108 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x561ff3ca9140 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff3cfa4a8 <../dummy_inc/click/task.hh:339:5, line:342:5> line:339:11 referenced union Pending definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561ff3cfa5c8 <col:5, col:11> col:11 implicit union Pending
|-FieldDecl 0x561ff3cfa668 <line:340:9, col:15> col:15 t 'Task *'
|-FieldDecl 0x561ff3cfa6c8 <line:341:9, col:19> col:19 referenced x 'uintptr_t':'unsigned long'
|-CXXConstructorDecl 0x561ff3d791b8 <line:339:11> col:11 implicit constexpr Pending 'void (const Task::Pending &)' inline default trivial noexcept-unevaluated 0x561ff3d791b8
| `-ParmVarDecl 0x561ff3d792c8 <col:11> col:11 'const Task::Pending &'
|-CXXConstructorDecl 0x561ff3d79368 <col:11> col:11 implicit constexpr Pending 'void (Task::Pending &&)' inline default trivial noexcept-unevaluated 0x561ff3d79368
| `-ParmVarDecl 0x561ff3d79478 <col:11> col:11 'Task::Pending &&'
|-CXXDestructorDecl 0x561ff3d794e8 <col:11> col:11 implicit ~Pending 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x561ff3d79d68 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(const Task::Pending &)' inline default trivial noexcept-unevaluated 0x561ff3d79d68
| `-ParmVarDecl 0x561ff3d79e78 <col:11> col:11 'const Task::Pending &'
|-CXXMethodDecl 0x561ff3d79ee8 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(Task::Pending &&)' inline default trivial noexcept-unevaluated 0x561ff3d79ee8
| `-ParmVarDecl 0x561ff3d79ff8 <col:11> col:11 'Task::Pending &&'
`-CXXConstructorDecl 0x561ff3d82668 <col:11> col:11 implicit used Pending 'void () noexcept' inline default trivial
  `-CompoundStmt 0x561ff3d82740 <col:11>

Layout: <CGRecordLayout
  LLVMType:%"union.Task::Pending" = type { %class.Task* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff3c55330 <../dummy_inc/click/sync.hh:303:1, line:324:1> line:303:7 referenced class SpinlockIRQ definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561ff3c55448 <col:1, col:7> col:7 implicit referenced class SpinlockIRQ
|-AccessSpecDecl 0x561ff3c554d8 <col:21, col:27> col:21 public
|-CXXConstructorDecl 0x561ff3c55560 <line:305:5, col:24> col:12 SpinlockIRQ 'void ()' inline
|-TypedefDecl 0x561ff3c55620 <line:310:5, col:17> col:17 referenced flags_t 'int'
| `-BuiltinType 0x561ff3755580 'int'
|-CXXMethodDecl 0x561ff3c556e8 <line:313:5, col:59> col:20 acquire 'SpinlockIRQ::flags_t ()' inline
| `-AlwaysInlineAttr 0x561ff3c55788 <col:45> always_inline
|-CXXMethodDecl 0x561ff3c558b8 <line:314:5, col:63> col:17 release 'void (SpinlockIRQ::flags_t)' inline
| |-ParmVarDecl 0x561ff3c557f0 <col:25> col:32 'SpinlockIRQ::flags_t':'int'
| `-AlwaysInlineAttr 0x561ff3c55960 <col:49> always_inline
|-CXXConstructorDecl 0x561ff3c55a58 <line:303:7> col:7 implicit constexpr SpinlockIRQ 'void (const SpinlockIRQ &)' inline default trivial noexcept-unevaluated 0x561ff3c55a58
| `-ParmVarDecl 0x561ff3c55b68 <col:7> col:7 'const SpinlockIRQ &'
|-CXXConstructorDecl 0x561ff3c55c08 <col:7> col:7 implicit constexpr SpinlockIRQ 'void (SpinlockIRQ &&)' inline default trivial noexcept-unevaluated 0x561ff3c55c08
| `-ParmVarDecl 0x561ff3c55d18 <col:7> col:7 'SpinlockIRQ &&'
|-CXXDestructorDecl 0x561ff3d795d0 <col:7> col:7 implicit ~SpinlockIRQ 'void ()' inline default trivial noexcept-unevaluated 0x561ff3d795d0
|-CXXMethodDecl 0x561ff3d7a098 <col:7> col:7 implicit operator= 'SpinlockIRQ &(const SpinlockIRQ &)' inline default trivial noexcept-unevaluated 0x561ff3d7a098
| `-ParmVarDecl 0x561ff3d7a1a8 <col:7> col:7 'const SpinlockIRQ &'
`-CXXMethodDecl 0x561ff3d7a218 <col:7> col:7 implicit operator= 'SpinlockIRQ &(SpinlockIRQ &&)' inline default trivial noexcept-unevaluated 0x561ff3d7a218
  `-ParmVarDecl 0x561ff3d7a328 <col:7> col:7 'SpinlockIRQ &&'

Layout: <CGRecordLayout
  LLVMType:%class.SpinlockIRQ = type { i8 }
  NonVirtualBaseLLVMType:%class.SpinlockIRQ.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff3d73210 prev 0x561ff3d5e3b0 <../dummy_inc/click/routerthread.hh:28:1, line:248:1> line:28:7 referenced class RouterThread definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-CXXRecordDecl 0x561ff3d73308 <col:1, col:7> col:7 implicit referenced class RouterThread
|-AccessSpecDecl 0x561ff3d73398 <col:22, col:28> col:22 public
|-EnumDecl 0x561ff3d733c0 <line:30:5, col:58> col:5
| |-EnumConstantDecl 0x561ff3d734d8 <col:12, col:32> col:12 THREAD_QUIESCENT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:30:5)'
| | `-ConstantExpr 0x561ff3d734b8 <col:31, col:32> 'int' Int: -1
| |   `-UnaryOperator 0x561ff3d734a0 <col:31, col:32> 'int' prefix '-'
| |     `-IntegerLiteral 0x561ff3d73480 <col:32> 'int' 1
| `-EnumConstantDecl 0x561ff3d73580 <col:35, col:53> col:35 THREAD_UNKNOWN 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:30:5)'
|   `-ConstantExpr 0x561ff3d73560 <col:52, col:53> 'int' Int: -1000
|     `-UnaryOperator 0x561ff3d73548 <col:52, col:53> 'int' prefix '-'
|       `-IntegerLiteral 0x561ff3d73528 <col:53> 'int' 1000
|-CXXMethodDecl 0x561ff3d73620 <line:32:5, col:28> col:16 thread_id 'int () const' inline
|-CXXMethodDecl 0x561ff3d736e0 <line:34:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x561ff3d737c8 <line:35:5, col:52> col:22 timer_set 'TimerSet &()' inline
| `-CompoundStmt 0x561ff3d7a3e8 <col:34, col:52>
|   `-ReturnStmt 0x561ff3d7a3d8 <col:36, col:43>
|     `-MemberExpr 0x561ff3d7a3a8 <col:43> 'TimerSet' lvalue ->_timers 0x561ff3d75498
|       `-CXXThisExpr 0x561ff3d7a398 <col:43> 'RouterThread *' implicit this
|-CXXMethodDecl 0x561ff3d738b8 <line:36:5, col:64> col:28 timer_set 'const TimerSet &() const' inline
| `-CompoundStmt 0x561ff3d7a450 <col:46, col:64>
|   `-ReturnStmt 0x561ff3d7a440 <col:48, col:55>
|     `-MemberExpr 0x561ff3d7a410 <col:55> 'const TimerSet' lvalue ->_timers 0x561ff3d75498
|       `-CXXThisExpr 0x561ff3d7a400 <col:55> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x561ff3d739a8 <line:38:5, col:55> col:23 select_set 'SelectSet &()' inline
| `-CompoundStmt 0x561ff3d7a4b8 <col:36, col:55>
|   `-ReturnStmt 0x561ff3d7a4a8 <col:38, col:45>
|     `-MemberExpr 0x561ff3d7a478 <col:45> 'SelectSet' lvalue ->_selects 0x561ff3d754f8
|       `-CXXThisExpr 0x561ff3d7a468 <col:45> 'RouterThread *' implicit this
|-CXXMethodDecl 0x561ff3d73a98 <line:39:5, col:67> col:29 select_set 'const SelectSet &() const' inline
| `-CompoundStmt 0x561ff3d7a520 <col:48, col:67>
|   `-ReturnStmt 0x561ff3d7a510 <col:50, col:57>
|     `-MemberExpr 0x561ff3d7a4e0 <col:57> 'const SelectSet' lvalue ->_selects 0x561ff3d754f8
|       `-CXXThisExpr 0x561ff3d7a4d0 <col:57> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x561ff3d73b58 <line:43:5, col:26> col:17 active 'bool () const' inline
|-CXXMethodDecl 0x561ff3d73c48 <line:44:5, col:31> col:18 task_begin 'Task *() const' inline
|-CXXMethodDecl 0x561ff3d73db8 <line:45:5, col:40> col:18 task_next 'Task *(Task *) const' inline
| `-ParmVarDecl 0x561ff3d73cf8 <col:28, col:34> col:34 task 'Task *'
|-CXXMethodDecl 0x561ff3d73e80 <line:46:5, col:29> col:18 task_end 'Task *() const' inline
|-CXXMethodDecl 0x561ff3d742c8 <line:47:5, col:59> col:10 scheduled_tasks 'void (Router *, Vector<Task *> &)'
| |-ParmVarDecl 0x561ff3d73f30 <col:26, col:34> col:34 router 'Router *'
| `-ParmVarDecl 0x561ff3d741b0 <col:42, col:58> col:58 x 'Vector<Task *> &'
|-CXXMethodDecl 0x561ff3d74398 <line:49:5, col:28> col:17 lock_tasks 'void ()' inline
|-CXXMethodDecl 0x561ff3d74458 <line:50:5, col:30> col:17 unlock_tasks 'void ()' inline
|-CXXMethodDecl 0x561ff3d74518 <line:52:5, col:38> col:17 schedule_block_tasks 'void ()' inline
|-CXXMethodDecl 0x561ff3d74658 <line:53:5, col:43> col:17 used block_tasks 'void (bool)' inline
| `-ParmVarDecl 0x561ff3d745c8 <col:29, col:34> col:34 scheduled 'bool'
|-CXXMethodDecl 0x561ff3d74720 <line:54:5, col:31> col:17 used unblock_tasks 'void ()' inline
|-CXXMethodDecl 0x561ff3d747e0 <line:56:5, col:29> col:17 stop_flag 'bool () const' inline
|-CXXMethodDecl 0x561ff3d748a0 <line:58:5, col:35> col:17 mark_driver_entry 'void ()' inline
|-CXXMethodDecl 0x561ff3d74960 <line:59:5, col:17> col:10 driver 'void ()'
|-CXXMethodDecl 0x561ff3d74aa0 <line:61:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x561ff3d74a10 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x561ff3d74b68 <line:77:5, col:22> col:17 used wake 'void ()' inline
|-CXXMethodDecl 0x561ff3d74c28 <line:80:5, col:29> col:17 run_signals 'void ()' inline
|-EnumDecl 0x561ff3d74cc8 <line:83:5, line:86:20> line:83:5
| |-EnumConstantDecl 0x561ff3d74d90 <col:12> col:12 referenced S_PAUSED 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x561ff3d74de0 <col:22> col:22 referenced S_BLOCKED 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x561ff3d74e30 <col:33> col:33 referenced S_TIMERWAIT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x561ff3d74e80 <line:84:12> col:12 S_LOCKSELECT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x561ff3d74ed0 <col:26> col:26 S_LOCKTASKS 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x561ff3d74f20 <line:85:12> col:12 S_RUNTASK 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x561ff3d74f70 <col:23> col:23 S_RUNTIMER 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x561ff3d74fc0 <col:35> col:35 S_RUNSIGNAL 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x561ff3d75010 <col:48> col:48 S_RUNPENDING 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x561ff3d75060 <col:62> col:62 S_RUNSELECT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| `-EnumConstantDecl 0x561ff3d750b0 <line:86:12> col:12 NSTATES 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
|-CXXMethodDecl 0x561ff3d751a8 <line:87:5, col:43> col:17 used set_thread_state 'void (int)' inline
| `-ParmVarDecl 0x561ff3d75118 <col:34, col:38> col:38 state 'int'
|-CXXMethodDecl 0x561ff3d752f8 <line:88:5, col:61> col:17 set_thread_state_for_blocking 'void (int)' inline
| `-ParmVarDecl 0x561ff3d75268 <col:47, col:51> col:51 delay_type 'int'
|-AccessSpecDecl 0x561ff3d753a0 <line:104:3, col:10> col:3 private
|-FieldDecl 0x561ff3d753d8 <line:119:5, col:14> col:14 referenced _task_link 'TaskLink'
|-FieldDecl 0x561ff3d75438 <line:120:5, col:19> col:19 referenced _stop_flag 'volatile bool'
|-FieldDecl 0x561ff3d75498 <line:125:5, col:14> col:14 referenced _timers 'TimerSet'
|-FieldDecl 0x561ff3d754f8 <line:127:5, col:15> col:15 referenced _selects 'SelectSet'
|-FieldDecl 0x561ff3d77790 <line:148:5, col:14> col:14 referenced _task_lock 'Spinlock'
| `-AlignedAttr 0x561ff3d77800 <col:40, col:50> aligned
|   `-ConstantExpr 0x561ff3d777e0 <col:48> 'int' Int: 64
|     `-IntegerLiteral 0x561ff3d75548 <col:48> 'int' 64
|-FieldDecl 0x561ff3d77870 <line:149:5, col:21> col:21 referenced _task_blocker 'atomic_uint32_t'
|-FieldDecl 0x561ff3d778d0 <line:150:5, col:21> col:21 referenced _task_blocker_waiting 'atomic_uint32_t'
|-FieldDecl 0x561ff3d779d0 <line:152:5, col:19> col:19 referenced _pending_head 'Task::Pending':'Task::Pending'
|-FieldDecl 0x561ff3d77ae0 <line:153:5, col:20> col:20 _pending_tail 'Task::Pending *'
|-FieldDecl 0x561ff3d77b40 <line:154:5, col:17> col:17 _pending_lock 'SpinlockIRQ'
|-FieldDecl 0x561ff3d77bc0 <line:157:5, col:13> col:13 referenced _master 'Master *'
| `-AlignedAttr 0x561ff3d77c30 <col:36, col:46> aligned
|   `-ConstantExpr 0x561ff3d77c10 <col:44> 'int' Int: 64
|     `-IntegerLiteral 0x561ff3d77b90 <col:44> 'int' 64
|-FieldDecl 0x561ff3d77ca8 <line:158:5, col:9> col:9 referenced _id 'int'
|-FieldDecl 0x561ff3d77d08 <line:159:5, col:10> col:10 referenced _driver_entered 'bool'
|-AccessSpecDecl 0x561ff3d77d58 <line:170:3, col:9> col:3 public
|-FieldDecl 0x561ff3d77d98 <line:171:5, col:14> col:14 _tasks_per_iter 'unsigned int'
|-FieldDecl 0x561ff3d77e00 <line:172:5, col:14> col:14 _iters_per_os 'unsigned int'
|-AccessSpecDecl 0x561ff3d77e50 <line:173:3, col:10> col:3 private
|-CXXConstructorDecl 0x561ff3d77ff8 <line:205:5, col:46> col:5 RouterThread 'void (Master *, int)'
| |-ParmVarDecl 0x561ff3d77e88 <col:18, col:26> col:26 master 'Master *'
| `-ParmVarDecl 0x561ff3d77f08 <col:34, col:38> col:38 threadno 'int'
|-CXXDestructorDecl 0x561ff3d780f8 <line:206:5, col:19> col:5 ~RouterThread 'void ()' noexcept-unevaluated 0x561ff3d780f8
|-CXXMethodDecl 0x561ff3d78200 <line:209:5, col:29> col:17 add_pending 'void ()' inline
|-CXXMethodDecl 0x561ff3d782c8 <line:211:5, line:217:5> line:211:21 pass 'unsigned int () const' inline
| `-CompoundStmt 0x561ff3d7a618 <col:34, line:217:5>
|   `-ReturnStmt 0x561ff3d7a608 <line:215:9, col:34>
|     `-ImplicitCastExpr 0x561ff3d7a5f0 <col:16, col:34> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x561ff3d7a5c0 <col:16, col:34> 'unsigned int' lvalue ->_pass 0x561ff3c57e90
|         `-ImplicitCastExpr 0x561ff3d7a5a8 <col:16, col:27> 'TaskLink *' <LValueToRValue>
|           `-MemberExpr 0x561ff3d7a578 <col:16, col:27> 'TaskLink *const' lvalue ._next 0x561ff3c57e28
|             `-MemberExpr 0x561ff3d7a548 <col:16> 'const TaskLink' lvalue ->_task_link 0x561ff3d753d8
|               `-CXXThisExpr 0x561ff3d7a538 <col:16> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x561ff3d78388 <line:221:5, col:28> col:10 driver_lock_tasks 'void ()'
|-CXXMethodDecl 0x561ff3d78448 <line:222:5, line:226:5> line:222:17 driver_unlock_tasks 'void ()' inline
| `-CompoundStmt 0x561ff3d7ad40 <col:39, line:226:5>
|   |-DeclStmt 0x561ff3d7a868 <line:223:9, col:68>
|   | `-VarDecl 0x561ff3d7a640 <col:9, col:67> col:18 used val 'uint32_t':'unsigned int' cinit
|   |   `-CXXMemberCallExpr 0x561ff3d7a820 <col:24, col:67> 'uint32_t':'unsigned int'
|   |     |-MemberExpr 0x561ff3d7a7f0 <col:24, col:38> '<bound member function type>' .compare_swap 0x561ff397f7e0
|   |     | `-MemberExpr 0x561ff3d7a6b8 <col:24> 'atomic_uint32_t' lvalue ->_task_blocker 0x561ff3d77870
|   |     |   `-CXXThisExpr 0x561ff3d7a6a8 <col:24> 'RouterThread *' implicit this
|   |     |-CStyleCastExpr 0x561ff3d7a7a8 <col:51, col:63> 'uint32_t':'unsigned int' <NoOp>
|   |     | `-ImplicitCastExpr 0x561ff3d7a790 <col:62, col:63> 'uint32_t':'unsigned int' <IntegralCast> part_of_explicit_cast
|   |     |   `-UnaryOperator 0x561ff3d7a768 <col:62, col:63> 'int' prefix '-'
|   |     |     `-IntegerLiteral 0x561ff3d7a748 <col:63> 'int' 1
|   |     `-ImplicitCastExpr 0x561ff3d7a850 <col:66> 'uint32_t':'unsigned int' <IntegralCast>
|   |       `-IntegerLiteral 0x561ff3d7a7d0 <col:66> 'int' 0
|   |-CStyleCastExpr 0x561ff3d7a8b0 <line:224:9, col:16> 'void' <ToVoid>
|   | `-DeclRefExpr 0x561ff3d7a880 <col:16> 'uint32_t':'unsigned int' lvalue Var 0x561ff3d7a640 'val' 'uint32_t':'unsigned int'
|   `-ParenExpr 0x561ff3d7ad20 <line:225:9, col:181> 'void'
|     `-ConditionalOperator 0x561ff3d7acf0 <col:10, col:180> 'void'
|       |-CXXStaticCastExpr 0x561ff3d7a9c8 <col:10, col:50> 'bool' static_cast<_Bool> <NoOp>
|       | `-BinaryOperator 0x561ff3d7a998 <col:30, col:49> 'bool' '=='
|       |   |-ImplicitCastExpr 0x561ff3d7a980 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x561ff3d7a8d8 <col:30> 'uint32_t':'unsigned int' lvalue Var 0x561ff3d7a640 'val' 'uint32_t':'unsigned int'
|       |   `-CStyleCastExpr 0x561ff3d7a958 <col:37, col:49> 'uint32_t':'unsigned int' <NoOp>
|       |     `-ImplicitCastExpr 0x561ff3d7a940 <col:48, col:49> 'uint32_t':'unsigned int' <IntegralCast> part_of_explicit_cast
|       |       `-UnaryOperator 0x561ff3d7a918 <col:48, col:49> 'int' prefix '-'
|       |         `-IntegerLiteral 0x561ff3d7a8f8 <col:49> 'int' 1
|       |-CXXFunctionalCastExpr 0x561ff3d7aa28 <col:54, col:61> 'void' functional cast to void <ToVoid>
|       | `-IntegerLiteral 0x561ff3d7aa08 <col:60> 'int' 0
|       `-CallExpr 0x561ff3d7ac50 <col:65, col:180> 'void'
|         |-ImplicitCastExpr 0x561ff3d7ac38 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x561ff3d7ac18 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561ff37f4160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|         |-ImplicitCastExpr 0x561ff3d7ac90 <col:80> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x561ff3d7ab18 <col:80> 'const char [21]' lvalue "val == (uint32_t) -1"
|         |-ImplicitCastExpr 0x561ff3d7aca8 <col:104> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x561ff3d7ab48 <col:104> 'const char [35]' lvalue "../dummy_inc/click/routerthread.hh"
|         |-ImplicitCastExpr 0x561ff3d7acc0 <col:142> 'unsigned int' <IntegralCast>
|         | `-IntegerLiteral 0x561ff3d7ab88 <col:142> 'int' 225
|         `-ImplicitCastExpr 0x561ff3d7acd8 <col:147, col:161> 'const char *' <ArrayToPointerDecay>
|           `-UnaryOperator 0x561ff3d7ac00 <col:147, col:161> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|             `-PredefinedExpr 0x561ff3d7abe8 <col:161> 'const char [41]' lvalue __PRETTY_FUNCTION__
|               `-StringLiteral 0x561ff3d7aba8 <col:161> 'const char [41]' lvalue "void RouterThread::driver_unlock_tasks()"
|-CXXMethodDecl 0x561ff3d78590 <line:228:5, col:37> col:17 run_tasks 'void (int)' inline
| `-ParmVarDecl 0x561ff3d78500 <col:27, col:31> col:31 ntasks 'int'
|-CXXMethodDecl 0x561ff3d78658 <line:229:5, col:33> col:17 process_pending 'void ()' inline
|-CXXMethodDecl 0x561ff3d78718 <line:230:5, col:24> col:17 run_os 'void ()' inline
|-CXXMethodDecl 0x561ff3d787d8 <line:238:5, col:45> col:24 used running_in_interrupt 'bool ()' static inline
|-CXXMethodDecl 0x561ff3d78898 <line:239:5, col:45> col:17 used current_thread_is_running 'bool () const' inline
|-CXXMethodDecl 0x561ff3d78958 <line:240:5, col:53> col:17 current_thread_is_running_cleanup 'bool () const' inline
|-FriendDecl 0x561ff3d78a50 <line:242:5, col:18> col:12 'class Task':'Task'
|-FriendDecl 0x561ff3d78ab0 <line:243:5, col:18> col:12 'class Master':'Master'
|-FriendDecl 0x561ff3d78b40 <line:245:5, col:18> col:12 'class SelectSet':'SelectSet'
|-CXXConstructorDecl 0x561ff3d78f08 <line:28:7> col:7 implicit RouterThread 'void (const RouterThread &)' inline default noexcept-unevaluated 0x561ff3d78f08
| `-ParmVarDecl 0x561ff3d79018 <col:7> col:7 'const RouterThread &'
`-CXXMethodDecl 0x561ff3d796d8 <col:7> col:7 implicit operator= 'RouterThread &(const RouterThread &)' inline default noexcept-unevaluated 0x561ff3d796d8
  `-ParmVarDecl 0x561ff3d797e8 <col:7> col:7 'const RouterThread &'

Layout: <CGRecordLayout
  LLVMType:%class.RouterThread = type { %struct.TaskLink, i8, [7 x i8], %class.TimerSet, %class.SelectSet, [32 x i8], %class.Spinlock, %class.atomic_uint32_t, %class.atomic_uint32_t, %"union.Task::Pending", %"union.Task::Pending"*, %class.SpinlockIRQ, [31 x i8], %class.Master*, i32, i8, i32, i32, [40 x i8] }
  NonVirtualBaseLLVMType:%class.RouterThread.base = type { %struct.TaskLink, i8, [7 x i8], %class.TimerSet, %class.SelectSet, [32 x i8], %class.Spinlock, %class.atomic_uint32_t, %class.atomic_uint32_t, %"union.Task::Pending", %"union.Task::Pending"*, %class.SpinlockIRQ, [31 x i8], %class.Master*, i32, i8, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff3c581a0 prev 0x561ff3cca060 <../dummy_inc/click/task.hh:49:1, line:371:1> line:49:7 referenced class Task definition
|-DefinitionData has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-private 'TaskLink'
|-CXXRecordDecl 0x561ff3c582d8 <col:1, col:7> col:7 implicit referenced class Task
|-AccessSpecDecl 0x561ff3c58368 <col:33, col:39> col:33 public
|-EnumDecl 0x561ff3c58390 <line:52:5, col:50> col:5
| |-EnumConstantDecl 0x561ff3c584d0 <col:12, col:26> col:12 referenced STRIDE1 'Task::(anonymous enum at ../dummy_inc/click/task.hh:52:5)'
| | `-ConstantExpr 0x561ff3c584b0 <col:22, col:26> 'unsigned int' Int: 65536
| |   `-BinaryOperator 0x561ff3c58490 <col:22, col:26> 'unsigned int' '<<'
| |     |-IntegerLiteral 0x561ff3c58450 <col:22> 'unsigned int' 1
| |     `-IntegerLiteral 0x561ff3c58470 <col:26> 'int' 16
| `-EnumConstantDecl 0x561ff3c585a0 <col:30, col:47> col:30 referenced MAX_STRIDE 'Task::(anonymous enum at ../dummy_inc/click/task.hh:52:5)'
|   `-ConstantExpr 0x561ff3c58580 <col:43, col:47> 'unsigned int' Int: 2147483648
|     `-BinaryOperator 0x561ff3c58560 <col:43, col:47> 'unsigned int' '<<'
|       |-IntegerLiteral 0x561ff3c58520 <col:43> 'unsigned int' 1
|       `-IntegerLiteral 0x561ff3c58540 <col:47> 'int' 31
|-EnumDecl 0x561ff3c585f0 <line:53:5, col:57> col:5
| |-EnumConstantDecl 0x561ff3c58730 <col:12, col:29> col:12 referenced MAX_TICKETS 'Task::(anonymous enum at ../dummy_inc/click/task.hh:53:5)'
| | `-ImplicitCastExpr 0x561ff3c58850 <col:26, col:29> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3c58710 <col:26, col:29> 'int' Int: 32768
| |     `-BinaryOperator 0x561ff3c586f0 <col:26, col:29> 'int' '<<'
| |       |-IntegerLiteral 0x561ff3c586b0 <col:26> 'int' 1
| |       `-IntegerLiteral 0x561ff3c586d0 <col:29> 'int' 15
| `-EnumConstantDecl 0x561ff3c58800 <col:33, col:54> col:33 DEFAULT_TICKETS 'Task::(anonymous enum at ../dummy_inc/click/task.hh:53:5)'
|   `-ImplicitCastExpr 0x561ff3c58868 <col:51, col:54> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561ff3c587e0 <col:51, col:54> 'int' Int: 1024
|       `-BinaryOperator 0x561ff3c587c0 <col:51, col:54> 'int' '<<'
|         |-IntegerLiteral 0x561ff3c58780 <col:51> 'int' 1
|         `-IntegerLiteral 0x561ff3c587a0 <col:54> 'int' 10
|-CXXConstructorDecl 0x561ff3cf80b8 <line:75:5, col:48> col:12 Task 'void (TaskCallback, void *)' inline
| |-ParmVarDecl 0x561ff3c58890 <col:17, col:30> col:30 f 'TaskCallback':'bool (*)(Task *, void *)'
| `-ParmVarDecl 0x561ff3cf7f90 <col:33, col:39> col:39 user_data 'void *'
|-CXXConstructorDecl 0x561ff3cf8248 <line:86:5, col:27> col:12 used Task 'void (Element *)' inline
| `-ParmVarDecl 0x561ff3cf8180 <col:17, col:26> col:26 e 'Element *'
|-CXXDestructorDecl 0x561ff3cf8340 <line:91:5, col:11> col:5 used ~Task 'void () noexcept'
|-CXXMethodDecl 0x561ff3cf84c8 <line:98:5, line:100:5> line:98:25 callback 'TaskCallback () const' inline
| `-CompoundStmt 0x561ff3cfb608 <col:42, line:100:5>
|   `-ReturnStmt 0x561ff3cfb5f8 <line:99:9, col:16>
|     `-ImplicitCastExpr 0x561ff3cfb5e0 <col:16> 'TaskCallback':'bool (*)(Task *, void *)' <LValueToRValue>
|       `-MemberExpr 0x561ff3cfb5b0 <col:16> 'const TaskCallback':'bool (*const)(Task *, void *)' lvalue ->_hook 0x561ff3cfa330
|         `-CXXThisExpr 0x561ff3cfb5a0 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x561ff3cf8590 <line:103:5, line:105:5> line:103:18 user_data 'void *() const' inline
| `-CompoundStmt 0x561ff3cfb688 <col:36, line:105:5>
|   `-ReturnStmt 0x561ff3cfb678 <line:104:9, col:16>
|     `-ImplicitCastExpr 0x561ff3cfb660 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x561ff3cfb630 <col:16> 'void *const' lvalue ->_thunk 0x561ff3cfa398
|         `-CXXThisExpr 0x561ff3cfb620 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x561ff3cf8650 <line:108:5, line:110:5> line:108:21 element 'Element *() const' inline
| `-CompoundStmt 0x561ff3cfb708 <col:37, line:110:5>
|   `-ReturnStmt 0x561ff3cfb6f8 <line:109:9, col:16>
|     `-ImplicitCastExpr 0x561ff3cfb6e0 <col:16> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x561ff3cfb6b0 <col:16> 'Element *const' lvalue ->_owner 0x561ff3cfa458
|         `-CXXThisExpr 0x561ff3cfb6a0 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x561ff3cf8710 <line:114:5, col:31> col:17 initialized 'bool () const' inline
|-CXXMethodDecl 0x561ff3cf87d8 <line:123:5, col:33> col:16 home_thread_id 'int () const' inline
|-CXXMethodDecl 0x561ff3cf8898 <line:132:5, col:35> col:26 thread 'RouterThread *() const' inline
|-CXXMethodDecl 0x561ff3cf8958 <line:135:5, line:137:5> line:135:20 router 'Router *() const' inline
| `-CompoundStmt 0x561ff3cfb7f0 <col:35, line:137:5>
|   `-ReturnStmt 0x561ff3cfb7e0 <line:136:9, col:31>
|     `-CXXMemberCallExpr 0x561ff3cfb7a8 <col:16, col:31> 'Router *'
|       `-MemberExpr 0x561ff3cfb778 <col:16, col:24> '<bound member function type>' ->router 0x561ff3ce0850
|         `-ImplicitCastExpr 0x561ff3cfb7c8 <col:16> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x561ff3cfb760 <col:16> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x561ff3cfb730 <col:16> 'Element *const' lvalue ->_owner 0x561ff3cfa458
|               `-CXXThisExpr 0x561ff3cfb720 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x561ff3cf8a18 <line:140:5, col:22> col:13 master 'Master *() const'
|-CXXMethodDecl 0x561ff3cf8c18 <line:159:5, col:50> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x561ff3cf8ac8 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x561ff3cf8b40 <col:37, col:42> col:42 schedule 'bool'
|-CXXMethodDecl 0x561ff3cf8e28 <line:169:5, col:50> col:10 initialize 'void (Router *, bool)'
| |-ParmVarDecl 0x561ff3cf8cd8 <col:21, col:29> col:29 router 'Router *'
| `-ParmVarDecl 0x561ff3cf8d50 <col:37, col:42> col:42 schedule 'bool'
|-CXXMethodDecl 0x561ff3cf8ef8 <line:179:5, line:181:5> line:179:17 scheduled 'bool () const' inline
| `-CompoundStmt 0x561ff3cfb900 <col:35, line:181:5>
|   `-ReturnStmt 0x561ff3cfb8f0 <line:180:9, col:24>
|     `-ImplicitCastExpr 0x561ff3cfb8d8 <col:16, col:24> 'bool' <IntegralToBoolean>
|       `-ImplicitCastExpr 0x561ff3cfb8c0 <col:16, col:24> 'uint8_t':'unsigned char' <LValueToRValue>
|         `-MemberExpr 0x561ff3cfb890 <col:16, col:24> 'const uint8_t':'const unsigned char' lvalue .is_scheduled 0x561ff3cf9f68
|           `-MemberExpr 0x561ff3cfb848 <col:16, col:24> 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x561ff3cfa088
|             `-MemberExpr 0x561ff3cfb818 <col:16> 'const union Status':'const Task::Status' lvalue ->_status 0x561ff3cfa2b8
|               `-CXXThisExpr 0x561ff3cfb808 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x561ff3cf8fb8 <line:190:5, line:192:5> line:190:17 unschedule 'void ()' inline
| `-CompoundStmt 0x561ff3cfba18 <col:30, line:192:5>
|   `-BinaryOperator 0x561ff3cfb9f8 <line:191:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x561ff3cfb9a0 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x561ff3cf9f68
|     | `-MemberExpr 0x561ff3cfb958 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x561ff3cfa088
|     |   `-MemberExpr 0x561ff3cfb928 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x561ff3cfa2b8
|     |     `-CXXThisExpr 0x561ff3cfb918 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x561ff3cfb9e0 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x561ff3cfb9d0 <col:32> 'bool' false
|-CXXMethodDecl 0x561ff3cf9078 <line:201:5, line:206:5> line:201:17 used reschedule 'void ()' inline
| `-CompoundStmt 0x561ff3cfbd68 <col:30, line:206:5>
|   |-BinaryOperator 0x561ff3cfbb10 <line:202:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x561ff3cfbab8 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x561ff3cf9f68
|   | | `-MemberExpr 0x561ff3cfba70 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x561ff3cfa088
|   | |   `-MemberExpr 0x561ff3cfba40 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x561ff3cfa2b8
|   | |     `-CXXThisExpr 0x561ff3cfba30 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x561ff3cfbaf8 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x561ff3cfbae8 <col:32> 'bool' true
|   |-CallExpr 0x561ff3cfbbb0 <line:203:9, col:21> 'void'
|   | `-ImplicitCastExpr 0x561ff3cfbb98 <col:9> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561ff3cfbb78 <col:9> 'void ()' lvalue Function 0x561ff3c52ff0 'click_fence' 'void ()'
|   `-IfStmt 0x561ff3cfbd50 <line:204:9, line:205:32>
|     |-BinaryOperator 0x561ff3cfbc90 <line:204:13, col:34> 'bool' '<'
|     | |-ImplicitCastExpr 0x561ff3cfbc60 <col:13, col:30> 'uintptr_t':'unsigned long' <LValueToRValue>
|     | | `-MemberExpr 0x561ff3cfbc10 <col:13, col:30> 'uintptr_t':'unsigned long' lvalue .x 0x561ff3cfa6c8
|     | |   `-MemberExpr 0x561ff3cfbbe0 <col:13> 'Task::Pending' lvalue ->_pending_nextptr 0x561ff3cfa740
|     | |     `-CXXThisExpr 0x561ff3cfbbd0 <col:13> 'Task *' implicit this
|     | `-ImplicitCastExpr 0x561ff3cfbc78 <col:34> 'unsigned long' <IntegralCast>
|     |   `-IntegerLiteral 0x561ff3cfbc40 <col:34> 'int' 2
|     `-CXXMemberCallExpr 0x561ff3cfbd10 <line:205:13, col:32> 'void'
|       |-MemberExpr 0x561ff3cfbcc0 <col:13> '<bound member function type>' ->complete_schedule 0x561ff3cfb140
|       | `-CXXThisExpr 0x561ff3cfbcb0 <col:13> 'Task *' implicit this
|       `-ImplicitCastExpr 0x561ff3cfbd38 <col:31> 'RouterThread *' <NullToPointer>
|         `-IntegerLiteral 0x561ff3cfbcf0 <col:31> 'int' 0
|-CXXMethodDecl 0x561ff3cf9138 <line:238:5, line:240:5> line:238:17 fast_reschedule 'void ()' inline
| `-CompoundStmt 0x561ff3cfbe90 <col:35, line:240:5>
|   `-BinaryOperator 0x561ff3cfbe70 <line:239:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x561ff3cfbe18 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x561ff3cf9f68
|     | `-MemberExpr 0x561ff3cfbdd0 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x561ff3cfa088
|     |   `-MemberExpr 0x561ff3cfbda0 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x561ff3cfa2b8
|     |     `-CXXThisExpr 0x561ff3cfbd90 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x561ff3cfbe58 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x561ff3cfbe48 <col:32> 'bool' true
|-CXXMethodDecl 0x561ff3cf91f8 <line:250:5, line:253:5> line:250:17 strong_unschedule 'void ()' inline
| `-CompoundStmt 0x561ff3cfc0a8 <col:37, line:253:5>
|   |-BinaryOperator 0x561ff3cfbf88 <line:251:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x561ff3cfbf30 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x561ff3cf9f68
|   | | `-MemberExpr 0x561ff3cfbee8 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x561ff3cfa088
|   | |   `-MemberExpr 0x561ff3cfbeb8 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x561ff3cfa2b8
|   | |     `-CXXThisExpr 0x561ff3cfbea8 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x561ff3cfbf70 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x561ff3cfbf60 <col:32> 'bool' false
|   `-BinaryOperator 0x561ff3cfc088 <line:252:9, col:41> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x561ff3cfc030 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_strong_unscheduled 0x561ff3cf9fc8
|     | `-MemberExpr 0x561ff3cfbfe8 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x561ff3cfa088
|     |   `-MemberExpr 0x561ff3cfbfb8 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x561ff3cfa2b8
|     |     `-CXXThisExpr 0x561ff3cfbfa8 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x561ff3cfc070 <col:41> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x561ff3cfc060 <col:41> 'bool' true
|-CXXMethodDecl 0x561ff3cf92b8 <line:261:5, line:264:5> line:261:17 strong_reschedule 'void ()' inline
| `-CompoundStmt 0x561ff3cfc228 <col:37, line:264:5>
|   |-BinaryOperator 0x561ff3cfc1a8 <line:262:9, col:41> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x561ff3cfc150 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_strong_unscheduled 0x561ff3cf9fc8
|   | | `-MemberExpr 0x561ff3cfc108 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x561ff3cfa088
|   | |   `-MemberExpr 0x561ff3cfc0d8 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x561ff3cfa2b8
|   | |     `-CXXThisExpr 0x561ff3cfc0c8 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x561ff3cfc190 <col:41> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x561ff3cfc180 <col:41> 'bool' false
|   `-CXXMemberCallExpr 0x561ff3cfc208 <line:263:9, col:20> 'void'
|     `-MemberExpr 0x561ff3cfc1d8 <col:9> '<bound member function type>' ->reschedule 0x561ff3cf9078
|       `-CXXThisExpr 0x561ff3cfc1c8 <col:9> 'Task *' implicit this
|-CXXMethodDecl 0x561ff3cf9400 <line:275:5, col:39> col:10 move_thread 'void (int)'
| `-ParmVarDecl 0x561ff3cf9370 <col:22, col:26> col:26 new_thread_id 'int'
|-CXXMethodDecl 0x561ff3cf94d0 <line:279:5, col:26> col:16 tickets 'int () const' inline
|-CXXMethodDecl 0x561ff3cf9618 <line:280:5, col:34> col:17 used set_tickets 'void (int)' inline
| `-ParmVarDecl 0x561ff3cf9588 <col:29, col:33> col:33 n 'int'
|-CXXMethodDecl 0x561ff3cf9768 <line:281:5, col:41> col:17 adjust_tickets 'void (int)' inline
| `-ParmVarDecl 0x561ff3cf96d8 <col:32, col:36> col:36 delta 'int'
|-CXXMethodDecl 0x561ff3cf9830 <line:284:5, col:22> col:17 fire 'bool ()' inline
|-CXXMethodDecl 0x561ff3cf98f0 <line:299:5, col:64> col:25 hook 'TaskCallback () const' inline
| `-DeprecatedAttr 0x561ff3cf9990 <col:53> "" ""
|-CXXMethodDecl 0x561ff3cf9a28 <line:300:5, col:58> col:18 thunk 'void *() const' inline
| `-DeprecatedAttr 0x561ff3cf9ac8 <col:47> "" ""
|-AccessSpecDecl 0x561ff3cf9b38 <line:303:3, col:10> col:3 private
|-FieldDecl 0x561ff3cf9b78 <line:310:5, col:14> col:14 referenced _stride 'unsigned int'
|-FieldDecl 0x561ff3cf9be0 <line:311:5, col:9> col:9 referenced _tickets 'int'
|-CXXRecordDecl 0x561ff3cf9c30 <line:314:5, line:321:5> line:314:11 union Status definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x561ff3cf9d48 <col:5, col:11> col:11 implicit union Status
| |-CXXRecordDecl 0x561ff3cf9dd8 <line:315:9, line:319:9> line:315:9 struct definition
| | |-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | | |-MoveConstructor exists simple trivial
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial
| | |-FieldDecl 0x561ff3cf9f08 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
| | |-FieldDecl 0x561ff3cf9f68 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
| | |-FieldDecl 0x561ff3cf9fc8 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
| | |-CXXConstructorDecl 0x561ff3d81d98 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
| | |-CXXDestructorDecl 0x561ff3d81e70 <col:9> col:9 implicit ~ 'void () noexcept' inline default trivial
| | |-CXXConstructorDecl 0x561ff3d82128 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x561ff3d82128
| | | `-ParmVarDecl 0x561ff3d82238 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
| | `-CXXConstructorDecl 0x561ff3d822d8 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x561ff3d822d8
| |   `-ParmVarDecl 0x561ff3d823e8 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'
| |-FieldDecl 0x561ff3cfa088 <col:9> col:9 implicit referenced 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| |-IndirectFieldDecl 0x561ff3cfa0e8 <line:316:21> col:21 implicit home_thread_id 'int16_t':'short'
| | |-Field 0x561ff3cfa088 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x561ff3cf9f08 'home_thread_id' 'int16_t':'short'
| |-IndirectFieldDecl 0x561ff3cfa140 <line:317:21> col:21 implicit is_scheduled 'uint8_t':'unsigned char'
| | |-Field 0x561ff3cfa088 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x561ff3cf9f68 'is_scheduled' 'uint8_t':'unsigned char'
| |-IndirectFieldDecl 0x561ff3cfa198 <line:318:21> col:21 implicit is_strong_unscheduled 'uint8_t':'unsigned char'
| | |-Field 0x561ff3cfa088 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x561ff3cf9fc8 'is_strong_unscheduled' 'uint8_t':'unsigned char'
| |-FieldDecl 0x561ff3cfa1f0 <line:320:9, col:18> col:18 status 'uint32_t':'unsigned int'
| |-CXXConstructorDecl 0x561ff3d81ca8 <line:314:11> col:11 implicit used Status 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x561ff3d82608 <col:11>
| |-CXXConstructorDecl 0x561ff3d81f78 <col:11> col:11 implicit constexpr Status 'void (const Task::Status &)' inline default trivial noexcept-unevaluated 0x561ff3d81f78
| | `-ParmVarDecl 0x561ff3d82088 <col:11> col:11 'const Task::Status &'
| |-CXXConstructorDecl 0x561ff3d82488 <col:11> col:11 implicit constexpr Status 'void (Task::Status &&)' inline default trivial noexcept-unevaluated 0x561ff3d82488
| | `-ParmVarDecl 0x561ff3d82598 <col:11> col:11 'Task::Status &&'
| `-CXXDestructorDecl 0x561ff3e31b00 <col:11> col:11 implicit ~Status 'void () noexcept' inline default trivial
|-FieldDecl 0x561ff3cfa2b8 <col:5, line:321:7> col:7 referenced _status 'union Status':'Task::Status'
|-FieldDecl 0x561ff3cfa330 <line:323:5, col:18> col:18 referenced _hook 'TaskCallback':'bool (*)(Task *, void *)'
|-FieldDecl 0x561ff3cfa398 <line:324:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x561ff3cfa3f8 <line:335:5, col:19> col:19 referenced _thread 'RouterThread *'
|-FieldDecl 0x561ff3cfa458 <line:337:5, col:14> col:14 referenced _owner 'Element *'
|-CXXRecordDecl 0x561ff3cfa4a8 <line:339:5, line:342:5> line:339:11 referenced union Pending definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x561ff3cfa5c8 <col:5, col:11> col:11 implicit union Pending
| |-FieldDecl 0x561ff3cfa668 <line:340:9, col:15> col:15 t 'Task *'
| |-FieldDecl 0x561ff3cfa6c8 <line:341:9, col:19> col:19 referenced x 'uintptr_t':'unsigned long'
| |-CXXConstructorDecl 0x561ff3d791b8 <line:339:11> col:11 implicit constexpr Pending 'void (const Task::Pending &)' inline default trivial noexcept-unevaluated 0x561ff3d791b8
| | `-ParmVarDecl 0x561ff3d792c8 <col:11> col:11 'const Task::Pending &'
| |-CXXConstructorDecl 0x561ff3d79368 <col:11> col:11 implicit constexpr Pending 'void (Task::Pending &&)' inline default trivial noexcept-unevaluated 0x561ff3d79368
| | `-ParmVarDecl 0x561ff3d79478 <col:11> col:11 'Task::Pending &&'
| |-CXXDestructorDecl 0x561ff3d794e8 <col:11> col:11 implicit ~Pending 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x561ff3d79d68 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(const Task::Pending &)' inline default trivial noexcept-unevaluated 0x561ff3d79d68
| | `-ParmVarDecl 0x561ff3d79e78 <col:11> col:11 'const Task::Pending &'
| |-CXXMethodDecl 0x561ff3d79ee8 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(Task::Pending &&)' inline default trivial noexcept-unevaluated 0x561ff3d79ee8
| | `-ParmVarDecl 0x561ff3d79ff8 <col:11> col:11 'Task::Pending &&'
| `-CXXConstructorDecl 0x561ff3d82668 <col:11> col:11 implicit used Pending 'void () noexcept' inline default trivial
|   `-CompoundStmt 0x561ff3d82740 <col:11>
|-FieldDecl 0x561ff3cfa740 <line:343:5, col:13> col:13 referenced _pending_nextptr 'Task::Pending'
|-CXXConstructorDecl 0x561ff3cfa888 <line:345:5, col:23> col:5 Task 'void (const Task &)'
| `-ParmVarDecl 0x561ff3cfa7c8 <col:10, col:22> col:22 x 'const Task &'
|-CXXMethodDecl 0x561ff3cfaa38 <line:346:5, col:34> col:11 operator= 'Task &(const Task &)'
| `-ParmVarDecl 0x561ff3cfa948 <col:21, col:33> col:33 x 'const Task &'
|-CXXMethodDecl 0x561ff3cfab00 <line:347:5, col:18> col:10 cleanup 'void ()'
|-CXXMethodDecl 0x561ff3cfabc0 <line:352:5, col:37> col:17 used on_scheduled_list 'bool () const' inline
|-CXXMethodDecl 0x561ff3cfac80 <line:353:5, line:355:5> line:353:17 on_pending_list 'bool () const' inline
| `-CompoundStmt 0x561ff3cfc338 <col:41, line:355:5>
|   `-ReturnStmt 0x561ff3cfc328 <line:354:9, col:38>
|     `-BinaryOperator 0x561ff3cfc308 <col:16, col:38> 'bool' '!='
|       |-ImplicitCastExpr 0x561ff3cfc2d8 <col:16, col:33> 'uintptr_t':'unsigned long' <LValueToRValue>
|       | `-MemberExpr 0x561ff3cfc288 <col:16, col:33> 'const uintptr_t':'const unsigned long' lvalue .x 0x561ff3cfa6c8
|       |   `-MemberExpr 0x561ff3cfc258 <col:16> 'const Task::Pending' lvalue ->_pending_nextptr 0x561ff3cfa740
|       |     `-CXXThisExpr 0x561ff3cfc248 <col:16> 'const Task *' implicit this
|       `-ImplicitCastExpr 0x561ff3cfc2f0 <col:38> 'unsigned long' <IntegralCast>
|         `-IntegerLiteral 0x561ff3cfc2b8 <col:38> 'int' 0
|-CXXMethodDecl 0x561ff3cfad40 <line:356:5, col:33> col:17 needs_cleanup 'bool () const' inline
|-CXXMethodDecl 0x561ff3cfae80 <line:361:5, col:33> col:10 add_pending 'void (bool)'
| `-ParmVarDecl 0x561ff3cfadf0 <col:22, col:27> col:27 always 'bool'
|-CXXMethodDecl 0x561ff3cfaff8 <line:362:5, col:46> col:10 process_pending 'void (RouterThread *)'
| `-ParmVarDecl 0x561ff3cfaf38 <col:26, col:40> col:40 thread 'RouterThread *'
|-CXXMethodDecl 0x561ff3cfb140 <line:364:5, col:64> col:10 used complete_schedule 'void (RouterThread *)'
| `-ParmVarDecl 0x561ff3cfb0b0 <col:28, col:42> col:42 process_pending_thread 'RouterThread *'
|-CXXMethodDecl 0x561ff3cfb208 <line:365:5, col:44> col:17 remove_from_scheduled_list 'void ()' inline
|-CXXMethodDecl 0x561ff3cfb3d0 <line:367:5, col:55> col:17 error_hook 'bool (Task *, void *)' static
| |-ParmVarDecl 0x561ff3cfb2b8 <col:28, col:34> col:34 task 'Task *'
| `-ParmVarDecl 0x561ff3cfb338 <col:40, col:46> col:46 user_data 'void *'
|-FriendDecl 0x561ff3cfb4d0 <line:369:5, col:18> col:12 'class RouterThread':'RouterThread'
`-FriendDecl 0x561ff3cfb560 <line:370:5, col:18> col:12 'class Master':'Master'

Layout: <CGRecordLayout
  LLVMType:%class.Task = type { %struct.TaskLink.base, i32, i32, %"union.Task::Status", i1 (%class.Task*, i8*)*, i8*, %class.RouterThread*, %class.Element*, %"union.Task::Pending" }
  NonVirtualBaseLLVMType:%class.Task = type { %struct.TaskLink.base, i32, i32, %"union.Task::Status", i1 (%class.Task*, i8*)*, i8*, %class.RouterThread*, %class.Element*, %"union.Task::Pending" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff3d86440 <../elements/local/rrunqueue.hh:21:1, line:44:1> line:21:7 class RoundRobinUnqueue definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x561ff3d86598 <col:1, col:7> col:7 implicit referenced class RoundRobinUnqueue
|-AccessSpecDecl 0x561ff3d86628 <col:44, col:50> col:44 public
|-CXXConstructorDecl 0x561ff3d866b0 <line:23:3, col:21> col:3 RoundRobinUnqueue 'void ()'
|-CXXDestructorDecl 0x561ff3d867a0 <line:24:3, col:22> col:3 ~RoundRobinUnqueue 'void ()' noexcept-unevaluated 0x561ff3d867a0
| `-Overrides: [ 0x561ff3cca7c8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x561ff3d868d0 <line:26:3, col:64> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x561ff3cd0c60 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x561ff3d87880 <col:34, col:64>
|   `-ReturnStmt 0x561ff3d87870 <col:36, col:43>
|     `-ImplicitCastExpr 0x561ff3d87858 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x561ff3d87828 <col:43> 'const char [18]' lvalue "RoundRobinUnqueue"
|-CXXMethodDecl 0x561ff3d86998 <line:27:3, col:50> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x561ff3cd0d28 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x561ff3d878e0 <col:34, col:50>
|   `-ReturnStmt 0x561ff3d878d0 <col:36, col:43>
|     `-ImplicitCastExpr 0x561ff3d878b8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x561ff3d87898 <col:43> 'const char [4]' lvalue "-/-"
|-CXXMethodDecl 0x561ff3d86a60 <line:28:3, col:57> col:15 processing 'const char *() const'
| |-Overrides: [ 0x561ff3cd1098 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x561ff3d87940 <col:34, col:57>
|   `-ReturnStmt 0x561ff3d87930 <col:36, col:43>
|     `-ImplicitCastExpr 0x561ff3d87918 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x561ff3d878f8 <col:43> 'const char []' lvalue Var 0x561ff3cd1378 'PULL_TO_PUSH' 'const char []'
|-CXXMethodDecl 0x561ff3d86d30 <line:30:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x561ff3cd2490 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x561ff3d86be0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x561ff3d86c58 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x561ff3d86e88 <line:31:3, col:32> col:7 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x561ff3cd26e0 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x561ff3d86df0 <col:18, col:31> col:32 'ErrorHandler *'
|-CXXMethodDecl 0x561ff3d86f50 <line:32:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x561ff3cd2560 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x561ff3d87090 <line:34:3, col:23> col:8 run_task 'bool (Task *)'
| |-Overrides: [ 0x561ff3ccafa8 Element::run_task 'bool (Task *)' ]
| `-ParmVarDecl 0x561ff3d87000 <col:17, col:22> col:23 'Task *'
|-CXXMethodDecl 0x561ff3d87260 <line:36:3, col:46> col:17 read_param 'String (Element *, void *)' static
| |-ParmVarDecl 0x561ff3d87148 <col:28, col:37> col:37 e 'Element *'
| `-ParmVarDecl 0x561ff3d871c8 <col:40, col:45> col:46 'void *'
|-AccessSpecDecl 0x561ff3d87310 <line:38:2, col:9> col:2 private
|-FieldDecl 0x561ff3d87350 <line:40:3, col:7> col:7 _burst 'int'
|-FieldDecl 0x561ff3d873b8 <line:41:3, col:12> col:12 _packets 'unsigned int'
|-FieldDecl 0x561ff3d87418 <line:42:3, col:8> col:8 _task 'Task'
|-FieldDecl 0x561ff3d87480 <line:43:3, col:7> col:7 _next 'int'
|-CXXConstructorDecl 0x561ff3d874f8 <line:21:7> col:7 implicit RoundRobinUnqueue 'void (const RoundRobinUnqueue &)' inline default_delete noexcept-unevaluated 0x561ff3d874f8
| `-ParmVarDecl 0x561ff3d87608 <col:7> col:7 'const RoundRobinUnqueue &'
`-CXXMethodDecl 0x561ff3d876a8 <col:7> col:7 implicit operator= 'RoundRobinUnqueue &(const RoundRobinUnqueue &)' inline default_delete noexcept-unevaluated 0x561ff3d876a8
  `-ParmVarDecl 0x561ff3d877b8 <col:7> col:7 'const RoundRobinUnqueue &'

Layout: <CGRecordLayout
  LLVMType:%class.RoundRobinUnqueue = type <{ %class.Element.base, i32, i32, [4 x i8], %class.Task, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.RoundRobinUnqueue.base = type <{ %class.Element.base, i32, i32, [4 x i8], %class.Task, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff399c090 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x561ff399e330 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x561ff399e3d0 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x561ff399e430 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x561ff399e490 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x561ff399e540 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff399e850 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561ff399e968 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x561ff399ea10 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x561ff399ea78 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x561ff399eb08 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x561ff39a2d40 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x561ff39a3178 <col:12>
|-CXXConstructorDecl 0x561ff39a2e48 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x561ff39a2f58 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x561ff399ea10 'data' 'const char *'
| | `-ImplicitCastExpr 0x561ff39a5e30 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x561ff39a5e00 <col:12> 'const char *const' lvalue .data 0x561ff399ea10
| |     `-DeclRefExpr 0x561ff39a5de0 <col:12> 'const String::rep_t' lvalue ParmVar 0x561ff39a2f58 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x561ff399ea78 'length' 'int'
| | `-ImplicitCastExpr 0x561ff39a5ec0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x561ff39a5e90 <col:12> 'const int' lvalue .length 0x561ff399ea78
| |     `-DeclRefExpr 0x561ff39a5e70 <col:12> 'const String::rep_t' lvalue ParmVar 0x561ff39a2f58 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x561ff399eb08 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x561ff39a5f50 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x561ff39a5f20 <col:12> 'String::memo_t *const' lvalue .memo 0x561ff399eb08
| |     `-DeclRefExpr 0x561ff39a5f00 <col:12> 'const String::rep_t' lvalue ParmVar 0x561ff39a2f58 '' 'const String::rep_t &'
| `-CompoundStmt 0x561ff39a5fa8 <col:12>
|-CXXConstructorDecl 0x561ff39a2ff8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x561ff39a2ff8
| `-ParmVarDecl 0x561ff39a3108 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x561ff39ab580 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x561ff39b6ee8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x561ff39b6ff8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x561ff39b7510 <col:12>
|   |-BinaryOperator 0x561ff39b7328 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x561ff39b72e0 <col:12> 'const char *' lvalue ->data 0x561ff399ea10
|   | | `-CXXThisExpr 0x561ff39b72d0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x561ff39b7310 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x561ff39b72a0 <col:12> 'const char *const' lvalue .data 0x561ff399ea10
|   |     `-DeclRefExpr 0x561ff39b7280 <col:12> 'const String::rep_t' lvalue ParmVar 0x561ff39b6ff8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x561ff39b73f0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x561ff39b73a8 <col:12> 'int' lvalue ->length 0x561ff399ea78
|   | | `-CXXThisExpr 0x561ff39b7398 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x561ff39b73d8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x561ff39b7368 <col:12> 'const int' lvalue .length 0x561ff399ea78
|   |     `-DeclRefExpr 0x561ff39b7348 <col:12> 'const String::rep_t' lvalue ParmVar 0x561ff39b6ff8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x561ff39b74b8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x561ff39b7470 <col:12> 'String::memo_t *' lvalue ->memo 0x561ff399eb08
|   | | `-CXXThisExpr 0x561ff39b7460 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x561ff39b74a0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x561ff39b7430 <col:12> 'String::memo_t *const' lvalue .memo 0x561ff399eb08
|   |     `-DeclRefExpr 0x561ff39b7410 <col:12> 'const String::rep_t' lvalue ParmVar 0x561ff39b6ff8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x561ff39b7500 <col:12>
|     `-UnaryOperator 0x561ff39b74e8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561ff39b74d8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x561ff39b7068 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x561ff39b7068
  `-ParmVarDecl 0x561ff39b7178 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff39927e0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x561ff39928f8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x561ff3992988 <col:16, col:22> col:16 public
|-TypedefDecl 0x561ff39929c8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x561ff3755fd0 'const char *'
|   `-QualType 0x561ff3755521 'const char' const
|     `-BuiltinType 0x561ff3755520 'char'
|-TypedefDecl 0x561ff3992a50 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x561ff3992a20 'String::const_iterator' sugar
|   |-Typedef 0x561ff39929c8 'const_iterator'
|   `-PointerType 0x561ff3755fd0 'const char *'
|     `-QualType 0x561ff3755521 'const char' const
|       `-BuiltinType 0x561ff3755520 'char'
|-TypedefDecl 0x561ff3992bf0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x561ff3992b60 'int (String::*)() const'
|   |-RecordType 0x561ff3992870 'String'
|   | `-CXXRecord 0x561ff39927e0 'String'
|   `-ParenType 0x561ff3992b00 'int () const' sugar
|     `-FunctionProtoType 0x561ff3992ad0 'int () const' const cdecl
|       `-BuiltinType 0x561ff3755580 'int'
|-TypedefDecl 0x561ff3992c58 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x561ff38ad950 'int64_t' sugar
|   |-Typedef 0x561ff37be390 'int64_t'
|   `-TypedefType 0x561ff3797630 '__int64_t' sugar
|     |-Typedef 0x561ff3797208 '__int64_t'
|     `-BuiltinType 0x561ff37555a0 'long'
|-TypedefDecl 0x561ff3992cc0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x561ff38ad870 'uint64_t' sugar
|   |-Typedef 0x561ff37be530 'uint64_t'
|   `-TypedefType 0x561ff37976c0 '__uint64_t' sugar
|     |-Typedef 0x561ff3797278 '__uint64_t'
|     `-BuiltinType 0x561ff3755640 'unsigned long'
|-TypedefDecl 0x561ff3992d50 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x561ff3992d20 'String::intmax_t' sugar
|   |-Typedef 0x561ff3992c58 'intmax_t'
|   `-TypedefType 0x561ff38ad950 'int64_t' sugar
|     |-Typedef 0x561ff37be390 'int64_t'
|     `-TypedefType 0x561ff3797630 '__int64_t' sugar
|       |-Typedef 0x561ff3797208 '__int64_t'
|       `-BuiltinType 0x561ff37555a0 'long'
|-TypedefDecl 0x561ff3992de0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x561ff3992db0 'String::uintmax_t' sugar
|   |-Typedef 0x561ff3992cc0 'uintmax_t'
|   `-TypedefType 0x561ff38ad870 'uint64_t' sugar
|     |-Typedef 0x561ff37be530 'uint64_t'
|     `-TypedefType 0x561ff37976c0 '__uint64_t' sugar
|       |-Typedef 0x561ff3797278 '__uint64_t'
|       `-BuiltinType 0x561ff3755640 'unsigned long'
|-CXXConstructorDecl 0x561ff3992ea0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x561ff3993048 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x561ff3992f88 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x561ff39931f8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x561ff3993138 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x561ff3993350 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x561ff39932c0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x561ff39935d0 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x561ff3993418 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x561ff3993498 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x561ff3993828 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x561ff39936d0 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x561ff3993750 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x561ff3993a48 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x561ff39938f8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x561ff3993978 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x561ff3993c68 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x561ff3993b18 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x561ff3993b98 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x561ff3993df8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x561ff3993d30 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x561ff3993f78 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x561ff3993eb8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x561ff3994108 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x561ff3994040 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x561ff3994260 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x561ff39941d0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x561ff39943e8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x561ff3994328 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x561ff3994578 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x561ff39944b0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x561ff3994708 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x561ff3994640 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x561ff3994898 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x561ff39947d0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x561ff3994a28 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x561ff3994960 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x561ff3994bb8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x561ff3994af0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x561ff3994cb0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x561ff3994dd8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x561ff3994f58 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x561ff3994e90 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x561ff39950a8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x561ff3995018 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x561ff3995150 <col:63> "" ""
|-CXXMethodDecl 0x561ff3995298 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x561ff39951d8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x561ff39954a8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x561ff3995358 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x561ff39953d8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x561ff3995b48 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x561ff39959f0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x561ff3995a70 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x561ff3995e28 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x561ff3995c08 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x561ff3995c88 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x561ff39a2810 <col:55> 'int' 10
| `-ParmVarDecl 0x561ff3995d00 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x561ff39a2830 <col:76> 'bool' true
|-CXXMethodDecl 0x561ff3996108 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x561ff3995ef0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x561ff3995f70 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x561ff39a2840 <col:56> 'int' 10
| `-ParmVarDecl 0x561ff3995fe8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x561ff39a2860 <col:77> 'bool' true
|-CXXMethodDecl 0x561ff3996210 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x561ff39962d8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x561ff39963a0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x561ff3996440 <col:20>
| `-OptimizeNoneAttr 0x561ff3996498 <col:30>
|-CXXConversionDecl 0x561ff3996588 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x561ff3996658 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x561ff3996718 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x561ff3996808 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x561ff39968c8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x561ff3996a48 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x561ff3996980 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x561ff3996b98 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x561ff3996b08 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x561ff3996c88 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x561ff3996d48 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x561ff3996f98 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x561ff3996e00 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x561ff3996e80 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x561ff39971f8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x561ff3997060 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x561ff39970e0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x561ff39972c8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x561ff39974d8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x561ff3997380 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x561ff3997400 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x561ff39976f8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x561ff39975a0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x561ff3997620 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x561ff3997888 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x561ff39977c0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x561ff3997ed0 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x561ff3998048 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x561ff3997f80 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x561ff3998258 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x561ff3998108 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x561ff3998188 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x561ff3998470 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x561ff3998318 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x561ff3998390 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x561ff3998600 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x561ff3998530 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x561ff3998820 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x561ff39986c0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x561ff3998740 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x561ff3998970 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x561ff39988e0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x561ff3998b48 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x561ff3998a30 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x561ff3998ab0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x561ff3998c98 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x561ff3998c08 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x561ff3998eb0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x561ff3998d50 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x561ff3998dd0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x561ff39a2870 <col:39> 'int' 0
|-CXXMethodDecl 0x561ff39990d0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x561ff3998f70 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x561ff3998ff0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x561ff39a2890 <col:48> 'int' 0
|-CXXMethodDecl 0x561ff39992b0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x561ff3999190 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x561ff3999210 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x561ff39a28b0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x561ff3999380 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x561ff3999440 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x561ff3999500 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x561ff39995c0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x561ff3999680 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x561ff3999828 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x561ff3999730 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x561ff39999a8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x561ff39998e0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x561ff3999b28 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x561ff3999a68 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x561ff3999ca8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x561ff3999be0 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x561ff3999df0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x561ff3999d60 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x561ff399a2a0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x561ff399a210 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x561ff399a478 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x561ff399a360 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x561ff399a3e0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x561ff399a658 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x561ff399a540 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x561ff399a5c0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x561ff399a7a8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x561ff399a718 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x561ff399a9b8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x561ff399a868 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x561ff399a8e8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x561ff399ab18 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x561ff399aa80 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x561ff399ac70 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x561ff399abd8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x561ff399ad18 <col:57> "" ""
|-CXXMethodDecl 0x561ff399ae28 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x561ff399ad98 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x561ff399af78 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x561ff399aee8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x561ff399b0f8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x561ff399b030 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x561ff399b1c0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x561ff399b280 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x561ff399b340 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x561ff399b3e0 <col:49> "" ""
|-CXXMethodDecl 0x561ff399b470 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x561ff399b530 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x561ff399b620 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x561ff399b6e8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x561ff399b7a8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x561ff399b868 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x561ff399b960 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x561ff399ba28 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x561ff399baf0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x561ff399bcc8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x561ff399bba8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x561ff399bc28 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x561ff399bef0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x561ff399bd90 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x561ff399be10 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x561ff399c000 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x561ff399c068 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x561ff399c090 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x561ff399e330 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x561ff399e3d0 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x561ff399e430 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x561ff399e490 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x561ff399e540 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x561ff399e5a8 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x561ff399e7e8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x561ff399e838 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561ff399e7c8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x561ff399e6d8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x561ff399e680 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x561ff399e6c0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x561ff399e6a0 <col:32> 'int' 8
|-CXXRecordDecl 0x561ff399e850 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x561ff399e968 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x561ff399ea10 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x561ff399ea78 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x561ff399eb08 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x561ff39a2d40 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x561ff39a3178 <col:12>
| |-CXXConstructorDecl 0x561ff39a2e48 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x561ff39a2f58 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x561ff399ea10 'data' 'const char *'
| | | `-ImplicitCastExpr 0x561ff39a5e30 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x561ff39a5e00 <col:12> 'const char *const' lvalue .data 0x561ff399ea10
| | |     `-DeclRefExpr 0x561ff39a5de0 <col:12> 'const String::rep_t' lvalue ParmVar 0x561ff39a2f58 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x561ff399ea78 'length' 'int'
| | | `-ImplicitCastExpr 0x561ff39a5ec0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x561ff39a5e90 <col:12> 'const int' lvalue .length 0x561ff399ea78
| | |     `-DeclRefExpr 0x561ff39a5e70 <col:12> 'const String::rep_t' lvalue ParmVar 0x561ff39a2f58 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x561ff399eb08 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x561ff39a5f50 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x561ff39a5f20 <col:12> 'String::memo_t *const' lvalue .memo 0x561ff399eb08
| | |     `-DeclRefExpr 0x561ff39a5f00 <col:12> 'const String::rep_t' lvalue ParmVar 0x561ff39a2f58 '' 'const String::rep_t &'
| | `-CompoundStmt 0x561ff39a5fa8 <col:12>
| |-CXXConstructorDecl 0x561ff39a2ff8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x561ff39a2ff8
| | `-ParmVarDecl 0x561ff39a3108 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x561ff39ab580 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x561ff39b6ee8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x561ff39b6ff8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x561ff39b7510 <col:12>
| |   |-BinaryOperator 0x561ff39b7328 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x561ff39b72e0 <col:12> 'const char *' lvalue ->data 0x561ff399ea10
| |   | | `-CXXThisExpr 0x561ff39b72d0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x561ff39b7310 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x561ff39b72a0 <col:12> 'const char *const' lvalue .data 0x561ff399ea10
| |   |     `-DeclRefExpr 0x561ff39b7280 <col:12> 'const String::rep_t' lvalue ParmVar 0x561ff39b6ff8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x561ff39b73f0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x561ff39b73a8 <col:12> 'int' lvalue ->length 0x561ff399ea78
| |   | | `-CXXThisExpr 0x561ff39b7398 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x561ff39b73d8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x561ff39b7368 <col:12> 'const int' lvalue .length 0x561ff399ea78
| |   |     `-DeclRefExpr 0x561ff39b7348 <col:12> 'const String::rep_t' lvalue ParmVar 0x561ff39b6ff8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x561ff39b74b8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x561ff39b7470 <col:12> 'String::memo_t *' lvalue ->memo 0x561ff399eb08
| |   | | `-CXXThisExpr 0x561ff39b7460 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x561ff39b74a0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x561ff39b7430 <col:12> 'String::memo_t *const' lvalue .memo 0x561ff399eb08
| |   |     `-DeclRefExpr 0x561ff39b7410 <col:12> 'const String::rep_t' lvalue ParmVar 0x561ff39b6ff8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x561ff39b7500 <col:12>
| |     `-UnaryOperator 0x561ff39b74e8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x561ff39b74d8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x561ff39b7068 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x561ff39b7068
|   `-ParmVarDecl 0x561ff39b7178 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x561ff399eb80 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x561ff399edc8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x561ff399ebe8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x561ff399ec68 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x561ff399ece0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x561ff39a2d00 <col:79, line:261:5>
|   |-BinaryOperator 0x561ff39a2978 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x561ff39a2910 <col:2, col:5> 'const char *' lvalue .data 0x561ff399ea10
|   | | `-MemberExpr 0x561ff39a28e0 <col:2> 'String::rep_t' lvalue ->_r 0x561ff399eb80
|   | |   `-CXXThisExpr 0x561ff39a28d0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x561ff39a2960 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x561ff39a2940 <col:12> 'const char *' lvalue ParmVar 0x561ff399ebe8 'data' 'const char *'
|   |-BinaryOperator 0x561ff39a2a40 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x561ff39a29d8 <col:2, col:5> 'int' lvalue .length 0x561ff399ea78
|   | | `-MemberExpr 0x561ff39a29a8 <col:2> 'String::rep_t' lvalue ->_r 0x561ff399eb80
|   | |   `-CXXThisExpr 0x561ff39a2998 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x561ff39a2a28 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x561ff39a2a08 <col:14> 'int' lvalue ParmVar 0x561ff399ec68 'length' 'int'
|   `-IfStmt 0x561ff39a2ce8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x561ff39a2b60 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x561ff39a2b48 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x561ff39a2b28 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x561ff39a2b08 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x561ff39a2aa0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x561ff399eb08
|     |       | `-MemberExpr 0x561ff39a2a70 <col:7> 'String::rep_t' lvalue ->_r 0x561ff399eb80
|     |       |   `-CXXThisExpr 0x561ff39a2a60 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x561ff39a2af0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x561ff39a2ad0 <col:17> 'String::memo_t *' lvalue ParmVar 0x561ff399ece0 'memo' 'String::memo_t *'
|     `-CallExpr 0x561ff39a2cc0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x561ff39a2ca8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x561ff39a2bb0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x561ff3979438 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x561ff39a2c18 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x561ff399e3d0
|         `-ImplicitCastExpr 0x561ff39a2c00 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x561ff39a2be0 <col:27> 'String::memo_t *' lvalue ParmVar 0x561ff399ece0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x561ff399f078 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x561ff399ee98 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x561ff399ef18 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x561ff399ef90 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x561ff399eb80 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x561ff39a3188 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x561ff39a3318 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x561ff39a3280 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x561ff39a31f0 <col:2> '<bound member function type>' ->assign_memo 0x561ff399edc8
|     | `-ImplicitCastExpr 0x561ff39a32b8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x561ff39a31e0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x561ff39a32d0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x561ff39a3220 <col:14> 'const char *' lvalue ParmVar 0x561ff399ee98 'data' 'const char *'
|     |-ImplicitCastExpr 0x561ff39a32e8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x561ff39a3240 <col:20> 'int' lvalue ParmVar 0x561ff399ef18 'length' 'int'
|     `-ImplicitCastExpr 0x561ff39a3300 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x561ff39a3260 <col:28> 'String::memo_t *' lvalue ParmVar 0x561ff399ef90 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x561ff399f208 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x561ff399f148 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x561ff39a3570 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x561ff39a34f0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x561ff39a3340 <col:2> '<bound member function type>' ->assign_memo 0x561ff399edc8
|     | `-CXXThisExpr 0x561ff39a3330 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x561ff39a3528 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x561ff39a33c0 <col:14, col:19> 'const char *' lvalue .data 0x561ff399ea10
|     |   `-MemberExpr 0x561ff39a3390 <col:14, col:16> 'String::rep_t' lvalue ._r 0x561ff399eb80
|     |     `-DeclRefExpr 0x561ff39a3370 <col:14> 'const String' lvalue ParmVar 0x561ff399f148 'x' 'const String &'
|     |-ImplicitCastExpr 0x561ff39a3540 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x561ff39a3440 <col:25, col:30> 'int' lvalue .length 0x561ff399ea78
|     |   `-MemberExpr 0x561ff39a3410 <col:25, col:27> 'String::rep_t' lvalue ._r 0x561ff399eb80
|     |     `-DeclRefExpr 0x561ff39a33f0 <col:25> 'const String' lvalue ParmVar 0x561ff399f148 'x' 'const String &'
|     `-ImplicitCastExpr 0x561ff39a3558 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x561ff39a34c0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x561ff399eb08
|         `-MemberExpr 0x561ff39a3490 <col:38, col:40> 'String::rep_t' lvalue ._r 0x561ff399eb80
|           `-DeclRefExpr 0x561ff39a3470 <col:38> 'const String' lvalue ParmVar 0x561ff399f148 'x' 'const String &'
|-CXXMethodDecl 0x561ff399f2d0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x561ff39a4638 <col:31, line:278:5>
|   `-IfStmt 0x561ff39a4620 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x561ff39a3610 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x561ff39a35f8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x561ff39a35c8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x561ff399eb08
|     |     `-MemberExpr 0x561ff39a3598 <col:6> 'String::rep_t' lvalue ->_r 0x561ff399eb80
|     |       `-CXXThisExpr 0x561ff39a3588 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x561ff39a45f8 <col:15, line:277:2>
|       |-ParenExpr 0x561ff39a3bb0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x561ff39a3b80 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x561ff39a3720 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x561ff39a3708 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x561ff39a36f0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x561ff39a36b0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x561ff399e3d0
|       |   |       `-ImplicitCastExpr 0x561ff39a3698 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x561ff39a3668 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x561ff399eb08
|       |   |           `-MemberExpr 0x561ff39a3638 <col:27> 'String::rep_t' lvalue ->_r 0x561ff399eb80
|       |   |             `-CXXThisExpr 0x561ff39a3628 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x561ff39a3780 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x561ff39a3760 <col:54> 'int' 0
|       |   `-CallExpr 0x561ff39a3ae0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x561ff39a3ac8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x561ff39a3a50 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561ff37f4160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x561ff39a3b20 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x561ff39a3868 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x561ff39a3b38 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x561ff39a3918 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x561ff39a3b50 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x561ff39a3950 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x561ff39a3b68 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x561ff39a3a38 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x561ff39a3a20 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x561ff39a39e8 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x561ff39a4518 <line:274:6, line:275:22>
|       | |-CallExpr 0x561ff39a3dc0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x561ff39a3da8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x561ff39a3d20 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x561ff397e7d0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x561ff39a3cf0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x561ff399e3d0
|       | |   `-ImplicitCastExpr 0x561ff39a3cd8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x561ff39a3ca8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x561ff399eb08
|       | |       `-MemberExpr 0x561ff39a3c78 <col:40> 'String::rep_t' lvalue ->_r 0x561ff399eb80
|       | |         `-CXXThisExpr 0x561ff39a3c68 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x561ff39a3ec0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x561ff39a3ea8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x561ff39a3de8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x561ff399ffa8 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x561ff39a4500 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x561ff39a3e48 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x561ff399eb08
|       |       `-MemberExpr 0x561ff39a3e18 <col:15> 'String::rep_t' lvalue ->_r 0x561ff399eb80
|       |         `-CXXThisExpr 0x561ff39a3e08 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x561ff39a45d8 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x561ff39a4570 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x561ff399eb08
|         | `-MemberExpr 0x561ff39a4540 <col:6> 'String::rep_t' lvalue ->_r 0x561ff399eb80
|         |   `-CXXThisExpr 0x561ff39a4530 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x561ff39a45c0 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x561ff39a45a0 <col:16> 'int' 0
|-CXXMethodDecl 0x561ff399f568 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x561ff399f388 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x561ff399f408 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x561ff399f480 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x561ff399f640 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x561ff399f890 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x561ff399f6f8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x561ff399f778 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x561ff399f7f0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x561ff399fa78 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x561ff399f960 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x561ff399f9e0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x561ff399fb78 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x561ff39a4730 <col:41, line:286:5>
|   `-ReturnStmt 0x561ff39a4720 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x561ff39a46f0 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x561ff39a46b8 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x561ff39a46a0 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x561ff39a4680 <col:46> 'int' 1
|-CXXMethodDecl 0x561ff399fe18 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x561ff399fc30 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x561ff399fcb0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x561ff399fd30 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x561ff399ffa8 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x561ff399fee0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x561ff39a0078 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x561ff39a0248 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x561ff39a0130 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x561ff39a01b0 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x561ff39a1ef0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x561ff39a2038 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x561ff39a2178 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x561ff39a21f0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x561ff39a2268 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x561ff39a22d0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x561ff39a23d0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x561ff39a2420 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561ff39a23b0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x561ff39a2390 <col:22> 'int' 14
|-CXXMethodDecl 0x561ff39a2638 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x561ff39a2450 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x561ff39a24d0 <col:38> col:41 'int'
| `-ParmVarDecl 0x561ff39a2550 <col:43> col:46 'int'
|-FriendDecl 0x561ff39a2740 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x561ff39a27d0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x561ff3da90b0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x561ff3da9288 prev 0x561ff3da90b0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x561ff3da9318 <col:46, col:52> col:46 public
|-TypedefDecl 0x561ff3da9340 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x561ff3755580 'int'
|-TypedefDecl 0x561ff3daaca0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x561ff3daac50 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x561ff3daac30 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x561ff3da9558 'type'
|     `-SubstTemplateTypeParmType 0x561ff3da9520 'String' sugar
|       |-TemplateTypeParmType 0x561ff3aa1c80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3aa1c30 'T'
|       `-RecordType 0x561ff3992870 'String'
|         `-CXXRecord 0x561ff39927e0 'String'
|-TypedefDecl 0x561ff3daad58 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x561ff3daad20 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x561ff3daad00 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x561ff3daaca0 'type'
|     `-ElaboratedType 0x561ff3daac50 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x561ff3daac30 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x561ff3da9558 'type'
|         `-SubstTemplateTypeParmType 0x561ff3da9520 'String' sugar
|           |-TemplateTypeParmType 0x561ff3aa1c80 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x561ff3aa1c30 'T'
|           `-RecordType 0x561ff3992870 'String'
|             `-CXXRecord 0x561ff39927e0 'String'
|-CXXMethodDecl 0x561ff3daaed8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x561ff3daade8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x561ff3daafc8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x561ff3dab0a8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x561ff3dab0a8
|-CXXMethodDecl 0x561ff3dab378 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x561ff3dab280 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x561ff3dab5b8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x561ff3dab430 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561ff3dab4a8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x561ff3dab788 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x561ff3dab678 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561ff3dab6f0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x561ff3dab8e8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x561ff3dab9b8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x561ff3dabc08 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x561ff3daba78 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x561ff3dabaf0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x561ff3dabe68 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x561ff3dabcd8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x561ff3dabd50 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x561ff3dac028 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x561ff3dabf38 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x561ff3dac1e8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x561ff3dac0f0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x561ff3dac2a0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x561ff3dac350 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x561ff3dac588 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x561ff3dac400 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561ff3dac478 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x561ff3dac828 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x561ff3dac730 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x561ff3dac8f0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x561ff3dac940 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x561ff3dac990 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.8 = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.8 = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x561ff3cd2100 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x561ff3da7a38 prev 0x561ff3cd2100 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x561ff3da9020 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x561ff3da8fd0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x561ff3da8fb0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x561ff3da8e60 'type'
|     `-SubstTemplateTypeParmType 0x561ff3da8cf0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x561ff3a79890 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x561ff3a79838 'F'
|       `-RecordType 0x561ff3da8950 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x561ff3da8870 'typed_array_memory'
|-FieldDecl 0x561ff3dac9e0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x561ff3daca30 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x561ff3daca68 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x561ff3da7ad0 'String' sugar
|   |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x561ff3aadb40 'T'
|   `-RecordType 0x561ff3992870 'String'
|     `-CXXRecord 0x561ff39927e0 'String'
|-TypedefDecl 0x561ff3dacaf8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x561ff3dacac0 'String &'
|   `-SubstTemplateTypeParmType 0x561ff3da7ad0 'String' sugar
|     |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561ff3aadb40 'T'
|     `-RecordType 0x561ff3992870 'String'
|       `-CXXRecord 0x561ff39927e0 'String'
|-TypedefDecl 0x561ff3dacb88 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x561ff3dacb50 'const String &'
|   `-QualType 0x561ff3da7ad1 'const String' const
|     `-SubstTemplateTypeParmType 0x561ff3da7ad0 'String' sugar
|       |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3aadb40 'T'
|       `-RecordType 0x561ff3992870 'String'
|         `-CXXRecord 0x561ff39927e0 'String'
|-TypedefDecl 0x561ff3dacc18 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x561ff3dacbe0 'String *'
|   `-SubstTemplateTypeParmType 0x561ff3da7ad0 'String' sugar
|     |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561ff3aadb40 'T'
|     `-RecordType 0x561ff3992870 'String'
|       `-CXXRecord 0x561ff39927e0 'String'
|-TypedefDecl 0x561ff3dacca8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x561ff3dacc70 'const String *'
|   `-QualType 0x561ff3da7ad1 'const String' const
|     `-SubstTemplateTypeParmType 0x561ff3da7ad0 'String' sugar
|       |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3aadb40 'T'
|       `-RecordType 0x561ff3992870 'String'
|         `-CXXRecord 0x561ff39927e0 'String'
|-TypedefDecl 0x561ff3dad900 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x561ff3dad8b0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x561ff3dad890 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x561ff3dad7c8 'type'
|     `-LValueReferenceType 0x561ff3dad790 'const String &'
|       `-QualType 0x561ff3dad531 'const String' const
|         `-SubstTemplateTypeParmType 0x561ff3dad530 'String' sugar
|           |-TemplateTypeParmType 0x561ff3a81800 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x561ff3a817a8 'T'
|           `-RecordType 0x561ff3992870 'String'
|             `-CXXRecord 0x561ff39927e0 'String'
|-TypedefDecl 0x561ff3dad968 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x561ff3dacb50 'const String &'
|   `-QualType 0x561ff3da7ad1 'const String' const
|     `-SubstTemplateTypeParmType 0x561ff3da7ad0 'String' sugar
|       |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3aadb40 'T'
|       `-RecordType 0x561ff3992870 'String'
|         `-CXXRecord 0x561ff39927e0 'String'
|-TypedefDecl 0x561ff3dad9c0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x561ff3755580 'int'
|-TypedefDecl 0x561ff3dada28 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x561ff3dacbe0 'String *'
|   `-SubstTemplateTypeParmType 0x561ff3da7ad0 'String' sugar
|     |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561ff3aadb40 'T'
|     `-RecordType 0x561ff3992870 'String'
|       `-CXXRecord 0x561ff39927e0 'String'
|-TypedefDecl 0x561ff3dada90 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x561ff3dacc70 'const String *'
|   `-QualType 0x561ff3da7ad1 'const String' const
|     `-SubstTemplateTypeParmType 0x561ff3da7ad0 'String' sugar
|       |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3aadb40 'T'
|       `-RecordType 0x561ff3992870 'String'
|         `-CXXRecord 0x561ff39927e0 'String'
|-EnumDecl 0x561ff3dadae8 <line:134:5> col:5
| `-EnumConstantDecl 0x561ff3dadbe0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x561ff3dadbc0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x561ff3aaed58 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x561ff3aaed30 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x561ff3aaed10 <col:40> 'int' 1
|-CXXConstructorDecl 0x561ff3dadc68 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x561ff3dadef8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x561ff3dadd20 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561ff3daddc0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x561ff3dae188 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x561ff3dae070 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x561ff3dae448 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x561ff3dae330 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x561ff3dae760 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x561ff3dae640 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x561ff3daea70 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x561ff3dae950 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x561ff3daed60 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x561ff3daeba8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561ff3daec20 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x561ff3daee88 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x561ff3daef38 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3daef90 <col:30> Inherited
|-CXXMethodDecl 0x561ff3daefd8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x561ff3daf088 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3daf0e0 <col:30> Inherited
|-CXXMethodDecl 0x561ff3daf1a8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x561ff3daf258 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3daf2b0 <col:30> Inherited
|-CXXMethodDecl 0x561ff3daf2f8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x561ff3daf3a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3daf400 <col:30> Inherited
|-CXXMethodDecl 0x561ff3daf448 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x561ff3daf4f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3daf550 <col:30> Inherited
|-CXXMethodDecl 0x561ff3daf598 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x561ff3daf648 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3daf6a0 <col:30> Inherited
|-CXXMethodDecl 0x561ff3daf6c8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x561ff3daf778 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x561ff3daf828 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x561ff3daf9e8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x561ff3daf8d8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561ff3daf950 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x561ff3dafb38 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x561ff3dafaa8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3dafce8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x561ff3dafbf0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x561ff3dafda0 <col:20>
| `-OptimizeNoneAttr 0x561ff3dafdf8 <col:30>
|-CXXMethodDecl 0x561ff3daff18 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x561ff3dafe20 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x561ff3daffd0 <col:20>
| `-OptimizeNoneAttr 0x561ff3db0028 <col:30>
|-CXXMethodDecl 0x561ff3db1150 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x561ff3db10c0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3db1298 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x561ff3db1208 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3db13c8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x561ff3db14c8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x561ff3db1598 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x561ff3db1668 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x561ff3db17a8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x561ff3db1718 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3db18f0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x561ff3db1860 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3db1a38 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x561ff3db19a8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x561ff3db1af0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x561ff3db1bf0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x561ff3db1b60 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x561ff3db1ca8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x561ff3db1d68 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x561ff3db1e68 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x561ff3db1fe8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x561ff3db1f28 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x561ff3db2778 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x561ff3db20a0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x561ff3db26d8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x561ff3db25d8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x561ff3db2858 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x561ff3db29a8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x561ff3db2918 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x561ff3db2a60 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x561ff3db2ca8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x561ff3db2b20 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x561ff3db2b98 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x561ff3db2e38 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x561ff3db2d78 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x561ff3db3048 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x561ff3db2f00 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x561ff3db2f78 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x561ff3db3108 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x561ff3db3368 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x561ff3db3270 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x561ff3db3438 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x561ff3db3438

Layout: <CGRecordLayout
  LLVMType:%class.Vector.7 = type { %class.vector_memory.8 }
  NonVirtualBaseLLVMType:%class.Vector.7 = type { %class.vector_memory.8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff39e3030 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x561ff39e3148 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x561ff39e31d8 <col:22, col:28> col:22 public
|-EnumDecl 0x561ff39e3200 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x561ff39e3318 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x561ff39e32f8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x561ff39e32e0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x561ff39e32c0 <col:14> 'int' 999
| |-EnumConstantDecl 0x561ff39e33c0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x561ff39e33a0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x561ff39e3388 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x561ff39e3368 <col:14> 'int' 1
| |-EnumConstantDecl 0x561ff39e3450 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x561ff39e3430 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x561ff39e3410 <col:17> 'int' 0
| |-EnumConstantDecl 0x561ff39e34e0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x561ff39e34c0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x561ff39e34a0 <col:13> 'int' 1
| |-EnumConstantDecl 0x561ff39e3570 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x561ff39e3550 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x561ff39e3530 <col:16> 'int' 2
| |-EnumConstantDecl 0x561ff39e3600 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x561ff39e35e0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x561ff39e35c0 <col:13> 'int' 3
| |-EnumConstantDecl 0x561ff39e3690 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x561ff39e3670 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x561ff39e3650 <col:15> 'int' 4
| |-EnumConstantDecl 0x561ff39e3720 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x561ff39e3700 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x561ff39e36e0 <col:14> 'int' 5
| |-EnumConstantDecl 0x561ff39e37b0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x561ff39e3790 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x561ff39e3770 <col:12> 'int' 6
| `-EnumConstantDecl 0x561ff39e3840 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x561ff39e3820 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x561ff39e3800 <col:13> 'int' 7
|-VarDecl 0x561ff39e3908 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x561ff39e3990 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x561ff39e3a18 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x561ff39e3aa0 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x561ff39e3b28 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x561ff39e3bb0 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x561ff39e3c60 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x561ff39e3ce8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x561ff39e3d70 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x561ff39e3df8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x561ff39e3e80 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x561ff39e3fb0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x561ff39e95f8 '_nerrors' 'int'
| | `-IntegerLiteral 0x561ff39e9d88 <line:128:13> 'int' 0
| `-CompoundStmt 0x561ff39ebb30 <col:16, line:129:5>
|-CXXDestructorDecl 0x561ff39e40a0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x561ff39ebb40 <col:29, line:132:5>
|-CXXMethodDecl 0x561ff39e4258 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x561ff39e4190 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x561ff39e4320 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x561ff39e4408 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x561ff39ebb98 <col:44, line:161:5>
|   `-ReturnStmt 0x561ff39ebb88 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x561ff39ebb70 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x561ff39ebb50 <col:9> 'ErrorHandler *' lvalue Var 0x561ff39e9658 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x561ff39e4578 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x561ff39e44b8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x561ff39e4640 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x561ff39ebbf8 <col:43, line:173:5>
|   `-ReturnStmt 0x561ff39ebbe8 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x561ff39ebbd0 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x561ff39ebbb0 <col:9> 'ErrorHandler *' lvalue Var 0x561ff39e96d0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x561ff39e46f8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x561ff39e4778 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x561ff39e48c0 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x561ff39e47f8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x561ff39e4a10 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x561ff39e4980 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x561ff39e4b68 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x561ff39e4ad0 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x561ff39e4cc0 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x561ff39e4c28 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x561ff39e4e18 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x561ff39e4d80 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x561ff39e5030 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x561ff39e4ed0 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x561ff39e4f50 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x561ff39e5208 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x561ff39e50f0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x561ff39e5170 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x561ff39e5428 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x561ff39e52c8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x561ff39e5348 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x561ff39e5608 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x561ff39e54e8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x561ff39e5568 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x561ff39e57e8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x561ff39e56c8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x561ff39e5748 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x561ff39e5970 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x561ff39e58a8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x561ff39e5b40 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x561ff39e5a28 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x561ff39e5aa0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x561ff39ebe58 <col:57, line:234:5>
|   `-ReturnStmt 0x561ff39ebe48 <line:233:2, col:41>
|     `-ExprWithCleanups 0x561ff39ebe30 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x561ff39ebdd8 <col:9, col:41> 'int'
|         |-MemberExpr 0x561ff39ebda8 <col:9> '<bound member function type>' ->xmessage 0x561ff39e5970
|         | `-CXXThisExpr 0x561ff39ebd98 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x561ff39ebe18 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x561ff39ebe00 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x561ff39ebd78 <col:18, col:40> 'String' (CXXTemporary 0x561ff39ebd78)
|               `-CallExpr 0x561ff39ebd40 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x561ff39ebd28 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x561ff39ebc98 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x561ff39e7de0 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x561ff39ebcb8 <col:31> 'const String' lvalue ParmVar 0x561ff39e5aa0 'str' 'const String &'
|                 `-DeclRefExpr 0x561ff39ebcd8 <col:36> 'const String' lvalue ParmVar 0x561ff39e5a28 'anno' 'const String &'
|-CXXMethodDecl 0x561ff39e5ef0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x561ff39e5c70 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x561ff39e5cf0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x561ff39e5dc0 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x561ff39ec0e8 <col:68, line:243:5>
|   `-ReturnStmt 0x561ff39ec0d8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x561ff39ec0c0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x561ff39ec060 <col:9, col:41> 'int'
|         |-MemberExpr 0x561ff39ec030 <col:9> '<bound member function type>' ->xmessage 0x561ff39e5b40
|         | `-CXXThisExpr 0x561ff39ec020 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x561ff39ebef8 <col:18> 'const String' lvalue ParmVar 0x561ff39e5c70 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x561ff39ec0a8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x561ff39ec090 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x561ff39ec000 <col:24, col:40> 'String' (CXXTemporary 0x561ff39ec000)
|               `-CXXMemberCallExpr 0x561ff39ebf98 <col:24, col:40> 'String'
|                 |-MemberExpr 0x561ff39ebf28 <col:24> '<bound member function type>' ->vformat 0x561ff39e70d0
|                 | `-CXXThisExpr 0x561ff39ebf18 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x561ff39ebfc8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x561ff39ebf58 <col:32> 'const char *' lvalue ParmVar 0x561ff39e5cf0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x561ff39ebfe0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x561ff39ebf78 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x561ff39e5dc0 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x561ff39e6190 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x561ff39e5fb8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x561ff39e6030 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x561ff39e60a8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x561ff39ec428 <col:23, line:254:5>
|   `-ReturnStmt 0x561ff39ec418 <line:253:2, col:71>
|     `-ExprWithCleanups 0x561ff39ec400 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x561ff39ec3a0 <col:9, col:71> 'int'
|         |-MemberExpr 0x561ff39ec370 <col:9> '<bound member function type>' ->xmessage 0x561ff39e5b40
|         | `-CXXThisExpr 0x561ff39ec360 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x561ff39ec3e8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x561ff39ec3d0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x561ff39ec320 <col:18, col:65> 'String' (CXXTemporary 0x561ff39ec320)
|         |     `-CallExpr 0x561ff39ec2b8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x561ff39ec2a0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x561ff39ec188 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x561ff39e7de0 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x561ff39ec1a8 <col:31> 'const String' lvalue ParmVar 0x561ff39e6030 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x561ff39ec300 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x561ff39ec2e8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x561ff39ec280 <col:37, col:64> 'String' (CXXTemporary 0x561ff39ec280)
|         |             `-CallExpr 0x561ff39ec250 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x561ff39ec238 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x561ff39ec1c8 <col:37> 'String (const String &)' lvalue CXXMethod 0x561ff39e8438 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x561ff39ec1e8 <col:56> 'const String' lvalue ParmVar 0x561ff39e5fb8 'landmark' 'const String &'
|         `-DeclRefExpr 0x561ff39ec340 <col:68> 'const String' lvalue ParmVar 0x561ff39e60a8 'str' 'const String &'
|-CXXMethodDecl 0x561ff39e6510 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x561ff39e6258 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x561ff39e62d0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x561ff39e6350 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x561ff39e63c8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x561ff39ec6e0 <col:34, line:267:5>
|   `-ReturnStmt 0x561ff39ec6d0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x561ff39ec6b8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x561ff39ec650 <col:9, col:51> 'int'
|         |-MemberExpr 0x561ff39ec620 <col:9> '<bound member function type>' ->xmessage 0x561ff39e6190
|         | `-CXXThisExpr 0x561ff39ec610 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x561ff39ec4c8 <col:18> 'const String' lvalue ParmVar 0x561ff39e6258 'landmark' 'const String &'
|         |-DeclRefExpr 0x561ff39ec4e8 <col:28> 'const String' lvalue ParmVar 0x561ff39e62d0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x561ff39ec6a0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x561ff39ec688 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x561ff39ec5f0 <col:34, col:50> 'String' (CXXTemporary 0x561ff39ec5f0)
|               `-CXXMemberCallExpr 0x561ff39ec588 <col:34, col:50> 'String'
|                 |-MemberExpr 0x561ff39ec518 <col:34> '<bound member function type>' ->vformat 0x561ff39e70d0
|                 | `-CXXThisExpr 0x561ff39ec508 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x561ff39ec5b8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x561ff39ec548 <col:42> 'const char *' lvalue ParmVar 0x561ff39e6350 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x561ff39ec5d0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x561ff39ec568 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x561ff39e63c8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x561ff39e6620 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x561ff39ec760 <col:25, line:288:5>
|   `-ReturnStmt 0x561ff39ec750 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x561ff39ec738 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x561ff39ec708 <col:9> 'const int' lvalue ->_nerrors 0x561ff39e95f8
|         `-CXXThisExpr 0x561ff39ec6f8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x561ff39e6830 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x561ff39e66d8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x561ff39e6758 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x561ff39e6b18 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x561ff39e68f8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x561ff39e6978 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x561ff39e69f0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x561ff39e6cb0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x561ff39e6be8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x561ff39e6ef8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x561ff39e6d70 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x561ff39e6de8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x561ff39ec9c0 <col:58, line:357:5>
|   `-ReturnStmt 0x561ff39ec9b0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x561ff39ec998 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x561ff39ec968 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x561ff39ec950 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x561ff39ec930 <col:9, col:29> 'String' (CXXTemporary 0x561ff39ec930)
|             `-CallExpr 0x561ff39ec8c0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x561ff39ec8a8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x561ff39ec828 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x561ff39e6b18 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x561ff39ec7c8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x561ff39ec8f8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x561ff39ec7e8 <col:21> 'const char *' lvalue ParmVar 0x561ff39e6d70 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x561ff39ec910 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x561ff39ec808 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x561ff39e6de8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x561ff39e70d0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x561ff39e6fc0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x561ff39e7038 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x561ff39e7228 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x561ff39e7198 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x561ff39e73a8 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x561ff39e72e0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x561ff39e7640 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x561ff39e7460 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x561ff39e74e0 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x561ff39e7558 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x561ff39e77a0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x561ff39e7710 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x561ff39ecad8 <col:37, line:441:5>
|   `-IfStmt 0x561ff39ecac0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x561ff39eca48 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x561ff39eca18 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x561ff39ec9d8 <col:6> 'int' lvalue ParmVar 0x561ff39e7710 'level' 'int'
|     | `-ImplicitCastExpr 0x561ff39eca30 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x561ff39ec9f8 <col:15> 'ErrorHandler::Level' EnumConstant 0x561ff39e3600 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x561ff39ecaa8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x561ff39eca78 <col:8> 'int' lvalue ->_nerrors 0x561ff39e95f8
|         `-CXXThisExpr 0x561ff39eca68 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x561ff39e7868 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x561ff39ecb70 <col:26, line:448:5>
|   `-BinaryOperator 0x561ff39ecb50 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x561ff39ecb00 <col:2> 'int' lvalue ->_nerrors 0x561ff39e95f8
|     | `-CXXThisExpr 0x561ff39ecaf0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x561ff39ecb30 <col:13> 'int' 0
|-CXXMethodDecl 0x561ff39e7a30 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x561ff39e7920 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x561ff39e7998 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x561ff39e7de0 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x561ff39e7af0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x561ff39e7b68 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x561ff39e8098 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x561ff39e7ea0 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x561ff39e7f20 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x561ff39e7fa0 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x561ff39e8150 <col:59> 0 0
|-CXXMethodDecl 0x561ff39e82e8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x561ff39e81c8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x561ff39e8248 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x561ff39ed1e0 <col:70, line:534:5>
|   |-DeclStmt 0x561ff39ecce0 <line:528:2, col:20>
|   | |-VarDecl 0x561ff39ecb98 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x561ff39ecc00 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x561ff39ecc38 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x561ff39ecca0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x561ff39ecdb0 <line:529:2, col:23>
|   | `-VarDecl 0x561ff39ecd10 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x561ff39ecd98 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x561ff39ecd78 <col:18> 'const char *' lvalue ParmVar 0x561ff39e81c8 'begin' 'const char *'
|   |-DoStmt 0x561ff39ed178 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x561ff39ed0a8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x561ff39ed090 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x561ff39ed070 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x561ff39ecdc8 <col:6> 'const char *' lvalue Var 0x561ff39ecd10 'x' 'const char *'
|   | |     `-CallExpr 0x561ff39ecfc0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x561ff39ecfa8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x561ff39ecf60 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x561ff39e9ad0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x561ff39ed028 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x561ff39ed010 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x561ff39ece80 <col:20, col:27> 'String' (CXXTemporary 0x561ff39ece80)
|   | |       |     `-CXXTemporaryObjectExpr 0x561ff39ece48 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x561ff39ed040 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x561ff39ecea0 <col:30> 'const char *' lvalue Var 0x561ff39ecd10 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x561ff39ed058 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x561ff39ecec0 <col:33> 'const char *' lvalue ParmVar 0x561ff39e8248 'end' 'const char *'
|   | |       |-UnaryOperator 0x561ff39ecf00 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x561ff39ecee0 <col:39> 'String' lvalue Var 0x561ff39ecb98 'name' 'String'
|   | |       |-UnaryOperator 0x561ff39ecf38 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x561ff39ecf18 <col:46> 'String' lvalue Var 0x561ff39ecc38 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x561ff39ecf50 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x561ff39ed160 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x561ff39ed148 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x561ff39ed128 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x561ff39ed0f8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x561ff3996588
|   |         `-ImplicitCastExpr 0x561ff39ed0e0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x561ff39ed0c0 <col:11> 'String' lvalue Var 0x561ff39ecb98 'name' 'String'
|   `-ReturnStmt 0x561ff39ed1d0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x561ff39ed1b8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x561ff39ed198 <col:9> 'const char *' lvalue Var 0x561ff39ecd10 'x' 'const char *'
|-CXXMethodDecl 0x561ff39e8438 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x561ff39e83a8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x561ff39ed7e8 <col:55, line:550:5>
|   `-IfStmt 0x561ff39ed7c0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x561ff39ed420 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x561ff39ed408 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x561ff39ed3f0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x561ff39ed3d0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x561ff39ed3a0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x561ff3996588
|     | |       `-DeclRefExpr 0x561ff39ed240 <col:6> 'const String' lvalue ParmVar 0x561ff39e83a8 'x' 'const String &'
|     | `-BinaryOperator 0x561ff39ed380 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x561ff39ed350 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x561ff39ed300 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x561ff39ed2e8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x561ff39ed2a0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x561ff39b14d0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x561ff39ed260 <col:11> 'const String' lvalue ParmVar 0x561ff39e83a8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x561ff39ed280 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x561ff39ed368 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x561ff39ed338 <col:19> 'char' 123
|     |-ReturnStmt 0x561ff39ed490 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x561ff39ed460 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x561ff39ed440 <col:13> 'const String' lvalue ParmVar 0x561ff39e83a8 'x' 'const String &'
|     `-IfStmt 0x561ff39ed798 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x561ff39ed528 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x561ff39ed510 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x561ff39ed4f0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x561ff39ed4c0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x561ff3996588
|       |       `-DeclRefExpr 0x561ff39ed4a0 <col:11> 'const String' lvalue ParmVar 0x561ff39e83a8 'x' 'const String &'
|       |-ReturnStmt 0x561ff39ed6b0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x561ff39ed698 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x561ff39ed668 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x561ff39ed650 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x561ff39ed630 <col:13, col:29> 'String' (CXXTemporary 0x561ff39ed630)
|       |         `-CallExpr 0x561ff39ed5e0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x561ff39ed5c8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x561ff39ed540 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x561ff39e7a30 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x561ff39ed610 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x561ff39ed560 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x561ff39ed580 <col:28> 'const String' lvalue ParmVar 0x561ff39e83a8 'x' 'const String &'
|       `-ReturnStmt 0x561ff39ed788 <line:549:6, col:20>
|         `-ExprWithCleanups 0x561ff39ed770 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x561ff39ed740 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x561ff39ed728 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x561ff39ed708 <col:13, col:20> 'String' (CXXTemporary 0x561ff39ed708)
|                 `-CXXTemporaryObjectExpr 0x561ff39ed6d0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x561ff39e8638 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x561ff39e84f0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x561ff39e8568 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x561ff39e9d78 <col:71> 'bool' false
|-CXXRecordDecl 0x561ff39e86e8 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x561ff39e89e8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x561ff39e8980 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x561ff39e8920 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x561ff39e88e0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x561ff3992870 'String'
|       | `-CXXRecord 0x561ff39927e0 'String'
|       |-BuiltinType 0x561ff3755580 'int'
|       `-DecayedType 0x561ff39e5d90 '__va_list_tag *' sugar
|         |-TypedefType 0x561ff39e5d60 'va_list' sugar
|         | |-Typedef 0x561ff39c94e0 'va_list'
|         | `-TypedefType 0x561ff39c9490 '__gnuc_va_list' sugar
|         |   |-Typedef 0x561ff39c4868 '__gnuc_va_list'
|         |   `-TypedefType 0x561ff39c47d0 '__builtin_va_list' sugar
|         |     |-Typedef 0x561ff3796d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x561ff3796ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x561ff37562d0 '__va_list_tag'
|         |         `-CXXRecord 0x561ff3756238 '__va_list_tag'
|         `-PointerType 0x561ff39cf060 '__va_list_tag *'
|           `-RecordType 0x561ff37562d0 '__va_list_tag'
|             `-CXXRecord 0x561ff3756238 '__va_list_tag'
|-EnumDecl 0x561ff39e8a40 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x561ff39e8b40 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561ff39e90a0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff39e8b20 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x561ff39e8b00 <col:16> 'int' 1
| |-EnumConstantDecl 0x561ff39e8bd0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561ff39e90b8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff39e8bb0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x561ff39e8b90 <col:21> 'int' 2
| |-EnumConstantDecl 0x561ff39e8c60 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561ff39e90d0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff39e8c40 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x561ff39e8c20 <col:22> 'int' 4
| |-EnumConstantDecl 0x561ff39e8cf0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561ff39e90e8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff39e8cd0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x561ff39e8cb0 <col:17> 'int' 8
| |-EnumConstantDecl 0x561ff39e8d80 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561ff39e9100 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff39e8d60 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x561ff39e8d40 <col:22> 'int' 16
| |-EnumConstantDecl 0x561ff39e8e10 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561ff39e9118 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff39e8df0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x561ff39e8dd0 <col:19> 'int' 32
| |-EnumConstantDecl 0x561ff39e8ea0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561ff39e9130 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff39e8e80 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x561ff39e8e60 <col:17> 'int' 64
| |-EnumConstantDecl 0x561ff39e8f30 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561ff39e9148 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff39e8f10 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x561ff39e8ef0 <col:14> 'int' 128
| |-EnumConstantDecl 0x561ff39e8fc0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561ff39e9160 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff39e8fa0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x561ff39e8f80 <col:16> 'int' 256
| `-EnumConstantDecl 0x561ff39e9050 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x561ff39e9178 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561ff39e9030 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x561ff39e9010 <col:12> 'int' 1024
|-CXXMethodDecl 0x561ff39e9388 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x561ff39e91a0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x561ff39e9240 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x561ff39e9510 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x561ff39e9448 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x561ff39e95b8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x561ff39e95f8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x561ff39e9658 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x561ff39e96d0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x561ff39e9ad0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x561ff39e9748 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x561ff39e97c8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x561ff39e9848 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x561ff39e98c0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x561ff39e9938 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x561ff39e99b0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x561ff39e9bf8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x561ff39e9bf8
| `-ParmVarDecl 0x561ff39e9d08 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x561ff39f3478 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x561ff39f3478
  `-ParmVarDecl 0x561ff39f3588 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff3dc0c28 prev 0x561ff3c925b8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561ff3dc0d20 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x561ff3dc0db0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x561ff3dc0eb8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x561ff3dc0de8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x561ff3dc2290 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x561ff3dc2270 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x561ff3dc1e08 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x561ff3dc2320 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x561ff3dc22e0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x561ff3dc0de8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x561ff3dc1e70 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x561ff3dc23a0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x561ff3dc2360 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x561ff3dc1ed0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x561ff3dc23e0 <col:54> 'bool' false
| `-CompoundStmt 0x561ff3dc24e8 <col:61, line:38:5>
|   `-BinaryOperator 0x561ff3dc24c8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x561ff3dc2460 <col:9> 'const Element *' lvalue ->_context 0x561ff3dc1da8
|     | `-CXXThisExpr 0x561ff3dc2450 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x561ff3dc24b0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x561ff3dc2490 <col:20> 'int' 0
|-CXXConstructorDecl 0x561ff3dc10c8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x561ff3dc0f78 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x561ff3dc0ff0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x561ff3dc22c8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x561ff3dc22a8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x561ff3dc1da8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x561ff3dc2540 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x561ff3dc2500 <col:20> 'const Element *' lvalue ParmVar 0x561ff3dc0f78 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x561ff3dc1e08 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x561ff3dc25c0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x561ff3dc2580 <col:36> 'ErrorHandler *' lvalue ParmVar 0x561ff3dc0ff0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x561ff3dc1e70 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x561ff3dc2640 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x561ff3dc2600 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x561ff3dc1ed0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x561ff3dc2680 <col:73> 'bool' false
| `-CompoundStmt 0x561ff3dc26f8 <col:80, line:46:5>
|-CXXMethodDecl 0x561ff3dc11f8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x561ff3dc2770 <col:36, line:51:5>
|   `-ReturnStmt 0x561ff3dc2760 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x561ff3dc2748 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x561ff3dc2718 <col:16> 'const Element *const' lvalue ->_context 0x561ff3dc1da8
|         `-CXXThisExpr 0x561ff3dc2708 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x561ff3dc12e8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x561ff3dc27f0 <col:32, line:57:5>
|   `-ReturnStmt 0x561ff3dc27e0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x561ff3dc27c8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x561ff3dc2798 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x561ff3dc1e08
|         `-CXXThisExpr 0x561ff3dc2788 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x561ff3dc13a8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x561ff3dc1530 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x561ff3dc1460 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x561ff3dc1680 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x561ff3dc15f0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x561ff3dc17d0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x561ff3dc1740 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x561ff3dc19d8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x561ff3dc1888 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x561ff3dc1900 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x561ff3dc1cb8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x561ff3dc1a98 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x561ff3dc1b18 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x561ff3dc1b90 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x561ff3dc1d70 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x561ff3dc1da8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x561ff3dc1e08 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x561ff3dc1e70 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x561ff3dc1ed0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x561ff3dc1f20 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x561ff3dc1f20
| `-ParmVarDecl 0x561ff3dc2038 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x561ff3dc20d8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x561ff3dc20d8
| `-ParmVarDecl 0x561ff3dc21e8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x561ff3e335d8 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x561ff3df1f80 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x561ff3df2158 prev 0x561ff3df1f80 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x561ff3df21e8 <col:46, col:52> col:46 public
|-TypedefDecl 0x561ff3df2210 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x561ff3755580 'int'
|-TypedefDecl 0x561ff3df3de0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x561ff3df3d90 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x561ff3df26c0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x561ff3df25c0 'type'
|     `-TemplateSpecializationType 0x561ff3df2550 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x561ff3df2430 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x561ff3df2410 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x561ff3df23f0 <col:24> 'unsigned long' 4
|       `-RecordType 0x561ff3df2530 'char_array<4>'
|         `-ClassTemplateSpecialization 0x561ff3df2450 'char_array'
|-TypedefDecl 0x561ff3df3e98 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x561ff3df3e60 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x561ff3df3e40 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x561ff3df3de0 'type'
|     `-ElaboratedType 0x561ff3df3d90 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x561ff3df26c0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x561ff3df25c0 'type'
|         `-TemplateSpecializationType 0x561ff3df2550 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x561ff3df2430 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x561ff3df2410 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x561ff3df23f0 <col:24> 'unsigned long' 4
|           `-RecordType 0x561ff3df2530 'char_array<4>'
|             `-ClassTemplateSpecialization 0x561ff3df2450 'char_array'
|-CXXMethodDecl 0x561ff3df4018 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x561ff3df3f28 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x561ff3df4108 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x561ff3df41e8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x561ff3df44b8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x561ff3df43c0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x561ff3df46f8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x561ff3df4570 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561ff3df45e8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x561ff3df48c8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x561ff3df47b8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561ff3df4830 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x561ff3df4a28 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x561ff3df4af8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x561ff3df4d48 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x561ff3df4bb8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x561ff3df4c30 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x561ff3df4fa8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x561ff3df4e18 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x561ff3df4e90 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x561ff3df5168 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x561ff3df5078 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x561ff3df5328 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x561ff3df5230 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x561ff3df53e0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x561ff3df5490 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x561ff3df56c8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x561ff3df5540 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561ff3df55b8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x561ff3df5968 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x561ff3df5870 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x561ff3df5a30 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x561ff3df5a80 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x561ff3df5ad0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.10 = type { %struct.char_array.11*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.10 = type { %struct.char_array.11*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x561ff3de5428 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x561ff3de5638 prev 0x561ff3de5428 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x561ff3de6780 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x561ff3de6730 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x561ff3de6710 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x561ff3de65c0 'type'
|     `-SubstTemplateTypeParmType 0x561ff3de63e0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x561ff3a79110 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3a790b8 'T'
|       `-RecordType 0x561ff3de5f30 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x561ff3de5e48 'sized_array_memory'
|-FieldDecl 0x561ff3df5b20 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x561ff3df5b70 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x561ff3df5ba8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x561ff3de56d0 'int' sugar
|   |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x561ff3aadb40 'T'
|   `-BuiltinType 0x561ff3755580 'int'
|-TypedefDecl 0x561ff3df5c38 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x561ff3df5c00 'int &'
|   `-SubstTemplateTypeParmType 0x561ff3de56d0 'int' sugar
|     |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561ff3aadb40 'T'
|     `-BuiltinType 0x561ff3755580 'int'
|-TypedefDecl 0x561ff3df5cf8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x561ff3df5cc0 'const int &'
|   `-QualType 0x561ff3de56d1 'const int' const
|     `-SubstTemplateTypeParmType 0x561ff3de56d0 'int' sugar
|       |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3aadb40 'T'
|       `-BuiltinType 0x561ff3755580 'int'
|-TypedefDecl 0x561ff3df5d88 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x561ff3df5d50 'int *'
|   `-SubstTemplateTypeParmType 0x561ff3de56d0 'int' sugar
|     |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561ff3aadb40 'T'
|     `-BuiltinType 0x561ff3755580 'int'
|-TypedefDecl 0x561ff3df5e18 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x561ff3df5de0 'const int *'
|   `-QualType 0x561ff3de56d1 'const int' const
|     `-SubstTemplateTypeParmType 0x561ff3de56d0 'int' sugar
|       |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3aadb40 'T'
|       `-BuiltinType 0x561ff3755580 'int'
|-TypedefDecl 0x561ff3df6a00 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x561ff3df69b0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x561ff3df6990 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x561ff3df6920 'type'
|     `-SubstTemplateTypeParmType 0x561ff3df66e0 'int' sugar
|       |-TemplateTypeParmType 0x561ff3a81f30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3a81ee0 'T'
|       `-BuiltinType 0x561ff3755580 'int'
|-TypedefDecl 0x561ff3df6a68 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x561ff3df5cc0 'const int &'
|   `-QualType 0x561ff3de56d1 'const int' const
|     `-SubstTemplateTypeParmType 0x561ff3de56d0 'int' sugar
|       |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3aadb40 'T'
|       `-BuiltinType 0x561ff3755580 'int'
|-TypedefDecl 0x561ff3df6ac0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x561ff3755580 'int'
|-TypedefDecl 0x561ff3df6b28 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x561ff3df5d50 'int *'
|   `-SubstTemplateTypeParmType 0x561ff3de56d0 'int' sugar
|     |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561ff3aadb40 'T'
|     `-BuiltinType 0x561ff3755580 'int'
|-TypedefDecl 0x561ff3df6b90 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x561ff3df5de0 'const int *'
|   `-QualType 0x561ff3de56d1 'const int' const
|     `-SubstTemplateTypeParmType 0x561ff3de56d0 'int' sugar
|       |-TemplateTypeParmType 0x561ff3aadb90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561ff3aadb40 'T'
|       `-BuiltinType 0x561ff3755580 'int'
|-EnumDecl 0x561ff3df6be8 <line:134:5> col:5
| `-EnumConstantDecl 0x561ff3df6ce0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x561ff3df6cc0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x561ff3aaed58 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x561ff3aaed30 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x561ff3aaed10 <col:40> 'int' 1
|-CXXConstructorDecl 0x561ff3df6d68 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x561ff3df6fb8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x561ff3df6e20 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561ff3df6ec0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x561ff3df7278 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x561ff3df7160 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x561ff3df7538 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x561ff3df7420 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x561ff3df7880 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x561ff3df7760 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x561ff3df7b90 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x561ff3df7a70 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x561ff3df7e80 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x561ff3df7cc8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561ff3df7d40 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x561ff3df7fa8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x561ff3df8088 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3df80e0 <col:30> Inherited
|-CXXMethodDecl 0x561ff3df8128 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x561ff3df81d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3df8230 <col:30> Inherited
|-CXXMethodDecl 0x561ff3df82f8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x561ff3df83a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3df8400 <col:30> Inherited
|-CXXMethodDecl 0x561ff3df8448 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x561ff3df84f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3df8550 <col:30> Inherited
|-CXXMethodDecl 0x561ff3df8598 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x561ff3df8648 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3df86a0 <col:30> Inherited
|-CXXMethodDecl 0x561ff3df86e8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x561ff3df8798 <col:20> Inherited
| `-OptimizeNoneAttr 0x561ff3df87f0 <col:30> Inherited
|-CXXMethodDecl 0x561ff3df8818 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x561ff3df88c8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x561ff3df8978 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x561ff3df8b38 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x561ff3df8a28 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561ff3df8aa0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x561ff3df8c88 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x561ff3df8bf8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3df8e38 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x561ff3df8d40 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x561ff3df8ef0 <col:20>
| `-OptimizeNoneAttr 0x561ff3df8f48 <col:30>
|-CXXMethodDecl 0x561ff3df9068 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x561ff3df8f70 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x561ff3df9120 <col:20>
| `-OptimizeNoneAttr 0x561ff3df9178 <col:30>
|-CXXMethodDecl 0x561ff3df9230 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x561ff3df91a0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3df9378 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x561ff3df92e8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3df94a8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x561ff3df95d8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x561ff3df96a8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x561ff3df9778 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x561ff3df98b8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x561ff3df9828 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3df9a00 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x561ff3df9970 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561ff3df9b48 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x561ff3df9ab8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x561ff3df9c00 <col:48> Inherited "" ""
|-CXXMethodDecl 0x561ff3df9d00 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x561ff3df9c70 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x561ff3df9db8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x561ff3df9e78 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x561ff3dfb520 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x561ff3dfb6a8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x561ff3dfb5e0 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x561ff3dfbe68 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x561ff3dfb760 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x561ff3dfbdc8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x561ff3dfbcc8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x561ff3dfbf48 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x561ff3dfc098 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x561ff3dfc008 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x561ff3dfc150 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x561ff3dfc398 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x561ff3dfc210 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x561ff3dfc288 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x561ff3dfc558 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x561ff3dfc468 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x561ff3dfc7a8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x561ff3dfc620 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x561ff3dfc698 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x561ff3dfc868 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x561ff3dfcac8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x561ff3dfc9d0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x561ff3dfcb98 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.9 = type { %class.vector_memory.10 }
  NonVirtualBaseLLVMType:%class.Vector.9 = type { %class.vector_memory.10 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff3de3598 prev 0x561ff3dc9228 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x561ff3de3690 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x561ff3de3780 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x561ff3e0e9f0 <col:16, line:828:9>
|-CXXDestructorDecl 0x561ff3de3870 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x561ff3e0ea00 <col:25, line:830:9>
|-CXXMethodDecl 0x561ff3de3970 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x561ff3de3a20 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x561ff3de3ac8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x561ff3de3ac8
| `-ParmVarDecl 0x561ff3de3bd8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x561ff3de4398 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x561ff3de4398
  `-ParmVarDecl 0x561ff3de44a8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff3dc9038 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x561ff3dc9198 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x561ff3dc9228 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x561ff3dc92e0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x561ff3dc93e8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x561ff3dc9318 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x561ff3dfe158 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x561ff3dfe138 <col:31> 'int' 0
|-CXXConstructorDecl 0x561ff3dc9708 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x561ff3dc9580 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x561ff3dc95f8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x561ff3dfe190 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x561ff3dfe170 <col:59> 'int' 0
|-CXXConstructorDecl 0x561ff3dc98e0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x561ff3dc97d0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x561ff3dc9848 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x561ff3dfe1c8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x561ff3dfe1a8 <col:55> 'int' 0
|-CXXConstructorDecl 0x561ff3dc9c98 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x561ff3dc9a80 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x561ff3dc9af8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x561ff3dc9b70 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x561ff3dfe200 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x561ff3dfe1e0 <col:31> 'int' 0
|-CXXConstructorDecl 0x561ff3dc9e58 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x561ff3dc9d98 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x561ff3dc9f50 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x561ff3dca138 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x561ff3dca040 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x561ff3dca228 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x561ff3dfe5b0 <col:24, line:291:5>
|   `-ReturnStmt 0x561ff3dfe5a0 <line:290:9, col:79>
|     `-BinaryOperator 0x561ff3dfe580 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x561ff3dfe458 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x561ff3dfe3b0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x561ff3dfe390 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x561ff3dfe288 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x561ff3dfe270 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x561ff3dfe258 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x561ff3dfe228 <col:18> 'Vector<String> *const' lvalue ->_conf 0x561ff3de53c0
|       | |   |       `-CXXThisExpr 0x561ff3dfe218 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x561ff3dfe378 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x561ff3dfe360 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x561ff3dfe328 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x561ff3dfe2f8 <col:28, col:35> '<bound member function type>' ->size 0x561ff3daf6c8
|       | |           `-ImplicitCastExpr 0x561ff3dfe348 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x561ff3dfe2e0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x561ff3dfe2b0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x561ff3de53c0
|       | |                 `-CXXThisExpr 0x561ff3dfe2a0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x561ff3dfe440 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x561ff3dfe428 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x561ff3dfe410 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x561ff3dfe3e0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x561ff3dfcce0
|       |         `-CXXThisExpr 0x561ff3dfe3d0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x561ff3dfe560 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x561ff3dfe548 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x561ff3dfe530 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x561ff3dfe4f0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x561ff3dfe4d8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x561ff3dfe488 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x561ff3dfcd90
|         |     |   `-CXXThisExpr 0x561ff3dfe478 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x561ff3dfe4b8 <col:73> 'int' 0
|         `-IntegerLiteral 0x561ff3dfe510 <col:79> 'int' 0
|-CXXMethodDecl 0x561ff3dca2e8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x561ff3dfe788 <col:32, line:296:5>
|   `-ReturnStmt 0x561ff3dfe778 <line:295:9, col:49>
|     `-BinaryOperator 0x561ff3dfe758 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x561ff3dfe638 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x561ff3dfe620 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x561ff3dfe608 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x561ff3dfe5d8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x561ff3dfcce0
|       |       `-CXXThisExpr 0x561ff3dfe5c8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x561ff3dfe738 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x561ff3dfe720 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x561ff3dfe708 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x561ff3dfe6c8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x561ff3dfe6b0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x561ff3dfe660 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x561ff3dfcd90
|         |     |   `-CXXThisExpr 0x561ff3dfe650 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x561ff3dfe690 <col:43> 'int' 0
|         `-IntegerLiteral 0x561ff3dfe6e8 <col:49> 'int' 0
|-CXXMethodDecl 0x561ff3dca3d8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x561ff3dfe998 <col:19, line:306:5>
|   |-IfStmt 0x561ff3dfe8b8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x561ff3dfe7f8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x561ff3dfe7e0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x561ff3dfe7b0 <col:13> 'Vector<String> *' lvalue ->_conf 0x561ff3de53c0
|   | |     `-CXXThisExpr 0x561ff3dfe7a0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x561ff3dfe898 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x561ff3dfe868 <col:13, col:20> '<bound member function type>' ->clear 0x561ff3db3108
|   |     `-ImplicitCastExpr 0x561ff3dfe850 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x561ff3dfe820 <col:13> 'Vector<String> *' lvalue ->_conf 0x561ff3de53c0
|   |         `-CXXThisExpr 0x561ff3dfe810 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x561ff3dfe940 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x561ff3dfe910 <col:9, col:16> '<bound member function type>' .clear 0x561ff3dfc868
|   |   `-MemberExpr 0x561ff3dfe8e0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x561ff3dfcc80
|   |     `-CXXThisExpr 0x561ff3dfe8d0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x561ff3dfe988 <line:305:9, col:17>
|     `-UnaryOperator 0x561ff3dfe970 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561ff3dfe960 <col:17> 'Args *' this
|-CXXMethodDecl 0x561ff3dca658 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x561ff3dca560 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x561ff3dca7d8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x561ff3dca710 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x561ff3dcab58 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x561ff3dca880 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x561ff3dcaab8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x561ff3dca928 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x561ff3dca9a0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x561ff3dfecb8 <col:67, line:327:5>
|     |-WhileStmt 0x561ff3dfec68 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x561ff3dfea80 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x561ff3dfea00 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x561ff3c8aa78 0x561ff3adcb88 0x561ff3adc860 0x561ff3a6d730 0x561ff39c06f0 0x561ff39c03a0 0x561ff39bfc90 0x561ff3980c60
|     | | |-DeclRefExpr 0x561ff3dfe9c0 <col:16> 'Iter' lvalue ParmVar 0x561ff3dca928 'begin' 'Iter'
|     | | `-DeclRefExpr 0x561ff3dfe9e0 <col:25> 'Iter' lvalue ParmVar 0x561ff3dca9a0 'end' 'Iter'
|     | `-CompoundStmt 0x561ff3dfec48 <col:30, line:325:9>
|     |   |-CallExpr 0x561ff3dfebe8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x561ff3dfeac8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x561ff3dfebb8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x561ff3dfeb48 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561ff3c8fc20 0x561ff3c8f798 0x561ff3c8f3c8 0x561ff3c8efe8 0x561ff3c8ec08 0x561ff3c8e838
|     |   |   `-DeclRefExpr 0x561ff3dfeb28 <col:24> 'Iter' lvalue ParmVar 0x561ff3dca928 'begin' 'Iter'
|     |   `-UnaryOperator 0x561ff3dfec30 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x561ff3dfec10 <col:15> 'Iter' lvalue ParmVar 0x561ff3dca928 'begin' 'Iter'
|     `-ReturnStmt 0x561ff3dfeca8 <line:326:9, col:17>
|       `-UnaryOperator 0x561ff3dfec90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561ff3dfec80 <col:17> 'Args *' this
|-CXXMethodDecl 0x561ff3dcac60 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x561ff3dcabd0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x561ff3dcada8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x561ff3dcad18 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x561ff3dcae70 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x561ff3dfed98 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x561ff3dfed38 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x561ff3dfece8 <col:9> '<bound member function type>' ->reset_from 0x561ff3dfd108
|   | | `-CXXThisExpr 0x561ff3dfecd8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x561ff3dfed18 <col:20> 'int' 0
|   `-ReturnStmt 0x561ff3dfed88 <line:352:9, col:17>
|     `-UnaryOperator 0x561ff3dfed70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561ff3dfed60 <col:17> 'Args *' this
|-VarDecl 0x561ff3dcaf28 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x561ff3dcaf90 <col:38> 'int' 1
|-VarDecl 0x561ff3dcb020 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x561ff3dcb088 <col:39> 'int' 2
|-VarDecl 0x561ff3dcb118 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x561ff3dcb180 <col:39> 'int' 4
|-VarDecl 0x561ff3dcb210 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x561ff3dcb278 <col:39> 'int' 8
|-FunctionTemplateDecl 0x561ff3dcb5f8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x561ff3dcb2f0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x561ff3dcb558 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x561ff3dcb3a0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dcb448 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x561ff3dfeef0 <col:43, line:371:5>
|     `-ReturnStmt 0x561ff3dfeee0 <line:370:9, col:34>
|       `-CallExpr 0x561ff3dfeea8 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3dfedc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3dfee48 <col:21> 'const char *' lvalue ParmVar 0x561ff3dcb3a0 'keyword' 'const char *'
|         |-IntegerLiteral 0x561ff3dfee68 <col:30> 'int' 0
|         `-DeclRefExpr 0x561ff3dfee88 <col:33> 'T' lvalue ParmVar 0x561ff3dcb448 'x' 'T &'
|-FunctionTemplateDecl 0x561ff3dcb928 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x561ff3dcb660 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x561ff3dcb888 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x561ff3dcb710 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dcb7b8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x561ff3dff040 <col:45, line:375:5>
|     `-ReturnStmt 0x561ff3dff030 <line:374:9, col:42>
|       `-CallExpr 0x561ff3dfeff8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3dfef18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3dfef98 <col:21> 'const char *' lvalue ParmVar 0x561ff3dcb710 'keyword' 'const char *'
|         |-DeclRefExpr 0x561ff3dfefb8 <col:30> 'const int' lvalue Var 0x561ff3dcaf28 'mandatory' 'const int'
|         `-DeclRefExpr 0x561ff3dfefd8 <col:41> 'T' lvalue ParmVar 0x561ff3dcb7b8 'x' 'T &'
|-FunctionTemplateDecl 0x561ff3dcbc58 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x561ff3dcb990 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x561ff3dcbbb8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x561ff3dcba40 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x561ff3dcbae8 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x561ff3dff190 <col:45, line:379:5>
| |   `-ReturnStmt 0x561ff3dff180 <line:378:9, col:43>
| |     `-CallExpr 0x561ff3dff148 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x561ff3dff068 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x561ff3dff0e8 <col:21> 'const char *' lvalue ParmVar 0x561ff3dcba40 'keyword' 'const char *'
| |       |-DeclRefExpr 0x561ff3dff108 <col:30> 'const int' lvalue Var 0x561ff3dcb020 'positional' 'const int'
| |       `-DeclRefExpr 0x561ff3dff128 <col:42> 'T' lvalue ParmVar 0x561ff3dcbae8 'x' 'T &'
| `-CXXMethodDecl 0x561ff3e33a68 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x561ff3e33888 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x561ff3e33958 <col:39, col:42> col:42 x 'int &'
|-FunctionTemplateDecl 0x561ff3dcbf88 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x561ff3dcbcc0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x561ff3dcbee8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x561ff3dcbd70 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dcbe18 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x561ff3dff390 <col:46, line:383:5>
|     `-ReturnStmt 0x561ff3dff380 <line:382:9, col:55>
|       `-CallExpr 0x561ff3dff348 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3dff1b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3dff238 <col:21> 'const char *' lvalue ParmVar 0x561ff3dcbd70 'keyword' 'const char *'
|         |-BinaryOperator 0x561ff3dff308 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x561ff3dff2b8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x561ff3dff298 <col:30> 'const int' lvalue Var 0x561ff3dcaf28 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x561ff3dff2f0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x561ff3dff2d0 <col:42> 'const int' lvalue Var 0x561ff3dcb020 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x561ff3dff328 <col:54> 'T' lvalue ParmVar 0x561ff3dcbe18 'x' 'T &'
|-FunctionTemplateDecl 0x561ff3dcc388 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x561ff3dcbff0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x561ff3dcc2e8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x561ff3dcc0a0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dcc120 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x561ff3dcc1c8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x561ff3dff4d0 <col:54, line:388:5>
|     |-CallExpr 0x561ff3dff458 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561ff3dff3a8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x561ff3dff3e8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x561ff3dff3f8 <col:30> 'const char *' lvalue ParmVar 0x561ff3dcc0a0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x561ff3dff418 <col:39> 'int' lvalue ParmVar 0x561ff3dcc120 'flags' 'int'
|     | `-DeclRefExpr 0x561ff3dff438 <col:46> 'T' lvalue ParmVar 0x561ff3dcc1c8 'x' 'T &'
|     `-ReturnStmt 0x561ff3dff4c0 <line:387:9, col:17>
|       `-UnaryOperator 0x561ff3dff4a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561ff3dff498 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561ff3dcc838 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x561ff3dcc3f8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x561ff3dcc478 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x561ff3dcc798 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x561ff3dcc538 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dcc5d8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x561ff3dcc678 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x561ff3dff640 <col:74, line:403:5>
|     `-ReturnStmt 0x561ff3dff630 <line:402:9, col:56>
|       `-CallExpr 0x561ff3dff5f0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3dff500 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3dff570 <col:28> 'const char *' lvalue ParmVar 0x561ff3dcc538 'keyword' 'const char *'
|         |-IntegerLiteral 0x561ff3dff590 <col:37> 'int' 0
|         |-DeclRefExpr 0x561ff3dff5b0 <col:40> 'T' lvalue ParmVar 0x561ff3dcc5d8 'x' 'T &'
|         `-DeclRefExpr 0x561ff3dff5d0 <col:43> 'const V' lvalue ParmVar 0x561ff3dcc678 'default_value' 'const V &'
|-FunctionTemplateDecl 0x561ff3dccca8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x561ff3dcc8a8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x561ff3dcc928 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x561ff3dccc08 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x561ff3dcc9e8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dcca88 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x561ff3dccb28 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x561ff3dff7a8 <col:76, line:407:5>
|     `-ReturnStmt 0x561ff3dff798 <line:406:9, col:65>
|       `-CallExpr 0x561ff3dff758 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3dff668 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3dff6d8 <col:28> 'const char *' lvalue ParmVar 0x561ff3dcc9e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x561ff3dff6f8 <col:37> 'const int' lvalue Var 0x561ff3dcb020 'positional' 'const int'
|         |-DeclRefExpr 0x561ff3dff718 <col:49> 'T' lvalue ParmVar 0x561ff3dcca88 'x' 'T &'
|         `-DeclRefExpr 0x561ff3dff738 <col:52> 'const V' lvalue ParmVar 0x561ff3dccb28 'default_value' 'const V &'
|-FunctionTemplateDecl 0x561ff3dcd1f8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x561ff3dccd18 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x561ff3dccd98 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x561ff3dcd158 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x561ff3dcce58 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dcced8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x561ff3dccf78 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x561ff3dcd018 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x561ff3dff910 <col:85, line:412:5>
|     |-CallExpr 0x561ff3dff890 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561ff3dff7c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x561ff3dff800 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x561ff3dff810 <col:37> 'const char *' lvalue ParmVar 0x561ff3dcce58 'keyword' 'const char *'
|     | |-DeclRefExpr 0x561ff3dff830 <col:46> 'int' lvalue ParmVar 0x561ff3dcced8 'flags' 'int'
|     | |-DeclRefExpr 0x561ff3dff850 <col:53> 'T' lvalue ParmVar 0x561ff3dccf78 'x' 'T &'
|     | `-DeclRefExpr 0x561ff3dff870 <col:56> 'const V' lvalue ParmVar 0x561ff3dcd018 'default_value' 'const V &'
|     `-ReturnStmt 0x561ff3dff900 <line:411:9, col:17>
|       `-UnaryOperator 0x561ff3dff8e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561ff3dff8d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561ff3dcd688 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x561ff3dcd270 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3dcd2e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561ff3dcd5e8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561ff3dcd3a8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dcd420 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3dcd4c8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x561ff3dffa90 <col:53, line:425:5>
|     `-ReturnStmt 0x561ff3dffa80 <line:424:9, col:42>
|       `-CallExpr 0x561ff3dffa40 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3dff940 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3dff9c0 <col:21> 'const char *' lvalue ParmVar 0x561ff3dcd3a8 'keyword' 'const char *'
|         |-IntegerLiteral 0x561ff3dff9e0 <col:30> 'int' 0
|         |-DeclRefExpr 0x561ff3dffa00 <col:33> 'P' lvalue ParmVar 0x561ff3dcd420 'parser' 'P'
|         `-DeclRefExpr 0x561ff3dffa20 <col:41> 'T' lvalue ParmVar 0x561ff3dcd4c8 'x' 'T &'
|-FunctionTemplateDecl 0x561ff3dd1fd8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x561ff3dcd6f8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3dd1c78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561ff3dd1f38 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561ff3dd1d38 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd1db0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3dd1e58 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x561ff3dffc08 <col:55, line:429:5>
|     `-ReturnStmt 0x561ff3dffbf8 <line:428:9, col:50>
|       `-CallExpr 0x561ff3dffbb8 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3dffab8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3dffb38 <col:21> 'const char *' lvalue ParmVar 0x561ff3dd1d38 'keyword' 'const char *'
|         |-DeclRefExpr 0x561ff3dffb58 <col:30> 'const int' lvalue Var 0x561ff3dcaf28 'mandatory' 'const int'
|         |-DeclRefExpr 0x561ff3dffb78 <col:41> 'P' lvalue ParmVar 0x561ff3dd1db0 'parser' 'P'
|         `-DeclRefExpr 0x561ff3dffb98 <col:49> 'T' lvalue ParmVar 0x561ff3dd1e58 'x' 'T &'
|-FunctionTemplateDecl 0x561ff3dd2428 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x561ff3dd2048 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3dd20c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561ff3dd2388 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561ff3dd2188 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd2200 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3dd22a8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x561ff3dffd80 <col:55, line:433:5>
|     `-ReturnStmt 0x561ff3dffd70 <line:432:9, col:51>
|       `-CallExpr 0x561ff3dffd30 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3dffc30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3dffcb0 <col:21> 'const char *' lvalue ParmVar 0x561ff3dd2188 'keyword' 'const char *'
|         |-DeclRefExpr 0x561ff3dffcd0 <col:30> 'const int' lvalue Var 0x561ff3dcb020 'positional' 'const int'
|         |-DeclRefExpr 0x561ff3dffcf0 <col:42> 'P' lvalue ParmVar 0x561ff3dd2200 'parser' 'P'
|         `-DeclRefExpr 0x561ff3dffd10 <col:50> 'T' lvalue ParmVar 0x561ff3dd22a8 'x' 'T &'
|-FunctionTemplateDecl 0x561ff3dd2878 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x561ff3dd2498 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3dd2518 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561ff3dd27d8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561ff3dd25d8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd2650 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3dd26f8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x561ff3dfffa8 <col:56, line:437:5>
|     `-ReturnStmt 0x561ff3dfff98 <line:436:9, col:63>
|       `-CallExpr 0x561ff3dfff58 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3dffda8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3dffe28 <col:21> 'const char *' lvalue ParmVar 0x561ff3dd25d8 'keyword' 'const char *'
|         |-BinaryOperator 0x561ff3dffef8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x561ff3dffea8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x561ff3dffe88 <col:30> 'const int' lvalue Var 0x561ff3dcaf28 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x561ff3dffee0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x561ff3dffec0 <col:42> 'const int' lvalue Var 0x561ff3dcb020 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x561ff3dfff18 <col:54> 'P' lvalue ParmVar 0x561ff3dd2650 'parser' 'P'
|         `-DeclRefExpr 0x561ff3dfff38 <col:62> 'T' lvalue ParmVar 0x561ff3dd26f8 'x' 'T &'
|-FunctionTemplateDecl 0x561ff3dd2da8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x561ff3dd28e8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3dd2968 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561ff3dd2d08 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x561ff3dd2a28 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd2aa8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x561ff3dd2b20 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3dd2bc8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x561ff3e00110 <col:64, line:442:5>
|     |-CallExpr 0x561ff3e00090 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561ff3dfffc0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x561ff3e00000 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x561ff3e00010 <col:30> 'const char *' lvalue ParmVar 0x561ff3dd2a28 'keyword' 'const char *'
|     | |-DeclRefExpr 0x561ff3e00030 <col:39> 'int' lvalue ParmVar 0x561ff3dd2aa8 'flags' 'int'
|     | |-DeclRefExpr 0x561ff3e00050 <col:46> 'P' lvalue ParmVar 0x561ff3dd2b20 'parser' 'P'
|     | `-DeclRefExpr 0x561ff3e00070 <col:54> 'T' lvalue ParmVar 0x561ff3dd2bc8 'x' 'T &'
|     `-ReturnStmt 0x561ff3e00100 <line:441:9, col:17>
|       `-UnaryOperator 0x561ff3e000e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561ff3e000d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561ff3dd33a8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x561ff3dd2e20 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3dd2e98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x561ff3dd2f18 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x561ff3dd3308 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x561ff3dd2fe0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd3058 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3dd30f8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x561ff3dd31c8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x561ff3e002a8 <col:84, line:458:5>
|     `-ReturnStmt 0x561ff3e00298 <line:457:9, col:64>
|       `-CallExpr 0x561ff3e00250 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3e00140 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3e001b0 <col:28> 'const char *' lvalue ParmVar 0x561ff3dd2fe0 'keyword' 'const char *'
|         |-IntegerLiteral 0x561ff3e001d0 <col:37> 'int' 0
|         |-DeclRefExpr 0x561ff3e001f0 <col:40> 'P' lvalue ParmVar 0x561ff3dd3058 'parser' 'P'
|         |-DeclRefExpr 0x561ff3e00210 <col:48> 'T' lvalue ParmVar 0x561ff3dd30f8 'x' 'T &'
|         `-DeclRefExpr 0x561ff3e00230 <col:51> 'const V' lvalue ParmVar 0x561ff3dd31c8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x561ff3dd3928 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x561ff3dd3420 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3dd3498 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x561ff3dd3518 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x561ff3dd3888 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x561ff3dd35e0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd3658 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3dd36f8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x561ff3dd3798 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x561ff3e00438 <col:86, line:462:5>
|     `-ReturnStmt 0x561ff3e00428 <line:461:9, col:73>
|       `-CallExpr 0x561ff3e003e0 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3e002d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3e00340 <col:28> 'const char *' lvalue ParmVar 0x561ff3dd35e0 'keyword' 'const char *'
|         |-DeclRefExpr 0x561ff3e00360 <col:37> 'const int' lvalue Var 0x561ff3dcb020 'positional' 'const int'
|         |-DeclRefExpr 0x561ff3e00380 <col:49> 'P' lvalue ParmVar 0x561ff3dd3658 'parser' 'P'
|         |-DeclRefExpr 0x561ff3e003a0 <col:57> 'T' lvalue ParmVar 0x561ff3dd36f8 'x' 'T &'
|         `-DeclRefExpr 0x561ff3e003c0 <col:60> 'const V' lvalue ParmVar 0x561ff3dd3798 'default_value' 'const V &'
|-FunctionTemplateDecl 0x561ff3dd3f88 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x561ff3dd39a0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3dd3a18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x561ff3dd3a98 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x561ff3dd3ee8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x561ff3dd3b60 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd3be0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x561ff3dd3c58 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3dd3cf8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x561ff3dd3d98 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x561ff3e005c8 <col:95, line:467:5>
|     |-CallExpr 0x561ff3e00540 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561ff3e00450 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x561ff3e00490 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x561ff3e004a0 <col:37> 'const char *' lvalue ParmVar 0x561ff3dd3b60 'keyword' 'const char *'
|     | |-DeclRefExpr 0x561ff3e004c0 <col:46> 'int' lvalue ParmVar 0x561ff3dd3be0 'flags' 'int'
|     | |-DeclRefExpr 0x561ff3e004e0 <col:53> 'P' lvalue ParmVar 0x561ff3dd3c58 'parser' 'P'
|     | |-DeclRefExpr 0x561ff3e00500 <col:61> 'T' lvalue ParmVar 0x561ff3dd3cf8 'x' 'T &'
|     | `-DeclRefExpr 0x561ff3e00520 <col:64> 'const V' lvalue ParmVar 0x561ff3dd3d98 'default_value' 'const V &'
|     `-ReturnStmt 0x561ff3e005b8 <line:466:9, col:17>
|       `-UnaryOperator 0x561ff3e005a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561ff3e00590 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561ff3dd4568 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x561ff3dd4008 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3dd4088 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x561ff3dd4108 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x561ff3dd44c8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x561ff3dd41d0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd4248 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3dd42e8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x561ff3dd4388 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x561ff3e00770 <col:63, line:481:5>
|     `-ReturnStmt 0x561ff3e00760 <line:480:9, col:47>
|       `-CallExpr 0x561ff3e00718 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3e005f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3e00678 <col:21> 'const char *' lvalue ParmVar 0x561ff3dd41d0 'keyword' 'const char *'
|         |-IntegerLiteral 0x561ff3e00698 <col:30> 'int' 0
|         |-DeclRefExpr 0x561ff3e006b8 <col:33> 'P' lvalue ParmVar 0x561ff3dd4248 'parser' 'P'
|         |-DeclRefExpr 0x561ff3e006d8 <col:41> 'T1' lvalue ParmVar 0x561ff3dd42e8 'x1' 'T1 &'
|         `-DeclRefExpr 0x561ff3e006f8 <col:45> 'T2' lvalue ParmVar 0x561ff3dd4388 'x2' 'T2 &'
|-FunctionTemplateDecl 0x561ff3dd4ae8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x561ff3dd45e0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3dd4658 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x561ff3dd46d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x561ff3dd4a48 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x561ff3dd47a0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd4818 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3dd48b8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x561ff3dd4958 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x561ff3e00910 <col:65, line:485:5>
|     `-ReturnStmt 0x561ff3e00900 <line:484:9, col:55>
|       `-CallExpr 0x561ff3e008b8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3e00798 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3e00818 <col:21> 'const char *' lvalue ParmVar 0x561ff3dd47a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x561ff3e00838 <col:30> 'const int' lvalue Var 0x561ff3dcaf28 'mandatory' 'const int'
|         |-DeclRefExpr 0x561ff3e00858 <col:41> 'P' lvalue ParmVar 0x561ff3dd4818 'parser' 'P'
|         |-DeclRefExpr 0x561ff3e00878 <col:49> 'T1' lvalue ParmVar 0x561ff3dd48b8 'x1' 'T1 &'
|         `-DeclRefExpr 0x561ff3e00898 <col:53> 'T2' lvalue ParmVar 0x561ff3dd4958 'x2' 'T2 &'
|-FunctionTemplateDecl 0x561ff3dd5068 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x561ff3dd4b60 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3dd4bd8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x561ff3dd4c58 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x561ff3dd4fc8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x561ff3dd4d20 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd4d98 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3dd4e38 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x561ff3dd4ed8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x561ff3e00ab0 <col:65, line:489:5>
|     `-ReturnStmt 0x561ff3e00aa0 <line:488:9, col:56>
|       `-CallExpr 0x561ff3e00a58 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3e00938 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3e009b8 <col:21> 'const char *' lvalue ParmVar 0x561ff3dd4d20 'keyword' 'const char *'
|         |-DeclRefExpr 0x561ff3e009d8 <col:30> 'const int' lvalue Var 0x561ff3dcb020 'positional' 'const int'
|         |-DeclRefExpr 0x561ff3e009f8 <col:42> 'P' lvalue ParmVar 0x561ff3dd4d98 'parser' 'P'
|         |-DeclRefExpr 0x561ff3e00a18 <col:50> 'T1' lvalue ParmVar 0x561ff3dd4e38 'x1' 'T1 &'
|         `-DeclRefExpr 0x561ff3e00a38 <col:54> 'T2' lvalue ParmVar 0x561ff3dd4ed8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x561ff3dd55e8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x561ff3dd50e0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3dd5158 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x561ff3dd51d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x561ff3dd5548 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x561ff3dd52a0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd5318 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3dd53b8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x561ff3dd5458 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x561ff3e00d00 <col:66, line:493:5>
|     `-ReturnStmt 0x561ff3e00cf0 <line:492:9, col:68>
|       `-CallExpr 0x561ff3e00ca8 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3e00ad8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3e00b58 <col:21> 'const char *' lvalue ParmVar 0x561ff3dd52a0 'keyword' 'const char *'
|         |-BinaryOperator 0x561ff3e00c28 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x561ff3e00bd8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x561ff3e00bb8 <col:30> 'const int' lvalue Var 0x561ff3dcaf28 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x561ff3e00c10 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x561ff3e00bf0 <col:42> 'const int' lvalue Var 0x561ff3dcb020 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x561ff3e00c48 <col:54> 'P' lvalue ParmVar 0x561ff3dd5318 'parser' 'P'
|         |-DeclRefExpr 0x561ff3e00c68 <col:62> 'T1' lvalue ParmVar 0x561ff3dd53b8 'x1' 'T1 &'
|         `-DeclRefExpr 0x561ff3e00c88 <col:66> 'T2' lvalue ParmVar 0x561ff3dd5458 'x2' 'T2 &'
|-FunctionTemplateDecl 0x561ff3dd5c48 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x561ff3dd5660 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3dd56d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x561ff3dd5758 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x561ff3dd5ba8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x561ff3dd5820 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd58a0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x561ff3dd5918 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3dd59b8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x561ff3dd5a58 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x561ff3e00e90 <col:74, line:498:5>
|     |-CallExpr 0x561ff3e00e08 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561ff3e00d18 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x561ff3e00d58 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x561ff3e00d68 <col:30> 'const char *' lvalue ParmVar 0x561ff3dd5820 'keyword' 'const char *'
|     | |-DeclRefExpr 0x561ff3e00d88 <col:39> 'int' lvalue ParmVar 0x561ff3dd58a0 'flags' 'int'
|     | |-DeclRefExpr 0x561ff3e00da8 <col:46> 'P' lvalue ParmVar 0x561ff3dd5918 'parser' 'P'
|     | |-DeclRefExpr 0x561ff3e00dc8 <col:54> 'T1' lvalue ParmVar 0x561ff3dd59b8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x561ff3e00de8 <col:58> 'T2' lvalue ParmVar 0x561ff3dd5a58 'x2' 'T2 &'
|     `-ReturnStmt 0x561ff3e00e80 <line:497:9, col:17>
|       `-UnaryOperator 0x561ff3e00e68 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561ff3e00e58 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561ff3dd5fa8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x561ff3dd5cc8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561ff3dd5f08 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x561ff3dd5d80 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd5df8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x561ff3e00fd8 <col:52, line:509:5>
|     `-ReturnStmt 0x561ff3e00fc8 <line:508:9, col:44>
|       `-CallExpr 0x561ff3e00f90 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3e00ec0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3e00f30 <col:26> 'const char *' lvalue ParmVar 0x561ff3dd5d80 'keyword' 'const char *'
|         |-IntegerLiteral 0x561ff3e00f50 <col:35> 'int' 0
|         `-DeclRefExpr 0x561ff3e00f70 <col:38> 'P' lvalue ParmVar 0x561ff3dd5df8 'parser' 'P'
|-FunctionTemplateDecl 0x561ff3dd62a8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x561ff3dd6010 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561ff3dd6208 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x561ff3dd60c0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd6138 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x561ff3e01118 <col:54, line:513:5>
|     `-ReturnStmt 0x561ff3e01108 <line:512:9, col:52>
|       `-CallExpr 0x561ff3e010d0 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3e01000 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3e01070 <col:26> 'const char *' lvalue ParmVar 0x561ff3dd60c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x561ff3e01090 <col:35> 'const int' lvalue Var 0x561ff3dcaf28 'mandatory' 'const int'
|         `-DeclRefExpr 0x561ff3e010b0 <col:46> 'P' lvalue ParmVar 0x561ff3dd6138 'parser' 'P'
|-FunctionTemplateDecl 0x561ff3dd65a8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x561ff3dd6310 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561ff3dd6508 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x561ff3dd63c0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd6438 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x561ff3e01258 <col:54, line:517:5>
|     `-ReturnStmt 0x561ff3e01248 <line:516:9, col:53>
|       `-CallExpr 0x561ff3e01210 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3e01140 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3e011b0 <col:26> 'const char *' lvalue ParmVar 0x561ff3dd63c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x561ff3e011d0 <col:35> 'const int' lvalue Var 0x561ff3dcb020 'positional' 'const int'
|         `-DeclRefExpr 0x561ff3e011f0 <col:47> 'P' lvalue ParmVar 0x561ff3dd6438 'parser' 'P'
|-FunctionTemplateDecl 0x561ff3dd68a8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x561ff3dd6610 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561ff3dd6808 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x561ff3dd66c0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd6738 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x561ff3e01448 <col:55, line:521:5>
|     `-ReturnStmt 0x561ff3e01438 <line:520:9, col:65>
|       `-CallExpr 0x561ff3e01400 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3e01280 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3e012f0 <col:26> 'const char *' lvalue ParmVar 0x561ff3dd66c0 'keyword' 'const char *'
|         |-BinaryOperator 0x561ff3e013c0 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x561ff3e01370 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x561ff3e01350 <col:35> 'const int' lvalue Var 0x561ff3dcaf28 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x561ff3e013a8 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x561ff3e01388 <col:47> 'const int' lvalue Var 0x561ff3dcb020 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x561ff3e013e0 <col:59> 'P' lvalue ParmVar 0x561ff3dd6738 'parser' 'P'
|-FunctionTemplateDecl 0x561ff3dd6c78 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x561ff3dd6910 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561ff3dd6bd8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x561ff3dd69c0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd6a40 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x561ff3dd6ab8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x561ff3e01588 <col:63, line:526:5>
|     |-CallExpr 0x561ff3e01510 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561ff3e01460 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x561ff3e014a0 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x561ff3e014b0 <col:35> 'const char *' lvalue ParmVar 0x561ff3dd69c0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x561ff3e014d0 <col:44> 'int' lvalue ParmVar 0x561ff3dd6a40 'flags' 'int'
|     | `-DeclRefExpr 0x561ff3e014f0 <col:51> 'P' lvalue ParmVar 0x561ff3dd6ab8 'parser' 'P'
|     `-ReturnStmt 0x561ff3e01578 <line:525:9, col:17>
|       `-UnaryOperator 0x561ff3e01560 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561ff3e01550 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561ff3dd70c8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x561ff3dd6ce8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3dd6d68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561ff3dd7028 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561ff3dd6e28 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd6ea0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3dd6f48 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x561ff3e016e0 <col:58, line:541:5>
|     `-ReturnStmt 0x561ff3e016d0 <line:540:9, col:39>
|       `-CallExpr 0x561ff3e01698 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3e015b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3e01638 <col:21> 'const char *' lvalue ParmVar 0x561ff3dd6e28 'keyword' 'const char *'
|         |-DeclRefExpr 0x561ff3e01658 <col:30> 'P' lvalue ParmVar 0x561ff3dd6ea0 'parser' 'P'
|         `-DeclRefExpr 0x561ff3e01678 <col:38> 'T' lvalue ParmVar 0x561ff3dd6f48 'x' 'T &'
|-FunctionTemplateDecl 0x561ff3dd7518 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x561ff3dd7138 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3dd71b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561ff3dd7478 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561ff3dd7278 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd72f0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3dd7398 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x561ff3e01818 <col:60, line:545:5>
|     `-ReturnStmt 0x561ff3e01808 <line:544:9, col:41>
|       `-CallExpr 0x561ff3e017d0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3e01708 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3e01770 <col:23> 'const char *' lvalue ParmVar 0x561ff3dd7278 'keyword' 'const char *'
|         |-DeclRefExpr 0x561ff3e01790 <col:32> 'P' lvalue ParmVar 0x561ff3dd72f0 'parser' 'P'
|         `-DeclRefExpr 0x561ff3e017b0 <col:40> 'T' lvalue ParmVar 0x561ff3dd7398 'x' 'T &'
|-FunctionTemplateDecl 0x561ff3dd7968 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x561ff3dd7588 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3dd7608 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561ff3dd78c8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561ff3dd76c8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd7740 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3dd77e8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x561ff3e01950 <col:60, line:549:5>
|     `-ReturnStmt 0x561ff3e01940 <line:548:9, col:41>
|       `-CallExpr 0x561ff3e01908 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3e01840 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3e018a8 <col:23> 'const char *' lvalue ParmVar 0x561ff3dd76c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x561ff3e018c8 <col:32> 'P' lvalue ParmVar 0x561ff3dd7740 'parser' 'P'
|         `-DeclRefExpr 0x561ff3e018e8 <col:40> 'T' lvalue ParmVar 0x561ff3dd77e8 'x' 'T &'
|-FunctionTemplateDecl 0x561ff3dd7db8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x561ff3dd79d8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3dd7a58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561ff3dd7d18 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561ff3dd7b18 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd7b90 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3dd7c38 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x561ff3e01a88 <col:61, line:553:5>
|     `-ReturnStmt 0x561ff3e01a78 <line:552:9, col:42>
|       `-CallExpr 0x561ff3e01a40 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3e01978 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3e019e0 <col:24> 'const char *' lvalue ParmVar 0x561ff3dd7b18 'keyword' 'const char *'
|         |-DeclRefExpr 0x561ff3e01a00 <col:33> 'P' lvalue ParmVar 0x561ff3dd7b90 'parser' 'P'
|         `-DeclRefExpr 0x561ff3e01a20 <col:41> 'T' lvalue ParmVar 0x561ff3dd7c38 'x' 'T &'
|-FunctionTemplateDecl 0x561ff3dd8298 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x561ff3dd7e28 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3dd7ea8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561ff3dd81f8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x561ff3dd7f68 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd7fe8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x561ff3dd8060 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3dd8108 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x561ff3e01c00 <col:69, line:557:5>
|     `-ReturnStmt 0x561ff3e01bf0 <line:556:9, col:46>
|       `-CallExpr 0x561ff3e01bb0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3e01ab0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3e01b30 <col:21> 'const char *' lvalue ParmVar 0x561ff3dd7f68 'keyword' 'const char *'
|         |-DeclRefExpr 0x561ff3e01b50 <col:30> 'int' lvalue ParmVar 0x561ff3dd7fe8 'flags' 'int'
|         |-DeclRefExpr 0x561ff3e01b70 <col:37> 'P' lvalue ParmVar 0x561ff3dd8060 'parser' 'P'
|         `-DeclRefExpr 0x561ff3e01b90 <col:45> 'T' lvalue ParmVar 0x561ff3dd8108 'x' 'T &'
|-FunctionTemplateDecl 0x561ff3dd85a8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x561ff3dd8310 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561ff3dd8508 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x561ff3dd83c0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd8438 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x561ff3e01d40 <col:56, line:571:5>
|     `-ReturnStmt 0x561ff3e01d30 <line:570:9, col:48>
|       `-CallExpr 0x561ff3e01cf8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3e01c28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3e01c98 <col:30> 'const char *' lvalue ParmVar 0x561ff3dd83c0 'keyword' 'const char *'
|         |-IntegerLiteral 0x561ff3e01cb8 <col:39> 'int' 0
|         `-DeclRefExpr 0x561ff3e01cd8 <col:42> 'P' lvalue ParmVar 0x561ff3dd8438 'parser' 'P'
|-FunctionTemplateDecl 0x561ff3dd8938 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x561ff3dd8610 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561ff3dd8898 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x561ff3dd86c0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd8740 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x561ff3dd87b8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x561ff3e01f10 <col:67, line:576:5>
|     |-CallExpr 0x561ff3e01e98 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561ff3e01d58 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x561ff3e01d98 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x561ff3e01da8 <col:39> 'const char *' lvalue ParmVar 0x561ff3dd86c0 'keyword' 'const char *'
|     | |-BinaryOperator 0x561ff3e01e58 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x561ff3e01e08 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x561ff3e01dc8 <col:48> 'int' lvalue ParmVar 0x561ff3dd8740 'flags' 'int'
|     | | `-ImplicitCastExpr 0x561ff3e01e40 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x561ff3e01e20 <col:56> 'const int' lvalue Var 0x561ff3dcb210 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x561ff3e01e78 <col:68> 'P' lvalue ParmVar 0x561ff3dd87b8 'parser' 'P'
|     `-ReturnStmt 0x561ff3e01f00 <line:575:9, col:17>
|       `-UnaryOperator 0x561ff3e01ee8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561ff3e01ed8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561ff3dd8d88 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x561ff3dd89a8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3dd8a28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561ff3dd8ce8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561ff3dd8ae8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd8b60 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3dd8c08 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x561ff3e02080 <col:62, line:592:5>
|     `-ReturnStmt 0x561ff3e02070 <line:591:9, col:51>
|       `-CallExpr 0x561ff3e02030 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3e01f40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3e01fb0 <col:30> 'const char *' lvalue ParmVar 0x561ff3dd8ae8 'keyword' 'const char *'
|         |-IntegerLiteral 0x561ff3e01fd0 <col:39> 'int' 0
|         |-DeclRefExpr 0x561ff3e01ff0 <col:42> 'P' lvalue ParmVar 0x561ff3dd8b60 'parser' 'P'
|         `-DeclRefExpr 0x561ff3e02010 <col:50> 'T' lvalue ParmVar 0x561ff3dd8c08 'x' 'T &'
|-FunctionTemplateDecl 0x561ff3dd9268 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x561ff3dd8df8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3dd8e78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561ff3dd91c8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x561ff3dd8f38 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd8fb8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x561ff3dd9030 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3dd90d8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x561ff3e02278 <col:73, line:597:5>
|     |-CallExpr 0x561ff3e021f8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561ff3e02098 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x561ff3e020d8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x561ff3e020e8 <col:39> 'const char *' lvalue ParmVar 0x561ff3dd8f38 'keyword' 'const char *'
|     | |-BinaryOperator 0x561ff3e02198 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x561ff3e02148 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x561ff3e02108 <col:48> 'int' lvalue ParmVar 0x561ff3dd8fb8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x561ff3e02180 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x561ff3e02160 <col:56> 'const int' lvalue Var 0x561ff3dcb210 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x561ff3e021b8 <col:68> 'P' lvalue ParmVar 0x561ff3dd9030 'parser' 'P'
|     | `-DeclRefExpr 0x561ff3e021d8 <col:76> 'T' lvalue ParmVar 0x561ff3dd90d8 'x' 'T &'
|     `-ReturnStmt 0x561ff3e02268 <line:596:9, col:17>
|       `-UnaryOperator 0x561ff3e02250 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561ff3e02240 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561ff3dd9818 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x561ff3dd92e0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3dd9358 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561ff3dd9778 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x561ff3dd9418 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd9490 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3dd9650 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x561ff3e023e8 <col:65, line:614:5>
|     `-ReturnStmt 0x561ff3e023d8 <line:613:9, col:46>
|       `-CallExpr 0x561ff3e02398 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3e022a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3e02318 <col:25> 'const char *' lvalue ParmVar 0x561ff3dd9418 'keyword' 'const char *'
|         |-IntegerLiteral 0x561ff3e02338 <col:34> 'int' 0
|         |-DeclRefExpr 0x561ff3e02358 <col:37> 'P' lvalue ParmVar 0x561ff3dd9490 'parser' 'P'
|         `-DeclRefExpr 0x561ff3e02378 <col:45> 'Vector<T>' lvalue ParmVar 0x561ff3dd9650 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x561ff3dde840 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x561ff3dd9888 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x561ff3dd9ba8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x561ff3dd9940 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3dd9a90 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x561ff3e02600 <col:55, line:618:5>
|     `-ReturnStmt 0x561ff3e025f0 <line:617:9, col:55>
|       `-CallExpr 0x561ff3e025b0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3e02410 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3e02480 <col:25> 'const char *' lvalue ParmVar 0x561ff3dd9940 'keyword' 'const char *'
|         |-IntegerLiteral 0x561ff3e024a0 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x561ff3e02570 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x561ff3e02590 <col:54> 'Vector<T>' lvalue ParmVar 0x561ff3dd9a90 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x561ff3ddee18 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x561ff3dde8a8 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3dde928 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561ff3dded78 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x561ff3dde9e8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3ddea68 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x561ff3ddeae0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3ddec30 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x561ff3e027f8 <col:76, line:623:5>
|     |-CallExpr 0x561ff3e02778 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561ff3e02618 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x561ff3e02658 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x561ff3e02668 <col:34> 'const char *' lvalue ParmVar 0x561ff3dde9e8 'keyword' 'const char *'
|     | |-BinaryOperator 0x561ff3e02718 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x561ff3e026c8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x561ff3e02688 <col:43> 'int' lvalue ParmVar 0x561ff3ddea68 'flags' 'int'
|     | | `-ImplicitCastExpr 0x561ff3e02700 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x561ff3e026e0 <col:51> 'const int' lvalue Var 0x561ff3dcb210 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x561ff3e02738 <col:63> 'P' lvalue ParmVar 0x561ff3ddeae0 'parser' 'P'
|     | `-DeclRefExpr 0x561ff3e02758 <col:71> 'Vector<T>' lvalue ParmVar 0x561ff3ddec30 'x' 'Vector<T> &'
|     `-ReturnStmt 0x561ff3e027e8 <line:622:9, col:17>
|       `-UnaryOperator 0x561ff3e027d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561ff3e027c0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561ff3ddf358 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x561ff3ddee90 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3ddef08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561ff3ddf2b8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x561ff3ddefc8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3ddf048 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x561ff3ddf190 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x561ff3e02a60 <col:66, line:627:5>
|     `-ReturnStmt 0x561ff3e02a50 <line:626:9, col:59>
|       `-CallExpr 0x561ff3e02a10 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561ff3e02828 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561ff3e02898 <col:25> 'const char *' lvalue ParmVar 0x561ff3ddefc8 'keyword' 'const char *'
|         |-DeclRefExpr 0x561ff3e028b8 <col:34> 'int' lvalue ParmVar 0x561ff3ddf048 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x561ff3e029d0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x561ff3e029f0 <col:58> 'Vector<T>' lvalue ParmVar 0x561ff3ddf190 'x' 'Vector<T> &'
|-CXXMethodDecl 0x561ff3ddf3e8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x561ff3e02ae0 <col:25, line:633:5>
|   `-ReturnStmt 0x561ff3e02ad0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x561ff3e02ab8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x561ff3e02a88 <col:16> 'const bool' lvalue ->_status 0x561ff3de5228
|         `-CXXThisExpr 0x561ff3e02a78 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x561ff3ddf568 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x561ff3ddf4a0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x561ff3e02bc8 <col:27, line:639:5>
|   |-BinaryOperator 0x561ff3e02b70 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x561ff3e02af8 <col:9> 'bool' lvalue ParmVar 0x561ff3ddf4a0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x561ff3e02b58 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x561ff3e02b28 <col:13> 'bool' lvalue ->_status 0x561ff3de5228
|   |     `-CXXThisExpr 0x561ff3e02b18 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x561ff3e02bb8 <line:638:9, col:17>
|     `-UnaryOperator 0x561ff3e02ba0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561ff3e02b90 <col:17> 'Args *' this
|-CXXMethodDecl 0x561ff3ddf6e8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x561ff3ddf628 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x561ff3e02cb8 <col:39, line:644:5>
|   |-BinaryOperator 0x561ff3e02c60 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x561ff3e02be8 <col:9> 'bool' lvalue ParmVar 0x561ff3ddf628 'x' 'bool &'
|   | `-ImplicitCastExpr 0x561ff3e02c48 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x561ff3e02c18 <col:13> 'const bool' lvalue ->_status 0x561ff3de5228
|   |     `-CXXThisExpr 0x561ff3e02c08 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x561ff3e02ca8 <line:643:9, col:17>
|     `-UnaryOperator 0x561ff3e02c90 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561ff3e02c80 <col:17> 'const Args *' this
|-CXXMethodDecl 0x561ff3ddf7b0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x561ff3e02d60 <col:30, line:651:5>
|   `-ReturnStmt 0x561ff3e02d50 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x561ff3e02d38 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x561ff3e02d08 <col:16> 'bool' lvalue ->_read_status 0x561ff3dc1ed0
|         `-ImplicitCastExpr 0x561ff3e02ce8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x561ff3e02cd8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x561ff3ddf8f8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x561ff3ddf868 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x561ff3e02e68 <col:32, line:658:5>
|   |-BinaryOperator 0x561ff3e02e10 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x561ff3e02d78 <col:9> 'bool' lvalue ParmVar 0x561ff3ddf868 'x' 'bool &'
|   | `-ImplicitCastExpr 0x561ff3e02df8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x561ff3e02dc8 <col:13> 'bool' lvalue ->_read_status 0x561ff3dc1ed0
|   |     `-ImplicitCastExpr 0x561ff3e02da8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x561ff3e02d98 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x561ff3e02e58 <line:657:9, col:17>
|     `-UnaryOperator 0x561ff3e02e40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561ff3e02e30 <col:17> 'Args *' this
|-CXXMethodDecl 0x561ff3ddfa48 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x561ff3ddf9b8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x561ff3e02f78 <col:44, line:663:5>
|   |-BinaryOperator 0x561ff3e02f20 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x561ff3e02e88 <col:9> 'bool' lvalue ParmVar 0x561ff3ddf9b8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x561ff3e02f08 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x561ff3e02ed8 <col:13> 'bool' lvalue ->_read_status 0x561ff3dc1ed0
|   |     `-ImplicitCastExpr 0x561ff3e02eb8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x561ff3e02ea8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x561ff3e02f68 <line:662:9, col:17>
|     `-UnaryOperator 0x561ff3e02f50 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561ff3e02f40 <col:17> 'const Args *' this
|-CXXMethodDecl 0x561ff3ddfb10 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x561ff3ddfbd8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x561ff3ddfca0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x561ff3ddfd68 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x561ff3de0078 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x561ff3ddfe08 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x561ff3ddffd8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x561ff3ddfee8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x561ff3e03330 <col:19, line:706:5>
|     `-IfStmt 0x561ff3e03308 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x561ff3e03078 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x561ff3e03238 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x561ff3e03208 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x561ff3e031c8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x561ff3e030d0 <col:42> '<bound member function type>' ->simple_slot 0x561ff3dfddc0
|       |     | `-CXXThisExpr 0x561ff3e030c0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x561ff3e03168 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x561ff3e03120 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x561ff3ade898
|       |     | `-DeclRefExpr 0x561ff3e03100 <col:55> 'T' lvalue ParmVar 0x561ff3ddfee8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x561ff3e031a8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x561ff3e032f8 <line:705:13, col:34>
|         `-CallExpr 0x561ff3e032d0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x561ff3e03258 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x561ff3e032b0 <col:33> 'T' lvalue ParmVar 0x561ff3ddfee8 'x' 'T &'
|-FunctionTemplateDecl 0x561ff3de0348 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x561ff3de00d8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x561ff3de02a8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x561ff3de01b8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x561ff3e07460 <col:31, line:717:5>
|     |-DeclStmt 0x561ff3e03470 <line:713:9, col:23>
|     | `-VarDecl 0x561ff3e03358 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x561ff3e03448 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x561ff3e033d0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x561ff3e03428 <col:21> 'T' lvalue ParmVar 0x561ff3de01b8 'x' 'T &'
|     |-IfStmt 0x561ff3e07410 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x561ff3e072b8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x561ff3e073f0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x561ff3e07390 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x561ff3e07320 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561ff3c8fc20 0x561ff3c8f798 0x561ff3c8f3c8 0x561ff3c8efe8 0x561ff3c8ec08 0x561ff3c8e838
|     |   | `-DeclRefExpr 0x561ff3e07300 <col:14> 'T *' lvalue Var 0x561ff3e03358 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x561ff3e073d0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x561ff3e07448 <line:716:9, col:16>
|       `-DeclRefExpr 0x561ff3e07428 <col:16> 'T *' lvalue Var 0x561ff3e03358 's' 'T *'
|-FunctionTemplateDecl 0x561ff3de0758 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x561ff3de03a8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x561ff3de0428 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x561ff3de06b8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x561ff3de0508 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x561ff3de05a8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x561ff3e07770 <col:37, line:726:5>
|     |-IfStmt 0x561ff3e07700 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x561ff3e07720 <line:723:13, col:26>
|     | | `-VarDecl 0x561ff3e074c8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x561ff3e075b8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x561ff3e07540 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x561ff3e07598 <col:25> 'T' lvalue ParmVar 0x561ff3de0508 'x' 'T &'
|     | |-DeclRefExpr 0x561ff3e075e0 <col:16> 'T *' lvalue Var 0x561ff3e074c8 's' 'T *'
|     | `-BinaryOperator 0x561ff3e076e0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x561ff3e07690 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x561ff3e07620 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561ff3c8fc20 0x561ff3c8f798 0x561ff3c8f3c8 0x561ff3c8efe8 0x561ff3c8ec08 0x561ff3c8e838
|     |   | `-DeclRefExpr 0x561ff3e07600 <col:14> 'T *' lvalue Var 0x561ff3e074c8 's' 'T *'
|     |   `-DeclRefExpr 0x561ff3e076c0 <col:18> 'const V' lvalue ParmVar 0x561ff3de05a8 'value' 'const V &'
|     `-ReturnStmt 0x561ff3e07760 <line:725:9, col:17>
|       `-UnaryOperator 0x561ff3e07748 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561ff3e07738 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561ff3de0b58 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x561ff3de07c0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x561ff3de0ab8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x561ff3de0870 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3de08f0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x561ff3de0998 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x561ff3e08590 <col:65, line:737:5>
|     |-DeclStmt 0x561ff3e07808 <line:732:9, col:26>
|     | `-VarDecl 0x561ff3e077a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x561ff3e08558 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x561ff3e08578 <line:733:13, col:58>
|       | `-VarDecl 0x561ff3e07830 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x561ff3e07a10 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x561ff3e079e0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x561ff3e079c8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x561ff3e079a8 <col:26, col:58> 'String' (CXXTemporary 0x561ff3e079a8)
|       |           `-CXXMemberCallExpr 0x561ff3e07938 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x561ff3e078a8 <col:26> '<bound member function type>' ->find 0x561ff3dfd3d8
|       |             | `-CXXThisExpr 0x561ff3e07898 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x561ff3e07970 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x561ff3e078d8 <col:31> 'const char *' lvalue ParmVar 0x561ff3de0870 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x561ff3e07988 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x561ff3e078f8 <col:40> 'int' lvalue ParmVar 0x561ff3de08f0 'flags' 'int'
|       |             `-DeclRefExpr 0x561ff3e07918 <col:47> 'Args::Slot *' lvalue Var 0x561ff3e077a0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x561ff3e07ac8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x561ff3e07ab0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x561ff3e07a90 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x561ff3e07a60 <col:20> '<bound member function type>' .operator int (String::*)() const 0x561ff3996588
|       |       `-ImplicitCastExpr 0x561ff3e07a48 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x561ff3e07a28 <col:20> 'String' lvalue Var 0x561ff3e07830 'str' 'String'
|       `-CompoundStmt 0x561ff3e08538 <col:61, line:736:9>
|         |-DeclStmt 0x561ff3e07f80 <line:734:13, col:76>
|         | `-VarDecl 0x561ff3e07b18 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x561ff3e07f50 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x561ff3e07ec0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x561ff3e07f08 <col:60> 'T' lvalue ParmVar 0x561ff3de0998 'variable' 'T &'
|         |     `-UnaryOperator 0x561ff3e07f38 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x561ff3e07f28 <col:71> 'Args *' this
|         `-CallExpr 0x561ff3e08508 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x561ff3e07fa8 <col:13> '<bound member function type>' ->postparse 0x561ff3dfd5e8
|           | `-CXXThisExpr 0x561ff3e07f98 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x561ff3e084c8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x561ff3e07fd8 <col:23> 'T *' lvalue Var 0x561ff3e07b18 's' 'T *'
|           | `-CallExpr 0x561ff3e08488 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x561ff3e08260 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x561ff3e08360 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x561ff3e08380 <col:86> 'String' lvalue Var 0x561ff3e07830 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x561ff3e08430 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x561ff3e083c0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561ff3c8fc20 0x561ff3c8f798 0x561ff3c8f3c8 0x561ff3c8efe8 0x561ff3c8ec08 0x561ff3c8e838
|           |   | `-DeclRefExpr 0x561ff3e083a0 <col:92> 'T *' lvalue Var 0x561ff3e07b18 's' 'T *'
|           |   `-UnaryOperator 0x561ff3e08470 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x561ff3e08460 <col:96> 'Args *' this
|           `-DeclRefExpr 0x561ff3e084e8 <col:103> 'Args::Slot *' lvalue Var 0x561ff3e077a0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x561ff3de10a8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x561ff3de0bc8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x561ff3de0c48 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x561ff3de1008 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x561ff3de0d08 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3de0d88 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x561ff3de0e28 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x561ff3de0ec8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x561ff3e09430 <col:88, line:745:5>
|     |-DeclStmt 0x561ff3e08628 <line:741:9, col:26>
|     | `-VarDecl 0x561ff3e085c0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x561ff3e08848 <line:742:9, col:55>
|     | `-VarDecl 0x561ff3e08650 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x561ff3e08830 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x561ff3e08800 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x561ff3e087e8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x561ff3e087c8 <col:22, col:54> 'String' (CXXTemporary 0x561ff3e087c8)
|     |           `-CXXMemberCallExpr 0x561ff3e08758 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x561ff3e086c8 <col:22> '<bound member function type>' ->find 0x561ff3dfd3d8
|     |             | `-CXXThisExpr 0x561ff3e086b8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x561ff3e08790 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x561ff3e086f8 <col:27> 'const char *' lvalue ParmVar 0x561ff3de0d08 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x561ff3e087a8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x561ff3e08718 <col:36> 'int' lvalue ParmVar 0x561ff3de0d88 'flags' 'int'
|     |             `-DeclRefExpr 0x561ff3e08738 <col:43> 'Args::Slot *' lvalue Var 0x561ff3e085c0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x561ff3e08c20 <line:743:9, col:72>
|     | `-VarDecl 0x561ff3e08898 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x561ff3e08bf0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x561ff3e08b60 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x561ff3e08ba8 <col:56> 'T' lvalue ParmVar 0x561ff3de0e28 'variable' 'T &'
|     |     `-UnaryOperator 0x561ff3e08bd8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x561ff3e08bc8 <col:67> 'Args *' this
|     `-CallExpr 0x561ff3e09400 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x561ff3e08c48 <col:9> '<bound member function type>' ->postparse 0x561ff3dfd5e8
|       | `-CXXThisExpr 0x561ff3e08c38 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x561ff3e093c0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x561ff3e08c78 <col:19> 'T *' lvalue Var 0x561ff3e08898 's' 'T *'
|       | `-ParenExpr 0x561ff3e093a0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x561ff3e09370 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x561ff3e09358 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x561ff3e09340 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x561ff3e09320 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x561ff3e092f0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x561ff3996588
|       |     |       `-ImplicitCastExpr 0x561ff3e092d8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x561ff3e08c98 <col:25> 'String' lvalue Var 0x561ff3e08650 'str' 'String'
|       |     |-CallExpr 0x561ff3e09148 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x561ff3e08f20 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x561ff3e09020 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x561ff3e09040 <col:89> 'String' lvalue Var 0x561ff3e08650 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x561ff3e090f0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x561ff3e09080 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561ff3c8fc20 0x561ff3c8f798 0x561ff3c8f3c8 0x561ff3c8efe8 0x561ff3c8ec08 0x561ff3c8e838
|       |     | | `-DeclRefExpr 0x561ff3e09060 <col:95> 'T *' lvalue Var 0x561ff3e08898 's' 'T *'
|       |     | `-UnaryOperator 0x561ff3e09130 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x561ff3e09120 <col:99> 'Args *' this
|       |     `-ParenExpr 0x561ff3e092b8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x561ff3e09298 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x561ff3e09268 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x561ff3e09218 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x561ff3e091a8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561ff3c8fc20 0x561ff3c8f798 0x561ff3c8f3c8 0x561ff3c8efe8 0x561ff3c8ec08 0x561ff3c8e838
|       |         | | `-DeclRefExpr 0x561ff3e09188 <col:109> 'T *' lvalue Var 0x561ff3e08898 's' 'T *'
|       |         | `-DeclRefExpr 0x561ff3e09248 <col:113> 'const V' lvalue ParmVar 0x561ff3de0ec8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x561ff3e09288 <col:120> 'bool' true
|       `-DeclRefExpr 0x561ff3e093e0 <col:128> 'Args::Slot *' lvalue Var 0x561ff3e085c0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x561ff3de15d8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x561ff3de1120 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3de1198 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561ff3de1538 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x561ff3de1258 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3de12d8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x561ff3de1350 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3de13f8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x561ff3e0a028 <col:75, line:754:5>
|     |-DeclStmt 0x561ff3e094d8 <line:749:9, col:26>
|     | `-VarDecl 0x561ff3e09470 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x561ff3e09ff0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x561ff3e0a010 <line:750:13, col:58>
|       | `-VarDecl 0x561ff3e09500 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x561ff3e096e0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x561ff3e096b0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x561ff3e09698 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x561ff3e09678 <col:26, col:58> 'String' (CXXTemporary 0x561ff3e09678)
|       |           `-CXXMemberCallExpr 0x561ff3e09608 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x561ff3e09578 <col:26> '<bound member function type>' ->find 0x561ff3dfd3d8
|       |             | `-CXXThisExpr 0x561ff3e09568 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x561ff3e09640 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x561ff3e095a8 <col:31> 'const char *' lvalue ParmVar 0x561ff3de1258 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x561ff3e09658 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x561ff3e095c8 <col:40> 'int' lvalue ParmVar 0x561ff3de12d8 'flags' 'int'
|       |             `-DeclRefExpr 0x561ff3e095e8 <col:47> 'Args::Slot *' lvalue Var 0x561ff3e09470 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x561ff3e09798 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x561ff3e09780 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x561ff3e09760 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x561ff3e09730 <col:20> '<bound member function type>' .operator int (String::*)() const 0x561ff3996588
|       |       `-ImplicitCastExpr 0x561ff3e09718 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x561ff3e096f8 <col:20> 'String' lvalue Var 0x561ff3e09500 'str' 'String'
|       `-CompoundStmt 0x561ff3e09fd0 <col:61, line:753:9>
|         |-DeclStmt 0x561ff3e09b70 <line:751:13, col:63>
|         | `-VarDecl 0x561ff3e097e8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x561ff3e09b40 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x561ff3e09ab0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x561ff3e09af8 <col:47> 'T' lvalue ParmVar 0x561ff3de13f8 'variable' 'T &'
|         |     `-UnaryOperator 0x561ff3e09b28 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x561ff3e09b18 <col:58> 'Args *' this
|         `-CallExpr 0x561ff3e09fa0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x561ff3e09b98 <col:13> '<bound member function type>' ->postparse 0x561ff3dfd5e8
|           | `-CXXThisExpr 0x561ff3e09b88 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x561ff3e09f60 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x561ff3e09bc8 <col:23> 'T *' lvalue Var 0x561ff3e097e8 's' 'T *'
|           | `-CallExpr 0x561ff3e09f20 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x561ff3e09db0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x561ff3e09df8 <col:56> 'P' lvalue ParmVar 0x561ff3de1350 'parser' 'P'
|           |   |-DeclRefExpr 0x561ff3e09e18 <col:64> 'String' lvalue Var 0x561ff3e09500 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x561ff3e09ec8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x561ff3e09e58 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561ff3c8fc20 0x561ff3c8f798 0x561ff3c8f3c8 0x561ff3c8efe8 0x561ff3c8ec08 0x561ff3c8e838
|           |   | `-DeclRefExpr 0x561ff3e09e38 <col:70> 'T *' lvalue Var 0x561ff3e097e8 's' 'T *'
|           |   `-UnaryOperator 0x561ff3e09f08 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x561ff3e09ef8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x561ff3e09f80 <col:81> 'Args::Slot *' lvalue Var 0x561ff3e09470 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x561ff3de1c38 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x561ff3de1650 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x561ff3de16c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x561ff3de1748 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x561ff3de1b98 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x561ff3de1810 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3de1890 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x561ff3de1908 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3de19a8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x561ff3de1a48 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x561ff3e0adb8 <col:98, line:762:5>
|     |-DeclStmt 0x561ff3e0a0c0 <line:758:9, col:26>
|     | `-VarDecl 0x561ff3e0a058 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x561ff3e0a2e0 <line:759:9, col:55>
|     | `-VarDecl 0x561ff3e0a0e8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x561ff3e0a2c8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x561ff3e0a298 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x561ff3e0a280 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x561ff3e0a260 <col:22, col:54> 'String' (CXXTemporary 0x561ff3e0a260)
|     |           `-CXXMemberCallExpr 0x561ff3e0a1f0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x561ff3e0a160 <col:22> '<bound member function type>' ->find 0x561ff3dfd3d8
|     |             | `-CXXThisExpr 0x561ff3e0a150 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x561ff3e0a228 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x561ff3e0a190 <col:27> 'const char *' lvalue ParmVar 0x561ff3de1810 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x561ff3e0a240 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x561ff3e0a1b0 <col:36> 'int' lvalue ParmVar 0x561ff3de1890 'flags' 'int'
|     |             `-DeclRefExpr 0x561ff3e0a1d0 <col:43> 'Args::Slot *' lvalue Var 0x561ff3e0a058 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x561ff3e0a700 <line:760:9, col:59>
|     | `-VarDecl 0x561ff3e0a338 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x561ff3e0a6d0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x561ff3e0a640 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x561ff3e0a688 <col:43> 'T' lvalue ParmVar 0x561ff3de19a8 'variable' 'T &'
|     |     `-UnaryOperator 0x561ff3e0a6b8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x561ff3e0a6a8 <col:54> 'Args *' this
|     `-CallExpr 0x561ff3e0ad88 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x561ff3e0a728 <col:9> '<bound member function type>' ->postparse 0x561ff3dfd5e8
|       | `-CXXThisExpr 0x561ff3e0a718 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x561ff3e0ad48 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x561ff3e0a758 <col:19> 'T *' lvalue Var 0x561ff3e0a338 's' 'T *'
|       | `-ParenExpr 0x561ff3e0ad28 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x561ff3e0acf8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x561ff3e0ace0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x561ff3e0acc8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x561ff3e0aca8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x561ff3e0ac78 <col:25> '<bound member function type>' .operator int (String::*)() const 0x561ff3996588
|       |     |       `-ImplicitCastExpr 0x561ff3e0ac60 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x561ff3e0a778 <col:25> 'String' lvalue Var 0x561ff3e0a0e8 'str' 'String'
|       |     |-CallExpr 0x561ff3e0aad0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x561ff3e0a960 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x561ff3e0a9a8 <col:59> 'P' lvalue ParmVar 0x561ff3de1908 'parser' 'P'
|       |     | |-DeclRefExpr 0x561ff3e0a9c8 <col:67> 'String' lvalue Var 0x561ff3e0a0e8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x561ff3e0aa78 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x561ff3e0aa08 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561ff3c8fc20 0x561ff3c8f798 0x561ff3c8f3c8 0x561ff3c8efe8 0x561ff3c8ec08 0x561ff3c8e838
|       |     | | `-DeclRefExpr 0x561ff3e0a9e8 <col:73> 'T *' lvalue Var 0x561ff3e0a338 's' 'T *'
|       |     | `-UnaryOperator 0x561ff3e0aab8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x561ff3e0aaa8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x561ff3e0ac40 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x561ff3e0ac20 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x561ff3e0abf0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x561ff3e0aba0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x561ff3e0ab30 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561ff3c8fc20 0x561ff3c8f798 0x561ff3c8f3c8 0x561ff3c8efe8 0x561ff3c8ec08 0x561ff3c8e838
|       |         | | `-DeclRefExpr 0x561ff3e0ab10 <col:87> 'T *' lvalue Var 0x561ff3e0a338 's' 'T *'
|       |         | `-DeclRefExpr 0x561ff3e0abd0 <col:91> 'const V' lvalue ParmVar 0x561ff3de1a48 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x561ff3e0ac10 <col:98> 'bool' true
|       `-DeclRefExpr 0x561ff3e0ad68 <col:106> 'Args::Slot *' lvalue Var 0x561ff3e0a058 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x561ff3de22a8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x561ff3de1cb8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3de1d38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x561ff3de1db8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x561ff3de2208 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x561ff3de1e80 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3de1f00 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x561ff3de1f78 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3de2018 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x561ff3de20b8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x561ff3e0bd98 <col:60, line:773:5>
|     |-DeclStmt 0x561ff3e0ae60 <line:767:9, col:26>
|     | `-VarDecl 0x561ff3e0adf8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x561ff3e0bd60 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x561ff3e0bd80 <line:768:13, col:58>
|       | `-VarDecl 0x561ff3e0ae88 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x561ff3e0b068 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x561ff3e0b038 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x561ff3e0b020 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x561ff3e0b000 <col:26, col:58> 'String' (CXXTemporary 0x561ff3e0b000)
|       |           `-CXXMemberCallExpr 0x561ff3e0af90 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x561ff3e0af00 <col:26> '<bound member function type>' ->find 0x561ff3dfd3d8
|       |             | `-CXXThisExpr 0x561ff3e0aef0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x561ff3e0afc8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x561ff3e0af30 <col:31> 'const char *' lvalue ParmVar 0x561ff3de1e80 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x561ff3e0afe0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x561ff3e0af50 <col:40> 'int' lvalue ParmVar 0x561ff3de1f00 'flags' 'int'
|       |             `-DeclRefExpr 0x561ff3e0af70 <col:47> 'Args::Slot *' lvalue Var 0x561ff3e0adf8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x561ff3e0b120 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x561ff3e0b108 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x561ff3e0b0e8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x561ff3e0b0b8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x561ff3996588
|       |       `-ImplicitCastExpr 0x561ff3e0b0a0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x561ff3e0b080 <col:20> 'String' lvalue Var 0x561ff3e0ae88 'str' 'String'
|       `-CompoundStmt 0x561ff3e0bd38 <col:61, line:772:9>
|         |-DeclStmt 0x561ff3e0b460 <line:769:13, col:66>
|         | `-VarDecl 0x561ff3e0b178 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x561ff3e0b430 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x561ff3e0b3a0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x561ff3e0b3e8 <col:49> 'T1' lvalue ParmVar 0x561ff3de2018 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x561ff3e0b418 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x561ff3e0b408 <col:61> 'Args *' this
|         |-DeclStmt 0x561ff3e0b7d0 <line:770:13, col:66>
|         | `-VarDecl 0x561ff3e0b4e8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x561ff3e0b7a0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x561ff3e0b710 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x561ff3e0b758 <col:49> 'T2' lvalue ParmVar 0x561ff3de20b8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x561ff3e0b788 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x561ff3e0b778 <col:61> 'Args *' this
|         `-CallExpr 0x561ff3e0bd08 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x561ff3e0b7f8 <col:13> '<bound member function type>' ->postparse 0x561ff3dfd5e8
|           | `-CXXThisExpr 0x561ff3e0b7e8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x561ff3e0bcc8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x561ff3e0b868 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x561ff3e0b828 <col:23> 'T1 *' lvalue Var 0x561ff3e0b178 's1' 'T1 *'
|           | | `-DeclRefExpr 0x561ff3e0b848 <col:29> 'T2 *' lvalue Var 0x561ff3e0b4e8 's2' 'T2 *'
|           | `-CallExpr 0x561ff3e0bc80 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x561ff3e0ba50 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x561ff3e0ba98 <col:63> 'P' lvalue ParmVar 0x561ff3de1f78 'parser' 'P'
|           |   |-DeclRefExpr 0x561ff3e0bab8 <col:71> 'String' lvalue Var 0x561ff3e0ae88 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x561ff3e0bb68 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x561ff3e0baf8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561ff3c8fc20 0x561ff3c8f798 0x561ff3c8f3c8 0x561ff3c8efe8 0x561ff3c8ec08 0x561ff3c8e838
|           |   | `-DeclRefExpr 0x561ff3e0bad8 <col:77> 'T1 *' lvalue Var 0x561ff3e0b178 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x561ff3e0bc28 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x561ff3e0bbb8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561ff3c8fc20 0x561ff3c8f798 0x561ff3c8f3c8 0x561ff3c8efe8 0x561ff3c8ec08 0x561ff3c8e838
|           |   | `-DeclRefExpr 0x561ff3e0bb98 <col:82> 'T2 *' lvalue Var 0x561ff3e0b4e8 's2' 'T2 *'
|           |   `-UnaryOperator 0x561ff3e0bc68 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x561ff3e0bc58 <col:87> 'Args *' this
|           `-DeclRefExpr 0x561ff3e0bce8 <col:94> 'Args::Slot *' lvalue Var 0x561ff3e0adf8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x561ff3de2698 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x561ff3de2328 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561ff3de25f8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x561ff3de23e0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3de2460 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x561ff3de24d8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x561ff3e0c2b0 <col:67, line:780:5>
|     |-DeclStmt 0x561ff3e0be30 <line:777:9, col:26>
|     | `-VarDecl 0x561ff3e0bdc8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x561ff3e0c278 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x561ff3e0c298 <line:778:13, col:58>
|       | `-VarDecl 0x561ff3e0be58 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x561ff3e0c038 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x561ff3e0c008 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x561ff3e0bff0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x561ff3e0bfd0 <col:26, col:58> 'String' (CXXTemporary 0x561ff3e0bfd0)
|       |           `-CXXMemberCallExpr 0x561ff3e0bf60 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x561ff3e0bed0 <col:26> '<bound member function type>' ->find 0x561ff3dfd3d8
|       |             | `-CXXThisExpr 0x561ff3e0bec0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x561ff3e0bf98 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x561ff3e0bf00 <col:31> 'const char *' lvalue ParmVar 0x561ff3de23e0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x561ff3e0bfb0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x561ff3e0bf20 <col:40> 'int' lvalue ParmVar 0x561ff3de2460 'flags' 'int'
|       |             `-DeclRefExpr 0x561ff3e0bf40 <col:47> 'Args::Slot *' lvalue Var 0x561ff3e0bdc8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x561ff3e0c0f0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x561ff3e0c0d8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x561ff3e0c0b8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x561ff3e0c088 <col:20> '<bound member function type>' .operator int (String::*)() const 0x561ff3996588
|       |       `-ImplicitCastExpr 0x561ff3e0c070 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x561ff3e0c050 <col:20> 'String' lvalue Var 0x561ff3e0be58 'str' 'String'
|       `-CallExpr 0x561ff3e0c248 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x561ff3e0c118 <col:13> '<bound member function type>' ->postparse 0x561ff3dfd5e8
|         | `-CXXThisExpr 0x561ff3e0c108 <col:13> 'Args *' implicit this
|         |-CallExpr 0x561ff3e0c1f8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x561ff3e0c168 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x561ff3e0c148 <col:23> 'P' lvalue ParmVar 0x561ff3de24d8 'parser' 'P'
|         | |-DeclRefExpr 0x561ff3e0c1b0 <col:36> 'String' lvalue Var 0x561ff3e0be58 'str' 'String'
|         | `-UnaryOperator 0x561ff3e0c1e0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x561ff3e0c1d0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x561ff3e0c228 <col:49> 'Args::Slot *' lvalue Var 0x561ff3e0bdc8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x561ff3de2a38 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x561ff3de2708 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561ff3de2998 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x561ff3de27c0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3de2840 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x561ff3de28b8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x561ff3e0cc20 <col:71, line:792:5>
|     |-DeclStmt 0x561ff3e0c348 <line:784:9, col:26>
|     | `-VarDecl 0x561ff3e0c2e0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x561ff3e0c418 <line:785:9, col:29>
|     | `-VarDecl 0x561ff3e0c378 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x561ff3e0c400 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x561ff3e0c3e0 <col:28> 'int' 1
|     |-WhileStmt 0x561ff3e0cad0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x561ff3e0caf0 <line:786:16, col:61>
|     | | `-VarDecl 0x561ff3e0c440 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x561ff3e0c620 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x561ff3e0c5f0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x561ff3e0c5d8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x561ff3e0c5b8 <col:29, col:61> 'String' (CXXTemporary 0x561ff3e0c5b8)
|     | |           `-CXXMemberCallExpr 0x561ff3e0c548 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x561ff3e0c4b8 <col:29> '<bound member function type>' ->find 0x561ff3dfd3d8
|     | |             | `-CXXThisExpr 0x561ff3e0c4a8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x561ff3e0c580 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x561ff3e0c4e8 <col:34> 'const char *' lvalue ParmVar 0x561ff3de27c0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x561ff3e0c598 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x561ff3e0c508 <col:43> 'int' lvalue ParmVar 0x561ff3de2840 'flags' 'int'
|     | |             `-DeclRefExpr 0x561ff3e0c528 <col:50> 'Args::Slot *' lvalue Var 0x561ff3e0c2e0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x561ff3e0c6d8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x561ff3e0c6c0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x561ff3e0c6a0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x561ff3e0c670 <col:23> '<bound member function type>' .operator int (String::*)() const 0x561ff3996588
|     | |       `-ImplicitCastExpr 0x561ff3e0c658 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x561ff3e0c638 <col:23> 'String' lvalue Var 0x561ff3e0c440 'str' 'String'
|     | `-CompoundStmt 0x561ff3e0caa8 <col:64, line:790:9>
|     |   |-CallExpr 0x561ff3e0c830 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x561ff3e0c700 <col:13> '<bound member function type>' ->postparse 0x561ff3dfd5e8
|     |   | | `-CXXThisExpr 0x561ff3e0c6f0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x561ff3e0c7e0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x561ff3e0c750 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x561ff3e0c730 <col:23> 'P' lvalue ParmVar 0x561ff3de28b8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x561ff3e0c798 <col:36> 'String' lvalue Var 0x561ff3e0c440 'str' 'String'
|     |   | | `-UnaryOperator 0x561ff3e0c7c8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x561ff3e0c7b8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x561ff3e0c810 <col:49> 'Args::Slot *' lvalue Var 0x561ff3e0c2e0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x561ff3e0c9c8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x561ff3e0c860 <col:13> 'int' lvalue Var 0x561ff3e0c378 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x561ff3e0c9b0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x561ff3e0c990 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x561ff3e0c8f8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x561ff3e0c8d8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x561ff3e0c8c0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x561ff3e0c880 <col:28> 'int' lvalue Var 0x561ff3e0c378 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x561ff3e0c8a0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x561ff3e0c978 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x561ff3e0c948 <col:49> 'bool' lvalue ->_read_status 0x561ff3dc1ed0
|     |   |         `-ImplicitCastExpr 0x561ff3e0c928 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x561ff3e0c918 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x561ff3e0ca78 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x561ff3e0c9e8 <col:13> 'int' lvalue ParmVar 0x561ff3de2840 'flags' 'int'
|     |     `-UnaryOperator 0x561ff3e0ca60 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x561ff3e0ca48 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x561ff3e0ca28 <col:23> 'const int' lvalue Var 0x561ff3dcaf28 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x561ff3e0cc00 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x561ff3e0cb38 <col:9> 'bool' lvalue ->_read_status 0x561ff3dc1ed0
|       | `-ImplicitCastExpr 0x561ff3e0cb18 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x561ff3e0cb08 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x561ff3e0cbe0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x561ff3e0cbc0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x561ff3e0cba8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x561ff3e0cb68 <col:25> 'int' lvalue Var 0x561ff3e0c378 'read_status' 'int'
|           `-IntegerLiteral 0x561ff3e0cb88 <col:40> 'int' 1
|-FunctionTemplateDecl 0x561ff3de2f18 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x561ff3de2aa8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3de2b28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561ff3de2e78 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x561ff3de2be8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3de2c68 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x561ff3de2ce0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3de2d88 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x561ff3e0dbb0 <col:84, line:805:5>
|     |-DeclStmt 0x561ff3e0ccc8 <line:796:9, col:26>
|     | `-VarDecl 0x561ff3e0cc60 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x561ff3e0cd98 <line:797:9, col:29>
|     | `-VarDecl 0x561ff3e0ccf8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x561ff3e0cd80 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x561ff3e0cd60 <col:28> 'int' 1
|     |-DeclStmt 0x561ff3e0d0d0 <line:798:9, col:71>
|     | `-VarDecl 0x561ff3e0cde8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x561ff3e0d0a0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x561ff3e0d010 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x561ff3e0d058 <col:55> 'T' lvalue ParmVar 0x561ff3de2d88 'variable' 'T &'
|     |     `-UnaryOperator 0x561ff3e0d088 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x561ff3e0d078 <col:66> 'Args *' this
|     |-WhileStmt 0x561ff3e0da60 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x561ff3e0da80 <line:799:16, col:61>
|     | | `-VarDecl 0x561ff3e0d0f8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x561ff3e0d2d8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x561ff3e0d2a8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x561ff3e0d290 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x561ff3e0d270 <col:29, col:61> 'String' (CXXTemporary 0x561ff3e0d270)
|     | |           `-CXXMemberCallExpr 0x561ff3e0d200 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x561ff3e0d170 <col:29> '<bound member function type>' ->find 0x561ff3dfd3d8
|     | |             | `-CXXThisExpr 0x561ff3e0d160 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x561ff3e0d238 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x561ff3e0d1a0 <col:34> 'const char *' lvalue ParmVar 0x561ff3de2be8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x561ff3e0d250 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x561ff3e0d1c0 <col:43> 'int' lvalue ParmVar 0x561ff3de2c68 'flags' 'int'
|     | |             `-DeclRefExpr 0x561ff3e0d1e0 <col:50> 'Args::Slot *' lvalue Var 0x561ff3e0cc60 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x561ff3e0d390 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x561ff3e0d378 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x561ff3e0d358 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x561ff3e0d328 <col:23> '<bound member function type>' .operator int (String::*)() const 0x561ff3996588
|     | |       `-ImplicitCastExpr 0x561ff3e0d310 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x561ff3e0d2f0 <col:23> 'String' lvalue Var 0x561ff3e0d0f8 'str' 'String'
|     | `-CompoundStmt 0x561ff3e0da38 <col:64, line:803:9>
|     |   |-CallExpr 0x561ff3e0d7c0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x561ff3e0d3b8 <col:13> '<bound member function type>' ->postparse 0x561ff3dfd5e8
|     |   | | `-CXXThisExpr 0x561ff3e0d3a8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x561ff3e0d780 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x561ff3e0d3e8 <col:23> 'T *' lvalue Var 0x561ff3e0cde8 's' 'T *'
|     |   | | `-CallExpr 0x561ff3e0d740 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x561ff3e0d5d0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x561ff3e0d618 <col:56> 'P' lvalue ParmVar 0x561ff3de2ce0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x561ff3e0d638 <col:64> 'String' lvalue Var 0x561ff3e0d0f8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x561ff3e0d6e8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x561ff3e0d678 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561ff3c8fc20 0x561ff3c8f798 0x561ff3c8f3c8 0x561ff3c8efe8 0x561ff3c8ec08 0x561ff3c8e838
|     |   | |   | `-DeclRefExpr 0x561ff3e0d658 <col:70> 'T *' lvalue Var 0x561ff3e0cde8 's' 'T *'
|     |   | |   `-UnaryOperator 0x561ff3e0d728 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x561ff3e0d718 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x561ff3e0d7a0 <col:81> 'Args::Slot *' lvalue Var 0x561ff3e0cc60 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x561ff3e0d958 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x561ff3e0d7f0 <col:13> 'int' lvalue Var 0x561ff3e0ccf8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x561ff3e0d940 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x561ff3e0d920 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x561ff3e0d888 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x561ff3e0d868 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x561ff3e0d850 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x561ff3e0d810 <col:28> 'int' lvalue Var 0x561ff3e0ccf8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x561ff3e0d830 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x561ff3e0d908 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x561ff3e0d8d8 <col:49> 'bool' lvalue ->_read_status 0x561ff3dc1ed0
|     |   |         `-ImplicitCastExpr 0x561ff3e0d8b8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x561ff3e0d8a8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x561ff3e0da08 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x561ff3e0d978 <col:13> 'int' lvalue ParmVar 0x561ff3de2c68 'flags' 'int'
|     |     `-UnaryOperator 0x561ff3e0d9f0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x561ff3e0d9d8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x561ff3e0d9b8 <col:23> 'const int' lvalue Var 0x561ff3dcaf28 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x561ff3e0db90 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x561ff3e0dac8 <col:9> 'bool' lvalue ->_read_status 0x561ff3dc1ed0
|       | `-ImplicitCastExpr 0x561ff3e0daa8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x561ff3e0da98 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x561ff3e0db70 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x561ff3e0db50 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x561ff3e0db38 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x561ff3e0daf8 <col:25> 'int' lvalue Var 0x561ff3e0ccf8 'read_status' 'int'
|           `-IntegerLiteral 0x561ff3e0db18 <col:40> 'int' 1
|-FunctionTemplateDecl 0x561ff3de34f8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x561ff3de2f90 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561ff3de3008 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561ff3de3458 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x561ff3de30c8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561ff3de3148 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x561ff3de31c0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x561ff3de3310 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x561ff3e0e9b8 <col:87, line:821:5>
|     |-DeclStmt 0x561ff3e0dc60 <line:809:9, col:26>
|     | `-VarDecl 0x561ff3e0dbf8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x561ff3e0dd30 <line:810:9, col:29>
|     | `-VarDecl 0x561ff3e0dc90 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x561ff3e0dd18 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x561ff3e0dcf8 <col:28> 'int' 1
|     |-DeclStmt 0x561ff3e0df78 <line:811:9, col:38>
|     | `-VarDecl 0x561ff3e0de60 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x561ff3e0df50 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x561ff3e0ded8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x561ff3e0df30 <col:29> 'Vector<T>' lvalue ParmVar 0x561ff3de3310 'variable' 'Vector<T> &'
|     |-WhileStmt 0x561ff3e0e868 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x561ff3e0e888 <line:812:16, col:61>
|     | | `-VarDecl 0x561ff3e0dfa0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x561ff3e0e180 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x561ff3e0e150 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x561ff3e0e138 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x561ff3e0e118 <col:29, col:61> 'String' (CXXTemporary 0x561ff3e0e118)
|     | |           `-CXXMemberCallExpr 0x561ff3e0e0a8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x561ff3e0e018 <col:29> '<bound member function type>' ->find 0x561ff3dfd3d8
|     | |             | `-CXXThisExpr 0x561ff3e0e008 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x561ff3e0e0e0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x561ff3e0e048 <col:34> 'const char *' lvalue ParmVar 0x561ff3de30c8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x561ff3e0e0f8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x561ff3e0e068 <col:43> 'int' lvalue ParmVar 0x561ff3de3148 'flags' 'int'
|     | |             `-DeclRefExpr 0x561ff3e0e088 <col:50> 'Args::Slot *' lvalue Var 0x561ff3e0dbf8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x561ff3e0e238 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x561ff3e0e220 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x561ff3e0e200 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x561ff3e0e1d0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x561ff3996588
|     | |       `-ImplicitCastExpr 0x561ff3e0e1b8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x561ff3e0e198 <col:23> 'String' lvalue Var 0x561ff3e0dfa0 'str' 'String'
|     | `-CompoundStmt 0x561ff3e0e830 <col:64, line:819:9>
|     |   |-DeclStmt 0x561ff3e0e2f8 <line:813:13, col:23>
|     |   | `-VarDecl 0x561ff3e0e260 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x561ff3e0e2d8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x561ff3e0e478 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x561ff3e0e320 <col:13> '<bound member function type>' ->postparse 0x561ff3dfd5e8
|     |   | | `-CXXThisExpr 0x561ff3e0e310 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x561ff3e0e420 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x561ff3e0e370 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x561ff3e0e350 <col:23> 'P' lvalue ParmVar 0x561ff3de31c0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x561ff3e0e3b8 <col:36> 'String' lvalue Var 0x561ff3e0dfa0 'str' 'String'
|     |   | | |-DeclRefExpr 0x561ff3e0e3d8 <col:41> 'T' lvalue Var 0x561ff3e0e260 'sx' 'T'
|     |   | | `-UnaryOperator 0x561ff3e0e408 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x561ff3e0e3f8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x561ff3e0e458 <col:53> 'Args::Slot *' lvalue Var 0x561ff3e0dbf8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x561ff3e0e5d0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x561ff3e0e508 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x561ff3e0e4d8 <col:17> 'bool' lvalue ->_read_status 0x561ff3dc1ed0
|     |   | |   `-ImplicitCastExpr 0x561ff3e0e4b8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x561ff3e0e4a8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x561ff3e0e5a8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x561ff3e0e540 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x561ff3e0e520 <col:17> 'Vector<T> *' lvalue Var 0x561ff3e0de60 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x561ff3e0e588 <col:30> 'T' lvalue Var 0x561ff3e0e260 'sx' 'T'
|     |   |-BinaryOperator 0x561ff3e0e750 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x561ff3e0e5e8 <col:13> 'int' lvalue Var 0x561ff3e0dc90 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x561ff3e0e738 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x561ff3e0e718 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x561ff3e0e680 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x561ff3e0e660 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x561ff3e0e648 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x561ff3e0e608 <col:28> 'int' lvalue Var 0x561ff3e0dc90 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x561ff3e0e628 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x561ff3e0e700 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x561ff3e0e6d0 <col:49> 'bool' lvalue ->_read_status 0x561ff3dc1ed0
|     |   |         `-ImplicitCastExpr 0x561ff3e0e6b0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x561ff3e0e6a0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x561ff3e0e800 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x561ff3e0e770 <col:13> 'int' lvalue ParmVar 0x561ff3de3148 'flags' 'int'
|     |     `-UnaryOperator 0x561ff3e0e7e8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x561ff3e0e7d0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x561ff3e0e7b0 <col:23> 'const int' lvalue Var 0x561ff3dcaf28 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x561ff3e0e998 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x561ff3e0e8d0 <col:9> 'bool' lvalue ->_read_status 0x561ff3dc1ed0
|       | `-ImplicitCastExpr 0x561ff3e0e8b0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x561ff3e0e8a0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x561ff3e0e978 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x561ff3e0e958 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x561ff3e0e940 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x561ff3e0e900 <col:25> 'int' lvalue Var 0x561ff3e0dc90 'read_status' 'int'
|           `-IntegerLiteral 0x561ff3e0e920 <col:40> 'int' 1
|-AccessSpecDecl 0x561ff3de3570 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x561ff3de3598 prev 0x561ff3dc9228 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x561ff3de3690 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x561ff3de3780 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x561ff3e0e9f0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x561ff3de3870 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x561ff3e0ea00 <col:25, line:830:9>
| |-CXXMethodDecl 0x561ff3de3970 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x561ff3de3a20 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x561ff3de3ac8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x561ff3de3ac8
| | `-ParmVarDecl 0x561ff3de3bd8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x561ff3de4398 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x561ff3de4398
|   `-ParmVarDecl 0x561ff3de44a8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x561ff3de3c48 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x561ff3de3da8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x561ff3de3fa0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x561ff3de3e50 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x561ff3de3ec8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x561ff3e0ebe0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x561ff3de4258 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x561ff3e0ea50 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x561ff3e0ea10 <col:20> 'void *' lvalue ParmVar 0x561ff3de3e50 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x561ff3de42c0 '_slot' 'char *'
| | | `-CXXNewExpr 0x561ff3e0ead8 <col:32, col:45> 'char *' array Function 0x561ff38ab358 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x561ff3e0eac0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x561ff3e0ea90 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x561ff3de3ec8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x561ff3de4320 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x561ff3e0eba0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x561ff3e0eb60 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x561ff3de3ec8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x561ff3e0ec60 <col:61, line:838:9>
| |-CXXDestructorDecl 0x561ff3de40a0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x561ff3de3870 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x561ff3e0ece8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x561ff3e0ecc8 <line:840:13, col:22> 'void' array Function 0x561ff38ab6b8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x561ff3e0ecb0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x561ff3e0ec80 <col:22> 'char *' lvalue ->_slot 0x561ff3de42c0
| |         `-CXXThisExpr 0x561ff3e0ec70 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x561ff3de41a0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x561ff3de3970 Slot::store 'void ()' ]
| | `-CompoundStmt 0x561ff3e0eed8 <col:22, line:844:9>
| |   `-CallExpr 0x561ff3e0ee40 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x561ff3e0ee28 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x561ff3e0ee08 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x561ff3981db8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x561ff3e0ee78 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x561ff3e0ed58 <col:20> 'void *' lvalue ->_ptr 0x561ff3de4258
| |     |   `-CXXThisExpr 0x561ff3e0ed48 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x561ff3e0eea8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x561ff3e0ee90 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x561ff3e0ed98 <col:26> 'char *' lvalue ->_slot 0x561ff3de42c0
| |     |     `-CXXThisExpr 0x561ff3e0ed88 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x561ff3e0eec0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x561ff3e0edd8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x561ff3de4320
| |         `-CXXThisExpr 0x561ff3e0edc8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x561ff3de4258 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x561ff3de42c0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x561ff3de4320 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x561ff3de4518 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x561ff3de4518
| | `-ParmVarDecl 0x561ff3de4628 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x561ff3de46c8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x561ff3de46c8
|   `-ParmVarDecl 0x561ff3de47d8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x561ff3de4978 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x561ff3de4848 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x561ff3de48e8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x561ff3de4c10 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x561ff3de4e08 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x561ff3de4cd8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x561ff3de4f88 '_ptr' 'T *'
|   | | `-ParenListExpr 0x561ff3e0ef10 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x561ff3e0eef0 <col:20> 'T *' lvalue ParmVar 0x561ff3de4cd8 'ptr' 'T *'
|   | `-CompoundStmt 0x561ff3e0ef60 <col:25, line:854:9>
|   |-CXXMethodDecl 0x561ff3de4ed8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x561ff3de3970 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x561ff3e0f110 <col:22, line:857:9>
|   |   `-CallExpr 0x561ff3e0f0e0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x561ff3e0ef70 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x561ff3ac42f8 0x561ff3973028
|   |     |-CXXOperatorCallExpr 0x561ff3e0f070 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x561ff3e0f000 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561ff3c8fc20 0x561ff3c8f798 0x561ff3c8f3c8 0x561ff3c8efe8 0x561ff3c8ec08 0x561ff3c8e838
|   |     | `-MemberExpr 0x561ff3e0efd0 <col:29> 'T *' lvalue ->_ptr 0x561ff3de4f88
|   |     |   `-CXXThisExpr 0x561ff3e0efc0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x561ff3e0f0b0 <col:35> 'T' lvalue ->_slot 0x561ff3de4fe8
|   |       `-CXXThisExpr 0x561ff3e0f0a0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x561ff3de4f88 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x561ff3de4fe8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x561ff3de5050 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x561ff3de5150 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x561ff3de51a0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561ff3de5130 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x561ff3de5110 <col:31> 'int' 48
|-FieldDecl 0x561ff3de51c8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x561ff3de5228 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x561ff3de5288 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x561ff3de53c0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x561ff3dfcc80 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x561ff3dfcce0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x561ff3dfcd90 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x561ff3dfcfb8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x561ff3dfcec0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x561ff3dfd108 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x561ff3dfd078 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x561ff3dfd3d8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x561ff3dfd1c8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x561ff3dfd248 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x561ff3dfd2f0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x561ff3dfd5e8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x561ff3dfd4a0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x561ff3dfd518 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x561ff3dfd6b8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x561ff3dfd808 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x561ff3dfd770 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x561ff3dfdb98 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x561ff3dfd8c8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x561ff3dfd948 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x561ff3dfd9f0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x561ff3dfdaa8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x561ff3dfddc0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x561ff3dfdc70 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x561ff3dfdce8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x561ff3dfe0d8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x561ff3dfde70 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x561ff3dfe038 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x561ff3dfdf48 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.7*, %class.Vector.9, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.7*, %class.Vector.9, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff396d638 prev 0x561ff3c9a800 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561ff396d730 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x561ff396d820 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x561ff396d948 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x561ff396dac8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x561ff396dc48 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x561ff396ddc8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x561ff3ca6938 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x561ff3ca71a8 <col:11>
|-CXXDestructorDecl 0x561ff3ca6a10 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x561ff3ca6b48 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x561ff3ca6b48
| `-ParmVarDecl 0x561ff3ca6c58 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x561ff3ca6cf8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x561ff3ca6cf8
| `-ParmVarDecl 0x561ff3ca6e08 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x561ff3ca9b38 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x561ff3ca9c48 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x561ff3ca9ec8 <col:11>
|   `-ReturnStmt 0x561ff3ca9eb8 <col:11>
|     `-UnaryOperator 0x561ff3ca9ea0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561ff3ca9e90 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x561ff3ca9cb8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x561ff3ca9cb8
  `-ParmVarDecl 0x561ff3ca9dc8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff396de30 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561ff396df48 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x561ff396dfe8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x561ff396e050 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x561ff396e0b8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x561ff396e120 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x561ff3c9e170 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x561ff3c9e230 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x561ff3c9e290 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x561ff3c9e2f0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x561ff3ca6848 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x561ff396dfe8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x561ff3ca71b8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x561ff3ca7210 <col:12>
|-CXXConstructorDecl 0x561ff3ca6e78 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x561ff3ca6e78
| `-ParmVarDecl 0x561ff3ca6f88 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x561ff3ca7028 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x561ff3ca7028
| `-ParmVarDecl 0x561ff3ca7138 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x561ff3ca9220 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff3c93ef0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x561ff3c94008 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x561ff3c94098 <col:16, col:22> col:16 public
|-EnumDecl 0x561ff3c940c0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x561ff3c941c0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x561ff3c942a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3c941a0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x561ff3c94180 <col:21> 'int' 28
| `-EnumConstantDecl 0x561ff3c94250 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x561ff3c942b8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561ff3c94230 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x561ff3c94210 <col:22> 'int' 64
|-CXXMethodDecl 0x561ff3c945f8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x561ff3c942e0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x561ff3c94360 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x561ff3c943d8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x561ff3c94450 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x561ff3c946b8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x561ff3c948b8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x561ff3c94730 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x561ff3c947a8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x561ff3c94968 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x561ff3c94ac8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x561ff3c949d8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x561ff3c94b70 <col:72> warn_unused_result ""
|-TypedefDecl 0x561ff3c94ea0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x561ff3c94e30 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x561ff3c94dd0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x561ff3c94d90 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x561ff37554e0 'void'
|       |-PointerType 0x561ff39ab2b0 'unsigned char *'
|       | `-BuiltinType 0x561ff37555e0 'unsigned char'
|       |-TypedefType 0x561ff37fd400 'size_t' sugar
|       | |-Typedef 0x561ff37c5be0 'size_t'
|       | `-BuiltinType 0x561ff3755640 'unsigned long'
|       `-PointerType 0x561ff3755ce0 'void *'
|         `-BuiltinType 0x561ff37554e0 'void'
|-CXXMethodDecl 0x561ff3c95318 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x561ff3c94f10 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x561ff3c94f88 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x561ff3c95020 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x561ff3c950a0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x561ff3c9f780 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x561ff3c9f768 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x561ff3c9f730 <col:58> 'int' 0
| |-ParmVarDecl 0x561ff3c95120 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x561ff3c9f7a8 <col:76> 'int' 0
| |-ParmVarDecl 0x561ff3c951a0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x561ff3c9f7c8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x561ff3c953e8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x561ff3c95468 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x561ff3c95528 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x561ff3c955c8 <col:20>
| `-OptimizeNoneAttr 0x561ff3c95620 <col:30>
|-CXXMethodDecl 0x561ff3c95698 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x561ff3c95738 <col:20>
| `-OptimizeNoneAttr 0x561ff3c95790 <col:30>
|-CXXMethodDecl 0x561ff3c95808 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x561ff3c958a8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x561ff3c95958 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x561ff3c959f8 <col:20>
| |-OptimizeNoneAttr 0x561ff3c95a50 <col:30>
| `-WarnUnusedResultAttr 0x561ff3c95a78 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x561ff3c95ad0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x561ff3c95b70 <col:20>
| `-OptimizeNoneAttr 0x561ff3c95bc8 <col:30>
|-CXXMethodDecl 0x561ff3c95c18 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x561ff3c95cb8 <col:20>
| `-OptimizeNoneAttr 0x561ff3c95d10 <col:30>
|-CXXMethodDecl 0x561ff3c95d58 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x561ff3c95df8 <col:20>
| `-OptimizeNoneAttr 0x561ff3c95e50 <col:30>
|-CXXMethodDecl 0x561ff3c95e98 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x561ff3c95f58 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x561ff3c96020 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x561ff3c960e8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x561ff3c961a8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x561ff3c962c8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x561ff3c9f890 <col:54, line:99:5>
|   `-ReturnStmt 0x561ff3c9f880 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x561ff3c9f868 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x561ff3c9f838 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x561ff3c9e628
|         `-CXXThisExpr 0x561ff3c9f828 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x561ff3c96468 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x561ff3c96378 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x561ff3c9f940 <col:67, line:103:5>
|   `-BinaryOperator 0x561ff3c9f920 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x561ff3c9f8b8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x561ff3c9e628
|     | `-CXXThisExpr 0x561ff3c9f8a8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x561ff3c9f908 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x561ff3c9f8e8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x561ff3c96378 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x561ff3c96560 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x561ff3c9f9c0 <col:33, line:107:5>
|   `-ReturnStmt 0x561ff3c9f9b0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x561ff3c9f998 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x561ff3c9f968 <col:16> 'void *' lvalue ->_destructor_argument 0x561ff3c9e690
|         `-CXXThisExpr 0x561ff3c9f958 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x561ff3c96620 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x561ff3c9fff0 <col:25, line:113:5>
|   |-ParenExpr 0x561ff3c9fd38 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x561ff3c9fd08 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x561ff3c9fa78 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x561ff3c9fa50 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x561ff3c9fa18 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x561ff3c9f9e8 <col:24> '<bound member function type>' ->shared 0x561ff3c95698
|   |   |       `-ImplicitCastExpr 0x561ff3c9fa38 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x561ff3c9f9d8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x561ff3c9fad8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561ff3c9fab8 <col:42> 'int' 0
|   |   `-CallExpr 0x561ff3c9fc68 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x561ff3c9fc50 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561ff3c9fc30 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561ff37f4160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561ff3c9fca8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3c9fb48 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x561ff3c9fcc0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3c9fb70 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561ff3c9fcd8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561ff3c9fba8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x561ff3c9fcf0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561ff3c9fc18 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561ff3c9fc00 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561ff3c9fbc8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x561ff3c9ff38 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x561ff3c9fd68 <col:2> 'unsigned char *' lvalue ->_head 0x561ff3c9e430
|   | | `-CXXThisExpr 0x561ff3c9fd58 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x561ff3c9ff20 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x561ff3c9ff00 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x561ff3c9fda8 <col:10> 'unsigned char *' lvalue ->_data 0x561ff3c9e498
|   |     | `-CXXThisExpr 0x561ff3c9fd98 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x561ff3c9fee8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x561ff3c9fec8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x561ff3c9fde8 <col:18> 'unsigned char *' lvalue ->_tail 0x561ff3c9e500
|   |         | `-CXXThisExpr 0x561ff3c9fdd8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x561ff3c9feb0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x561ff3c9fe90 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x561ff3c9fe28 <col:26> 'unsigned char *' lvalue ->_end 0x561ff3c9e568
|   |             | `-CXXThisExpr 0x561ff3c9fe18 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x561ff3c9fe78 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x561ff3c9fe58 <col:33> 'int' 0
|   `-BinaryOperator 0x561ff3c9ffd0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x561ff3c9ff68 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x561ff3c9e628
|     | `-CXXThisExpr 0x561ff3c9ff58 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x561ff3c9ffb8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x561ff3c9ff98 <col:16> 'int' 0
|-CXXMethodDecl 0x561ff3c96760 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x561ff3c966d0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x561ff3c96808 <col:20>
| |-OptimizeNoneAttr 0x561ff3c96860 <col:30>
| `-WarnUnusedResultAttr 0x561ff3c96888 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x561ff3c96958 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x561ff3c968c8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x561ff3c96a00 <col:20>
| |-OptimizeNoneAttr 0x561ff3c96a58 <col:30>
| `-WarnUnusedResultAttr 0x561ff3c96a80 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x561ff3c96bb8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x561ff3c96ac0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x561ff3c96c60 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x561ff3c96d60 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x561ff3c96cd0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x561ff3c96e08 <col:20>
| `-OptimizeNoneAttr 0x561ff3c96e60 <col:30>
|-CXXMethodDecl 0x561ff3c96f28 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x561ff3c96e98 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x561ff3c96fd0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x561ff3c970d0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x561ff3c97040 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x561ff3c97178 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x561ff3c97278 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x561ff3c971e8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x561ff3c97320 <col:20>
| `-OptimizeNoneAttr 0x561ff3c97378 <col:30>
|-CXXMethodDecl 0x561ff3c97508 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x561ff3c973b8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x561ff3c97430 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x561ff3c9f7e8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x561ff3c975b8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x561ff3c977b8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x561ff3c97630 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x561ff3c976a8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff3c979c8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x561ff3c97878 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x561ff3c978f0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff3c97c40 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x561ff3c97a88 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x561ff3c97b08 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x561ff3c9f7f8 <col:39> 'int' 0
|-CXXMethodDecl 0x561ff3c97d10 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x561ff3c97dd8 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x561ff3c97ea0 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x561ff3c97f60 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x561ff3c98028 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x561ff3c98170 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x561ff3c980e0 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x561ff3c98340 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x561ff3c98230 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x561ff3c982a8 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff3c98410 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x561ff3c984d0 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x561ff3c98570 <col:20>
| `-OptimizeNoneAttr 0x561ff3c985c8 <col:30>
|-CXXMethodDecl 0x561ff3c98618 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x561ff3c986b8 <col:20>
| `-OptimizeNoneAttr 0x561ff3c98710 <col:30>
|-CXXMethodDecl 0x561ff3c98760 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x561ff3c98820 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x561ff3c988e8 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x561ff3c98988 <col:20>
| `-OptimizeNoneAttr 0x561ff3c989e0 <col:30>
|-CXXMethodDecl 0x561ff3c98b30 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x561ff3c98a20 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x561ff3c98a98 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff3c98c80 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x561ff3c98bf0 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff3c98d48 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x561ff3c98e08 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x561ff3c98ea8 <col:20>
| `-OptimizeNoneAttr 0x561ff3c98f00 <col:30>
|-CXXMethodDecl 0x561ff3c98f50 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x561ff3c98ff0 <col:20>
| `-OptimizeNoneAttr 0x561ff3c99048 <col:30>
|-CXXMethodDecl 0x561ff3c99098 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x561ff3c99160 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x561ff3c99200 <col:20>
| `-OptimizeNoneAttr 0x561ff3c99258 <col:30>
|-CXXMethodDecl 0x561ff3c992a0 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x561ff3c993b8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x561ff3c99528 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x561ff3c99468 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x561ff3c99618 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x561ff3c996b8 <col:20>
| `-OptimizeNoneAttr 0x561ff3c99710 <col:30>
|-CXXMethodDecl 0x561ff3c99760 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x561ff3c99820 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x561ff3c99a58 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x561ff3c998d0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x561ff3c99948 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x561ff3c99b08 <col:20>
| `-OptimizeNoneAttr 0x561ff3c99b60 <col:30>
|-CXXMethodDecl 0x561ff3c99c08 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x561ff3c99ca8 <col:20>
| `-OptimizeNoneAttr 0x561ff3c99d00 <col:30>
|-CXXMethodDecl 0x561ff3c99d50 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x561ff3c99df0 <col:20>
| `-OptimizeNoneAttr 0x561ff3c99e48 <col:30>
|-CXXMethodDecl 0x561ff3c99e90 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x561ff3c99f30 <col:20>
| `-OptimizeNoneAttr 0x561ff3c99f88 <col:30>
|-CXXMethodDecl 0x561ff3c9a088 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x561ff3c99fc0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x561ff3c9a130 <col:20>
| `-OptimizeNoneAttr 0x561ff3c9a188 <col:30>
|-CXXMethodDecl 0x561ff3c9a348 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x561ff3c9a1c0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x561ff3c9a238 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x561ff3c9a3f8 <col:20>
| `-OptimizeNoneAttr 0x561ff3c9a450 <col:30>
|-CXXMethodDecl 0x561ff3c9a4f8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x561ff3c9a618 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x561ff3c9a738 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x561ff3c9a7d8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x561ff3c9a800 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x561ff3c9a928 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x561ff3c9a9c8 <col:20>
| `-OptimizeNoneAttr 0x561ff3c9aa20 <col:30>
|-CXXMethodDecl 0x561ff3c9aac8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x561ff3c9ab68 <col:20>
| `-OptimizeNoneAttr 0x561ff3c9abc0 <col:30>
|-AccessSpecDecl 0x561ff3c9abe8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x561ff3c9ac10 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x561ff3c9ad10 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x561ff3c9ad60 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561ff3c9acf0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x561ff3c9acd0 <col:14> 'int' 48
|-CXXMethodDecl 0x561ff3c9adc8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x561ff3c9ae68 <col:20>
| `-OptimizeNoneAttr 0x561ff3c9aec0 <col:30>
|-CXXMethodDecl 0x561ff3c9af38 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x561ff3c9afd8 <col:20>
| `-OptimizeNoneAttr 0x561ff3c9b030 <col:30>
|-CXXMethodDecl 0x561ff3c9b0f8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x561ff3c9b068 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x561ff3c9b298 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x561ff3c9b438 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x561ff3c9b348 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x561ff3c9b4e0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x561ff3c9b5e0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x561ff3c9b990 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3c9b5c0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x561ff3c9b5a0 <col:9> 'int' 0
| |-EnumConstantDecl 0x561ff3c9b670 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x561ff3c9b9a8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3c9b650 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x561ff3c9b630 <col:14> 'int' 1
| |-EnumConstantDecl 0x561ff3c9b700 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x561ff3c9b9c0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3c9b6e0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x561ff3c9b6c0 <col:14> 'int' 2
| |-EnumConstantDecl 0x561ff3c9b790 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x561ff3c9b9d8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3c9b770 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x561ff3c9b750 <col:14> 'int' 3
| |-EnumConstantDecl 0x561ff3c9b820 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x561ff3c9b9f0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3c9b800 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x561ff3c9b7e0 <col:13> 'int' 4
| |-EnumConstantDecl 0x561ff3c9b8b0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x561ff3c9ba08 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3c9b890 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x561ff3c9b870 <col:13> 'int' 5
| `-EnumConstantDecl 0x561ff3c9b940 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x561ff3c9ba20 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561ff3c9b920 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x561ff3c9b900 <col:14> 'int' 6
|-CXXMethodDecl 0x561ff3c9ba88 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x561ff3c9bb28 <col:20>
| `-OptimizeNoneAttr 0x561ff3c9bb80 <col:30>
|-CXXMethodDecl 0x561ff395f188 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x561ff3c9bbb8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x561ff395f230 <col:20>
| `-OptimizeNoneAttr 0x561ff395f288 <col:30>
|-CXXMethodDecl 0x561ff395f2f8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x561ff395f420 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x561ff395f598 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x561ff395f4d0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x561ff395f660 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x561ff395f728 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x561ff395f868 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x561ff395f7d8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x561ff395f910 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x561ff395fa10 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x561ff395fc10 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff395f9f0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x561ff395f9d0 <col:23> 'int' 0
| |-EnumConstantDecl 0x561ff395faa0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x561ff395fc28 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff395fa80 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x561ff395fa60 <col:45> 'int' 4
| |-EnumConstantDecl 0x561ff395fb30 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x561ff395fc40 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff395fb10 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x561ff395faf0 <col:24> 'int' 0
| `-EnumConstantDecl 0x561ff395fbc0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x561ff395fc58 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561ff395fba0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x561ff395fb80 <col:47> 'int' 16
|-CXXMethodDecl 0x561ff395fcb8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x561ff395fe28 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x561ff395fd68 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x561ff395fed0 <col:20>
| `-OptimizeNoneAttr 0x561ff395ff28 <col:30>
|-CXXMethodDecl 0x561ff395ff78 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x561ff3ca0110 <col:18, col:36>
|   `-ReturnStmt 0x561ff3ca0100 <col:20, col:33>
|     `-ImplicitCastExpr 0x561ff3ca00e8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x561ff3ca00c8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x561ff3ca0098 <col:27> '<bound member function type>' ->xanno 0x561ff3c9aac8
|           `-CXXThisExpr 0x561ff3ca0088 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x561ff3960070 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x561ff3ca0220 <col:30, col:48>
|   `-ReturnStmt 0x561ff3ca0210 <col:32, col:45>
|     `-ImplicitCastExpr 0x561ff3ca01f8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x561ff3ca01d8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x561ff3ca01a8 <col:39> '<bound member function type>' ->xanno 0x561ff3c9a928
|           `-CXXThisExpr 0x561ff3ca0198 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x561ff3960158 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x561ff3ca03b8 <col:24, col:50>
|   `-ReturnStmt 0x561ff3ca03a8 <col:26, col:47>
|     `-UnaryOperator 0x561ff3ca0390 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x561ff3ca0370 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x561ff3ca0358 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x561ff3ca0308 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x561ff396d948
|         |   `-CXXMemberCallExpr 0x561ff3ca02e8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x561ff3ca02b8 <col:34> '<bound member function type>' ->xanno 0x561ff3c9aac8
|         |       `-CXXThisExpr 0x561ff3ca02a8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x561ff3ca0338 <col:46> 'int' 0
|-CXXMethodDecl 0x561ff3960248 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x561ff3ca0588 <col:36, col:62>
|   `-ReturnStmt 0x561ff3ca0578 <col:38, col:59>
|     `-UnaryOperator 0x561ff3ca0560 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x561ff3ca0540 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x561ff3ca0528 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x561ff3ca04a0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x561ff396d948
|         |   `-CXXMemberCallExpr 0x561ff3ca0480 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x561ff3ca0450 <col:46> '<bound member function type>' ->xanno 0x561ff3c9a928
|         |       `-CXXThisExpr 0x561ff3ca0440 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x561ff3ca04d0 <col:58> 'int' 0
|-CXXMethodDecl 0x561ff3960368 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x561ff3ca0720 <col:26, col:53>
|   `-ReturnStmt 0x561ff3ca0710 <col:28, col:50>
|     `-UnaryOperator 0x561ff3ca06f8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x561ff3ca06d8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x561ff3ca06c0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x561ff3ca0670 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x561ff396dc48
|         |   `-CXXMemberCallExpr 0x561ff3ca0650 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x561ff3ca0620 <col:36> '<bound member function type>' ->xanno 0x561ff3c9aac8
|         |       `-CXXThisExpr 0x561ff3ca0610 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x561ff3ca06a0 <col:49> 'int' 0
|-CXXMethodDecl 0x561ff3960488 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x561ff3ca08f8 <col:38, col:65>
|   `-ReturnStmt 0x561ff3ca08e8 <col:40, col:62>
|     `-UnaryOperator 0x561ff3ca08d0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x561ff3ca08b0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x561ff3ca0898 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x561ff3ca0808 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x561ff396dc48
|         |   `-CXXMemberCallExpr 0x561ff3ca07e8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x561ff3ca07b8 <col:48> '<bound member function type>' ->xanno 0x561ff3c9a928
|         |       `-CXXThisExpr 0x561ff3ca07a8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x561ff3ca0838 <col:61> 'int' 0
|-CXXMethodDecl 0x561ff3960638 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x561ff3960540 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x561ff3ca0fc8 <col:34, line:463:5>
|   |-ParenExpr 0x561ff3ca0e10 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x561ff3ca0de0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x561ff3ca0a48 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561ff3ca0a18 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561ff3ca0968 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561ff3ca0950 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561ff3ca0910 <col:23> 'int' lvalue ParmVar 0x561ff3960540 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561ff3ca0930 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561ff3ca09f8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561ff3ca09c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561ff3ca0988 <col:33> 'int' lvalue ParmVar 0x561ff3960540 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x561ff3ca09e0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x561ff3ca09a8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561ff3c9ad10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x561ff3ca0aa8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561ff3ca0a88 <col:56> 'int' 0
|   |   `-CallExpr 0x561ff3ca0d40 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x561ff3ca0d28 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561ff3ca0d08 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561ff37f4160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561ff3ca0d80 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3ca0b98 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x561ff3ca0d98 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3ca0bc8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561ff3ca0db0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561ff3ca0c00 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x561ff3ca0dc8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561ff3ca0cf0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561ff3ca0cd8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561ff3ca0c98 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x561ff3ca0fb8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x561ff3ca0fa0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x561ff3ca0f80 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x561ff3ca0f50 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x561ff3ca0f00 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x561ff396d948
|         |   `-CXXMemberCallExpr 0x561ff3ca0ee0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x561ff3ca0eb0 <col:9> '<bound member function type>' ->xanno 0x561ff3c9a928
|         |       `-CXXThisExpr 0x561ff3ca0ea0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x561ff3ca0f68 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x561ff3ca0f30 <col:21> 'int' lvalue ParmVar 0x561ff3960540 'i' 'int'
|-CXXMethodDecl 0x561ff3960888 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x561ff39606f8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x561ff3960770 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x561ff3ca1658 <col:40, line:472:5>
|   |-ParenExpr 0x561ff3ca1470 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x561ff3ca1440 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x561ff3ca1120 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561ff3ca10f0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561ff3ca1040 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561ff3ca1028 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561ff3ca0fe8 <col:23> 'int' lvalue ParmVar 0x561ff39606f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561ff3ca1008 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561ff3ca10d0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561ff3ca10a0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561ff3ca1060 <col:33> 'int' lvalue ParmVar 0x561ff39606f8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x561ff3ca10b8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x561ff3ca1080 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561ff3c9ad10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x561ff3ca1180 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561ff3ca1160 <col:56> 'int' 0
|   |   `-CallExpr 0x561ff3ca13a0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x561ff3ca1388 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561ff3ca1368 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561ff37f4160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561ff3ca13e0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3ca11f0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x561ff3ca13f8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3ca1220 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561ff3ca1410 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561ff3ca1258 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x561ff3ca1428 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561ff3ca1350 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561ff3ca1338 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561ff3ca12f8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x561ff3ca1638 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x561ff3ca15e0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x561ff3ca15b0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x561ff3ca1560 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x561ff396d948
|     | |   `-CXXMemberCallExpr 0x561ff3ca1540 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x561ff3ca1510 <col:2> '<bound member function type>' ->xanno 0x561ff3c9aac8
|     | |       `-CXXThisExpr 0x561ff3ca1500 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x561ff3ca15c8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x561ff3ca1590 <col:14> 'int' lvalue ParmVar 0x561ff39606f8 'i' 'int'
|     `-ImplicitCastExpr 0x561ff3ca1620 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x561ff3ca1600 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x561ff3960770 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x561ff3960a48 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x561ff3960950 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x561ff3ca1dd8 <col:36, line:485:5>
|   |-ParenExpr 0x561ff3ca1b40 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x561ff3ca1b10 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561ff3ca17f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561ff3ca17c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561ff3ca16d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561ff3ca16b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561ff3ca1678 <col:23> 'int' lvalue ParmVar 0x561ff3960950 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561ff3ca1698 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561ff3ca17a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561ff3ca1788 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561ff3ca16f0 <col:33> 'int' lvalue ParmVar 0x561ff3960950 'i' 'int'
|   |   |     `-BinaryOperator 0x561ff3ca1768 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561ff3ca1750 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561ff3ca1710 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561ff3c9ad10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561ff3ca1730 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x561ff3ca1850 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561ff3ca1830 <col:60> 'int' 0
|   |   `-CallExpr 0x561ff3ca1a70 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561ff3ca1a58 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561ff3ca1a38 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561ff37f4160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561ff3ca1ab0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3ca18c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x561ff3ca1ac8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3ca18f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561ff3ca1ae0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561ff3ca1930 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x561ff3ca1af8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561ff3ca1a20 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561ff3ca1a08 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561ff3ca19c8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x561ff3ca1dc8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x561ff3ca1db0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x561ff3ca1d98 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x561ff3ca1d68 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x561ff3ca1d08 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x561ff3ca1cd8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x561ff3ca1c50 <col:61, col:70> 'char const[48]' lvalue ->c 0x561ff396d820
|             |   `-CXXMemberCallExpr 0x561ff3ca1c30 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x561ff3ca1c00 <col:61> '<bound member function type>' ->xanno 0x561ff3c9a928
|             |       `-CXXThisExpr 0x561ff3ca1bf0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x561ff3ca1cf0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x561ff3ca1c80 <col:74> 'int' lvalue ParmVar 0x561ff3960950 'i' 'int'
|-CXXMethodDecl 0x561ff3960c98 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x561ff3960b08 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x561ff3960b80 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x561ff3ca2568 <col:42, line:500:5>
|   |-ParenExpr 0x561ff3ca22f8 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x561ff3ca22c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561ff3ca1f70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561ff3ca1f40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561ff3ca1e50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561ff3ca1e38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561ff3ca1df8 <col:23> 'int' lvalue ParmVar 0x561ff3960b08 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561ff3ca1e18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561ff3ca1f20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561ff3ca1f08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561ff3ca1e70 <col:33> 'int' lvalue ParmVar 0x561ff3960b08 'i' 'int'
|   |   |     `-BinaryOperator 0x561ff3ca1ee8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561ff3ca1ed0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561ff3ca1e90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561ff3c9ad10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561ff3ca1eb0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x561ff3ca1fd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561ff3ca1fb0 <col:60> 'int' 0
|   |   `-CallExpr 0x561ff3ca2228 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561ff3ca2210 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561ff3ca21f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561ff37f4160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561ff3ca2268 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3ca2040 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x561ff3ca2280 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3ca2078 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561ff3ca2298 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561ff3ca20b0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x561ff3ca22b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561ff3ca21d8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561ff3ca21c0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561ff3ca2180 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x561ff3ca2548 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x561ff3ca24f8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x561ff3ca24c8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x561ff3ca2468 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x561ff3ca2438 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x561ff3ca23e8 <col:48, col:57> 'char [48]' lvalue ->c 0x561ff396d820
|     |     |   `-CXXMemberCallExpr 0x561ff3ca23c8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x561ff3ca2398 <col:48> '<bound member function type>' ->xanno 0x561ff3c9aac8
|     |     |       `-CXXThisExpr 0x561ff3ca2388 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x561ff3ca2450 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x561ff3ca2418 <col:61> 'int' lvalue ParmVar 0x561ff3960b08 'i' 'int'
|     `-ImplicitCastExpr 0x561ff3ca2530 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x561ff3ca2510 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x561ff3960b80 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x561ff3960e58 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x561ff3960d60 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x561ff3ca2cc8 <col:35, line:513:5>
|   |-ParenExpr 0x561ff3ca29d8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x561ff3ca29a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561ff3ca2700 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561ff3ca26d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561ff3ca25e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561ff3ca25c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561ff3ca2588 <col:23> 'int' lvalue ParmVar 0x561ff3960d60 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561ff3ca25a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561ff3ca26b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561ff3ca2698 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561ff3ca2600 <col:33> 'int' lvalue ParmVar 0x561ff3960d60 'i' 'int'
|   |   |     `-BinaryOperator 0x561ff3ca2678 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561ff3ca2660 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561ff3ca2620 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561ff3c9ad10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561ff3ca2640 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x561ff3ca2760 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561ff3ca2740 <col:60> 'int' 0
|   |   `-CallExpr 0x561ff3ca2908 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561ff3ca28f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561ff3ca28d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561ff37f4160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561ff3ca2948 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3ca27d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x561ff3ca2960 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3ca2808 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561ff3ca2978 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561ff3ca2840 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x561ff3ca2990 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561ff3ca28b8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561ff3ca28a0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561ff3ca2860 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x561ff3ca2cb8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x561ff3ca2ca0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x561ff3ca2c88 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x561ff3ca2c58 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x561ff3ca2bd0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x561ff3ca2ba0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x561ff3ca2b50 <col:60, col:69> 'char const[48]' lvalue ->c 0x561ff396d820
|             |   `-CXXMemberCallExpr 0x561ff3ca2b30 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x561ff3ca2b00 <col:60> '<bound member function type>' ->xanno 0x561ff3c9a928
|             |       `-CXXThisExpr 0x561ff3ca2af0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x561ff3ca2bb8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x561ff3ca2b80 <col:73> 'int' lvalue ParmVar 0x561ff3960d60 'i' 'int'
|-CXXMethodDecl 0x561ff39610a8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x561ff3960f18 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x561ff3960f90 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x561ff3ca33d8 <col:41, line:528:5>
|   |-ParenExpr 0x561ff3ca3170 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x561ff3ca3140 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561ff3ca2e60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561ff3ca2e30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561ff3ca2d40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561ff3ca2d28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561ff3ca2ce8 <col:23> 'int' lvalue ParmVar 0x561ff3960f18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561ff3ca2d08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561ff3ca2e10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561ff3ca2df8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561ff3ca2d60 <col:33> 'int' lvalue ParmVar 0x561ff3960f18 'i' 'int'
|   |   |     `-BinaryOperator 0x561ff3ca2dd8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561ff3ca2dc0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561ff3ca2d80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561ff3c9ad10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561ff3ca2da0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x561ff3ca2ec0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561ff3ca2ea0 <col:60> 'int' 0
|   |   `-CallExpr 0x561ff3ca30a0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561ff3ca3088 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561ff3ca3068 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561ff37f4160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561ff3ca30e0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3ca2f30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x561ff3ca30f8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3ca2f68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561ff3ca3110 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561ff3ca2fa0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x561ff3ca3128 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561ff3ca3050 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561ff3ca3038 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561ff3ca2ff8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x561ff3ca33b8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x561ff3ca3368 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x561ff3ca3338 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x561ff3ca32e0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x561ff3ca32b0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x561ff3ca3260 <col:47, col:56> 'char [48]' lvalue ->c 0x561ff396d820
|     |     |   `-CXXMemberCallExpr 0x561ff3ca3240 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x561ff3ca3210 <col:47> '<bound member function type>' ->xanno 0x561ff3c9aac8
|     |     |       `-CXXThisExpr 0x561ff3ca3200 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x561ff3ca32c8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x561ff3ca3290 <col:60> 'int' lvalue ParmVar 0x561ff3960f18 'i' 'int'
|     `-ImplicitCastExpr 0x561ff3ca33a0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x561ff3ca3380 <col:65> 'int16_t':'short' lvalue ParmVar 0x561ff3960f90 'x' 'int16_t':'short'
|-CXXMethodDecl 0x561ff3961268 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x561ff3961170 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x561ff3ca3aa8 <col:36, line:541:5>
|   |-ParenExpr 0x561ff3ca3848 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x561ff3ca3818 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561ff3ca3570 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561ff3ca3540 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561ff3ca3450 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561ff3ca3438 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561ff3ca33f8 <col:23> 'int' lvalue ParmVar 0x561ff3961170 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561ff3ca3418 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561ff3ca3520 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561ff3ca3508 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561ff3ca3470 <col:33> 'int' lvalue ParmVar 0x561ff3961170 'i' 'int'
|   |   |     `-BinaryOperator 0x561ff3ca34e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561ff3ca34d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561ff3ca3490 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561ff3c9ad10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561ff3ca34b0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x561ff3ca35d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561ff3ca35b0 <col:60> 'int' 0
|   |   `-CallExpr 0x561ff3ca3778 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561ff3ca3760 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561ff3ca3740 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561ff37f4160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561ff3ca37b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3ca3640 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x561ff3ca37d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3ca3678 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561ff3ca37e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561ff3ca36b0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x561ff3ca3800 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561ff3ca3728 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561ff3ca3710 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561ff3ca36d0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x561ff3ca3a98 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x561ff3ca3a80 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x561ff3ca3a68 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x561ff3ca3a38 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x561ff3ca39e0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x561ff3ca39b0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x561ff3ca3960 <col:61, col:70> 'char const[48]' lvalue ->c 0x561ff396d820
|             |   `-CXXMemberCallExpr 0x561ff3ca3940 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x561ff3ca3910 <col:61> '<bound member function type>' ->xanno 0x561ff3c9a928
|             |       `-CXXThisExpr 0x561ff3ca3900 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x561ff3ca39c8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x561ff3ca3990 <col:74> 'int' lvalue ParmVar 0x561ff3961170 'i' 'int'
|-CXXMethodDecl 0x561ff3961438 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x561ff3961328 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x561ff39613a0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x561ff39614e8 <col:20>
| `-OptimizeNoneAttr 0x561ff3961540 <col:30>
|-CXXMethodDecl 0x561ff3961678 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x561ff3961580 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x561ff3ca4178 <col:35, line:562:5>
|   |-ParenExpr 0x561ff3ca3f18 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x561ff3ca3ee8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561ff3ca3c40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561ff3ca3c10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561ff3ca3b20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561ff3ca3b08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561ff3ca3ac8 <col:23> 'int' lvalue ParmVar 0x561ff3961580 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561ff3ca3ae8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561ff3ca3bf0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561ff3ca3bd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561ff3ca3b40 <col:33> 'int' lvalue ParmVar 0x561ff3961580 'i' 'int'
|   |   |     `-BinaryOperator 0x561ff3ca3bb8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561ff3ca3ba0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561ff3ca3b60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561ff3c9ad10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561ff3ca3b80 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x561ff3ca3ca0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561ff3ca3c80 <col:60> 'int' 0
|   |   `-CallExpr 0x561ff3ca3e48 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561ff3ca3e30 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561ff3ca3e10 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561ff37f4160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561ff3ca3e88 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3ca3d10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x561ff3ca3ea0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3ca3d48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561ff3ca3eb8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561ff3ca3d80 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x561ff3ca3ed0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561ff3ca3df8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561ff3ca3de0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561ff3ca3da0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x561ff3ca4168 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x561ff3ca4150 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x561ff3ca4138 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x561ff3ca4108 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x561ff3ca40b0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x561ff3ca4080 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x561ff3ca4030 <col:60, col:69> 'char const[48]' lvalue ->c 0x561ff396d820
|             |   `-CXXMemberCallExpr 0x561ff3ca4010 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x561ff3ca3fe0 <col:60> '<bound member function type>' ->xanno 0x561ff3c9a928
|             |       `-CXXThisExpr 0x561ff3ca3fd0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x561ff3ca4098 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x561ff3ca4060 <col:73> 'int' lvalue ParmVar 0x561ff3961580 'i' 'int'
|-CXXMethodDecl 0x561ff3961888 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x561ff3961738 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x561ff39617b0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x561ff3ca4858 <col:41, line:577:5>
|   |-ParenExpr 0x561ff3ca45e8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x561ff3ca45b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561ff3ca4310 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561ff3ca42e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561ff3ca41f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561ff3ca41d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561ff3ca4198 <col:23> 'int' lvalue ParmVar 0x561ff3961738 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561ff3ca41b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561ff3ca42c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561ff3ca42a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561ff3ca4210 <col:33> 'int' lvalue ParmVar 0x561ff3961738 'i' 'int'
|   |   |     `-BinaryOperator 0x561ff3ca4288 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561ff3ca4270 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561ff3ca4230 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561ff3c9ad10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561ff3ca4250 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x561ff3ca4370 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561ff3ca4350 <col:60> 'int' 0
|   |   `-CallExpr 0x561ff3ca4518 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561ff3ca4500 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561ff3ca44e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561ff37f4160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561ff3ca4558 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3ca43e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x561ff3ca4570 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3ca4418 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561ff3ca4588 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561ff3ca4450 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x561ff3ca45a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561ff3ca44c8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561ff3ca44b0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561ff3ca4470 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x561ff3ca4838 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x561ff3ca47e8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x561ff3ca47b8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x561ff3ca4758 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x561ff3ca4728 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x561ff3ca46d8 <col:47, col:56> 'char [48]' lvalue ->c 0x561ff396d820
|     |     |   `-CXXMemberCallExpr 0x561ff3ca46b8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x561ff3ca4688 <col:47> '<bound member function type>' ->xanno 0x561ff3c9aac8
|     |     |       `-CXXThisExpr 0x561ff3ca4678 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x561ff3ca4740 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x561ff3ca4708 <col:60> 'int' lvalue ParmVar 0x561ff3961738 'i' 'int'
|     `-ImplicitCastExpr 0x561ff3ca4820 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x561ff3ca4800 <col:65> 'int32_t':'int' lvalue ParmVar 0x561ff39617b0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x561ff3961a48 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x561ff3961950 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x561ff3ca4f88 <col:36, line:591:5>
|   |-ParenExpr 0x561ff3ca4cc8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x561ff3ca4c98 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561ff3ca49f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561ff3ca49c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561ff3ca48d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561ff3ca48b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561ff3ca4878 <col:23> 'int' lvalue ParmVar 0x561ff3961950 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561ff3ca4898 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561ff3ca49a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561ff3ca4988 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561ff3ca48f0 <col:33> 'int' lvalue ParmVar 0x561ff3961950 'i' 'int'
|   |   |     `-BinaryOperator 0x561ff3ca4968 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561ff3ca4950 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561ff3ca4910 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561ff3c9ad10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561ff3ca4930 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x561ff3ca4a50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561ff3ca4a30 <col:60> 'int' 0
|   |   `-CallExpr 0x561ff3ca4bf8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561ff3ca4be0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561ff3ca4bc0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561ff37f4160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561ff3ca4c38 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3ca4ac0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x561ff3ca4c50 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3ca4af8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561ff3ca4c68 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561ff3ca4b30 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x561ff3ca4c80 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561ff3ca4ba8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561ff3ca4b90 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561ff3ca4b50 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x561ff3ca4f78 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x561ff3ca4f60 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x561ff3ca4f48 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x561ff3ca4f18 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x561ff3ca4e90 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x561ff3ca4e60 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x561ff3ca4e10 <col:61, col:70> 'char const[48]' lvalue ->c 0x561ff396d820
|             |   `-CXXMemberCallExpr 0x561ff3ca4df0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x561ff3ca4dc0 <col:61> '<bound member function type>' ->xanno 0x561ff3c9a928
|             |       `-CXXThisExpr 0x561ff3ca4db0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x561ff3ca4e78 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x561ff3ca4e40 <col:74> 'int' lvalue ParmVar 0x561ff3961950 'i' 'int'
|-CXXMethodDecl 0x561ff3961c98 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x561ff3961b08 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x561ff3961b80 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x561ff3ca5668 <col:42, line:606:5>
|   |-ParenExpr 0x561ff3ca53f8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x561ff3ca53c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561ff3ca5120 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561ff3ca50f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561ff3ca5000 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561ff3ca4fe8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561ff3ca4fa8 <col:23> 'int' lvalue ParmVar 0x561ff3961b08 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561ff3ca4fc8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561ff3ca50d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561ff3ca50b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561ff3ca5020 <col:33> 'int' lvalue ParmVar 0x561ff3961b08 'i' 'int'
|   |   |     `-BinaryOperator 0x561ff3ca5098 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561ff3ca5080 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561ff3ca5040 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561ff3c9ad10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561ff3ca5060 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x561ff3ca5180 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561ff3ca5160 <col:60> 'int' 0
|   |   `-CallExpr 0x561ff3ca5328 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561ff3ca5310 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561ff3ca52f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561ff37f4160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561ff3ca5368 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3ca51f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x561ff3ca5380 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3ca5228 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561ff3ca5398 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561ff3ca5260 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x561ff3ca53b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561ff3ca52d8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561ff3ca52c0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561ff3ca5280 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x561ff3ca5648 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x561ff3ca55f8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x561ff3ca55c8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x561ff3ca5568 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x561ff3ca5538 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x561ff3ca54e8 <col:48, col:57> 'char [48]' lvalue ->c 0x561ff396d820
|     |     |   `-CXXMemberCallExpr 0x561ff3ca54c8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x561ff3ca5498 <col:48> '<bound member function type>' ->xanno 0x561ff3c9aac8
|     |     |       `-CXXThisExpr 0x561ff3ca5488 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x561ff3ca5550 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x561ff3ca5518 <col:61> 'int' lvalue ParmVar 0x561ff3961b08 'i' 'int'
|     `-ImplicitCastExpr 0x561ff3ca5630 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x561ff3ca5610 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x561ff3961b80 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x561ff3961e30 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x561ff3961d60 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x561ff3ca5ed8 <col:33, line:620:5>
|   |-ParenExpr 0x561ff3ca5c50 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x561ff3ca5c20 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x561ff3ca5870 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561ff3ca5840 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561ff3ca56e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561ff3ca56c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561ff3ca5688 <col:23> 'int' lvalue ParmVar 0x561ff3961d60 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561ff3ca56a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561ff3ca5820 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x561ff3ca5808 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561ff3ca5700 <col:33> 'int' lvalue ParmVar 0x561ff3961d60 'i' 'int'
|   |   |     `-BinaryOperator 0x561ff3ca57e8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561ff3ca57d0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561ff3ca5720 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561ff3c9ad10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x561ff3ca57a8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x561ff3ca5790 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x561ff3ca5758 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x561ff3ca58d0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561ff3ca58b0 <col:79> 'int' 0
|   |   `-CallExpr 0x561ff3ca5b80 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x561ff3ca5b68 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561ff3ca5b48 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561ff37f4160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561ff3ca5bc0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3ca59b8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x561ff3ca5bd8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3ca5a00 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561ff3ca5bf0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561ff3ca5a38 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x561ff3ca5c08 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561ff3ca5b30 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561ff3ca5b18 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561ff3ca5ad8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x561ff3ca5ec8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x561ff3ca5eb0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x561ff3ca5e98 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x561ff3ca5e68 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x561ff3ca5de0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x561ff3ca5db0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x561ff3ca5d60 <col:67, col:76> 'char const[48]' lvalue ->c 0x561ff396d820
|             |   `-CXXMemberCallExpr 0x561ff3ca5d40 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x561ff3ca5d10 <col:67> '<bound member function type>' ->xanno 0x561ff3c9a928
|             |       `-CXXThisExpr 0x561ff3ca5d00 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x561ff3ca5dc8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x561ff3ca5d90 <col:80> 'int' lvalue ParmVar 0x561ff3961d60 'i' 'int'
|-CXXMethodDecl 0x561ff3962048 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x561ff3961ef0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x561ff3961f70 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x561ff3ca6730 <col:45, line:635:5>
|   |-ParenExpr 0x561ff3ca6478 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x561ff3ca6448 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x561ff3ca60e0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561ff3ca60b0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561ff3ca5f50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561ff3ca5f38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561ff3ca5ef8 <col:23> 'int' lvalue ParmVar 0x561ff3961ef0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561ff3ca5f18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561ff3ca6090 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x561ff3ca6078 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561ff3ca5f70 <col:33> 'int' lvalue ParmVar 0x561ff3961ef0 'i' 'int'
|   |   |     `-BinaryOperator 0x561ff3ca6058 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561ff3ca6040 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561ff3ca5f90 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561ff3c9ad10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x561ff3ca6018 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x561ff3ca6000 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x561ff3ca5fc8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x561ff3ca6140 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561ff3ca6120 <col:79> 'int' 0
|   |   `-CallExpr 0x561ff3ca63a8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x561ff3ca6390 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561ff3ca6370 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561ff37f4160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561ff3ca63e8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3ca61d8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x561ff3ca6400 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561ff3ca6220 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561ff3ca6418 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561ff3ca6258 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x561ff3ca6430 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561ff3ca6358 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561ff3ca6340 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561ff3ca62f8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x561ff3ca6710 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x561ff3ca6678 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x561ff3ca6648 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x561ff3ca65e8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x561ff3ca65b8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x561ff3ca6568 <col:54, col:63> 'char [48]' lvalue ->c 0x561ff396d820
|     |     |   `-CXXMemberCallExpr 0x561ff3ca6548 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x561ff3ca6518 <col:54> '<bound member function type>' ->xanno 0x561ff3c9aac8
|     |     |       `-CXXThisExpr 0x561ff3ca6508 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x561ff3ca65d0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x561ff3ca6598 <col:67> 'int' lvalue ParmVar 0x561ff3961ef0 'i' 'int'
|     `-CXXConstCastExpr 0x561ff3ca66e0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x561ff3ca66c8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x561ff3ca6690 <col:91> 'const void *' lvalue ParmVar 0x561ff3961f70 'x' 'const void *'
|-CXXMethodDecl 0x561ff3962118 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x561ff3ca67b8 <col:34, line:640:5>
|   `-ReturnStmt 0x561ff3ca67a8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x561ff3ca6790 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x561ff3ca6760 <col:16> 'Packet *' lvalue ->_data_packet 0x561ff3c9e3c8
|         `-CXXThisExpr 0x561ff3ca6750 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x561ff3962258 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x561ff39621c8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x561ff3c9f818 <col:46> 'bool' true
|-CXXMethodDecl 0x561ff39623d8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x561ff3962310 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x561ff3962480 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x561ff3962c30 <line:660:22> "" ""
| |-EnumConstantDecl 0x561ff3962580 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561ff3962ca0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3962560 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x561ff3962540 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x561ff3c941c0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x561ff3962610 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561ff3962cb8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff39625f0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x561ff39625d0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x561ff3c94250 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x561ff39626a0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561ff3962cd0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3962680 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x561ff3962660 <col:21> 'int' 0
| |-EnumConstantDecl 0x561ff3962730 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561ff3962ce8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3962710 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x561ff39626f0 <col:19> 'int' 16
| |-EnumConstantDecl 0x561ff39627c0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561ff3962d00 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff39627a0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x561ff3962780 <col:21> 'int' 16
| |-EnumConstantDecl 0x561ff3962850 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561ff3962d18 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3962830 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x561ff3962810 <col:19> 'int' 32
| |-EnumConstantDecl 0x561ff39628e0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561ff3962d30 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff39628c0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x561ff39628a0 <col:19> 'int' EnumConstant 0x561ff3962730 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x561ff3962970 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561ff3962d48 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3962950 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x561ff3962930 <col:19> 'int' EnumConstant 0x561ff3962850 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x561ff3962a40 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561ff3962d60 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3962a20 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x561ff3962a00 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x561ff39629c0 <col:23> 'int' EnumConstant 0x561ff3962970 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x561ff39629e0 <col:40> 'int' 2
| |-EnumConstantDecl 0x561ff3962b10 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561ff3962d78 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3962af0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x561ff3962ad0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x561ff3962a90 <col:23> 'int' EnumConstant 0x561ff3962970 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x561ff3962ab0 <col:40> 'int' 4
| `-EnumConstantDecl 0x561ff3962be0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x561ff3962d90 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561ff3962bc0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x561ff3962ba0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x561ff3962b60 <col:23> 'int' EnumConstant 0x561ff3962970 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x561ff3962b80 <col:40> 'int' 8
|-CXXMethodDecl 0x561ff3962dd0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x561ff3962e70 <col:68> "" ""
|-CXXMethodDecl 0x561ff3962f08 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x561ff3962fa8 <col:45> "" ""
|-CXXMethodDecl 0x561ff3963040 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x561ff39630e0 <col:57> "" ""
|-CXXMethodDecl 0x561ff396a1f8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x561ff396a298 <col:45> "" ""
|-CXXMethodDecl 0x561ff396a330 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x561ff396a3d0 <col:57> "" ""
|-CXXMethodDecl 0x561ff396a460 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x561ff396a500 <col:51> "" ""
|-CXXMethodDecl 0x561ff396a590 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x561ff396a630 <col:63> "" ""
|-CXXMethodDecl 0x561ff396a6c0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x561ff396a760 <col:53> "" ""
|-CXXMethodDecl 0x561ff396a7f0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x561ff396a890 <col:65> "" ""
|-CXXMethodDecl 0x561ff396a9a8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x561ff396a918 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x561ff396aa50 <col:61> "" ""
|-CXXMethodDecl 0x561ff396abe8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x561ff396aad8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x561ff396ab50 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x561ff396ac98 <col:67> "" ""
|-CXXMethodDecl 0x561ff396adb0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x561ff396ad20 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x561ff396ae58 <col:63> "" ""
|-CXXMethodDecl 0x561ff396aff0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x561ff396aee0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x561ff396af58 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x561ff396b0a0 <col:69> "" ""
|-CXXMethodDecl 0x561ff396b1b8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x561ff396b128 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x561ff396b260 <col:63> "" ""
|-CXXMethodDecl 0x561ff396b3f8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x561ff396b2e8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x561ff396b360 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x561ff396b4a8 <col:69> "" ""
|-CXXMethodDecl 0x561ff396b5c0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x561ff396b530 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x561ff396b668 <col:62> "" ""
|-CXXMethodDecl 0x561ff396b800 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x561ff396b6f0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x561ff396b768 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x561ff396b8b0 <col:68> "" ""
|-CXXMethodDecl 0x561ff396b9c8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x561ff396b938 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x561ff396ba70 <col:63> "" ""
|-CXXMethodDecl 0x561ff396bc08 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x561ff396baf8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x561ff396bb70 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x561ff396bcb8 <col:69> "" ""
|-CXXMethodDecl 0x561ff396bd48 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x561ff396bde8 <col:64> "" ""
|-CXXMethodDecl 0x561ff396be78 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x561ff396bf18 <col:52> "" ""
|-CXXMethodDecl 0x561ff396bfa8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x561ff396c048 <col:67> "" ""
|-CXXMethodDecl 0x561ff396c0d8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x561ff396c178 <col:55> "" ""
|-CXXMethodDecl 0x561ff396c290 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x561ff396c200 <col:32> col:35 'int'
| `-DeprecatedAttr 0x561ff396c338 <col:58> "" ""
|-CXXMethodDecl 0x561ff396c4d0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x561ff396c3c0 <col:33> col:36 'int'
| |-ParmVarDecl 0x561ff396c438 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x561ff396c580 <col:62> "" ""
|-CXXMethodDecl 0x561ff396c698 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x561ff396c608 <col:32> col:35 'int'
| `-DeprecatedAttr 0x561ff396c740 <col:58> "" ""
|-CXXMethodDecl 0x561ff396c8d8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x561ff396c7c8 <col:33> col:36 'int'
| |-ParmVarDecl 0x561ff396c840 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x561ff396c988 <col:62> "" ""
|-CXXMethodDecl 0x561ff396caa0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x561ff396ca10 <col:34> col:37 'int'
| `-DeprecatedAttr 0x561ff396cb48 <col:60> "" ""
|-CXXMethodDecl 0x561ff396cce0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x561ff396cbd0 <col:34> col:37 'int'
| |-ParmVarDecl 0x561ff396cc48 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x561ff396cd90 <col:64> "" ""
|-CXXMethodDecl 0x561ff396cea8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x561ff396ce18 <col:32> col:35 'int'
| `-DeprecatedAttr 0x561ff396cf50 <col:58> "" ""
|-CXXMethodDecl 0x561ff396d0e8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x561ff396cfd8 <col:33> col:36 'int'
| |-ParmVarDecl 0x561ff396d050 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x561ff396d198 <col:62> "" ""
|-CXXMethodDecl 0x561ff396d2b0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x561ff396d220 <col:33> col:36 'int'
| `-DeprecatedAttr 0x561ff396d358 <col:59> "" ""
|-CXXMethodDecl 0x561ff396d4f0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x561ff396d3e0 <col:33> col:36 'int'
| |-ParmVarDecl 0x561ff396d458 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x561ff396d5a0 <col:63> "" ""
|-AccessSpecDecl 0x561ff396d610 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x561ff396d638 prev 0x561ff3c9a800 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x561ff396d730 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x561ff396d820 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x561ff396d948 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x561ff396dac8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x561ff396dc48 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x561ff396ddc8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x561ff3ca6938 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x561ff3ca71a8 <col:11>
| |-CXXDestructorDecl 0x561ff3ca6a10 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x561ff3ca6b48 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x561ff3ca6b48
| | `-ParmVarDecl 0x561ff3ca6c58 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x561ff3ca6cf8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x561ff3ca6cf8
| | `-ParmVarDecl 0x561ff3ca6e08 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x561ff3ca9b38 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x561ff3ca9c48 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x561ff3ca9ec8 <col:11>
| |   `-ReturnStmt 0x561ff3ca9eb8 <col:11>
| |     `-UnaryOperator 0x561ff3ca9ea0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x561ff3ca9e90 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x561ff3ca9cb8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x561ff3ca9cb8
|   `-ParmVarDecl 0x561ff3ca9dc8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x561ff396de30 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x561ff396df48 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x561ff396dfe8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x561ff396e050 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x561ff396e0b8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x561ff396e120 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x561ff3c9e170 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x561ff3c9e230 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x561ff3c9e290 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x561ff3c9e2f0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x561ff3ca6848 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x561ff396dfe8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x561ff3ca71b8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x561ff3ca7210 <col:12>
| |-CXXConstructorDecl 0x561ff3ca6e78 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x561ff3ca6e78
| | `-ParmVarDecl 0x561ff3ca6f88 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x561ff3ca7028 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x561ff3ca7028
| | `-ParmVarDecl 0x561ff3ca7138 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x561ff3ca9220 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x561ff3c9e368 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x561ff3c9e3c8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x561ff3c9e430 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x561ff3c9e498 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x561ff3c9e500 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x561ff3c9e568 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x561ff3c9e5c8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x561ff3c9e628 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x561ff3c9e690 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x561ff3c9e718 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x561ff3c9e368 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x561ff3ca67e0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x561ff3c9e5c8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x561ff3ca7220 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x561ff3ca7280 <col:21, line:755:5>
|-CXXConstructorDecl 0x561ff3c9e8b8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x561ff3c9e7f8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x561ff3c9e9b0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x561ff3c9eb98 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x561ff3c9eaa0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x561ff3c9ee68 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x561ff3c9ec50 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x561ff3c9ecc8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x561ff3c9ed40 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff3c9f088 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x561ff3c9ef38 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x561ff3c9efb0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x561ff3c9f358 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x561ff3c9f148 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x561ff3c9f1c0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x561ff3c9f238 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x561ff3c9f4b0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x561ff3c9f420 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff3c9f5f8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x561ff3c9f568 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x561ff3c9f6f0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff3cffe38 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x561ff3d07ed0 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x561ff3d089c8 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff3cfc738 prev 0x561ff3cca110 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x561ff3cfc830 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x561ff3cfc8c0 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x561ff3cfc920 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x561ff3cfc9c8 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| `-CXXRecordDecl 0x561ff3cfcae8 <col:5, col:12> col:12 implicit struct do_nothing_t
|-CXXConstructorDecl 0x561ff3cfcc88 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x561ff3cfcbc8 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x561ff3cfced8 <line:38:5, col:43> col:5 Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x561ff3cfcd48 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x561ff3cfcdc8 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x561ff3cfd030 <line:43:5, col:27> col:5 Timer 'void (Element *)'
| `-ParmVarDecl 0x561ff3cfcfa0 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x561ff3cfd1b8 <line:47:5, col:21> col:5 Timer 'void (Task *)'
| `-ParmVarDecl 0x561ff3cfd0f0 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x561ff3cfd368 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x561ff3cfd2a8 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x561ff3cfd460 <line:55:5, line:58:5> line:55:12 ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x561ff3d08ba0 <col:21, line:58:5>
|   `-IfStmt 0x561ff3d08b88 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x561ff3d08af0 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x561ff3d08ac0 <col:6> '<bound member function type>' ->scheduled 0x561ff3cfdcb8
|     |   `-ImplicitCastExpr 0x561ff3d08b10 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x561ff3d08ab0 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x561ff3d08b68 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x561ff3d08b38 <col:6> '<bound member function type>' ->unschedule 0x561ff3cff2e0
|         `-CXXThisExpr 0x561ff3d08b28 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x561ff3cfd560 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x561ff3d08d40 <col:26, line:65:5>
|   |-BinaryOperator 0x561ff3d08c60 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x561ff3d08bf8 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x561ff3d07ed0
|   | | `-MemberExpr 0x561ff3d08bc8 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x561ff3d07f98
|   | |   `-CXXThisExpr 0x561ff3d08bb8 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x561ff3d08c48 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561ff3d08c28 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x561ff3d083f8 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x561ff3d08d20 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x561ff3d08c90 <col:2> 'void *' lvalue ->_thunk 0x561ff3d08018
|     | `-CXXThisExpr 0x561ff3d08c80 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x561ff3d08cf8 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x561ff3d08cc0 <col:20> 'int' 1
|-CXXMethodDecl 0x561ff3cfd6a0 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x561ff3cfd610 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x561ff3d08ea0 <col:52, line:71:5>
|   |-CStyleCastExpr 0x561ff3d08d90 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x561ff3d08d60 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x561ff3cfd610 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x561ff3d08e80 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x561ff3d08e50 <col:2> '<bound member function type>' ->assign 0x561ff3cfd560
|       `-CXXThisExpr 0x561ff3d08e40 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x561ff3cfd870 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x561ff3cfd758 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x561ff3cfd7d8 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x561ff3d09020 <col:58, line:79:5>
|   |-BinaryOperator 0x561ff3d08f68 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x561ff3d08f00 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x561ff3d07ed0
|   | | `-MemberExpr 0x561ff3d08ed0 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x561ff3d07f98
|   | |   `-CXXThisExpr 0x561ff3d08ec0 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x561ff3d08f50 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x561ff3d08f30 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x561ff3cfd758 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x561ff3d09000 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x561ff3d08f98 <col:2> 'void *' lvalue ->_thunk 0x561ff3d08018
|     | `-CXXThisExpr 0x561ff3d08f88 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x561ff3d08fe8 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x561ff3d08fc8 <col:11> 'void *' lvalue ParmVar 0x561ff3cfd7d8 'user_data' 'void *'
|-CXXMethodDecl 0x561ff3cfd9c0 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x561ff3cfd930 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x561ff3d091b8 <col:35, line:87:5>
|   |-BinaryOperator 0x561ff3d090e8 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x561ff3d09080 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x561ff3d07ed0
|   | | `-MemberExpr 0x561ff3d09050 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x561ff3d07f98
|   | |   `-CXXThisExpr 0x561ff3d09040 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x561ff3d090d0 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561ff3d090b0 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x561ff3d085d0 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x561ff3d09198 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x561ff3d09118 <col:2> 'void *' lvalue ->_thunk 0x561ff3d08018
|     | `-CXXThisExpr 0x561ff3d09108 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x561ff3d09180 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x561ff3d09168 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x561ff3d09148 <col:11> 'Element *' lvalue ParmVar 0x561ff3cfd930 'element' 'Element *'
|-CXXMethodDecl 0x561ff3cfdb08 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x561ff3cfda78 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x561ff3d09350 <col:29, line:94:5>
|   |-BinaryOperator 0x561ff3d09280 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x561ff3d09218 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x561ff3d07ed0
|   | | `-MemberExpr 0x561ff3d091e8 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x561ff3d07f98
|   | |   `-CXXThisExpr 0x561ff3d091d8 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x561ff3d09268 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561ff3d09248 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x561ff3d087a8 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x561ff3d09330 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x561ff3d092b0 <col:2> 'void *' lvalue ->_thunk 0x561ff3d08018
|     | `-CXXThisExpr 0x561ff3d092a0 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x561ff3d09318 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x561ff3d09300 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x561ff3d092e0 <col:11> 'Task *' lvalue ParmVar 0x561ff3cfda78 'task' 'Task *'
|-CXXMethodDecl 0x561ff3cfdbf8 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x561ff3d09430 <col:37, line:100:5>
|   `-ReturnStmt 0x561ff3d09420 <line:99:2, col:19>
|     `-BinaryOperator 0x561ff3d09400 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x561ff3d093d0 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x561ff3d09380 <col:9> 'Element *const' lvalue ->_owner 0x561ff3d08078
|       |   `-CXXThisExpr 0x561ff3d09370 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x561ff3d093e8 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x561ff3d093b0 <col:19> 'int' 0
|-CXXMethodDecl 0x561ff3cfdcb8 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x561ff3d094f0 <col:35, line:105:5>
|   `-ReturnStmt 0x561ff3d094e0 <line:104:2, col:23>
|     `-BinaryOperator 0x561ff3d094c0 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x561ff3d094a8 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x561ff3d09458 <col:9> 'const int' lvalue ->_schedpos1 0x561ff3cffd88
|       |   `-CXXThisExpr 0x561ff3d09448 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x561ff3d09488 <col:23> 'int' 0
|-CXXMethodDecl 0x561ff3cfdd78 <line:116:5, line:118:5> line:116:29 used expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x561ff3d09558 <col:51, line:118:5>
|   `-ReturnStmt 0x561ff3d09548 <line:117:2, col:9>
|     `-MemberExpr 0x561ff3d09518 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x561ff3cffde8
|       `-CXXThisExpr 0x561ff3d09508 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x561ff3cfde38 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x561ff3d09ab0 <col:37, line:136:5>
|   `-IfStmt 0x561ff3d09a88 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x561ff3d09618 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x561ff3d09600 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x561ff3d095e0 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x561ff3d095b0 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x561ff3c61a28
|     |       `-MemberExpr 0x561ff3d09580 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x561ff3cffde8
|     |         `-CXXThisExpr 0x561ff3d09570 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x561ff3d099f8 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x561ff3d099e0 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x561ff3d099b0 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x561ff3d09998 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x561ff3d09960 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x561ff3d09948 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x561ff3d09928 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x561ff3c8d310 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x561ff3d098c8 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x561ff3d098b0 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x561ff3d097d8 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x561ff3d097c0 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x561ff3d097a0 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x561ff3c8cfc8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x561ff3d09740 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x561ff3d09640 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x561ff3cffde8
|     |         |     |   `-CXXThisExpr 0x561ff3d09630 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x561ff3d09788 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x561ff3d09770 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x561ff3d09720 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x561ff3d09708 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x561ff3d096a8 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x561ff3ad8b30 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x561ff3d09910 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x561ff3d098f8 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x561ff3d09890 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x561ff3d09878 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x561ff3d09848 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x561ff3ad9800 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x561ff3d09a78 <line:135:6, col:13>
|       `-CXXConstructExpr 0x561ff3d09a48 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x561ff3d09a18 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x561ff3cffde8
|           `-CXXThisExpr 0x561ff3d09a08 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x561ff3cfdef8 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x561ff3d09b98 <col:35, line:141:5>
|   `-ReturnStmt 0x561ff3d09b88 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x561ff3d09b50 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x561ff3d09b20 <col:9, col:17> '<bound member function type>' ->router 0x561ff3ce0850
|         `-ImplicitCastExpr 0x561ff3d09b70 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x561ff3d09b08 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x561ff3d09ad8 <col:9> 'Element *const' lvalue ->_owner 0x561ff3d08078
|               `-CXXThisExpr 0x561ff3d09ac8 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x561ff3cfdfb8 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x561ff3d09c18 <col:37, line:146:5>
|   `-ReturnStmt 0x561ff3d09c08 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x561ff3d09bf0 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x561ff3d09bc0 <col:9> 'Element *const' lvalue ->_owner 0x561ff3d08078
|         `-CXXThisExpr 0x561ff3d09bb0 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x561ff3cfe078 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x561ff3d09c98 <col:41, line:151:5>
|   `-ReturnStmt 0x561ff3d09c88 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x561ff3d09c70 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x561ff3d09c40 <col:9> 'RouterThread *const' lvalue ->_thread 0x561ff3d080d8
|         `-CXXThisExpr 0x561ff3d09c30 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x561ff3cfe140 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x561ff3cfe300 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x561ff3cfe1f0 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x561ff3cfe268 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x561ff3d089b8 <col:50> 'bool' false
|-CXXMethodDecl 0x561ff3cfe488 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x561ff3cfe3c0 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x561ff3cfe5d0 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x561ff3cfe540 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x561ff3cfe718 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x561ff3cfe688 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x561ff3cfe860 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x561ff3cfe7d0 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x561ff3cfe9a8 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x561ff3cfe918 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x561ff3cfea70 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x561ff3d09e00 <col:32, line:223:5>
|   `-ExprWithCleanups 0x561ff3d09de8 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x561ff3d09d90 <col:2, col:47> 'void'
|       |-MemberExpr 0x561ff3d09cc0 <col:2> '<bound member function type>' ->schedule_at_steady 0x561ff3cfe5d0
|       | `-CXXThisExpr 0x561ff3d09cb0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x561ff3d09dd0 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x561ff3d09db8 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x561ff3d09d70 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x561ff3d09d58 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x561ff3d09d28 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x561ff3ad9800 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x561ff3cfebb0 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x561ff3cfeb20 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x561ff3cfecf8 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x561ff3cfec68 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561ff3d09f88 <col:56, line:241:5>
|   `-ExprWithCleanups 0x561ff3d09f70 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x561ff3d09f18 <col:2, col:40> 'void'
|       |-MemberExpr 0x561ff3d09e28 <col:2> '<bound member function type>' ->schedule_after 0x561ff3cfebb0
|       | `-CXXThisExpr 0x561ff3d09e18 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x561ff3d09f58 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x561ff3d09f40 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x561ff3d09ed8 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x561ff3d09ea8 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x561ff3d09e68 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x561ff3cfec68 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x561ff3d09ec0 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x561ff3d09e88 <col:38> 'int' 0
|-CXXMethodDecl 0x561ff3cfee40 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x561ff3cfedb0 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561ff3d0a1f8 <col:58, line:249:5>
|   `-ExprWithCleanups 0x561ff3d0a1e0 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x561ff3d0a188 <col:2, col:49> 'void'
|       |-MemberExpr 0x561ff3d09fb0 <col:2> '<bound member function type>' ->schedule_after 0x561ff3cfebb0
|       | `-CXXThisExpr 0x561ff3d09fa0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x561ff3d0a1c8 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x561ff3d0a1b0 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x561ff3d0a130 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x561ff3d0a118 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x561ff3d0a088 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x561ff3c63818 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x561ff3d0a170 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x561ff3d0a158 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x561ff3d0a068 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x561ff3cfedb0 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff3cfef88 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x561ff3cfeef8 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x561ff3d0a3d8 <col:58, line:261:5>
|   `-ExprWithCleanups 0x561ff3d0a3c0 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x561ff3d0a368 <col:2, col:38> 'void'
|       |-MemberExpr 0x561ff3d0a220 <col:2> '<bound member function type>' ->schedule_at_steady 0x561ff3cfe5d0
|       | `-CXXThisExpr 0x561ff3d0a210 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x561ff3d0a3a8 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x561ff3d0a390 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x561ff3d0a330 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x561ff3d0a318 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x561ff3d0a2f8 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x561ff3c8cfc8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x561ff3d0a2c8 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x561ff3d0a2b0 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x561ff3d0a260 <col:21> 'Timestamp' lvalue ->_expiry_s 0x561ff3cffde8
|             |     `-CXXThisExpr 0x561ff3d0a250 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x561ff3d0a290 <col:33> 'const Timestamp' lvalue ParmVar 0x561ff3cfeef8 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x561ff3cff0d0 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x561ff3cff040 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561ff3d0a6b0 <col:58, line:270:5>
|   `-ExprWithCleanups 0x561ff3d0a698 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x561ff3d0a640 <col:2, col:79> 'void'
|       |-MemberExpr 0x561ff3d0a400 <col:2> '<bound member function type>' ->schedule_at_steady 0x561ff3cfe5d0
|       | `-CXXThisExpr 0x561ff3d0a3f0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x561ff3d0a680 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x561ff3d0a668 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x561ff3d0a600 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x561ff3d0a538 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x561ff3d0a520 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x561ff3d0a4b0 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x561ff3d0a480 <col:31, col:41> '<bound member function type>' .sec 0x561ff3adb2f8
|             | |     `-ImplicitCastExpr 0x561ff3d0a4d0 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x561ff3d0a450 <col:31> 'Timestamp' lvalue ->_expiry_s 0x561ff3cffde8
|             | |         `-CXXThisExpr 0x561ff3d0a440 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x561ff3d0a508 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x561ff3d0a4e8 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x561ff3cff040 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x561ff3d0a5c8 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x561ff3d0a598 <col:60, col:70> '<bound member function type>' .subsec 0x561ff3adb9f0
|                 `-ImplicitCastExpr 0x561ff3d0a5e8 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x561ff3d0a568 <col:60> 'Timestamp' lvalue ->_expiry_s 0x561ff3cffde8
|                     `-CXXThisExpr 0x561ff3d0a558 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x561ff3cff218 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x561ff3cff188 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561ff3d0a9e8 <col:60, line:279:5>
|   `-ExprWithCleanups 0x561ff3d0a9d0 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x561ff3d0a978 <col:2, col:65> 'void'
|       |-MemberExpr 0x561ff3d0a6d8 <col:2> '<bound member function type>' ->schedule_at_steady 0x561ff3cfe5d0
|       | `-CXXThisExpr 0x561ff3d0a6c8 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x561ff3d0a9b8 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x561ff3d0a9a0 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x561ff3d0a940 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x561ff3d0a928 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x561ff3d0a908 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x561ff3c8cfc8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x561ff3d0a8a8 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x561ff3d0a890 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x561ff3d0a718 <col:21> 'Timestamp' lvalue ->_expiry_s 0x561ff3cffde8
|             |     `-CXXThisExpr 0x561ff3d0a708 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x561ff3d0a8f0 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x561ff3d0a8d8 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x561ff3d0a838 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x561ff3d0a820 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x561ff3d0a7f0 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x561ff3c63818 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x561ff3d0a878 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x561ff3d0a860 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x561ff3d0a7d0 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x561ff3cff188 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561ff3cff2e0 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x561ff3cff3a0 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x561ff3d0aeb0 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x561ff3d0aa40 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x561ff3d0aa10 <col:2> '<bound member function type>' ->unschedule 0x561ff3cff2e0
|   |   `-CXXThisExpr 0x561ff3d0aa00 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x561ff3d0ae98 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x561ff3d0ae60 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x561ff3d0ae48 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x561ff3d0aaf8 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x561ff3cad9d8 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x561ff3d0aa70 <col:2> 'Timestamp' lvalue ->_expiry_s 0x561ff3cffde8
|       | `-CXXThisExpr 0x561ff3d0aa60 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x561ff3d0aae0 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x561ff3d0aab0 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x561ff3cff460 <line:304:5, line:310:5> line:304:29 used adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x561ff3d0b208 <col:42, line:310:5>
|   |-IfStmt 0x561ff3d0b050 <line:306:2, line:307:23>
|   | |-CallExpr 0x561ff3d0af80 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x561ff3d0af68 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x561ff3d0af08 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x561ff3c7eb00 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x561ff3d0b040 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x561ff3d0b028 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x561ff3d0aff8 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x561ff3d0afe0 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x561ff3d0afb0 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x561ff3d0b1f8 <line:309:2, col:33>
|     `-ExprWithCleanups 0x561ff3d0b1e0 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x561ff3d0b1b0 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x561ff3d0b198 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x561ff3d0b158 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x561ff3d0b140 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x561ff3d0b110 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x561ff3c63b30 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x561ff3d0b180 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x561ff3d0b0f0 <col:30> 'int' 500
|-CXXMethodDecl 0x561ff3cff5a0 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x561ff3cff510 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x561ff3cff648 <col:69> "" ""
|-CXXMethodDecl 0x561ff3cff758 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x561ff3cff6c8 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x561ff3cff800 <col:70> "" ""
|-CXXMethodDecl 0x561ff3cff910 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x561ff3cff880 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x561ff3cff9b8 <col:71> "" ""
|-CXXMethodDecl 0x561ff3cffac8 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x561ff3cffa38 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x561ff3cffb70 <col:72> "" ""
|-EnumDecl 0x561ff3cffbe0 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x561ff3cffce0 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x561ff3cffd30 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561ff3cffcc0 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x561ff3cffca0 <col:25> 'int' 1
|-AccessSpecDecl 0x561ff3cffd48 <line:339:3, col:10> col:3 private
|-FieldDecl 0x561ff3cffd88 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x561ff3cffde8 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x561ff3cffe38 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x561ff3d07ed0 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x561ff3d089c8 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x561ff3d07f98 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x561ff3d08018 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x561ff3d08078 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x561ff3d080d8 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x561ff3d08228 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x561ff3d08138 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x561ff3d083f8 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x561ff3d082e0 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x561ff3d08360 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x561ff3d085d0 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x561ff3d084b8 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x561ff3d08538 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x561ff3d087a8 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x561ff3d08690 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x561ff3d08710 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x561ff3d08978 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<16>
         0 |   char [16] x
           | [sizeof=16, dsize=16, align=1,
           |  nvsize=16, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x561ff3d13e08 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 16
|-PackedAttr 0x561ff3e388f8 <line:167:18>
|-CXXRecordDecl 0x561ff3e389b8 prev 0x561ff3d13e08 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x561ff3e38ac8 <line:166:5, col:13> col:10 x 'char [16]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array = type { [16 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array = type { [16 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff3e19a90 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561ff3e19ba8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x561ff3e19c38 <col:16, col:22> col:16 public
|-EnumDecl 0x561ff3e19c60 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x561ff3e19d60 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x561ff3e19fb0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3e19d40 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x561ff3e19d20 <col:21> 'int' 0
| |-EnumConstantDecl 0x561ff3e19df0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x561ff3e19fc8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3e19dd0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x561ff3e19db0 <col:24> 'int' 22
| |-EnumConstantDecl 0x561ff3e19e80 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x561ff3e19fe0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3e19e60 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x561ff3e19e40 <col:24> 'int' 34
| |-EnumConstantDecl 0x561ff3e19f10 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x561ff3e19ff8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561ff3e19ef0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x561ff3e19ed0 <col:25> 'int' 95
| `-EnumConstantDecl 0x561ff3e19f60 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x561ff3e1b970 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x561ff3e1bda8 <col:7>
|-CXXConstructorDecl 0x561ff3e1ba78 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x561ff3e1ba78
| `-ParmVarDecl 0x561ff3e1bb88 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x561ff3e1bc28 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x561ff3e1bd38 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x561ff3e81720 <col:7>
`-CXXDestructorDecl 0x561ff3e1dea8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561ff3e1a028 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x561ff3e1a188 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x561ff3e1a218 <col:32, col:38> col:32 public
|-TypedefDecl 0x561ff3e1a250 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x561ff38ad6b0 'uint32_t' sugar
|   |-Typedef 0x561ff37be4c8 'uint32_t'
|   `-TypedefType 0x561ff37975a0 '__uint32_t' sugar
|     |-Typedef 0x561ff3797198 '__uint32_t'
|     `-BuiltinType 0x561ff3755620 'unsigned int'
|-CXXConstructorDecl 0x561ff3e1a398 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x561ff3e1a2c0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x561ff3e1b878 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x561ff3e1bdb8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x561ff3e1b130 'base' 'int'
| | `-ImplicitCastExpr 0x561ff3e1b918 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x561ff3e1b8d8 <col:16> 'int' lvalue ParmVar 0x561ff3e1a2c0 'b' 'int'
| `-CompoundStmt 0x561ff3e1be28 <col:19, line:1046:5>
|-CXXMethodDecl 0x561ff3e1a890 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x561ff3e1a460 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x561ff3e1a4e0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x561ff3e1a558 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x561ff3e1a5d8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x561ff3e1a698 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x561ff3e1a718 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x561ff3e1ace8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x561ff3e1a960 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x561ff3e1ac48 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x561ff3e1aa08 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x561ff3e1aaa8 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x561ff3e1ab20 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x561ff3e1b898 <col:82> 'const ArgContext' lvalue Var 0x561ff3e0f138 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x561ff3e1cd58 <col:94, line:1067:5>
| |   |-DeclStmt 0x561ff3e1bfb8 <line:1054:9, col:64>
| |   | `-VarDecl 0x561ff3e1be48 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x561ff3e1bf70 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x561ff3e1c1d8 <line:1055:9, col:91>
| |   | `-VarDecl 0x561ff3e1bfe8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x561ff3e1c1b0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x561ff3e1c190 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x561ff3e1c140 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x561ff3e1c120 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x561ff3e1c0c8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x561ff3e1c078 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x561ff3e1c0a8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x561ff3e1c108 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x561ff3e1c0e8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x561ff3e1c170 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x561ff3e1c338 <line:1056:9, col:27>
| |   | `-VarDecl 0x561ff3e1c2d0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x561ff3e1c780 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x561ff3e1c6b0 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x561ff3e1c630 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x561ff3c8aa78 0x561ff3adcb88 0x561ff3adc860 0x561ff3a6d730 0x561ff39c06f0 0x561ff39c03a0 0x561ff39bfc90 0x561ff3980c60
| |   | | |-CallExpr 0x561ff3e1c570 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x561ff3e1c360 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x561ff3e1c410 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x561ff3e1c3e0 <col:19, col:23> '<bound member function type>' .begin 0x561ff39b08b8
| |   | | | |   `-DeclRefExpr 0x561ff3e1c3c0 <col:19> 'const String' lvalue ParmVar 0x561ff3e1aa08 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x561ff3e1c480 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x561ff3e1c450 <col:32, col:36> '<bound member function type>' .end 0x561ff39b0ad0
| |   | | | |   `-DeclRefExpr 0x561ff3e1c430 <col:32> 'const String' lvalue ParmVar 0x561ff3e1aa08 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x561ff3e1c4a0 <col:43> 'const bool' lvalue Var 0x561ff3e1be48 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x561ff3e1c508 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x561ff3e1c4e8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x561ff3e1c530 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x561ff3e1c2d0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x561ff3e1c550 <col:73> 'const int' lvalue Var 0x561ff3e1bfe8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x561ff3e1c610 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x561ff3e1c5e0 <col:16, col:20> '<bound member function type>' .end 0x561ff39b0ad0
| |   | |     `-DeclRefExpr 0x561ff3e1c5c0 <col:16> 'const String' lvalue ParmVar 0x561ff3e1aa08 'str' 'const String &'
| |   | `-BinaryOperator 0x561ff3e1c760 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x561ff3e1c6f8 <col:13> 'int' lvalue ->status 0x561ff3e1b198
| |   |   | `-CXXThisExpr 0x561ff3e1c6e8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x561ff3e1c748 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x561ff3e1c728 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x561ff3e19df0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x561ff3e1c9d0 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x561ff3e1c8b8 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x561ff3e1c8a0 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x561ff3e1c888 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x561ff3e1c7a8 <col:13> 'int' lvalue ->status 0x561ff3e1b198
| |   | | |     `-CXXThisExpr 0x561ff3e1c798 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x561ff3e1c868 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x561ff3e1c838 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x561ff3e1c7e8 <col:23> 'int' lvalue ->status 0x561ff3e1b198
| |   | |   |   `-CXXThisExpr 0x561ff3e1c7d8 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x561ff3e1c850 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x561ff3e1c818 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x561ff3e19e80 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x561ff3e1c9b0 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x561ff3e1c950 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x561ff3e1c8f8 <col:13, col:18> '<bound member function type>' .error 0x561ff3dc1530
| |   |   | | `-DeclRefExpr 0x561ff3e1c8d8 <col:13> 'const ArgContext' lvalue ParmVar 0x561ff3e1ab20 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x561ff3e1c978 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x561ff3e1c928 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x561ff3e1c9a0 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x561ff3e1c990 <col:20> 'bool' false
| |   |-DeclStmt 0x561ff3e1cba8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x561ff3e1cb50 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x561ff3e1cae0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x561ff3e1cd08 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x561ff3e1cbc0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x561ff3a9b2f8
| |   | |-DeclRefExpr 0x561ff3e1cc08 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x561ff3e1c2d0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x561ff3e1ccd8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x561ff3e1cc50 <col:64> 'V' lvalue ParmVar 0x561ff3e1aaa8 'result' 'V &'
| |   `-ReturnStmt 0x561ff3e1cd48 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x561ff3e1cd38 <col:16> 'bool' true
| `-CXXMethodDecl 0x561ff3e84ea8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x561ff3e84c80 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x561ff3e84d58 <col:46, col:49> col:49 used result 'int &'
|   |-ParmVarDecl 0x561ff3e84dc0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x561ff3e8a150 <col:94, line:1067:5>
|     |-DeclStmt 0x561ff3e856b8 <line:1054:9, col:64>
|     | `-VarDecl 0x561ff3e854d8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x561ff3e85648 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x561ff3e85618 <col:36, col:55> 'const bool' lvalue Var 0x561ff3a8eb18 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x561ff3e85898 <line:1055:9, col:91>
|     | `-VarDecl 0x561ff3e856d0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x561ff3e85818 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x561ff3e85800 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x561ff3e857e0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x561ff3e857c0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x561ff3e857a0 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x561ff3e85768 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x561ff3e85748 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x561ff3e1c0a8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x561ff3e85788 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x561ff3e1c0e8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x561ff3e1c170 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x561ff3e85a30 <line:1056:9, col:27>
|     | `-VarDecl 0x561ff3e859c8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x561ff3e85eb8 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x561ff3e85e60 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x561ff3e85d18 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x561ff3e85ce8 <col:13> '<bound member function type>' ->parse 0x561ff3e1a890
|     | | | | `-CXXThisExpr 0x561ff3e85cd8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x561ff3e85b78 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x561ff3e85b48 <col:19, col:23> '<bound member function type>' .begin 0x561ff39b08b8
|     | | | |   `-DeclRefExpr 0x561ff3e85b28 <col:19> 'const String' lvalue ParmVar 0x561ff3e84c80 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x561ff3e85be8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x561ff3e85bb8 <col:32, col:36> '<bound member function type>' .end 0x561ff39b0ad0
|     | | | |   `-DeclRefExpr 0x561ff3e85b98 <col:32> 'const String' lvalue ParmVar 0x561ff3e84c80 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x561ff3e85d88 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x561ff3e85d68 <col:43> 'const bool' lvalue Var 0x561ff3e854d8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x561ff3e85c70 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x561ff3e85c58 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x561ff3e85c38 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
|     | | | |-ImplicitCastExpr 0x561ff3e85da0 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x561ff3e85c98 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x561ff3e859c8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x561ff3e85dd8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x561ff3e85db8 <col:73> 'const int' lvalue Var 0x561ff3e856d0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x561ff3e85e40 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x561ff3e85e10 <col:16, col:20> '<bound member function type>' .end 0x561ff39b0ad0
|     | |     `-DeclRefExpr 0x561ff3e85df0 <col:16> 'const String' lvalue ParmVar 0x561ff3e84c80 'str' 'const String &'
|     | `-BinaryOperator 0x561ff3e85e98 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x561ff3e1c6f8 <col:13> 'int' lvalue ->status 0x561ff3e1b198
|     |   | `-CXXThisExpr 0x561ff3e1c6e8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x561ff3e85e80 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x561ff3e1c728 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x561ff3e19df0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x561ff3e86030 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x561ff3e85f50 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x561ff3e85f38 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x561ff3e85f20 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x561ff3e1c7a8 <col:13> 'int' lvalue ->status 0x561ff3e1b198
|     | | |     `-CXXThisExpr 0x561ff3e1c798 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x561ff3e85f00 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x561ff3e85ed0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x561ff3e1c7e8 <col:23> 'int' lvalue ->status 0x561ff3e1b198
|     | |   |   `-CXXThisExpr 0x561ff3e1c7d8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x561ff3e85ee8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x561ff3e1c818 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x561ff3e19e80 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x561ff3e86010 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x561ff3e85fc0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x561ff3e85f90 <col:13, col:18> '<bound member function type>' .error 0x561ff3dc1530
|     |   | | `-DeclRefExpr 0x561ff3e85f70 <col:13> 'const ArgContext' lvalue ParmVar 0x561ff3e84dc0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x561ff3e85fe8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x561ff3e1c928 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x561ff3e86000 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x561ff3e1c990 <col:20> 'bool' false
|     |-DeclStmt 0x561ff3e89a90 <line:1064:9, col:64>
|     | `-TypedefDecl 0x561ff3e86520 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
|     |   `-ElaboratedType 0x561ff3e864d0 'typename make_unsigned<int>::type' sugar
|     |     `-TypedefType 0x561ff3e864b0 'make_unsigned<int>::type' sugar
|     |       |-Typedef 0x561ff3e86440 'type'
|     |       `-ElaboratedType 0x561ff3e863f0 'typename integer_traits<int>::unsigned_type' sugar
|     |         `-TypedefType 0x561ff3e863d0 'integer_traits<int>::unsigned_type' sugar
|     |           |-Typedef 0x561ff3a8ec70 'unsigned_type'
|     |           `-BuiltinType 0x561ff3755620 'unsigned int'
|     |-CallExpr 0x561ff3e8a0e0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x561ff3e8a0c8 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x561ff3e8a048 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x561ff3e89f28 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x561ff3a9b2f8 'extract_integer')
|     | |-ImplicitCastExpr 0x561ff3e8a128 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x561ff3e8a110 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x561ff3e89af0 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x561ff3e859c8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x561ff3e89bb8 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
|     |   `-DeclRefExpr 0x561ff3e89b68 <col:64> 'int':'int' lvalue ParmVar 0x561ff3e84d58 'result' 'int &'
|     `-ReturnStmt 0x561ff3e8a140 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x561ff3e1cd38 <col:16> 'bool' true
|-FunctionTemplateDecl 0x561ff3e1b0a8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x561ff3e1ad58 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x561ff3e1b008 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x561ff3e1ae08 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x561ff3e1aea8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x561ff3e1af20 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x561ff3e1b8b8 <col:71> 'const ArgContext' lvalue Var 0x561ff3e0f138 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x561ff3e1d4c8 <col:83, line:1083:5>
| |   |-DeclStmt 0x561ff3e1ce20 <line:1071:9, col:12>
| |   | `-VarDecl 0x561ff3e1cdb8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x561ff3e1d4a0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x561ff3e1d0b0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x561ff3e1cf38 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x561ff3e1cf00 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x561ff3e1ce48 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x561ff3e1cea0 <col:31> 'const String' lvalue ParmVar 0x561ff3e1ae08 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x561ff3e1cec0 <col:36> 'V' lvalue Var 0x561ff3e1cdb8 'x' 'V'
| |     | |   `-DeclRefExpr 0x561ff3e1cee0 <col:39> 'const ArgContext' lvalue ParmVar 0x561ff3e1af20 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x561ff3e1d090 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x561ff3e1d070 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x561ff3e1d058 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x561ff3e1d040 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x561ff3e1cf60 <col:17> 'int' lvalue ->status 0x561ff3e1b198
| |     |     |     `-CXXThisExpr 0x561ff3e1cf50 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x561ff3e1d020 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x561ff3e1cff0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x561ff3e1cfa0 <col:27> 'int' lvalue ->status 0x561ff3e1b198
| |     |       |   `-CXXThisExpr 0x561ff3e1cf90 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x561ff3e1d008 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x561ff3e1cfd0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x561ff3e19e80 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x561ff3e1d0e0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x561ff3e1d0d0 <col:20> 'bool' false
| |     `-IfStmt 0x561ff3e1d478 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x561ff3e1d180 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x561ff3e1d150 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x561ff3e1d100 <col:18> 'int' lvalue ->status 0x561ff3e1b198
| |       | |   `-CXXThisExpr 0x561ff3e1d0f0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x561ff3e1d168 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x561ff3e1d130 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x561ff3e19e80 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x561ff3e1d3b8 <col:42, line:1079:9>
| |       | |-CallExpr 0x561ff3e1d360 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x561ff3e1d1b0 <line:1076:13> '<bound member function type>' ->range_error 0x561ff3e1b7a8
| |       | | | `-CXXThisExpr 0x561ff3e1d1a0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x561ff3e1d1e0 <col:25> 'const ArgContext' lvalue ParmVar 0x561ff3e1af20 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x561ff3e1d2c0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x561ff3e1d338 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x561ff3e1d318 <col:43> 'V' lvalue Var 0x561ff3e1cdb8 'x' 'V'
| |       | `-ReturnStmt 0x561ff3e1d3a8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x561ff3e1d398 <col:20> 'bool' false
| |       `-CompoundStmt 0x561ff3e1d458 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x561ff3e1d418 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x561ff3e1d3d8 <col:13> 'V' lvalue ParmVar 0x561ff3e1aea8 'result' 'V &'
| |         | `-DeclRefExpr 0x561ff3e1d3f8 <col:22> 'V' lvalue Var 0x561ff3e1cdb8 'x' 'V'
| |         `-ReturnStmt 0x561ff3e1d448 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x561ff3e1d438 <col:20> 'bool' true
| `-CXXMethodDecl 0x561ff3e84868 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x561ff3e84640 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x561ff3e84718 <col:35, col:38> col:38 used result 'int &'
|   |-ParmVarDecl 0x561ff3e84780 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x561ff3e854b8 <col:83, line:1083:5>
|     |-DeclStmt 0x561ff3e84af0 <line:1071:9, col:12>
|     | `-VarDecl 0x561ff3e84a88 <col:9, col:11> col:11 used x 'int':'int'
|     `-IfStmt 0x561ff3e85490 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x561ff3e85120 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x561ff3e85048 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x561ff3e85010 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x561ff3e84fc8 <col:14> '<bound member function type>' ->parse_saturating 0x561ff3e84ea8
|       | |   | `-CXXThisExpr 0x561ff3e84fb8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x561ff3e84b60 <col:31> 'const String' lvalue ParmVar 0x561ff3e84640 'str' 'const String &'
|       | |   |-DeclRefExpr 0x561ff3e84b80 <col:36> 'int':'int' lvalue Var 0x561ff3e84a88 'x' 'int':'int'
|       | |   `-DeclRefExpr 0x561ff3e84ba0 <col:39> 'const ArgContext' lvalue ParmVar 0x561ff3e84780 'args' 'const ArgContext &'
|       | `-ParenExpr 0x561ff3e85100 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x561ff3e850e0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x561ff3e850c8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x561ff3e850b0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x561ff3e1cf60 <col:17> 'int' lvalue ->status 0x561ff3e1b198
|       |     |     `-CXXThisExpr 0x561ff3e1cf50 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x561ff3e85090 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x561ff3e85060 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x561ff3e1cfa0 <col:27> 'int' lvalue ->status 0x561ff3e1b198
|       |       |   `-CXXThisExpr 0x561ff3e1cf90 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x561ff3e85078 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x561ff3e1cfd0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x561ff3e19e80 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x561ff3e85140 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x561ff3e1d0d0 <col:20> 'bool' false
|       `-IfStmt 0x561ff3e85468 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x561ff3e85180 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x561ff3e85150 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x561ff3e1d100 <col:18> 'int' lvalue ->status 0x561ff3e1b198
|         | |   `-CXXThisExpr 0x561ff3e1d0f0 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x561ff3e85168 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x561ff3e1d130 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x561ff3e19e80 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x561ff3e853a0 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x561ff3e85310 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x561ff3e1d1b0 <line:1076:13> '<bound member function type>' ->range_error 0x561ff3e1b7a8
|         | | | `-CXXThisExpr 0x561ff3e1d1a0 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x561ff3e851a0 <col:25> 'const ArgContext' lvalue ParmVar 0x561ff3e84780 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x561ff3e85378 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x561ff3e85348 <col:31, col:50> 'const bool' lvalue Var 0x561ff3a8eb18 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x561ff3e852e8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x561ff3e852d0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x561ff3e852b8 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x561ff3e85298 <col:43> 'int':'int' lvalue Var 0x561ff3e84a88 'x' 'int':'int'
|         | `-ReturnStmt 0x561ff3e85390 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x561ff3e1d398 <col:20> 'bool' false
|         `-CompoundStmt 0x561ff3e85448 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x561ff3e85418 <line:1080:13, col:22> 'int':'int' lvalue '='
|           | |-DeclRefExpr 0x561ff3e853c0 <col:13> 'int':'int' lvalue ParmVar 0x561ff3e84718 'result' 'int &'
|           | `-ImplicitCastExpr 0x561ff3e85400 <col:22> 'int':'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x561ff3e853e0 <col:22> 'int':'int' lvalue Var 0x561ff3e84a88 'x' 'int':'int'
|           `-ReturnStmt 0x561ff3e85438 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x561ff3e1d438 <col:20> 'bool' true
|-FieldDecl 0x561ff3e1b130 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x561ff3e1b198 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x561ff3e1b1e8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x561ff3e1b4a0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x561ff3e1b228 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x561ff3e1b2a8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x561ff3e1b320 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x561ff3e1b3a0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x561ff3e1b7a8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x561ff3e1b570 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x561ff3e1b5e8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x561ff3e1b680 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x561ff3e1dd28 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x561ff3e1dd28
| `-ParmVarDecl 0x561ff3e1de38 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x561ff3e1dfb8 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x561ff3e1e0c8 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x561ff3e81730 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x561ff3e81700 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x561ff3e816d0 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x561ff3e816a0 <col:7> 'IntArg' lvalue ParmVar 0x561ff3e1e0c8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x561ff3e1b130 'base' 'int'
| | `-ImplicitCastExpr 0x561ff3e81828 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x561ff3e817f8 <col:7> 'int' xvalue .base 0x561ff3e1b130
| |     `-CXXStaticCastExpr 0x561ff3e817c8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x561ff3e81798 <col:7> 'IntArg' lvalue ParmVar 0x561ff3e1e0c8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x561ff3e1b198 'status' 'int'
| | `-ImplicitCastExpr 0x561ff3e818f8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x561ff3e818c8 <col:7> 'int' xvalue .status 0x561ff3e1b198
| |     `-CXXStaticCastExpr 0x561ff3e81898 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x561ff3e81868 <col:7> 'IntArg' lvalue ParmVar 0x561ff3e1e0c8 '' 'IntArg &&'
| `-CompoundStmt 0x561ff3e81950 <col:7>
`-CXXDestructorDecl 0x561ff3e80890 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x561ff3e22600 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x561ff3e22858 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x561ff3e807b8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x561ff3e80d30 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x561ff3e80d10 <<invalid sloc>> 'int'
| `-CompoundStmt 0x561ff3e80da0 <col:19>
|-CXXConstructorDecl 0x561ff3e80998 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x561ff3e80998
| `-ParmVarDecl 0x561ff3e80aa8 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x561ff3e80b48 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x561ff3e80c58 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x561ff3e81960 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x561ff3e81680 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x561ff3e81650 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x561ff3e81620 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x561ff3e80c58 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x561ff3e819d0 <col:19>
`-CXXDestructorDecl 0x561ff3e80de0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
